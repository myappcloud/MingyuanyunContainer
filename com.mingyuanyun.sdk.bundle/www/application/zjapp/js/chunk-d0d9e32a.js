(window.webpackJsonp_module_entry_zjapp_=window.webpackJsonp_module_entry_zjapp_||[]).push([["chunk-d0d9e32a"],{"3bbe":function(e,t,r){"use strict";r.d(t,"a",(function(){return p}));var n=r("5e8d"),i=r("162a"),a=r("bcc78");function p(e){return Object(n.a)().then((function(){var t=a.a.templetPlanV1UpdateReviewer.url;return i.a.post(t,null,e)}))}},"8b31":function(e,t,r){"use strict";(function(e){var n=r("fc9f");t.a={getTempletPlanList:function(e,t,r){var i="select * from templet_plan tp where proj_id = ?",a=[e];return r||(i+="and           (              exists               (                  select 1 from templet_plan_detail t                  where t.templet_plan_id = tp.id and (t.in_charge_by = ? or exists                       (select 1 from templet_plan_detail_reviewer r where r.templet_plan_detail_id = t.id and  r.user_id = ?)                  )              )          )",a=a.concat([t,t])),i+=" order by tp.created_on desc",n.a.query(i,a)},getTempletList:function(e,t){var r="select t.*, u.name as in_charge_by_name, c.name as contractor_name from templet_plan_detail t               join user u on u.id = t.in_charge_by               left join contractor c on c.id = t.contractor               where t.templet_plan_id = ? "+(t?"and (t.name like '%".concat(t,"%' ) "):"")+"order by t.sort";return n.a.query(r,[e])},getTempletView:function(e,t){return n.a.queryOne("select t.*, tp.name as templet_plan_name, c.name as contractor_name,              (select count(1) cnt from templet_plan_detail_reviewer r where r.templet_plan_detail_id = t.id and r.user_id = ? and ifnull(r.review_at, '') = '') as canReview           from templet_plan_detail t           join templet_plan tp on tp.id = t.templet_plan_id          left join contractor c on c.id = t.contractor           where t.id = ?",[t,e])},getTempletCheckpoints:function(e){return n.a.query("select * from templet_plan_checkpoint where templet_plan_detail_id = ? order by sort",[e])},getReviewList:function(e){return n.a.query("select * from templet_plan_detail_reviewer r where templet_plan_detail_id = ? order by review_at desc",[e])},delReviewList:function(e){return n.a.executeSql("delete from templet_plan_detail_reviewer where templet_plan_detail_id = ?",[e])},deleteReview:function(t){var r="delete from templet_plan_detail_reviewer where "+("id in ("+e.map(t,(function(){return"?"})).join(", ")+")");return n.a.executeSql(r,t)},insertReview:function(e){return n.a.insertObject("templet_plan_detail_reviewer",e)},getTempletReviewStatusList:function(e,t){return n.a.query("select t.*, \n      (select count(1) from templet_plan_detail_reviewer r where r.templet_plan_detail_id = t.id and r.user_id = ?) as isReviewer,\n      (select count(1) cnt from templet_plan_detail_reviewer r where r.templet_plan_detail_id = t.id and r.user_id = ? and ifnull(r.review_at, '') != '') as isReviewComplete,\n      (select count(1) cnt from templet_plan_detail_reviewer r where r.templet_plan_detail_id = t.id and ifnull(r.review_at, '') = '') as noReviewNum\n      from templet_plan_detail t\n      where t.templet_plan_id = ?",[t,t,e])},saveReview:function(e,t){return n.a.update("templet_plan_detail_reviewer",t,{id:e})},saveTemplet:function(e,t){return n.a.update("templet_plan_detail",t,{id:e})},saveCheckpoint:function(e,t){return n.a.update("templet_plan_checkpoint",t,{id:e})},getTempletData:function(e){return n.a.queryOne("select tpd.*, tpd.id as templet_id, tpd.name as templet_name, tp.id as plan_id, tp.name as plan_name, up.id as proj_id, up.name as proj_name,           c.id as contractor_id, c.name as contractor_name           from templet_plan_detail tpd           left join templet_plan tp on tp.id = tpd.templet_plan_id           left join user_project up on up.id = tp.proj_id           left join contractor c on c.id = tpd.contractor           where tpd.id = ?",[e])},getTempletDetail:function(e){return n.a.queryOne("select * from templet_plan_detail where id = ?",[e])},getProblemList:function(e){return n.a.query("select tpr.*, tp.name as plan_name, tpd.name as templet_name,           case when tpr.status = '草稿' then tpr.created_on else 0 end as order_weight           from templet_problem tpr           left join templet_plan_detail tpd on tpd.id = tpr.templet_plan_detail_id           left join templet_plan tp on tp.id = tpd.templet_plan_id           where templet_plan_detail_id = ? order by order_weight desc, tpr.repair_deadline asc, tpr.created_on desc",[e])},getProblemDetail:function(e){return n.a.queryOne("select tpr.*, tpr.templet_plan_id as plan_id, tp.name as plan_name, tpd.id as templet_id, tpd.name as templet_name,           up.name as proj_name,           u.id as repair_id , u.name as repair_name,           ur.id as reinspect_id , ur.name as reinspect_name,           ure.id as regist_id , ure.name as regist_name, ure.mobile as regist_mobile, ure.is_im_user as regist_is_im_user,           c.id as contractor_id, c.name as contractor_name           from templet_problem tpr           left join templet_plan_detail tpd on tpd.id = tpr.templet_plan_detail_id           left join templet_plan tp on tp.id = tpd.templet_plan_id           left join user_project up on up.id = tpr.proj_id           left join templet_problem_repair tpre on tpre.templet_problem_id = tpr.id           left join user u on u.id = tpr.repair_by           left join user ur on ur.id = tpr.reinspect_by           left join user ure on ure.id = tpr.regist_by           left join contractor c on c.id = tpr.contractor_id           where tpr.id = ?",[e])},getProblemRepair:function(e){return n.a.queryOne("select u.* from templet_problem_repair tpr           left join user u on u.id = tpr.repair           where tpr.templet_problem_id = ?",[e])},getProblemRepairBy:function(e){return n.a.queryOne("select u.* from templet_problem tp           left join user u on u.id = tp.repair_by           where tp.id = ?",[e])},insertProblem:function(e){return n.a.insertObject("templet_problem",e)},updateProblem:function(e){return n.a.update("templet_problem",e,{id:e.id})},deleteProblem:function(e){return n.a.delete("templet_problem",{id:e.id})},insertRepair:function(e){return n.a.insertObject("templet_problem_repair",e)},deleteRepair:function(e){return n.a.delete("templet_problem_repair",{templet_problem_id:e})},getProblemReinspect:function(e){return n.a.queryOne("select u.*, tprb.reinspect_date as reinspect_date, tprb.reinspect_image_file as reinspect_image_file, tprb.reinspect_remark as reinspect_remark,           tprb.id as reinspect_record_id           from templet_problem_reinspect_by tprb           left join user u on u.id = tprb.reinspect           where tprb.templet_problem_id = ?",[e])},insertRepository:function(e){return n.a.insertObject("templet_problem_reinspect_by",e)},deleteRepository:function(e){return n.a.delete("templet_problem_reinspect_by",{templet_problem_id:e})},updateRepositoryByProblem:function(e,t){return n.a.update("templet_problem_reinspect_by",e,{templet_problem_id:t})},updateRepositoryByProblemAndUser:function(e,t,r){return n.a.update("templet_problem_reinspect_by",e,{templet_problem_id:t,reinspect:r})},getProblemCc:function(e){return n.a.query("select u.*, tpc.type as type from templet_problem_cc tpc           left join user u on u.id = tpc.cc           where tpc.templet_problem_id = ? and type = '被抄送'",[e])},getProblemAllCc:function(e){return n.a.query("select u.*, tpc.type as type from templet_problem_cc tpc           left join user u on u.id = tpc.cc           where tpc.templet_problem_id = ?",[e])},insertCc:function(e){return n.a.insertObject("templet_problem_cc",e)},deleteCc:function(e){return n.a.delete("templet_problem_cc",{templet_problem_id:e,type:"被抄送"})}}}).call(this,r("391c"))},c130:function(e,t,r){"use strict";(function(e){r("5ab2"),r("e10e"),r("6d57"),r("06a2");var n=r("28f8"),i=(r("e697"),r("fd50")),a=r("e2a7"),p=r("3bd5"),o=r("ed08"),d=r("48f4"),l=r("c745"),c=r("8b31"),_=r("e87d"),u=r("0136"),m=r("6bf2"),s=r.n(m),f=r("4360"),b=r("3bbe");function g(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function h(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?g(Object(r),!0).forEach((function(t){Object(n.a)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var y={getTempletPlanList:function(e){return l.a.hasRole(33).then((function(t){return c.a.getTempletPlanList(e,p.a.getUser().user_id,t)}))},getTempletList:function(t,r){return c.a.getTempletList(t,r).then((function(r){var n=p.a.getUser();return c.a.getTempletReviewStatusList(t,n.user_id).then((function(t){console.log("reviewData ======",t);var i={},a={},p={};return e.each(t||[],(function(e){i[e.id]=e.isReviewer,a[e.id]=e.isReviewComplete,p[e.id]=e.noReviewNum})),e.each(r,(function(e){e.isInChargeBy=e.in_charge_by===n.user_id,e.isReviewer=i[e.id]>0,e.isReviewComplete=a[e.id]>0,e.noReviewNum=p[e.id]})),r}))})).then((function(t){var r=s()().startOf("day");return e.each(t,(function(e){var t;if(!e.deadline)return e.leftday="",void(e.overday="");var n=s()(e.deadline).startOf("day");if("已验收"===e.status){e.leftday="";var i=s()(e.complete_time).startOf("day");i.isAfter(n)?(t=i.diff(n,"days"),e.overday="超时"+t+"天验收"):e.overday=""}else if(r.isAfter(n))e.leftday="",t=r.diff(n,"days"),e.overday="超时"+t+"天";else{e.overday="";var a=n.diff(r,"days");e.leftday=0===a?"今天":a<=7?"还剩"+a+"天":""}})),t}))},getTempletView:function(t){var r=p.a.getUser();return c.a.getTempletView(t,r.user_id).then((function(n){return n?(n.canSubmit=n.in_charge_by===r.user_id&&!n.complete_time,n.canReview=n.canReview>0&&!n.canSubmit,_.a.getUser(n.in_charge_by).then((function(e){n.in_charge_by=e})).then((function(){return c.a.getReviewList(t).then((function(t){return _.a.getUsersByIds(e.map(t,"user_id")).then((function(r){n.participants=r,n.reviews=e.filter(t,(function(e){return!!e.review_at})),n.remark=n.remark||"",e.each(n.reviews,(function(t){t.user=e.find(r,e.matches({id:t.user_id})),t.pictures=JSON.parse(t.pictures||"[]"),t.review_at=t.review_at?s()(t.review_at).format("YYYY-MM-DD HH:mm"):""}));var i=p.a.getUser();n.myReview=e.find(t,(function(e){return!e.review_at&&e.user_id===i.user_id})),n.myReview&&(n.myReview.pictures=JSON.parse(n.myReview.pictures||"[]"),n.myReview.remark=n.myReview.remark||"")}))}))})).then((function(){return c.a.getTempletCheckpoints(t).then((function(t){n.checkpoints=e.map(t,(function(e){return h(h({},e),{},{images:JSON.parse(e.images||"[]")})}))}))})).then((function(){return n.pictures=JSON.parse(n.pictures||"[]"),n.complete_time=n.complete_time?s()(n.complete_time).format("YYYY-MM-DD HH:mm"):"",n}))):n}))},saveReview:function(e){return c.a.saveReview(e.id,{pictures:JSON.stringify(e.pictures),remark:e.remark,review_at:e.review_at})},saveChangeUser:function(t,r){return Object(b.a)({user_id:t,templet_plan_detail_id:r}).then((function(e){return a.a.alert("修改成功"),i.a.all([c.a.delReviewList(r),e])})).then((function(t){var r=t[1];return i.a.all(e.map(r,(function(e){return c.a.insertReview(e)})))})).catch((function(e){return $log.log("修改参与人错误信息",e),a.a.alert("修改失败")}))},submitReview:function(t,r){return e.isEmpty(t.remark)?i.a.reject({msg:"点评内容必填"}):(t.review_at=o.a.now(),y.saveReview(t).then((function(){return d.default.addSyncGroup([["templet_plan_detail_reviewer",t.id]])})).then((function(){return u.a.saveTodo({biz_id:t.id,type:2,module_code:"templet-plan",proj_id:r})})))},save:function(t){return c.a.saveTemplet(t.id,{status:t.status,complete_time:t.complete_time,remark:t.remark}).then((function(){return Promise.all(e.map(t.checkpoints||[],(function(e){return c.a.saveCheckpoint(e.id,{images:JSON.stringify(e.images)})})))}))},submit:function(e){return e.status="已验收",e.complete_time=o.a.now(),y.save(e).then((function(){return d.default.addSyncGroup([["templet_plan_detail",e.id],["templet_plan_checkpoint",e.id]])})).then((function(){var t=p.a.getUser();return c.a.getTempletView(e.id,t.user_id).then((function(t){var r;return r=t?1:2,u.a.saveTodo({biz_id:e.id,type:r,module_code:"templet-plan",proj_id:e.proj_id})}))}))},getProblemList:function(t){return c.a.getProblemList(t).then((function(t){var r=s()().format("YYYY-MM-DD");return e.each(t,(function(e){var t=s()(e.repair_deadline).format("YYYY-MM-DD");e.is_timeout=t<r})),t}))},getProblemDetail:function(t){return c.a.getProblemDetail(t).then((function(e){return e||i.a.reject("获取问题详情失败"),{id:e.id,status:e.status,project:{id:e.proj_id,name:e.proj_name},plan:{id:e.plan_id,name:e.plan_name},templet:{id:e.templet_id,name:e.templet_name},image_file:JSON.parse(e.image_file||"[]"),remark:e.remark,regist:{id:e.regist_id,name:e.regist_name,mobile:e.regist_mobile,is_im_user:e.regist_is_im_user},regist_date:e.regist_date,deadline:e.deadline||7,repair:{id:e.repair_id,name:e.repair_name},repair_deadline:e.repair_deadline,repair_image_file:JSON.parse(e.repair_image_file||"[]"),repair_remark:e.repair_remark,repair_date:e.repair_date,contractor:{id:e.contractor_id,name:e.contractor_name},reinspect:{id:e.reinspect_id,name:e.reinspect_name},reinspect_image_file:[],reinspect_remark:"",reinspect_date:"",created_by:e.created_by,sent_back_times:e.sent_back_times,sent_back_image_file:JSON.parse(e.sent_back_image_file||"[]"),sent_back_remark:e.sent_back_remark,close_date:e.close_date,close_reason:e.close_reason}})).then((function(e){return"草稿"===e.status||"待整改"===e.status?c.a.getProblemRepair(e.id).then((function(t){return e.repair=t||{},e})):c.a.getProblemRepairBy(e.id).then((function(t){return e.repair=t||{},e}))})).then((function(t){return c.a.getProblemReinspect(t.id).then((function(r){return e.isEmpty(r)?(t.reinspect={},t.reinspect_image_file=[],t.reinspect_remark="",t.reinspect_date="",t.reinspect_record_id=""):(t.reinspect=r,t.reinspect_image_file=JSON.parse(r.reinspect_image_file||"[]"),t.reinspect_remark=r.reinspect_remark||"",t.reinspect_date=r.reinspect_date||"",t.reinspect_record_id=r.reinspect_record_id||""),t}))})).then((function(e){return c.a.getProblemCc(e.id).then((function(t){return e.cc=t||[],e}))}))},createNewProblem:function(e){var t=p.a.getUser();return c.a.getTempletData(e).then((function(e){return{project:{id:e.proj_id,name:e.proj_name},plan:{id:e.plan_id,name:e.plan_name},templet:{id:e.templet_id,name:e.templet_name},image_file:[],remark:"",deadline:7,repair:{},contractor:{id:e.contractor_id,name:e.contractor_name},reinspect:{id:t.user_id,name:t.user_name},cc:[],regist:{}}}))},saveProblem:function(e){var t=p.a.getUser().user_id,r=new Date;r.setDate(r.getDate()+e.deadline);var n,i={id:e.id,proj_id:e.project.id,templet_plan_id:e.plan.id,templet_plan_detail_id:e.templet.id,contractor_id:e.contractor.id,remark:e.remark||"",image_file:JSON.stringify(e.image_file||[]),status:e.status||"草稿",deadline:e.deadline||7,repair_by:e.repair.id||"",repair_deadline:s()(r).format("YYYY-MM-DD"),repair_image_file:JSON.stringify(e.repair_image_file||[]),repair_remark:e.repair_remark||"",reinspect_by:e.reinspect.id||"",regist_by:e.regist_by||"",regist_date:e.regist_date||""};return i.id?n=c.a.updateProblem(i):(i.id=o.a.uuid(),i.created_on=o.a.now(),i.created_by=t,e.id=i.id,n=c.a.insertProblem(i)),n.then((function(){return y.saveRepair(e)})).then((function(){return y.saveReinspect(e)})).then((function(){return y.saveCc(e,e.cc)})).then((function(){return d.default.setLocalChanged(),i.id}))},addProblem:function(t){if(f.a.state.global.isPhotoRequired.TEMPLET_PROBLEM&&e.isEmpty(t.image_file))return i.a.reject("请拍摄问题照片");var r=p.a.getUser().user_id;return t.remark?e.isEmpty(t.repair)?i.a.reject("请选择整改人"):e.isEmpty(t.contractor)?i.a.reject("请选择责任单位"):e.isEmpty(t.reinspect)?i.a.reject("请选择复验人"):(t.status="待整改",t.regist_by=r,t.regist_date=o.a.now(),y.saveProblem(t).then((function(){return y.appendToCC(t.id,"登记人")})).then((function(){return d.default.addSyncGroup([["templet_problem",t.id],["templet_problem_repair",t.id],["templet_problem_reinspect_by",t.id],["templet_problem_cc",t.id]])})).then((function(){var e=2;return t.repair.id===r&&(e=1),u.a.saveTodo({biz_id:t.id,type:e,module_code:"templet-plan-problem",proj_id:t.project.id})}))):i.a.reject("请输入补充说明")},delProblem:function(e){return c.a.deleteProblem(e).then((function(){return d.default.setLocalChanged(),u.a.removeTodo(e.id)}))},saveRepair:function(e){var t=p.a.getUser().user_id;return c.a.deleteRepair(e.id).then((function(){return c.a.insertRepair({id:o.a.uuid(),templet_problem_id:e.id,repair:e.repair.id,created_on:o.a.now(),created_by:t})}))},saveReinspect:function(e){var t=p.a.getUser().user_id;return c.a.deleteRepository(e.id).then((function(){return c.a.insertRepository({id:o.a.uuid(),templet_problem_id:e.id,reinspect:e.reinspect.id,created_on:o.a.now(),created_by:t})}))},saveCc:function(t,r){var n=p.a.getUser().user_id;return c.a.deleteCc(t.id).then((function(){return i.a.all(e.map(r,(function(e){return c.a.insertCc({id:o.a.uuid(),templet_problem_id:t.id,cc:e.id,type:"被抄送",created_on:o.a.now(),created_by:n})})))}))},changeRepairDeadline:function(e){return c.a.updateProblem({id:e.id,repair_deadline:e.repair_deadline}).then((function(){return y.appendToCC(e.id,"操作人")})).then((function(){return d.default.setLocalChanged(),d.default.addSyncGroup([["templet_problem",e.id]])}))},changeContractor:function(e){return c.a.updateProblem({id:e.id,contractor_id:e.contractor.id||""}).then((function(){return y.appendToCC(e.id,"操作人")})).then((function(){return d.default.setLocalChanged(),d.default.addSyncGroup([["templet_problem",e.id]])}))},changeRepair:function(e,t){return y.saveRepair(e).then((function(){if(t)return y.changeContractor(e)})).then((function(){return y.appendToCC(e.id,"操作人")})).then((function(){return d.default.addSyncGroup([["templet_problem",e.id],["templet_problem_repair",e.id],["templet_problem_cc",e.id]])})).then((function(){var t=2,r=p.a.getUser().user_id;return e.repair.id===r&&(t=1),d.default.setLocalChanged(),u.a.saveTodo({biz_id:e.id,type:t,proj_id:e.project.id,module_code:"templet-plan-problem"})}))},changeReinspect:function(e){return y.saveReinspect(e).then((function(){return y.appendToCC(e.id,"操作人")})).then((function(){return d.default.setLocalChanged(),d.default.addSyncGroup([["templet_problem",e.id],["templet_problem_reinspect_by",e.id],["templet_problem_cc",e.id]])}))},changeCc:function(e){return y.saveCc(e,e.cc).then((function(){return d.default.setLocalChanged(),d.default.addSyncGroup([["templet_problem",e.id],["templet_problem_cc",e.id]])}))},saveRepairInfo:function(e){return c.a.updateProblem({id:e.id,repair_remark:e.repair_remark||"",repair_image_file:JSON.stringify(e.repair_image_file)})},appendToCC:function(t,r){var n=p.a.getUser().user_id;return c.a.getProblemAllCc(t).then((function(i){if(!e.some(i,(function(e){return e.id===n&&e.type===r}))){var a={id:o.a.uuid(),templet_problem_id:t,cc:n,type:r,created_on:o.a.now(),created_by:n};return c.a.insertCc(a)}}))},repairProblem:function(t){return f.a.state.global.isPhotoRequired.TEMPLET_REPAIR&&e.isEmpty(t.repair_image_file)?i.a.reject("请拍摄整改照片"):c.a.updateProblem({id:t.id,repair_by:t.repair.id,repair_remark:t.repair_remark||"",repair_image_file:JSON.stringify(t.repair_image_file),status:"待复验",repair_date:o.a.now()}).then((function(){return y.appendToCC(t.id,"操作人")})).then((function(){return d.default.addSyncGroup([["templet_problem",t.id],["templet_problem_cc",t.id]])})).then((function(){var e=2;return p.a.getUser().user_id===t.reinspect.id&&(e=1),d.default.setLocalChanged(),u.a.saveTodo({biz_id:t.id,type:e,module_code:"templet-plan-problem",proj_id:t.project.id})}))},reinspectProblem:function(e){var t=o.a.now(),r=p.a.getUser().user_id;return c.a.updateProblem({id:e.id,reinspect_by:e.reinspect.id,reinspect_completed_date:t,status:"已通过"}).then((function(){c.a.updateRepositoryByProblemAndUser({reinspect_date:o.a.now(),reinspect_image_file:JSON.stringify(e.reinspect_image_file||[]),reinspect_remark:e.reinspect_remark||""},e.id,r)})).then((function(){return y.appendToCC(e.id,"操作人")})).then((function(){return d.default.addSyncGroup([["templet_problem",e.id],["templet_problem_reinspect_by",e.id],["templet_problem_cc",e.id]])})).then((function(){return d.default.setLocalChanged(),u.a.saveTodo({biz_id:e.id,type:2,module_code:"templet-plan-problem",proj_id:e.project.id})}))},reinspectReject:function(e){var t,r=p.a.getUser().user_id;return"待复验"!==e.status?i.a.reject("问题单状态异常"):e.sent_back_remark?(t={id:e.id,status:"待整改",sent_back_by:r,sent_back_remark:e.sent_back_remark,sent_back_image_file:JSON.stringify(e.sent_back_image_file||[]),sent_back_date:o.a.now(),sent_back_times:(e.sent_back_times||0)+1},c.a.updateProblem(t).then((function(){return c.a.updateRepositoryByProblem({reinspect_date:"",reinspect_image_file:"[]",reinspect_remark:""},e.id)})).then((function(){return y.appendToCC(e.id,"操作人")})).then((function(){return d.default.addSyncGroup([["templet_problem",e.id],["templet_problem_cc",e.id]])})).then((function(){var t=2;return r===e.repair.id&&(t=1),d.default.setLocalChanged(),u.a.saveTodo({biz_id:e.id,type:t,module_code:"templet-plan-problem",proj_id:e.project.id})}))):i.a.reject("请填写退回原因")},close:function(e){var t;return"待整改"!==e.status?i.a.reject("问题单状态异常"):e.close_reason?(t={id:e.id,status:"已关闭",close_date:o.a.now(),close_reason:e.close_reason},c.a.updateProblem(t).then((function(){return y.appendToCC(e.id,"操作人")})).then((function(){return d.default.addSyncGroup([["templet_problem",e.id],["templet_problem_cc",e.id]])})).then((function(){return d.default.setLocalChanged(),u.a.saveTodo({biz_id:e.id,type:2,module_code:"templet-plan-problem",proj_id:e.project.id})})).catch((function(e){return $log.error(e),i.a.reject(e)}))):i.a.reject("请填写关闭原因")},getTempletDetail:function(e){return c.a.getTempletDetail(e)}};t.a=y}).call(this,r("391c"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,