(window.webpackJsonp_module_entry_zjapp_=window.webpackJsonp_module_entry_zjapp_||[]).push([["chunk-5ec4446a"],{be2b:function(e,a,t){"use strict";(function(e){t("f548"),t("6d57"),t("e697"),t("616f"),t("cc57");var r,n=t("fd50"),o=t("3bd5"),u=t("ed08"),c=t("3516"),l=t("aab3"),d=t("e865"),p=t("48f4"),m=t("bcc7"),_=t("2f02"),h=t("334f"),f=t("b725"),b=t("7aa5"),y=t("729d"),g=t("c1c2"),v=t("6144"),k=t("c745"),V=t("b20c"),M=t("0136"),D=t("7cb8");a.a=r={measureRooms:[],save:function(a,t){t=t||a.status;var i=1===a.entry_requirements?a.exceedVal:a.realityVal,s={id:a.id,proj_id:a.proj_id,bidsection_id:a.bidsection_id,batch_id:a.batch_id,batch_type:a.batch_type||"实测实量(新)",item_id:a.checkItem.id,building_id:a.roomData.building_id,floor:a.roomData.floor||"",room_id:a.roomData.id,status:t,parent_id:a.parent_id||null,regist_by:a.regist_by,regist_date:a.regist_date,measurement_points:parseInt(a.pointNum),problem_points:parseInt(a.exceedNum),problem_values:Object(D.o)(i),image_file:Object(D.o)(a.img),remark:a.remark||"",standard_min:a.standard_min,standard_max:a.standard_max,passrate_mode:a.passrate_mode,entry_requirements:a.entry_requirements,unit:a.unit,emergency_degree:a.emergency_degree||"一般",process_mode:a.process_mode||1};return e.isEmpty(a.drawing_file)||(e.isArray(a.drawing_file)?s.drawing_file=Object(D.o)(a.drawing_file):s.drawing_file=Object(D.o)([a.drawing_file])),n.a.when().then((function(){return s.id?d.a.update(s,[],a.repair).then((function(){return r.addTodo(s,a.repair)})):(s.id=u.a.uuid(),s.created_on=u.a.now(),s.created_by=o.a.getUser().user_id,d.a.insert(s).then((function(){a.id=s.id})))})).then((function(){return r.appendToCC(s.id,"被抄送",a.cc)})).then((function(){return n.a.resolve(s.id)})).catch((function(e){return $log.error(e),n.a.reject(e)}))},appendToCC:function(a,t,r){return h.a.getProblemCCAllColumn(a).then((function(i){return n.a.all(e.map(r,(function(r){if(!e.some(i,(function(e){return e.cc===r.id&&e.type===t}))){var n={id:r.id,name:r.name,type:t};return h.a.appendCC(a,n)}}))).then((function(){return h.a.updateProblemReadingTime(a)}))}))},getMeasureProblem:function(a,t,n){return d.a.getMeasureProblem(a,t,n).then((function(e){return r.unzipProblemValues(e)})).then((function(a){return a?d.a.getProblemRepairs(a.id).then((function(t){return e.isEmpty(t)||(a.repair=t[0]),a})):a})).then((function(e){return e?h.a.getCC(e.id).then((function(a){return e.cc=a,e})):e}))},getMeasureProblemById:function(e){return d.a.getMeasureProblemById(e).then((function(e){return r.unzipProblemValues(e)})).then((function(e){return e?h.a.getCC(e.id).then((function(a){return e.cc=a,e})):e}))},getMeasureProblemsByStatus:function(e,a){return d.a.getMeasureProblemsByStatus(e,a).then((function(e){return r.unzipProblemValues(e)}))},getMeasureProblemsByRoom:function(e,a){return d.a.getMeasureProblemsByRoom(e,a).then((function(e){return r.unzipProblemValues(e)}))},submitSingleCheck:function(a){if(a.status&&"检查中"!==a.status)return n.a.reject("错误的状态");var t;if(a.needRepair){if(e.isEmpty(a.repair))return n.a.reject("请选择整改人");t="待整改"}else t="检查完毕";return r.save(a,t).then((function(){if(a.needRepair)return r.changeSingleRoomRepair(a,!1);var e=o.a.getUser();return r.appendToCC(a.id,"操作人",[{id:e.user_id,name:e.user_name}])})).then((function(){return r.changeCC(a,!1)})).then((function(){return a.status=t,a.needRepair?p.default.addSyncGroup([["checkquality_problem",a.id],["checkquality_repair",a.id],["checkquality_cc",a.id]]):p.default.addSyncGroup([["checkquality_problem",a.id],["checkquality_cc",a.id]]),n.a.resolve(a.id)})).catch((function(e){return $log.error(e),n.a.reject(e)}))},resubmitSingleCheck:function(e){return r.save(e,e.status).then((function(){if(e.repair_hasChanged)return r.changeSingleRoomRepair(e,!1)})).then((function(){var a=o.a.getUser();return r.appendToCC(e.id,"操作人",[{id:a.user_id,name:a.user_name}])})).then((function(){return r.changeCC(e,!1)})).then((function(){p.default.addSyncGroup([["checkquality_problem",e.id],["checkquality_repair",e.id],["checkquality_cc",e.id]])})).catch((function(e){return $log.error(e),n.a.reject(e)}))},submitSingleRepair:function(e){return"待整改"!==e.status?n.a.reject("错误的状态"):d.a.updateProblem(e.id,{status:"已整改",repair_by:o.a.getUser().user_id,repair_remark:e.repair_remark,repair_date:u.a.now(),repair_image_file:Object(D.o)(e.repair_img)}).then((function(){var a=o.a.getUser();return r.appendToCC(e.id,"操作人",[{id:a.user_id,name:a.user_name}])})).then((function(){return r.changeCC(e,!1)})).then((function(){return p.default.addSyncGroup([["checkquality_problem",e.id],["checkquality_cc",e.id]])})).then((function(){return r.addTodo(e,[])}))},changeCC:function(a,t){return c.a.getBatchCCs(a.batch_id).then((function(t){return t=e.map(t,(function(e){return{id:e.user_id,name:e.user_name}})),e.isEmpty(a.cc)||(t=t.concat(a.cc),t=e.uniqBy(t,e.property("id"))),h.a.saveProblemCC(a.id,t)})).then((function(){t&&p.default.addSyncGroup([["checkquality_problem",a.id],["checkquality_cc",a.id]])}))},getRoomProblems:function(a,t){return d.a.getRoomProblems(a,t).then((function(e){return r.unzipProblemValues(e)})).then((function(t){return c.a.getBatch(a).then((function(r){return"实测巡检"===r.batch_type?c.a.getBatchCheckitems(a).then((function(a){var r=[];return e.each(t,(function(t){e.some(a,e.matches({item_id:t.pc_id}))&&r.push(t)})),r})):t}))}))},getReportData:function(a){return c.a.getBatch(a).then((function(t){return n.a.all([d.a.getSingleRoomMeasureCheckitems(a),d.a.getSingleRoomMeasureReportData(a),c.a.getBatchRooms(a)]).then((function(a){var t={},r=a[0],i=a[1],u=a[2];return n.a.all([d.a.getProblemRepairs(t.id),d.a.getProblemCC(t.id)]).then((function(a){return e.isEmpty(a[0])&&e.isEmpty(a[1])?n.a.all(e.map(r,(function(e){return m.a.getBidSectionCheckItemInfo(t.proj_id,t.bidsection_id,e.id,"实测实量")}))).then((function(a){var t=e.reduce(a,(function(e,a){return e.concat(a.repair)}),[]);t=e.uniqBy(t,e.property("id"));var r=e.reduce(a,(function(e,a){return e.concat(a.cc)}),[]);return[t,r=e.uniqBy(r,e.property("id"))]})):a})).then((function(a){var n=a[0],c=a[1],l=e.groupBy(i,"room_id"),d={id:t.id,status:t.status,proj_id:t.proj_id,bidsection_id:t.bidsection_id,batch_id:t.batch_id,batch_name:t.batch_name,remark:t.remark,is_regist:t.regist_by===o.a.getUser().user_id,checkBy:{id:t.regist_by,name:t.regist_name,phone:t.regist_phone,date:t.regist_date},checkItem:e.map(r,(function(e){return{id:e.id,name:e.name,parent_name:e.parent_name,status:e.status,repairBy:{id:e.repair_id,name:e.repair_name,phone:e.repair_phone,date:e.repair_date},detail:JSON.parse(e.repair_image_file||"[]").length>0||!!e.repair_remark}})),checkData:e.map(l,(function(a,t){var r=e.reduce(a,(function(e,a){return e+Math.max((a.measurement_points||0)-(a.problem_points||0),0)}),0),n=e.reduce(a,(function(e,a){return e+(a.measurement_points||0)}),0),i=a[0].building_name;return a[0].unit&&(i+=a[0].unit,s.endsWith(i,"单元")||(i+="单元")),{roomId:t,roomName:a[0].room_no,buildName:i,passRate:(n?Math.round(1e4*r/n)/100:0)+"%",passPoints:r,measurePoints:n,isEmpty:!1,data:e.reduce(a,(function(e,a){var t=a.measurement_points||0,r=Math.max(t-(a.problem_points||0),0);return e[a.item_id]={pointNum:t,passNum:r,passRate:(t?Math.round(1e4*r/t)/100:0)+"%"},e}),{})}})),repair:n,cc:c};e.each(u,(function(a){if(!e.find(d.checkData,(function(e){return e.roomId===a.room_id}))){var t=a.building_name;a.unit&&(t+=a.unit,s.endsWith(t,"单元")||(t+="单元")),d.checkData.push({roomId:a.room_id,roomName:a.room_name,buildName:t,passRate:"",data:{},isEmpty:!0})}})),e.each(d.checkData,(function(a){e.each(d.checkItem,(function(e){e.id in a.data||(a.data[e.id]={pointNum:"",passNum:"",passRate:""})}))}));var p=e.reduce(d.checkData,(function(e,a){return e+(a.passPoints||0)}),0),m=e.reduce(d.checkData,(function(e,a){return e+(a.measurePoints||0)}),0),_=e.groupBy(i,"item_id");return d.total={passRate:(m?Math.round(1e4*p/m)/100:0)+"%",data:e.mapValues(_,(function(a){var t=e.reduce(a,(function(e,a){return e+Math.max((a.measurement_points||0)-(a.problem_points||0),0)}),0),r=e.reduce(a,(function(e,a){return e+(a.measurement_points||0)}),0);return{pointNum:r,passNum:t,passRate:(r?Math.round(1e4*t/r)/100:0)+"%"}}))},d}))}))}))},changeRepair:function(a){return e.isEmpty(a.repair)?n.a.reject("请指定一个整改人"):d.a.updateProblemModifiedBy(a.id).then((function(){return f.a.changeProblemRepair(a.id,a.repair)})).then((function(){var t=e.map(a.repair,"id").join(","),r=e.map(a.oldRepair,"id").join(",");return _.a.saveProblemFpInfo(a.proj_id,a.bidsection_id,a.batch_id,a.id,t,r,"分配整改人")})).then((function(){var e=o.a.getUser();return r.appendToCC(a.id,"操作人",[{id:e.user_id,name:e.user_name}])})).then((function(){return p.default.addSyncGroup([["checkquality_problem",a.id],["checkquality_repair",a.id],["checkquality_cc",a.id]])})).catch((function(e){return $log.error(e),n.a.reject(e)}))},changeSingleRoomRepair:function(a,t){return e.isEmpty(a.repair)?n.a.reject("请指定整改人"):d.a.updateProblemModifiedBy(a.id).then((function(){return f.a.changeProblemRepair(a.id,a.repair).then((function(){return r.addTodo(a,a.repair)}))})).then((function(){var e=a.repair.id;return _.a.saveProblemFpInfo(a.proj_id,a.bidsection_id,a.batch_id,a.id,e,"","分配整改人")})).then((function(){var e=o.a.getUser();return r.appendToCC(a.id,"操作人",[{id:e.user_id,name:e.user_name}])})).then((function(){if(!1!==t)return p.default.addSyncGroup([["checkquality_problem",a.id],["checkquality_repair",a.id],["checkquality_cc",a.id]])})).catch((function(e){return $log.error(e),n.a.reject(e)}))},getProblemRepairs:function(e){return d.a.getProblemRepairs(e)},getProblemCC:function(e){return d.a.getProblemCC(e)},getTopMeasureProblem:function(e){return d.a.getTopMeasureProblem(e)},getMeasureEmptyRooms:function(e){return d.a.getMeasureEmptyRooms(e)},getRoomsAndData:function(a,t,r,i,o,u){return n.a.when().then((function(){return l.a.getBuildingRooms(r,i).then((function(a){return e.clone(a)}))})).then((function(a){return b.a.getSectionBatchs(t,"实测实量(新)","正式").then((function(t){var s=[],c=[],l=[0,0,0],p=0;return e.each(t,(function(e){-1!==e.name.indexOf("施工单位")?s[0]=e.id:-1!==e.name.indexOf("监理单位")?s[1]=e.id:-1!==e.name.indexOf("建设单位")&&(s[2]=e.id)})),s=s.slice(0,u),o&&(c=e.map(s,(function(e){return d.a.getMeasureNewBatchRoomProblems(e,r,i,[o.id])}))),n.a.all(c).then((function(t){for(var r={},n={},i=0;i<t.length;i++)for(var o=0;o<t[i].length;o++)t[i][o].room_id?r[t[i][o].room_id]=i+1:n[t[i][o].floor]=i+1,l[i]||(l[i]=0),l[i]+=1;e.isEmpty(r)&&(p+=a.length),e.each(a,(function(a){e.isEmpty(r)?a.done=n[a.floor]||0:(p+=a.rooms.length,e.each(a.rooms,(function(e){e.done=r[e.id]||0})))})),a.completion=[],p=Math.max(p,1);for(var u=0;u<l.length;u++)a.completion[u]=(l[u]/p*100).toFixed(1)+"%"}))})).then((function(){return a}))}))},getRoomsAndDataByIdentity:function(a,t,n,i,o,u){return l.a.getBuildingRooms(n,i).then((function(s){for(var c=[],l=u;l>0;)c.push(l),l--;var d=[];return o.subitem?d=e.map(o.subitem,(function(e){return e.id})):d.push(o.id),r.getMeasureDataDetailByIdentities(a,t,n,i,d,c).then((function(a){return e.each(s,(function(t){e.each(t.rooms,(function(t){t.done=[],t.problems=[],t.done_num=[];for(var r=u;r>0;){var n;switch(r){case 3:n=a.construct;break;case 2:n=a.supervision;break;case 1:n=a.repair}var i=e.filter(n,(function(e){return e.room_id===t.id})),o=0,s=0,c=!0,l=0;e.each(i,(function(e){o+=e.measurement_points||0,s+=e.problem_points||0,c=!!c&&"检查中"!==e.status,l+="检查中"!==e.status?1:0})),t.done_num[r]=l,i.length===d.length&&c?t.done[r]=r:t.done[r]=0,i.length<=1?t.problems[r]=i[0]||{}:t.problems[r]={measurement_points:o,problem_points:s,batch_id:i[0].batch_id},r--}}))})),s}))}))},getMeasureDataDetailByIdentities:function(a,t,o,u,s,c){var l=[];for(i=0;i<c.length;i++){var d=r.getMeasureDataDetailByIdentity(a,t,o,u,s,c[i]);l.push(d)}return n.a.all(l).then((function(a){var t={repair:[],supervision:[],construct:[]};return e.each(a,(function(e){switch(e.identity){case 1:t.repair=e.data;break;case 2:t.supervision=e.data;break;case 3:t.construct=e.data}})),t}))},getMeasureDataDetailByIdentity:function(e,a,t,i,o,u){return r.getMeasureDefaultBatch(e,a,u).then((function(e){return d.a.getMeasureNewBatchRoomProblems(e.id,t,i,o)})).then((function(e){return r.unzipProblemValues(e)})).then((function(e){return n.a.resolve({data:e,identity:u})}))},getMeasureUserIdentity:function(a){var t=o.a.getUser();return g.a.getModulePermission(t.user_id,[31,32,33]).then((function(a){return e.some(a,(function(e){return 33===e.role_type}))?3:e.some(a,(function(e){return 32===e.role_type}))?2:1}))},getIdentityByProblemId:function(e){return r.getMeasureProblemById(e).then((function(e){return e})).then((function(e){return b.a.getBatch(e.batch_id).then((function(e){var a;return e.name.indexOf("默认批次-施工单位")>-1?a=1:e.name.indexOf("默认批次-监理单位")>-1?a=2:e.name.indexOf("默认批次-建设单位")>-1&&(a=3),a}))}))},getMeasureDefaultBatch:function(e,a,t){return b.a.getProjectBatchByIdentity(e,a,t,"实测实量(新)").then((function(e){return e&&(e.identity=t),e||{}}))},getAllMeasureCheckItems:function(a){var t=v.a.getObject("MeasureCheckItemMemory")||{};return n.a.when().then((function(){return k.a.measureCheckItems.length?e.filter(k.a.measureCheckItems,(function(e){return e.sec_id===a})):y.a.getBidSectionCheckItemList(a,41)})).then((function(a){var r=[],n={},i={};return e.each(a,(function(e,a){e&&"实测实量"!==e.parent_item_full_name&&(n[e.parent_item_id]||(i=n[e.parent_item_id]={id:e.parent_item_id,name:e.parent_item_full_name,full_name:e.parent_item_full_name,process_mode:e.process_mode,subitem:[],isOpen:!!t[e.parent_item_id]},r.push(i)),n[e.parent_item_id].subitem.push({id:e.item_id,name:e.item_name,full_name:e.full_name,process_mode:e.process_mode,parent_id:e.parent_item_id}))})),r}))},getAllMeasureBuildingCheckItems:function(a,t){return d.a.getAllMeasureBuildingCheckItems(a,t).then((function(a){var t=e.groupBy(a,(function(e){return e.pp_item_name})),r=e.keys(t),i=[];return e.each(r,(function(e){for(var a={id:t[e][0].pp_item_id,name:e,subitem:[]},r=0;r<t[e].length;r++){var n={id:t[e][r].pc_item_id,name:t[e][r].pc_item_name,full_name:t[e][r].pc_full_name,process_mode:t[e][r].process_mode,note:["","分户","不分单元整层","整栋","","分单元整层"][t[e][r].process_mode]};a.subitem.push(n)}i.push(a)})),n.a.resolve(i)}))},informRepair:function(e,a){return d.a.changeProblemStatus(e.id,a).then((function(){return r.changeSingleRoomRepair(e,!1)})).then((function(){return p.default.addSyncGroup([["checkquality_problem",e.id],["checkquality_repair",e.id],["checkquality_cc",e.id]])})).catch((function(e){return $log.error(e),n.a.reject(e)}))},getMeasureRoomItemDetailByIdentities:function(a,t,o,u,s){var c=[];for(i=0;i<s.length;i++){var l=r.getMeasureRoomItemDetailByIdentity(a,t,o,u,s[i]);c.push(l)}return n.a.all(c).then((function(a){var t={repair:[],supervision:[],construct:[]};return e.each(a,(function(e){switch(e.identity){case 1:t.repair=e.data;break;case 2:t.supervision=e.data;break;case 3:t.construct=e.data}})),t}))},getMeasureRoomItemDetailByIdentity:function(a,t,n,i,o){return r.getMeasureDefaultBatch(a,t,o).then((function(e){return d.a.getMeasureNewRoomItemProblem(e.id,n,i)})).then((function(e){return r.unzipProblemValues(e)})).then((function(a){return e.isEmpty(a)?{data:a,identity:o}:h.a.getCC(a[0].id).then((function(e){return a[0].cc=e,{data:a,identity:o}}))}))},getMeasureFloorDetailByIdentity:function(a,t,n,i,o,u,s){return r.getMeasureDefaultBatch(a,t,s).then((function(e){return d.a.getMeasureNewFloorProblem(e.id,n,i,o,u)})).then((function(e){return r.unzipProblemValues(e)})).then((function(a){return e.isEmpty(a)?{data:a,identity:s}:h.a.getCC(a[0].id).then((function(e){return a[0].cc=e,{data:a,identity:s}}))}))},getMeasureFloorDetailByIdentitys:function(a,t,o,u,s,c,l){var d=[];for(i=0;i<l.length;i++){var p=r.getMeasureFloorDetailByIdentity(a,t,o,u,s,c,l[i]);d.push(p)}return n.a.all(d).then((function(a){var t={repair:[],supervision:[],construct:[]};return e.each(a,(function(e){switch(e.identity){case 1:t.repair=e.data;break;case 2:t.supervision=e.data;break;case 3:t.construct=e.data}})),t}))},unzipProblemValues:function(a){if(!a)return n.a.when(a);var t=e.isArray(a)?a:[a];return n.a.all(e.map(t,(function(e){return e.problem_values_zip&&!e.problem_values?u.a.unzipString(e.problem_values_zip).then((function(a){return e.problem_values=a,d.a.updateProblem(e.id,{problem_values:a})})).then((function(){return e})):n.a.when()}))).then((function(){return a}))},getMeasureInspectBatchRoomStatus:function(e,a){return d.a.getMeasureInspectBatchRoomStatus(e,a)},getMeasureInspectStatisticalData:function(a){return d.a.getMeasureInspectStatisticalData(a).then((function(a){var t={},r={},n={id:"sum",name:"总计",data:[{id:"sum",mp:0,pp:0,name:"总计"}]};e.each(a,(function(a){var i,o=a.building_name+(a.unit?a.unit.replace("单元","")+"单元":"")+"<br>"+a.room_no;t[a.parent_id]||(t[a.parent_id]={name:a.parent_name,children:[],data:[{id:"sum",mp:0,pp:0,name:"合格率"}]}),r[a.id]||(r[a.id]={name:a.item_name,data:[{id:"sum",mp:0,pp:0,name:"合格率"}]}),i={id:a.room_id,name:o,mp:a.m_points||0,pp:a.p_points||0},r[a.id].data.push(i),e.find(t[a.parent_id].children,{id:a.id})||t[a.parent_id].children.push({id:a.id,name:r[a.id].name,data:r[a.id].data});var u=e.find(t[a.parent_id].data,{id:a.room_id});u||(u={id:a.room_id,name:o,mp:0,pp:0},t[a.parent_id].data.push(u)),u.mp+=a.m_points||0,u.pp+=a.p_points||0,t[a.parent_id].data[0].mp+=a.m_points||0,t[a.parent_id].data[0].pp+=a.p_points||0,r[a.id].data[0].mp+=a.m_points||0,r[a.id].data[0].pp+=a.p_points||0;var s=e.find(n.data,{id:a.room_id});s||(s={id:a.room_id,name:o,mp:0,pp:0},n.data.push(s)),s.mp+=a.m_points||0,s.pp+=a.p_points||0,n.data[0].mp+=a.m_points||0,n.data[0].pp+=a.p_points||0}));var i=[];return e.each(t,(function(a,t){i.push(e.extend(a,{id:t}))})),i.push(n),i}))},uniqueMeasureProblem:function(e){var a=e.problem;return $log.log("存在冲突的问题，清理本地无效数据，服务器返回的数据",e),d.a.uniqueMeasureProblem(a.batch_id,a.id,a.item_id,a.room_id)},uniqueMeasureFloorProblem:function(e){var a=e.problem;return $log.log("存在冲突的问题，清理本地无效数据，服务器返回的数据",e),d.a.uniqueMeasureFloorProblem(a.batch_id,a.building_id,a.floor,a.item_id,a.id)},uniqueMeasureFloorUnitProblem:function(e){var a=e.problem;return $log.log("存在冲突的问题，清理本地无效数据，服务器返回的数据",e),d.a.uniqueMeasureFloorUnitProblem(a.batch_id,a.building_id,a.unit,a.floor,a.item_id,a.id)},removeDuplicatedMeasureNew:function(){return d.a.getDuplicatedMeasure().then((function(a){return n.a.all(e.map(a,(function(e){return d.a.removeCheckingMeasure(e.batch_id,e.item_id,e.room_id)})))}))},deleteBatchProblems:function(e,a){return d.a.deleteBatchProblems(e,a)},getMeasureCheckitemRealProcessMode:function(e,a){return d.a.getOneMeasureByBuildingAndItem(e,a).then((function(e){return e?e.process_mode||1:V.a.getCheckItem(a).then((function(e){return e.process_mode}))}))},addTodo:function(a,t){if("检查中"===a.status)return n.a.when();e.isArray(t)||(t=[t]);var r,i=o.a.getUser().user_id;return r=e.find(t,(function(e){return e.id===i}))?1:2,p.default.setLocalChanged(),M.a.saveTodo({biz_id:a.id,type:r,module_code:"measure-inspect",proj_id:a.proj_id})},hasVal:function(e){return null!=e&&""!==e},getAreaDataFromPoints:function(a){var t=[];return e.each(a,(function(n){if(!e.some(t,(function(e){return e.name===n.area}))){var i=e.filter(a,{area:n.area}).length;t.push({name:n.area,setVal:r.hasVal(n.setVal)?n.setVal:"",pointNum:i})}})),t},getDrawPoints:function(a,t){var n=[],i=[];return 1===(a=e.clone(a)).problemData[0].passrate_mode?(i=a.problemData[0].realityVal,e.each(a.problemData,(function(a){e.each(a.realityVal,(function(e,a){i[a]&&(i[a].isQualified=!0)}))})),e.each(a.problemData,(function(a){e.each(a.realityVal,(function(e,a){e.isExceed&&i[a]&&(i[a].isQualified=!1),e.isWarning&&i[a]&&(i[a].isWarning=!0)}))}))):2===a.problemData[0].passrate_mode?(n=r.getAreaDataFromPoints(a.problemData[0].realityVal),i=e.map(n,(function(t){var r=e.filter(a.problemData[0].realityVal,{area:t.name}),n=e.some(r,(function(e){return e.isExceed})),i=e.some(r,(function(e){return e.isWarning}));return{x:r[0].x,y:r[0].y,area:t.name,isQualified:!n,isWarning:i,pointId:r[0].pointId}}))):3===a.problemData[0].passrate_mode?i=a.problemData[0].realityVal:4===a.problemData[0].passrate_mode||(5===a.problemData[0].passrate_mode||6===a.problemData[0].passrate_mode?(n=r.getAreaDataFromPoints(a.problemData[0].realityVal),i=e.map(n,(function(t){var r=e.filter(a.problemData[0].realityVal,{area:t.name}),n=e.some(r,(function(e){return e.isExceed})),i=e.some(r,(function(e){return e.isWarning}));return{x:r[0].x,y:r[0].y,area:t.name,isQualified:!n,isWarning:i,pointId:r[0].pointId}}))):7===a.problemData[0].passrate_mode?(n=r.getAreaDataFromPoints(a.problemData[0].realityVal),i=e.map(n,(function(t){var r=e.filter(a.problemData[0].realityVal,{area:t.name}),n=e.some(r,(function(e){return e.isExceed})),i=e.some(r,(function(e){return e.isWarning}));return{x:r[0].x,y:r[0].y,area:t.name,isQualified:!n,isWarning:i,pointId:r[0].pointId}}))):8===a.problemData[0].passrate_mode?i=a.problemData[0].realityVal:12===a.problemData[0].passrate_mode||13===a.problemData[0].passrate_mode?(n=r.getAreaDataFromPoints(a.problemData[0].realityVal),i=e.map(n,(function(t){var r=e.filter(a.problemData[0].realityVal,{area:t.name}),n=e.some(r,(function(e){return e.isExceed})),i=e.some(r,(function(e){return e.isWarning}));return{x:r[0].x,y:r[0].y,area:t.name,isQualified:!n,isWarning:i,pointId:r[0].pointId}}))):console.error("算法错误")),e.each(i,(function(e,a){void 0!==t&&a===t?e.color="#4275e8":e.isQualified?e.color="#0bc666":e.color="#ff4545",e.index=a})),i},getProblemAreaData:function(a){var t=[];return e.each(a.realityVal,(function(n){if(!e.some(t,(function(e){return e.name===n.area}))){var i=e.filter(a.realityVal,{area:n.area}).length;t.push({name:n.area,setVal:r.hasVal(n.setVal)?n.setVal:"",pointNum:i})}})),t},addPoint:function(a,t){var n,i=a.problemData[0].passrate_mode;return 1===i?(n={val:"",x:t.x,y:t.y,area:"测区1"},e.each(a.problemData,(function(a){a.realityVal.push(e.clone(n))}))):2===i?e.each(a.problemData,(function(a){var n=r.getProblemAreaData(a),i=e.map(n,(function(e){return/^测区\d+$/.test(e.name)?parseInt(e.name.substr(2)):0})),o=e.maxBy(i);o=o===-1/0?0:o;for(var u={val:"",x:t.x,y:t.y,area:"测区"+(o+1)},s=0;s<5;s++)a.realityVal.push(e.clone(u));a.areaData=r.getProblemAreaData(a)})):3===i?(n={val:"",x:t.x,y:t.y,area:"测区1",setVal:""},e.each(a.problemData,(function(e){e.realityVal.push(n)}))):4===i||(5===i?e.each(a.problemData,(function(a){var n=r.getProblemAreaData(a),i=e.map(n,(function(e){return/^测区\d+$/.test(e.name)?parseInt(e.name.substr(2)):0})),o=e.maxBy(i);o=o===-1/0?0:o;for(var u={val:"",x:t.x,y:t.y,area:"测区"+(o+1)},s=0;s<2;s++)u.label="高",a.realityVal.push(e.clone(u));for(var c=0;c<2;c++)u.label="宽",a.realityVal.push(e.clone(u));a.areaData=r.getProblemAreaData(a)})):6===i?e.each(a.problemData,(function(a){var n=r.getProblemAreaData(a),i=e.map(n,(function(e){return/^测区\d+$/.test(e.name)?parseInt(e.name.substr(2)):0})),o=e.maxBy(i);o=o===-1/0?0:o;for(var u={val:"",x:t.x,y:t.y,area:"测区"+(o+1)},s=0;s<2;s++)u.label="开间",a.realityVal.push(e.clone(u));for(var c=0;c<2;c++)u.label="进深",a.realityVal.push(e.clone(u));a.areaData=r.getProblemAreaData(a)})):7===i?e.each(a.problemData,(function(a){var n=r.getProblemAreaData(a),i=e.map(n,(function(e){return/^测区\d+$/.test(e.name)?parseInt(e.name.substr(2)):0})),o=e.maxBy(i);o=o===-1/0?0:o;for(var u={val:"",x:t.x,y:t.y,area:"测区"+(o+1)},s=0;s<3;s++)a.realityVal.push(e.clone(u));a.areaData=r.getProblemAreaData(a)})):8===i&&(n={val:"",x:t.x,y:t.y,area:"测区1"},e.each(a.problemData,(function(a){a.realityVal.push(e.clone(n))})))),a},delPoint:function(a,t){var n=a.problemData[0].passrate_mode;return 1===n?e.each(a.problemData,(function(e){e.realityVal.splice(t,1)})):2===n?e.each(a.problemData,(function(e){e.realityVal.splice(5*t,5),e.areaData=r.getProblemAreaData(e)})):3===n?e.each(a.problemData,(function(e){e.realityVal.splice(t,1)})):4===n||(5===n||6===n?e.each(a.problemData,(function(e){e.realityVal.splice(4*t,4),e.areaData=r.getProblemAreaData(e)})):7===n?e.each(a.problemData,(function(e){e.realityVal.splice(3*t,3),e.areaData=r.getProblemAreaData(e)})):8===n&&e.each(a.problemData,(function(e){e.realityVal.splice(t,1)}))),a},pointsHandle:function(a){var t,n=r.hasVal(a.standard_min)?parseFloat(a.standard_min):-1/0,i=r.hasVal(a.standard_max)?parseFloat(a.standard_max):1/0,o=!e.isEmpty(a.drawing_file);return e.each(a.realityVal,(function(e){r.hasVal(e.val)&&(e.val=parseFloat(e.val))})),1===a.passrate_mode||3===a.passrate_mode?e.each(a.realityVal,(function(e){var a=parseFloat(e.val)-parseFloat(e.setVal||0),t=r.hasVal(e.val)&&(a<n||a>i),u=r.hasVal(e.val)&&a>=n&&a<=i;e.isExceed=t,e.isQualified=u,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)})):2===a.passrate_mode?(0===n&&(n=i),t=e.groupBy(a.realityVal||[],"area"),e.each(t,(function(t){if(e.some(t,(function(e){return!r.hasVal(e.val)})))e.each(t,(function(e){e.isExceed=!1,e.isQualified=!1,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)}));else{var u,s,c=e.maxBy(t,"val"),l=e.minBy(t,"val"),d=parseFloat(c.val)-parseFloat(c.setVal||0),p=parseFloat(l.val)-parseFloat(l.setVal||0),m=d-p;m<=n?e.each(t,(function(e){e.isExceed=!1,e.isQualified=!0,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)})):m>i?e.each(t,(function(e){e.isExceed=!0,e.isQualified=!1,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)})):(s=e.some(t,(function(e){return void 0!==e.isExceed})),"检查中"===a.status||s?u=-1:e.each(t,(function(e){var a=parseFloat(e.val)-parseFloat(e.setVal||0);a-p>n&&(u-=1),d-a>n&&(u+=1)})),e.each(t,(function(e){var a=parseFloat(e.val)-parseFloat(e.setVal||0);u<0?a-p>n?(e.isExceed=!0,e.isQualified=!1,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)):(e.isExceed=!1,e.isQualified=!0,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)):d-a>n?(e.isExceed=!0,e.isQualified=!1,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)):(e.isExceed=!1,e.isQualified=!0,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y))})))}}))):4===a.passrate_mode||(5===a.passrate_mode||6===a.passrate_mode?(t=e.groupBy(a.realityVal||[],(function(e){return e.area+"-"+e.label})),e.each(t,(function(a){if(e.some(a,(function(e){return!r.hasVal(e.val)||!r.hasVal(e.setVal)})))e.each(a,(function(e){e.isExceed=!1,e.isQualified=!1,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)}));else{var t=e.maxBy(a,(function(e){return Math.abs(e.val-e.setVal)})),u=parseFloat(t.val)-parseFloat(t.setVal||0);r.hasVal(t.val)&&(u<n||u>i)?(e.each(a,(function(e){e.isExceed=!1,e.isQualified=!1,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)})),t.isExceed=!0):e.each(a,(function(e){e.isExceed=!1,e.isQualified=!0,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)}))}}))):7===a.passrate_mode?(t=e.groupBy(a.realityVal||[],"area"),e.each(t,(function(a){if(e.some(a,(function(e){return!r.hasVal(e.val)})))e.each(a,(function(e){e.isExceed=!1,e.isQualified=!1,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)}));else{var t=e.maxBy(a,"val").val-e.minBy(a,"val").val;t<n||t>i?e.each(a,(function(e){e.isExceed=!0,e.isQualified=!1,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)})):e.each(a,(function(e){e.isExceed=!1,e.isQualified=!0,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)}))}}))):8===a.passrate_mode&&e.each(a.realityVal,(function(e){var a=parseFloat(e.val),t=r.hasVal(e.val)&&!a,n=r.hasVal(e.val)&&!!a;e.isExceed=t,e.isQualified=n,e.showMark=r.hasVal(e.val)&&o,e.hasMark=r.hasVal(e.x)&&r.hasVal(e.y)}))),a.realityVal},problemHandle:function(a){var t,n,i=1;3===a.entry_requirements&&e.each(a.realityVal,(function(e){r.hasVal(e.val)?delete e.isFict:e.isFict=1})),1===a.entry_requirements?(a.realityVal=a.exceedVal,a.exceedNum=a.exceedVal.length,a.inputComplete=!e.some(a.exceedVal,(function(e){return!r.hasVal(e.val)})),a.pointNum?a.passrate=(a.pointNum-a.exceedNum)/a.pointNum:a.passrate=0,a.hasExceed=!0):(n=e.filter(a.realityVal,(function(e){return!e.isFict})),5===a.passrate_mode||6===a.passrate_mode?i=2:7===a.passrate_mode&&(i=3),a.exceedVal=e.filter(n,(function(e){return e.isExceed})),a.pointNum=n.length/i,t=e.filter(n,(function(e){return!0!==e.isQualified})),a.exceedNum=t.length/i,a.inputComplete=!e.some(n,(function(e){return!r.hasVal(e.val)})),a.pointNum?a.passrate=(a.pointNum-a.exceedNum)/a.pointNum:a.passrate=0,a.hasExceed=e.some(n,(function(e){return e.isExceed})))}}}).call(this,t("391c"))},e865:function(e,a,t){"use strict";(function(e){var r,n=t("fd50"),i=t("fc9f"),o=t("3bd5"),u=t("334f"),s=t("b725"),c=t("6b81"),l="checkquality_problem";r={getRoomProblems:function(e,a){return i.a.query("SELECT p.id AS id, pp.name AS pp_name, pc.name AS pc_name, pp.id AS pp_id, pc.id AS pc_id, p.id AS problem_id,                 p.room_id as room_id, p.batch_id as batch_id, p.status as status,                 p.measurement_points as measurement_points, p.problem_points as problem_points, p.problem_values as problem_values, p.problem_values_zip as problem_values_zip,                 p.entry_requirements as p_entry_requirements, p.standard_min as p_standard_min, p.standard_max as p_standard_max,                 batch.entry_requirements as entry_requirements, pc.standard_min as standard_min, pc.standard_max as standard_max,                 case when p.id is null then pc.passrate_mode else p.passrate_mode end as passrate_mode             FROM problem_class pp             INNER JOIN problem_class pc ON pp.id = pc.parent_id AND pp.type = 41 AND ifnull(pp.parent_id, '') != ''             inner join section_checkitem sc on sc.item_id = pc.id             inner join batch on batch.bidsection_id = sc.bidsection_id and batch.id = ?             LEFT JOIN checkquality_problem p ON pc.id = p.item_id AND p.batch_id = ? AND p.room_id = ? AND p.batch_type in ('实测实量(新)', '实测巡检')             ORDER BY pp.code, pc.code",[e,e,a])},getMeasureNewBatchRoomProblems:function(a,t,r,n){var o="";r&&(o=" and p.unit = '"+r+"' ");var u=e.reduce(n,(function(e,a){return e+",'"+a+"'"}),"");u&&(u=u.substr(1));var s="SELECT * FROM             checkquality_problem p             WHERE p.batch_type = '实测实量(新)'             AND p.status != '检查中'             AND p.batch_id = ?             AND p.building_id = ?             "+o+"             AND p.item_id IN (             "+u+"             )";return i.a.query(s,[a,t])},getMeasureNewRoomItemProblem:function(e,a,t){return i.a.query("SELECT p.*, uReg.name as regist_by_name, uReg.mobile as regist_by_mobile, uRep.name as repair_name, uRep.mobile as repair_mobile,                     uRep.is_im_user as repair_is_im_user , uReg.is_im_user as regist_is_im_user                     FROM checkquality_problem p                     LEFT JOIN user uReg on p.regist_by = uReg.id                     LEFT JOIN user uRep on p.repair_by = uRep.id                     WHERE p.batch_id = ?                     AND p.room_id = ?                     AND p.item_id = ?",[e,a,t])},getMeasureNewFloorProblem:function(e,a,t,r,n){var o="";t&&(o=" and p.unit = '"+t+"' ");var u="SELECT p.*, uReg.name as regist_by_name, uReg.mobile as regist_by_mobile, uRep.name as repair_name, uRep.mobile as repair_mobile,                     uRep.is_im_user as repair_is_im_user , uReg.is_im_user as regist_is_im_user                     FROM checkquality_problem p                     LEFT JOIN user uReg on p.regist_by = uReg.id                     LEFT JOIN user uRep on p.repair_by = uRep.id                     WHERE p.batch_id = ?                     AND p.building_id = ?                     "+o+"                    AND p.floor = ?                     AND p.item_id = ?";return i.a.query(u,[e,a,r,n])},insert:function(e){return i.a.insertObject(l,e)},update:function(e,a,t,r){return e.modified_by=o.a.getUser().user_id,i.a.update(l,e,{id:e.id}).then((function(){return u.a.saveProblemCC(e.id,a)})).then((function(){return s.a.saveProblemRepair(e.id,t)})).then((function(){return c.a.saveProblemReinspect(e.id,r)}))},getMeasureProblem:function(e,a,t){return i.a.queryOne("select p.*, u.name as regist_by_name, u.mobile as regist_by_mobile, u.is_im_user as regist_is_im_user, pp.status as parent_status,                     urepair.name as repair_name, urepair.mobile as repair_mobile, urepair.is_im_user as repair_is_im_user                 from checkquality_problem p                 left join checkquality_problem pp on p.parent_id = pp.id                 left join user u on p.regist_by = u.id                 left join user urepair on p.repair_by = urepair.id                 where p.batch_id = ? and p.item_id = ? and p.room_id = ? ",[e,a,t])},getMeasureProblemById:function(e){return i.a.queryOne("select p.*, u.name as regist_by_name, u.mobile as regist_by_mobile, u.is_im_user as regist_is_im_user, pp.status as parent_status,                     urepair.name as repair_name, urepair.mobile as repair_mobile, urepair.is_im_user as repair_is_im_user                 from checkquality_problem p                 left join checkquality_problem pp on p.parent_id = pp.id                 left join user u on p.regist_by = u.id                 left join user urepair on p.repair_by = urepair.id                 where p.id = ? ",[e])},getMeasureProblemsByStatus:function(a,t){var r=[a];e.isArray(t)?r=r.concat(t):r.push(t);var n="select * from checkquality_problem where batch_id = ? and ("+e.map(t,(function(){return"status = ?"})).join(" or ")+") and ifnull(parent_id, '') != ''";return i.a.query(n,r)},getMeasureProblemsByRoom:function(a,t){var r="select * from checkquality_problem where batch_id = ? and ifnull(parent_id, '') != '' and room_id in ("+(e.map(t,(function(e){return"'"+e+"'"})).join(", ")||"''")+")";return i.a.query(r,[a])},updateProblem:function(e,a){return i.a.update("checkquality_problem",a,{id:e})},getSingleRoomMeasureCheckitems:function(e){return i.a.query("select pc.id, pc.name, pc2.name as parent_name, u.id as repair_id, u.name as repair_name, u.mobile as repair_phone, p.repair_date,                    p.repair_image_file, p.repair_remark                from checkquality_problem p                join room r on r.id = p.room_id                join problem_class pc on p.item_id = pc.id                join problem_class pc2 on pc.parent_id = pc2.id                left join user u on u.id = p.repair_by                where p.batch_id = ? and p.status != '检查中'                 group by pc.id, pc.name",[e])},getSingleRoomMeasureReportData:function(e){return i.a.query("select p.room_id, r.room_no, r.unit, b.name as building_name, p.item_id, p.measurement_points, p.problem_points                from checkquality_problem p                join room r on r.id = p.room_id                join building b on r.building_id = b.id                join building_floor bf on r.building_id = bf.building_id and r.floor = bf.floor                where p.batch_id = ? and p.status != '检查中'                order by b.sort, b.code, bf.sort, r.no, r.room_no",[e])},getProblemRepairs:function(e){return i.a.query("select u.* from checkquality_repair r                join user u on u.id = r.repair                where r.checkquality_problem_id = ?",[e])},getProblemCC:function(e){return i.a.query("select u.* from checkquality_cc cc                join user u on u.id = cc.cc                where cc.checkquality_problem_id = ? and cc.type = '被抄送'",[e])},updateProblemModifiedBy:function(e){return i.a.update(l,{modified_by:o.a.getUser().user_id},{id:e})},getMeasureEmptyRooms:function(e){return i.a.query("select * from batch_room br where br.batch_id = ? and not exists (                select 1 from checkquality_problem p where p.batch_id = br.batch_id and p.room_id = br.room_id             )",[e])},getDuplicatedMeasure:function(){return i.a.query("select * from checkquality_problem p where batch_type = '实测实量(新)' group by batch_id, room_id, item_id having count(1) > 1",[])},removeCheckingMeasure:function(e,a,t){return i.a.executeSql("delete from checkquality_problem where batch_id = ? and item_id = ? and room_id = ? and status = '检查中'",[e,a,t])},hasAcceptCheckItems:function(e){var a=[e];return i.a.queryOne("SELECT count(1) as count                 FROM problem_class pc                 INNER JOIN problem_class pp ON pc.parent_id = pp.id                 INNER JOIN section_checkitem sci on sci.item_id = pc.id and sci.bidsection_id = ?                WHERE pp.type = 41                 AND ifnull(pp.parent_id, '') != ''                 ORDER BY pp.code, pc.code",a)},isSectionHasCheckItem:function(a){if(!e.isArray(a))return n.a.reject("参数错误");var t="SELECT sci.bidsection_id as section_id, count(1) as count                             FROM problem_class pc                             INNER JOIN problem_class pp ON pc.parent_id = pp.id                             INNER JOIN section_checkitem sci on sci.item_id = pc.id and sci.bidsection_id in ("+e.map(a,(function(e){return"?"})).join(", ")+")                            WHERE pc.type = 41 AND ifnull(pp.parent_id, '') != ''                             group by sci.bidsection_id";return i.a.query(t,a)},getTopMeasureProblem:function(e){return i.a.queryOne("select p.*, u.name as regist_name, u.mobile as regist_phone, b.name as batch_name                    from checkquality_problem p left join user u on p.regist_by = u.id                    left join batch b on p.batch_id = b.id                    where p.batch_id = ? and ifnull(p.parent_id, '') = ''",[e])},changeProblemStatus:function(e,a){return i.a.executeSql("update checkquality_problem set status = ? where id = ?",[a,e])},getMeasureInspectBatchRoomStatus:function(e,a){return i.a.query("select p.batch_id, p.item_id, p.room_id, p.status,                             p.building_id, p.unit                             from checkquality_problem p                             where p.batch_id = ? and p.item_id = ? and p.status <> '检查中'",[e,a])},getMeasureInspectStatisticalData:function(e){return i.a.query("select item.id, item.name as item_name, item.parent_id,                 parent_item.name as parent_name,                 r.id as room_id, r.room_no, r.unit, b.name as building_name,                 points.m_points, points.p_points                 from batch_checkitem b_item                 join batch_room b_room on b_room.batch_id = b_item.batch_id                 join room r on b_room.room_id = r.id                 join problem_class item on item.id = b_item.item_id                 join building_floor bf on bf.building_id = r.building_id and r.floor = bf.floor                 left join (                 select batch_id, item_id, room_id, measurement_points as m_points, problem_points as p_points                 from checkquality_problem p                 WHERE p.batch_id = ? and p.status <> '检查中'                 ) points on points.room_id = r.id and points.item_id = item.id                 left join problem_class parent_item on parent_item.id = item.parent_id                 left join building b on b.id = r.building_id                 where b_item.batch_id = ?                 ORDER BY item.code, b.sort, b.code, r.unit, bf.sort, r.no",[e,e])},uniqueMeasureProblem:function(e,a,t,r){return i.a.executeSql("delete from checkquality_problem where batch_id = ? and item_id = ? and room_id = ? and id != ?",[e,t,r,a])},uniqueMeasureFloorProblem:function(e,a,t,r,n){return i.a.executeSql("delete from checkquality_problem where batch_id = ? and building_id = ? and floor = ? and item_id = ? and id != ?",[e,a,t,r,n])},uniqueMeasureFloorUnitProblem:function(e,a,t,r,n,o){return i.a.executeSql("delete from checkquality_problem where batch_id = ? and building_id = ? and unit = ? and floor = ? and item_id = ? and id != ?",[e,a,t,r,n,o])},uniqueMeasureBuildingProblem:function(e,a,t){return i.a.executeSql("delete from checkquality_problem where batch_id = ? and building_id = ? and item_id = ?",[e,a,t])},deleteBatchProblems:function(e,a){var t="delete from checkquality_problem where batch_id = ? and room_id in ("+new Array(a.length+1).join("?,").slice(0,-1)+")";return i.a.executeSql(t,[e].concat(a))},getAllMeasureBuildingCheckItems:function(e,a){return i.a.query("SELECT                     pp.id AS pp_item_id,                     pp.name AS pp_item_name,                     pc.id AS pc_item_id,                     pc.name AS pc_item_name,                     pc.full_name AS pc_full_name,                     case when ifnull(t.process_mode, '') != '' and t.process_mode = '' then 1 when ifnull(t.process_mode, '') != '' and t.process_mode != '' then t.process_mode else pc.process_mode end as process_mode                 FROM problem_class pc                 INNER JOIN problem_class pp ON pc.parent_id = pp.id                 INNER JOIN section_checkitem sci on sci.item_id = pc.id and sci.bidsection_id = ?                left join (select p.item_id, ifnull(p.process_mode, '') as process_mode from checkquality_problem p where p.batch_type = '实测实量(新)' and p.building_id = ? group by p.item_id, ifnull(p.process_mode, '')) t on pc.id = t.item_id                 WHERE pp.type = 41                 AND ifnull(pp.parent_id, '') != ''                 GROUP BY pc.id                 ORDER BY pp.code, pc.code",[e,a])},getOneMeasureByBuildingAndItem:function(e,a){return i.a.queryOne("select * from checkquality_problem where building_id = ? and item_id = ?",[e,a])},getRoomAllProblems:function(e,a){return i.a.query("select cp.*, pc.parent_id as parent_item_id from checkquality_problem cp                     left join problem_class pc on pc.id = cp.item_id                     where batch_id = ? and room_id = ? and batch_type = '实测巡检'",[e,a])}},a.a=r}).call(this,t("391c"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,