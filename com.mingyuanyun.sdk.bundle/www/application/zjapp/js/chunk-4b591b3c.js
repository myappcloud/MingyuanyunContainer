(window.webpackJsonp_module_entry_zjapp_=window.webpackJsonp_module_entry_zjapp_||[]).push([["chunk-4b591b3c"],{"17a9":function(e,t,n){var a=n("bbd3");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,n("85cb").default)("430e1c86",a,!0,{sourceMap:!1,shadowMode:!1})},"310c":function(e,t,n){var a=n("34e3");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,n("85cb").default)("ca4785d6",a,!0,{sourceMap:!1,shadowMode:!1})},"34e3":function(e,t,n){(e.exports=n("690e")(!1)).push([e.i,'.zjapp .table-chart[data-v-486596b0]{position:relative;display:flex;flex:1;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.zjapp .drawing[data-v-486596b0]{flex:1;width:100%}.zjapp .chart-legend[data-v-486596b0]{position:absolute;padding:7px 10px;top:6px;right:6px;height:68px;background:#fff;border-radius:2px;z-index:10;box-shadow:0 0 2px 0 rgba(0,0,0,.5)}.zjapp .legend-item[data-v-486596b0]{margin:0;line-height:1.5;white-space:nowrap}.zjapp .legend-item[data-v-486596b0]:before{content:"";margin-right:8px;vertical-align:-1px;display:inline-block;width:15px;height:10px}.zjapp .legend-orange[data-v-486596b0]:before{background-color:#ffa340}.zjapp .legend-green[data-v-486596b0]:before{background-color:#48d48c}.zjapp .legend-red[data-v-486596b0]:before{background-color:#ff6e6e}.zjapp .legend-blue-shallow[data-v-486596b0]:before{background-color:#98b8ff}.zjapp .legend-blue-deep[data-v-486596b0]:before{background-color:#638df7}.zjapp .legend-purple[data-v-486596b0]:before{background-color:#8e81ff}',""])},"4f50":function(e,t,n){"use strict";(function(e){n("5ab2"),n("6d57"),n("e10e"),n("6f84"),n("cc57");var a=n("28f8");n("163d"),n("f548");function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){Object(a.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var o,r,s,c,d,f,u,h=0,p={red:"#ff6e6e",green:"#48d48c",orange:"#ffa340","blue-shallow":"#98b8ff","blue-deep":"#638df7",purple:"#8E81FF"},x={red:"#ff3d3d",green:"#0bc666",orange:"#ff8400","blue-shallow":"#6989e8","blue-deep":"#426fd6",purple:"#8E81FF"},g=0,b=0,y=0,m=0,v=0,w=0,S=0,k=0,P=0,T=!1,C={},I={},R=[];t.a={name:"TableChartDrawing",props:{xLabel:{type:String,default:"工序"},xItems:{type:Array,default:function(){return[]}},yLabel:{type:String,default:"楼层"},yItems:{type:Array,default:function(){return[]}},datas:{type:Array,default:function(){return[]}},cellWidth:{type:Number,default:30},showAllColorCellContain:{type:Boolean,default:!1}},data:function(){return{}},watch:{datas:function(e){this.initDatas(),this.setMoveStatus(),this.draw()}},mounted:function(){var e=this;this.$nextTick((function(){e.init()}))},methods:{init:function(){var e,t,n,a,i;this.$refs.drawing&&(o=this.$refs.drawing,r=o.getContext("2d"),s=o.offsetWidth,c=o.offsetHeight,d=this.getPixelRatio(r),o.style.width=s+"px",o.style.height=c+"px",o.width=s*d,o.height=c*d,h=c-110,!r.extended&&(n=(t=e=r).backingStorePixelRatio||CanvasRenderingContext2D.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1,1!==(i=(window.devicePixelRatio||1)/n)&&(function(e,t){for(var n in e)e.hasOwnProperty(n)&&t(e[n],n)}({fillRect:"all",clearRect:"all",strokeRect:"all",moveTo:"all",lineTo:"all",arc:[0,1,2],arcTo:"all",bezierCurveTo:"all",isPointinPath:"all",isPointinStroke:"all",quadraticCurveTo:"all",rect:"all",translate:"all",createRadialGradient:"all",createLinearGradient:"all"},(function(t,n){var a;e[n]=(a=e[n],function(){var e,n,l=Array.prototype.slice.call(arguments);if("all"===t)l=l.map((function(e){return e*i}));else if(Array.isArray(t))for(e=0,n=t.length;e<n;e++)l[t[e]]*=i;return a.apply(this,l)})})),e.stroke=(a=e.stroke,function(){this.lineWidth*=i,a.apply(this,arguments),this.lineWidth/=i}),e.fillText=function(e){return function(){var t=Array.prototype.slice.call(arguments);t[1]*=i,t[2]*=i,this.font=this.font.replace(/(\d+)(px|em|rem|pt)/g,(function(e,t,n){return t*i+n})),e.apply(this,t),this.font=this.font.replace(/(\d+)(px|em|rem|pt)/g,(function(e,t,n){return t/i+n}))}}(e.fillText),e.strokeText=function(e){return function(){var t=Array.prototype.slice.call(arguments);t[1]*=i,t[2]*=i,this.font=this.font.replace(/(\d+)(px|em|rem|pt)/g,(function(e,t,n){return t*i+n})),e.apply(this,t),this.font=this.font.replace(/(\d+)(px|em|rem|pt)/g,(function(e,t,n){return t/i+n}))}}(e.strokeText),e.extended=!0)),r.lineWidth=1/d,r.translate(1/d/2,1/d/2),this.initDatas(),this.setMoveStatus(),this.draw(),o.addEventListener("touchstart",this.onTouchstart),o.addEventListener("touchmove",this.onTouchmove),o.addEventListener("touchend",this.onTouchend))},initDatas:function(){var t=this,n=e.groupBy(this.datas,"x");C={},I={},R=[],e.each(this.xItems,(function(e,t){C[e.id]=l(l({},e),{},{index:t})})),e.each(this.yItems,(function(e,t){I[e.id]=l(l({},e),{},{index:t})})),e.each(n,(function(n){if(t.showAllColorCellContain)e.each(n,(function(e){R.push(l(l({},e),{},{xIndex:C[e.x].index,xName:C[e.x].name,yIndex:I[e.y].index,yName:I[e.y].name,content:e.content||""}))}));else{var a=e.maxBy(n,(function(e){return I[e.y].index}));R.push(l(l({},a),{},{xIndex:C[a.x].index,xName:C[a.x].name,yIndex:I[a.y].index,yName:I[a.y].name,content:a.content||""}))}}))},setMoveStatus:function(){g=0,b=0,y=s-65-this.xItems.length*this.cellWidth,m=20*this.yItems.length-(c-110),y>0&&(y=0),m<0&&(m=0)},getPixelRatio:function(e){var t=e.backingStorePixelRatio||CanvasRenderingContext2D.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1;return(window.devicePixelRatio||1)/t},draw:function(){this.drawTable(),this.drawStatus(),this.drawMaxYCell(),this.drawSlide(),this.drawMenu()},drawSlide:function(){r.beginPath(),r.fillStyle="#ffffff",r.rect(0,0,65,c),r.rect(0,c-110,s,110),r.fill()},drawMenu:function(){this.drawXMenu(),this.drawYMenu(),r.fillStyle="#ffffff",r.strokeStyle="#d9d9d9",r.beginPath(),r.rect(0,h,65,110),r.fill(),r.beginPath(),g&&(r.shadowBlur=4,r.shadowColor="rgba(0,0,0,0.76)"),r.rect(0,-10,65,c+10),r.stroke(),r.beginPath(),b?(r.shadowBlur=4,r.shadowColor="rgba(0,0,0,0.76)"):(r.shadowBlur=0,r.shadowColor="transparent"),r.rect(0,c-110,s,110),r.stroke(),r.shadowBlur=0,r.shadowColor="transparent",r.textAlign="center",r.textBaseline="middle",r.font="12px -apple-system, Helvetica Neue, Roboto, Segoe UI, sans-serif",r.fillStyle="#111",r.fillText(this.yLabel,32.5,c-98),r.textAlign="center",r.textBaseline="middle",r.font="12px -apple-system, Helvetica Neue, Roboto, Segoe UI, sans-serif",r.fillStyle="#111",r.fillText(this.xLabel,32.5,c-74),r.strokeStyle="#111",r.beginPath(),r.moveTo(20,c-86),r.lineTo(44,c-86),r.stroke()},drawXMenu:function(){var t=this,n=c-97.5;r.textAlign="center",r.textBaseline="middle",r.font="12px -apple-system, Helvetica Neue, Roboto, Segoe UI, sans-serif",r.fillStyle="#111",e.each(this.xItems,(function(a,i){var l=(t.cellWidth-30)/2;l=l>0?l:0;var o=80+t.cellWidth*i+g+l;o>65-t.cellWidth&&o<s+t.cellWidth&&e.each(a.name,(function(e,t){r.textAlign="center",r.textBaseline="middle",r.font="12px -apple-system, Helvetica Neue, Roboto, Segoe UI, sans-serif",r.fillStyle="#111",r.fillText(e,o,n+13*t)}))}))},drawYMenu:function(){var t=c-120;r.textAlign="center",r.textBaseline="middle",r.font="12px -apple-system, Helvetica Neue, Roboto, Segoe UI, sans-serif",r.fillStyle="#111",e.each(this.yItems,(function(e,n){var a=t-20*n+b;a>-20&&a<h+20&&(r.textAlign="center",r.textBaseline="middle",r.font="12px -apple-system, Helvetica Neue, Roboto, Segoe UI, sans-serif",r.fillStyle="#111",r.fillText(e.name,32.5,a))}))},drawTable:function(){var t=this;r.clearRect(65,0,s-65,h),r.strokeStyle="#d9d9d9";var n=65+g,a=h+b;r.beginPath(),e.each(this.xItems,(function(e,i){var l=n+t.cellWidth*(i+1);l>65&&l<s&&(r.moveTo(l,a),r.lineTo(l,a-20*t.yItems.length))})),e.each(this.yItems,(function(e,i){var l=a-20*(i+1);l>0&&l<h&&(r.moveTo(n,l),r.lineTo(n+t.cellWidth*t.xItems.length,l))})),r.stroke()},drawStatus:function(){var t=this,n=e.groupBy(this.datas,"status");e.each(n,(function(n){r.beginPath(),e.each(n,(function(e){if(e.status){var n=C[e.x].index,a=I[e.y].index+1,i=h+b,l=65+g+t.cellWidth*n,o=i-20*a;l>65-t.cellWidth&&l<s&&o>-20&&o<h&&(r.fillStyle=p[e.status],r.strokeStyle=x[e.status],r.rect(l,o,t.cellWidth,20))}})),r.fill(),r.stroke()}))},drawMaxYCell:function(){var t=this;r.textAlign="center",r.textBaseline="middle",r.font="12px -apple-system, Helvetica Neue, Roboto, Segoe UI, sans-serif",r.fillStyle="#fff",r.beginPath(),e.each(R,(function(e){var n=e.content||e.yName.substr(0,3),a=65+g+t.cellWidth*e.xIndex,i=h+b-20*(e.yIndex+1);a>65-t.cellWidth&&a<s&&i>-20&&i<h&&(r.textAlign="center",r.textBaseline="middle",r.font="12px -apple-system, Helvetica Neue, Roboto, Segoe UI, sans-serif",r.fillStyle="#fff",r.fillText(n,a+.5*t.cellWidth,i+10))}))},winToCanvas:function(e,t){var n=o.getBoundingClientRect();return{x:e-n.left,y:t-n.top}},onTouchstart:function(e){var t=e.touches[0];u={x:t.clientX,y:t.clientY,moveX:g,moveY:b,time:Date.now()},T=!1},onTouchmove:function(e){var t=e.touches[0],n=t.clientX,a=t.clientY,i=Math.abs(n-u.x),l=Math.abs(a-u.y),o=u.moveX+(n-u.x),r=u.moveY+(a-u.y);i<3&&l<3||(f||(f=i>l?"x":"y"),"x"===f?g=o>0?0:o<y?y:o:b=r>m?m:r<0?0:r,S=v,k=w,v=t.clientX,w=t.clientY,P=Date.now(),this.draw())},onTouchend:function(e){var t=e.changedTouches[0];if(u&&Date.now()-u.time<500&&Math.abs(t.clientX-u.x)<6&&Math.abs(t.clientY-u.y)<6){var n=this.winToCanvas(t.clientX,t.clientY),a=Math.floor((n.x-65-g)/this.cellWidth),i=Math.floor((h-n.y+b)/20);this.$emit("click",{x:this.xItems[a],y:this.yItems[i]})}else{var l=Date.now()-P,o="x"===f?(t.clientX-S)/l:0,r="y"===f?(t.clientY-k)/l:0;v=0,w=0,T=!0,this.glide(o,r)}f="",this.draw()},glide:function(e,t){var n=this;window.requestAnimationFrame((function(){g+=16.7*(e*=.95),b+=16.7*(t*=.95),e&&g>y&&g<0||t&&b>0&&b<m?(Math.abs(e)>.05||Math.abs(t)>.05)&&T&&n.glide(e,t):(e&&(g=g>0?0:g<y?y:g),t&&(b=b>m?m:b<0?0:b)),n.draw()}))}}}}).call(this,n("391c"))},"751c":function(e,t,n){"use strict";n("17a9")},"7b30":function(e,t,n){"use strict";n("310c")},"918e":function(e,t,n){"use strict";n("cc57"),n("163d");var a=n("4f50").a,i=(n("751c"),n("17cc")),l=Object(i.a)(a,(function(){var e=this.$createElement;return(this._self._c||e)("canvas",{ref:"drawing"})}),[],!1,null,"94867816",null).exports,o=n("391c"),r={name:"TableChart",components:{drawing:l},props:{xLabel:{type:String},xItems:{type:Array,default:function(){return[]}},yLabel:{type:String},yItems:{type:Array,default:function(){return[]}},datas:{type:Array,default:function(){return[]}},legend:{type:Array,default:function(){return[]}},cellWidth:{type:Number,default:void 0},showAllColorCellContain:{type:Boolean,default:!1}},data:function(){return{width:0,height:0}},computed:{legendBoxWidth:function(){var e=this.legend.map((function(e){return e.name.length}));return 6*Object(o.max)(e)+48+20}},mounted:function(){},methods:{onclick:function(){}}},s=(n("7b30"),Object(i.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"table-chart"},[e.legend.length?n("div",{staticClass:"chart-legend",style:{width:e.legendBoxWidth+"px",height:18*e.legend.length+14+"px"}},e._l(e.legend,(function(t,a){return n("p",{key:a,class:"legend-item legend-"+t.color},[e._v("\n      "+e._s(t.name)+"\n    ")])}))):e._e(),n("drawing",{staticClass:"drawing",attrs:{"x-label":e.xLabel,"x-items":e.xItems,"y-label":e.yLabel,"y-items":e.yItems,datas:e.datas,"cell-width":e.cellWidth,"show-all-color-cell-contain":e.showAllColorCellContain},on:{click:function(t){return e.$emit("click",t)}}})],1)}),[],!1,null,"486596b0",null));t.a=s.exports},bbd3:function(e,t,n){(e.exports=n("690e")(!1)).push([e.i,".zjapp .table-chart[data-v-94867816]{flex:1}",""])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,