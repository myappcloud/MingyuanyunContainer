(window.webpackJsonp_module_entry_zjapp_=window.webpackJsonp_module_entry_zjapp_||[]).push([["chunk-55bf535c"],{"05ac":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return l}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703"),o=r("fc9f");function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var l=function(e){Object(a.a)(r,e);var t=s(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"getIndexList",value:function(e){var t="select si.*, si.checkitem_name as name,\n\t\t(select count(*) from checkquality_problem cp where cp.biz_id = si.id ) as problemNum,\n\t\t(select sum(deduction) from checkquality_problem cp1 \n      where batch_type = '专项巡检' and cp1.biz_id = si.id and cp1.status != '草稿' and cp1.status != '已关闭') as deduction \n\t\tfrom special_inspect si \n\t\twhere si.batch_id = '".concat(e,"' order by si.checkitem_code");return o.a.query(t)}}]),r}(r("29f8").a)},"09d6":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return d}));r("2b45"),r("fc58"),r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("76ff"),u=r("4b67"),o=r("d703"),s=r("937e"),l=r("a044"),f=r("e2a7");function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(o.a)(e);if(t){var c=Object(o.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(u.a)(this,r)}}var d=function(e){Object(i.a)(u,e);var t,r=p(u);function u(){return Object(c.a)(this,u),r.apply(this,arguments)}return Object(a.a)(u,[{key:"onClickEndNode",value:function(e,t,r){e.status===l.y?this.routeToOldSetPass(e):(e.status!==l.v||e.temporary_storage)&&this.routeToOldProblemList(e,r)}},{key:"routeToEdit",value:function(e){this.routeToOldProblemEdit(e)}},{key:"routeToView",value:function(e){this.routeToOldProblemView(e)}},{key:"changeSpecialInspectStatus",value:function(e){this.routeToOldSetPass(e)}},{key:"gotoProblemList",value:function(e,t,r){this.gotoOldProblemList({batch_id:e,mode:8})}},{key:"finishBatchConfirm",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t,r,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r||[]).some((function(e){return!e.treeNodeIsFirst&&e.treeNodeIsEnd&&e.temporary_storage}))){e.next=3;break}return e.abrupt("return",f.a.confirm("有暂存数据未提交，继续操作将清除所有暂存数据，是否确定提交？"));case 3:case"end":return e.stop()}}),e)}))),function(e,r,n){return t.apply(this,arguments)})}]),u}(s.a)},1079:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return s}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703");function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var s=function(e){Object(a.a)(r,e);var t=o(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"getIndexList",value:function(e){var t="select si.*, si.checkitem_name as name,\n    (select count(*) from checkquality_problem cp \n      where cp.biz_id = si.id and cp.status !='草稿' ) as problem_num,\n\t  (select count(*) from checkquality_problem cp \n      where cp.biz_id = si.id and cp.status ='草稿' ) as temporary_storage,\n    (select deduction from checkquality_problem cp1 \n      where batch_type = '专项巡检' and cp1.biz_id = si.id and cp1.status != '草稿' ORDER BY deduction desc, created_on desc limit 1) as deduction,\n    (select redline_deduction from checkquality_problem cp1 \n      where batch_type = '专项巡检' and cp1.biz_id = si.id and cp1.status != '草稿' ORDER BY deduction desc, created_on desc limit 1) as redline_deduction,\n    (select deduction_level from checkquality_problem cp1 \n      where batch_type = '专项巡检' and cp1.biz_id = si.id and cp1.status != '草稿' ORDER BY deduction desc, created_on desc limit 1) as deduction_level,\n\t\t(select id from checkquality_problem cp where cp.biz_id = si.id order by cp.download_time desc limit 1) as problem_id\n\t\tfrom special_inspect si \n\t\twhere si.batch_id = '".concat(e,"' order by si.checkitem_code");return localDB.query(t)}}]),r}(r("29f8").a)},1522:function(e,t,r){"use strict";r.d(t,"b",(function(){return i}));r("f548"),r("6d57");var n=new(r("29f8").a);t.a=n;var c=r("9dfb"),a={};function i(e){return a["mode-".concat(e)]||n}c.keys().forEach((function(e){var t=c(e).default,r=e.replace(/(\.\/|\.js)/g,"");a[r]=new t}))},"1e33":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return b}));r("2b45"),r("fc58"),r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("90ce"),u=r("76ff"),o=r("4b67"),s=r("d703"),l=r("937e"),f=(r("48f4"),r("1b7e")),p=r("162a"),d=r("fc9f"),h=(r("4360"),r("a044"));function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(s.a)(e);if(t){var c=Object(s.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(o.a)(this,r)}}var b=function(e){Object(u.a)(l,e);var t,r,o=m(l);function l(){return Object(c.a)(this,l),o.apply(this,arguments)}return Object(a.a)(l,[{key:"onClickEndNode",value:function(e,t,r){e.status===h.y?this.routeToOldSetPass(e):e.problemNum&&this.routeToOldProblemList(e,r)}},{key:"routeToEdit",value:function(e){this.routeToOldProblemEdit(e)}},{key:"routeToView",value:function(e){this.routeToOldProblemView(e)}},{key:"changeSpecialInspectStatus",value:(r=Object(n.a)(regeneratorRuntime.mark((function e(t,r,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r===h.y?this.routeToOldSetPass(t):Object(i.a)(Object(s.a)(l.prototype),"changeSpecialInspectStatus",this).call(this,t,r,n);case 1:case"end":return e.stop()}}),e,this)}))),function(e,t,n){return r.apply(this,arguments)})},{key:"gotoProblemList",value:function(e,t,r){this.gotoOldProblemList({batch_id:e,mode:this.mode})}},{key:"finishBatch",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t,r){var n,c,a,u,o,m;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("UsingSpecialInspectMode3DefaultOk"!==r.grayKey){e.next=27;break}return n=t.id,t.status=h.u,e.next=5,f.a.getHasNetwork();case 5:if(e.sent){e.next=8;break}return e.abrupt("return",Promise.reject("当前网络无法同步数据"));case 8:return e.next=10,p.a.post("/batch/upload",null,{data:{batch:t}});case 10:if(!("ex_data"in(c=e.sent))){e.next=14;break}return e.next=14,p.a.importData({result:c.ex_data});case 14:return e.next=16,d.a.update("batch",c.batch,{id:n});case 16:return a={status:h.v,deduction:0,image_file:"[]"},u={batch_id:t.id,status:h.w},e.next=20,this.Repositories.updateSpecialInspectAll(u,a);case 20:return e.next=22,this.Repositories.getDraftProblemByBatchId(n);case 22:return o=e.sent,m=(o||[]).map((function(e){return e.id})),e.abrupt("return",this.Repositories.deleteProblemById(m));case 27:return e.next=29,Object(i.a)(Object(s.a)(l.prototype),"finishBatch",this).call(this,t);case 29:case"end":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})}]),l}(l.a)},2150:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return b}));r("2b45"),r("fc58"),r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("90ce"),u=r("76ff"),o=r("4b67"),s=r("d703"),l=r("937e"),f=r("a18c"),p=r("e2a7"),d=r("7cb8"),h=r("a044");function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(s.a)(e);if(t){var c=Object(s.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(o.a)(this,r)}}var b=function(e){Object(u.a)(l,e);var t,r,o=m(l);function l(){return Object(c.a)(this,l),o.apply(this,arguments)}return Object(a.a)(l,[{key:"onClickEndNode",value:function(e,t,r){f.a.push({path:"/special-inspect-measure-problem-detail",query:{bizId:e.id}})}},{key:"batchCheck",value:(r=Object(n.a)(regeneratorRuntime.mark((function e(t,r,n,c){var a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(i.a)(Object(s.a)(l.prototype),"batchCheck",this).call(this,t,r,n,c);case 2:if(!(a=e.sent)){e.next=5;break}return e.abrupt("return",a);case 5:if(t.place&&t.place.trim()){e.next=8;break}return e.abrupt("return",{code:1,msg:"检查部位必填"});case 8:case"end":return e.stop()}}),e,this)}))),function(e,t,n,c){return r.apply(this,arguments)})},{key:"finishBatchConfirm",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t,r,n){var c,a,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(c=Object(d.g)(n,"status",[h.v]),!((a=c[h.v])>0)){e.next=6;break}if(i=p.a.popBox({title:'有<span class="color-orange pl5 pr5">'+a+"</span>项无记录，是否正常提交？",cancelText:"取消",okText:"提交"})){e.next=6;break}return e.abrupt("return",i);case 6:return e.abrupt("return",p.a.confirm("请确保所有检查人已上传数据，提交后不可修改，确认提交？"));case 7:case"end":return e.stop()}}),e)}))),function(e,r,n){return t.apply(this,arguments)})}]),l}(l.a)},"264e":function(e,t,r){"use strict";r.d(t,"a",(function(){return n})),r.d(t,"c",(function(){return c})),r.d(t,"b",(function(){return a})),r.d(t,"d",(function(){return i}));var n="检查完毕",c="未设置",a="草稿",i=[c,a]},"266f":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return d}));r("2b45"),r("fc58"),r("6d57"),r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("76ff"),u=r("4b67"),o=r("d703"),s=r("937e"),l=r("a044"),f=(r("e2a7"),r("7cb8"));function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(o.a)(e);if(t){var c=Object(o.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(u.a)(this,r)}}var d=function(e){Object(i.a)(u,e);var t,r=p(u);function u(){return Object(c.a)(this,u),r.apply(this,arguments)}return Object(a.a)(u,[{key:"getIndexList",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.getIndexList(t);case 2:return((r=e.sent)||[]).forEach((function(e){e.template_extension=Object(f.l)(e.template_extension)||{}})),n=Object(f.c)(r,{key:"id",relationKey:"parent_id",setLevel:!0}),e.abrupt("return",{tree:n,list:r});case 6:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"batchCheck",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=t.some((function(e){return e.status===l.u}));if(!r)return{code:1,msg:"请完成至少一个末级模板再提交"}}}]),u}(s.a)},2757:function(e,t,r){"use strict";r.d(t,"a",(function(){return y})),r.d(t,"c",(function(){return g})),r.d(t,"d",(function(){return O}));r("6a61");var n=r("2e91"),c=(r("9e76"),r("f548"),r("6d57"),r("5ab2"),r("e10e"),r("28f8")),a=r("0e4d"),i=r("94ef"),u=r("1522"),o=r("3bd5"),s=r("7bac"),l=r("4360"),f=r("3516"),p=r("7cb8");function d(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function h(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?d(Object(r),!0).forEach((function(t){Object(c.a)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):d(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var m=function(){function e(){Object(a.a)(this,e),this.batchTemplateModeCache={},this.specialInspectTemplateModeCache={}}var t,r,c,d,m,b,y;return Object(i.a)(e,[{key:"getDefaultBatch",value:(y=Object(n.a)(regeneratorRuntime.mark((function e(){var t,r,n,c,a,i=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=i.length>0&&void 0!==i[0]?i[0]:l.a.state.global.currentProject.id,r="SpecialInspectBatchStorageKey-".concat(t),e.next=4,s.a.getUserKey(r);case 4:return n=e.sent,c=n&&n.id,e.next=8,this.getBatchById(c);case 8:return a=e.sent,e.abrupt("return",a);case 10:case"end":return e.stop()}}),e,this)}))),function(){return y.apply(this,arguments)})},{key:"setDefaultBatch",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:l.a.state.global.currentProject.id,r="SpecialInspectBatchStorageKey-".concat(t);return s.a.setUserKey(r,e)}},{key:"getBatchList",value:(b=Object(n.a)(regeneratorRuntime.mark((function e(){var t,r,n,c=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=c.length>0&&void 0!==c[0]?c[0]:l.a.state.global.currentProject.id,r=c.length>1&&void 0!==c[1]?c[1]:o.a.getUser().user_id,e.next=4,u.a.getBatchList(t,r);case 4:return n=e.sent,e.abrupt("return",(n||[]).map((function(e){return h(h({},e),{},{template_extension:Object(p.l)(e.template_extension)||{}})})));case 6:case"end":return e.stop()}}),e)}))),function(){return b.apply(this,arguments)})},{key:"getFirstBatch",value:(m=Object(n.a)(regeneratorRuntime.mark((function e(){var t,r,n,c=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=c.length>0&&void 0!==c[0]?c[0]:l.a.state.global.currentProject.id,r=c.length>1&&void 0!==c[1]?c[1]:o.a.getUser().user_id,e.next=4,u.a.getFirstBatch(t,r);case 4:return(n=e.sent)&&(n.template_extension=Object(p.l)(n&&n.template_extension)||{}),e.abrupt("return",n);case 7:case"end":return e.stop()}}),e)}))),function(){return m.apply(this,arguments)})},{key:"getBatchById",value:(d=Object(n.a)(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.a.getBatchById(t);case 2:return(r=e.sent)&&(r.template_extension=Object(p.l)(r&&r.template_extension)||{}),e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)}))),function(e){return d.apply(this,arguments)})},{key:"getCurrentBatch",value:(c=Object(n.a)(regeneratorRuntime.mark((function e(){var t,r,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:l.a.state.global.currentProject.id,e.next=3,this.getDefaultBatch(t);case 3:if(r=e.sent){e.next=8;break}return e.next=7,this.getFirstBatch(t);case 7:r=e.sent;case 8:return e.abrupt("return",r);case 9:case"end":return e.stop()}}),e,this)}))),function(){return c.apply(this,arguments)})},{key:"getBatchContracts",value:function(e){return u.a.getBatchContracts(e)}},{key:"getBatchWillUploadNum",value:function(){return Promise.resolve()}},{key:"finishCheckBatch",value:function(){return Promise.resolve()}},{key:"getTemplateList",value:function(){return u.a.getTemplateList()}},{key:"getContractList",value:function(e){return u.a.getContractList(e)}},{key:"getBatchUsers",value:function(e){return f.a.getBatchUsers(e)}},{key:"getBatchTemplateMode",value:(r=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return");case 2:if(void 0===this.batchTemplateModeCache[t]){e.next=6;break}return e.abrupt("return",this.batchTemplateModeCache[t]);case 6:return e.next=8,u.a.getBatchTemplateMode(t);case 8:return r=e.sent,void 0!==(n=r&&r.mode)&&(this.batchTemplateModeCache[t]=n),e.abrupt("return",n);case 12:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"getSpecialInspectTemplateMode",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===this.specialInspectTemplateModeCache[t]){e.next=4;break}return e.abrupt("return",this.specialInspectTemplateModeCache[t]);case 4:return e.next=6,u.a.getSpecialInspectBatchId(t);case 6:return r=e.sent,n=r&&r.batch_id,e.next=10,this.getBatchTemplateMode(n);case 10:return void 0!==(c=e.sent)&&(this.specialInspectTemplateModeCache[t]=c),e.abrupt("return",c);case 13:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}(),b=r("937e"),y=new m,v=new b.a,_=(t.b=v,r("ae0f")),k={};function g(e){return k["mode-".concat(e)]||v}function O(e){return j.apply(this,arguments)}function j(){return(j=Object(n.a)(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y.getSpecialInspectTemplateMode(t);case 2:return r=e.sent,e.abrupt("return",g(r));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}_.keys().forEach((function(e){var t=_(e).default,r=e.replace(/(\.\/|\.js)/g,""),n=e.match(/mode\-(\d+)\.js$/),c=n&&n[1];k[r]=new t(c)}))},"29f8":function(e,t,r){"use strict";r.d(t,"a",(function(){return u}));r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("fc9f"),u=function(){function e(){Object(c.a)(this,e)}var t;return Object(a.a)(e,[{key:"getBatchTemplateMode",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t="select t.mode from batch b \n      join special_inspect_template t on t.id = ifnull(b.template_id,'')\n      where b.id = '".concat(e,"'");return i.a.queryOne(t)}},{key:"getSpecialInspectBatchId",value:function(e){var t="select batch_id from special_inspect where id = '".concat(e,"'");return i.a.queryOne(t)}},{key:"getBatchSql",value:function(e,t){return"select b.*, \n      ifnull(temp.mode, '1') as mode,\n      u.name as created_by_name\n      from batch b\n      join special_inspect_template temp on temp.id = ifnull(b.template_id,'')\n\t\t\tjoin user u on u.id = b.created_by\n      where b.proj_id = '".concat(e,"' and ifnull(b.template_id,'') <> '' \n      and (b.is_closed is null or b.is_closed != 1) \n      and b.batch_type = '专项巡检' \n      and (\n        exists (select 1 from batch_user bu where bu.batch_id = b.id and bu.user_id = '").concat(t,"')\n        or exists (select 1 from batch_cc bc where bc.batch_id = b.id and bc.user_id = '").concat(t,"')\n        or exists (select value from global_storage where key= 'is-company-leader' and value = 1)\n      )\n      order by created_on desc")}},{key:"getBatchList",value:function(e,t){var r=this.getBatchSql(e,t);return i.a.query(r)}},{key:"getFirstBatch",value:function(e,t){var r=this.getBatchSql(e,t);return i.a.queryOne(r)}},{key:"getBatchById",value:function(e){var t="select b.*, up.name as proj_name, \n      sit.id as temp_id, sit.name as temp_name, sit.mode as temp_mode, sit.mode as mode, \n\t\t\tu.name as created_by_name, u.mobile as created_by_mobile, u.is_im_user as is_im_user \n      from batch b \n\t\t\tleft join user_project up on b.proj_id = up.id \n\t\t\tleft join special_inspect_template sit on b.template_id = sit.id\n\t\t\tleft join user u on u.id = b.created_by \n\t\t\twhere b.id = '".concat(e,"'");return i.a.queryOne(t)}},{key:"getBatchContracts",value:function(e){var t="select cc.id as id, cc.name as name, cc.code as code, sc.remark as remark, \n\t\t\t(select count(*) from checkquality_problem cp where cp.batch_id = sc.batch_id and cp.contract_id = cc.id ) as problemNum \n\t\t\tfrom special_inspect_batch_contracts sc \n\t\t\tleft join contractor_contracts cc on cc.id = sc.contract_id \n\t\t\twhere sc.batch_id = '".concat(e,"' \n      order by sc.sort");return i.a.query(t)}},{key:"getTemplateList",value:function(){return i.a.query("select * from special_inspect_template \n      where is_display != 0 \n      order by update_timestamp desc")}},{key:"getContractList",value:function(e){var t="select ccs.* from section s\n\t\t\tjoin section_contractor sc on sc.bidsection_id = s.id\n\t\t\tjoin contractor c on c.id = sc.contractor_id\n\t\t\tjoin contractor_contracts ccs on ccs.contractor_id = c.id\n\t\t\twhere s.proj_id = '".concat(e,"'\n\t\t\tgroup by ccs.id order by c.name_py, ccs.sort");return i.a.query(t)}},{key:"getIndexList",value:function(e){var t="select * from special_inspect\n\t\t  where batch_id = '".concat(e,"' \n      order by checkitem_code");return i.a.query(t)}},{key:"getSpecialInspectDescs",value:function(e){var t="select * from special_inspect_checkitem_desc where checkitem_id in \n    (select checkitem_id from special_inspect where batch_id = '".concat(e,"')\n    order by sort");return i.a.query(t)}},{key:"getSpecialInspectData",value:function(e){var t="select si.*, \n      u.name as checker_name, u.mobile as checker_mobile, u.is_im_user as check_is_im_user\n      from special_inspect si\n      left join user u on u.id = si.checker\n      where si.id = '".concat(e,"'");return i.a.queryOne(t)}},{key:"updateSpecialInspectData",value:function(e){return i.a.update("special_inspect",e,{id:e.id})}},{key:"getDraftProblemByBatchId",value:function(e){if(void 0===e)return $q.reject("批次id不能为空");Array.isArray(e)||(e=[e]);var t="'"+e.join("','")+"'",r='select a.id from checkquality_problem a \n\t\tjoin special_inspect si on a.biz_id = si.id \n\t\tjoin batch b on b.id = si.batch_id and b.status = "检查完毕" \n\t\twhere a.batch_id in ('.concat(t,") and a.status in ('草稿', '合格草稿', '不合格草稿')");return i.a.query(r)}},{key:"deleteProblemById",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:Array.isArray(t)||(t=[t]),r="'"+t.join("','")+"'",n=["delete from checkquality_problem_fpinfo where checkquality_problem_id in (".concat(r,")"),"delete from checkquality_problem_log where checkquality_problem_id in (".concat(r,")"),"delete from checkquality_cc where checkquality_problem_id in (".concat(r,")"),"delete from checkquality_repair where checkquality_problem_id in (".concat(r,")"),"delete from checkquality_reinspect where checkquality_problem_id in (".concat(r,")"),"delete from checkquality_problem where id in (".concat(r,")")],c=0;case 4:if(!(c<n.length)){e.next=10;break}return e.next=7,i.a.executeSql(n[c]);case 7:c++,e.next=4;break;case 10:case"end":return e.stop()}}),e)}))),function(e){return t.apply(this,arguments)})},{key:"filterIdsByBatchId",value:function(e,t,r){Array.isArray(t)||(t=[t]);var n="'"+t.join("','")+"'",c="select id from ".concat(e," where batch_id = '").concat(r,"' and id in (").concat(n,")");return i.a.query(c)}},{key:"getOldRouteQuery",value:function(e){var t="select si.batch_id, si.id as special_inspect_id, si.checkitem_id, \n      (select mode from special_inspect_template sit where sit.id = b.template_id) as mode,\n      (select id from checkquality_problem cp where cp.biz_id = '".concat(e,"' order by cp.download_time desc limit 1) as problem_id\n      from special_inspect si \n      join batch b on b.id = si.batch_id\n      where si.id = '").concat(e,"'");return i.a.queryOne(t)}},{key:"getRootSpecialInspectId",value:function(e){var t="SELECT id,checkitem_parent_id FROM special_inspect si\n      WHERE EXISTS (\n        SELECT 1 FROM special_inspect si2 \n        WHERE si2.id = '".concat(e,"' AND si.checkitem_id = si2.checkitem_parent_id AND si.batch_id = si2.batch_id\n      )");return i.a.queryOne(t)}},{key:"updateSpecialInspectAll",value:function(e,t){return i.a.update("special_inspect",t,e)}},{key:"selectSpecialInspect",value:function(e){return i.a.queryOne("select * from special_inspect where id = ?",[e])}},{key:"selectSpecialInspectPlaceCheckitem",value:function(e){return i.a.queryOne("select * from special_inspect_place_checkitem where id = ?",[e])}}]),e}()},"391cb":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return p}));r("2b45"),r("fc58"),r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("76ff"),u=r("4b67"),o=r("d703"),s=r("937e"),l=r("a044");r("e2a7");function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(o.a)(e);if(t){var c=Object(o.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(u.a)(this,r)}}var p=function(e){Object(i.a)(u,e);var t,r=f(u);function u(){return Object(c.a)(this,u),r.apply(this,arguments)}return Object(a.a)(u,[{key:"getIndexList",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.getIndexList(t);case 2:return r=e.sent,e.abrupt("return",r);case 4:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"batchCheck",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=t.some((function(e){return e.status===l.u}));if(!r)return{code:1,msg:"请至少完成一个评分表数据录入"}}}]),u}(s.a)},"3abd":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return j}));r("5ab2"),r("e10e"),r("2b45"),r("fc58"),r("cc57");var n=r("4c09"),c=r("28f8"),a=(r("163d"),r("6d57"),r("6a61"),r("2e91")),i=r("0e4d"),u=r("94ef"),o=r("76ff"),s=r("4b67"),l=r("d703"),f=r("48f4"),p=r("ed08"),d=r("937e"),h=r("966e"),m=r("7cb8"),b=r("3bd5"),y=r("1b7e"),v=r("162a"),_=r("a18c");function k(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function g(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?k(Object(r),!0).forEach((function(t){Object(c.a)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):k(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(l.a)(e);if(t){var c=Object(l.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(s.a)(this,r)}}var j=function(e){Object(o.a)(I,e);var t,r,c,s,l,d,k,j,R,x,w=O(I);function I(){return Object(i.a)(this,I),w.apply(this,arguments)}return Object(u.a)(I,[{key:"getIndexList",value:(x=Object(a.a)(regeneratorRuntime.mark((function e(t){var r,n,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getBatchPlaces(t);case 2:return r=e.sent,e.next=5,this.getMode11PlacesEndItemTotal(t);case 5:return n=e.sent,c={},(n||[]).forEach((function(e){c[e.id]=e})),(r||[]).forEach((function(e){var t=c[e.id];e.count=t&&t.count||0,e.done=t&&t.done||0,e.unqualified=t&&t.unqualified||0,e.draft=t&&t.draft||0})),e.abrupt("return",r);case 10:case"end":return e.stop()}}),e,this)}))),function(e){return x.apply(this,arguments)})},{key:"getBatchPlaces",value:function(e){return this.Repositories.getBatchPlaces(e)}},{key:"getMode11PlacesEndItemTotal",value:function(e){return this.Repositories.getMode11EndItems(e).then((function(e){var t=[],r={};return(e||[]).forEach((function(e){r[e.place_id]||(r[e.place_id]={id:e.place_id,name:e.place_name,count:0,done:0,unqualified:0,draft:0},t.push(r[e.place_id])),r[e.place_id].count+=1,"合格"===e.status&&(r[e.place_id].done+=1),"不合格"===e.status&&(r[e.place_id].done+=1,r[e.place_id].unqualified+=1),"草稿"===e.status&&(r[e.place_id].draft+=1)})),t}))}},{key:"hasBatchCheckitem",value:function(e){return this.Repositories.hasBatchCheckitem(e).then((function(e){return!!e}))}},{key:"addBatchPlace",value:(R=Object(a.a)(regeneratorRuntime.mark((function e(t,r,n){var c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&r&&n){e.next=2;break}return e.abrupt("return",new Error("addBatchPlace 缺少参数"));case 2:return e.next=4,this.hasBatchCheckitem(r);case 4:if(e.sent){e.next=7;break}return e.abrupt("return",Promise.reject("批次缺少检查项"));case 7:return c={id:p.a.uuid(),name:t.fullname||"",batch_id:r,proj_id:n,building_id:t.building&&t.building.id||"",unit:t.unit&&t.unit.id||"",floor:t.floor&&t.floor.id||"",room_id:t.room&&t.room.id||"",regist_date:p.a.now()},e.next=10,this.Repositories.addBatchPlace(c);case 10:return e.next=12,this.addBatchPlaceCheckitem(c.id,r,n);case 12:return e.next=14,f.default.addSyncGroup([["special_inspect_place",c.id],["special_inspect_place_checkitem",c.id]]);case 14:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return R.apply(this,arguments)})},{key:"updateBatchPlace",value:(j=Object(a.a)(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.updateBatchPlace(t);case 2:return e.next=4,f.default.addSyncGroup([["special_inspect_place",t.id]]);case 4:case"end":return e.stop()}}),e,this)}))),function(e){return j.apply(this,arguments)})},{key:"deleteBatchPlace",value:(k=Object(a.a)(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t||!t.download_time){e.next=8;break}if(y.a.getHasNetwork()){e.next=4;break}return e.abrupt("return",Promise.reject("当前网络无法同步数据"));case 4:return e.next=6,v.a.post("/special-inspect-place/delete",null,{id:t.id});case 6:e.next=9;break;case 8:return e.abrupt("return");case 9:return e.next=11,this.Repositories.deleteBatchPlace(t.id);case 11:return e.next=13,f.default.removeSyncGroup(t.id);case 13:case"end":return e.stop()}}),e,this)}))),function(e){return k.apply(this,arguments)})},{key:"addBatchPlaceCheckitem",value:(d=Object(a.a)(regeneratorRuntime.mark((function e(t,r,n){var c,a,i,u;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.getBatchAllSpecialInspect(r);case 2:if((c=e.sent)&&c.length){e.next=5;break}return e.abrupt("return",new Error("批次没有专项巡检检查项"));case 5:a=0;case 6:if(!(a<c.length)){e.next=14;break}return i=c[a],u={id:p.a.uuid(),batch_id:r,proj_id:n,place_id:t,special_inspect_id:i.id,status:"未设置",deduction:"",remark:"",image_file:"",checker:"",check_time:""},e.next=11,this.Repositories.addBatchPlaceCheckitem(u);case 11:a++,e.next=6;break;case 14:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return d.apply(this,arguments)})},{key:"getTotalData",value:function(e,t,r){var n=r&&r.id;switch(r&&r.template_extension&&r.template_extension.mode11_passrate_mode||1){case 2:return this.getMode2TotalData(n);default:return this.getMode1TotalData(n)}}},{key:"getMode1TotalData",value:(l=Object(a.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a,i,u,o,s,l,f,p,d=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.getAllDoneData(t);case 2:for(a in r=e.sent,n={},(r||[]).forEach((function(e){n[e.special_inspect_id]||(n[e.special_inspect_id]={total:0,score:e.score,deduction:0,qualified:0}),n[e.special_inspect_id].total+=1,n[e.special_inspect_id].deduction+=Number(e.deduction)||0,"合格"===e.status&&(n[e.special_inspect_id].qualified+=1)})),c=[],n)c.push(g(g({},n[a]),{},{id:a}));return i=0,u=0,o=Boolean(c.length),l="",c.forEach((function(e){var t=e.qualified/e.total;i+=t*e.score-e.deduction,u+=e.score})),s=u?Object(h.a)(i/u,2):"",o&&(f=[],p=[],c.forEach((function(e){var t=Object(h.a)(e.qualified/e.total,2);f.push("(".concat(t,"*").concat(e.score,"-").concat(d.formatFloat(e.deduction),")")),p.push(e.score)})),l+="=(".concat(f.join("+"),")/(").concat(p.join("+"),")=").concat(s)),e.abrupt("return",{title:"当前综合得分",note:"",result:s,hasResult:o,formulaText:"当前综合得分=∑（已检项的合格率*满分值-倒扣分）/∑（已检项的满分值）"+l});case 15:case"end":return e.stop()}}),e,this)}))),function(e){return l.apply(this,arguments)})},{key:"getMode2TotalData",value:(s=Object(a.a)(regeneratorRuntime.mark((function e(t){var r,c,a,i,u,o,s,l,f,p,d,b,y,v=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.getAllItems(t);case 2:return r=e.sent,e.next=5,this.Repositories.getAllDoneData(t);case 5:return c=e.sent,a={},(r||[]).forEach((function(e){try{var t=JSON.parse(e.checkitem_extension);e.isDeductionItem=!!t.is_deduction_item}catch(t){e.isDeductionItem=!1}a[e.checkitem_id]=e})),(c||[]).forEach((function(e){a[e.checkitem_id]&&(a[e.checkitem_id].problems||(a[e.checkitem_id].problems=[]),a[e.checkitem_id].problems.push(e))})),((i=Object(m.c)(r,{key:"checkitem_id",relationKey:"checkitem_parent_id"}))||[]).forEach((function(e){var t=v.getItemAllProblems(e,(function(e){return!e.isDeductionItem})),r=t.filter((function(e){return"合格"===e.status})),c=t.filter((function(e){return"不合格"===e.status})).reduce((function(e,t){return e+(t.deduction||0)}),0),a=v.getItemAllProblems(e,(function(e){return e.isDeductionItem})),i=a.reduce((function(e,t){return e+(t.deduction||0)}),0);e.allProblems=[].concat(Object(n.a)(t),Object(n.a)(a)),t&&t.length?(e.rejection=!1,e.passrate=r.length/t.length,e.deductionTotal=v.formatFloat(c),e.ducuctionItemTotal=v.formatFloat(i),e.result=e.score*e.passrate-e.deductionTotal-e.ducuctionItemTotal):e.rejection=!0})),u=(i||[]).filter((function(e){return!e.rejection})),o=0,s=0,l=Boolean(u.length),p="",d=i.some((function(e){return e.allProblems&&e.allProblems.length})),u.forEach((function(e){o+=e.result,s+=e.score})),f=l?Object(h.a)(o/s,2):d?"0.00%":"",l&&(b=[],y=[],u.forEach((function(e){var t=Object(h.a)(e.passrate,2);b.push("(".concat(t,"*").concat(e.score,"-").concat(e.deductionTotal,"-").concat(e.ducuctionItemTotal,")")),y.push(e.score)})),p+="=(".concat(b.join("+"),")/(").concat(y.join("+"),")=").concat(f)),e.abrupt("return",{title:"综合扣分",note:"",result:f,hasResult:l,formulaText:"综合扣分=Σ（已检查一级项合格率*已检一级项满分值-Σ已检一级项内末级项倒扣分-Σ已检一级项内带星末级项倒扣分）/Σ（已检查一级项满分）"+p});case 21:case"end":return e.stop()}}),e,this)}))),function(e){return s.apply(this,arguments)})},{key:"getItemAllProblems",value:function(e,t){var r=this,n=[];return e.children&&e.children.length?e.children.forEach((function(e){n=n.concat(r.getItemAllProblems(e,t))})):t?t(e)&&(n=e.problems||[]):n=e.problems||[],n}},{key:"getBatchPlace",value:function(e){return this.Repositories.getBatchPlace(e)}},{key:"getBatchPlaceCheckitems",value:function(e){return this.Repositories.getBatchPlaceCheckitems(e).then((function(e){if(!e||!e.length)return[];var t={};e.forEach((function(e){try{e.checkitem_extension=JSON.parse(e.checkitem_extension||"{}")}catch(t){e.checkitem_extension={}}e.rule=e.checkitem_extension.rating_rule||"",e.isDeductionItem=e.checkitem_extension.is_deduction_item||0,t[e.checkitem_id]=e})),e.forEach((function(e){var r=e&&e.checkitem_parent_id;r&&t[r]&&(t[r].children||(t[r].children=[]),t[r].children.push(e),t[r].unqualifiedNum||(t[r].unqualifiedNum=0),"不合格"===e.status&&(t[r].unqualifiedNum+=1))}));var r=e.filter((function(e){return!e.checkitem_parent_id}));return Object(m.n)(r),r}))}},{key:"getSpecialInspectData",value:(c=Object(a.a)(regeneratorRuntime.mark((function e(t,r){var n,c,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.getSpecialInspectData(t,r);case 2:if(n=e.sent){e.next=5;break}return e.abrupt("return",{});case 5:return c=Object(m.l)(n.checkitem_extension)||{},a=Object(m.l)(n.image_file)||[],e.abrupt("return",g(g({},n),{},{checkitem:{id:n.checkitem_id,name:n.checkitem_name,code:n.checkitem_code,parentId:n.checkitem_parent_id,fullname:n.checkitem_full_name,extension:c},images:a,checker:{id:n.checker,name:n.checker_name,mobile:n.checker_mobile,is_im_user:n.checker_is_im_user}}));case 8:case"end":return e.stop()}}),e,this)}))),function(e,t){return c.apply(this,arguments)})},{key:"updateSpecialInspectData",value:function(e){if(!e||!e.id)return Promise.reject("保存测区检查项数据，参数错误");var t={id:e.id};return void 0!==e.status&&(t.status=e.status||""),void 0!==e.checker&&(t.checker=e.checker||""),void 0!==e.check_time&&(t.check_time=e.check_time||""),void 0!==e.deduction&&(t.deduction=e.deduction),void 0!==e.images&&(t.image_file=Object(m.m)(e.images)||"[]"),void 0!==e.remark&&(t.remark=e.remark||""),"草稿"===t.status?this.saveDraftToMmkv(t,"special_inspect_place_checkitem"):this.removeDraftFromMmkv(t,"special_inspect_place_checkitem"),this.Repositories.updateSpecialInspectData(t)}},{key:"submitSpecialInspectData",value:(r=Object(a.a)(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&t.id){e.next=2;break}return e.abrupt("return",new Error("提交测区检查项数据，参数错误"));case 2:return t.checker=b.a.getUser().user_id,t.check_time=p.a.now(),e.next=6,this.updateSpecialInspectData(t);case 6:return e.next=8,f.default.addSyncGroup([["special_inspect_place_checkitem",t.id,"id"]]);case 8:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"batchCheck",value:(t=Object(a.a)(regeneratorRuntime.mark((function e(t,r){var n,c,a,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getWaitUploadCount(t.id);case 2:if(!e.sent){e.next=5;break}return e.abrupt("return",{code:1,msg:"还有问题正在上传，请等待问题上传完毕"});case 5:if(n=r.filter((function(e){return 0===e.done})),c=r.filter((function(e){return 0!==e.draft})),!n.length){e.next=10;break}return a=n.map((function(e){return e.name})).join("、"),e.abrupt("return",{code:1,msg:"".concat(a,"未检查，请先处理再提交")});case 10:if(!c.length){e.next=13;break}return i=c.map((function(e){return e.name})).join("、"),e.abrupt("return",{code:1,msg:"".concat(i,"有草稿数据，请先处理再提交")});case 13:case"end":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})},{key:"gotoProblemList",value:function(e,t,r){this.gotoOldProblemList({batchId:e,placeId:r})}},{key:"gotoOldProblemList",value:function(e){_.a.push({path:"special-inspect-problem-pure-list",query:{batchId:e.batchId,placeId:e.placeId}})}}]),I}(d.a)},"3c16e":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return h}));r("2b45"),r("fc58"),r("6d57"),r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("76ff"),u=r("4b67"),o=r("d703"),s=r("937e"),l=r("a044"),f=r("7bac"),p=r("7cb8");function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(o.a)(e);if(t){var c=Object(o.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(u.a)(this,r)}}var h=function(e){Object(i.a)(u,e);var t,r=d(u);function u(){return Object(c.a)(this,u),r.apply(this,arguments)}return Object(a.a)(u,[{key:"getIndexList",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.getIndexList(t);case 2:return r=e.sent,n=[],e.next=6,f.a.getUserKey(l.a);case 6:if(!e.sent){e.next=12;break}return e.next=10,this.getSpecialInspectDescs(t);case 10:(n=e.sent)&&n.length&&(c={},r.forEach((function(e){c[e.checkitem_id]=e})),n.forEach((function(e){var t=c[e.checkitem_id];t&&(t.siblings||(t.siblings=[]),t.siblings.push(e))})));case 12:return a=Object(p.c)(r,{key:"checkitem_id",relationKey:"checkitem_parent_id",setLevel:!0}),e.abrupt("return",{tree:a,list:r});case 14:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"onClickEndNode",value:function(e,t,r){e.status===l.y?this.routeToOldSetPass(e):e.problemNum&&this.routeToOldProblemList(e,r)}},{key:"routeToEdit",value:function(e){this.routeToOldProblemEdit(e)}},{key:"routeToView",value:function(e){this.routeToOldProblemView(e)}},{key:"changeSpecialInspectStatus",value:function(e,t){t===l.y&&this.routeToOldSetPass(e)}},{key:"gotoProblemList",value:function(e,t,r){this.gotoOldProblemList({batch_id:e,mode:this.mode})}}]),u}(s.a)},"3ddc":function(e,t,r){"use strict";r.d(t,"a",(function(){return l}));r("5ab2"),r("6d57"),r("e10e"),r("163d");var n=r("28f8"),c=(r("6a61"),r("2e91")),a=r("0e4d"),i=r("94ef"),u=r("a18c");function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){Object(n.a)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var l=function(){function e(){Object(a.a)(this,e)}var t,r,n,o,l;return Object(i.a)(e,[{key:"routeToOldProblemEdit",value:(l=Object(c.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a,i,o,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t&&t.id,e.next=3,this.getOldRouteQuery(r);case 3:n=e.sent,c=n.batch_id,a=n.special_inspect_id,i=n.checkitem_id,o=n.mode,s=n.root_id,u.a.push({path:"/special-inspect-problem-edit",query:{batchId:c,specialInspectId:a,checkItemId:i,mode:o,rootId:s}});case 6:case"end":return e.stop()}}),e,this)}))),function(e){return l.apply(this,arguments)})},{key:"routeToOldProblemView",value:(o=Object(c.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a,i,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t&&t.id,e.next=3,this.getOldRouteQuery(r);case 3:n=e.sent,c=n.special_inspect_id,a=n.checkitem_id,i=n.mode,o=n.problem_id,u.a.push({path:"/special-inspect-problem-detail",query:{specialInspectId:c,problem_id:o,checkItemId:a,mode:i}});case 6:case"end":return e.stop()}}),e,this)}))),function(e){return o.apply(this,arguments)})},{key:"routeToOldSetPass",value:(n=Object(c.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a,i,o,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t&&t.id,e.next=3,this.getOldRouteQuery(r);case 3:n=e.sent,c=n.batch_id,a=n.special_inspect_id,i=n.checkitem_id,o=n.mode,s=n.root_id,u.a.push({path:"/special-inspect-pass",query:{batchId:c,specialInspectId:a,checkItemId:i,mode:o,rootId:s}});case 6:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"routeToOldProblemList",value:(r=Object(c.a)(regeneratorRuntime.mark((function e(t,r){var n,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t&&t.id,e.next=3,this.getOldRouteQuery(n);case 3:c=e.sent,this.gotoOldProblemList(s(s({},c),{},{editable:r}));case 5:case"end":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:"gotoOldProblemList",value:function(e){u.a.push({path:"/special-inspect-problem-list",query:{batchId:e.batch_id||"",specialInspectId:e.special_inspect_id||"",checkItemId:e.checkitem_id||"",mode:e.mode||"",rootId:e.root_id||"",editable:Number(e.editable||"")}})}},{key:"getOldRouteQuery",value:(t=Object(c.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.getOldRouteQuery(t);case 2:r=e.sent,c=t;case 4:if(n){e.next=11;break}return e.next=7,this.Repositories.getRootSpecialInspectId(c);case 7:(a=e.sent)&&a.id?a.checkitem_parent_id?c=a.id:n=a.id:n=c,e.next=4;break;case 11:return e.abrupt("return",s(s({},r),{},{root_id:n}));case 12:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}()},"4b2e":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return f}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703"),o=r("937e"),s=r("a044");function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var f=function(e){Object(a.a)(r,e);var t=l(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"onClickEndNode",value:function(e,t,r){e.status===s.y?this.routeToOldSetPass(e):e.problemNum&&this.routeToOldProblemList(e,r)}},{key:"routeToEdit",value:function(e){this.routeToOldProblemEdit(e)}},{key:"routeToView",value:function(e){this.routeToOldProblemView(e)}},{key:"changeSpecialInspectStatus",value:function(e,t){t===s.y&&this.routeToOldSetPass(e)}},{key:"gotoProblemList",value:function(e,t,r){this.gotoOldProblemList({batch_id:e,mode:this.mode})}}]),r}(o.a)},"55dc":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return l}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703"),o=r("fc9f");function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var l=function(e){Object(a.a)(r,e);var t=s(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"getIndexList",value:function(e){var t="select si.*, si.checkitem_name as name,\n\t\t(select count(*) from checkquality_problem cp where cp.biz_id = si.id ) as problemNum,\n\t\t(select sum(deduction) from checkquality_problem cp1 \n      where batch_type = '专项巡检' and cp1.biz_id = si.id and cp1.status != '草稿' and cp1.status != '已关闭') as deduction \n\t\tfrom special_inspect si \n\t\twhere si.batch_id = '".concat(e,"' order by si.checkitem_code");return o.a.query(t)}}]),r}(r("29f8").a)},6268:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return f}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703"),o=r("937e"),s=r("a044");function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var f=function(e){Object(a.a)(r,e);var t=l(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"onClickEndNode",value:function(e,t,r){e.status===s.y?this.routeToOldSetPass(e):e.problemNum&&this.routeToOldProblemList(e,r)}},{key:"routeToEdit",value:function(e){this.routeToOldProblemEdit(e)}},{key:"routeToView",value:function(e){this.routeToOldProblemView(e)}},{key:"changeSpecialInspectStatus",value:function(e,t){t===s.y&&this.routeToOldSetPass(e)}},{key:"gotoProblemList",value:function(e,t,r){this.gotoOldProblemList({batch_id:e,mode:this.mode})}}]),r}(o.a)},"66f5":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return l}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703"),o=r("fc9f");function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var l=function(e){Object(a.a)(r,e);var t=s(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"getIndexList",value:function(e){var t="select si.*, si.checkitem_name as name,\n\t\t(select sum(cp.redline_deduction) from checkquality_problem cp \n      where batch_type = '专项巡检' and cp.biz_id = si.id and cp.status != '草稿' and cp.status != '已关闭' ) as redline_deduction, \n\t\t(select count(*) from checkquality_problem cp where cp.biz_id = si.id ) as problemNum,\n\t\t(select sum(deduction) from checkquality_problem cp1 \n      where batch_type = '专项巡检' and cp1.biz_id = si.id and cp1.status != '草稿' and cp1.status != '已关闭') as deduction \n\t\tfrom special_inspect si \n\t\twhere si.batch_id = '".concat(e,"' order by si.checkitem_code");return o.a.query(t)}}]),r}(r("29f8").a)},"743d":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return o}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("76ff"),a=r("4b67"),i=r("d703");function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(i.a)(e);if(t){var c=Object(i.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(a.a)(this,r)}}var o=function(e){Object(c.a)(r,e);var t=u(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return r}(r("29f8").a)},7647:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return f}));r("2b45"),r("fc58"),r("06a2"),r("6d57"),r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("76ff"),u=r("4b67"),o=r("d703"),s=r("fc9f");function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(o.a)(e);if(t){var c=Object(o.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(u.a)(this,r)}}var f=function(e){Object(i.a)(o,e);var t,r,u=l(o);function o(){return Object(c.a)(this,o),u.apply(this,arguments)}return Object(a.a)(o,[{key:"getBatchPlaces",value:function(e){var t="select * from special_inspect_place where batch_id = '".concat(e,"'\n      order by regist_date");return s.a.query(t)}},{key:"getMode11EndItems",value:(r=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getBatchEndSpecialInspectIds(t);case 2:return r=e.sent,n=r&&r.length?" and sipc.special_inspect_id in ('".concat(r.join("','"),"')"):"",c="select sipc.*, sip.name as place_name\n      from special_inspect_place_checkitem sipc\n      join special_inspect_place sip on sip.id = sipc.place_id\n      where sipc.batch_id = ? ".concat(n),e.abrupt("return",s.a.query(c,[t]));case 6:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"getBatchEndSpecialInspectIds",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="select * from special_inspect where batch_id = '".concat(t,"'"),e.next=3,s.a.query(r);case 3:if((n=e.sent)&&n.length){e.next=6;break}return e.abrupt("return",[]);case 6:return c={},n.forEach((function(e){e.checkitem_parent_id&&(c[e.checkitem_parent_id]=1)})),a=n.filter((function(e){return!c[e.checkitem_id]})),e.abrupt("return",a.map((function(e){return e.id})));case 10:case"end":return e.stop()}}),e)}))),function(e){return t.apply(this,arguments)})},{key:"hasBatchCheckitem",value:function(e){var t="select 1 from special_inspect where batch_id = '".concat(e,"'");return s.a.queryOne(t)}},{key:"addBatchPlace",value:function(e){return s.a.insertObject("special_inspect_place",e)}},{key:"updateBatchPlace",value:function(e){return s.a.update("special_inspect_place",e,{id:e.id})}},{key:"getBatchPlace",value:function(e){return s.a.queryOne("select * from special_inspect_place where id = ?",[e])}},{key:"deleteBatchPlace",value:function(e){return Promise.all([s.a.executeSql("delete from special_inspect_place where id = ?",[e]),s.a.executeSql("delete from checkquality_problem where biz_children_id in\n      (select id from special_inspect_place_checkitem where place_id = ?)",[e]),s.a.executeSql("delete from special_inspect_place_checkitem where place_id = ?",[e])])}},{key:"addBatchPlaceCheckitem",value:function(e){return s.a.insertObject("special_inspect_place_checkitem",e)}},{key:"getBatchAllSpecialInspect",value:function(e){var t="select * from special_inspect where batch_id = '".concat(e,"'");return s.a.query(t)}},{key:"getBatchPlaceCheckitems",value:function(e){return s.a.query("select sipc.*, si.checkitem_name as name,\n      si.checkitem_id,\n      si.checkitem_code,\n      si.checkitem_name,\n      si.checkitem_full_name,\n      si.checkitem_parent_id,\n      si.checkitem_extension\n      from special_inspect_place_checkitem sipc\n      join special_inspect si on si.id = sipc.special_inspect_id\n      where sipc.place_id = ?\n      order by si.checkitem_code",[e])}},{key:"getAllDoneData",value:function(e){var t="select sipc.*,\n      si.checkitem_id, si.checkitem_parent_id, si.score \n      from special_inspect_place_checkitem sipc\n      join special_inspect si on si.id = sipc.special_inspect_id\n      where (sipc.status = '合格' or sipc.status = '不合格') and sipc.batch_id = '".concat(e,"'\n      order by si.checkitem_code");return s.a.query(t)}},{key:"getAllItems",value:function(e){var t="select * from special_inspect \n      where batch_id = '".concat(e,"'\n      order by checkitem_code");return s.a.query(t)}},{key:"getNotEndItems",value:function(e){var t="select * from special_inspect\n      where checkitem_id in (select checkitem_parent_id from special_inspect where batch_id = '".concat(e,"')\n        or (ifnull(checkitem_parent_id, '') = '' and batch_id = '").concat(e,"')\n      order by checkitem_code");return s.a.query(t)}},{key:"getSpecialInspectData",value:function(e,t){var r="select sipc.*,\n      si.checkitem_id,\n      si.checkitem_code,\n      si.checkitem_name,\n      si.checkitem_full_name,\n      si.checkitem_parent_id,\n      si.checkitem_extension,\n      u.name as checker_name, u.mobile as checker_mobile, u.is_im_user as check_is_im_user\n      from special_inspect_place_checkitem sipc\n      join special_inspect si on si.id = sipc.special_inspect_id\n      left join user u on u.id = sipc.checker\n      where sipc.special_inspect_id = '".concat(e,"' and sipc.place_id = '").concat(t,"'");return s.a.queryOne(r)}},{key:"updateSpecialInspectData",value:function(e){return s.a.update("special_inspect_place_checkitem",e,{id:e.id})}},{key:"getPlaceSpecialInspectData",value:function(e,t){return s.a.queryOne("select sipc.*,\n      si.checkitem_id,\n      si.checkitem_code,\n      si.checkitem_name,\n      si.checkitem_full_name,\n      si.checkitem_parent_id,\n      si.checkitem_extension,\n      u.name as checker_name,\n      u.mobile as checker_mobile,\n      u.is_im_user as check_is_im_user\n      from special_inspect_place_checkitem sipc\n      join special_inspect si on si.id = sipc.special_inspect_id\n      left join user u on u.id = sipc.checker\n      where sipc.special_inspect_id = ? and sipc.place_id = ?",[e,t])}},{key:"updatePlaceSpecialInspectData",value:function(e){return s.a.update("special_inspect_place_checkitem",e,{id:e.id})}}]),o}(r("29f8").a)},"7a42":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return l}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703"),o=r("fc9f");function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var l=function(e){Object(a.a)(r,e);var t=s(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"getIndexList",value:function(e){var t="select si.*,\n      (select count(*) from checkquality_problem cp where cp.biz_id = si.id ) as problemNum,\n      (select sum(deduction) from checkquality_problem cp1 \n        where batch_type = '专项巡检' and cp1.biz_id = si.id and cp1.status != '草稿' and cp1.status != '已关闭') as deduction \n      from special_inspect si \n      where si.batch_id = '".concat(e,"' order by si.checkitem_code");return o.a.query(t)}}]),r}(r("29f8").a)},"87d0":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return l}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703"),o=r("fc9f");function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var l=function(e){Object(a.a)(r,e);var t=s(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"getIndexList",value:function(e){var t="select b.*, t.name as template_name, t.mode as template_mode, bc.weight\n      from batch b\n      left join special_inspect_template t on t.id = b.template_id\n      left join special_inspect_template_batch_combo bc on bc.batch_id = b.id and bc.template_id = t.id\n      where b.root_id = '".concat(e,"' and ifnull(b.parent_id, '') != ''\n      order by bc.sort");return o.a.query(t)}}]),r}(r("29f8").a)},"90ce":function(e,t,r){"use strict";r.d(t,"a",(function(){return c}));var n=r("d703");function c(e,t,r){return(c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var c=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Object(n.a)(e)););return e}(e,t);if(c){var a=Object.getOwnPropertyDescriptor(c,t);return a.get?a.get.call(r):a.value}})(e,t,r||e)}},"937e":function(e,t,r){"use strict";(function(e){r.d(t,"a",(function(){return T}));r("309f"),r("0b53"),r("06a2"),r("ec25"),r("cc57"),r("5ab2"),r("e10e"),r("2b45"),r("fc58"),r("9e76"),r("6d57"),r("e204"),r("6a61");var n=r("2e91"),c=r("3e83"),a=r("28f8"),i=r("0e4d"),u=r("94ef"),o=r("76ff"),s=r("4b67"),l=r("d703"),f=r("1522"),p=r("3bd5"),d=r("ed08"),h=r("48f4"),m=r("7cb8"),b=r("966e"),y=r("a044"),v=r("7bac"),_=r("a7c3"),k=r("a18c"),g=r("1b7e"),O=r("fc9f"),j=r("162a"),R=r("e2a7");function x(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(!e)return;if("string"==typeof e)return w(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return w(e,t)}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,c=function(){};return{s:c,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:c}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,u=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return i=e.done,e},e:function(e){u=!0,a=e},f:function(){try{i||null==r.return||r.return()}finally{if(u)throw a}}}}function w(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function I(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function P(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?I(Object(r),!0).forEach((function(t){Object(a.a)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):I(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(l.a)(e);if(t){var c=Object(l.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(s.a)(this,r)}}var T=function(t){Object(o.a)(K,t);var r,a,s,l,w,I,T,D,E,q,B,C,L,A,N,M,U,F,V,z,Q=S(K);function K(e){var t;return Object(i.a)(this,K),(t=Q.call(this)).mode=e,t.Repositories=Object(f.b)(e),t}return Object(u.a)(K,[{key:"eval",value:function(e,t){return Object(m.d)(e,P(P({},t),{},{percent:b.a,isNumber:m.j,hasVal:m.i}))}},{key:"compileStr",value:function(e,t){return Object(m.b)(e,P(P({},t),{},{percent:b.a,isNumber:m.j,hasVal:m.i}))}},{key:"isMatch",value:function(t,r){return"object"===Object(c.a)(t)?e.isMatch(r,t):this.eval(t,r)}},{key:"formatFloat",value:function(e){return isNaN(e)?e:Math.round(1e5*e)/1e5}},{key:"getTemplateList",value:function(){return this.Repositories.getTemplateList()}},{key:"getContractList",value:function(e){return this.Repositories.getContractList(e)}},{key:"getDraftFromMmkv",value:(z=Object(n.a)(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,v.a.getUserObject(_.a.SPECIAL_INSPECT_DRAFT);case 2:return t=e.sent,e.abrupt("return",t||{});case 4:case"end":return e.stop()}}),e)}))),function(){return z.apply(this,arguments)})},{key:"saveDraftToMmkv",value:(V=Object(n.a)(regeneratorRuntime.mark((function e(t,r){var n,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&r){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,v.a.getUserObject(_.a.SPECIAL_INSPECT_DRAFT);case 4:return!(n=e.sent)&&(n={}),!n[r]&&(n[r]=[]),(c=n[r].findIndex((function(e){return e.id===t.id})))<0?n[r].push(t):n[r].splice(c,1,t),e.next=11,v.a.saveUserObject(_.a.SPECIAL_INSPECT_DRAFT,n);case 11:case"end":return e.stop()}}),e)}))),function(e,t){return V.apply(this,arguments)})},{key:"removeDraftFromMmkv",value:(F=Object(n.a)(regeneratorRuntime.mark((function e(t,r){var n,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&r){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,v.a.getUserObject(_.a.SPECIAL_INSPECT_DRAFT);case 4:if(e.t0=e.sent,e.t0){e.next=7;break}e.t0={};case 7:if(!(n=e.t0)[r]&&(n[r]=[]),!((c=n[r].findIndex((function(e){return e.id===t.id})))>=0)){e.next=14;break}return n[r].splice(c,1),e.next=14,v.a.saveUserObject(_.a.SPECIAL_INSPECT_DRAFT,n);case 14:case"end":return e.stop()}}),e)}))),function(e,t){return F.apply(this,arguments)})},{key:"recoverDraftFromMmkv",value:(U=Object(n.a)(regeneratorRuntime.mark((function e(){var t,r,n,c,a,i,u,o,s,l,f,p,d,h;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,v.a.getUserObject(_.a.SPECIAL_INSPECT_DRAFT);case 2:if(e.t0=e.sent,e.t0){e.next=5;break}e.t0={};case 5:t=e.t0,n=(r=t||{}).special_inspect,c=void 0===n?[]:n,a=r.special_inspect_place_checkitem,i=void 0===a?[]:a,$log.log("开始恢复专项巡检草稿",t),u=x(c),e.prev=9,u.s();case 11:if((o=u.n()).done){e.next=22;break}if(!(s=o.value)||!s.id){e.next=20;break}return e.next=16,this.Repositories.selectSpecialInspect(s.id);case 16:if(!(l=e.sent)||l.status!==y.v){e.next=20;break}return e.next=20,this.Repositories.updateSpecialInspectData(s);case 20:e.next=11;break;case 22:e.next=27;break;case 24:e.prev=24,e.t1=e.catch(9),u.e(e.t1);case 27:return e.prev=27,u.f(),e.finish(27);case 30:f=x(i),e.prev=31,f.s();case 33:if((p=f.n()).done){e.next=44;break}if(!(d=p.value)||!d.id){e.next=42;break}return e.next=38,this.Repositories.selectSpecialInspectPlaceCheckitem(d.id);case 38:if(!(h=e.sent)||h.status!==y.v){e.next=42;break}return e.next=42,this.Repositories.updatePlaceSpecialInspectData(d);case 42:e.next=33;break;case 44:e.next=49;break;case 46:e.prev=46,e.t2=e.catch(31),f.e(e.t2);case 49:return e.prev=49,f.f(),e.finish(49);case 52:v.a.saveUserObject(_.a.SPECIAL_INSPECT_DRAFT,{});case 53:case"end":return e.stop()}}),e,this,[[9,24,27,30],[31,46,49,52]])}))),function(){return U.apply(this,arguments)})},{key:"getStatus",value:(M=Object(n.a)(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,v.a.getUserObject(_.a.SPECIAL_INSPECT_DETAIL_DRAFT_STATUS);case 2:return r=e.sent,e.abrupt("return",r&&r[t]);case 4:case"end":return e.stop()}}),e)}))),function(e){return M.apply(this,arguments)})},{key:"saveStatus",value:(N=Object(n.a)(regeneratorRuntime.mark((function e(t,r){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,v.a.getUserObject(_.a.SPECIAL_INSPECT_DETAIL_DRAFT_STATUS);case 2:if(e.t0=e.sent,e.t0){e.next=5;break}e.t0={};case 5:return(n=e.t0)[t]=r,e.next=9,v.a.saveUserObject(_.a.SPECIAL_INSPECT_DETAIL_DRAFT_STATUS,n);case 9:case"end":return e.stop()}}),e)}))),function(e,t){return N.apply(this,arguments)})},{key:"removeStatus",value:(A=Object(n.a)(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,v.a.getUserObject(_.a.SPECIAL_INSPECT_DETAIL_DRAFT_STATUS);case 2:if(e.t0=e.sent,e.t0){e.next=5;break}e.t0={};case 5:return delete(r=e.t0)[t],e.next=9,v.a.saveUserObject(_.a.SPECIAL_INSPECT_DETAIL_DRAFT_STATUS,r);case 9:case"end":return e.stop()}}),e)}))),function(e){return A.apply(this,arguments)})},{key:"getSpecialInspectDescs",value:function(e){return this.Repositories.getSpecialInspectDescs(e)}},{key:"getIndexList",value:(L=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.getIndexList(t);case 2:return r=e.sent,n=Object(m.c)(r,{key:"checkitem_id",relationKey:"checkitem_parent_id",setLevel:!0}),e.abrupt("return",{tree:n,list:r});case 5:case"end":return e.stop()}}),e,this)}))),function(e){return L.apply(this,arguments)})},{key:"getTotalMode",value:function(e,t){var r=e&&e.totalMode,n=e&&e.defaultTotalMode,c=r&&this.eval(r,{batch:t});return!Object(m.i)(c)&&Object(m.i)(n)&&(c=e.defaultTotalMode),c}},{key:"getTreeOptions",value:function(t,r,n){var c,a=r&&r.tree&&r.tree[t]||[],i=this.getTotalMode(r,n);return c=Object(m.i)(i)?a.filter((function(e){return!Object(m.i)(e.totalMode)||e.totalMode===i})):a,e.cloneDeep(c)}},{key:"getTreeUi",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default",r=arguments.length>1?arguments[1]:void 0,n=this.compileStr(t,{batch:r}),c=y.B[n];return c?e.merge({},y.A,c):y.A}},{key:"treeAttrsHandle",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(e&&e.length){var n=function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];n.forEach((function(n){n.children&&n.children.length&&e(n.children),r.forEach((function(e){if(!e.match||t.isMatch(e.match,n)){var r=e.key,c=e.type,a=void 0===c?"number":c,i=e.method,u=void 0===i?"some":i,o=e.result,s=e.pattern,l=void 0===s?"computed":s,f=e.filter;if("computed"===l)n[r]="string"===a?t.compileStr(o,n):t.eval(o,n);else if("transmit"===l){if(!n.children||!n.children.length)return $log.error(r,l,"没有子级，无法汇总"),void(n[r]=void 0);var p=f?n.children.filter((function(e){return t.isMatch(f,e)})):n.children;if(!p.length)return void(n[r]=void 0);if("number"===a)n[r]=p.reduce((function(e,r){return e+t.eval(o,r)}),0);else if("boolean"===a){var d=p.map((function(e){return t.eval(o,e)}));"some"===u?n[r]=d.some((function(e){return e})):"all"===u&&(n[r]=!d.some((function(e){return!e})))}else"string"===a&&(n[r]=p.reduce((function(e,r){return e+t.compileStr(o,r)}),""))}}}))}))};n(e)}}},{key:"getTreeMap",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,c={};return t.forEach((function(t){var a=P(P({},t),n),i=r.filter((function(t){return!t.show||e.isMatch(t.show,a)})).map((function(t){return P(P({},t),{},{text:e.compileStr(t.text,a),color:e.compileStr(t.color,a)})}));t.id&&(c[t.id]=i)})),c}},{key:"getTotalData",value:function(e,t,r){var n=this,c={};if(!t)return c;(t&&t.calc||[]).forEach((function(t){!Object(m.i)(c[t.key])&&(c[t.key]={value:0,text:""});var r=e.filter((function(e){return!t.match||n.isMatch(t.match,e)})),a=[];r.forEach((function(e){c[t.key].value+=n.eval(t.value,e),t.text&&a.push(n.compileStr(t.text,e))})),a.length&&(c[t.key].text=a.join("+")),"number"==typeof c[t.key].value&&(c[t.key].value=n.formatFloat(c[t.key].value))}));var a=this.eval(t.hasResult,P(P({},c),{},{batch:r}));return c.hasResult=a,a?(c.result=this.eval(t.result,P(P({},c),{},{batch:r})),"percent"===t.resultType?c.result=Object(b.a)(c.result,2):!1!==t.numberFixed&&(c.result=c.result.toFixed(2))):c.result="",c.formula=t.formula,c.formulaCalc=a?this.compileStr(t.formulaCalc,P(P({},c),{},{batch:r})):"",c.formulaText=this.compileStr(t.formulaText,P(P({},c),{},{batch:r})),c.title=this.compileStr(t.title,P(P({},c),{},{batch:r}))||"",c.note=this.compileStr(t.note,P(P({},c),{},{batch:r})),c}},{key:"getSpecialInspectData",value:(C=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.Repositories.getSpecialInspectData(t);case 2:if(r=e.sent){e.next=5;break}return e.abrupt("return",{});case 5:return n=Object(m.l)(r.checkitem_extension)||{},c=Object(m.l)(r.image_file)||[],e.abrupt("return",P(P({},r),{},{checkitem:{id:r.checkitem_id,name:r.checkitem_name,code:r.checkitem_code,parentId:r.checkitem_parent_id,fullname:r.checkitem_full_name,extension:n},images:c,checker:{id:r.checker,name:r.checker_name,mobile:r.checker_mobile,is_im_user:r.checker_is_im_user}}));case 8:case"end":return e.stop()}}),e,this)}))),function(e){return C.apply(this,arguments)})},{key:"getDetail",value:(B=Object(n.a)(regeneratorRuntime.mark((function e(t,r){var n,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getSpecialInspectData(t,r);case 2:if((n=e.sent).status!==y.w){e.next=10;break}return e.next=6,this.getStatus(n.id);case 6:c=e.sent,n.statusShow=c,e.next=11;break;case 10:n.statusShow=n.status;case 11:return e.abrupt("return",n);case 12:case"end":return e.stop()}}),e,this)}))),function(e,t){return B.apply(this,arguments)})},{key:"saveDetail",value:(q=Object(n.a)(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.updateSpecialInspectData(t);case 2:if(t.status!==y.v){e.next=7;break}return e.next=5,this.removeStatus(t.id);case 5:e.next=10;break;case 7:if(t.status!==y.w){e.next=10;break}return e.next=10,this.saveStatus(t.id,t.statusShow);case 10:case"end":return e.stop()}}),e,this)}))),function(e){return q.apply(this,arguments)})},{key:"submitDetail",value:(E=Object(n.a)(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.submitSpecialInspectData(t));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return E.apply(this,arguments)})},{key:"updateSpecialInspectData",value:(D=Object(n.a)(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&t.id){e.next=2;break}return e.abrupt("return",new Error("保存检查项数据，参数错误"));case 2:if(r={id:t.id},void 0!==t.status&&(r.status=t.status||""),void 0!==t.checker&&(r.checker=t.checker||""),void 0!==t.check_time&&(r.check_time=t.check_time||""),void 0!==t.deduction&&(r.deduction=t.deduction),void 0!==t.images&&(r.image_file=Object(m.m)(t.images)||"[]"),void 0!==t.remark&&(r.remark=t.remark||""),"草稿"!==r.status){e.next=14;break}return e.next=12,this.saveDraftToMmkv(r,"special_inspect");case 12:e.next=16;break;case 14:return e.next=16,this.removeDraftFromMmkv(r,"special_inspect");case 16:return e.abrupt("return",this.Repositories.updateSpecialInspectData(r));case 17:case"end":return e.stop()}}),e,this)}))),function(e){return D.apply(this,arguments)})},{key:"submitSpecialInspectData",value:(T=Object(n.a)(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&t.id){e.next=2;break}return e.abrupt("return",new Error("提交检查项数据，参数错误"));case 2:return t.checker=p.a.getUser().user_id,t.check_time=d.a.now(),e.next=6,this.updateSpecialInspectData(t);case 6:return e.next=8,h.default.addSyncGroup([["special_inspect",t.id]]);case 8:case"end":return e.stop()}}),e,this)}))),function(e){return T.apply(this,arguments)})},{key:"onClickEndNode",value:function(e,t,r){r?this.routeToEdit(e):this.routeToView(e)}},{key:"runBtnOperate",value:(I=Object(n.a)(regeneratorRuntime.mark((function e(t,r){var n,c,a,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.operate,c=void 0===n?"":n,a=t.value,i=t.tips,"route-to-edit"!==c){e.next=5;break}this.routeToEdit(r,t),e.next=12;break;case 5:if("route-to-view"!==c){e.next=9;break}this.routeToView(r,t),e.next=12;break;case 9:if("change-status"!==c){e.next=12;break}return e.next=12,this.changeSpecialInspectStatus(r,a,i);case 12:case"end":return e.stop()}}),e,this)}))),function(e,t){return I.apply(this,arguments)})},{key:"routeToEdit",value:function(e,t){k.a.push({name:y.k,query:{specialInspectId:e.id,btn:t&&t.index}})}},{key:"routeToView",value:function(e,t){k.a.push({name:y.m,query:{specialInspectId:e.id,btn:t&&t.index}})}},{key:"changeSpecialInspectStatus",value:(w=Object(n.a)(regeneratorRuntime.mark((function e(t,r,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,h.default.removeSyncGroup(t.id);case 2:return e.next=4,this.saveDetail({id:t.id,status:r});case 4:return e.next=6,h.default.addSyncGroup([["special_inspect",t.id]]);case 6:t.status=r,n&&R.a.alert(n);case 8:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return w.apply(this,arguments)})},{key:"gotoProblemList",value:function(e,t,r){k.a.push({name:y.q,query:{batchId:e,specialInspectId:t,placeId:r}})}},{key:"getWaitUploadQueryTables",value:function(e){var t=["special_inspect","special_inspect_place_checkitem"];return e&&t.push("checkquality_problem"),t}},{key:"getWaitUploadCount",value:(l=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a,i,u,o,s,l=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=l.length>1&&void 0!==l[1]&&l[1],n=this.getWaitUploadQueryTables(r),e.next=4,h.default.getUploadQueue();case 4:c=e.sent,a={},n.forEach((function(e){a[e]=(c||[]).filter((function(t){return t.relation_table_name===e})).map((function(e){return e.relation_id}))})),i=0,e.t0=regeneratorRuntime.keys(a);case 9:if((e.t1=e.t0()).done){e.next=18;break}return u=e.t1.value,o=a[u],e.next=14,this.Repositories.filterIdsByBatchId(u,o,t);case 14:s=e.sent,i+=s.length,e.next=9;break;case 18:return e.abrupt("return",i);case 19:case"end":return e.stop()}}),e,this)}))),function(e){return l.apply(this,arguments)})},{key:"batchCheck",value:(s=Object(n.a)(regeneratorRuntime.mark((function e(t,r,n,a){var i,u,o,s,l=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n&&n.finishBatchCheck&&Array.isArray(n.finishBatchCheck)&&n.finishBatchCheck.length){e.next=2;break}return e.abrupt("return");case 2:i=x(n.finishBatchCheck),e.prev=3,o=function(){var e=u.value;if(!(e.match&&e.statusTotalConfig&&Array.isArray(e.statusTotalConfig)&&e.statusTotalConfig.length))return"continue";var t=a||[];e.isFilterFirst&&(t=t.filter((function(e){return e.children&&e.children.length})));var r=e.statusTotalConfig.map((function(e){return e.status})),n=Object(m.g)(t,"status",r),c=e.statusTotalConfig.reduce((function(e,t){return e[t.key]=n[t.status],e}),{});return l.eval(e.match,c)?{v:{code:2,msg:l.compileStr(e.msg,c),type:e.type||"alert"}}:void 0},i.s();case 6:if((u=i.n()).done){e.next=14;break}if("continue"!==(s=o())){e.next=10;break}return e.abrupt("continue",12);case 10:if("object"!==Object(c.a)(s)){e.next=12;break}return e.abrupt("return",s.v);case 12:e.next=6;break;case 14:e.next=19;break;case 16:e.prev=16,e.t0=e.catch(3),i.e(e.t0);case 19:return e.prev=19,i.f(),e.finish(19);case 22:return e.next=24,this.getWaitUploadCount(t.id);case 24:if(!e.sent){e.next=27;break}return e.abrupt("return",{code:1,msg:"还有问题正在上传，请等待问题上传完毕",type:"alert"});case 27:case"end":return e.stop()}}),e,this,[[3,16,19,22]])}))),function(e,t,r,n){return s.apply(this,arguments)})},{key:"finishBatchConfirm",value:(a=Object(n.a)(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",R.a.confirm("请确保所有检查人已上传数据，提交后不可修改，确认提交？"));case 1:case"end":return e.stop()}}),e)}))),function(){return a.apply(this,arguments)})},{key:"finishBatch",value:(r=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a,i,u;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.id,t.status=y.u,e.next=4,g.a.getHasNetwork();case 4:if(e.sent){e.next=7;break}return e.abrupt("return",Promise.reject("当前网络无法同步数据"));case 7:return e.next=9,j.a.post("/batch/upload",null,{data:{batch:t}});case 9:return n=e.sent,e.next=12,O.a.update("batch",n.batch,{id:r});case 12:return c={status:y.v,deduction:0,image_file:"[]"},a={batch_id:t.id,status:y.w},e.next=16,this.Repositories.updateSpecialInspectAll(a,c);case 16:return e.next=18,this.Repositories.getDraftProblemByBatchId(r);case 18:return i=e.sent,u=(i||[]).map((function(e){return e.id})),e.abrupt("return",this.Repositories.deleteProblemById(u));case 21:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})}]),K}(r("3ddc").a)}).call(this,r("391c"))},"9dfb":function(e,t,r){var n={"./mode-1.js":"7a42","./mode-10.js":"743d","./mode-100.js":"87d0","./mode-11.js":"7647","./mode-2.js":"a833","./mode-3.js":"55dc","./mode-4.js":"66f5","./mode-5.js":"05ac","./mode-6.js":"fd1b","./mode-7.js":"d899","./mode-8.js":"1079","./mode-9.js":"dd2f","./mode-99.js":"dc5e"};function c(e){var t=a(e);return r(t)}function a(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}c.keys=function(){return Object.keys(n)},c.resolve=a,e.exports=c,c.id="9dfb"},a833:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return s}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703");function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var s=function(e){Object(a.a)(r,e);var t=o(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"getIndexList",value:function(e){var t="select si.*, si.checkitem_name as name,\n\t\t  (select id from checkquality_problem cp where cp.biz_id = si.id order by cp.download_time desc limit 1) as problem_id\n\t\tfrom special_inspect si \n\t\twhere si.batch_id = '".concat(e,"' order by si.checkitem_code");return localDB.query(t)}}]),r}(r("29f8").a)},a96c:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return d}));r("2b45"),r("fc58"),r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("76ff"),u=r("4b67"),o=r("d703"),s=r("937e"),l=r("a044"),f=r("a18c");function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(o.a)(e);if(t){var c=Object(o.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(u.a)(this,r)}}var d=function(e){Object(i.a)(o,e);var t,r,u=p(o);function o(){return Object(c.a)(this,o),u.apply(this,arguments)}return Object(a.a)(o,[{key:"onClickEndNode",value:function(e,t,r){r?this.routeToOldProblemEdit(e):e.status===l.x&&this.routeToOldProblemView(e)}},{key:"routeToEdit",value:function(e){this.routeToOldProblemEdit(e)}},{key:"routeToView",value:function(e){this.routeToOldProblemView(e)}},{key:"routeToOldProblemEdit",value:(r=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t&&t.id,e.next=3,this.getOldRouteQuery(r);case 3:n=e.sent,c=n.special_inspect_id,a=n.checkitem_id,i=n.mode,f.a.push({path:"/special-inspect-get-score",query:{specialInspectId:c,checkItemId:a,mode:i}});case 6:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"routeToOldProblemView",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t&&t.id,e.next=3,this.getOldRouteQuery(r);case 3:n=e.sent,c=n.special_inspect_id,a=n.checkitem_id,i=n.mode,f.a.push({path:"/special-inspect-get-score-detail",query:{specialInspectId:c,checkItemId:a,mode:i}});case 6:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"gotoProblemList",value:function(e,t,r){this.gotoOldProblemList({batch_id:e,mode:9})}}]),o}(s.a)},ae0f:function(e,t,r){var n={"./mode-1.js":"6268","./mode-10.js":"fe91","./mode-100.js":"266f","./mode-11.js":"3abd","./mode-2.js":"b376","./mode-3.js":"1e33","./mode-4.js":"3c16e","./mode-5.js":"4b2e","./mode-6.js":"fb29","./mode-7.js":"2150","./mode-8.js":"09d6","./mode-9.js":"a96c","./mode-99.js":"391cb"};function c(e){var t=a(e);return r(t)}function a(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}c.keys=function(){return Object.keys(n)},c.resolve=a,e.exports=c,c.id="ae0f"},b376:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return d}));r("2b45"),r("fc58"),r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("76ff"),u=r("4b67"),o=r("d703"),s=r("937e"),l=r("a044"),f=r("a18c");function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(o.a)(e);if(t){var c=Object(o.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(u.a)(this,r)}}var d=function(e){Object(i.a)(u,e);var t,r=p(u);function u(){return Object(c.a)(this,u),r.apply(this,arguments)}return Object(a.a)(u,[{key:"onClickEndNode",value:function(e,t,r){e.status===l.y?this.routeToOldSetPass(e):e.status===l.z?this.routeToOldProblemView(e):e.status===l.w&&this.routeToOldProblemEdit(e)}},{key:"routeToEdit",value:function(e){this.routeToOldProblemEdit(e)}},{key:"routeToView",value:function(e){this.routeToOldProblemView(e)}},{key:"routeToOldSetPass",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t&&t.id,e.next=3,this.getOldRouteQuery(r);case 3:n=e.sent,c=n.special_inspect_id,a=n.mode,f.a.push({path:"/special-inspect-problem-detail-pass",query:{specialInspectId:c,mode:a}});case 6:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),u}(s.a)},d899:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return l}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703"),o=r("fc9f");function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var l=function(e){Object(a.a)(r,e);var t=s(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"getIndexList",value:function(e){var t="select si.*, si.checkitem_name as name, sm.measurement_points, sm.problem_points , sm.passrate_mode \n\t\t\tfrom special_inspect si \n\t\t\tleft join special_inspect_measure_item sm on sm.special_inspect_id = si.id \n\t\t\twhere batch_id = '".concat(e,"' \n      order by si.checkitem_code");return o.a.query(t)}}]),r}(r("29f8").a)},dc5e:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return l}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703"),o=r("fc9f");function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var l=function(e){Object(a.a)(r,e);var t=s(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"getIndexList",value:function(e){var t="select b.*, b.id as batch_id, \n      st.id as template_id, st.name as template_name, \n      sc.weight as weight\n\t\t\tfrom batch b\n\t\t\tleft join special_inspect_template st on st.id = b.template_id \n\t\t\tleft join special_inspect_template_batch_combo sc on sc.batch_id = b.parent_id and sc.template_id = st.id \n\t\t\twhere b.parent_id = '".concat(e,"' order by sc.sort");return o.a.query(t)}}]),r}(r("29f8").a)},dd2f:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return o}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("76ff"),a=r("4b67"),i=r("d703");function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(i.a)(e);if(t){var c=Object(i.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(a.a)(this,r)}}var o=function(e){Object(c.a)(r,e);var t=u(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return r}(r("29f8").a)},fb29:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return f}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703"),o=r("937e"),s=r("a18c");function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var f=function(e){Object(a.a)(r,e);var t=l(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"onClickEndNode",value:function(e,t,r){e.problem_id&&this.routeToOldProblemDetail(e)}},{key:"routeToEdit",value:function(e){s.a.push({path:"/special-inspect-contract-problem-detail",query:{bizId:e.id,type:0}})}},{key:"routeToView",value:function(e){this.routeToOldProblemDetail(e)}},{key:"routeToOldProblemDetail",value:function(e){s.a.push({path:"/special-inspect-contract-problem-detail",query:{problemId:e.problem_id}})}},{key:"changeSpecialInspectStatus",value:function(e){s.a.push({path:"/special-inspect-contract-problem-detail",query:{bizId:e.id,type:1}})}},{key:"gotoProblemList",value:function(e,t,r){this.gotoOldProblemList({batch_id:e,mode:6})}}]),r}(o.a)},fd1b:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return s}));r("2b45"),r("fc58");var n=r("0e4d"),c=r("94ef"),a=r("76ff"),i=r("4b67"),u=r("d703");function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(u.a)(e);if(t){var c=Object(u.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(i.a)(this,r)}}var s=function(e){Object(a.a)(r,e);var t=o(r);function r(){return Object(n.a)(this,r),t.apply(this,arguments)}return Object(c.a)(r,[{key:"getIndexList",value:function(e){var t="select si.*, si.checkitem_name as name,\n\t\t(select id from checkquality_problem cp where cp.biz_id = si.id order by cp.download_time desc limit 1) as problem_id\n\t\tfrom special_inspect si \n\t\twhere si.batch_id = '".concat(e,"' order by si.checkitem_code");return localDB.query(t)}}]),r}(r("29f8").a)},fe91:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return m}));r("2b45"),r("fc58"),r("6a61");var n=r("2e91"),c=r("0e4d"),a=r("94ef"),i=r("76ff"),u=r("4b67"),o=r("d703"),s=r("937e"),l=r("a18c"),f=r("7cb8"),p=r("e2a7"),d=r("a044");r("264e");function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Object(o.a)(e);if(t){var c=Object(o.a)(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return Object(u.a)(this,r)}}var m=function(e){Object(i.a)(s,e);var t,r,u,o=h(s);function s(){return Object(c.a)(this,s),o.apply(this,arguments)}return Object(a.a)(s,[{key:"onClickEndNode",value:function(e,t,r){this.routeToEdit(e)}},{key:"routeToEdit",value:function(e){this.routeToOldProblemEdit(e)}},{key:"routeToView",value:function(e){this.routeToOldProblemView(e)}},{key:"routeToOldProblemEdit",value:(u=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a,i,u,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t&&t.id,e.next=3,this.getOldRouteQuery(r);case 3:n=e.sent,c=n.batch_id,a=n.special_inspect_id,i=n.checkitem_id,u=n.mode,o=n.root_id,l.a.push({path:"/special-inspect-jfkf-edit",query:{batchId:c,specialInspectId:a,checkItemId:i,mode:u,rootId:o}});case 6:case"end":return e.stop()}}),e,this)}))),function(e){return u.apply(this,arguments)})},{key:"routeToOldProblemView",value:(r=Object(n.a)(regeneratorRuntime.mark((function e(t){var r,n,c,a,i,u;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t&&t.id,e.next=3,this.getOldRouteQuery(r);case 3:n=e.sent,c=n.special_inspect_id,a=n.checkitem_id,i=n.mode,u=n.problem_id,l.a.push({path:"/special-inspect-jfkf-edit",query:{specialInspectId:c,problem_id:u,checkItemId:a,mode:i}});case 6:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"gotoProblemList",value:function(e,t,r){this.gotoOldProblemList({batch_id:e,mode:10})}},{key:"finishBatchConfirm",value:(t=Object(n.a)(regeneratorRuntime.mark((function e(t,r,n){var c,a,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(c=Object(f.g)(n,"status",[d.w]),!((a=c[d.w])>0)){e.next=6;break}if(i=p.a.popBox({title:'有<span class="color-orange pl5 pr5">'+a+"</span>项草稿记录未提交，继续操作将清除所有暂存数据，是否正常提交？",cancelText:"取消",okText:"提交"})){e.next=6;break}return e.abrupt("return",i);case 6:return e.abrupt("return",p.a.confirm("请确保所有检查人已上传数据，提交后不可修改，确认提交？"));case 7:case"end":return e.stop()}}),e)}))),function(e,r,n){return t.apply(this,arguments)})}]),s}(s.a)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,