(window.webpackJsonp_module_entry_zjapp_=window.webpackJsonp_module_entry_zjapp_||[]).push([["chunk-13301434"],{"0131":function(e,t,i){"use strict";var n=i("6a9f"),r=i("f433"),a=i("cf62");function s(e,t,i){var n=e;return a(t)?(i=t,"string"==typeof e&&(n={uri:e})):n=r({},t,{uri:e}),n.callback=i,n}function o(e,t,i){return l(t=s(e,t,i))}function l(e){if(void 0===e.callback)throw new Error("callback argument missing");var t=!1,i=function(i,n,r){t||(t=!0,e.callback(i,n,r))};function n(){var e=void 0;if(e=u.response?u.response:u.responseText||function(e){try{if("document"===e.responseType)return e.responseXML;var t=e.responseXML&&"parsererror"===e.responseXML.documentElement.nodeName;if(""===e.responseType&&!t)return e.responseXML}catch(e){}return null}(u),g)try{e=JSON.parse(e)}catch(e){}return e}function r(e){return clearTimeout(c),e instanceof Error||(e=new Error(""+(e||"Unknown XMLHttpRequest Error"))),e.statusCode=0,i(e,v)}function a(){if(!l){var t;clearTimeout(c),t=e.useXDR&&void 0===u.status?200:1223===u.status?204:u.status;var r=v,a=null;return 0!==t?(r={body:n(),statusCode:t,method:h,headers:{},url:d,rawRequest:u},u.getAllResponseHeaders&&(r.headers=function(e){var t={};return e?(e.trim().split("\n").forEach((function(e){var i=e.indexOf(":"),n=e.slice(0,i).trim().toLowerCase(),r=e.slice(i+1).trim();void 0===t[n]?t[n]=r:Array.isArray(t[n])?t[n].push(r):t[n]=[t[n],r]})),t):t}(u.getAllResponseHeaders()))):a=new Error("Internal XMLHttpRequest Error"),i(a,r,r.body)}}var s,l,u=e.xhr||null;u||(u=e.cors||e.useXDR?new o.XDomainRequest:new o.XMLHttpRequest);var c,d=u.url=e.uri||e.url,h=u.method=e.method||"GET",p=e.body||e.data,f=u.headers=e.headers||{},m=!!e.sync,g=!1,v={body:void 0,headers:{},statusCode:0,method:h,url:d,rawRequest:u};if("json"in e&&!1!==e.json&&(g=!0,f.accept||f.Accept||(f.Accept="application/json"),"GET"!==h&&"HEAD"!==h&&(f["content-type"]||f["Content-Type"]||(f["Content-Type"]="application/json"),p=JSON.stringify(!0===e.json?p:e.json))),u.onreadystatechange=function(){4===u.readyState&&setTimeout(a,0)},u.onload=a,u.onerror=r,u.onprogress=function(){},u.onabort=function(){l=!0},u.ontimeout=r,u.open(h,d,!m,e.username,e.password),m||(u.withCredentials=!!e.withCredentials),!m&&e.timeout>0&&(c=setTimeout((function(){if(!l){l=!0,u.abort("timeout");var e=new Error("XMLHttpRequest timeout");e.code="ETIMEDOUT",r(e)}}),e.timeout)),u.setRequestHeader)for(s in f)f.hasOwnProperty(s)&&u.setRequestHeader(s,f[s]);else if(e.headers&&!function(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}(e.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in e&&(u.responseType=e.responseType),"beforeSend"in e&&"function"==typeof e.beforeSend&&e.beforeSend(u),u.send(p||null),u}e.exports=o,e.exports.default=o,o.XMLHttpRequest=n.XMLHttpRequest||function(){},o.XDomainRequest="withCredentials"in new o.XMLHttpRequest?o.XMLHttpRequest:n.XDomainRequest,function(e,t){for(var i=0;i<e.length;i++)t(e[i])}(["get","put","post","patch","head","delete"],(function(e){o["delete"===e?"del":e]=function(t,i,n){return(i=s(t,i,n)).method=e.toUpperCase(),l(i)}}))},"02b5":function(e,t,i){var n=i("c92d"),r=i("546a");e.exports=function(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?r(e):t}},"0335":function(e,t,i){(function(t){var n,r=void 0!==t?t:"undefined"!=typeof window?window:{},a=i(3);"undefined"!=typeof document?n=document:(n=r["__GLOBAL_DOCUMENT_CACHE@4"])||(n=r["__GLOBAL_DOCUMENT_CACHE@4"]=a),e.exports=n}).call(this,i("0288"))},"0630":function(e,t){e.exports=function(e,t){var i,n=null;try{i=JSON.parse(e,t)}catch(e){n=e}return[n,i]}},"0b40b":function(e,t,i){"use strict";
/*! @name @videojs/vhs-utils @version 2.2.1 @license MIT */var n=i("38e8"),r=i("6a9f");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=a(n),o=a(r);e.exports=function(e,t){return/^[a-z]+:/i.test(t)?t:(/\/\//i.test(e)||(e=s.default.buildAbsoluteURL(o.default.location&&o.default.location.href||"",e)),s.default.buildAbsoluteURL(e,t))}},"185d":function(e,t,i){"use strict";e.exports={H264_STREAM_TYPE:27,ADTS_STREAM_TYPE:15,METADATA_STREAM_TYPE:21}},"1e9b":function(e,t){e.exports=function(e){var t,i=new DataView(e.buffer,e.byteOffset,e.byteLength),n={version:e[0],flags:new Uint8Array(e.subarray(1,4)),references:[],referenceId:i.getUint32(4),timescale:i.getUint32(8),earliestPresentationTime:i.getUint32(12),firstOffset:i.getUint32(16)},r=i.getUint16(22);for(t=24;r;t+=12,r--)n.references.push({referenceType:(128&e[t])>>>7,referencedSize:2147483647&i.getUint32(t),subsegmentDuration:i.getUint32(t+4),startsWithSap:!!(128&e[t+8]),sapType:(112&e[t+8])>>>4,sapDeltaTime:268435455&i.getUint32(t+8)});return n}},"1ee2":function(e,t,i){"use strict";var n=i("185d"),r=function(e){var t=31&e[1];return t<<=8,t|=e[2]},a=function(e){return!!(64&e[1])},s=function(e){var t=0;return(48&e[3])>>>4>1&&(t+=e[4]+1),t},o=function(e){switch(e){case 5:return"slice_layer_without_partitioning_rbsp_idr";case 6:return"sei_rbsp";case 7:return"seq_parameter_set_rbsp";case 8:return"pic_parameter_set_rbsp";case 9:return"access_unit_delimiter_rbsp";default:return null}};e.exports={parseType:function(e,t){var i=r(e);return 0===i?"pat":i===t?"pmt":t?"pes":null},parsePat:function(e){var t=a(e),i=4+s(e);return t&&(i+=e[i]+1),(31&e[i+10])<<8|e[i+11]},parsePmt:function(e){var t={},i=a(e),n=4+s(e);if(i&&(n+=e[n]+1),1&e[n+5]){var r;r=3+((15&e[n+1])<<8|e[n+2])-4;for(var o=12+((15&e[n+10])<<8|e[n+11]);o<r;){var l=n+o;t[(31&e[l+1])<<8|e[l+2]]=e[l],o+=5+((15&e[l+3])<<8|e[l+4])}return t}},parsePayloadUnitStartIndicator:a,parsePesType:function(e,t){switch(t[r(e)]){case n.H264_STREAM_TYPE:return"video";case n.ADTS_STREAM_TYPE:return"audio";case n.METADATA_STREAM_TYPE:return"timed-metadata";default:return null}},parsePesTime:function(e){if(!a(e))return null;var t=4+s(e);if(t>=e.byteLength)return null;var i,n=null;return 192&(i=e[t+7])&&((n={}).pts=(14&e[t+9])<<27|(255&e[t+10])<<20|(254&e[t+11])<<12|(255&e[t+12])<<5|(254&e[t+13])>>>3,n.pts*=4,n.pts+=(6&e[t+13])>>>1,n.dts=n.pts,64&i&&(n.dts=(14&e[t+14])<<27|(255&e[t+15])<<20|(254&e[t+16])<<12|(255&e[t+17])<<5|(254&e[t+18])>>>3,n.dts*=4,n.dts+=(6&e[t+18])>>>1)),n},videoPacketContainsKeyFrame:function(e){for(var t=4+s(e),i=e.subarray(t),n=0,r=0,a=!1;r<i.byteLength-3;r++)if(1===i[r+2]){n=r+5;break}for(;n<i.byteLength;)switch(i[n]){case 0:if(0!==i[n-1]){n+=2;break}if(0!==i[n-2]){n++;break}r+3!==n-2&&"slice_layer_without_partitioning_rbsp_idr"===o(31&i[r+3])&&(a=!0);do{n++}while(1!==i[n]&&n<i.length);r=n-2,n+=3;break;case 1:if(0!==i[n-1]||0!==i[n-2]){n+=3;break}"slice_layer_without_partitioning_rbsp_idr"===o(31&i[r+3])&&(a=!0),r=n-2,n+=3;break;default:n+=3}return i=i.subarray(r),n-=r,r=0,i&&i.byteLength>3&&"slice_layer_without_partitioning_rbsp_idr"===o(31&i[r+3])&&(a=!0),a}}},"38e8":function(e,t,i){var n,r,a,s,o;n=/^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/?#]*\/)*[^;?#]*)?(;[^?#]*)?(\?[^#]*)?(#.*)?$/,r=/^([^\/?#]*)(.*)$/,a=/(?:\/|^)\.(?=\/)/g,s=/(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g,o={buildAbsoluteURL:function(e,t,i){if(i=i||{},e=e.trim(),!(t=t.trim())){if(!i.alwaysNormalize)return e;var n=o.parseURL(e);if(!n)throw new Error("Error trying to parse base URL.");return n.path=o.normalizePath(n.path),o.buildURLFromParts(n)}var a=o.parseURL(t);if(!a)throw new Error("Error trying to parse relative URL.");if(a.scheme)return i.alwaysNormalize?(a.path=o.normalizePath(a.path),o.buildURLFromParts(a)):t;var s=o.parseURL(e);if(!s)throw new Error("Error trying to parse base URL.");if(!s.netLoc&&s.path&&"/"!==s.path[0]){var l=r.exec(s.path);s.netLoc=l[1],s.path=l[2]}s.netLoc&&!s.path&&(s.path="/");var u={scheme:s.scheme,netLoc:a.netLoc,path:null,params:a.params,query:a.query,fragment:a.fragment};if(!a.netLoc&&(u.netLoc=s.netLoc,"/"!==a.path[0]))if(a.path){var c=s.path,d=c.substring(0,c.lastIndexOf("/")+1)+a.path;u.path=o.normalizePath(d)}else u.path=s.path,a.params||(u.params=s.params,a.query||(u.query=s.query));return null===u.path&&(u.path=i.alwaysNormalize?o.normalizePath(a.path):a.path),o.buildURLFromParts(u)},parseURL:function(e){var t=n.exec(e);return t?{scheme:t[1]||"",netLoc:t[2]||"",path:t[3]||"",params:t[4]||"",query:t[5]||"",fragment:t[6]||""}:null},normalizePath:function(e){for(e=e.split("").reverse().join("").replace(a,"");e.length!==(e=e.replace(s,"")).length;);return e.split("").reverse().join("")},buildURLFromParts:function(e){return e.scheme+e.netLoc+e.path+e.params+e.query+e.fragment}},e.exports=o},4538:function(e,t,i){(e.exports=i("690e")(!1)).push([e.i,'@charset "UTF-8";.zjapp .video-js .vjs-big-play-button .vjs-icon-placeholder:before,.zjapp .video-js .vjs-modal-dialog,.zjapp .vjs-button>.vjs-icon-placeholder:before,.zjapp .vjs-modal-dialog .vjs-modal-dialog-content{position:absolute;top:0;left:0;width:100%;height:100%}.zjapp .video-js .vjs-big-play-button .vjs-icon-placeholder:before,.zjapp .vjs-button>.vjs-icon-placeholder:before{text-align:center}@font-face{font-family:VideoJS;src:url(data:application/font-woff;charset=utf-8;base64,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) format("woff");font-weight:400;font-style:normal}.zjapp .video-js .vjs-big-play-button .vjs-icon-placeholder:before,.zjapp .video-js .vjs-play-control .vjs-icon-placeholder,.zjapp .vjs-icon-play{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-big-play-button .vjs-icon-placeholder:before,.zjapp .video-js .vjs-play-control .vjs-icon-placeholder:before,.zjapp .vjs-icon-play:before{content:"\\F101"}.zjapp .vjs-icon-play-circle{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-play-circle:before{content:"\\F102"}.zjapp .video-js .vjs-play-control.vjs-playing .vjs-icon-placeholder,.zjapp .vjs-icon-pause{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-play-control.vjs-playing .vjs-icon-placeholder:before,.zjapp .vjs-icon-pause:before{content:"\\F103"}.zjapp .video-js .vjs-mute-control.vjs-vol-0 .vjs-icon-placeholder,.zjapp .vjs-icon-volume-mute{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-mute-control.vjs-vol-0 .vjs-icon-placeholder:before,.zjapp .vjs-icon-volume-mute:before{content:"\\F104"}.zjapp .video-js .vjs-mute-control.vjs-vol-1 .vjs-icon-placeholder,.zjapp .vjs-icon-volume-low{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-mute-control.vjs-vol-1 .vjs-icon-placeholder:before,.zjapp .vjs-icon-volume-low:before{content:"\\F105"}.zjapp .video-js .vjs-mute-control.vjs-vol-2 .vjs-icon-placeholder,.zjapp .vjs-icon-volume-mid{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-mute-control.vjs-vol-2 .vjs-icon-placeholder:before,.zjapp .vjs-icon-volume-mid:before{content:"\\F106"}.zjapp .video-js .vjs-mute-control .vjs-icon-placeholder,.zjapp .vjs-icon-volume-high{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-mute-control .vjs-icon-placeholder:before,.zjapp .vjs-icon-volume-high:before{content:"\\F107"}.zjapp .video-js .vjs-fullscreen-control .vjs-icon-placeholder,.zjapp .vjs-icon-fullscreen-enter{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-fullscreen-control .vjs-icon-placeholder:before,.zjapp .vjs-icon-fullscreen-enter:before{content:"\\F108"}.zjapp .video-js.vjs-fullscreen .vjs-fullscreen-control .vjs-icon-placeholder,.zjapp .vjs-icon-fullscreen-exit{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js.vjs-fullscreen .vjs-fullscreen-control .vjs-icon-placeholder:before,.zjapp .vjs-icon-fullscreen-exit:before{content:"\\F109"}.zjapp .vjs-icon-square{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-square:before{content:"\\F10A"}.zjapp .vjs-icon-spinner{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-spinner:before{content:"\\F10B"}.zjapp .video-js.video-js:lang(en-AU) .vjs-subs-caps-button .vjs-icon-placeholder,.zjapp .video-js.video-js:lang(en-GB) .vjs-subs-caps-button .vjs-icon-placeholder,.zjapp .video-js.video-js:lang(en-IE) .vjs-subs-caps-button .vjs-icon-placeholder,.zjapp .video-js.video-js:lang(en-NZ) .vjs-subs-caps-button .vjs-icon-placeholder,.zjapp .video-js .vjs-subs-caps-button .vjs-icon-placeholder,.zjapp .video-js .vjs-subtitles-button .vjs-icon-placeholder,.zjapp .vjs-icon-subtitles{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js.video-js:lang(en-AU) .vjs-subs-caps-button .vjs-icon-placeholder:before,.zjapp .video-js.video-js:lang(en-GB) .vjs-subs-caps-button .vjs-icon-placeholder:before,.zjapp .video-js.video-js:lang(en-IE) .vjs-subs-caps-button .vjs-icon-placeholder:before,.zjapp .video-js.video-js:lang(en-NZ) .vjs-subs-caps-button .vjs-icon-placeholder:before,.zjapp .video-js .vjs-subs-caps-button .vjs-icon-placeholder:before,.zjapp .video-js .vjs-subtitles-button .vjs-icon-placeholder:before,.zjapp .vjs-icon-subtitles:before{content:"\\F10C"}.zjapp .video-js .vjs-captions-button .vjs-icon-placeholder,.zjapp .video-js:lang(en) .vjs-subs-caps-button .vjs-icon-placeholder,.zjapp .video-js:lang(fr-CA) .vjs-subs-caps-button .vjs-icon-placeholder,.zjapp .vjs-icon-captions{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-captions-button .vjs-icon-placeholder:before,.zjapp .video-js:lang(en) .vjs-subs-caps-button .vjs-icon-placeholder:before,.zjapp .video-js:lang(fr-CA) .vjs-subs-caps-button .vjs-icon-placeholder:before,.zjapp .vjs-icon-captions:before{content:"\\F10D"}.zjapp .video-js .vjs-chapters-button .vjs-icon-placeholder,.zjapp .vjs-icon-chapters{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-chapters-button .vjs-icon-placeholder:before,.zjapp .vjs-icon-chapters:before{content:"\\F10E"}.zjapp .vjs-icon-share{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-share:before{content:"\\F10F"}.zjapp .vjs-icon-cog{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-cog:before{content:"\\F110"}.zjapp .video-js .vjs-play-progress,.zjapp .video-js .vjs-volume-level,.zjapp .vjs-icon-circle,.zjapp .vjs-seek-to-live-control .vjs-icon-placeholder{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-play-progress:before,.zjapp .video-js .vjs-volume-level:before,.zjapp .vjs-icon-circle:before,.zjapp .vjs-seek-to-live-control .vjs-icon-placeholder:before{content:"\\F111"}.zjapp .vjs-icon-circle-outline{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-circle-outline:before{content:"\\F112"}.zjapp .vjs-icon-circle-inner-circle{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-circle-inner-circle:before{content:"\\F113"}.zjapp .vjs-icon-hd{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-hd:before{content:"\\F114"}.zjapp .video-js .vjs-control.vjs-close-button .vjs-icon-placeholder,.zjapp .vjs-icon-cancel{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-control.vjs-close-button .vjs-icon-placeholder:before,.zjapp .vjs-icon-cancel:before{content:"\\F115"}.zjapp .video-js .vjs-play-control.vjs-ended .vjs-icon-placeholder,.zjapp .vjs-icon-replay{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-play-control.vjs-ended .vjs-icon-placeholder:before,.zjapp .vjs-icon-replay:before{content:"\\F116"}.zjapp .vjs-icon-facebook{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-facebook:before{content:"\\F117"}.zjapp .vjs-icon-gplus{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-gplus:before{content:"\\F118"}.zjapp .vjs-icon-linkedin{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-linkedin:before{content:"\\F119"}.zjapp .vjs-icon-twitter{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-twitter:before{content:"\\F11A"}.zjapp .vjs-icon-tumblr{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-tumblr:before{content:"\\F11B"}.zjapp .vjs-icon-pinterest{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-pinterest:before{content:"\\F11C"}.zjapp .video-js .vjs-descriptions-button .vjs-icon-placeholder,.zjapp .vjs-icon-audio-description{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-descriptions-button .vjs-icon-placeholder:before,.zjapp .vjs-icon-audio-description:before{content:"\\F11D"}.zjapp .video-js .vjs-audio-button .vjs-icon-placeholder,.zjapp .vjs-icon-audio{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-audio-button .vjs-icon-placeholder:before,.zjapp .vjs-icon-audio:before{content:"\\F11E"}.zjapp .vjs-icon-next-item{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-next-item:before{content:"\\F11F"}.zjapp .vjs-icon-previous-item{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .vjs-icon-previous-item:before{content:"\\F120"}.zjapp .video-js .vjs-picture-in-picture-control .vjs-icon-placeholder,.zjapp .vjs-icon-picture-in-picture-enter{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js .vjs-picture-in-picture-control .vjs-icon-placeholder:before,.zjapp .vjs-icon-picture-in-picture-enter:before{content:"\\F121"}.zjapp .video-js.vjs-picture-in-picture .vjs-picture-in-picture-control .vjs-icon-placeholder,.zjapp .vjs-icon-picture-in-picture-exit{font-family:VideoJS;font-weight:400;font-style:normal}.zjapp .video-js.vjs-picture-in-picture .vjs-picture-in-picture-control .vjs-icon-placeholder:before,.zjapp .vjs-icon-picture-in-picture-exit:before{content:"\\F122"}.zjapp .video-js{display:block;vertical-align:top;box-sizing:border-box;color:#fff;background-color:#000;position:relative;padding:0;font-size:10px;line-height:1;font-weight:400;font-style:normal;font-family:Arial,Helvetica,sans-serif;word-break:normal}.zjapp .video-js:-moz-full-screen{position:absolute}.zjapp .video-js:-webkit-full-screen{width:100%!important;height:100%!important}.zjapp .video-js[tabindex="-1"]{outline:none}.zjapp .video-js *,.zjapp .video-js :after,.zjapp .video-js :before{box-sizing:inherit}.zjapp .video-js ul{font-family:inherit;font-size:inherit;line-height:inherit;list-style-position:outside;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}.zjapp .video-js.vjs-4-3,.zjapp .video-js.vjs-16-9,.zjapp .video-js.vjs-fluid{width:100%;max-width:100%;height:0}.zjapp .video-js.vjs-16-9{padding-top:56.25%}.zjapp .video-js.vjs-4-3{padding-top:75%}.zjapp .video-js.vjs-fill{width:100%;height:100%}.zjapp .video-js .vjs-tech{position:absolute;top:0;left:0;width:100%;height:100%}.zjapp body.vjs-full-window{padding:0;margin:0;height:100%}.zjapp .vjs-full-window .video-js.vjs-fullscreen{position:fixed;overflow:hidden;z-index:1000;left:0;top:0;bottom:0;right:0}.zjapp .video-js.vjs-fullscreen:not(.vjs-ios-native-fs){width:100%!important;height:100%!important;padding-top:0!important}.zjapp .video-js.vjs-fullscreen.vjs-user-inactive{cursor:none}.zjapp .vjs-hidden{display:none!important}.zjapp .vjs-disabled{opacity:.5;cursor:default}.zjapp .video-js .vjs-offscreen{height:1px;left:-9999px;position:absolute;top:0;width:1px}.zjapp .vjs-lock-showing{display:block!important;opacity:1;visibility:visible}.zjapp .vjs-no-js{padding:20px;color:#fff;background-color:#000;font-size:18px;font-family:Arial,Helvetica,sans-serif;text-align:center;width:300px;height:150px;margin:0 auto}.zjapp .vjs-no-js a,.zjapp .vjs-no-js a:visited{color:#66a8cc}.zjapp .video-js .vjs-big-play-button{font-size:3em;line-height:1.5em;height:1.63332em;width:3em;display:block;position:absolute;top:10px;left:10px;padding:0;cursor:pointer;opacity:1;border:.06666em solid #fff;background-color:#2b333f;background-color:rgba(43,51,63,.7);border-radius:.3em;transition:all .4s}.zjapp .vjs-big-play-centered .vjs-big-play-button{top:50%;left:50%;margin-top:-.81666em;margin-left:-1.5em}.zjapp .video-js .vjs-big-play-button:focus,.zjapp .video-js:hover .vjs-big-play-button{border-color:#fff;background-color:#73859f;background-color:rgba(115,133,159,.5);transition:all 0s}.zjapp .vjs-controls-disabled .vjs-big-play-button,.zjapp .vjs-error .vjs-big-play-button,.zjapp .vjs-has-started .vjs-big-play-button,.zjapp .vjs-using-native-controls .vjs-big-play-button{display:none}.zjapp .vjs-has-started.vjs-paused.vjs-show-big-play-button-on-pause .vjs-big-play-button{display:block}.zjapp .video-js button{background:none;border:none;color:inherit;display:inline-block;font-size:inherit;line-height:inherit;text-transform:none;text-decoration:none;transition:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}.zjapp .vjs-control .vjs-button{width:100%;height:100%}.zjapp .video-js .vjs-control.vjs-close-button{cursor:pointer;height:3em;position:absolute;right:0;top:.5em;z-index:2}.zjapp .video-js .vjs-modal-dialog{background:rgba(0,0,0,.8);background:linear-gradient(180deg,rgba(0,0,0,.8),hsla(0,0%,100%,0));overflow:auto}.zjapp .video-js .vjs-modal-dialog>*{box-sizing:border-box}.zjapp .vjs-modal-dialog .vjs-modal-dialog-content{font-size:1.2em;line-height:1.5;padding:20px 24px;z-index:1}.zjapp .vjs-menu-button{cursor:pointer}.zjapp .vjs-menu-button.vjs-disabled{cursor:default}.zjapp .vjs-workinghover .vjs-menu-button.vjs-disabled:hover .vjs-menu{display:none}.zjapp .vjs-menu .vjs-menu-content{display:block;padding:0;margin:0;font-family:Arial,Helvetica,sans-serif;overflow:auto}.zjapp .vjs-menu .vjs-menu-content>*{box-sizing:border-box}.zjapp .vjs-scrubbing .vjs-control.vjs-menu-button:hover .vjs-menu{display:none}.zjapp .vjs-menu li{list-style:none;margin:0;padding:.2em 0;line-height:1.4em;font-size:1.2em;text-align:center;text-transform:lowercase}.zjapp .js-focus-visible .vjs-menu li.vjs-menu-item:hover,.zjapp .vjs-menu li.vjs-menu-item:focus,.zjapp .vjs-menu li.vjs-menu-item:hover{background-color:#73859f;background-color:rgba(115,133,159,.5)}.zjapp .js-focus-visible .vjs-menu li.vjs-selected:hover,.zjapp .vjs-menu li.vjs-selected,.zjapp .vjs-menu li.vjs-selected:focus,.zjapp .vjs-menu li.vjs-selected:hover{background-color:#fff;color:#2b333f}.zjapp .vjs-menu li.vjs-menu-title{text-align:center;text-transform:uppercase;font-size:1em;line-height:2em;padding:0;margin:0 0 .3em 0;font-weight:700;cursor:default}.zjapp .vjs-menu-button-popup .vjs-menu{display:none;position:absolute;bottom:0;width:10em;left:-3em;height:0;margin-bottom:1.5em;border-top-color:rgba(43,51,63,.7)}.zjapp .vjs-menu-button-popup .vjs-menu .vjs-menu-content{background-color:#2b333f;background-color:rgba(43,51,63,.7);position:absolute;width:100%;bottom:1.5em;max-height:15em}.zjapp .vjs-layout-tiny .vjs-menu-button-popup .vjs-menu .vjs-menu-content,.zjapp .vjs-layout-x-small .vjs-menu-button-popup .vjs-menu .vjs-menu-content{max-height:5em}.zjapp .vjs-layout-small .vjs-menu-button-popup .vjs-menu .vjs-menu-content{max-height:10em}.zjapp .vjs-layout-medium .vjs-menu-button-popup .vjs-menu .vjs-menu-content{max-height:14em}.zjapp .vjs-layout-huge .vjs-menu-button-popup .vjs-menu .vjs-menu-content,.zjapp .vjs-layout-large .vjs-menu-button-popup .vjs-menu .vjs-menu-content,.zjapp .vjs-layout-x-large .vjs-menu-button-popup .vjs-menu .vjs-menu-content{max-height:25em}.zjapp .vjs-menu-button-popup .vjs-menu.vjs-lock-showing,.zjapp .vjs-workinghover .vjs-menu-button-popup.vjs-hover .vjs-menu{display:block}.zjapp .video-js .vjs-menu-button-inline{transition:all .4s;overflow:hidden}.zjapp .video-js .vjs-menu-button-inline:before{width:2.222222222em}.zjapp .video-js .vjs-menu-button-inline.vjs-slider-active,.zjapp .video-js .vjs-menu-button-inline:focus,.zjapp .video-js .vjs-menu-button-inline:hover,.zjapp .video-js.vjs-no-flex .vjs-menu-button-inline{width:12em}.zjapp .vjs-menu-button-inline .vjs-menu{opacity:0;height:100%;width:auto;position:absolute;left:4em;top:0;padding:0;margin:0;transition:all .4s}.zjapp .vjs-menu-button-inline.vjs-slider-active .vjs-menu,.zjapp .vjs-menu-button-inline:focus .vjs-menu,.zjapp .vjs-menu-button-inline:hover .vjs-menu{display:block;opacity:1}.zjapp .vjs-no-flex .vjs-menu-button-inline .vjs-menu{display:block;opacity:1;position:relative;width:auto}.zjapp .vjs-no-flex .vjs-menu-button-inline.vjs-slider-active .vjs-menu,.zjapp .vjs-no-flex .vjs-menu-button-inline:focus .vjs-menu,.zjapp .vjs-no-flex .vjs-menu-button-inline:hover .vjs-menu{width:auto}.zjapp .vjs-menu-button-inline .vjs-menu-content{width:auto;height:100%;margin:0;overflow:hidden}.zjapp .video-js .vjs-control-bar{display:none;width:100%;position:absolute;bottom:0;left:0;right:0;height:3em;background-color:#2b333f;background-color:rgba(43,51,63,.7)}.zjapp .vjs-has-started .vjs-control-bar{display:flex;visibility:visible;opacity:1;transition:visibility .1s,opacity .1s}.zjapp .vjs-has-started.vjs-user-inactive.vjs-playing .vjs-control-bar{visibility:visible;opacity:0;transition:visibility 1s,opacity 1s}.zjapp .vjs-controls-disabled .vjs-control-bar,.zjapp .vjs-error .vjs-control-bar,.zjapp .vjs-using-native-controls .vjs-control-bar{display:none!important}.zjapp .vjs-audio.vjs-has-started.vjs-user-inactive.vjs-playing .vjs-control-bar{opacity:1;visibility:visible}.zjapp .vjs-has-started.vjs-no-flex .vjs-control-bar{display:table}.zjapp .video-js .vjs-control{position:relative;text-align:center;margin:0;padding:0;height:100%;width:4em;flex:none}.zjapp .vjs-button>.vjs-icon-placeholder:before{font-size:1.8em;line-height:1.67}.zjapp .video-js .vjs-control:focus,.zjapp .video-js .vjs-control:focus:before,.zjapp .video-js .vjs-control:hover:before{text-shadow:0 0 1em #fff}.zjapp .video-js .vjs-control-text{border:0;clip:rect(0 0 0 0);height:1px;overflow:hidden;padding:0;position:absolute;width:1px}.zjapp .vjs-no-flex .vjs-control{display:table-cell;vertical-align:middle}.zjapp .video-js .vjs-custom-control-spacer{display:none}.zjapp .video-js .vjs-progress-control{cursor:pointer;flex:auto;display:flex;align-items:center;min-width:4em;touch-action:none}.zjapp .video-js .vjs-progress-control.disabled{cursor:default}.zjapp .vjs-live .vjs-progress-control{display:none}.zjapp .vjs-liveui .vjs-progress-control{display:flex;align-items:center}.zjapp .vjs-no-flex .vjs-progress-control{width:auto}.zjapp .video-js .vjs-progress-holder{flex:auto;transition:all .2s;height:.3em}.zjapp .video-js .vjs-progress-control .vjs-progress-holder{margin:0 10px}.zjapp .video-js .vjs-progress-control:hover .vjs-progress-holder{font-size:1.6666666667em}.zjapp .video-js .vjs-progress-control:hover .vjs-progress-holder.disabled{font-size:1em}.zjapp .video-js .vjs-progress-holder .vjs-load-progress,.zjapp .video-js .vjs-progress-holder .vjs-load-progress div,.zjapp .video-js .vjs-progress-holder .vjs-play-progress{position:absolute;display:block;height:100%;margin:0;padding:0;width:0}.zjapp .video-js .vjs-play-progress{background-color:#fff}.zjapp .video-js .vjs-play-progress:before{font-size:.9em;position:absolute;right:-.5em;top:-.3333333333em;z-index:1}.zjapp .video-js .vjs-load-progress{background:rgba(115,133,159,.5)}.zjapp .video-js .vjs-load-progress div{background:rgba(115,133,159,.75)}.zjapp .video-js .vjs-time-tooltip{background-color:#fff;background-color:hsla(0,0%,100%,.8);border-radius:.3em;color:#000;float:right;font-family:Arial,Helvetica,sans-serif;font-size:1em;padding:6px 8px 8px 8px;pointer-events:none;position:absolute;top:-3.4em;visibility:hidden;z-index:1}.zjapp .video-js .vjs-progress-holder:focus .vjs-time-tooltip{display:none}.zjapp .video-js .vjs-progress-control:hover .vjs-progress-holder:focus .vjs-time-tooltip,.zjapp .video-js .vjs-progress-control:hover .vjs-time-tooltip{display:block;font-size:.6em;visibility:visible}.zjapp .video-js .vjs-progress-control.disabled:hover .vjs-time-tooltip{font-size:1em}.zjapp .video-js .vjs-progress-control .vjs-mouse-display{display:none;position:absolute;width:1px;height:100%;background-color:#000;z-index:1}.zjapp .vjs-no-flex .vjs-progress-control .vjs-mouse-display{z-index:0}.zjapp .video-js .vjs-progress-control:hover .vjs-mouse-display{display:block}.zjapp .video-js.vjs-user-inactive .vjs-progress-control .vjs-mouse-display{visibility:hidden;opacity:0;transition:visibility 1s,opacity 1s}.zjapp .video-js.vjs-user-inactive.vjs-no-flex .vjs-progress-control .vjs-mouse-display{display:none}.zjapp .vjs-mouse-display .vjs-time-tooltip{color:#fff;background-color:#000;background-color:rgba(0,0,0,.8)}.zjapp .video-js .vjs-slider{position:relative;cursor:pointer;padding:0;margin:0 .45em 0 .45em;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#73859f;background-color:rgba(115,133,159,.5)}.zjapp .video-js .vjs-slider.disabled{cursor:default}.zjapp .video-js .vjs-slider:focus{text-shadow:0 0 1em #fff;box-shadow:0 0 1em #fff}.zjapp .video-js .vjs-mute-control{cursor:pointer;flex:none}.zjapp .video-js .vjs-volume-control{cursor:pointer;margin-right:1em;display:flex}.zjapp .video-js .vjs-volume-control.vjs-volume-horizontal{width:5em}.zjapp .video-js .vjs-volume-panel .vjs-volume-control{visibility:visible;opacity:0;width:1px;height:1px;margin-left:-1px}.zjapp .video-js .vjs-volume-panel{transition:width 1s}.zjapp .video-js .vjs-volume-panel.vjs-hover .vjs-mute-control~.vjs-volume-control,.zjapp .video-js .vjs-volume-panel.vjs-hover .vjs-volume-control,.zjapp .video-js .vjs-volume-panel .vjs-volume-control.vjs-slider-active,.zjapp .video-js .vjs-volume-panel .vjs-volume-control:active,.zjapp .video-js .vjs-volume-panel:active .vjs-volume-control,.zjapp .video-js .vjs-volume-panel:focus .vjs-volume-control{visibility:visible;opacity:1;position:relative;transition:visibility .1s,opacity .1s,height .1s,width .1s,left 0s,top 0s}.zjapp .video-js .vjs-volume-panel.vjs-hover .vjs-mute-control~.vjs-volume-control.vjs-volume-horizontal,.zjapp .video-js .vjs-volume-panel.vjs-hover .vjs-volume-control.vjs-volume-horizontal,.zjapp .video-js .vjs-volume-panel .vjs-volume-control.vjs-slider-active.vjs-volume-horizontal,.zjapp .video-js .vjs-volume-panel .vjs-volume-control:active.vjs-volume-horizontal,.zjapp .video-js .vjs-volume-panel:active .vjs-volume-control.vjs-volume-horizontal,.zjapp .video-js .vjs-volume-panel:focus .vjs-volume-control.vjs-volume-horizontal{width:5em;height:3em;margin-right:0}.zjapp .video-js .vjs-volume-panel.vjs-hover .vjs-mute-control~.vjs-volume-control.vjs-volume-vertical,.zjapp .video-js .vjs-volume-panel.vjs-hover .vjs-volume-control.vjs-volume-vertical,.zjapp .video-js .vjs-volume-panel .vjs-volume-control.vjs-slider-active.vjs-volume-vertical,.zjapp .video-js .vjs-volume-panel .vjs-volume-control:active.vjs-volume-vertical,.zjapp .video-js .vjs-volume-panel:active .vjs-volume-control.vjs-volume-vertical,.zjapp .video-js .vjs-volume-panel:focus .vjs-volume-control.vjs-volume-vertical{left:-3.5em;transition:left 0s}.zjapp .video-js .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-hover,.zjapp .video-js .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active,.zjapp .video-js .vjs-volume-panel.vjs-volume-panel-horizontal:active{width:10em;transition:width .1s}.zjapp .video-js .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-mute-toggle-only{width:4em}.zjapp .video-js .vjs-volume-panel .vjs-volume-control.vjs-volume-vertical{height:8em;width:3em;left:-3000em;transition:visibility 1s,opacity 1s,height 1s 1s,width 1s 1s,left 1s 1s,top 1s 1s}.zjapp .video-js .vjs-volume-panel .vjs-volume-control.vjs-volume-horizontal{transition:visibility 1s,opacity 1s,height 1s 1s,width 1s,left 1s 1s,top 1s 1s}.zjapp .video-js.vjs-no-flex .vjs-volume-panel .vjs-volume-control.vjs-volume-horizontal{width:5em;height:3em;visibility:visible;opacity:1;position:relative;transition:none}.zjapp .video-js.vjs-no-flex .vjs-volume-control.vjs-volume-vertical,.zjapp .video-js.vjs-no-flex .vjs-volume-panel .vjs-volume-control.vjs-volume-vertical{position:absolute;bottom:3em;left:.5em}.zjapp .video-js .vjs-volume-panel{display:flex}.zjapp .video-js .vjs-volume-bar{margin:1.35em .45em}.zjapp .vjs-volume-bar.vjs-slider-horizontal{width:5em;height:.3em}.zjapp .vjs-volume-bar.vjs-slider-vertical{width:.3em;height:5em;margin:1.35em auto}.zjapp .video-js .vjs-volume-level{position:absolute;bottom:0;left:0;background-color:#fff}.zjapp .video-js .vjs-volume-level:before{position:absolute;font-size:.9em}.zjapp .vjs-slider-vertical .vjs-volume-level{width:.3em}.zjapp .vjs-slider-vertical .vjs-volume-level:before{top:-.5em;left:-.3em}.zjapp .vjs-slider-horizontal .vjs-volume-level{height:.3em}.zjapp .vjs-slider-horizontal .vjs-volume-level:before{top:-.3em;right:-.5em}.zjapp .video-js .vjs-volume-panel.vjs-volume-panel-vertical{width:4em}.zjapp .vjs-volume-bar.vjs-slider-vertical .vjs-volume-level{height:100%}.zjapp .vjs-volume-bar.vjs-slider-horizontal .vjs-volume-level{width:100%}.zjapp .video-js .vjs-volume-vertical{width:3em;height:8em;bottom:8em;background-color:#2b333f;background-color:rgba(43,51,63,.7)}.zjapp .video-js .vjs-volume-horizontal .vjs-menu{left:-2em}.zjapp .vjs-poster{display:inline-block;vertical-align:middle;background-repeat:no-repeat;background-position:50% 50%;background-size:contain;background-color:#000;cursor:pointer;margin:0;padding:0;position:absolute;top:0;right:0;bottom:0;left:0;height:100%}.zjapp .vjs-has-started .vjs-poster{display:none}.zjapp .vjs-audio.vjs-has-started .vjs-poster{display:block}.zjapp .vjs-using-native-controls .vjs-poster{display:none}.zjapp .video-js .vjs-live-control{display:flex;align-items:flex-start;flex:auto;font-size:1em;line-height:3em}.zjapp .vjs-no-flex .vjs-live-control{display:table-cell;width:auto;text-align:left}.zjapp .video-js.vjs-liveui .vjs-live-control,.zjapp .video-js:not(.vjs-live) .vjs-live-control{display:none}.zjapp .video-js .vjs-seek-to-live-control{cursor:pointer;flex:none;display:inline-flex;height:100%;padding-left:.5em;padding-right:.5em;font-size:1em;line-height:3em;width:auto;min-width:4em}.zjapp .vjs-no-flex .vjs-seek-to-live-control{display:table-cell;width:auto;text-align:left}.zjapp .video-js.vjs-live:not(.vjs-liveui) .vjs-seek-to-live-control,.zjapp .video-js:not(.vjs-live) .vjs-seek-to-live-control{display:none}.zjapp .vjs-seek-to-live-control.vjs-control.vjs-at-live-edge{cursor:auto}.zjapp .vjs-seek-to-live-control .vjs-icon-placeholder{margin-right:.5em;color:#888}.zjapp .vjs-seek-to-live-control.vjs-control.vjs-at-live-edge .vjs-icon-placeholder{color:red}.zjapp .video-js .vjs-time-control{flex:none;font-size:1em;line-height:3em;min-width:2em;width:auto;padding-left:1em;padding-right:1em}.zjapp .video-js .vjs-current-time,.zjapp .video-js .vjs-duration,.zjapp .vjs-live .vjs-time-control,.zjapp .vjs-no-flex .vjs-current-time,.zjapp .vjs-no-flex .vjs-duration{display:none}.zjapp .vjs-time-divider{display:none;line-height:3em}.zjapp .vjs-live .vjs-time-divider{display:none}.zjapp .video-js .vjs-play-control{cursor:pointer}.zjapp .video-js .vjs-play-control .vjs-icon-placeholder{flex:none}.zjapp .vjs-text-track-display{position:absolute;bottom:3em;left:0;right:0;top:0;pointer-events:none}.zjapp .video-js.vjs-user-inactive.vjs-playing .vjs-text-track-display{bottom:1em}.zjapp .video-js .vjs-text-track{font-size:1.4em;text-align:center;margin-bottom:.1em}.zjapp .vjs-subtitles{color:#fff}.zjapp .vjs-captions{color:#fc6}.zjapp .vjs-tt-cue{display:block}.zjapp video::-webkit-media-text-track-display{transform:translateY(-3em)}.zjapp .video-js.vjs-user-inactive.vjs-playing video::-webkit-media-text-track-display{transform:translateY(-1.5em)}.zjapp .video-js .vjs-fullscreen-control,.zjapp .video-js .vjs-picture-in-picture-control{cursor:pointer;flex:none}.zjapp .vjs-playback-rate .vjs-playback-rate-value,.zjapp .vjs-playback-rate>.vjs-menu-button{position:absolute;top:0;left:0;width:100%;height:100%}.zjapp .vjs-playback-rate .vjs-playback-rate-value{pointer-events:none;font-size:1.5em;line-height:2;text-align:center}.zjapp .vjs-playback-rate .vjs-menu{width:4em;left:0}.zjapp .vjs-error .vjs-error-display .vjs-modal-dialog-content{font-size:1.4em;text-align:center}.zjapp .vjs-error .vjs-error-display:before{color:#fff;content:"X";font-family:Arial,Helvetica,sans-serif;font-size:4em;left:0;line-height:1;margin-top:-.5em;position:absolute;text-shadow:.05em .05em .1em #000;text-align:center;top:50%;vertical-align:middle;width:100%}.zjapp .vjs-loading-spinner{display:none;position:absolute;top:50%;left:50%;margin:-25px 0 0 -25px;opacity:.85;text-align:left;border:6px solid rgba(43,51,63,.7);box-sizing:border-box;background-clip:padding-box;width:50px;height:50px;border-radius:25px;visibility:hidden}.zjapp .vjs-seeking .vjs-loading-spinner,.zjapp .vjs-waiting .vjs-loading-spinner{display:block;-webkit-animation:vjs-spinner-show 0s linear .3s forwards;animation:vjs-spinner-show 0s linear .3s forwards}.zjapp .vjs-loading-spinner:after,.zjapp .vjs-loading-spinner:before{content:"";position:absolute;margin:-6px;box-sizing:inherit;width:inherit;height:inherit;border-radius:inherit;opacity:1;border:inherit;border-color:transparent;border-top-color:#fff}.zjapp .vjs-seeking .vjs-loading-spinner:after,.zjapp .vjs-seeking .vjs-loading-spinner:before,.zjapp .vjs-waiting .vjs-loading-spinner:after,.zjapp .vjs-waiting .vjs-loading-spinner:before{-webkit-animation:vjs-spinner-spin 1.1s cubic-bezier(.6,.2,0,.8) infinite,vjs-spinner-fade 1.1s linear infinite;animation:vjs-spinner-spin 1.1s cubic-bezier(.6,.2,0,.8) infinite,vjs-spinner-fade 1.1s linear infinite}.zjapp .vjs-seeking .vjs-loading-spinner:before,.zjapp .vjs-waiting .vjs-loading-spinner:before{border-top-color:#fff}.zjapp .vjs-seeking .vjs-loading-spinner:after,.zjapp .vjs-waiting .vjs-loading-spinner:after{border-top-color:#fff;-webkit-animation-delay:.44s;animation-delay:.44s}@keyframes vjs-spinner-show{to{visibility:visible}}@-webkit-keyframes vjs-spinner-show{to{visibility:visible}}@keyframes vjs-spinner-spin{to{transform:rotate(1turn)}}@-webkit-keyframes vjs-spinner-spin{to{-webkit-transform:rotate(1turn)}}@keyframes vjs-spinner-fade{0%{border-top-color:#73859f}20%{border-top-color:#73859f}35%{border-top-color:#fff}60%{border-top-color:#73859f}to{border-top-color:#73859f}}@-webkit-keyframes vjs-spinner-fade{0%{border-top-color:#73859f}20%{border-top-color:#73859f}35%{border-top-color:#fff}60%{border-top-color:#73859f}to{border-top-color:#73859f}}.zjapp .vjs-chapters-button .vjs-menu ul{width:24em}.zjapp .video-js .vjs-subs-caps-button+.vjs-menu .vjs-captions-menu-item .vjs-menu-item-text .vjs-icon-placeholder{vertical-align:middle;display:inline-block;margin-bottom:-.1em}.zjapp .video-js .vjs-subs-caps-button+.vjs-menu .vjs-captions-menu-item .vjs-menu-item-text .vjs-icon-placeholder:before{font-family:VideoJS;content:"\\F10D";font-size:1.5em;line-height:inherit}.zjapp .video-js .vjs-audio-button+.vjs-menu .vjs-main-desc-menu-item .vjs-menu-item-text .vjs-icon-placeholder{vertical-align:middle;display:inline-block;margin-bottom:-.1em}.zjapp .video-js .vjs-audio-button+.vjs-menu .vjs-main-desc-menu-item .vjs-menu-item-text .vjs-icon-placeholder:before{font-family:VideoJS;content:" \\F11D";font-size:1.5em;line-height:inherit}.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-audio-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-captions-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-chapters-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-current-time,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-descriptions-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-duration,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-playback-rate,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-remaining-time,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-subtitles-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-time-divider,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-volume-control,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-audio-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-captions-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-chapters-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-current-time,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-descriptions-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-duration,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-playback-rate,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-remaining-time,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-subtitles-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-time-divider,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-volume-control,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-audio-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-captions-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-chapters-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-current-time,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-descriptions-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-duration,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-playback-rate,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-remaining-time,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-subtitles-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-time-divider,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-volume-control{display:none}.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal:active,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-small .vjs-volume-panel.vjs-volume-panel-horizontal:hover,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal:active,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-volume-panel.vjs-volume-panel-horizontal:hover,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal.vjs-slider-active,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal:active,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small .vjs-volume-panel.vjs-volume-panel-horizontal:hover{width:auto}.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-subs-caps-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small:not(.vjs-live) .vjs-subs-caps-button,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small:not(.vjs-liveui) .vjs-subs-caps-button{display:none}.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-custom-control-spacer,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small.vjs-liveui .vjs-custom-control-spacer{flex:auto;display:block}.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny.vjs-no-flex .vjs-custom-control-spacer,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small.vjs-liveui.vjs-no-flex .vjs-custom-control-spacer{width:auto}.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-tiny .vjs-progress-control,.zjapp .video-js:not(.vjs-fullscreen).vjs-layout-x-small.vjs-liveui .vjs-progress-control{display:none}.zjapp .vjs-modal-dialog.vjs-text-track-settings{background-color:#2b333f;background-color:rgba(43,51,63,.75);color:#fff;height:70%}.zjapp .vjs-text-track-settings .vjs-modal-dialog-content{display:table}.zjapp .vjs-text-track-settings .vjs-track-settings-colors,.zjapp .vjs-text-track-settings .vjs-track-settings-controls,.zjapp .vjs-text-track-settings .vjs-track-settings-font{display:table-cell}.zjapp .vjs-text-track-settings .vjs-track-settings-controls{text-align:right;vertical-align:bottom}@supports (display:grid){.zjapp .vjs-text-track-settings .vjs-modal-dialog-content{display:grid;grid-template-columns:1fr 1fr;grid-template-rows:1fr;padding:20px 24px 0 24px}.zjapp .vjs-track-settings-controls .vjs-default-button{margin-bottom:20px}.zjapp .vjs-text-track-settings .vjs-track-settings-controls{grid-column:1/-1}.zjapp .vjs-layout-small .vjs-text-track-settings .vjs-modal-dialog-content,.zjapp .vjs-layout-tiny .vjs-text-track-settings .vjs-modal-dialog-content,.zjapp .vjs-layout-x-small .vjs-text-track-settings .vjs-modal-dialog-content{grid-template-columns:1fr}}.zjapp .vjs-track-setting>select{margin-right:1em;margin-bottom:.5em}.zjapp .vjs-text-track-settings fieldset{margin:5px;padding:3px;border:none}.zjapp .vjs-text-track-settings fieldset span{display:inline-block}.zjapp .vjs-text-track-settings fieldset span>select{max-width:7.3em}.zjapp .vjs-text-track-settings legend{color:#fff;margin:0 0 5px 0}.zjapp .vjs-text-track-settings .vjs-label{position:absolute;clip:rect(1px 1px 1px 1px);clip:rect(1px,1px,1px,1px);display:block;margin:0 0 5px 0;padding:0;border:0;height:1px;width:1px;overflow:hidden}.zjapp .vjs-track-settings-controls button:active,.zjapp .vjs-track-settings-controls button:focus{outline-style:solid;outline-width:medium;background-image:linear-gradient(0deg,#fff 88%,#73859f)}.zjapp .vjs-track-settings-controls button:hover{color:rgba(43,51,63,.75)}.zjapp .vjs-track-settings-controls button{background-color:#fff;background-image:linear-gradient(-180deg,#fff 88%,#73859f);color:#2b333f;cursor:pointer;border-radius:2px}.zjapp .vjs-track-settings-controls .vjs-default-button{margin-right:1em}@media print{.zjapp .video-js>:not(.vjs-tech):not(.vjs-poster){visibility:hidden}}.zjapp .vjs-resize-manager{position:absolute;top:0;left:0;width:100%;height:100%;border:none;z-index:-1000}.zjapp .js-focus-visible .video-js :focus:not(.focus-visible),.zjapp .video-js .vjs-menu :focus:not(:focus-visible),.zjapp .video-js :focus:not(:focus-visible){outline:none;background:none}',""])},46367:function(e,t){function i(e){if(e&&"object"==typeof e){var t=e.which||e.keyCode||e.charCode;t&&(e=t)}if("number"==typeof e)return s[e];var i,a=String(e);return(i=n[a.toLowerCase()])?i:(i=r[a.toLowerCase()])||(1===a.length?a.charCodeAt(0):void 0)}i.isEventKey=function(e,t){if(e&&"object"==typeof e){var i=e.which||e.keyCode||e.charCode;if(null==i)return!1;if("string"==typeof t){var a;if(a=n[t.toLowerCase()])return a===i;if(a=r[t.toLowerCase()])return a===i}else if("number"==typeof t)return t===i;return!1}};var n=(t=e.exports=i).code=t.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},r=t.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(a=97;a<123;a++)n[String.fromCharCode(a)]=a-32;for(var a=48;a<58;a++)n[a-48]=a;for(a=1;a<13;a++)n["f"+a]=a+111;for(a=0;a<10;a++)n["numpad "+a]=a+96;var s=t.names=t.title={};for(a in n)s[n[a]]=a;for(var o in r)n[o]=r[o]},"4e43":function(e,t){function i(e,t){for(var i in e)t[i]=e[i]}function n(e,t){var n=e.prototype;if(Object.create){var r=Object.create(t.prototype);n.__proto__=r}if(!(n instanceof t)){function a(){}a.prototype=t.prototype,i(n,a=new a),e.prototype=n=a}n.constructor!=e&&("function"!=typeof e&&console.error("unknow Class:"+e),n.constructor=e)}var r={},a=r.ELEMENT_NODE=1,s=r.ATTRIBUTE_NODE=2,o=r.TEXT_NODE=3,l=r.CDATA_SECTION_NODE=4,u=r.ENTITY_REFERENCE_NODE=5,c=r.ENTITY_NODE=6,d=r.PROCESSING_INSTRUCTION_NODE=7,h=r.COMMENT_NODE=8,p=r.DOCUMENT_NODE=9,f=r.DOCUMENT_TYPE_NODE=10,m=r.DOCUMENT_FRAGMENT_NODE=11,g=r.NOTATION_NODE=12,v={},y={},_=(v.INDEX_SIZE_ERR=(y[1]="Index size error",1),v.DOMSTRING_SIZE_ERR=(y[2]="DOMString size error",2),v.HIERARCHY_REQUEST_ERR=(y[3]="Hierarchy request error",3)),b=(v.WRONG_DOCUMENT_ERR=(y[4]="Wrong document",4),v.INVALID_CHARACTER_ERR=(y[5]="Invalid character",5),v.NO_DATA_ALLOWED_ERR=(y[6]="No data allowed",6),v.NO_MODIFICATION_ALLOWED_ERR=(y[7]="No modification allowed",7),v.NOT_FOUND_ERR=(y[8]="Not found",8)),T=(v.NOT_SUPPORTED_ERR=(y[9]="Not supported",9),v.INUSE_ATTRIBUTE_ERR=(y[10]="Attribute in use",10));v.INVALID_STATE_ERR=(y[11]="Invalid state",11),v.SYNTAX_ERR=(y[12]="Syntax error",12),v.INVALID_MODIFICATION_ERR=(y[13]="Invalid modification",13),v.NAMESPACE_ERR=(y[14]="Invalid namespace",14),v.INVALID_ACCESS_ERR=(y[15]="Invalid access",15);function S(e,t){if(t instanceof Error)var i=t;else i=this,Error.call(this,y[e]),this.message=y[e],Error.captureStackTrace&&Error.captureStackTrace(this,S);return i.code=e,t&&(this.message=this.message+": "+t),i}function j(){}function k(e,t){this._node=e,this._refresh=t,C(this)}function C(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var n=e._refresh(e._node);te(e,"length",n.length),i(n,e),e._inc=t}}function w(){}function E(e,t){for(var i=e.length;i--;)if(e[i]===t)return i}function A(e,t,i,n){if(n?t[E(t,n)]=i:t[t.length++]=i,e){i.ownerElement=e;var r=e.ownerDocument;r&&(n&&M(r,e,n),function(e,t,i){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==i.namespaceURI&&(t._nsMap[i.prefix?i.localName:""]=i.value)}(r,e,i))}}function x(e,t,i){var n=E(t,i);if(!(n>=0))throw S(b,new Error(e.tagName+"@"+i));for(var r=t.length-1;n<r;)t[n]=t[++n];if(t.length=r,e){var a=e.ownerDocument;a&&(M(a,e,i),i.ownerElement=null)}}function I(e){if(this._features={},e)for(var t in e)this._features=e[t]}function P(){}function O(e){return("<"==e?"&lt;":">"==e&&"&gt;")||"&"==e&&"&amp;"||'"'==e&&"&quot;"||"&#"+e.charCodeAt()+";"}function L(e,t){if(t(e))return!0;if(e=e.firstChild)do{if(L(e,t))return!0}while(e=e.nextSibling)}function D(){}function M(e,t,i,n){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==i.namespaceURI&&delete t._nsMap[i.prefix?i.localName:""]}function N(e,t,i){if(e&&e._inc){e._inc++;var n=t.childNodes;if(i)n[n.length++]=i;else{for(var r=t.firstChild,a=0;r;)n[a++]=r,r=r.nextSibling;n.length=a}}}function R(e,t){var i=t.previousSibling,n=t.nextSibling;return i?i.nextSibling=n:e.firstChild=n,n?n.previousSibling=i:e.lastChild=i,N(e.ownerDocument,e),t}function U(e,t,i){var n=t.parentNode;if(n&&n.removeChild(t),t.nodeType===m){var r=t.firstChild;if(null==r)return t;var a=t.lastChild}else r=a=t;var s=i?i.previousSibling:e.lastChild;r.previousSibling=s,a.nextSibling=i,s?s.nextSibling=r:e.firstChild=r,null==i?e.lastChild=a:i.previousSibling=a;do{r.parentNode=e}while(r!==a&&(r=r.nextSibling));return N(e.ownerDocument||e,e),t.nodeType==m&&(t.firstChild=t.lastChild=null),t}function z(){this._nsMap={}}function F(){}function B(){}function V(){}function H(){}function q(){}function W(){}function G(){}function X(){}function K(){}function Y(){}function Q(){}function J(){}function Z(e,t){var i=[],n=9==this.nodeType?this.documentElement:this,r=n.prefix,a=n.namespaceURI;if(a&&null==r&&null==(r=n.lookupPrefix(a)))var s=[{namespace:a,prefix:null}];return ee(this,i,e,t,s),i.join("")}function $(e,t,i){var n=e.prefix||"",r=e.namespaceURI;if(!n&&!r)return!1;if("xml"===n&&"http://www.w3.org/XML/1998/namespace"===r||"http://www.w3.org/2000/xmlns/"==r)return!1;for(var a=i.length;a--;){var s=i[a];if(s.prefix==n)return s.namespace!=r}return!0}function ee(e,t,i,n,r){if(n){if(!(e=n(e)))return;if("string"==typeof e)return void t.push(e)}switch(e.nodeType){case a:r||(r=[]);r.length;var c=e.attributes,g=c.length,v=e.firstChild,y=e.tagName;i="http://www.w3.org/1999/xhtml"===e.namespaceURI||i,t.push("<",y);for(var _=0;_<g;_++){"xmlns"==(b=c.item(_)).prefix?r.push({prefix:b.localName,namespace:b.value}):"xmlns"==b.nodeName&&r.push({prefix:"",namespace:b.value})}for(_=0;_<g;_++){var b;if($(b=c.item(_),0,r)){var T=b.prefix||"",S=b.namespaceURI,j=T?" xmlns:"+T:" xmlns";t.push(j,'="',S,'"'),r.push({prefix:T,namespace:S})}ee(b,t,i,n,r)}if($(e,0,r)){T=e.prefix||"",S=e.namespaceURI,j=T?" xmlns:"+T:" xmlns";t.push(j,'="',S,'"'),r.push({prefix:T,namespace:S})}if(v||i&&!/^(?:meta|link|img|br|hr|input)$/i.test(y)){if(t.push(">"),i&&/^script$/i.test(y))for(;v;)v.data?t.push(v.data):ee(v,t,i,n,r),v=v.nextSibling;else for(;v;)ee(v,t,i,n,r),v=v.nextSibling;t.push("</",y,">")}else t.push("/>");return;case p:case m:for(v=e.firstChild;v;)ee(v,t,i,n,r),v=v.nextSibling;return;case s:return t.push(" ",e.name,'="',e.value.replace(/[<&"]/g,O),'"');case o:return t.push(e.data.replace(/[<&]/g,O));case l:return t.push("<![CDATA[",e.data,"]]>");case h:return t.push("\x3c!--",e.data,"--\x3e");case f:var k=e.publicId,C=e.systemId;if(t.push("<!DOCTYPE ",e.name),k)t.push(' PUBLIC "',k),C&&"."!=C&&t.push('" "',C),t.push('">');else if(C&&"."!=C)t.push(' SYSTEM "',C,'">');else{var w=e.internalSubset;w&&t.push(" [",w,"]"),t.push(">")}return;case d:return t.push("<?",e.target," ",e.data,"?>");case u:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function te(e,t,i){e[t]=i}S.prototype=Error.prototype,i(v,S),j.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var i=[],n=0;n<this.length;n++)ee(this[n],i,e,t);return i.join("")}},k.prototype.item=function(e){return C(this),this[e]},n(k,j),w.prototype={length:0,item:j.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var i=this[t];if(i.nodeName==e)return i}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new S(T);var i=this.getNamedItem(e.nodeName);return A(this._ownerElement,this,e,i),i},setNamedItemNS:function(e){var t,i=e.ownerElement;if(i&&i!=this._ownerElement)throw new S(T);return t=this.getNamedItemNS(e.namespaceURI,e.localName),A(this._ownerElement,this,e,t),t},removeNamedItem:function(e){var t=this.getNamedItem(e);return x(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var i=this.getNamedItemNS(e,t);return x(this._ownerElement,this,i),i},getNamedItemNS:function(e,t){for(var i=this.length;i--;){var n=this[i];if(n.localName==t&&n.namespaceURI==e)return n}return null}},I.prototype={hasFeature:function(e,t){var i=this._features[e.toLowerCase()];return!(!i||t&&!(t in i))},createDocument:function(e,t,i){var n=new D;if(n.implementation=this,n.childNodes=new j,n.doctype=i,i&&n.appendChild(i),t){var r=n.createElementNS(e,t);n.appendChild(r)}return n},createDocumentType:function(e,t,i){var n=new W;return n.name=e,n.nodeName=e,n.publicId=t,n.systemId=i,n}},P.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return U(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return R(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(e){return function e(t,i,n){var r=new i.constructor;for(var o in i){var l=i[o];"object"!=typeof l&&l!=r[o]&&(r[o]=l)}i.childNodes&&(r.childNodes=new j);switch(r.ownerDocument=t,r.nodeType){case a:var u=i.attributes,c=r.attributes=new w,d=u.length;c._ownerElement=r;for(var h=0;h<d;h++)r.setAttributeNode(e(t,u.item(h),!0));break;case s:n=!0}if(n)for(var p=i.firstChild;p;)r.appendChild(e(t,p,n)),p=p.nextSibling;return r}(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==o&&e.nodeType==o?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var i=t._nsMap;if(i)for(var n in i)if(i[n]==e)return n;t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var i=t._nsMap;if(i&&e in i)return i[e];t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){return null==this.lookupPrefix(e)}},i(r,P),i(r,P.prototype),D.prototype={nodeName:"#document",nodeType:p,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==m){for(var i=e.firstChild;i;){var n=i.nextSibling;this.insertBefore(i,t),i=n}return e}return null==this.documentElement&&e.nodeType==a&&(this.documentElement=e),U(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),R(this,e)},importNode:function(e,t){return function e(t,i,n){var r;switch(i.nodeType){case a:(r=i.cloneNode(!1)).ownerDocument=t;case m:break;case s:n=!0}r||(r=i.cloneNode(!1));if(r.ownerDocument=t,r.parentNode=null,n)for(var o=i.firstChild;o;)r.appendChild(e(t,o,n)),o=o.nextSibling;return r}(this,e,t)},getElementById:function(e){var t=null;return L(this.documentElement,(function(i){if(i.nodeType==a&&i.getAttribute("id")==e)return t=i,!0})),t},createElement:function(e){var t=new z;return t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.childNodes=new j,(t.attributes=new w)._ownerElement=t,t},createDocumentFragment:function(){var e=new Y;return e.ownerDocument=this,e.childNodes=new j,e},createTextNode:function(e){var t=new V;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new H;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new q;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var i=new Q;return i.ownerDocument=this,i.tagName=i.target=e,i.nodeValue=i.data=t,i},createAttribute:function(e){var t=new F;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new K;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var i=new z,n=t.split(":"),r=i.attributes=new w;return i.childNodes=new j,i.ownerDocument=this,i.nodeName=t,i.tagName=t,i.namespaceURI=e,2==n.length?(i.prefix=n[0],i.localName=n[1]):i.localName=t,r._ownerElement=i,i},createAttributeNS:function(e,t){var i=new F,n=t.split(":");return i.ownerDocument=this,i.nodeName=t,i.name=t,i.namespaceURI=e,i.specified=!0,2==n.length?(i.prefix=n[0],i.localName=n[1]):i.localName=t,i}},n(D,P),z.prototype={nodeType:a,hasAttribute:function(e){return null!=this.getAttributeNode(e)},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var i=this.ownerDocument.createAttribute(e);i.value=i.nodeValue=""+t,this.setAttributeNode(i)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===m?this.insertBefore(e,null):function(e,t){var i=t.parentNode;if(i){var n=e.lastChild;i.removeChild(t);n=e.lastChild}return n=e.lastChild,t.parentNode=e,t.previousSibling=n,t.nextSibling=null,n?n.nextSibling=t:e.firstChild=t,e.lastChild=t,N(e.ownerDocument,e,t),t}(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var i=this.getAttributeNodeNS(e,t);i&&this.removeAttributeNode(i)},hasAttributeNS:function(e,t){return null!=this.getAttributeNodeNS(e,t)},getAttributeNS:function(e,t){var i=this.getAttributeNodeNS(e,t);return i&&i.value||""},setAttributeNS:function(e,t,i){var n=this.ownerDocument.createAttributeNS(e,t);n.value=n.nodeValue=""+i,this.setAttributeNode(n)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new k(this,(function(t){var i=[];return L(t,(function(n){n===t||n.nodeType!=a||"*"!==e&&n.tagName!=e||i.push(n)})),i}))},getElementsByTagNameNS:function(e,t){return new k(this,(function(i){var n=[];return L(i,(function(r){r===i||r.nodeType!==a||"*"!==e&&r.namespaceURI!==e||"*"!==t&&r.localName!=t||n.push(r)})),n}))}},D.prototype.getElementsByTagName=z.prototype.getElementsByTagName,D.prototype.getElementsByTagNameNS=z.prototype.getElementsByTagNameNS,n(z,P),F.prototype.nodeType=s,n(F,P),B.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(y[_])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,i){i=this.data.substring(0,e)+i+this.data.substring(e+t),this.nodeValue=this.data=i,this.length=i.length}},n(B,P),V.prototype={nodeName:"#text",nodeType:o,splitText:function(e){var t=this.data,i=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var n=this.ownerDocument.createTextNode(i);return this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling),n}},n(V,B),H.prototype={nodeName:"#comment",nodeType:h},n(H,B),q.prototype={nodeName:"#cdata-section",nodeType:l},n(q,B),W.prototype.nodeType=f,n(W,P),G.prototype.nodeType=g,n(G,P),X.prototype.nodeType=c,n(X,P),K.prototype.nodeType=u,n(K,P),Y.prototype.nodeName="#document-fragment",Y.prototype.nodeType=m,n(Y,P),Q.prototype.nodeType=d,n(Q,P),J.prototype.serializeToString=function(e,t,i){return Z.call(e,t,i)},P.prototype.toString=Z;try{if(Object.defineProperty){Object.defineProperty(k.prototype,"length",{get:function(){return C(this),this.$$length}}),Object.defineProperty(P.prototype,"textContent",{get:function(){return function e(t){switch(t.nodeType){case a:case m:var i=[];for(t=t.firstChild;t;)7!==t.nodeType&&8!==t.nodeType&&i.push(e(t)),t=t.nextSibling;return i.join("");default:return t.nodeValue}}(this)},set:function(e){switch(this.nodeType){case a:case m:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),te=function(e,t,i){e["$$"+t]=i}}}catch(e){}t.DOMImplementation=I,t.XMLSerializer=J},"546a":function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},"587e":function(e,t,i){var n=i("4538");"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);(0,i("85cb").default)("6e094267",n,!0,{sourceMap:!1,shadowMode:!1})},"59f2":function(e,t,i){"use strict";var n,r,a,s,o,l,u=i("967c").toUnsigned,c=i("967c").toHexString,d=i("a79b"),h=i("89c9"),p=i("e3b7"),f=i("9a39"),m=i("de0d");n=function(e){return d(e,["moov","trak"]).reduce((function(e,t){var i,n,r,a,s;return(i=d(t,["tkhd"])[0])?(n=i[0],a=u(i[r=0===n?12:20]<<24|i[r+1]<<16|i[r+2]<<8|i[r+3]),(s=d(t,["mdia","mdhd"])[0])?(r=0===(n=s[0])?12:20,e[a]=u(s[r]<<24|s[r+1]<<16|s[r+2]<<8|s[r+3]),e):null):null}),{})},r=function(e,t){var i,n,r;return i=d(t,["moof","traf"]),n=[].concat.apply([],i.map((function(t){return d(t,["tfhd"]).map((function(i){var n,r;return n=u(i[4]<<24|i[5]<<16|i[6]<<8|i[7]),r=e[n]||9e4,(d(t,["tfdt"]).map((function(e){var t,i;return t=e[0],i=u(e[4]<<24|e[5]<<16|e[6]<<8|e[7]),1===t&&(i*=Math.pow(2,32),i+=u(e[8]<<24|e[9]<<16|e[10]<<8|e[11])),i}))[0]||1/0)/r}))}))),r=Math.min.apply(null,n),isFinite(r)?r:0},a=function(e,t){var i,n=d(t,["moof","traf"]),r=0,a=0;if(n&&n.length){var s=d(n[0],["tfhd"])[0],o=d(n[0],["trun"])[0],l=d(n[0],["tfdt"])[0];if(s)i=p(s).trackId;if(l)r=m(l).baseMediaDecodeTime;if(o){var u=f(o);u.samples&&u.samples.length&&(a=u.samples[0].compositionTimeOffset||0)}}return(r+a)/(e[i]||9e4)},s=function(e){var t=d(e,["moov","trak"]),i=[];return t.forEach((function(e){var t=d(e,["mdia","hdlr"]),n=d(e,["tkhd"]);t.forEach((function(e,t){var r,a,s=h(e.subarray(8,12)),o=n[t];"vide"===s&&(a=0===(r=new DataView(o.buffer,o.byteOffset,o.byteLength)).getUint8(0)?r.getUint32(12):r.getUint32(20),i.push(a))}))})),i},l=function(e){var t=0===e[0]?12:20;return u(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])},o=function(e){var t=d(e,["moov","trak"]),i=[];return t.forEach((function(e){var t,n,r={},a=d(e,["tkhd"])[0];a&&(n=(t=new DataView(a.buffer,a.byteOffset,a.byteLength)).getUint8(0),r.id=0===n?t.getUint32(12):t.getUint32(20));var s=d(e,["mdia","hdlr"])[0];if(s){var o=h(s.subarray(8,12));r.type="vide"===o?"video":"soun"===o?"audio":o}var u=d(e,["mdia","minf","stbl","stsd"])[0];if(u){var p=u.subarray(8);r.codec=h(p.subarray(4,8));var f,m=d(p,[r.codec])[0];m&&(/^[a-z]vc[1-9]$/i.test(r.codec)?(f=m.subarray(78),"avcC"===h(f.subarray(4,8))&&f.length>11?(r.codec+=".",r.codec+=c(f[9]),r.codec+=c(f[10]),r.codec+=c(f[11])):r.codec="avc1.4d400d"):/^mp4[a,v]$/i.test(r.codec)&&(f=m.subarray(28),"esds"===h(f.subarray(4,8))&&f.length>20&&0!==f[19]?(r.codec+="."+c(f[19]),r.codec+="."+c(f[20]>>>2&63).replace(/^0/,"")):r.codec="mp4a.40.2"))}var g=d(e,["mdia","mdhd"])[0];g&&(r.timescale=l(g)),i.push(r)})),i},e.exports={findBox:d,parseType:h,timescale:n,startTime:r,compositionStartTime:a,videoTrackIds:s,tracks:o,getTimescaleFromMediaHeader:l}},"629a":function(e,t){var i,n,r,a,s,o,l;i=function(e){return 9e4*e},n=function(e,t){return e*t},r=function(e){return e/9e4},a=function(e,t){return e/t},s=function(e,t){return i(a(e,t))},o=function(e,t){return n(r(e),t)},l=function(e,t,i){return r(i?e:e-t)},e.exports={ONE_SECOND_IN_TS:9e4,secondsToVideoTs:i,secondsToAudioTs:n,videoTsToSeconds:r,audioTsToSeconds:a,audioTsToVideoTs:s,videoTsToAudioTs:o,metadataTsToSeconds:l}},"6a9f":function(e,t,i){(function(t){var i;i="undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{},e.exports=i}).call(this,i("0288"))},"6f2e":function(e,t){function i(t){return e.exports=i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},i(t)}e.exports=i},"7c30":function(e,t){e.exports=function(e){return{isLeading:(12&e[0])>>>2,dependsOn:3&e[0],isDependedOn:(192&e[1])>>>6,hasRedundancy:(48&e[1])>>>4,paddingValue:(14&e[1])>>>1,isNonSyncSample:1&e[1],degradationPriority:e[2]<<8|e[3]}}},"84f6":function(e,t,i){"use strict";
/*! @name @videojs/vhs-utils @version 2.2.1 @license MIT */function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n(i("6a9f")),a={mp4:/^(av0?1|avc0?[1234]|vp0?9|flac|opus|mp3|mp4a|mp4v)/,webm:/^(vp0?[89]|av0?1|opus|vorbis)/,ogg:/^(vp0?[89]|theora|flac|opus|vorbis)/,video:/^(av0?1|avc0?[1234]|vp0?[89]|hvc1|hev1|theora|mp4v)/,audio:/^(mp4a|flac|vorbis|opus|ac-[34]|ec-3|alac|mp3)/,muxerVideo:/^(avc0?1)/,muxerAudio:/^(mp4a)/},s=function(e){return e?e.replace(/avc1\.(\d+)\.(\d+)/i,(function(e,t,i){return"avc1."+("00"+Number(t).toString(16)).slice(-2)+"00"+("00"+Number(i).toString(16)).slice(-2)})):e},o=function(e){return e.map(s)},l=function(e){void 0===e&&(e="");var t=e.split(","),i={};return t.forEach((function(e){e=e.trim(),["video","audio"].forEach((function(t){var n=a[t].exec(e.toLowerCase());if(n&&!(n.length<=1)){var r=e.substring(0,n[1].length),s=e.replace(r,"");i[t]={type:r,details:s}}}))})),i},u=function(e){return void 0===e&&(e=""),a.audio.test(e.trim().toLowerCase())},c=function(e){if(e&&"string"==typeof e){var t=e.toLowerCase().split(",").map((function(e){return s(e.trim())})),i="video";1===t.length&&u(t[0])&&(i="audio");var n="mp4";return t.every((function(e){return a.mp4.test(e)}))?n="mp4":t.every((function(e){return a.webm.test(e)}))?n="webm":t.every((function(e){return a.ogg.test(e)}))&&(n="ogg"),i+"/"+n+';codecs="'+e+'"'}};t.DEFAULT_AUDIO_CODEC="mp4a.40.2",t.DEFAULT_VIDEO_CODEC="avc1.4d400d",t.browserSupportsCodec=function(e){return void 0===e&&(e=""),r.default.MediaSource&&r.default.MediaSource.isTypeSupported&&r.default.MediaSource.isTypeSupported(c(e))||!1},t.codecsFromDefault=function(e,t){if(!e.mediaGroups.AUDIO||!t)return null;var i=e.mediaGroups.AUDIO[t];if(!i)return null;for(var n in i){var r=i[n];if(r.default&&r.playlists)return l(r.playlists[0].attributes.CODECS)}return null},t.getMimeForCodec=c,t.isAudioCodec=u,t.isVideoCodec=function(e){return void 0===e&&(e=""),a.video.test(e.trim().toLowerCase())},t.mapLegacyAvcCodecs=function(e){return e.replace(/avc1\.(\d+)\.(\d+)/i,(function(e){return o([e])[0]}))},t.muxerSupportsCodec=function(e){return void 0===e&&(e=""),e.toLowerCase().split(",").every((function(e){return e=e.trim(),a.muxerVideo.test(e)||a.muxerAudio.test(e)}))},t.parseCodecs=l,t.translateLegacyCodec=s,t.translateLegacyCodecs=o},"89c9":function(e,t){e.exports=function(e){var t="";return t+=String.fromCharCode(e[0]),t+=String.fromCharCode(e[1]),t+=String.fromCharCode(e[2]),t+=String.fromCharCode(e[3])}},"8a44":function(e,t,i){"use strict";(function(t){function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var r=n(i("6a9f"));e.exports=function(e){for(var i,n=(i=e,r.default.atob?r.default.atob(i):t.from(i,"base64").toString("binary")),a=new Uint8Array(n.length),s=0;s<n.length;s++)a[s]=n.charCodeAt(s);return a}}).call(this,i("fd40").Buffer)},"8c04":function(e,t,i){var n=i("6a9f"),r=e.exports={WebVTT:i("ad15"),VTTCue:i("cde2"),VTTRegion:i("b731")};n.vttjs=r,n.WebVTT=r.WebVTT;var a=r.VTTCue,s=r.VTTRegion,o=n.VTTCue,l=n.VTTRegion;r.shim=function(){n.VTTCue=a,n.VTTRegion=s},r.restore=function(){n.VTTCue=o,n.VTTRegion=l},n.VTTCue||r.shim()},"967c":function(e,t){e.exports={toUnsigned:function(e){return e>>>0},toHexString:function(e){return("00"+e.toString(16)).slice(-2)}}},"9a39":function(e,t,i){var n=i("7c30");e.exports=function(e){var t,i={version:e[0],flags:new Uint8Array(e.subarray(1,4)),samples:[]},r=new DataView(e.buffer,e.byteOffset,e.byteLength),a=1&i.flags[2],s=4&i.flags[2],o=1&i.flags[1],l=2&i.flags[1],u=4&i.flags[1],c=8&i.flags[1],d=r.getUint32(4),h=8;for(a&&(i.dataOffset=r.getInt32(h),h+=4),s&&d&&(t={flags:n(e.subarray(h,h+4))},h+=4,o&&(t.duration=r.getUint32(h),h+=4),l&&(t.size=r.getUint32(h),h+=4),c&&(1===i.version?t.compositionTimeOffset=r.getInt32(h):t.compositionTimeOffset=r.getUint32(h),h+=4),i.samples.push(t),d--);d--;)t={},o&&(t.duration=r.getUint32(h),h+=4),l&&(t.size=r.getUint32(h),h+=4),u&&(t.flags=n(e.subarray(h,h+4)),h+=4),c&&(1===i.version?t.compositionTimeOffset=r.getInt32(h):t.compositionTimeOffset=r.getUint32(h),h+=4),i.samples.push(t);return i}},a56a:function(e,t,i){function n(e){this.options=e||{locator:{}}}function r(){this.cdata=!1}function a(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}function s(e){if(e)return"\n@"+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function o(e,t,i){return"string"==typeof e?e.substr(t,i):e.length>=t+i||t?new java.lang.String(e,t,i)+"":e}function l(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}n.prototype.parseFromString=function(e,t){var i=this.options,n=new u,a=i.domBuilder||new r,o=i.errorHandler,l=i.locator,c=i.xmlns||{},d={lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return l&&a.setDocumentLocator(l),n.errorHandler=function(e,t,i){if(!e){if(t instanceof r)return t;e=t}var n={},a=e instanceof Function;function o(t){var r=e[t];!r&&a&&(r=2==e.length?function(i){e(t,i)}:e),n[t]=r&&function(e){r("[xmldom "+t+"]\t"+e+s(i))}||function(){}}return i=i||{},o("warning"),o("error"),o("fatalError"),n}(o,a,l),n.domBuilder=i.domBuilder||a,/\/x?html?$/.test(t)&&(d.nbsp=" ",d.copy="©",c[""]="http://www.w3.org/1999/xhtml"),c.xml=c.xml||"http://www.w3.org/XML/1998/namespace",e?n.parse(e,c,d):n.errorHandler.error("invalid doc source"),a.doc},r.prototype={startDocument:function(){this.doc=(new c).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,i,n){var r=this.doc,s=r.createElementNS(e,i||t),o=n.length;l(this,s),this.currentElement=s,this.locator&&a(this.locator,s);for(var u=0;u<o;u++){e=n.getURI(u);var c=n.getValue(u),d=(i=n.getQName(u),r.createAttributeNS(e,i));this.locator&&a(n.getLocator(u),d),d.value=d.nodeValue=c,s.setAttributeNode(d)}},endElement:function(e,t,i){var n=this.currentElement;n.tagName;this.currentElement=n.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var i=this.doc.createProcessingInstruction(e,t);this.locator&&a(this.locator,i),l(this,i)},ignorableWhitespace:function(e,t,i){},characters:function(e,t,i){if(e=o.apply(this,arguments)){if(this.cdata)var n=this.doc.createCDATASection(e);else n=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(n):/^\s*$/.test(e)&&this.doc.appendChild(n),this.locator&&a(this.locator,n)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,i){e=o.apply(this,arguments);var n=this.doc.createComment(e);this.locator&&a(this.locator,n),l(this,n)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,i){var n=this.doc.implementation;if(n&&n.createDocumentType){var r=n.createDocumentType(e,t,i);this.locator&&a(this.locator,r),l(this,r)}},warning:function(e){console.warn("[xmldom warning]\t"+e,s(this.locator))},error:function(e){console.error("[xmldom error]\t"+e,s(this.locator))},fatalError:function(e){throw console.error("[xmldom fatalError]\t"+e,s(this.locator)),e}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,(function(e){r.prototype[e]=function(){return null}}));var u=i("ca13").XMLReader,c=t.DOMImplementation=i("4e43").DOMImplementation;t.XMLSerializer=i("4e43").XMLSerializer,t.DOMParser=n},a79b:function(e,t,i){var n=i("967c").toUnsigned,r=i("89c9"),a=function(e,t){var i,s,o,l,u,c=[];if(!t.length)return null;for(i=0;i<e.byteLength;)s=n(e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3]),o=r(e.subarray(i+4,i+8)),l=s>1?i+s:e.byteLength,o===t[0]&&(1===t.length?c.push(e.subarray(i+8,l)):(u=a(e.subarray(i+8,l),t.slice(1))).length&&(c=c.concat(u))),i=l;return c};e.exports=a},ad15:function(e,t,i){var n=i("d6f6"),r=Object.create||function(){function e(){}return function(t){if(1!==arguments.length)throw new Error("Object.create shim only accepts one parameter.");return e.prototype=t,new e}}();function a(e,t){this.name="ParsingError",this.code=e.code,this.message=t||e.message}function s(e){function t(e,t,i,n){return 3600*(0|e)+60*(0|t)+(0|i)+(0|n)/1e3}var i=e.match(/^(\d+):(\d{1,2})(:\d{1,2})?\.(\d{3})/);return i?i[3]?t(i[1],i[2],i[3].replace(":",""),i[4]):i[1]>59?t(i[1],i[2],0,i[4]):t(0,i[1],i[2],i[4]):null}function o(){this.values=r(null)}function l(e,t,i,n){var r=n?e.split(n):[e];for(var a in r)if("string"==typeof r[a]){var s=r[a].split(i);if(2===s.length)t(s[0],s[1])}}function u(e,t,i){var n=e;function r(){var t=s(e);if(null===t)throw new a(a.Errors.BadTimeStamp,"Malformed timestamp: "+n);return e=e.replace(/^[^\sa-zA-Z-]+/,""),t}function u(){e=e.replace(/^\s+/,"")}if(u(),t.startTime=r(),u(),"--\x3e"!==e.substr(0,3))throw new a(a.Errors.BadTimeStamp,"Malformed time stamp (time stamps must be separated by '--\x3e'): "+n);e=e.substr(3),u(),t.endTime=r(),u(),function(e,t){var n=new o;l(e,(function(e,t){switch(e){case"region":for(var r=i.length-1;r>=0;r--)if(i[r].id===t){n.set(e,i[r].region);break}break;case"vertical":n.alt(e,t,["rl","lr"]);break;case"line":var a=t.split(","),s=a[0];n.integer(e,s),n.percent(e,s)&&n.set("snapToLines",!1),n.alt(e,s,["auto"]),2===a.length&&n.alt("lineAlign",a[1],["start","center","end"]);break;case"position":a=t.split(","),n.percent(e,a[0]),2===a.length&&n.alt("positionAlign",a[1],["start","center","end"]);break;case"size":n.percent(e,t);break;case"align":n.alt(e,t,["start","center","end","left","right"])}}),/:/,/\s/),t.region=n.get("region",null),t.vertical=n.get("vertical","");try{t.line=n.get("line","auto")}catch(e){}t.lineAlign=n.get("lineAlign","start"),t.snapToLines=n.get("snapToLines",!0),t.size=n.get("size",100);try{t.align=n.get("align","center")}catch(e){t.align=n.get("align","middle")}try{t.position=n.get("position","auto")}catch(e){t.position=n.get("position",{start:0,left:0,center:50,middle:50,end:100,right:100},t.align)}t.positionAlign=n.get("positionAlign",{start:"start",left:"start",center:"center",middle:"center",end:"end",right:"end"},t.align)}(e,t)}a.prototype=r(Error.prototype),a.prototype.constructor=a,a.Errors={BadSignature:{code:0,message:"Malformed WebVTT signature."},BadTimeStamp:{code:1,message:"Malformed time stamp."}},o.prototype={set:function(e,t){this.get(e)||""===t||(this.values[e]=t)},get:function(e,t,i){return i?this.has(e)?this.values[e]:t[i]:this.has(e)?this.values[e]:t},has:function(e){return e in this.values},alt:function(e,t,i){for(var n=0;n<i.length;++n)if(t===i[n]){this.set(e,t);break}},integer:function(e,t){/^-?\d+$/.test(t)&&this.set(e,parseInt(t,10))},percent:function(e,t){return!!(t.match(/^([\d]{1,3})(\.[\d]*)?%$/)&&(t=parseFloat(t))>=0&&t<=100)&&(this.set(e,t),!0)}};var c=n.createElement("textarea"),d={c:"span",i:"i",b:"b",u:"u",ruby:"ruby",rt:"rt",v:"span",lang:"span"},h={white:"rgba(255,255,255,1)",lime:"rgba(0,255,0,1)",cyan:"rgba(0,255,255,1)",red:"rgba(255,0,0,1)",yellow:"rgba(255,255,0,1)",magenta:"rgba(255,0,255,1)",blue:"rgba(0,0,255,1)",black:"rgba(0,0,0,1)"},p={v:"title",lang:"lang"},f={rt:"ruby"};function m(e,t){function i(){if(!t)return null;var e,i=t.match(/^([^<]*)(<[^>]*>?)?/);return e=i[1]?i[1]:i[2],t=t.substr(e.length),e}function n(e,t){return!f[t.localName]||f[t.localName]===e.localName}function r(t,i){var n=d[t];if(!n)return null;var r=e.document.createElement(n),a=p[t];return a&&i&&(r[a]=i.trim()),r}for(var a,o,l=e.document.createElement("div"),u=l,m=[];null!==(a=i());)if("<"!==a[0])u.appendChild(e.document.createTextNode((o=a,c.innerHTML=o,o=c.textContent,c.textContent="",o)));else{if("/"===a[1]){m.length&&m[m.length-1]===a.substr(2).replace(">","")&&(m.pop(),u=u.parentNode);continue}var g,v=s(a.substr(1,a.length-2));if(v){g=e.document.createProcessingInstruction("timestamp",v),u.appendChild(g);continue}var y=a.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);if(!y)continue;if(!(g=r(y[1],y[3])))continue;if(!n(u,g))continue;if(y[2]){var _=y[2].split(".");_.forEach((function(e){var t=/^bg_/.test(e),i=t?e.slice(3):e;if(h.hasOwnProperty(i)){var n=t?"background-color":"color",r=h[i];g.style[n]=r}})),g.className=_.join(" ")}m.push(y[1]),u.appendChild(g),u=g}return l}var g=[[1470,1470],[1472,1472],[1475,1475],[1478,1478],[1488,1514],[1520,1524],[1544,1544],[1547,1547],[1549,1549],[1563,1563],[1566,1610],[1645,1647],[1649,1749],[1765,1766],[1774,1775],[1786,1805],[1807,1808],[1810,1839],[1869,1957],[1969,1969],[1984,2026],[2036,2037],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2096,2110],[2112,2136],[2142,2142],[2208,2208],[2210,2220],[8207,8207],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64449],[64467,64829],[64848,64911],[64914,64967],[65008,65020],[65136,65140],[65142,65276],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67671,67679],[67840,67867],[67872,67897],[67903,67903],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68147],[68160,68167],[68176,68184],[68192,68223],[68352,68405],[68416,68437],[68440,68466],[68472,68479],[68608,68680],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[1114109,1114109]];function v(e){for(var t=0;t<g.length;t++){var i=g[t];if(e>=i[0]&&e<=i[1])return!0}return!1}function y(e){var t=[],i="";if(!e||!e.childNodes)return"ltr";function n(e,t){for(var i=t.childNodes.length-1;i>=0;i--)e.push(t.childNodes[i])}function r(e){if(!e||!e.length)return null;var t=e.pop(),i=t.textContent||t.innerText;if(i){var a=i.match(/^.*(\n|\r)/);return a?(e.length=0,a[0]):i}return"ruby"===t.tagName?r(e):t.childNodes?(n(e,t),r(e)):void 0}for(n(t,e);i=r(t);)for(var a=0;a<i.length;a++)if(v(i.charCodeAt(a)))return"rtl";return"ltr"}function _(){}function b(e,t,i){_.call(this),this.cue=t,this.cueDiv=m(e,t.text);var n={color:"rgba(255, 255, 255, 1)",backgroundColor:"rgba(0, 0, 0, 0.8)",position:"relative",left:0,right:0,top:0,bottom:0,display:"inline",writingMode:""===t.vertical?"horizontal-tb":"lr"===t.vertical?"vertical-lr":"vertical-rl",unicodeBidi:"plaintext"};this.applyStyles(n,this.cueDiv),this.div=e.document.createElement("div"),n={direction:y(this.cueDiv),writingMode:""===t.vertical?"horizontal-tb":"lr"===t.vertical?"vertical-lr":"vertical-rl",unicodeBidi:"plaintext",textAlign:"middle"===t.align?"center":t.align,font:i.font,whiteSpace:"pre-line",position:"absolute"},this.applyStyles(n),this.div.appendChild(this.cueDiv);var r=0;switch(t.positionAlign){case"start":r=t.position;break;case"center":r=t.position-t.size/2;break;case"end":r=t.position-t.size}""===t.vertical?this.applyStyles({left:this.formatStyle(r,"%"),width:this.formatStyle(t.size,"%")}):this.applyStyles({top:this.formatStyle(r,"%"),height:this.formatStyle(t.size,"%")}),this.move=function(e){this.applyStyles({top:this.formatStyle(e.top,"px"),bottom:this.formatStyle(e.bottom,"px"),left:this.formatStyle(e.left,"px"),right:this.formatStyle(e.right,"px"),height:this.formatStyle(e.height,"px"),width:this.formatStyle(e.width,"px")})}}function T(e){var t,i,n,r;if(e.div){i=e.div.offsetHeight,n=e.div.offsetWidth,r=e.div.offsetTop;var a=(a=e.div.childNodes)&&(a=a[0])&&a.getClientRects&&a.getClientRects();e=e.div.getBoundingClientRect(),t=a?Math.max(a[0]&&a[0].height||0,e.height/a.length):0}this.left=e.left,this.right=e.right,this.top=e.top||r,this.height=e.height||i,this.bottom=e.bottom||r+(e.height||i),this.width=e.width||n,this.lineHeight=void 0!==t?t:e.lineHeight}function S(e,t,i,n){var r=new T(t),a=t.cue,s=function(e){if("number"==typeof e.line&&(e.snapToLines||e.line>=0&&e.line<=100))return e.line;if(!e.track||!e.track.textTrackList||!e.track.textTrackList.mediaElement)return-1;for(var t=e.track,i=t.textTrackList,n=0,r=0;r<i.length&&i[r]!==t;r++)"showing"===i[r].mode&&n++;return-1*++n}(a),o=[];if(a.snapToLines){var l;switch(a.vertical){case"":o=["+y","-y"],l="height";break;case"rl":o=["+x","-x"],l="width";break;case"lr":o=["-x","+x"],l="width"}var u=r.lineHeight,c=u*Math.round(s),d=i[l]+u,h=o[0];Math.abs(c)>d&&(c=c<0?-1:1,c*=Math.ceil(d/u)*u),s<0&&(c+=""===a.vertical?i.height:i.width,o=o.reverse()),r.move(h,c)}else{var p=r.lineHeight/i.height*100;switch(a.lineAlign){case"center":s-=p/2;break;case"end":s-=p}switch(a.vertical){case"":t.applyStyles({top:t.formatStyle(s,"%")});break;case"rl":t.applyStyles({left:t.formatStyle(s,"%")});break;case"lr":t.applyStyles({right:t.formatStyle(s,"%")})}o=["+y","-x","+x","-y"],r=new T(t)}var f=function(e,t){for(var r,a=new T(e),s=1,o=0;o<t.length;o++){for(;e.overlapsOppositeAxis(i,t[o])||e.within(i)&&e.overlapsAny(n);)e.move(t[o]);if(e.within(i))return e;var l=e.intersectPercentage(i);s>l&&(r=new T(e),s=l),e=new T(a)}return r||a}(r,o);t.move(f.toCSSCompatValues(i))}function j(){}_.prototype.applyStyles=function(e,t){for(var i in t=t||this.div,e)e.hasOwnProperty(i)&&(t.style[i]=e[i])},_.prototype.formatStyle=function(e,t){return 0===e?0:e+t},b.prototype=r(_.prototype),b.prototype.constructor=b,T.prototype.move=function(e,t){switch(t=void 0!==t?t:this.lineHeight,e){case"+x":this.left+=t,this.right+=t;break;case"-x":this.left-=t,this.right-=t;break;case"+y":this.top+=t,this.bottom+=t;break;case"-y":this.top-=t,this.bottom-=t}},T.prototype.overlaps=function(e){return this.left<e.right&&this.right>e.left&&this.top<e.bottom&&this.bottom>e.top},T.prototype.overlapsAny=function(e){for(var t=0;t<e.length;t++)if(this.overlaps(e[t]))return!0;return!1},T.prototype.within=function(e){return this.top>=e.top&&this.bottom<=e.bottom&&this.left>=e.left&&this.right<=e.right},T.prototype.overlapsOppositeAxis=function(e,t){switch(t){case"+x":return this.left<e.left;case"-x":return this.right>e.right;case"+y":return this.top<e.top;case"-y":return this.bottom>e.bottom}},T.prototype.intersectPercentage=function(e){return Math.max(0,Math.min(this.right,e.right)-Math.max(this.left,e.left))*Math.max(0,Math.min(this.bottom,e.bottom)-Math.max(this.top,e.top))/(this.height*this.width)},T.prototype.toCSSCompatValues=function(e){return{top:this.top-e.top,bottom:e.bottom-this.bottom,left:this.left-e.left,right:e.right-this.right,height:this.height,width:this.width}},T.getSimpleBoxPosition=function(e){var t=e.div?e.div.offsetHeight:e.tagName?e.offsetHeight:0,i=e.div?e.div.offsetWidth:e.tagName?e.offsetWidth:0,n=e.div?e.div.offsetTop:e.tagName?e.offsetTop:0;return{left:(e=e.div?e.div.getBoundingClientRect():e.tagName?e.getBoundingClientRect():e).left,right:e.right,top:e.top||n,height:e.height||t,bottom:e.bottom||n+(e.height||t),width:e.width||i}},j.StringDecoder=function(){return{decode:function(e){if(!e)return"";if("string"!=typeof e)throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(e))}}},j.convertCueToDOMTree=function(e,t){return e&&t?m(e,t):null};j.processCues=function(e,t,i){if(!e||!t||!i)return null;for(;i.firstChild;)i.removeChild(i.firstChild);var n=e.document.createElement("div");if(n.style.position="absolute",n.style.left="0",n.style.right="0",n.style.top="0",n.style.bottom="0",n.style.margin="1.5%",i.appendChild(n),function(e){for(var t=0;t<e.length;t++)if(e[t].hasBeenReset||!e[t].displayState)return!0;return!1}(t)){var r=[],a=T.getSimpleBoxPosition(n),s={font:Math.round(.05*a.height*100)/100+"px sans-serif"};!function(){for(var i,o,l=0;l<t.length;l++)o=t[l],i=new b(e,o,s),n.appendChild(i.div),S(0,i,a,r),o.displayState=i.div,r.push(T.getSimpleBoxPosition(i))}()}else for(var o=0;o<t.length;o++)n.appendChild(t[o].displayState)},j.Parser=function(e,t,i){i||(i=t,t={}),t||(t={}),this.window=e,this.vttjs=t,this.state="INITIAL",this.buffer="",this.decoder=i||new TextDecoder("utf8"),this.regionList=[]},j.Parser.prototype={reportOrThrowError:function(e){if(!(e instanceof a))throw e;this.onparsingerror&&this.onparsingerror(e)},parse:function(e){var t=this;function i(){for(var e=t.buffer,i=0;i<e.length&&"\r"!==e[i]&&"\n"!==e[i];)++i;var n=e.substr(0,i);return"\r"===e[i]&&++i,"\n"===e[i]&&++i,t.buffer=e.substr(i),n}function n(e){e.match(/X-TIMESTAMP-MAP/)?l(e,(function(e,i){switch(e){case"X-TIMESTAMP-MAP":!function(e){var i=new o;l(e,(function(e,t){switch(e){case"MPEGT":i.integer(e+"S",t);break;case"LOCA":i.set(e+"L",s(t))}}),/[^\d]:/,/,/),t.ontimestampmap&&t.ontimestampmap({MPEGTS:i.get("MPEGTS"),LOCAL:i.get("LOCAL")})}(i)}}),/=/):l(e,(function(e,i){switch(e){case"Region":!function(e){var i=new o;if(l(e,(function(e,t){switch(e){case"id":i.set(e,t);break;case"width":i.percent(e,t);break;case"lines":i.integer(e,t);break;case"regionanchor":case"viewportanchor":var n=t.split(",");if(2!==n.length)break;var r=new o;if(r.percent("x",n[0]),r.percent("y",n[1]),!r.has("x")||!r.has("y"))break;i.set(e+"X",r.get("x")),i.set(e+"Y",r.get("y"));break;case"scroll":i.alt(e,t,["up"])}}),/=/,/\s/),i.has("id")){var n=new(t.vttjs.VTTRegion||t.window.VTTRegion);n.width=i.get("width",100),n.lines=i.get("lines",3),n.regionAnchorX=i.get("regionanchorX",0),n.regionAnchorY=i.get("regionanchorY",100),n.viewportAnchorX=i.get("viewportanchorX",0),n.viewportAnchorY=i.get("viewportanchorY",100),n.scroll=i.get("scroll",""),t.onregion&&t.onregion(n),t.regionList.push({id:i.get("id"),region:n})}}(i)}}),/:/)}e&&(t.buffer+=t.decoder.decode(e,{stream:!0}));try{var r;if("INITIAL"===t.state){if(!/\r\n|\n/.test(t.buffer))return this;var c=(r=i()).match(/^WEBVTT([ \t].*)?$/);if(!c||!c[0])throw new a(a.Errors.BadSignature);t.state="HEADER"}for(var d=!1;t.buffer;){if(!/\r\n|\n/.test(t.buffer))return this;switch(d?d=!1:r=i(),t.state){case"HEADER":/:/.test(r)?n(r):r||(t.state="ID");continue;case"NOTE":r||(t.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(r)){t.state="NOTE";break}if(!r)continue;t.cue=new(t.vttjs.VTTCue||t.window.VTTCue)(0,0,"");try{t.cue.align="center"}catch(e){t.cue.align="middle"}if(t.state="CUE",-1===r.indexOf("--\x3e")){t.cue.id=r;continue}case"CUE":try{u(r,t.cue,t.regionList)}catch(e){t.reportOrThrowError(e),t.cue=null,t.state="BADCUE";continue}t.state="CUETEXT";continue;case"CUETEXT":var h=-1!==r.indexOf("--\x3e");if(!r||h&&(d=!0)){t.oncue&&t.oncue(t.cue),t.cue=null,t.state="ID";continue}t.cue.text&&(t.cue.text+="\n"),t.cue.text+=r.replace(/\u2028/g,"\n").replace(/u2029/g,"\n");continue;case"BADCUE":r||(t.state="ID");continue}}}catch(e){t.reportOrThrowError(e),"CUETEXT"===t.state&&t.cue&&t.oncue&&t.oncue(t.cue),t.cue=null,t.state="INITIAL"===t.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){try{if(this.buffer+=this.decoder.decode(),(this.cue||"HEADER"===this.state)&&(this.buffer+="\n\n",this.parse()),"INITIAL"===this.state)throw new a(a.Errors.BadSignature)}catch(e){this.reportOrThrowError(e)}return this.onflush&&this.onflush(),this}},e.exports=j},ae81:function(e,t,i){"use strict";
/*! @name @videojs/vhs-utils @version 2.2.1 @license MIT */Object.defineProperty(t,"__esModule",{value:!0});var n=/^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i,r=/^application\/dash\+xml/i;t.simpleTypeFromSourceType=function(e){return n.test(e)?"hls":r.test(e)?"dash":"application/vnd.videojs.vhs+json"===e?"vhs-json":null}},b731:function(e,t){var i={"":!0,up:!0};function n(e){return"number"==typeof e&&e>=0&&e<=100}e.exports=function(){var e=100,t=3,r=0,a=100,s=0,o=100,l="";Object.defineProperties(this,{width:{enumerable:!0,get:function(){return e},set:function(t){if(!n(t))throw new Error("Width must be between 0 and 100.");e=t}},lines:{enumerable:!0,get:function(){return t},set:function(e){if("number"!=typeof e)throw new TypeError("Lines must be set to a number.");t=e}},regionAnchorY:{enumerable:!0,get:function(){return a},set:function(e){if(!n(e))throw new Error("RegionAnchorX must be between 0 and 100.");a=e}},regionAnchorX:{enumerable:!0,get:function(){return r},set:function(e){if(!n(e))throw new Error("RegionAnchorY must be between 0 and 100.");r=e}},viewportAnchorY:{enumerable:!0,get:function(){return o},set:function(e){if(!n(e))throw new Error("ViewportAnchorY must be between 0 and 100.");o=e}},viewportAnchorX:{enumerable:!0,get:function(){return s},set:function(e){if(!n(e))throw new Error("ViewportAnchorX must be between 0 and 100.");s=e}},scroll:{enumerable:!0,get:function(){return l},set:function(e){var t=function(e){return"string"==typeof e&&(!!i[e.toLowerCase()]&&e.toLowerCase())}(e);!1===t?console.warn("Scroll: an invalid or illegal string was specified."):l=t}}})}},ba3b:function(e,t,i){"use strict";
/*! @name @videojs/vhs-utils @version 2.2.1 @license MIT */Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){return e instanceof Uint8Array?e:new Uint8Array(e&&e.buffer||e,e&&e.byteOffset||0,e&&e.byteLength||0)},r=function(e){if(!e)return"";e=Array.prototype.slice.call(e);var t=String.fromCharCode.apply(null,n(e));try{return decodeURIComponent(escape(t))}catch(e){}return t},a=function(e,t){void 0===t&&(t=0);var i=(e=n(e))[t+6]<<21|e[t+7]<<14|e[t+8]<<7|e[t+9];return(16&e[t+5])>>4?i+20:i+10},s=function e(t,i){return void 0===i&&(i=0),(t=n(t)).length-i<10||"ID3"!==r(t.subarray(i,i+3))?i:e(t,i+=a(t,i))},o={aac:function(e){var t=s(e);return e.length>=t+2&&255==(255&e[t])&&224==(224&e[t+1])&&16==(22&e[t+1])},mp3:function(e){var t=s(e);return e.length>=t+2&&255==(255&e[t])&&224==(224&e[t+1])&&2==(6&e[t+1])},webm:function(e){return e.length>=4&&26==(255&e[0])&&69==(255&e[1])&&223==(255&e[2])&&163==(255&e[3])},mp4:function(e){return e.length>=8&&/^(f|s)typ$/.test(r(e.subarray(4,8)))&&!/^ftyp3g$/.test(r(e.subarray(4,10)))},"3gp":function(e){return e.length>=10&&/^ftyp3g$/.test(r(e.subarray(4,10)))},ts:function(e){if(e.length<189&&e.length>=1)return 71===e[0];for(var t=0;t+188<e.length&&t<188;){if(71===e[t]&&71===e[t+188])return!0;t+=1}return!1},flac:function(e){return e.length>=4&&/^fLaC$/.test(r(e.subarray(0,4)))},ogg:function(e){return e.length>=4&&/^OggS$/.test(r(e.subarray(0,4)))}},l=Object.keys(o).filter((function(e){return"ts"!==e})).concat("ts");l.forEach((function(e){var t=o[e];o[e]=function(e){return t(n(e))}}));t.detectContainerForBytes=function(e){e=n(e);for(var t=0;t<l.length;t++){var i=l[t];if(o[i](e))return i}return""},t.getId3Offset=s,t.id3Size=a,t.isLikely=o,t.isLikelyFmp4MediaSegment=function(e){e=n(e);for(var t=0;t<e.length;){var i=(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0;if("moof"===r(e.subarray(t+4,t+8)))return!0;0===i||i+t>e.length?t=e.length:t+=i}return!1}},bcc5:function(e,t,i){var n=i("e0d3");e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}},c862:function(e,t,i){"use strict";var n=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350],r=function(e,t){var i=e[t+6]<<21|e[t+7]<<14|e[t+8]<<7|e[t+9];return i=i>=0?i:0,(16&e[t+5])>>4?i+20:i+10},a=function(e,t){return e.length-t<10||e[t]!=="I".charCodeAt(0)||e[t+1]!=="D".charCodeAt(0)||e[t+2]!=="3".charCodeAt(0)?t:(t+=r(e,t),a(e,t))},s=function(e){return e[0]<<21|e[1]<<14|e[2]<<7|e[3]};e.exports={isLikelyAacData:function(e){var t=a(e,0);return e.length>=t+2&&255==(255&e[t])&&240==(240&e[t+1])&&16==(22&e[t+1])},parseId3TagSize:r,parseAdtsSize:function(e,t){var i=(224&e[t+5])>>5,n=e[t+4]<<3;return 6144&e[t+3]|n|i},parseType:function(e,t){return e[t]==="I".charCodeAt(0)&&e[t+1]==="D".charCodeAt(0)&&e[t+2]==="3".charCodeAt(0)?"timed-metadata":!0&e[t]&&240==(240&e[t+1])?"audio":null},parseSampleRate:function(e){for(var t=0;t+5<e.length;){if(255===e[t]&&240==(246&e[t+1]))return n[(60&e[t+2])>>>2];t++}return null},parseAacTimestamp:function(e){var t,i,n;t=10,64&e[5]&&(t+=4,t+=s(e.subarray(10,14)));do{if((i=s(e.subarray(t+4,t+8)))<1)return null;if("PRIV"===String.fromCharCode(e[t],e[t+1],e[t+2],e[t+3])){n=e.subarray(t+10,t+i+10);for(var r=0;r<n.byteLength;r++)if(0===n[r]){if("com.apple.streaming.transportStreamTimestamp"===unescape(function(e,t,i){var n,r="";for(n=t;n<i;n++)r+="%"+("00"+e[n].toString(16)).slice(-2);return r}(n,0,r))){var a=n.subarray(r+1),o=(1&a[3])<<30|a[4]<<22|a[5]<<14|a[6]<<6|a[7]>>>2;return o*=4,o+=3&a[7]}break}}t+=10,t+=i}while(t<e.byteLength);return null}}},c92d:function(e,t){function i(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=i=function(e){return typeof e}:e.exports=i=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(t)}e.exports=i},ca13:function(e,t){var i=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,n=new RegExp("[\\-\\.0-9"+i.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),r=new RegExp("^"+i.source+n.source+"*(?::"+i.source+n.source+"*)?$");function a(){}function s(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function o(e,t,i,n,r,a){for(var s,o=++t,l=0;;){var u=e.charAt(o);switch(u){case"=":if(1===l)s=e.slice(t,o),l=3;else{if(2!==l)throw new Error("attribute equal must after attrName");l=3}break;case"'":case'"':if(3===l||1===l){if(1===l&&(a.warning('attribute value must after "="'),s=e.slice(t,o)),t=o+1,!((o=e.indexOf(u,t))>0))throw new Error("attribute value no end '"+u+"' match");c=e.slice(t,o).replace(/&#?\w+;/g,r),i.add(s,c,t-1),l=5}else{if(4!=l)throw new Error('attribute value must after "="');c=e.slice(t,o).replace(/&#?\w+;/g,r),i.add(s,c,t),a.warning('attribute "'+s+'" missed start quot('+u+")!!"),t=o+1,l=5}break;case"/":switch(l){case 0:i.setTagName(e.slice(t,o));case 5:case 6:case 7:l=7,i.closed=!0;case 4:case 1:case 2:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return a.error("unexpected end of input"),0==l&&i.setTagName(e.slice(t,o)),o;case">":switch(l){case 0:i.setTagName(e.slice(t,o));case 5:case 6:case 7:break;case 4:case 1:"/"===(c=e.slice(t,o)).slice(-1)&&(i.closed=!0,c=c.slice(0,-1));case 2:2===l&&(c=s),4==l?(a.warning('attribute "'+c+'" missed quot(")!!'),i.add(s,c.replace(/&#?\w+;/g,r),t)):("http://www.w3.org/1999/xhtml"===n[""]&&c.match(/^(?:disabled|checked|selected)$/i)||a.warning('attribute "'+c+'" missed value!! "'+c+'" instead!!'),i.add(c,c,t));break;case 3:throw new Error("attribute value missed!!")}return o;case"":u=" ";default:if(u<=" ")switch(l){case 0:i.setTagName(e.slice(t,o)),l=6;break;case 1:s=e.slice(t,o),l=2;break;case 4:var c=e.slice(t,o).replace(/&#?\w+;/g,r);a.warning('attribute "'+c+'" missed quot(")!!'),i.add(s,c,t);case 5:l=6}else switch(l){case 2:i.tagName;"http://www.w3.org/1999/xhtml"===n[""]&&s.match(/^(?:disabled|checked|selected)$/i)||a.warning('attribute "'+s+'" missed value!! "'+s+'" instead2!!'),i.add(s,s,t),t=o,l=1;break;case 5:a.warning('attribute space is required"'+s+'"!!');case 6:l=1,t=o;break;case 3:l=4,t=o;break;case 7:throw new Error("elements closed character '/' and '>' must be connected to")}}o++}}function l(e,t,i){for(var n=e.tagName,r=null,a=e.length;a--;){var s=e[a],o=s.qName,l=s.value;if((p=o.indexOf(":"))>0)var u=s.prefix=o.slice(0,p),c=o.slice(p+1),h="xmlns"===u&&c;else c=o,u=null,h="xmlns"===o&&"";s.localName=c,!1!==h&&(null==r&&(r={},d(i,i={})),i[h]=r[h]=l,s.uri="http://www.w3.org/2000/xmlns/",t.startPrefixMapping(h,l))}for(a=e.length;a--;){(u=(s=e[a]).prefix)&&("xml"===u&&(s.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==u&&(s.uri=i[u||""]))}var p;(p=n.indexOf(":"))>0?(u=e.prefix=n.slice(0,p),c=e.localName=n.slice(p+1)):(u=null,c=e.localName=n);var f=e.uri=i[u||""];if(t.startElement(f,c,n,e),!e.closed)return e.currentNSMap=i,e.localNSMap=r,!0;if(t.endElement(f,c,n),r)for(u in r)t.endPrefixMapping(u)}function u(e,t,i,n,r){if(/^(?:script|textarea)$/i.test(i)){var a=e.indexOf("</"+i+">",t),s=e.substring(t+1,a);if(/[&<]/.test(s))return/^script$/i.test(i)?(r.characters(s,0,s.length),a):(s=s.replace(/&#?\w+;/g,n),r.characters(s,0,s.length),a)}return t+1}function c(e,t,i,n){var r=n[i];return null==r&&((r=e.lastIndexOf("</"+i+">"))<t&&(r=e.lastIndexOf("</"+i)),n[i]=r),r<t}function d(e,t){for(var i in e)t[i]=e[i]}function h(e,t,i,n){switch(e.charAt(t+2)){case"-":return"-"===e.charAt(t+3)?(r=e.indexOf("--\x3e",t+4))>t?(i.comment(e,t+4,r-t-4),r+3):(n.error("Unclosed comment"),-1):-1;default:if("CDATA["==e.substr(t+3,6)){var r=e.indexOf("]]>",t+9);return i.startCDATA(),i.characters(e,t+9,r-t-9),i.endCDATA(),r+3}var a=function(e,t){var i,n=[],r=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;r.lastIndex=t,r.exec(e);for(;i=r.exec(e);)if(n.push(i),i[1])return n}(e,t),s=a.length;if(s>1&&/!doctype/i.test(a[0][0])){var o=a[1][0],l=s>3&&/^public$/i.test(a[2][0])&&a[3][0],u=s>4&&a[4][0],c=a[s-1];return i.startDTD(o,l&&l.replace(/^(['"])(.*?)\1$/,"$2"),u&&u.replace(/^(['"])(.*?)\1$/,"$2")),i.endDTD(),c.index+c[0].length}}return-1}function p(e,t,i){var n=e.indexOf("?>",t);if(n){var r=e.substring(t,n).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);if(r){r[0].length;return i.processingInstruction(r[1],r[2]),n+2}return-1}return-1}function f(e){}function m(e,t){return e.__proto__=t,e}a.prototype={parse:function(e,t,i){var n=this.domBuilder;n.startDocument(),d(t,t={}),function(e,t,i,n,r){function a(e){var t=e.slice(1,-1);return t in i?i[t]:"#"===t.charAt(0)?function(e){if(e>65535){var t=55296+((e-=65536)>>10),i=56320+(1023&e);return String.fromCharCode(t,i)}return String.fromCharCode(e)}(parseInt(t.substr(1).replace("x","0x"))):(r.error("entity not found:"+e),e)}function d(t){if(t>S){var i=e.substring(S,t).replace(/&#?\w+;/g,a);_&&m(S),n.characters(i,0,t-S),S=t}}function m(t,i){for(;t>=v&&(i=y.exec(e));)g=i.index,v=g+i[0].length,_.lineNumber++;_.columnNumber=t-g+1}var g=0,v=0,y=/.*(?:\r\n?|\n)|.*$/g,_=n.locator,b=[{currentNSMap:t}],T={},S=0;for(;;){try{var j=e.indexOf("<",S);if(j<0){if(!e.substr(S).match(/^\s*$/)){var k=n.doc,C=k.createTextNode(e.substr(S));k.appendChild(C),n.currentElement=C}return}switch(j>S&&d(j),e.charAt(j+1)){case"/":var w=e.indexOf(">",j+3),E=e.substring(j+2,w),A=b.pop();w<0?(E=e.substring(j+2).replace(/[\s<].*/,""),r.error("end tag name: "+E+" is not complete:"+A.tagName),w=j+1+E.length):E.match(/\s</)&&(E=E.replace(/[\s<].*/,""),r.error("end tag name: "+E+" maybe not complete"),w=j+1+E.length);var x=A.localNSMap,I=A.tagName==E;if(I||A.tagName&&A.tagName.toLowerCase()==E.toLowerCase()){if(n.endElement(A.uri,A.localName,E),x)for(var P in x)n.endPrefixMapping(P);I||r.fatalError("end tag name: "+E+" is not match the current start tagName:"+A.tagName)}else b.push(A);w++;break;case"?":_&&m(j),w=p(e,j,n);break;case"!":_&&m(j),w=h(e,j,n,r);break;default:_&&m(j);var O=new f,L=b[b.length-1].currentNSMap,D=(w=o(e,j,O,L,a,r),O.length);if(!O.closed&&c(e,w,O.tagName,T)&&(O.closed=!0,i.nbsp||r.warning("unclosed xml attribute")),_&&D){for(var M=s(_,{}),N=0;N<D;N++){var R=O[N];m(R.offset),R.locator=s(_,{})}n.locator=M,l(O,n,L)&&b.push(O),n.locator=_}else l(O,n,L)&&b.push(O);"http://www.w3.org/1999/xhtml"!==O.uri||O.closed?w++:w=u(e,w,O.tagName,a,n)}}catch(e){r.error("element parse error: "+e),w=-1}w>S?S=w:d(Math.max(j,S)+1)}}(e,t,i,n,this.errorHandler),n.endDocument()}},f.prototype={setTagName:function(e){if(!r.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},add:function(e,t,i){if(!r.test(e))throw new Error("invalid attribute:"+e);this[this.length++]={qName:e,value:t,offset:i}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}},m({},m.prototype)instanceof m||(m=function(e,t){function i(){}for(t in i.prototype=t,i=new i,e)i[t]=e[t];return i}),t.XMLReader=a},cb9a:function(e,t,i){var n=i("e0d3"),r=i("e3c3");function a(t,i,s){return r()?e.exports=a=Reflect.construct:e.exports=a=function(e,t,i){var r=[null];r.push.apply(r,t);var a=new(Function.bind.apply(e,r));return i&&n(a,i.prototype),a},a.apply(null,arguments)}e.exports=a},cde2:function(e,t){var i={"":1,lr:1,rl:1},n={start:1,center:1,end:1,left:1,right:1,auto:1,"line-left":1,"line-right":1};function r(e){return"string"==typeof e&&(!!n[e.toLowerCase()]&&e.toLowerCase())}function a(e,t,n){this.hasBeenReset=!1;var a="",s=!1,o=e,l=t,u=n,c=null,d="",h=!0,p="auto",f="start",m="auto",g="auto",v=100,y="center";Object.defineProperties(this,{id:{enumerable:!0,get:function(){return a},set:function(e){a=""+e}},pauseOnExit:{enumerable:!0,get:function(){return s},set:function(e){s=!!e}},startTime:{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e)throw new TypeError("Start time must be set to a number.");o=e,this.hasBeenReset=!0}},endTime:{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e)throw new TypeError("End time must be set to a number.");l=e,this.hasBeenReset=!0}},text:{enumerable:!0,get:function(){return u},set:function(e){u=""+e,this.hasBeenReset=!0}},region:{enumerable:!0,get:function(){return c},set:function(e){c=e,this.hasBeenReset=!0}},vertical:{enumerable:!0,get:function(){return d},set:function(e){var t=function(e){return"string"==typeof e&&(!!i[e.toLowerCase()]&&e.toLowerCase())}(e);if(!1===t)throw new SyntaxError("Vertical: an invalid or illegal direction string was specified.");d=t,this.hasBeenReset=!0}},snapToLines:{enumerable:!0,get:function(){return h},set:function(e){h=!!e,this.hasBeenReset=!0}},line:{enumerable:!0,get:function(){return p},set:function(e){if("number"!=typeof e&&"auto"!==e)throw new SyntaxError("Line: an invalid number or illegal string was specified.");p=e,this.hasBeenReset=!0}},lineAlign:{enumerable:!0,get:function(){return f},set:function(e){var t=r(e);t?(f=t,this.hasBeenReset=!0):console.warn("lineAlign: an invalid or illegal string was specified.")}},position:{enumerable:!0,get:function(){return m},set:function(e){if(e<0||e>100)throw new Error("Position must be between 0 and 100.");m=e,this.hasBeenReset=!0}},positionAlign:{enumerable:!0,get:function(){return g},set:function(e){var t=r(e);t?(g=t,this.hasBeenReset=!0):console.warn("positionAlign: an invalid or illegal string was specified.")}},size:{enumerable:!0,get:function(){return v},set:function(e){if(e<0||e>100)throw new Error("Size must be between 0 and 100.");v=e,this.hasBeenReset=!0}},align:{enumerable:!0,get:function(){return y},set:function(e){var t=r(e);if(!t)throw new SyntaxError("align: an invalid or illegal alignment string was specified.");y=t,this.hasBeenReset=!0}}}),this.displayState=void 0}a.prototype.getCueAsHTML=function(){return WebVTT.convertCueToDOMTree(window,this.text)},e.exports=a},cf62:function(e,t){e.exports=function(e){if(!e)return!1;var t=i.call(e);return"[object Function]"===t||"function"==typeof e&&"[object RegExp]"!==t||"undefined"!=typeof window&&(e===window.setTimeout||e===window.alert||e===window.confirm||e===window.prompt)};var i=Object.prototype.toString},d07f:function(e,t,i){"use strict";var n=i("ecdc"),r=i.n(n),a=i("0335"),s=i.n(a),o=i("f433"),l=i.n(o),u=i("546a"),c=i.n(u),d=(i("02b5"),i("6f2e"),i("ee7c")),h=i.n(d),p=i("0630"),f=i.n(p),m=i("46367"),g=i.n(m),v=i("0131"),y=i.n(v),_=i("8c04"),b=i.n(_),T=i("cb9a"),S=i.n(T),j=i("bcc5"),k=i.n(j),C=i("0b40b"),w=i.n(C),E=i("e60d"),A=i.n(E),x=i("8a44"),I=i.n(x),P=function(e){function t(){var t;return(t=e.call(this)||this).buffer="",t}return h()(t,e),t.prototype.push=function(e){var t;for(this.buffer+=e,t=this.buffer.indexOf("\n");t>-1;t=this.buffer.indexOf("\n"))this.trigger("data",this.buffer.substring(0,t)),this.buffer=this.buffer.substring(t+1)},t}(A.a),O=function(e){for(var t,i=e.split(new RegExp('(?:^|,)((?:[^=]*)=(?:"[^"]*"|[^,]*))')),n={},r=i.length;r--;)""!==i[r]&&((t=/([^=]*)=(.*)/.exec(i[r]).slice(1))[0]=t[0].replace(/^\s+|\s+$/g,""),t[1]=t[1].replace(/^\s+|\s+$/g,""),t[1]=t[1].replace(/^['"](.*)['"]$/g,"$1"),n[t[0]]=t[1]);return n},L=function(e){function t(){var t;return(t=e.call(this)||this).customParsers=[],t.tagMappers=[],t}h()(t,e);var i=t.prototype;return i.push=function(e){var t,i,n=this;0!==(e=e.trim()).length&&("#"===e[0]?this.tagMappers.reduce((function(t,i){var n=i(e);return n===e?t:t.concat([n])}),[e]).forEach((function(e){for(var r=0;r<n.customParsers.length;r++)if(n.customParsers[r].call(n,e))return;if(0===e.indexOf("#EXT"))if(e=e.replace("\r",""),t=/^#EXTM3U/.exec(e))n.trigger("data",{type:"tag",tagType:"m3u"});else{if(t=/^#EXTINF:?([0-9\.]*)?,?(.*)?$/.exec(e))return i={type:"tag",tagType:"inf"},t[1]&&(i.duration=parseFloat(t[1])),t[2]&&(i.title=t[2]),void n.trigger("data",i);if(t=/^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(e))return i={type:"tag",tagType:"targetduration"},t[1]&&(i.duration=parseInt(t[1],10)),void n.trigger("data",i);if(t=/^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(e))return i={type:"tag",tagType:"totalduration"},t[1]&&(i.duration=parseInt(t[1],10)),void n.trigger("data",i);if(t=/^#EXT-X-VERSION:?([0-9.]*)?/.exec(e))return i={type:"tag",tagType:"version"},t[1]&&(i.version=parseInt(t[1],10)),void n.trigger("data",i);if(t=/^#EXT-X-MEDIA-SEQUENCE:?(\-?[0-9.]*)?/.exec(e))return i={type:"tag",tagType:"media-sequence"},t[1]&&(i.number=parseInt(t[1],10)),void n.trigger("data",i);if(t=/^#EXT-X-DISCONTINUITY-SEQUENCE:?(\-?[0-9.]*)?/.exec(e))return i={type:"tag",tagType:"discontinuity-sequence"},t[1]&&(i.number=parseInt(t[1],10)),void n.trigger("data",i);if(t=/^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(e))return i={type:"tag",tagType:"playlist-type"},t[1]&&(i.playlistType=t[1]),void n.trigger("data",i);if(t=/^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(e))return i={type:"tag",tagType:"byterange"},t[1]&&(i.length=parseInt(t[1],10)),t[2]&&(i.offset=parseInt(t[2],10)),void n.trigger("data",i);if(t=/^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(e))return i={type:"tag",tagType:"allow-cache"},t[1]&&(i.allowed=!/NO/.test(t[1])),void n.trigger("data",i);if(t=/^#EXT-X-MAP:?(.*)$/.exec(e)){if(i={type:"tag",tagType:"map"},t[1]){var a=O(t[1]);if(a.URI&&(i.uri=a.URI),a.BYTERANGE){var s=a.BYTERANGE.split("@"),o=s[0],l=s[1];i.byterange={},o&&(i.byterange.length=parseInt(o,10)),l&&(i.byterange.offset=parseInt(l,10))}}n.trigger("data",i)}else if(t=/^#EXT-X-STREAM-INF:?(.*)$/.exec(e)){if(i={type:"tag",tagType:"stream-inf"},t[1]){if(i.attributes=O(t[1]),i.attributes.RESOLUTION){var u=i.attributes.RESOLUTION.split("x"),c={};u[0]&&(c.width=parseInt(u[0],10)),u[1]&&(c.height=parseInt(u[1],10)),i.attributes.RESOLUTION=c}i.attributes.BANDWIDTH&&(i.attributes.BANDWIDTH=parseInt(i.attributes.BANDWIDTH,10)),i.attributes["PROGRAM-ID"]&&(i.attributes["PROGRAM-ID"]=parseInt(i.attributes["PROGRAM-ID"],10))}n.trigger("data",i)}else{if(t=/^#EXT-X-MEDIA:?(.*)$/.exec(e))return i={type:"tag",tagType:"media"},t[1]&&(i.attributes=O(t[1])),void n.trigger("data",i);if(t=/^#EXT-X-ENDLIST/.exec(e))n.trigger("data",{type:"tag",tagType:"endlist"});else if(t=/^#EXT-X-DISCONTINUITY/.exec(e))n.trigger("data",{type:"tag",tagType:"discontinuity"});else{if(t=/^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(e))return i={type:"tag",tagType:"program-date-time"},t[1]&&(i.dateTimeString=t[1],i.dateTimeObject=new Date(t[1])),void n.trigger("data",i);if(t=/^#EXT-X-KEY:?(.*)$/.exec(e))return i={type:"tag",tagType:"key"},t[1]&&(i.attributes=O(t[1]),i.attributes.IV&&("0x"===i.attributes.IV.substring(0,2).toLowerCase()&&(i.attributes.IV=i.attributes.IV.substring(2)),i.attributes.IV=i.attributes.IV.match(/.{8}/g),i.attributes.IV[0]=parseInt(i.attributes.IV[0],16),i.attributes.IV[1]=parseInt(i.attributes.IV[1],16),i.attributes.IV[2]=parseInt(i.attributes.IV[2],16),i.attributes.IV[3]=parseInt(i.attributes.IV[3],16),i.attributes.IV=new Uint32Array(i.attributes.IV))),void n.trigger("data",i);if(t=/^#EXT-X-START:?(.*)$/.exec(e))return i={type:"tag",tagType:"start"},t[1]&&(i.attributes=O(t[1]),i.attributes["TIME-OFFSET"]=parseFloat(i.attributes["TIME-OFFSET"]),i.attributes.PRECISE=/YES/.test(i.attributes.PRECISE)),void n.trigger("data",i);if(t=/^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(e))return i={type:"tag",tagType:"cue-out-cont"},t[1]?i.data=t[1]:i.data="",void n.trigger("data",i);if(t=/^#EXT-X-CUE-OUT:?(.*)?$/.exec(e))return i={type:"tag",tagType:"cue-out"},t[1]?i.data=t[1]:i.data="",void n.trigger("data",i);if(t=/^#EXT-X-CUE-IN:?(.*)?$/.exec(e))return i={type:"tag",tagType:"cue-in"},t[1]?i.data=t[1]:i.data="",void n.trigger("data",i);n.trigger("data",{type:"tag",data:e.slice(4)})}}}else n.trigger("data",{type:"comment",text:e.slice(1)})})):this.trigger("data",{type:"uri",uri:e}))},i.addParser=function(e){var t=this,i=e.expression,n=e.customType,r=e.dataParser,a=e.segment;"function"!=typeof r&&(r=function(e){return e}),this.customParsers.push((function(e){if(i.exec(e))return t.trigger("data",{type:"custom",data:r(e),customType:n,segment:a}),!0}))},i.addTagMapper=function(e){var t=e.expression,i=e.map;this.tagMappers.push((function(e){return t.test(e)?i(e):e}))},t}(A.a),D=function(e){function t(){var t;(t=e.call(this)||this).lineStream=new P,t.parseStream=new L,t.lineStream.pipe(t.parseStream);var i,n,r=c()(t),a=[],s={},o=function(){},u={AUDIO:{},VIDEO:{},"CLOSED-CAPTIONS":{},SUBTITLES:{}},d=0;t.manifest={allowCache:!0,discontinuityStarts:[],segments:[]};var h=0;return t.parseStream.on("data",(function(e){var t,c;({tag:function(){({"allow-cache":function(){this.manifest.allowCache=e.allowed,"allowed"in e||(this.trigger("info",{message:"defaulting allowCache to YES"}),this.manifest.allowCache=!0)},byterange:function(){var t={};"length"in e&&(s.byterange=t,t.length=e.length,"offset"in e||(e.offset=h)),"offset"in e&&(s.byterange=t,t.offset=e.offset),h=t.offset+t.length},endlist:function(){this.manifest.endList=!0},inf:function(){"mediaSequence"in this.manifest||(this.manifest.mediaSequence=0,this.trigger("info",{message:"defaulting media sequence to zero"})),"discontinuitySequence"in this.manifest||(this.manifest.discontinuitySequence=0,this.trigger("info",{message:"defaulting discontinuity sequence to zero"})),e.duration>0&&(s.duration=e.duration),0===e.duration&&(s.duration=.01,this.trigger("info",{message:"updating zero segment duration to a small value"})),this.manifest.segments=a},key:function(){if(e.attributes)if("NONE"!==e.attributes.METHOD)if(e.attributes.URI){if("urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"===e.attributes.KEYFORMAT){return-1===["SAMPLE-AES","SAMPLE-AES-CTR","SAMPLE-AES-CENC"].indexOf(e.attributes.METHOD)?void this.trigger("warn",{message:"invalid key method provided for Widevine"}):("SAMPLE-AES-CENC"===e.attributes.METHOD&&this.trigger("warn",{message:"SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead"}),"data:text/plain;base64,"!==e.attributes.URI.substring(0,23)?void this.trigger("warn",{message:"invalid key URI provided for Widevine"}):e.attributes.KEYID&&"0x"===e.attributes.KEYID.substring(0,2)?void(this.manifest.contentProtection={"com.widevine.alpha":{attributes:{schemeIdUri:e.attributes.KEYFORMAT,keyId:e.attributes.KEYID.substring(2)},pssh:I()(e.attributes.URI.split(",")[1])}}):void this.trigger("warn",{message:"invalid key ID provided for Widevine"}))}e.attributes.METHOD||this.trigger("warn",{message:"defaulting key method to AES-128"}),n={method:e.attributes.METHOD||"AES-128",uri:e.attributes.URI},void 0!==e.attributes.IV&&(n.iv=e.attributes.IV)}else this.trigger("warn",{message:"ignoring key declaration without URI"});else n=null;else this.trigger("warn",{message:"ignoring key declaration without attribute list"})},"media-sequence":function(){isFinite(e.number)?this.manifest.mediaSequence=e.number:this.trigger("warn",{message:"ignoring invalid media sequence: "+e.number})},"discontinuity-sequence":function(){isFinite(e.number)?(this.manifest.discontinuitySequence=e.number,d=e.number):this.trigger("warn",{message:"ignoring invalid discontinuity sequence: "+e.number})},"playlist-type":function(){/VOD|EVENT/.test(e.playlistType)?this.manifest.playlistType=e.playlistType:this.trigger("warn",{message:"ignoring unknown playlist type: "+e.playlist})},map:function(){i={},e.uri&&(i.uri=e.uri),e.byterange&&(i.byterange=e.byterange)},"stream-inf":function(){this.manifest.playlists=a,this.manifest.mediaGroups=this.manifest.mediaGroups||u,e.attributes?(s.attributes||(s.attributes={}),l()(s.attributes,e.attributes)):this.trigger("warn",{message:"ignoring empty stream-inf attributes"})},media:function(){if(this.manifest.mediaGroups=this.manifest.mediaGroups||u,e.attributes&&e.attributes.TYPE&&e.attributes["GROUP-ID"]&&e.attributes.NAME){var i=this.manifest.mediaGroups[e.attributes.TYPE];i[e.attributes["GROUP-ID"]]=i[e.attributes["GROUP-ID"]]||{},t=i[e.attributes["GROUP-ID"]],(c={default:/yes/i.test(e.attributes.DEFAULT)}).default?c.autoselect=!0:c.autoselect=/yes/i.test(e.attributes.AUTOSELECT),e.attributes.LANGUAGE&&(c.language=e.attributes.LANGUAGE),e.attributes.URI&&(c.uri=e.attributes.URI),e.attributes["INSTREAM-ID"]&&(c.instreamId=e.attributes["INSTREAM-ID"]),e.attributes.CHARACTERISTICS&&(c.characteristics=e.attributes.CHARACTERISTICS),e.attributes.FORCED&&(c.forced=/yes/i.test(e.attributes.FORCED)),t[e.attributes.NAME]=c}else this.trigger("warn",{message:"ignoring incomplete or missing media group"})},discontinuity:function(){d+=1,s.discontinuity=!0,this.manifest.discontinuityStarts.push(a.length)},"program-date-time":function(){void 0===this.manifest.dateTimeString&&(this.manifest.dateTimeString=e.dateTimeString,this.manifest.dateTimeObject=e.dateTimeObject),s.dateTimeString=e.dateTimeString,s.dateTimeObject=e.dateTimeObject},targetduration:function(){!isFinite(e.duration)||e.duration<0?this.trigger("warn",{message:"ignoring invalid target duration: "+e.duration}):this.manifest.targetDuration=e.duration},totalduration:function(){!isFinite(e.duration)||e.duration<0?this.trigger("warn",{message:"ignoring invalid total duration: "+e.duration}):this.manifest.totalDuration=e.duration},start:function(){e.attributes&&!isNaN(e.attributes["TIME-OFFSET"])?this.manifest.start={timeOffset:e.attributes["TIME-OFFSET"],precise:e.attributes.PRECISE}:this.trigger("warn",{message:"ignoring start declaration without appropriate attribute list"})},"cue-out":function(){s.cueOut=e.data},"cue-out-cont":function(){s.cueOutCont=e.data},"cue-in":function(){s.cueIn=e.data}}[e.tagType]||o).call(r)},uri:function(){s.uri=e.uri,a.push(s),this.manifest.targetDuration&&!("duration"in s)&&(this.trigger("warn",{message:"defaulting segment duration to the target duration"}),s.duration=this.manifest.targetDuration),n&&(s.key=n),s.timeline=d,i&&(s.map=i),s={}},comment:function(){},custom:function(){e.segment?(s.custom=s.custom||{},s.custom[e.customType]=e.data):(this.manifest.custom=this.manifest.custom||{},this.manifest.custom[e.customType]=e.data)}})[e.type].call(r)})),t}h()(t,e);var i=t.prototype;return i.push=function(e){this.lineStream.push(e)},i.end=function(){this.lineStream.push("\n")},i.addParser=function(e){this.parseStream.addParser(e)},i.addTagMapper=function(e){this.parseStream.addTagMapper(e)},t}(A.a),M=i("ae81"),N=i("6a9f"),R=i.n(N),U=i("a56a"),z=function(e){return!!e&&"object"==typeof e},F=function e(){for(var t=arguments.length,i=new Array(t),n=0;n<t;n++)i[n]=arguments[n];return i.reduce((function(t,i){return Object.keys(i).forEach((function(n){Array.isArray(t[n])&&Array.isArray(i[n])?t[n]=t[n].concat(i[n]):z(t[n])&&z(i[n])?t[n]=e(t[n],i[n]):t[n]=i[n]})),t}),{})},B=function(e){return e.reduce((function(e,t){return e.concat(t)}),[])},V=function(e){if(!e.length)return[];for(var t=[],i=0;i<e.length;i++)t.push(e[i]);return t},H="INVALID_NUMBER_OF_PERIOD",q="DASH_EMPTY_MANIFEST",W="DASH_INVALID_XML",G="NO_BASE_URL",X="SEGMENT_TIME_UNSPECIFIED",K="UNSUPPORTED_UTC_TIMING_SCHEME",Y=function(e){var t=e.baseUrl,i=void 0===t?"":t,n=e.source,r=void 0===n?"":n,a=e.range,s=void 0===a?"":a,o=e.indexRange,l=void 0===o?"":o,u={uri:r,resolvedUri:w()(i||"",r)};if(s||l){var c=(s||l).split("-"),d=parseInt(c[0],10),h=parseInt(c[1],10);u.byterange={length:h-d+1,offset:d}}return u},Q={static:function(e){var t=e.duration,i=e.timescale,n=void 0===i?1:i,r=e.sourceDuration;return{start:0,end:Math.ceil(r/(t/n))}},dynamic:function(e){var t=e.NOW,i=e.clientOffset,n=e.availabilityStartTime,r=e.timescale,a=void 0===r?1:r,s=e.duration,o=e.start,l=void 0===o?0:o,u=e.minimumUpdatePeriod,c=void 0===u?0:u,d=e.timeShiftBufferDepth,h=void 0===d?1/0:d,p=(t+i)/1e3,f=n+l,m=p+c-f,g=Math.ceil(m*a/s),v=Math.floor((p-f-h)*a/s),y=Math.floor((p-f)*a/s);return{start:Math.max(0,v),end:Math.min(g,y)}}},J=function(e){var t=e.type,i=void 0===t?"static":t,n=e.duration,r=e.timescale,a=void 0===r?1:r,s=e.sourceDuration,o=Q[i](e),l=function(e,t){for(var i=[],n=e;n<t;n++)i.push(n);return i}(o.start,o.end).map(function(e){return function(t,i){var n=e.duration,r=e.timescale,a=void 0===r?1:r,s=e.periodIndex,o=e.startNumber;return{number:(void 0===o?1:o)+t,duration:n/a,timeline:s,time:i*n}}}(e));if("static"===i){var u=l.length-1;l[u].duration=s-n/a*u}return l},Z=function(e){var t=e.baseUrl,i=e.initialization,n=void 0===i?{}:i,r=e.sourceDuration,a=e.indexRange,s=void 0===a?"":a,o=e.duration;if(!t)throw new Error(G);var l=Y({baseUrl:t,source:n.sourceURL,range:n.range}),u=Y({baseUrl:t,source:t,indexRange:s});if(u.map=l,o){var c=J(e);c.length&&(u.duration=c[0].duration,u.timeline=c[0].timeline)}else r&&(u.duration=r,u.timeline=0);return u.number=0,[u]},$=function(e,t,i){for(var n=e.sidx.map?e.sidx.map:null,r=e.sidx.duration,a=e.timeline||0,s=e.sidx.byterange,o=s.offset+s.length,l=t.timescale,u=t.references.filter((function(e){return 1!==e.referenceType})),c=[],d=o+t.firstOffset,h=0;h<u.length;h++){var p=t.references[h],f=p.referencedSize,m=p.subsegmentDuration,g=Z({baseUrl:i,timescale:l,timeline:a,periodIndex:a,duration:m,sourceDuration:r,indexRange:d+"-"+(d+f-1)})[0];n&&(g.map=n),c.push(g),d+=f}return e.segments=c,e},ee=function(e){var t;return(t=e.reduce((function(e,t){var i,n=t.attributes.id+(t.attributes.lang||"");return e[n]?(t.segments[0]&&(t.segments[0].discontinuity=!0),(i=e[n].segments).push.apply(i,t.segments),t.attributes.contentProtection&&(e[n].attributes.contentProtection=t.attributes.contentProtection)):e[n]=t,e}),{}),Object.keys(t).map((function(e){return t[e]}))).map((function(e){var t,i;return e.discontinuityStarts=(t=e.segments,i="discontinuity",t.reduce((function(e,t,n){return t[i]&&e.push(n),e}),[])),e}))},te=function(e,t){if(void 0===t&&(t={}),!Object.keys(t).length)return e;for(var i in e){var n=e[i];if(n.sidx){var r=n.sidx.uri+"-"+(s=n.sidx.byterange,o=void 0,o=s.offset+s.length-1,s.offset+"-"+o),a=t[r]&&t[r].sidx;n.sidx&&a&&$(n,a,n.sidx.resolvedUri)}}var s,o;return e},ie=function(e){var t,i=e.attributes,n=e.segments,r=e.sidx,a={attributes:(t={NAME:i.id,BANDWIDTH:i.bandwidth,CODECS:i.codecs},t["PROGRAM-ID"]=1,t),uri:"",endList:"static"===(i.type||"static"),timeline:i.periodIndex,resolvedUri:"",targetDuration:i.duration,segments:n,mediaSequence:n.length?n[0].number:1};return i.contentProtection&&(a.contentProtection=i.contentProtection),r&&(a.sidx=r),a},ne=function(e){var t,i=e.attributes,n=e.segments;void 0===n&&(n=[{uri:i.baseUrl,timeline:i.periodIndex,resolvedUri:i.baseUrl||"",duration:i.sourceDuration,number:0}],i.duration=i.sourceDuration);var r=((t={NAME:i.id,BANDWIDTH:i.bandwidth})["PROGRAM-ID"]=1,t);return i.codecs&&(r.CODECS=i.codecs),{attributes:r,uri:"",endList:"static"===(i.type||"static"),timeline:i.periodIndex,resolvedUri:i.baseUrl||"",targetDuration:i.duration,segments:n,mediaSequence:n.length?n[0].number:1}},re=function(e){var t,i=e.attributes,n=e.segments,r=e.sidx,a={attributes:(t={NAME:i.id,AUDIO:"audio",SUBTITLES:"subs",RESOLUTION:{width:i.width,height:i.height},CODECS:i.codecs,BANDWIDTH:i.bandwidth},t["PROGRAM-ID"]=1,t),uri:"",endList:"static"===(i.type||"static"),timeline:i.periodIndex,resolvedUri:"",targetDuration:i.duration,segments:n,mediaSequence:n.length?n[0].number:1};return i.contentProtection&&(a.contentProtection=i.contentProtection),r&&(a.sidx=r),a},ae=function(e,t,i){var n;if(void 0===i&&(i={}),!e.length)return{};var r=e[0].attributes,a=r.sourceDuration,s=r.type,o=void 0===s?"static":s,l=r.suggestedPresentationDelay,u=r.minimumUpdatePeriod,c=ee(e.filter((function(e){var t=e.attributes;return"video/mp4"===t.mimeType||"video"===t.contentType}))).map(re),d=ee(e.filter((function(e){var t=e.attributes;return"audio/mp4"===t.mimeType||"audio"===t.contentType}))),h=e.filter((function(e){var t=e.attributes;return"text/vtt"===t.mimeType||"text"===t.contentType})),p={allowCache:!0,discontinuityStarts:[],segments:[],endList:!0,mediaGroups:(n={AUDIO:{},VIDEO:{}},n["CLOSED-CAPTIONS"]={},n.SUBTITLES={},n),uri:"",duration:a,playlists:te(c,i)};return u>=0&&(p.minimumUpdatePeriod=1e3*u),t&&(p.locations=t),"dynamic"===o&&(p.suggestedPresentationDelay=l),d.length&&(p.mediaGroups.AUDIO.audio=function(e,t){var i;void 0===t&&(t={});var n=e.reduce((function(e,n){var r=n.attributes.role&&n.attributes.role.value||"",a=n.attributes.lang||"",s="main";if(a){var o=r?" ("+r+")":"";s=""+n.attributes.lang+o}return e[s]&&e[s].playlists[0].attributes.BANDWIDTH>n.attributes.bandwidth||(e[s]={language:a,autoselect:!0,default:"main"===r,playlists:te([ie(n)],t),uri:""},void 0===i&&"main"===r&&((i=n).default=!0)),e}),{});i||(n[Object.keys(n)[0]].default=!0);return n}(d,i)),h.length&&(p.mediaGroups.SUBTITLES.subs=function(e,t){return void 0===t&&(t={}),e.reduce((function(e,i){var n=i.attributes.lang||"text";return e[n]||(e[n]={language:n,default:!1,autoselect:!1,playlists:te([ne(i)],t),uri:""}),e}),{})}(h,i)),p},se=function(e,t,i){var n=e.NOW,r=e.clientOffset,a=e.availabilityStartTime,s=e.timescale,o=void 0===s?1:s,l=e.start,u=void 0===l?0:l,c=e.minimumUpdatePeriod,d=(n+r)/1e3+(void 0===c?0:c)-(a+u);return Math.ceil((d*o-t)/i)},oe=function(e,t){for(var i=e.type,n=void 0===i?"static":i,r=e.minimumUpdatePeriod,a=void 0===r?0:r,s=e.media,o=void 0===s?"":s,l=e.sourceDuration,u=e.timescale,c=void 0===u?1:u,d=e.startNumber,h=void 0===d?1:d,p=e.periodIndex,f=[],m=-1,g=0;g<t.length;g++){var v=t[g],y=v.d,_=v.r||0,b=v.t||0;m<0&&(m=b),b&&b>m&&(m=b);var T=void 0;if(_<0){var S=g+1;T=S===t.length?"dynamic"===n&&a>0&&o.indexOf("$Number$")>0?se(e,m,y):(l*c-m)/y:(t[S].t-m)/y}else T=_+1;for(var j=h+f.length+T,k=h+f.length;k<j;)f.push({number:k,duration:y/c,time:m,timeline:p}),m+=y,k++}return f},le=/\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g,ue=function(e,t){return e.replace(le,function(e){return function(t,i,n,r){if("$$"===t)return"$";if(void 0===e[i])return t;var a=""+e[i];return"RepresentationID"===i?a:(r=n?parseInt(r,10):1,a.length>=r?a:""+new Array(r-a.length+1).join("0")+a)}}(t))},ce=function(e,t){var i={RepresentationID:e.id,Bandwidth:e.bandwidth||0},n=e.initialization,r=void 0===n?{sourceURL:"",range:""}:n,a=Y({baseUrl:e.baseUrl,source:ue(r.sourceURL,i),range:r.range});return function(e,t){return e.duration||t?e.duration?J(e):oe(e,t):[{number:e.startNumber||1,duration:e.sourceDuration,time:0,timeline:e.periodIndex}]}(e,t).map((function(t){i.Number=t.number,i.Time=t.time;var n=ue(e.media||"",i);return{uri:n,timeline:t.timeline,duration:t.duration,resolvedUri:w()(e.baseUrl||"",n),map:a,number:t.number}}))},de=function(e,t){var i=e.duration,n=e.segmentUrls,r=void 0===n?[]:n;if(!i&&!t||i&&t)throw new Error(X);var a,s=r.map((function(t){return function(e,t){var i=e.baseUrl,n=e.initialization,r=void 0===n?{}:n,a=Y({baseUrl:i,source:r.sourceURL,range:r.range}),s=Y({baseUrl:i,source:t.media,range:t.mediaRange});return s.map=a,s}(e,t)}));return i&&(a=J(e)),t&&(a=oe(e,t)),a.map((function(e,t){if(s[t]){var i=s[t];return i.timeline=e.timeline,i.duration=e.duration,i.number=e.number,i}})).filter((function(e){return e}))},he=function(e){var t,i,n=e.attributes,r=e.segmentInfo;r.template?(i=ce,t=F(n,r.template)):r.base?(i=Z,t=F(n,r.base)):r.list&&(i=de,t=F(n,r.list));var a={attributes:n};if(!i)return a;var s=i(t,r.timeline);if(t.duration){var o=t,l=o.duration,u=o.timescale,c=void 0===u?1:u;t.duration=l/c}else s.length?t.duration=s.reduce((function(e,t){return Math.max(e,Math.ceil(t.duration))}),0):t.duration=0;return a.attributes=t,a.segments=s,r.base&&t.indexRange&&(a.sidx=s[0],a.segments=[]),a},pe=function(e,t){return V(e.childNodes).filter((function(e){return e.tagName===t}))},fe=function(e){return e.textContent.trim()},me=function(e){var t=/P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/.exec(e);if(!t)return 0;var i=t.slice(1),n=i[0],r=i[1],a=i[2],s=i[3],o=i[4],l=i[5];return 31536e3*parseFloat(n||0)+2592e3*parseFloat(r||0)+86400*parseFloat(a||0)+3600*parseFloat(s||0)+60*parseFloat(o||0)+parseFloat(l||0)},ge={mediaPresentationDuration:function(e){return me(e)},availabilityStartTime:function(e){return/^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/.test(t=e)&&(t+="Z"),Date.parse(t)/1e3;var t},minimumUpdatePeriod:function(e){return me(e)},suggestedPresentationDelay:function(e){return me(e)},type:function(e){return e},timeShiftBufferDepth:function(e){return me(e)},start:function(e){return me(e)},width:function(e){return parseInt(e,10)},height:function(e){return parseInt(e,10)},bandwidth:function(e){return parseInt(e,10)},startNumber:function(e){return parseInt(e,10)},timescale:function(e){return parseInt(e,10)},duration:function(e){var t=parseInt(e,10);return isNaN(t)?me(e):t},d:function(e){return parseInt(e,10)},t:function(e){return parseInt(e,10)},r:function(e){return parseInt(e,10)},DEFAULT:function(e){return e}},ve=function(e){return e&&e.attributes?V(e.attributes).reduce((function(e,t){var i=ge[t.name]||ge.DEFAULT;return e[t.name]=i(t.value),e}),{}):{}},ye={"urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b":"org.w3.clearkey","urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed":"com.widevine.alpha","urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95":"com.microsoft.playready","urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb":"com.adobe.primetime"},_e=function(e,t){return t.length?B(e.map((function(e){return t.map((function(t){return w()(e,fe(t))}))}))):e},be=function(e){var t=pe(e,"SegmentTemplate")[0],i=pe(e,"SegmentList")[0],n=i&&pe(i,"SegmentURL").map((function(e){return F({tag:"SegmentURL"},ve(e))})),r=pe(e,"SegmentBase")[0],a=i||t,s=a&&pe(a,"SegmentTimeline")[0],o=i||r||t,l=o&&pe(o,"Initialization")[0],u=t&&ve(t);u&&l?u.initialization=l&&ve(l):u&&u.initialization&&(u.initialization={sourceURL:u.initialization});var c={template:u,timeline:s&&pe(s,"S").map((function(e){return ve(e)})),list:i&&F(ve(i),{segmentUrls:n,initialization:ve(l)}),base:r&&F(ve(r),{initialization:ve(l)})};return Object.keys(c).forEach((function(e){c[e]||delete c[e]})),c},Te=function(e,t,i){return function(n){var r=ve(n),a=_e(t,pe(n,"BaseURL")),s=pe(n,"Role")[0],o={role:ve(s)},l=F(e,r,o),u=pe(n,"ContentProtection").reduce((function(e,t){var i=ve(t),n=ye[i.schemeIdUri];if(n){e[n]={attributes:i};var r=pe(t,"cenc:pssh")[0];if(r){var a=fe(r),s=a&&I()(a);e[n].pssh=s}}return e}),{});Object.keys(u).length&&(l=F(l,{contentProtection:u}));var c=be(n),d=pe(n,"Representation"),h=F(i,c);return B(d.map(function(e,t,i){return function(n){var r=pe(n,"BaseURL"),a=_e(t,r),s=F(e,ve(n)),o=be(n);return a.map((function(e){return{segmentInfo:F(i,o),attributes:F(s,{baseUrl:e})}}))}}(l,a,h)))}},Se=function(e,t){return function(i,n){var r=_e(t,pe(i,"BaseURL")),a=ve(i),s=parseInt(a.id,10),o=R.a.isNaN(s)?n:s,l=F(e,{periodIndex:o}),u=pe(i,"AdaptationSet"),c=be(i);return B(u.map(Te(l,r,c)))}},je=function(e){if(""===e)throw new Error(q);var t=(new U.DOMParser).parseFromString(e,"application/xml"),i=t&&"MPD"===t.documentElement.tagName?t.documentElement:null;if(!i||i&&i.getElementsByTagName("parsererror").length>0)throw new Error(W);return i},ke=function(e,t){void 0===t&&(t={});var i=function(e,t){void 0===t&&(t={});var i=t,n=i.manifestUri,r=void 0===n?"":n,a=i.NOW,s=void 0===a?Date.now():a,o=i.clientOffset,l=void 0===o?0:o,u=pe(e,"Period");if(!u.length)throw new Error(H);var c=pe(e,"Location"),d=ve(e),h=_e([r],pe(e,"BaseURL"));return d.sourceDuration=d.mediaPresentationDuration||0,d.NOW=s,d.clientOffset=l,c.length&&(d.locations=c.map(fe)),{locations:d.locations,representationInfo:B(u.map(Se(d,h)))}}(je(e),t),n=i.representationInfo.map(he);return ae(n,i.locations,t.sidxMapping)},Ce=function(e){return function(e){var t=pe(e,"UTCTiming")[0];if(!t)return null;var i=ve(t);switch(i.schemeIdUri){case"urn:mpeg:dash:utc:http-head:2014":case"urn:mpeg:dash:utc:http-head:2012":i.method="HEAD";break;case"urn:mpeg:dash:utc:http-xsdate:2014":case"urn:mpeg:dash:utc:http-iso:2014":case"urn:mpeg:dash:utc:http-xsdate:2012":case"urn:mpeg:dash:utc:http-iso:2012":i.method="GET";break;case"urn:mpeg:dash:utc:direct:2014":case"urn:mpeg:dash:utc:direct:2012":i.method="DIRECT",i.value=Date.parse(i.value);break;case"urn:mpeg:dash:utc:http-ntp:2014":case"urn:mpeg:dash:utc:ntp:2014":case"urn:mpeg:dash:utc:sntp:2014":default:throw new Error(K)}return i}(je(e))},we=i("1e9b"),Ee=i.n(we),Ae=i("ba3b"),xe=i("f639"),Ie=i("e3a5"),Pe=i.n(Ie),Oe=i("629a"),Le=i("59f2"),De=i.n(Le),Me=i("84f6"),Ne=[];var Re=function e(t){var i,n="info",a=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];i("log",n,t)};return i=function(e,t){return function(i,n,a){var s=t.levels[n],o=new RegExp("^("+s+")$");if("log"!==i&&a.unshift(i.toUpperCase()+":"),a.unshift(e+":"),Ne){Ne.push([].concat(a));var l=Ne.length-1e3;Ne.splice(0,l>0?l:0)}if(r.a.console){var u=r.a.console[i];u||"debug"!==i||(u=r.a.console.info||r.a.console.log),u&&s&&o.test(i)&&u[Array.isArray(a)?"apply":"call"](r.a.console,a)}}}(t,a),a.createLogger=function(i){return e(t+": "+i)},a.levels={all:"debug|log|warn|error",off:"",debug:"debug|log|warn|error",info:"log|warn|error",warn:"warn|error",error:"error",DEFAULT:n},a.level=function(e){if("string"==typeof e){if(!a.levels.hasOwnProperty(e))throw new Error('"'+e+'" in not a valid log level');n=e}return n},(a.history=function(){return Ne?[].concat(Ne):[]}).filter=function(e){return(Ne||[]).filter((function(t){return new RegExp(".*"+e+".*").test(t[0])}))},a.history.clear=function(){Ne&&(Ne.length=0)},a.history.disable=function(){null!==Ne&&(Ne.length=0,Ne=null)},a.history.enable=function(){null===Ne&&(Ne=[])},a.error=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return i("error",n,t)},a.warn=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return i("warn",n,t)},a.debug=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return i("debug",n,t)},a}("VIDEOJS"),Ue=Re.createLogger,ze=Object.prototype.toString,Fe=function(e){return He(e)?Object.keys(e):[]};function Be(e,t){Fe(e).forEach((function(i){return t(e[i],i)}))}function Ve(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),n=1;n<t;n++)i[n-1]=arguments[n];return Object.assign?l.a.apply(void 0,[e].concat(i)):(i.forEach((function(t){t&&Be(t,(function(t,i){e[i]=t}))})),e)}function He(e){return!!e&&"object"==typeof e}function qe(e){return He(e)&&"[object Object]"===ze.call(e)&&e.constructor===Object}function We(e,t){if(!e||!t)return"";if("function"==typeof r.a.getComputedStyle){var i=r.a.getComputedStyle(e);return i?i.getPropertyValue(t)||i[t]:""}return""}function Ge(e){return"string"==typeof e&&Boolean(e.trim())}function Xe(e){if(e.indexOf(" ")>=0)throw new Error("class has illegal whitespace characters")}function Ke(){return s.a===r.a.document}function Ye(e){return He(e)&&1===e.nodeType}function Qe(){try{return r.a.parent!==r.a.self}catch(e){return!0}}function Je(e){return function(t,i){if(!Ge(t))return s.a[e](null);Ge(i)&&(i=s.a.querySelector(i));var n=Ye(i)?i:s.a;return n[e]&&n[e](t)}}function Ze(e,t,i,n){void 0===e&&(e="div"),void 0===t&&(t={}),void 0===i&&(i={});var r=s.a.createElement(e);return Object.getOwnPropertyNames(t).forEach((function(e){var i=t[e];-1!==e.indexOf("aria-")||"role"===e||"type"===e?(Re.warn("Setting attributes in the second argument of createEl()\nhas been deprecated. Use the third argument instead.\ncreateEl(type, properties, attributes). Attempting to set "+e+" to "+i+"."),r.setAttribute(e,i)):"textContent"===e?$e(r,i):r[e]!==i&&(r[e]=i)})),Object.getOwnPropertyNames(i).forEach((function(e){r.setAttribute(e,i[e])})),n&&yt(r,n),r}function $e(e,t){return void 0===e.textContent?e.innerText=t:e.textContent=t,e}function et(e,t){t.firstChild?t.insertBefore(e,t.firstChild):t.appendChild(e)}function tt(e,t){return Xe(t),e.classList?e.classList.contains(t):(i=t,new RegExp("(^|\\s)"+i+"($|\\s)")).test(e.className);var i}function it(e,t){return e.classList?e.classList.add(t):tt(e,t)||(e.className=(e.className+" "+t).trim()),e}function nt(e,t){return e.classList?e.classList.remove(t):(Xe(t),e.className=e.className.split(/\s+/).filter((function(e){return e!==t})).join(" ")),e}function rt(e,t,i){var n=tt(e,t);if("function"==typeof i&&(i=i(e,t)),"boolean"!=typeof i&&(i=!n),i!==n)return i?it(e,t):nt(e,t),e}function at(e,t){Object.getOwnPropertyNames(t).forEach((function(i){var n=t[i];null==n||!1===n?e.removeAttribute(i):e.setAttribute(i,!0===n?"":n)}))}function st(e){var t={},i=",autoplay,controls,playsinline,loop,muted,default,defaultMuted,";if(e&&e.attributes&&e.attributes.length>0)for(var n=e.attributes,r=n.length-1;r>=0;r--){var a=n[r].name,s=n[r].value;"boolean"!=typeof e[a]&&-1===i.indexOf(","+a+",")||(s=null!==s),t[a]=s}return t}function ot(e,t){return e.getAttribute(t)}function lt(e,t,i){e.setAttribute(t,i)}function ut(e,t){e.removeAttribute(t)}function ct(){s.a.body.focus(),s.a.onselectstart=function(){return!1}}function dt(){s.a.onselectstart=function(){return!0}}function ht(e){if(e&&e.getBoundingClientRect&&e.parentNode){var t=e.getBoundingClientRect(),i={};return["bottom","height","left","right","top","width"].forEach((function(e){void 0!==t[e]&&(i[e]=t[e])})),i.height||(i.height=parseFloat(We(e,"height"))),i.width||(i.width=parseFloat(We(e,"width"))),i}}function pt(e){if(!e||e&&!e.offsetParent)return{left:0,top:0,width:0,height:0};var t=e.offsetWidth,i=e.offsetHeight,n=0,r=0;do{n+=e.offsetLeft,r+=e.offsetTop,e=e.offsetParent}while(e);return{left:n,top:r,width:t,height:i}}function ft(e,t){var i={},n=pt(t.target),r=pt(e),a=r.width,s=r.height,o=t.offsetY-(r.top-n.top),l=t.offsetX-(r.left-n.left);return t.changedTouches&&(l=t.changedTouches[0].pageX-r.left,o=t.changedTouches[0].pageY+r.top),i.y=1-Math.max(0,Math.min(1,o/s)),i.x=Math.max(0,Math.min(1,l/a)),i}function mt(e){return He(e)&&3===e.nodeType}function gt(e){for(;e.firstChild;)e.removeChild(e.firstChild);return e}function vt(e){return"function"==typeof e&&(e=e()),(Array.isArray(e)?e:[e]).map((function(e){return"function"==typeof e&&(e=e()),Ye(e)||mt(e)?e:"string"==typeof e&&/\S/.test(e)?s.a.createTextNode(e):void 0})).filter((function(e){return e}))}function yt(e,t){return vt(t).forEach((function(t){return e.appendChild(t)})),e}function _t(e,t){return yt(gt(e),t)}function bt(e){return void 0===e.button&&void 0===e.buttons||(0===e.button&&void 0===e.buttons||("mouseup"===e.type&&0===e.button&&0===e.buttons||0===e.button&&1===e.buttons))}var Tt,St=Je("querySelector"),jt=Je("querySelectorAll"),kt=Object.freeze({__proto__:null,isReal:Ke,isEl:Ye,isInFrame:Qe,createEl:Ze,textContent:$e,prependTo:et,hasClass:tt,addClass:it,removeClass:nt,toggleClass:rt,setAttributes:at,getAttributes:st,getAttribute:ot,setAttribute:lt,removeAttribute:ut,blockTextSelection:ct,unblockTextSelection:dt,getBoundingClientRect:ht,findPosition:pt,getPointerPosition:ft,isTextNode:mt,emptyEl:gt,normalizeContent:vt,appendContent:yt,insertContent:_t,isSingleLeftClick:bt,$:St,$$:jt}),Ct=!1,wt=function(){if(Ke()&&!1!==Tt.options.autoSetup){var e=Array.prototype.slice.call(s.a.getElementsByTagName("video")),t=Array.prototype.slice.call(s.a.getElementsByTagName("audio")),i=Array.prototype.slice.call(s.a.getElementsByTagName("video-js")),n=e.concat(t,i);if(n&&n.length>0)for(var r=0,a=n.length;r<a;r++){var o=n[r];if(!o||!o.getAttribute){Et(1);break}void 0===o.player&&null!==o.getAttribute("data-setup")&&Tt(o)}else Ct||Et(1)}};function Et(e,t){t&&(Tt=t),r.a.setTimeout(wt,e)}function At(){Ct=!0,r.a.removeEventListener("load",At)}Ke()&&("complete"===s.a.readyState?At():r.a.addEventListener("load",At));var xt,It=function(e){var t=s.a.createElement("style");return t.className=e,t},Pt=function(e,t){e.styleSheet?e.styleSheet.cssText=t:e.textContent=t},Ot=3;function Lt(){return Ot++}r.a.WeakMap||(xt=function(){function e(){this.vdata="vdata"+Math.floor(r.a.performance&&r.a.performance.now()||Date.now()),this.data={}}var t=e.prototype;return t.set=function(e,t){var i=e[this.vdata]||Lt();return e[this.vdata]||(e[this.vdata]=i),this.data[i]=t,this},t.get=function(e){var t=e[this.vdata];if(t)return this.data[t];Re("We have no data for this element",e)},t.has=function(e){return e[this.vdata]in this.data},t.delete=function(e){var t=e[this.vdata];t&&(delete this.data[t],delete e[this.vdata])},e}());var Dt,Mt=r.a.WeakMap?new WeakMap:new xt;function Nt(e,t){if(Mt.has(e)){var i=Mt.get(e);0===i.handlers[t].length&&(delete i.handlers[t],e.removeEventListener?e.removeEventListener(t,i.dispatcher,!1):e.detachEvent&&e.detachEvent("on"+t,i.dispatcher)),Object.getOwnPropertyNames(i.handlers).length<=0&&(delete i.handlers,delete i.dispatcher,delete i.disabled),0===Object.getOwnPropertyNames(i).length&&Mt.delete(e)}}function Rt(e,t,i,n){i.forEach((function(i){e(t,i,n)}))}function Ut(e){if(e.fixed_)return e;function t(){return!0}function i(){return!1}if(!e||!e.isPropagationStopped){var n=e||r.a.event;for(var a in e={},n)"layerX"!==a&&"layerY"!==a&&"keyLocation"!==a&&"webkitMovementX"!==a&&"webkitMovementY"!==a&&("returnValue"===a&&n.preventDefault||(e[a]=n[a]));if(e.target||(e.target=e.srcElement||s.a),e.relatedTarget||(e.relatedTarget=e.fromElement===e.target?e.toElement:e.fromElement),e.preventDefault=function(){n.preventDefault&&n.preventDefault(),e.returnValue=!1,n.returnValue=!1,e.defaultPrevented=!0},e.defaultPrevented=!1,e.stopPropagation=function(){n.stopPropagation&&n.stopPropagation(),e.cancelBubble=!0,n.cancelBubble=!0,e.isPropagationStopped=t},e.isPropagationStopped=i,e.stopImmediatePropagation=function(){n.stopImmediatePropagation&&n.stopImmediatePropagation(),e.isImmediatePropagationStopped=t,e.stopPropagation()},e.isImmediatePropagationStopped=i,null!==e.clientX&&void 0!==e.clientX){var o=s.a.documentElement,l=s.a.body;e.pageX=e.clientX+(o&&o.scrollLeft||l&&l.scrollLeft||0)-(o&&o.clientLeft||l&&l.clientLeft||0),e.pageY=e.clientY+(o&&o.scrollTop||l&&l.scrollTop||0)-(o&&o.clientTop||l&&l.clientTop||0)}e.which=e.charCode||e.keyCode,null!==e.button&&void 0!==e.button&&(e.button=1&e.button?0:4&e.button?1:2&e.button?2:0)}return e.fixed_=!0,e}var zt=["touchstart","touchmove"];function Ft(e,t,i){if(Array.isArray(t))return Rt(Ft,e,t,i);Mt.has(e)||Mt.set(e,{});var n=Mt.get(e);if(n.handlers||(n.handlers={}),n.handlers[t]||(n.handlers[t]=[]),i.guid||(i.guid=Lt()),n.handlers[t].push(i),n.dispatcher||(n.disabled=!1,n.dispatcher=function(t,i){if(!n.disabled){t=Ut(t);var r=n.handlers[t.type];if(r)for(var a=r.slice(0),s=0,o=a.length;s<o&&!t.isImmediatePropagationStopped();s++)try{a[s].call(e,t,i)}catch(e){Re.error(e)}}}),1===n.handlers[t].length)if(e.addEventListener){var a=!1;(function(){if("boolean"!=typeof Dt){Dt=!1;try{var e=Object.defineProperty({},"passive",{get:function(){Dt=!0}});r.a.addEventListener("test",null,e),r.a.removeEventListener("test",null,e)}catch(e){}}return Dt})()&&zt.indexOf(t)>-1&&(a={passive:!0}),e.addEventListener(t,n.dispatcher,a)}else e.attachEvent&&e.attachEvent("on"+t,n.dispatcher)}function Bt(e,t,i){if(Mt.has(e)){var n=Mt.get(e);if(n.handlers){if(Array.isArray(t))return Rt(Bt,e,t,i);var r=function(e,t){n.handlers[t]=[],Nt(e,t)};if(void 0!==t){var a=n.handlers[t];if(a)if(i){if(i.guid)for(var s=0;s<a.length;s++)a[s].guid===i.guid&&a.splice(s--,1);Nt(e,t)}else r(e,t)}else for(var o in n.handlers)Object.prototype.hasOwnProperty.call(n.handlers||{},o)&&r(e,o)}}}function Vt(e,t,i){var n=Mt.has(e)?Mt.get(e):{},r=e.parentNode||e.ownerDocument;if("string"==typeof t?t={type:t,target:e}:t.target||(t.target=e),t=Ut(t),n.dispatcher&&n.dispatcher.call(e,t,i),r&&!t.isPropagationStopped()&&!0===t.bubbles)Vt.call(null,r,t,i);else if(!r&&!t.defaultPrevented&&t.target&&t.target[t.type]){Mt.has(t.target)||Mt.set(t.target,{});var a=Mt.get(t.target);t.target[t.type]&&(a.disabled=!0,"function"==typeof t.target[t.type]&&t.target[t.type](),a.disabled=!1)}return!t.defaultPrevented}function Ht(e,t,i){if(Array.isArray(t))return Rt(Ht,e,t,i);var n=function n(){Bt(e,t,n),i.apply(this,arguments)};n.guid=i.guid=i.guid||Lt(),Ft(e,t,n)}function qt(e,t,i){var n=function n(){Bt(e,t,n),i.apply(this,arguments)};n.guid=i.guid=i.guid||Lt(),Ft(e,t,n)}var Wt,Gt=Object.freeze({__proto__:null,fixEvent:Ut,on:Ft,off:Bt,trigger:Vt,one:Ht,any:qt}),Xt=function(e,t,i){t.guid||(t.guid=Lt());var n=t.bind(e);return n.guid=i?i+"_"+t.guid:t.guid,n},Kt=function(e,t){var i=r.a.performance.now();return function(){var n=r.a.performance.now();n-i>=t&&(e.apply(void 0,arguments),i=n)}},Yt=function(){};Yt.prototype.allowedEvents_={},Yt.prototype.on=function(e,t){var i=this.addEventListener;this.addEventListener=function(){},Ft(this,e,t),this.addEventListener=i},Yt.prototype.addEventListener=Yt.prototype.on,Yt.prototype.off=function(e,t){Bt(this,e,t)},Yt.prototype.removeEventListener=Yt.prototype.off,Yt.prototype.one=function(e,t){var i=this.addEventListener;this.addEventListener=function(){},Ht(this,e,t),this.addEventListener=i},Yt.prototype.any=function(e,t){var i=this.addEventListener;this.addEventListener=function(){},qt(this,e,t),this.addEventListener=i},Yt.prototype.trigger=function(e){var t=e.type||e;"string"==typeof e&&(e={type:t}),e=Ut(e),this.allowedEvents_[t]&&this["on"+t]&&this["on"+t](e),Vt(this,e)},Yt.prototype.dispatchEvent=Yt.prototype.trigger,Yt.prototype.queueTrigger=function(e){var t=this;Wt||(Wt=new Map);var i=e.type||e,n=Wt.get(this);n||(n=new Map,Wt.set(this,n));var a=n.get(i);n.delete(i),r.a.clearTimeout(a);var s=r.a.setTimeout((function(){0===n.size&&(n=null,Wt.delete(t)),t.trigger(e)}),0);n.set(i,s)};var Qt=function(e){return e instanceof Yt||!!e.eventBusEl_&&["on","one","off","trigger"].every((function(t){return"function"==typeof e[t]}))},Jt=function(e){return"string"==typeof e&&/\S/.test(e)||Array.isArray(e)&&!!e.length},Zt=function(e){if(!e.nodeName&&!Qt(e))throw new Error("Invalid target; must be a DOM node or evented object.")},$t=function(e){if(!Jt(e))throw new Error("Invalid event type; must be a non-empty string or array.")},ei=function(e){if("function"!=typeof e)throw new Error("Invalid listener; must be a function.")},ti=function(e,t){var i,n,r,a=t.length<3||t[0]===e||t[0]===e.eventBusEl_;return a?(i=e.eventBusEl_,t.length>=3&&t.shift(),n=t[0],r=t[1]):(i=t[0],n=t[1],r=t[2]),Zt(i),$t(n),ei(r),{isTargetingSelf:a,target:i,type:n,listener:r=Xt(e,r)}},ii=function(e,t,i,n){Zt(e),e.nodeName?Gt[t](e,i,n):e[t](i,n)},ni={on:function(){for(var e=this,t=arguments.length,i=new Array(t),n=0;n<t;n++)i[n]=arguments[n];var r=ti(this,i),a=r.isTargetingSelf,s=r.target,o=r.type,l=r.listener;if(ii(s,"on",o,l),!a){var u=function(){return e.off(s,o,l)};u.guid=l.guid;var c=function(){return e.off("dispose",u)};c.guid=l.guid,ii(this,"on","dispose",u),ii(s,"on","dispose",c)}},one:function(){for(var e=this,t=arguments.length,i=new Array(t),n=0;n<t;n++)i[n]=arguments[n];var r=ti(this,i),a=r.isTargetingSelf,s=r.target,o=r.type,l=r.listener;if(a)ii(s,"one",o,l);else{var u=function t(){e.off(s,o,t);for(var i=arguments.length,n=new Array(i),r=0;r<i;r++)n[r]=arguments[r];l.apply(null,n)};u.guid=l.guid,ii(s,"one",o,u)}},any:function(){for(var e=this,t=arguments.length,i=new Array(t),n=0;n<t;n++)i[n]=arguments[n];var r=ti(this,i),a=r.isTargetingSelf,s=r.target,o=r.type,l=r.listener;if(a)ii(s,"any",o,l);else{var u=function t(){e.off(s,o,t);for(var i=arguments.length,n=new Array(i),r=0;r<i;r++)n[r]=arguments[r];l.apply(null,n)};u.guid=l.guid,ii(s,"any",o,u)}},off:function(e,t,i){if(!e||Jt(e))Bt(this.eventBusEl_,e,t);else{var n=e,r=t;Zt(n),$t(r),ei(i),i=Xt(this,i),this.off("dispose",i),n.nodeName?(Bt(n,r,i),Bt(n,"dispose",i)):Qt(n)&&(n.off(r,i),n.off("dispose",i))}},trigger:function(e,t){return Vt(this.eventBusEl_,e,t)}};function ri(e,t){void 0===t&&(t={});var i=t.eventBusKey;if(i){if(!e[i].nodeName)throw new Error('The eventBusKey "'+i+'" does not refer to an element.');e.eventBusEl_=e[i]}else e.eventBusEl_=Ze("span",{className:"vjs-event-bus"});return Ve(e,ni),e.eventedCallbacks&&e.eventedCallbacks.forEach((function(e){e()})),e.on("dispose",(function(){e.off(),r.a.setTimeout((function(){e.eventBusEl_=null}),0)})),e}var ai={state:{},setState:function(e){var t,i=this;return"function"==typeof e&&(e=e()),Be(e,(function(e,n){i.state[n]!==e&&((t=t||{})[n]={from:i.state[n],to:e}),i.state[n]=e})),t&&Qt(this)&&this.trigger({changes:t,type:"statechanged"}),t}};function si(e,t){return Ve(e,ai),e.state=Ve({},e.state,t),"function"==typeof e.handleStateChanged&&Qt(e)&&e.on("statechanged",e.handleStateChanged),e}var oi=function(e){return"string"!=typeof e?e:e.replace(/./,(function(e){return e.toLowerCase()}))},li=function(e){return"string"!=typeof e?e:e.replace(/./,(function(e){return e.toUpperCase()}))};function ui(){for(var e={},t=arguments.length,i=new Array(t),n=0;n<t;n++)i[n]=arguments[n];return i.forEach((function(t){t&&Be(t,(function(t,i){qe(t)?(qe(e[i])||(e[i]={}),e[i]=ui(e[i],t)):e[i]=t}))})),e}var ci=function(){function e(){this.map_={}}var t=e.prototype;return t.has=function(e){return e in this.map_},t.delete=function(e){var t=this.has(e);return delete this.map_[e],t},t.set=function(e,t){return this.set_[e]=t,this},t.forEach=function(e,t){for(var i in this.map_)e.call(t,this.map_[i],i,this)},e}(),di=r.a.Map?r.a.Map:ci,hi=function(){function e(){this.set_={}}var t=e.prototype;return t.has=function(e){return e in this.set_},t.delete=function(e){var t=this.has(e);return delete this.set_[e],t},t.add=function(e){return this.set_[e]=1,this},t.forEach=function(e,t){for(var i in this.set_)e.call(t,i,i,this)},e}(),pi=r.a.Set?r.a.Set:hi,fi=function(){function e(e,t,i){if(!e&&this.play?this.player_=e=this:this.player_=e,this.isDisposed_=!1,this.parentComponent_=null,this.options_=ui({},this.options_),t=this.options_=ui(this.options_,t),this.id_=t.id||t.el&&t.el.id,!this.id_){var n=e&&e.id&&e.id()||"no_player";this.id_=n+"_component_"+Lt()}this.name_=t.name||null,t.el?this.el_=t.el:!1!==t.createEl&&(this.el_=this.createEl()),!1!==t.evented&&ri(this,{eventBusKey:this.el_?"el_":null}),si(this,this.constructor.defaultState),this.children_=[],this.childIndex_={},this.childNameIndex_={},this.setTimeoutIds_=new pi,this.setIntervalIds_=new pi,this.rafIds_=new pi,this.namedRafs_=new di,this.clearingTimersOnDispose_=!1,!1!==t.initChildren&&this.initChildren(),this.ready(i),!1!==t.reportTouchActivity&&this.enableTouchActivity()}var t=e.prototype;return t.dispose=function(){if(!this.isDisposed_){if(this.trigger({type:"dispose",bubbles:!1}),this.isDisposed_=!0,this.children_)for(var e=this.children_.length-1;e>=0;e--)this.children_[e].dispose&&this.children_[e].dispose();this.children_=null,this.childIndex_=null,this.childNameIndex_=null,this.parentComponent_=null,this.el_&&(this.el_.parentNode&&this.el_.parentNode.removeChild(this.el_),Mt.has(this.el_)&&Mt.delete(this.el_),this.el_=null),this.player_=null}},t.isDisposed=function(){return Boolean(this.isDisposed_)},t.player=function(){return this.player_},t.options=function(e){return e?(this.options_=ui(this.options_,e),this.options_):this.options_},t.el=function(){return this.el_},t.createEl=function(e,t,i){return Ze(e,t,i)},t.localize=function(e,t,i){void 0===i&&(i=e);var n=this.player_.language&&this.player_.language(),r=this.player_.languages&&this.player_.languages(),a=r&&r[n],s=n&&n.split("-")[0],o=r&&r[s],l=i;return a&&a[e]?l=a[e]:o&&o[e]&&(l=o[e]),t&&(l=l.replace(/\{(\d+)\}/g,(function(e,i){var n=t[i-1],r=n;return void 0===n&&(r=e),r}))),l},t.contentEl=function(){return this.contentEl_||this.el_},t.id=function(){return this.id_},t.name=function(){return this.name_},t.children=function(){return this.children_},t.getChildById=function(e){return this.childIndex_[e]},t.getChild=function(e){if(e)return this.childNameIndex_[e]},t.getDescendant=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];t=t.reduce((function(e,t){return e.concat(t)}),[]);for(var n=this,r=0;r<t.length;r++)if(!(n=n.getChild(t[r]))||!n.getChild)return;return n},t.addChild=function(t,i,n){var r,a;if(void 0===i&&(i={}),void 0===n&&(n=this.children_.length),"string"==typeof t){a=li(t);var s=i.componentClass||a;i.name=a;var o=e.getComponent(s);if(!o)throw new Error("Component "+s+" does not exist");if("function"!=typeof o)return null;r=new o(this.player_||this,i)}else r=t;if(r.parentComponent_&&r.parentComponent_.removeChild(r),this.children_.splice(n,0,r),r.parentComponent_=this,"function"==typeof r.id&&(this.childIndex_[r.id()]=r),(a=a||r.name&&li(r.name()))&&(this.childNameIndex_[a]=r,this.childNameIndex_[oi(a)]=r),"function"==typeof r.el&&r.el()){var l=null;this.children_[n+1]&&(this.children_[n+1].el_?l=this.children_[n+1].el_:Ye(this.children_[n+1])&&(l=this.children_[n+1])),this.contentEl().insertBefore(r.el(),l)}return r},t.removeChild=function(e){if("string"==typeof e&&(e=this.getChild(e)),e&&this.children_){for(var t=!1,i=this.children_.length-1;i>=0;i--)if(this.children_[i]===e){t=!0,this.children_.splice(i,1);break}if(t){e.parentComponent_=null,this.childIndex_[e.id()]=null,this.childNameIndex_[li(e.name())]=null,this.childNameIndex_[oi(e.name())]=null;var n=e.el();n&&n.parentNode===this.contentEl()&&this.contentEl().removeChild(e.el())}}},t.initChildren=function(){var t=this,i=this.options_.children;if(i){var n,r=this.options_,a=e.getComponent("Tech");(n=Array.isArray(i)?i:Object.keys(i)).concat(Object.keys(this.options_).filter((function(e){return!n.some((function(t){return"string"==typeof t?e===t:e===t.name}))}))).map((function(e){var n,r;return"string"==typeof e?r=i[n=e]||t.options_[n]||{}:(n=e.name,r=e),{name:n,opts:r}})).filter((function(t){var i=e.getComponent(t.opts.componentClass||li(t.name));return i&&!a.isTech(i)})).forEach((function(e){var i=e.name,n=e.opts;if(void 0!==r[i]&&(n=r[i]),!1!==n){!0===n&&(n={}),n.playerOptions=t.options_.playerOptions;var a=t.addChild(i,n);a&&(t[i]=a)}}))}},t.buildCSSClass=function(){return""},t.ready=function(e,t){if(void 0===t&&(t=!1),e)return this.isReady_?void(t?e.call(this):this.setTimeout(e,1)):(this.readyQueue_=this.readyQueue_||[],void this.readyQueue_.push(e))},t.triggerReady=function(){this.isReady_=!0,this.setTimeout((function(){var e=this.readyQueue_;this.readyQueue_=[],e&&e.length>0&&e.forEach((function(e){e.call(this)}),this),this.trigger("ready")}),1)},t.$=function(e,t){return St(e,t||this.contentEl())},t.$$=function(e,t){return jt(e,t||this.contentEl())},t.hasClass=function(e){return tt(this.el_,e)},t.addClass=function(e){it(this.el_,e)},t.removeClass=function(e){nt(this.el_,e)},t.toggleClass=function(e,t){rt(this.el_,e,t)},t.show=function(){this.removeClass("vjs-hidden")},t.hide=function(){this.addClass("vjs-hidden")},t.lockShowing=function(){this.addClass("vjs-lock-showing")},t.unlockShowing=function(){this.removeClass("vjs-lock-showing")},t.getAttribute=function(e){return ot(this.el_,e)},t.setAttribute=function(e,t){lt(this.el_,e,t)},t.removeAttribute=function(e){ut(this.el_,e)},t.width=function(e,t){return this.dimension("width",e,t)},t.height=function(e,t){return this.dimension("height",e,t)},t.dimensions=function(e,t){this.width(e,!0),this.height(t)},t.dimension=function(e,t,i){if(void 0!==t)return null!==t&&t==t||(t=0),-1!==(""+t).indexOf("%")||-1!==(""+t).indexOf("px")?this.el_.style[e]=t:this.el_.style[e]="auto"===t?"":t+"px",void(i||this.trigger("componentresize"));if(!this.el_)return 0;var n=this.el_.style[e],r=n.indexOf("px");return-1!==r?parseInt(n.slice(0,r),10):parseInt(this.el_["offset"+li(e)],10)},t.currentDimension=function(e){var t=0;if("width"!==e&&"height"!==e)throw new Error("currentDimension only accepts width or height value");if(t=We(this.el_,e),0===(t=parseFloat(t))||isNaN(t)){var i="offset"+li(e);t=this.el_[i]}return t},t.currentDimensions=function(){return{width:this.currentDimension("width"),height:this.currentDimension("height")}},t.currentWidth=function(){return this.currentDimension("width")},t.currentHeight=function(){return this.currentDimension("height")},t.focus=function(){this.el_.focus()},t.blur=function(){this.el_.blur()},t.handleKeyDown=function(e){this.player_&&(e.stopPropagation(),this.player_.handleKeyDown(e))},t.handleKeyPress=function(e){this.handleKeyDown(e)},t.emitTapEvents=function(){var e,t=0,i=null;this.on("touchstart",(function(n){1===n.touches.length&&(i={pageX:n.touches[0].pageX,pageY:n.touches[0].pageY},t=r.a.performance.now(),e=!0)})),this.on("touchmove",(function(t){if(t.touches.length>1)e=!1;else if(i){var n=t.touches[0].pageX-i.pageX,r=t.touches[0].pageY-i.pageY;Math.sqrt(n*n+r*r)>10&&(e=!1)}}));var n=function(){e=!1};this.on("touchleave",n),this.on("touchcancel",n),this.on("touchend",(function(n){(i=null,!0===e)&&(r.a.performance.now()-t<200&&(n.preventDefault(),this.trigger("tap")))}))},t.enableTouchActivity=function(){if(this.player()&&this.player().reportUserActivity){var e,t=Xt(this.player(),this.player().reportUserActivity);this.on("touchstart",(function(){t(),this.clearInterval(e),e=this.setInterval(t,250)}));var i=function(i){t(),this.clearInterval(e)};this.on("touchmove",t),this.on("touchend",i),this.on("touchcancel",i)}},t.setTimeout=function(e,t){var i,n=this;return e=Xt(this,e),this.clearTimersOnDispose_(),i=r.a.setTimeout((function(){n.setTimeoutIds_.has(i)&&n.setTimeoutIds_.delete(i),e()}),t),this.setTimeoutIds_.add(i),i},t.clearTimeout=function(e){return this.setTimeoutIds_.has(e)&&(this.setTimeoutIds_.delete(e),r.a.clearTimeout(e)),e},t.setInterval=function(e,t){e=Xt(this,e),this.clearTimersOnDispose_();var i=r.a.setInterval(e,t);return this.setIntervalIds_.add(i),i},t.clearInterval=function(e){return this.setIntervalIds_.has(e)&&(this.setIntervalIds_.delete(e),r.a.clearInterval(e)),e},t.requestAnimationFrame=function(e){var t,i=this;return this.supportsRaf_?(this.clearTimersOnDispose_(),e=Xt(this,e),t=r.a.requestAnimationFrame((function(){i.rafIds_.has(t)&&i.rafIds_.delete(t),e()})),this.rafIds_.add(t),t):this.setTimeout(e,1e3/60)},t.requestNamedAnimationFrame=function(e,t){var i=this;if(!this.namedRafs_.has(e)){this.clearTimersOnDispose_(),t=Xt(this,t);var n=this.requestAnimationFrame((function(){t(),i.namedRafs_.has(e)&&i.namedRafs_.delete(e)}));return this.namedRafs_.set(e,n),e}},t.cancelNamedAnimationFrame=function(e){this.namedRafs_.has(e)&&(this.cancelAnimationFrame(this.namedRafs_.get(e)),this.namedRafs_.delete(e))},t.cancelAnimationFrame=function(e){return this.supportsRaf_?(this.rafIds_.has(e)&&(this.rafIds_.delete(e),r.a.cancelAnimationFrame(e)),e):this.clearTimeout(e)},t.clearTimersOnDispose_=function(){var e=this;this.clearingTimersOnDispose_||(this.clearingTimersOnDispose_=!0,this.one("dispose",(function(){[["namedRafs_","cancelNamedAnimationFrame"],["rafIds_","cancelAnimationFrame"],["setTimeoutIds_","clearTimeout"],["setIntervalIds_","clearInterval"]].forEach((function(t){var i=t[0],n=t[1];e[i].forEach((function(t,i){return e[n](i)}))})),e.clearingTimersOnDispose_=!1})))},e.registerComponent=function(t,i){if("string"!=typeof t||!t)throw new Error('Illegal component name, "'+t+'"; must be a non-empty string.');var n,r=e.getComponent("Tech"),a=r&&r.isTech(i),s=e===i||e.prototype.isPrototypeOf(i.prototype);if(a||!s)throw n=a?"techs must be registered using Tech.registerTech()":"must be a Component subclass",new Error('Illegal component, "'+t+'"; '+n+".");t=li(t),e.components_||(e.components_={});var o=e.getComponent("Player");if("Player"===t&&o&&o.players){var l=o.players,u=Object.keys(l);if(l&&u.length>0&&u.map((function(e){return l[e]})).every(Boolean))throw new Error("Can not register Player component after player has been created.")}return e.components_[t]=i,e.components_[oi(t)]=i,i},e.getComponent=function(t){if(t&&e.components_)return e.components_[t]},e}();fi.prototype.supportsRaf_="function"==typeof r.a.requestAnimationFrame&&"function"==typeof r.a.cancelAnimationFrame,fi.registerComponent("Component",fi);var mi,gi=r.a.navigator&&r.a.navigator.userAgent||"",vi=/AppleWebKit\/([\d.]+)/i.exec(gi),yi=vi?parseFloat(vi.pop()):null,_i=/iPod/i.test(gi),bi=(mi=gi.match(/OS (\d+)_/i))&&mi[1]?mi[1]:null,Ti=/Android/i.test(gi),Si=function(){var e=gi.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);if(!e)return null;var t=e[1]&&parseFloat(e[1]),i=e[2]&&parseFloat(e[2]);return t&&i?parseFloat(e[1]+"."+e[2]):t||null}(),ji=Ti&&Si<5&&yi<537,ki=/Firefox/i.test(gi),Ci=/Edg/i.test(gi),wi=!Ci&&(/Chrome/i.test(gi)||/CriOS/i.test(gi)),Ei=function(){var e=gi.match(/(Chrome|CriOS)\/(\d+)/);return e&&e[2]?parseFloat(e[2]):null}(),Ai=function(){var e=/MSIE\s(\d+)\.\d/.exec(gi),t=e&&parseFloat(e[1]);return!t&&/Trident\/7.0/i.test(gi)&&/rv:11.0/.test(gi)&&(t=11),t}(),xi=/Safari/i.test(gi)&&!wi&&!Ti&&!Ci,Ii=/Windows/i.test(gi),Pi=Ke()&&("ontouchstart"in r.a||r.a.navigator.maxTouchPoints||r.a.DocumentTouch&&r.a.document instanceof r.a.DocumentTouch),Oi=/iPad/i.test(gi)||xi&&Pi&&!/iPhone/i.test(gi),Li=/iPhone/i.test(gi)&&!Oi,Di=Li||Oi||_i,Mi=(xi||Di)&&!wi,Ni=Object.freeze({__proto__:null,IS_IPOD:_i,IOS_VERSION:bi,IS_ANDROID:Ti,ANDROID_VERSION:Si,IS_NATIVE_ANDROID:ji,IS_FIREFOX:ki,IS_EDGE:Ci,IS_CHROME:wi,CHROME_VERSION:Ei,IE_VERSION:Ai,IS_SAFARI:xi,IS_WINDOWS:Ii,TOUCH_ENABLED:Pi,IS_IPAD:Oi,IS_IPHONE:Li,IS_IOS:Di,IS_ANY_SAFARI:Mi});function Ri(e,t,i,n){return function(e,t,i){if("number"!=typeof t||t<0||t>i)throw new Error("Failed to execute '"+e+"' on 'TimeRanges': The index provided ("+t+") is non-numeric or out of bounds (0-"+i+").")}(e,n,i.length-1),i[n][t]}function Ui(e){return void 0===e||0===e.length?{length:0,start:function(){throw new Error("This TimeRanges object is empty")},end:function(){throw new Error("This TimeRanges object is empty")}}:{length:e.length,start:Ri.bind(null,"start",0,e),end:Ri.bind(null,"end",1,e)}}function zi(e,t){return Array.isArray(e)?Ui(e):void 0===e||void 0===t?Ui():Ui([[e,t]])}function Fi(e,t){var i,n,r=0;if(!t)return 0;e&&e.length||(e=zi(0,0));for(var a=0;a<e.length;a++)i=e.start(a),(n=e.end(a))>t&&(n=t),r+=n-i;return r/t}for(var Bi,Vi={prefixed:!0},Hi=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror","fullscreen"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror","-webkit-full-screen"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror","-moz-full-screen"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError","-ms-fullscreen"]],qi=Hi[0],Wi=0;Wi<Hi.length;Wi++)if(Hi[Wi][1]in s.a){Bi=Hi[Wi];break}if(Bi){for(var Gi=0;Gi<Bi.length;Gi++)Vi[qi[Gi]]=Bi[Gi];Vi.prefixed=Bi[0]!==qi[0]}function Xi(e){if(e instanceof Xi)return e;"number"==typeof e?this.code=e:"string"==typeof e?this.message=e:He(e)&&("number"==typeof e.code&&(this.code=e.code),Ve(this,e)),this.message||(this.message=Xi.defaultMessages[this.code]||"")}Xi.prototype.code=0,Xi.prototype.message="",Xi.prototype.status=null,Xi.errorTypes=["MEDIA_ERR_CUSTOM","MEDIA_ERR_ABORTED","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","MEDIA_ERR_ENCRYPTED"],Xi.defaultMessages={1:"You aborted the media playback",2:"A network error caused the media download to fail part-way.",3:"The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",4:"The media could not be loaded, either because the server or network failed or because the format is not supported.",5:"The media is encrypted and we do not have the keys to decrypt it."};for(var Ki=0;Ki<Xi.errorTypes.length;Ki++)Xi[Xi.errorTypes[Ki]]=Ki,Xi.prototype[Xi.errorTypes[Ki]]=Ki;function Yi(e){return null!=e&&"function"==typeof e.then}function Qi(e){Yi(e)&&e.then(null,(function(e){}))}var Ji=function(e){return["kind","label","language","id","inBandMetadataTrackDispatchType","mode","src"].reduce((function(t,i,n){return e[i]&&(t[i]=e[i]),t}),{cues:e.cues&&Array.prototype.map.call(e.cues,(function(e){return{startTime:e.startTime,endTime:e.endTime,text:e.text,id:e.id}}))})},Zi=function(e){var t=e.$$("track"),i=Array.prototype.map.call(t,(function(e){return e.track}));return Array.prototype.map.call(t,(function(e){var t=Ji(e.track);return e.src&&(t.src=e.src),t})).concat(Array.prototype.filter.call(e.textTracks(),(function(e){return-1===i.indexOf(e)})).map(Ji))},$i=function(e,t){return e.forEach((function(e){var i=t.addRemoteTextTrack(e).track;!e.src&&e.cues&&e.cues.forEach((function(e){return i.addCue(e)}))})),t.textTracks()},en=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).opened_=n.hasBeenOpened_=n.hasBeenFilled_=!1,n.closeable(!n.options_.uncloseable),n.content(n.options_.content),n.contentEl_=Ze("div",{className:"vjs-modal-dialog-content"},{role:"document"}),n.descEl_=Ze("p",{className:"vjs-modal-dialog-description vjs-control-text",id:n.el().getAttribute("aria-describedby")}),$e(n.descEl_,n.description()),n.el_.appendChild(n.descEl_),n.el_.appendChild(n.contentEl_),n}h()(t,e);var i=t.prototype;return i.createEl=function(){return e.prototype.createEl.call(this,"div",{className:this.buildCSSClass(),tabIndex:-1},{"aria-describedby":this.id()+"_description","aria-hidden":"true","aria-label":this.label(),role:"dialog"})},i.dispose=function(){this.contentEl_=null,this.descEl_=null,this.previouslyActiveEl_=null,e.prototype.dispose.call(this)},i.buildCSSClass=function(){return"vjs-modal-dialog vjs-hidden "+e.prototype.buildCSSClass.call(this)},i.label=function(){return this.localize(this.options_.label||"Modal Window")},i.description=function(){var e=this.options_.description||this.localize("This is a modal window.");return this.closeable()&&(e+=" "+this.localize("This modal can be closed by pressing the Escape key or activating the close button.")),e},i.open=function(){if(!this.opened_){var e=this.player();this.trigger("beforemodalopen"),this.opened_=!0,(this.options_.fillAlways||!this.hasBeenOpened_&&!this.hasBeenFilled_)&&this.fill(),this.wasPlaying_=!e.paused(),this.options_.pauseOnOpen&&this.wasPlaying_&&e.pause(),this.on("keydown",this.handleKeyDown),this.hadControls_=e.controls(),e.controls(!1),this.show(),this.conditionalFocus_(),this.el().setAttribute("aria-hidden","false"),this.trigger("modalopen"),this.hasBeenOpened_=!0}},i.opened=function(e){return"boolean"==typeof e&&this[e?"open":"close"](),this.opened_},i.close=function(){if(this.opened_){var e=this.player();this.trigger("beforemodalclose"),this.opened_=!1,this.wasPlaying_&&this.options_.pauseOnOpen&&e.play(),this.off("keydown",this.handleKeyDown),this.hadControls_&&e.controls(!0),this.hide(),this.el().setAttribute("aria-hidden","true"),this.trigger("modalclose"),this.conditionalBlur_(),this.options_.temporary&&this.dispose()}},i.closeable=function(e){if("boolean"==typeof e){var t=this.closeable_=!!e,i=this.getChild("closeButton");if(t&&!i){var n=this.contentEl_;this.contentEl_=this.el_,i=this.addChild("closeButton",{controlText:"Close Modal Dialog"}),this.contentEl_=n,this.on(i,"close",this.close)}!t&&i&&(this.off(i,"close",this.close),this.removeChild(i),i.dispose())}return this.closeable_},i.fill=function(){this.fillWith(this.content())},i.fillWith=function(e){var t=this.contentEl(),i=t.parentNode,n=t.nextSibling;this.trigger("beforemodalfill"),this.hasBeenFilled_=!0,i.removeChild(t),this.empty(),_t(t,e),this.trigger("modalfill"),n?i.insertBefore(t,n):i.appendChild(t);var r=this.getChild("closeButton");r&&i.appendChild(r.el_)},i.empty=function(){this.trigger("beforemodalempty"),gt(this.contentEl()),this.trigger("modalempty")},i.content=function(e){return void 0!==e&&(this.content_=e),this.content_},i.conditionalFocus_=function(){var e=s.a.activeElement,t=this.player_.el_;this.previouslyActiveEl_=null,(t.contains(e)||t===e)&&(this.previouslyActiveEl_=e,this.focus())},i.conditionalBlur_=function(){this.previouslyActiveEl_&&(this.previouslyActiveEl_.focus(),this.previouslyActiveEl_=null)},i.handleKeyDown=function(e){if(e.stopPropagation(),g.a.isEventKey(e,"Escape")&&this.closeable())return e.preventDefault(),void this.close();if(g.a.isEventKey(e,"Tab")){for(var t,i=this.focusableEls_(),n=this.el_.querySelector(":focus"),r=0;r<i.length;r++)if(n===i[r]){t=r;break}s.a.activeElement===this.el_&&(t=0),e.shiftKey&&0===t?(i[i.length-1].focus(),e.preventDefault()):e.shiftKey||t!==i.length-1||(i[0].focus(),e.preventDefault())}},i.focusableEls_=function(){var e=this.el_.querySelectorAll("*");return Array.prototype.filter.call(e,(function(e){return(e instanceof r.a.HTMLAnchorElement||e instanceof r.a.HTMLAreaElement)&&e.hasAttribute("href")||(e instanceof r.a.HTMLInputElement||e instanceof r.a.HTMLSelectElement||e instanceof r.a.HTMLTextAreaElement||e instanceof r.a.HTMLButtonElement)&&!e.hasAttribute("disabled")||e instanceof r.a.HTMLIFrameElement||e instanceof r.a.HTMLObjectElement||e instanceof r.a.HTMLEmbedElement||e.hasAttribute("tabindex")&&-1!==e.getAttribute("tabindex")||e.hasAttribute("contenteditable")}))},t}(fi);en.prototype.options_={pauseOnOpen:!0,temporary:!0},fi.registerComponent("ModalDialog",en);var tn=function(e){function t(t){var i;void 0===t&&(t=[]),(i=e.call(this)||this).tracks_=[],Object.defineProperty(c()(i),"length",{get:function(){return this.tracks_.length}});for(var n=0;n<t.length;n++)i.addTrack(t[n]);return i}h()(t,e);var i=t.prototype;return i.addTrack=function(e){var t=this.tracks_.length;""+t in this||Object.defineProperty(this,t,{get:function(){return this.tracks_[t]}}),-1===this.tracks_.indexOf(e)&&(this.tracks_.push(e),this.trigger({track:e,type:"addtrack",target:this}))},i.removeTrack=function(e){for(var t,i=0,n=this.length;i<n;i++)if(this[i]===e){(t=this[i]).off&&t.off(),this.tracks_.splice(i,1);break}t&&this.trigger({track:t,type:"removetrack",target:this})},i.getTrackById=function(e){for(var t=null,i=0,n=this.length;i<n;i++){var r=this[i];if(r.id===e){t=r;break}}return t},t}(Yt);for(var nn in tn.prototype.allowedEvents_={change:"change",addtrack:"addtrack",removetrack:"removetrack"},tn.prototype.allowedEvents_)tn.prototype["on"+nn]=null;var rn=function(e,t){for(var i=0;i<e.length;i++)Object.keys(e[i]).length&&t.id!==e[i].id&&(e[i].enabled=!1)},an=function(e){function t(t){var i;void 0===t&&(t=[]);for(var n=t.length-1;n>=0;n--)if(t[n].enabled){rn(t,t[n]);break}return(i=e.call(this,t)||this).changing_=!1,i}h()(t,e);var i=t.prototype;return i.addTrack=function(t){var i=this;t.enabled&&rn(this,t),e.prototype.addTrack.call(this,t),t.addEventListener&&(t.enabledChange_=function(){i.changing_||(i.changing_=!0,rn(i,t),i.changing_=!1,i.trigger("change"))},t.addEventListener("enabledchange",t.enabledChange_))},i.removeTrack=function(t){e.prototype.removeTrack.call(this,t),t.removeEventListener&&t.enabledChange_&&(t.removeEventListener("enabledchange",t.enabledChange_),t.enabledChange_=null)},t}(tn),sn=function(e,t){for(var i=0;i<e.length;i++)Object.keys(e[i]).length&&t.id!==e[i].id&&(e[i].selected=!1)},on=function(e){function t(t){var i;void 0===t&&(t=[]);for(var n=t.length-1;n>=0;n--)if(t[n].selected){sn(t,t[n]);break}return(i=e.call(this,t)||this).changing_=!1,Object.defineProperty(c()(i),"selectedIndex",{get:function(){for(var e=0;e<this.length;e++)if(this[e].selected)return e;return-1},set:function(){}}),i}h()(t,e);var i=t.prototype;return i.addTrack=function(t){var i=this;t.selected&&sn(this,t),e.prototype.addTrack.call(this,t),t.addEventListener&&(t.selectedChange_=function(){i.changing_||(i.changing_=!0,sn(i,t),i.changing_=!1,i.trigger("change"))},t.addEventListener("selectedchange",t.selectedChange_))},i.removeTrack=function(t){e.prototype.removeTrack.call(this,t),t.removeEventListener&&t.selectedChange_&&(t.removeEventListener("selectedchange",t.selectedChange_),t.selectedChange_=null)},t}(tn),ln=function(e){function t(){return e.apply(this,arguments)||this}h()(t,e);var i=t.prototype;return i.addTrack=function(t){var i=this;e.prototype.addTrack.call(this,t),this.queueChange_||(this.queueChange_=function(){return i.queueTrigger("change")}),this.triggerSelectedlanguagechange||(this.triggerSelectedlanguagechange_=function(){return i.trigger("selectedlanguagechange")}),t.addEventListener("modechange",this.queueChange_);-1===["metadata","chapters"].indexOf(t.kind)&&t.addEventListener("modechange",this.triggerSelectedlanguagechange_)},i.removeTrack=function(t){e.prototype.removeTrack.call(this,t),t.removeEventListener&&(this.queueChange_&&t.removeEventListener("modechange",this.queueChange_),this.selectedlanguagechange_&&t.removeEventListener("modechange",this.triggerSelectedlanguagechange_))},t}(tn),un=function(){function e(e){void 0===e&&(e=[]),this.trackElements_=[],Object.defineProperty(this,"length",{get:function(){return this.trackElements_.length}});for(var t=0,i=e.length;t<i;t++)this.addTrackElement_(e[t])}var t=e.prototype;return t.addTrackElement_=function(e){var t=this.trackElements_.length;""+t in this||Object.defineProperty(this,t,{get:function(){return this.trackElements_[t]}}),-1===this.trackElements_.indexOf(e)&&this.trackElements_.push(e)},t.getTrackElementByTrack_=function(e){for(var t,i=0,n=this.trackElements_.length;i<n;i++)if(e===this.trackElements_[i].track){t=this.trackElements_[i];break}return t},t.removeTrackElement_=function(e){for(var t=0,i=this.trackElements_.length;t<i;t++)if(e===this.trackElements_[t]){this.trackElements_[t].track&&"function"==typeof this.trackElements_[t].track.off&&this.trackElements_[t].track.off(),"function"==typeof this.trackElements_[t].off&&this.trackElements_[t].off(),this.trackElements_.splice(t,1);break}},e}(),cn=function(){function e(t){e.prototype.setCues_.call(this,t),Object.defineProperty(this,"length",{get:function(){return this.length_}})}var t=e.prototype;return t.setCues_=function(e){var t=this.length||0,i=0,n=e.length;this.cues_=e,this.length_=e.length;var r=function(e){""+e in this||Object.defineProperty(this,""+e,{get:function(){return this.cues_[e]}})};if(t<n)for(i=t;i<n;i++)r.call(this,i)},t.getCueById=function(e){for(var t=null,i=0,n=this.length;i<n;i++){var r=this[i];if(r.id===e){t=r;break}}return t},e}(),dn={alternative:"alternative",captions:"captions",main:"main",sign:"sign",subtitles:"subtitles",commentary:"commentary"},hn={alternative:"alternative",descriptions:"descriptions",main:"main","main-desc":"main-desc",translation:"translation",commentary:"commentary"},pn={subtitles:"subtitles",captions:"captions",descriptions:"descriptions",chapters:"chapters",metadata:"metadata"},fn={disabled:"disabled",hidden:"hidden",showing:"showing"},mn=function(e){function t(t){var i;void 0===t&&(t={}),i=e.call(this)||this;var n={id:t.id||"vjs_track_"+Lt(),kind:t.kind||"",label:t.label||"",language:t.language||""},r=function(e){Object.defineProperty(c()(i),e,{get:function(){return n[e]},set:function(){}})};for(var a in n)r(a);return i}return h()(t,e),t}(Yt),gn=function(e){var t=["protocol","hostname","port","pathname","search","hash","host"],i=s.a.createElement("a");i.href=e;var n,a=""===i.host&&"file:"!==i.protocol;a&&((n=s.a.createElement("div")).innerHTML='<a href="'+e+'"></a>',i=n.firstChild,n.setAttribute("style","display:none; position:absolute;"),s.a.body.appendChild(n));for(var o={},l=0;l<t.length;l++)o[t[l]]=i[t[l]];return"http:"===o.protocol&&(o.host=o.host.replace(/:80$/,"")),"https:"===o.protocol&&(o.host=o.host.replace(/:443$/,"")),o.protocol||(o.protocol=r.a.location.protocol),a&&s.a.body.removeChild(n),o},vn=function(e){if(!e.match(/^https?:\/\//)){var t=s.a.createElement("div");t.innerHTML='<a href="'+e+'">x</a>',e=t.firstChild.href}return e},yn=function(e){if("string"==typeof e){var t=/^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/.exec(e);if(t)return t.pop().toLowerCase()}return""},_n=function(e,t){void 0===t&&(t=r.a.location);var i=gn(e);return(":"===i.protocol?t.protocol:i.protocol)+i.host!==t.protocol+t.host},bn=Object.freeze({__proto__:null,parseUrl:gn,getAbsoluteURL:vn,getFileExtension:yn,isCrossOrigin:_n}),Tn=function(e,t){var i=new r.a.WebVTT.Parser(r.a,r.a.vttjs,r.a.WebVTT.StringDecoder()),n=[];i.oncue=function(e){t.addCue(e)},i.onparsingerror=function(e){n.push(e)},i.onflush=function(){t.trigger({type:"loadeddata",target:t})},i.parse(e),n.length>0&&(r.a.console&&r.a.console.groupCollapsed&&r.a.console.groupCollapsed("Text Track parsing errors for "+t.src),n.forEach((function(e){return Re.error(e)})),r.a.console&&r.a.console.groupEnd&&r.a.console.groupEnd()),i.flush()},Sn=function(e,t){var i={uri:e},n=_n(e);n&&(i.cors=n);var a="use-credentials"===t.tech_.crossOrigin();a&&(i.withCredentials=a),y()(i,Xt(this,(function(e,i,n){if(e)return Re.error(e,i);t.loaded_=!0,"function"!=typeof r.a.WebVTT?t.tech_&&t.tech_.any(["vttjsloaded","vttjserror"],(function(e){if("vttjserror"!==e.type)return Tn(n,t);Re.error("vttjs failed to load, stopping trying to process "+t.src)})):Tn(n,t)})))},jn=function(e){function t(t){var i;if(void 0===t&&(t={}),!t.tech)throw new Error("A tech was not provided.");var n=ui(t,{kind:pn[t.kind]||"subtitles",language:t.language||t.srclang||""}),r=fn[n.mode]||"disabled",a=n.default;"metadata"!==n.kind&&"chapters"!==n.kind||(r="hidden"),(i=e.call(this,n)||this).tech_=n.tech,i.cues_=[],i.activeCues_=[],i.preload_=!1!==i.tech_.preloadTextTracks;var s=new cn(i.cues_),o=new cn(i.activeCues_),l=!1,u=Xt(c()(i),(function(){this.activeCues=this.activeCues,l&&(this.trigger("cuechange"),l=!1)}));return"disabled"!==r&&i.tech_.ready((function(){i.tech_.on("timeupdate",u)}),!0),Object.defineProperties(c()(i),{default:{get:function(){return a},set:function(){}},mode:{get:function(){return r},set:function(e){var t=this;fn[e]&&(r=e,this.preload_||"disabled"===r||0!==this.cues.length||Sn(this.src,this),"disabled"!==r?this.tech_.ready((function(){t.tech_.on("timeupdate",u)}),!0):this.tech_.off("timeupdate",u),this.trigger("modechange"))}},cues:{get:function(){return this.loaded_?s:null},set:function(){}},activeCues:{get:function(){if(!this.loaded_)return null;if(0===this.cues.length)return o;for(var e=this.tech_.currentTime(),t=[],i=0,n=this.cues.length;i<n;i++){var r=this.cues[i];(r.startTime<=e&&r.endTime>=e||r.startTime===r.endTime&&r.startTime<=e&&r.startTime+.5>=e)&&t.push(r)}if(l=!1,t.length!==this.activeCues_.length)l=!0;else for(var a=0;a<t.length;a++)-1===this.activeCues_.indexOf(t[a])&&(l=!0);return this.activeCues_=t,o.setCues_(this.activeCues_),o},set:function(){}}}),n.src?(i.src=n.src,i.preload_||(i.loaded_=!0),(i.preload_||a||"subtitles"!==n.kind&&"captions"!==n.kind)&&Sn(i.src,c()(i))):i.loaded_=!0,i}h()(t,e);var i=t.prototype;return i.addCue=function(e){var t=e;if(r.a.vttjs&&!(e instanceof r.a.vttjs.VTTCue)){for(var i in t=new r.a.vttjs.VTTCue(e.startTime,e.endTime,e.text),e)i in t||(t[i]=e[i]);t.id=e.id,t.originalCue_=e}for(var n=this.tech_.textTracks(),a=0;a<n.length;a++)n[a]!==this&&n[a].removeCue(t);this.cues_.push(t),this.cues.setCues_(this.cues_)},i.removeCue=function(e){for(var t=this.cues_.length;t--;){var i=this.cues_[t];if(i===e||i.originalCue_&&i.originalCue_===e){this.cues_.splice(t,1),this.cues.setCues_(this.cues_);break}}},t}(mn);jn.prototype.allowedEvents_={cuechange:"cuechange"};var kn=function(e){function t(t){var i;void 0===t&&(t={});var n=ui(t,{kind:hn[t.kind]||""});i=e.call(this,n)||this;var r=!1;return Object.defineProperty(c()(i),"enabled",{get:function(){return r},set:function(e){"boolean"==typeof e&&e!==r&&(r=e,this.trigger("enabledchange"))}}),n.enabled&&(i.enabled=n.enabled),i.loaded_=!0,i}return h()(t,e),t}(mn),Cn=function(e){function t(t){var i;void 0===t&&(t={});var n=ui(t,{kind:dn[t.kind]||""});i=e.call(this,n)||this;var r=!1;return Object.defineProperty(c()(i),"selected",{get:function(){return r},set:function(e){"boolean"==typeof e&&e!==r&&(r=e,this.trigger("selectedchange"))}}),n.selected&&(i.selected=n.selected),i}return h()(t,e),t}(mn),wn=function(e){function t(t){var i,n;void 0===t&&(t={}),i=e.call(this)||this;var r=new jn(t);return i.kind=r.kind,i.src=r.src,i.srclang=r.language,i.label=r.label,i.default=r.default,Object.defineProperties(c()(i),{readyState:{get:function(){return n}},track:{get:function(){return r}}}),n=0,r.addEventListener("loadeddata",(function(){n=2,i.trigger({type:"load",target:c()(i)})})),i}return h()(t,e),t}(Yt);wn.prototype.allowedEvents_={load:"load"},wn.NONE=0,wn.LOADING=1,wn.LOADED=2,wn.ERROR=3;var En={audio:{ListClass:an,TrackClass:kn,capitalName:"Audio"},video:{ListClass:on,TrackClass:Cn,capitalName:"Video"},text:{ListClass:ln,TrackClass:jn,capitalName:"Text"}};Object.keys(En).forEach((function(e){En[e].getterName=e+"Tracks",En[e].privateName=e+"Tracks_"}));var An={remoteText:{ListClass:ln,TrackClass:jn,capitalName:"RemoteText",getterName:"remoteTextTracks",privateName:"remoteTextTracks_"},remoteTextEl:{ListClass:un,TrackClass:wn,capitalName:"RemoteTextTrackEls",getterName:"remoteTextTrackEls",privateName:"remoteTextTrackEls_"}},xn=l()({},En,An);An.names=Object.keys(An),En.names=Object.keys(En),xn.names=[].concat(An.names).concat(En.names);var In=function(e){function t(t,i){var n;return void 0===t&&(t={}),void 0===i&&(i=function(){}),t.reportTouchActivity=!1,(n=e.call(this,null,t,i)||this).hasStarted_=!1,n.on("playing",(function(){this.hasStarted_=!0})),n.on("loadstart",(function(){this.hasStarted_=!1})),xn.names.forEach((function(e){var i=xn[e];t&&t[i.getterName]&&(n[i.privateName]=t[i.getterName])})),n.featuresProgressEvents||n.manualProgressOn(),n.featuresTimeupdateEvents||n.manualTimeUpdatesOn(),["Text","Audio","Video"].forEach((function(e){!1===t["native"+e+"Tracks"]&&(n["featuresNative"+e+"Tracks"]=!1)})),!1===t.nativeCaptions||!1===t.nativeTextTracks?n.featuresNativeTextTracks=!1:!0!==t.nativeCaptions&&!0!==t.nativeTextTracks||(n.featuresNativeTextTracks=!0),n.featuresNativeTextTracks||n.emulateTextTracks(),n.preloadTextTracks=!1!==t.preloadTextTracks,n.autoRemoteTextTracks_=new xn.text.ListClass,n.initTrackListeners(),t.nativeControlsForTouch||n.emitTapEvents(),n.constructor&&(n.name_=n.constructor.name||"Unknown Tech"),n}h()(t,e);var i=t.prototype;return i.triggerSourceset=function(e){var t=this;this.isReady_||this.one("ready",(function(){return t.setTimeout((function(){return t.triggerSourceset(e)}),1)})),this.trigger({src:e,type:"sourceset"})},i.manualProgressOn=function(){this.on("durationchange",this.onDurationChange),this.manualProgress=!0,this.one("ready",this.trackProgress)},i.manualProgressOff=function(){this.manualProgress=!1,this.stopTrackingProgress(),this.off("durationchange",this.onDurationChange)},i.trackProgress=function(e){this.stopTrackingProgress(),this.progressInterval=this.setInterval(Xt(this,(function(){var e=this.bufferedPercent();this.bufferedPercent_!==e&&this.trigger("progress"),this.bufferedPercent_=e,1===e&&this.stopTrackingProgress()})),500)},i.onDurationChange=function(e){this.duration_=this.duration()},i.buffered=function(){return zi(0,0)},i.bufferedPercent=function(){return Fi(this.buffered(),this.duration_)},i.stopTrackingProgress=function(){this.clearInterval(this.progressInterval)},i.manualTimeUpdatesOn=function(){this.manualTimeUpdates=!0,this.on("play",this.trackCurrentTime),this.on("pause",this.stopTrackingCurrentTime)},i.manualTimeUpdatesOff=function(){this.manualTimeUpdates=!1,this.stopTrackingCurrentTime(),this.off("play",this.trackCurrentTime),this.off("pause",this.stopTrackingCurrentTime)},i.trackCurrentTime=function(){this.currentTimeInterval&&this.stopTrackingCurrentTime(),this.currentTimeInterval=this.setInterval((function(){this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})}),250)},i.stopTrackingCurrentTime=function(){this.clearInterval(this.currentTimeInterval),this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},i.dispose=function(){this.clearTracks(En.names),this.manualProgress&&this.manualProgressOff(),this.manualTimeUpdates&&this.manualTimeUpdatesOff(),e.prototype.dispose.call(this)},i.clearTracks=function(e){var t=this;(e=[].concat(e)).forEach((function(e){for(var i=t[e+"Tracks"]()||[],n=i.length;n--;){var r=i[n];"text"===e&&t.removeRemoteTextTrack(r),i.removeTrack(r)}}))},i.cleanupAutoTextTracks=function(){for(var e=this.autoRemoteTextTracks_||[],t=e.length;t--;){var i=e[t];this.removeRemoteTextTrack(i)}},i.reset=function(){},i.crossOrigin=function(){},i.setCrossOrigin=function(){},i.error=function(e){return void 0!==e&&(this.error_=new Xi(e),this.trigger("error")),this.error_},i.played=function(){return this.hasStarted_?zi(0,0):zi()},i.setScrubbing=function(){},i.setCurrentTime=function(){this.manualTimeUpdates&&this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},i.initTrackListeners=function(){var e=this;En.names.forEach((function(t){var i=En[t],n=function(){e.trigger(t+"trackchange")},r=e[i.getterName]();r.addEventListener("removetrack",n),r.addEventListener("addtrack",n),e.on("dispose",(function(){r.removeEventListener("removetrack",n),r.removeEventListener("addtrack",n)}))}))},i.addWebVttScript_=function(){var e=this;if(!r.a.WebVTT)if(s.a.body.contains(this.el())){if(!this.options_["vtt.js"]&&qe(b.a)&&Object.keys(b.a).length>0)return void this.trigger("vttjsloaded");var t=s.a.createElement("script");t.src=this.options_["vtt.js"]||"https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js",t.onload=function(){e.trigger("vttjsloaded")},t.onerror=function(){e.trigger("vttjserror")},this.on("dispose",(function(){t.onload=null,t.onerror=null})),r.a.WebVTT=!0,this.el().parentNode.appendChild(t)}else this.ready(this.addWebVttScript_)},i.emulateTextTracks=function(){var e=this,t=this.textTracks(),i=this.remoteTextTracks(),n=function(e){return t.addTrack(e.track)},r=function(e){return t.removeTrack(e.track)};i.on("addtrack",n),i.on("removetrack",r),this.addWebVttScript_();var a=function(){return e.trigger("texttrackchange")},s=function(){a();for(var e=0;e<t.length;e++){var i=t[e];i.removeEventListener("cuechange",a),"showing"===i.mode&&i.addEventListener("cuechange",a)}};s(),t.addEventListener("change",s),t.addEventListener("addtrack",s),t.addEventListener("removetrack",s),this.on("dispose",(function(){i.off("addtrack",n),i.off("removetrack",r),t.removeEventListener("change",s),t.removeEventListener("addtrack",s),t.removeEventListener("removetrack",s);for(var e=0;e<t.length;e++){t[e].removeEventListener("cuechange",a)}}))},i.addTextTrack=function(e,t,i){if(!e)throw new Error("TextTrack kind is required but was not provided");return function(e,t,i,n,r){void 0===r&&(r={});var a=e.textTracks();r.kind=t,i&&(r.label=i),n&&(r.language=n),r.tech=e;var s=new xn.text.TrackClass(r);return a.addTrack(s),s}(this,e,t,i)},i.createRemoteTextTrack=function(e){var t=ui(e,{tech:this});return new An.remoteTextEl.TrackClass(t)},i.addRemoteTextTrack=function(e,t){var i=this;void 0===e&&(e={});var n=this.createRemoteTextTrack(e);return!0!==t&&!1!==t&&(Re.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js'),t=!0),this.remoteTextTrackEls().addTrackElement_(n),this.remoteTextTracks().addTrack(n.track),!0!==t&&this.ready((function(){return i.autoRemoteTextTracks_.addTrack(n.track)})),n},i.removeRemoteTextTrack=function(e){var t=this.remoteTextTrackEls().getTrackElementByTrack_(e);this.remoteTextTrackEls().removeTrackElement_(t),this.remoteTextTracks().removeTrack(e),this.autoRemoteTextTracks_.removeTrack(e)},i.getVideoPlaybackQuality=function(){return{}},i.requestPictureInPicture=function(){var e=this.options_.Promise||r.a.Promise;if(e)return e.reject()},i.disablePictureInPicture=function(){return!0},i.setDisablePictureInPicture=function(){},i.setPoster=function(){},i.playsinline=function(){},i.setPlaysinline=function(){},i.overrideNativeAudioTracks=function(){},i.overrideNativeVideoTracks=function(){},i.canPlayType=function(){return""},t.canPlayType=function(){return""},t.canPlaySource=function(e,i){return t.canPlayType(e.type)},t.isTech=function(e){return e.prototype instanceof t||e instanceof t||e===t},t.registerTech=function(e,i){if(t.techs_||(t.techs_={}),!t.isTech(i))throw new Error("Tech "+e+" must be a Tech");if(!t.canPlayType)throw new Error("Techs must have a static canPlayType method on them");if(!t.canPlaySource)throw new Error("Techs must have a static canPlaySource method on them");return e=li(e),t.techs_[e]=i,t.techs_[oi(e)]=i,"Tech"!==e&&t.defaultTechOrder_.push(e),i},t.getTech=function(e){if(e)return t.techs_&&t.techs_[e]?t.techs_[e]:(e=li(e),r.a&&r.a.videojs&&r.a.videojs[e]?(Re.warn("The "+e+" tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)"),r.a.videojs[e]):void 0)},t}(fi);xn.names.forEach((function(e){var t=xn[e];In.prototype[t.getterName]=function(){return this[t.privateName]=this[t.privateName]||new t.ListClass,this[t.privateName]}})),In.prototype.featuresVolumeControl=!0,In.prototype.featuresMuteControl=!0,In.prototype.featuresFullscreenResize=!1,In.prototype.featuresPlaybackRate=!1,In.prototype.featuresProgressEvents=!1,In.prototype.featuresSourceset=!1,In.prototype.featuresTimeupdateEvents=!1,In.prototype.featuresNativeTextTracks=!1,In.withSourceHandlers=function(e){e.registerSourceHandler=function(t,i){var n=e.sourceHandlers;n||(n=e.sourceHandlers=[]),void 0===i&&(i=n.length),n.splice(i,0,t)},e.canPlayType=function(t){for(var i,n=e.sourceHandlers||[],r=0;r<n.length;r++)if(i=n[r].canPlayType(t))return i;return""},e.selectSourceHandler=function(t,i){for(var n=e.sourceHandlers||[],r=0;r<n.length;r++)if(n[r].canHandleSource(t,i))return n[r];return null},e.canPlaySource=function(t,i){var n=e.selectSourceHandler(t,i);return n?n.canHandleSource(t,i):""};["seekable","seeking","duration"].forEach((function(e){var t=this[e];"function"==typeof t&&(this[e]=function(){return this.sourceHandler_&&this.sourceHandler_[e]?this.sourceHandler_[e].apply(this.sourceHandler_,arguments):t.apply(this,arguments)})}),e.prototype),e.prototype.setSource=function(t){var i=e.selectSourceHandler(t,this.options_);i||(e.nativeSourceHandler?i=e.nativeSourceHandler:Re.error("No source handler found for the current source.")),this.disposeSourceHandler(),this.off("dispose",this.disposeSourceHandler),i!==e.nativeSourceHandler&&(this.currentSource_=t),this.sourceHandler_=i.handleSource(t,this,this.options_),this.one("dispose",this.disposeSourceHandler)},e.prototype.disposeSourceHandler=function(){this.currentSource_&&(this.clearTracks(["audio","video"]),this.currentSource_=null),this.cleanupAutoTextTracks(),this.sourceHandler_&&(this.sourceHandler_.dispose&&this.sourceHandler_.dispose(),this.sourceHandler_=null)}},fi.registerComponent("Tech",In),In.registerTech("Tech",In),In.defaultTechOrder_=[];var Pn={},On={},Ln={};function Dn(e,t,i){e.setTimeout((function(){return function e(t,i,n,r,a,s){void 0===t&&(t={});void 0===i&&(i=[]);void 0===a&&(a=[]);void 0===s&&(s=!1);var o=i,l=o[0],u=o.slice(1);if("string"==typeof l)e(t,Pn[l],n,r,a,s);else if(l){var c=function(e,t){var i=On[e.id()],n=null;if(null==i)return n=t(e),On[e.id()]=[[t,n]],n;for(var r=0;r<i.length;r++){var a=i[r],s=a[0],o=a[1];s===t&&(n=o)}null===n&&(n=t(e),i.push([t,n]));return n}(r,l);if(!c.setSource)return a.push(c),e(t,u,n,r,a,s);c.setSource(Ve({},t),(function(i,o){if(i)return e(t,u,n,r,a,s);a.push(c),e(o,t.type===o.type?u:Pn[o.type],n,r,a,s)}))}else u.length?e(t,u,n,r,a,s):s?n(t,a):e(t,Pn["*"],n,r,a,!0)}(t,Pn[t.type],i,e)}),1)}function Mn(e,t,i,n){void 0===n&&(n=null);var r="call"+li(i),a=e.reduce(zn(r),n),s=a===Ln,o=s?null:t[i](a);return function(e,t,i,n){for(var r=e.length-1;r>=0;r--){var a=e[r];a[t]&&a[t](n,i)}}(e,i,o,s),o}var Nn={buffered:1,currentTime:1,duration:1,muted:1,played:1,paused:1,seekable:1,volume:1},Rn={setCurrentTime:1,setMuted:1,setVolume:1},Un={play:1,pause:1};function zn(e){return function(t,i){return t===Ln?Ln:i[e]?i[e](t):t}}var Fn={opus:"video/ogg",ogv:"video/ogg",mp4:"video/mp4",mov:"video/mp4",m4v:"video/mp4",mkv:"video/x-matroska",m4a:"audio/mp4",mp3:"audio/mpeg",aac:"audio/aac",caf:"audio/x-caf",flac:"audio/flac",oga:"audio/ogg",wav:"audio/wav",m3u8:"application/x-mpegURL",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif",png:"image/png",svg:"image/svg+xml",webp:"image/webp"},Bn=function(e){void 0===e&&(e="");var t=yn(e);return Fn[t.toLowerCase()]||""};function Vn(e){if(!e.type){var t=Bn(e.src);t&&(e.type=t)}return e}var Hn=function(e){function t(t,i,n){var r,a=ui({createEl:!1},i);if(r=e.call(this,t,a,n)||this,i.playerOptions.sources&&0!==i.playerOptions.sources.length)t.src(i.playerOptions.sources);else for(var s=0,o=i.playerOptions.techOrder;s<o.length;s++){var l=li(o[s]),u=In.getTech(l);if(l||(u=fi.getComponent(l)),u&&u.isSupported()){t.loadTech_(l);break}}return r}return h()(t,e),t}(fi);fi.registerComponent("MediaLoader",Hn);var qn=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).emitTapEvents(),n.enable(),n}h()(t,e);var i=t.prototype;return i.createEl=function(t,i,n){void 0===t&&(t="div"),void 0===i&&(i={}),void 0===n&&(n={}),i=Ve({innerHTML:'<span aria-hidden="true" class="vjs-icon-placeholder"></span>',className:this.buildCSSClass(),tabIndex:0},i),"button"===t&&Re.error("Creating a ClickableComponent with an HTML element of "+t+" is not supported; use a Button instead."),n=Ve({role:"button"},n),this.tabIndex_=i.tabIndex;var r=e.prototype.createEl.call(this,t,i,n);return this.createControlTextEl(r),r},i.dispose=function(){this.controlTextEl_=null,e.prototype.dispose.call(this)},i.createControlTextEl=function(e){return this.controlTextEl_=Ze("span",{className:"vjs-control-text"},{"aria-live":"polite"}),e&&e.appendChild(this.controlTextEl_),this.controlText(this.controlText_,e),this.controlTextEl_},i.controlText=function(e,t){if(void 0===t&&(t=this.el()),void 0===e)return this.controlText_||"Need Text";var i=this.localize(e);this.controlText_=e,$e(this.controlTextEl_,i),this.nonIconControl||t.setAttribute("title",i)},i.buildCSSClass=function(){return"vjs-control vjs-button "+e.prototype.buildCSSClass.call(this)},i.enable=function(){this.enabled_||(this.enabled_=!0,this.removeClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","false"),void 0!==this.tabIndex_&&this.el_.setAttribute("tabIndex",this.tabIndex_),this.on(["tap","click"],this.handleClick),this.on("keydown",this.handleKeyDown))},i.disable=function(){this.enabled_=!1,this.addClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","true"),void 0!==this.tabIndex_&&this.el_.removeAttribute("tabIndex"),this.off("mouseover",this.handleMouseOver),this.off("mouseout",this.handleMouseOut),this.off(["tap","click"],this.handleClick),this.off("keydown",this.handleKeyDown)},i.handleClick=function(e){this.options_.clickHandler&&this.options_.clickHandler.call(this,arguments)},i.handleKeyDown=function(t){g.a.isEventKey(t,"Space")||g.a.isEventKey(t,"Enter")?(t.preventDefault(),t.stopPropagation(),this.trigger("click")):e.prototype.handleKeyDown.call(this,t)},t}(fi);fi.registerComponent("ClickableComponent",qn);var Wn=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).update(),t.on("posterchange",Xt(c()(n),n.update)),n}h()(t,e);var i=t.prototype;return i.dispose=function(){this.player().off("posterchange",this.update),e.prototype.dispose.call(this)},i.createEl=function(){return Ze("div",{className:"vjs-poster",tabIndex:-1})},i.update=function(e){var t=this.player().poster();this.setSrc(t),t?this.show():this.hide()},i.setSrc=function(e){var t="";e&&(t='url("'+e+'")'),this.el_.style.backgroundImage=t},i.handleClick=function(e){if(this.player_.controls()){var t=this.player_.usingPlugin("eme")&&this.player_.eme.sessions&&this.player_.eme.sessions.length>0;!this.player_.tech(!0)||(Ai||Ci)&&t||this.player_.tech(!0).focus(),this.player_.paused()?Qi(this.player_.play()):this.player_.pause()}},t}(qn);fi.registerComponent("PosterImage",Wn);var Gn={monospace:"monospace",sansSerif:"sans-serif",serif:"serif",monospaceSansSerif:'"Andale Mono", "Lucida Console", monospace',monospaceSerif:'"Courier New", monospace',proportionalSansSerif:"sans-serif",proportionalSerif:"serif",casual:'"Comic Sans MS", Impact, fantasy',script:'"Monotype Corsiva", cursive',smallcaps:'"Andale Mono", "Lucida Console", monospace, sans-serif'};function Xn(e,t){var i;if(4===e.length)i=e[1]+e[1]+e[2]+e[2]+e[3]+e[3];else{if(7!==e.length)throw new Error("Invalid color code provided, "+e+"; must be formatted as e.g. #f0e or #f604e2.");i=e.slice(1)}return"rgba("+parseInt(i.slice(0,2),16)+","+parseInt(i.slice(2,4),16)+","+parseInt(i.slice(4,6),16)+","+t+")"}function Kn(e,t,i){try{e.style[t]=i}catch(e){return}}var Yn=function(e){function t(t,i,n){var a;a=e.call(this,t,i,n)||this;var s=Xt(c()(a),a.updateDisplay);return t.on("loadstart",Xt(c()(a),a.toggleDisplay)),t.on("texttrackchange",s),t.on("loadedmetadata",Xt(c()(a),a.preselectTrack)),t.ready(Xt(c()(a),(function(){if(t.tech_&&t.tech_.featuresNativeTextTracks)this.hide();else{t.on("fullscreenchange",s),t.on("playerresize",s),r.a.addEventListener("orientationchange",s),t.on("dispose",(function(){return r.a.removeEventListener("orientationchange",s)}));for(var e=this.options_.playerOptions.tracks||[],i=0;i<e.length;i++)this.player_.addRemoteTextTrack(e[i],!0);this.preselectTrack()}}))),a}h()(t,e);var i=t.prototype;return i.preselectTrack=function(){for(var e,t,i,n={captions:1,subtitles:1},r=this.player_.textTracks(),a=this.player_.cache_.selectedLanguage,s=0;s<r.length;s++){var o=r[s];a&&a.enabled&&a.language&&a.language===o.language&&o.kind in n?o.kind===a.kind?i=o:i||(i=o):a&&!a.enabled?(i=null,e=null,t=null):o.default&&("descriptions"!==o.kind||e?o.kind in n&&!t&&(t=o):e=o)}i?i.mode="showing":t?t.mode="showing":e&&(e.mode="showing")},i.toggleDisplay=function(){this.player_.tech_&&this.player_.tech_.featuresNativeTextTracks?this.hide():this.show()},i.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-text-track-display"},{"aria-live":"off","aria-atomic":"true"})},i.clearDisplay=function(){"function"==typeof r.a.WebVTT&&r.a.WebVTT.processCues(r.a,[],this.el_)},i.updateDisplay=function(){var e=this.player_.textTracks(),t=this.options_.allowMultipleShowingTracks;if(this.clearDisplay(),t){for(var i=[],n=0;n<e.length;++n){var r=e[n];"showing"===r.mode&&i.push(r)}this.updateForTrack(i)}else{for(var a=null,s=null,o=e.length;o--;){var l=e[o];"showing"===l.mode&&("descriptions"===l.kind?a=l:s=l)}s?("off"!==this.getAttribute("aria-live")&&this.setAttribute("aria-live","off"),this.updateForTrack(s)):a&&("assertive"!==this.getAttribute("aria-live")&&this.setAttribute("aria-live","assertive"),this.updateForTrack(a))}},i.updateDisplayState=function(e){for(var t=this.player_.textTrackSettings.getValues(),i=e.activeCues,n=i.length;n--;){var a=i[n];if(a){var s=a.displayState;if(t.color&&(s.firstChild.style.color=t.color),t.textOpacity&&Kn(s.firstChild,"color",Xn(t.color||"#fff",t.textOpacity)),t.backgroundColor&&(s.firstChild.style.backgroundColor=t.backgroundColor),t.backgroundOpacity&&Kn(s.firstChild,"backgroundColor",Xn(t.backgroundColor||"#000",t.backgroundOpacity)),t.windowColor&&(t.windowOpacity?Kn(s,"backgroundColor",Xn(t.windowColor,t.windowOpacity)):s.style.backgroundColor=t.windowColor),t.edgeStyle&&("dropshadow"===t.edgeStyle?s.firstChild.style.textShadow="2px 2px 3px #222, 2px 2px 4px #222, 2px 2px 5px #222":"raised"===t.edgeStyle?s.firstChild.style.textShadow="1px 1px #222, 2px 2px #222, 3px 3px #222":"depressed"===t.edgeStyle?s.firstChild.style.textShadow="1px 1px #ccc, 0 1px #ccc, -1px -1px #222, 0 -1px #222":"uniform"===t.edgeStyle&&(s.firstChild.style.textShadow="0 0 4px #222, 0 0 4px #222, 0 0 4px #222, 0 0 4px #222")),t.fontPercent&&1!==t.fontPercent){var o=r.a.parseFloat(s.style.fontSize);s.style.fontSize=o*t.fontPercent+"px",s.style.height="auto",s.style.top="auto"}t.fontFamily&&"default"!==t.fontFamily&&("small-caps"===t.fontFamily?s.firstChild.style.fontVariant="small-caps":s.firstChild.style.fontFamily=Gn[t.fontFamily])}}},i.updateForTrack=function(e){if(Array.isArray(e)||(e=[e]),"function"==typeof r.a.WebVTT&&!e.every((function(e){return!e.activeCues}))){for(var t=[],i=0;i<e.length;++i)for(var n=e[i],a=0;a<n.activeCues.length;++a)t.push(n.activeCues[a]);r.a.WebVTT.processCues(r.a,t,this.el_);for(var s=0;s<e.length;++s){for(var o=e[s],l=0;l<o.activeCues.length;++l){var u=o.activeCues[l].displayState;it(u,"vjs-text-track-cue"),it(u,"vjs-text-track-cue-"+(o.language?o.language:s))}this.player_.textTrackSettings&&this.updateDisplayState(o)}}},t}(fi);fi.registerComponent("TextTrackDisplay",Yn);var Qn=function(e){function t(){return e.apply(this,arguments)||this}return h()(t,e),t.prototype.createEl=function(){var t=this.player_.isAudio(),i=this.localize(t?"Audio Player":"Video Player"),n=Ze("span",{className:"vjs-control-text",innerHTML:this.localize("{1} is loading.",[i])}),r=e.prototype.createEl.call(this,"div",{className:"vjs-loading-spinner",dir:"ltr"});return r.appendChild(n),r},t}(fi);fi.registerComponent("LoadingSpinner",Qn);var Jn=function(e){function t(){return e.apply(this,arguments)||this}h()(t,e);var i=t.prototype;return i.createEl=function(e,t,i){void 0===t&&(t={}),void 0===i&&(i={}),t=Ve({innerHTML:'<span aria-hidden="true" class="vjs-icon-placeholder"></span>',className:this.buildCSSClass()},t),i=Ve({type:"button"},i);var n=fi.prototype.createEl.call(this,"button",t,i);return this.createControlTextEl(n),n},i.addChild=function(e,t){void 0===t&&(t={});var i=this.constructor.name;return Re.warn("Adding an actionable (user controllable) child to a Button ("+i+") is not supported; use a ClickableComponent instead."),fi.prototype.addChild.call(this,e,t)},i.enable=function(){e.prototype.enable.call(this),this.el_.removeAttribute("disabled")},i.disable=function(){e.prototype.disable.call(this),this.el_.setAttribute("disabled","disabled")},i.handleKeyDown=function(t){g.a.isEventKey(t,"Space")||g.a.isEventKey(t,"Enter")?t.stopPropagation():e.prototype.handleKeyDown.call(this,t)},t}(qn);fi.registerComponent("Button",Jn);var Zn=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).mouseused_=!1,n.on("mousedown",n.handleMouseDown),n}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-big-play-button"},i.handleClick=function(e){var t=this.player_.play();if(this.mouseused_&&e.clientX&&e.clientY){var i=this.player_.usingPlugin("eme")&&this.player_.eme.sessions&&this.player_.eme.sessions.length>0;return Qi(t),void(!this.player_.tech(!0)||(Ai||Ci)&&i||this.player_.tech(!0).focus())}var n=this.player_.getChild("controlBar"),r=n&&n.getChild("playToggle");if(r){var a=function(){return r.focus()};Yi(t)?t.then(a,(function(){})):this.setTimeout(a,1)}else this.player_.tech(!0).focus()},i.handleKeyDown=function(t){this.mouseused_=!1,e.prototype.handleKeyDown.call(this,t)},i.handleMouseDown=function(e){this.mouseused_=!0},t}(Jn);Zn.prototype.controlText_="Play Video",fi.registerComponent("BigPlayButton",Zn);var $n=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).controlText(i&&i.controlText||n.localize("Close")),n}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-close-button "+e.prototype.buildCSSClass.call(this)},i.handleClick=function(e){this.trigger({type:"close",bubbles:!1})},i.handleKeyDown=function(t){g.a.isEventKey(t,"Esc")?(t.preventDefault(),t.stopPropagation(),this.trigger("click")):e.prototype.handleKeyDown.call(this,t)},t}(Jn);fi.registerComponent("CloseButton",$n);var er=function(e){function t(t,i){var n;return void 0===i&&(i={}),n=e.call(this,t,i)||this,i.replay=void 0===i.replay||i.replay,n.on(t,"play",n.handlePlay),n.on(t,"pause",n.handlePause),i.replay&&n.on(t,"ended",n.handleEnded),n}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-play-control "+e.prototype.buildCSSClass.call(this)},i.handleClick=function(e){this.player_.paused()?this.player_.play():this.player_.pause()},i.handleSeeked=function(e){this.removeClass("vjs-ended"),this.player_.paused()?this.handlePause(e):this.handlePlay(e)},i.handlePlay=function(e){this.removeClass("vjs-ended"),this.removeClass("vjs-paused"),this.addClass("vjs-playing"),this.controlText("Pause")},i.handlePause=function(e){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),this.controlText("Play")},i.handleEnded=function(e){this.removeClass("vjs-playing"),this.addClass("vjs-ended"),this.controlText("Replay"),this.one(this.player_,"seeked",this.handleSeeked)},t}(Jn);er.prototype.controlText_="Play",fi.registerComponent("PlayToggle",er);var tr=function(e,t){e=e<0?0:e;var i=Math.floor(e%60),n=Math.floor(e/60%60),r=Math.floor(e/3600),a=Math.floor(t/60%60),s=Math.floor(t/3600);return(isNaN(e)||e===1/0)&&(r=n=i="-"),(r=r>0||s>0?r+":":"")+(n=((r||a>=10)&&n<10?"0"+n:n)+":")+(i=i<10?"0"+i:i)},ir=tr;function nr(e,t){return void 0===t&&(t=e),ir(e,t)}var rr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).on(t,["timeupdate","ended"],n.updateContent),n.updateTextNode_(),n}h()(t,e);var i=t.prototype;return i.createEl=function(){var t=this.buildCSSClass(),i=e.prototype.createEl.call(this,"div",{className:t+" vjs-time-control vjs-control",innerHTML:'<span class="vjs-control-text" role="presentation">'+this.localize(this.labelText_)+" </span>"});return this.contentEl_=Ze("span",{className:t+"-display"},{"aria-live":"off",role:"presentation"}),i.appendChild(this.contentEl_),i},i.dispose=function(){this.contentEl_=null,this.textNode_=null,e.prototype.dispose.call(this)},i.updateTextNode_=function(e){var t=this;void 0===e&&(e=0),e=nr(e),this.formattedTime_!==e&&(this.formattedTime_=e,this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_",(function(){if(t.contentEl_){var e=t.textNode_;t.textNode_=s.a.createTextNode(t.formattedTime_),t.textNode_&&(e?t.contentEl_.replaceChild(t.textNode_,e):t.contentEl_.appendChild(t.textNode_))}})))},i.updateContent=function(e){},t}(fi);rr.prototype.labelText_="Time",rr.prototype.controlText_="Time",fi.registerComponent("TimeDisplay",rr);var ar=function(e){function t(){return e.apply(this,arguments)||this}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-current-time"},i.updateContent=function(e){var t;t=this.player_.ended()?this.player_.duration():this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime(),this.updateTextNode_(t)},t}(rr);ar.prototype.labelText_="Current Time",ar.prototype.controlText_="Current Time",fi.registerComponent("CurrentTimeDisplay",ar);var sr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).on(t,"durationchange",n.updateContent),n.on(t,"loadstart",n.updateContent),n.on(t,"loadedmetadata",n.updateContent),n}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-duration"},i.updateContent=function(e){var t=this.player_.duration();this.updateTextNode_(t)},t}(rr);sr.prototype.labelText_="Duration",sr.prototype.controlText_="Duration",fi.registerComponent("DurationDisplay",sr);var or=function(e){function t(){return e.apply(this,arguments)||this}return h()(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-time-control vjs-time-divider",innerHTML:"<div><span>/</span></div>"},{"aria-hidden":!0})},t}(fi);fi.registerComponent("TimeDivider",or);var lr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).on(t,"durationchange",n.updateContent),n}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-remaining-time"},i.createEl=function(){var t=e.prototype.createEl.call(this);return t.insertBefore(Ze("span",{},{"aria-hidden":!0},"-"),this.contentEl_),t},i.updateContent=function(e){var t;"number"==typeof this.player_.duration()&&(t=this.player_.ended()?0:this.player_.remainingTimeDisplay?this.player_.remainingTimeDisplay():this.player_.remainingTime(),this.updateTextNode_(t))},t}(rr);lr.prototype.labelText_="Remaining Time",lr.prototype.controlText_="Remaining Time",fi.registerComponent("RemainingTimeDisplay",lr);var ur=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).updateShowing(),n.on(n.player(),"durationchange",n.updateShowing),n}h()(t,e);var i=t.prototype;return i.createEl=function(){var t=e.prototype.createEl.call(this,"div",{className:"vjs-live-control vjs-control"});return this.contentEl_=Ze("div",{className:"vjs-live-display",innerHTML:'<span class="vjs-control-text">'+this.localize("Stream Type")+" </span>"+this.localize("LIVE")},{"aria-live":"off"}),t.appendChild(this.contentEl_),t},i.dispose=function(){this.contentEl_=null,e.prototype.dispose.call(this)},i.updateShowing=function(e){this.player().duration()===1/0?this.show():this.hide()},t}(fi);fi.registerComponent("LiveDisplay",ur);var cr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).updateLiveEdgeStatus(),n.player_.liveTracker&&n.on(n.player_.liveTracker,"liveedgechange",n.updateLiveEdgeStatus),n}h()(t,e);var i=t.prototype;return i.createEl=function(){var t=e.prototype.createEl.call(this,"button",{className:"vjs-seek-to-live-control vjs-control"});return this.textEl_=Ze("span",{className:"vjs-seek-to-live-text",innerHTML:this.localize("LIVE")},{"aria-hidden":"true"}),t.appendChild(this.textEl_),t},i.updateLiveEdgeStatus=function(){!this.player_.liveTracker||this.player_.liveTracker.atLiveEdge()?(this.setAttribute("aria-disabled",!0),this.addClass("vjs-at-live-edge"),this.controlText("Seek to live, currently playing live")):(this.setAttribute("aria-disabled",!1),this.removeClass("vjs-at-live-edge"),this.controlText("Seek to live, currently behind live"))},i.handleClick=function(){this.player_.liveTracker.seekToLiveEdge()},i.dispose=function(){this.player_.liveTracker&&this.off(this.player_.liveTracker,"liveedgechange",this.updateLiveEdgeStatus),this.textEl_=null,e.prototype.dispose.call(this)},t}(Jn);cr.prototype.controlText_="Seek to live, currently playing live",fi.registerComponent("SeekToLive",cr);var dr=function(e,t,i){return e=Number(e),Math.min(i,Math.max(t,isNaN(e)?t:e))},hr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).bar=n.getChild(n.options_.barName),n.vertical(!!n.options_.vertical),n.enable(),n}h()(t,e);var i=t.prototype;return i.enabled=function(){return this.enabled_},i.enable=function(){this.enabled()||(this.on("mousedown",this.handleMouseDown),this.on("touchstart",this.handleMouseDown),this.on("keydown",this.handleKeyDown),this.on("click",this.handleClick),this.on(this.player_,"controlsvisible",this.update),this.playerEvent&&this.on(this.player_,this.playerEvent,this.update),this.removeClass("disabled"),this.setAttribute("tabindex",0),this.enabled_=!0)},i.disable=function(){if(this.enabled()){var e=this.bar.el_.ownerDocument;this.off("mousedown",this.handleMouseDown),this.off("touchstart",this.handleMouseDown),this.off("keydown",this.handleKeyDown),this.off("click",this.handleClick),this.off(this.player_,"controlsvisible",this.update),this.off(e,"mousemove",this.handleMouseMove),this.off(e,"mouseup",this.handleMouseUp),this.off(e,"touchmove",this.handleMouseMove),this.off(e,"touchend",this.handleMouseUp),this.removeAttribute("tabindex"),this.addClass("disabled"),this.playerEvent&&this.off(this.player_,this.playerEvent,this.update),this.enabled_=!1}},i.createEl=function(t,i,n){return void 0===i&&(i={}),void 0===n&&(n={}),i.className=i.className+" vjs-slider",i=Ve({tabIndex:0},i),n=Ve({role:"slider","aria-valuenow":0,"aria-valuemin":0,"aria-valuemax":100,tabIndex:0},n),e.prototype.createEl.call(this,t,i,n)},i.handleMouseDown=function(e){var t=this.bar.el_.ownerDocument;"mousedown"===e.type&&e.preventDefault(),"touchstart"!==e.type||wi||e.preventDefault(),ct(),this.addClass("vjs-sliding"),this.trigger("slideractive"),this.on(t,"mousemove",this.handleMouseMove),this.on(t,"mouseup",this.handleMouseUp),this.on(t,"touchmove",this.handleMouseMove),this.on(t,"touchend",this.handleMouseUp),this.handleMouseMove(e)},i.handleMouseMove=function(e){},i.handleMouseUp=function(){var e=this.bar.el_.ownerDocument;dt(),this.removeClass("vjs-sliding"),this.trigger("sliderinactive"),this.off(e,"mousemove",this.handleMouseMove),this.off(e,"mouseup",this.handleMouseUp),this.off(e,"touchmove",this.handleMouseMove),this.off(e,"touchend",this.handleMouseUp),this.update()},i.update=function(){var e=this;if(this.el_&&this.bar){var t=this.getProgress();return t===this.progress_||(this.progress_=t,this.requestNamedAnimationFrame("Slider#update",(function(){var i=e.vertical()?"height":"width";e.bar.el().style[i]=(100*t).toFixed(2)+"%"}))),t}},i.getProgress=function(){return Number(dr(this.getPercent(),0,1).toFixed(4))},i.calculateDistance=function(e){var t=ft(this.el_,e);return this.vertical()?t.y:t.x},i.handleKeyDown=function(t){g.a.isEventKey(t,"Left")||g.a.isEventKey(t,"Down")?(t.preventDefault(),t.stopPropagation(),this.stepBack()):g.a.isEventKey(t,"Right")||g.a.isEventKey(t,"Up")?(t.preventDefault(),t.stopPropagation(),this.stepForward()):e.prototype.handleKeyDown.call(this,t)},i.handleClick=function(e){e.stopPropagation(),e.preventDefault()},i.vertical=function(e){if(void 0===e)return this.vertical_||!1;this.vertical_=!!e,this.vertical_?this.addClass("vjs-slider-vertical"):this.addClass("vjs-slider-horizontal")},t}(fi);fi.registerComponent("Slider",hr);var pr=function(e,t){return dr(e/t*100,0,100).toFixed(2)+"%"},fr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).partEls_=[],n.on(t,"progress",n.update),n}h()(t,e);var i=t.prototype;return i.createEl=function(){var t=e.prototype.createEl.call(this,"div",{className:"vjs-load-progress"}),i=Ze("span",{className:"vjs-control-text"}),n=Ze("span",{textContent:this.localize("Loaded")}),r=s.a.createTextNode(": ");return this.percentageEl_=Ze("span",{className:"vjs-control-text-loaded-percentage",textContent:"0%"}),t.appendChild(i),i.appendChild(n),i.appendChild(r),i.appendChild(this.percentageEl_),t},i.dispose=function(){this.partEls_=null,this.percentageEl_=null,e.prototype.dispose.call(this)},i.update=function(e){var t=this;this.requestNamedAnimationFrame("LoadProgressBar#update",(function(){var e=t.player_.liveTracker,i=t.player_.buffered(),n=e&&e.isLive()?e.seekableEnd():t.player_.duration(),r=t.player_.bufferedEnd(),a=t.partEls_,s=pr(r,n);t.percent_!==s&&(t.el_.style.width=s,$e(t.percentageEl_,s),t.percent_=s);for(var o=0;o<i.length;o++){var l=i.start(o),u=i.end(o),c=a[o];c||(c=t.el_.appendChild(Ze()),a[o]=c),c.dataset.start===l&&c.dataset.end===u||(c.dataset.start=l,c.dataset.end=u,c.style.left=pr(l,r),c.style.width=pr(u-l,r))}for(var d=a.length;d>i.length;d--)t.el_.removeChild(a[d-1]);a.length=i.length}))},t}(fi);fi.registerComponent("LoadProgressBar",fr);var mr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).update=Kt(Xt(c()(n),n.update),30),n}h()(t,e);var i=t.prototype;return i.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-time-tooltip"},{"aria-hidden":"true"})},i.update=function(e,t,i){var n=pt(this.el_),r=ht(this.player_.el()),a=e.width*t;if(r&&n){var s=e.left-r.left+a,o=e.width-a+(r.right-e.right),l=n.width/2;s<l?l+=l-s:o<l&&(l=o),l<0?l=0:l>n.width&&(l=n.width),this.el_.style.right="-"+l+"px",this.write(i)}},i.write=function(e){$e(this.el_,e)},i.updateTime=function(e,t,i,n){var r=this;this.requestNamedAnimationFrame("TimeTooltip#updateTime",(function(){var a,s=r.player_.duration();if(r.player_.liveTracker&&r.player_.liveTracker.isLive()){var o=r.player_.liveTracker.liveWindow(),l=o-t*o;a=(l<1?"":"-")+nr(l,o)}else a=nr(i,s);r.update(e,t,a),n&&n()}))},t}(fi);fi.registerComponent("TimeTooltip",mr);var gr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).update=Kt(Xt(c()(n),n.update),30),n}h()(t,e);var i=t.prototype;return i.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-play-progress vjs-slider-bar"},{"aria-hidden":"true"})},i.update=function(e,t){var i=this.getChild("timeTooltip");if(i){var n=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime();i.updateTime(e,t,n)}},t}(fi);gr.prototype.options_={children:[]},Di||Ti||gr.prototype.options_.children.push("timeTooltip"),fi.registerComponent("PlayProgressBar",gr);var vr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).update=Kt(Xt(c()(n),n.update),30),n}h()(t,e);var i=t.prototype;return i.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-mouse-display"})},i.update=function(e,t){var i=this,n=t*this.player_.duration();this.getChild("timeTooltip").updateTime(e,t,n,(function(){i.el_.style.left=e.width*t+"px"}))},t}(fi);vr.prototype.options_={children:["timeTooltip"]},fi.registerComponent("MouseTimeDisplay",vr);var yr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).setEventHandlers_(),n}h()(t,e);var i=t.prototype;return i.setEventHandlers_=function(){this.update_=Xt(this,this.update),this.update=Kt(this.update_,30),this.on(this.player_,["ended","durationchange","timeupdate"],this.update),this.player_.liveTracker&&this.on(this.player_.liveTracker,"liveedgechange",this.update),this.updateInterval=null,this.on(this.player_,["playing"],this.enableInterval_),this.on(this.player_,["ended","pause","waiting"],this.disableInterval_),"hidden"in s.a&&"visibilityState"in s.a&&this.on(s.a,"visibilitychange",this.toggleVisibility_)},i.toggleVisibility_=function(e){s.a.hidden?this.disableInterval_(e):(this.enableInterval_(),this.update())},i.enableInterval_=function(){this.updateInterval||(this.updateInterval=this.setInterval(this.update,30))},i.disableInterval_=function(e){this.player_.liveTracker&&this.player_.liveTracker.isLive()&&e&&"ended"!==e.type||this.updateInterval&&(this.clearInterval(this.updateInterval),this.updateInterval=null)},i.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-progress-holder"},{"aria-label":this.localize("Progress Bar")})},i.update=function(t){var i=this,n=e.prototype.update.call(this);return this.requestNamedAnimationFrame("SeekBar#update",(function(){var e=i.player_.ended()?i.player_.duration():i.getCurrentTime_(),t=i.player_.liveTracker,r=i.player_.duration();t&&t.isLive()&&(r=i.player_.liveTracker.liveCurrentTime()),i.percent_!==n&&(i.el_.setAttribute("aria-valuenow",(100*n).toFixed(2)),i.percent_=n),i.currentTime_===e&&i.duration_===r||(i.el_.setAttribute("aria-valuetext",i.localize("progress bar timing: currentTime={1} duration={2}",[nr(e,r),nr(r,r)],"{1} of {2}")),i.currentTime_=e,i.duration_=r),i.bar&&i.bar.update(ht(i.el()),i.getProgress())})),n},i.getCurrentTime_=function(){return this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime()},i.getPercent=function(){var e,t=this.getCurrentTime_(),i=this.player_.liveTracker;return i&&i.isLive()?(e=(t-i.seekableStart())/i.liveWindow(),i.atLiveEdge()&&(e=1)):e=t/this.player_.duration(),e},i.handleMouseDown=function(t){bt(t)&&(t.stopPropagation(),this.player_.scrubbing(!0),this.videoWasPlaying=!this.player_.paused(),this.player_.pause(),e.prototype.handleMouseDown.call(this,t))},i.handleMouseMove=function(e){if(bt(e)){var t,i=this.calculateDistance(e),n=this.player_.liveTracker;if(n&&n.isLive()){if(i>=.99)return void n.seekToLiveEdge();var r=n.seekableStart(),a=n.liveCurrentTime();if((t=r+i*n.liveWindow())>=a&&(t=a),t<=r&&(t=r+.1),t===1/0)return}else(t=i*this.player_.duration())===this.player_.duration()&&(t-=.1);this.player_.currentTime(t)}},i.enable=function(){e.prototype.enable.call(this);var t=this.getChild("mouseTimeDisplay");t&&t.show()},i.disable=function(){e.prototype.disable.call(this);var t=this.getChild("mouseTimeDisplay");t&&t.hide()},i.handleMouseUp=function(t){e.prototype.handleMouseUp.call(this,t),t&&t.stopPropagation(),this.player_.scrubbing(!1),this.player_.trigger({type:"timeupdate",target:this,manuallyTriggered:!0}),this.videoWasPlaying?Qi(this.player_.play()):this.update_()},i.stepForward=function(){this.player_.currentTime(this.player_.currentTime()+5)},i.stepBack=function(){this.player_.currentTime(this.player_.currentTime()-5)},i.handleAction=function(e){this.player_.paused()?this.player_.play():this.player_.pause()},i.handleKeyDown=function(t){if(g.a.isEventKey(t,"Space")||g.a.isEventKey(t,"Enter"))t.preventDefault(),t.stopPropagation(),this.handleAction(t);else if(g.a.isEventKey(t,"Home"))t.preventDefault(),t.stopPropagation(),this.player_.currentTime(0);else if(g.a.isEventKey(t,"End"))t.preventDefault(),t.stopPropagation(),this.player_.currentTime(this.player_.duration());else if(/^[0-9]$/.test(g()(t))){t.preventDefault(),t.stopPropagation();var i=10*(g.a.codes[g()(t)]-g.a.codes[0])/100;this.player_.currentTime(this.player_.duration()*i)}else g.a.isEventKey(t,"PgDn")?(t.preventDefault(),t.stopPropagation(),this.player_.currentTime(this.player_.currentTime()-60)):g.a.isEventKey(t,"PgUp")?(t.preventDefault(),t.stopPropagation(),this.player_.currentTime(this.player_.currentTime()+60)):e.prototype.handleKeyDown.call(this,t)},i.dispose=function(){this.disableInterval_(),this.off(this.player_,["ended","durationchange","timeupdate"],this.update),this.player_.liveTracker&&this.on(this.player_.liveTracker,"liveedgechange",this.update),this.off(this.player_,["playing"],this.enableInterval_),this.off(this.player_,["ended","pause","waiting"],this.disableInterval_),"hidden"in s.a&&"visibilityState"in s.a&&this.off(s.a,"visibilitychange",this.toggleVisibility_),e.prototype.dispose.call(this)},t}(hr);yr.prototype.options_={children:["loadProgressBar","playProgressBar"],barName:"playProgressBar"},Di||Ti||yr.prototype.options_.children.splice(1,0,"mouseTimeDisplay"),fi.registerComponent("SeekBar",yr);var _r=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).handleMouseMove=Kt(Xt(c()(n),n.handleMouseMove),30),n.throttledHandleMouseSeek=Kt(Xt(c()(n),n.handleMouseSeek),30),n.enable(),n}h()(t,e);var i=t.prototype;return i.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-progress-control vjs-control"})},i.handleMouseMove=function(e){var t=this.getChild("seekBar");if(t){var i=t.getChild("playProgressBar"),n=t.getChild("mouseTimeDisplay");if(i||n){var r=t.el(),a=pt(r),s=ft(r,e).x;s=dr(s,0,1),n&&n.update(a,s),i&&i.update(a,t.getProgress())}}},i.handleMouseSeek=function(e){var t=this.getChild("seekBar");t&&t.handleMouseMove(e)},i.enabled=function(){return this.enabled_},i.disable=function(){this.children().forEach((function(e){return e.disable&&e.disable()})),this.enabled()&&(this.off(["mousedown","touchstart"],this.handleMouseDown),this.off(this.el_,"mousemove",this.handleMouseMove),this.handleMouseUp(),this.addClass("disabled"),this.enabled_=!1)},i.enable=function(){this.children().forEach((function(e){return e.enable&&e.enable()})),this.enabled()||(this.on(["mousedown","touchstart"],this.handleMouseDown),this.on(this.el_,"mousemove",this.handleMouseMove),this.removeClass("disabled"),this.enabled_=!0)},i.handleMouseDown=function(e){var t=this.el_.ownerDocument,i=this.getChild("seekBar");i&&i.handleMouseDown(e),this.on(t,"mousemove",this.throttledHandleMouseSeek),this.on(t,"touchmove",this.throttledHandleMouseSeek),this.on(t,"mouseup",this.handleMouseUp),this.on(t,"touchend",this.handleMouseUp)},i.handleMouseUp=function(e){var t=this.el_.ownerDocument,i=this.getChild("seekBar");i&&i.handleMouseUp(e),this.off(t,"mousemove",this.throttledHandleMouseSeek),this.off(t,"touchmove",this.throttledHandleMouseSeek),this.off(t,"mouseup",this.handleMouseUp),this.off(t,"touchend",this.handleMouseUp)},t}(fi);_r.prototype.options_={children:["seekBar"]},fi.registerComponent("ProgressControl",_r);var br=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).on(t,["enterpictureinpicture","leavepictureinpicture"],n.handlePictureInPictureChange),n.on(t,["disablepictureinpicturechanged","loadedmetadata"],n.handlePictureInPictureEnabledChange),n.disable(),n}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-picture-in-picture-control "+e.prototype.buildCSSClass.call(this)},i.handlePictureInPictureEnabledChange=function(){s.a.pictureInPictureEnabled&&!1===this.player_.disablePictureInPicture()?this.enable():this.disable()},i.handlePictureInPictureChange=function(e){this.player_.isInPictureInPicture()?this.controlText("Exit Picture-in-Picture"):this.controlText("Picture-in-Picture"),this.handlePictureInPictureEnabledChange()},i.handleClick=function(e){this.player_.isInPictureInPicture()?this.player_.exitPictureInPicture():this.player_.requestPictureInPicture()},t}(Jn);br.prototype.controlText_="Picture-in-Picture",fi.registerComponent("PictureInPictureToggle",br);var Tr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).on(t,"fullscreenchange",n.handleFullscreenChange),!1===s.a[t.fsApi_.fullscreenEnabled]&&n.disable(),n}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-fullscreen-control "+e.prototype.buildCSSClass.call(this)},i.handleFullscreenChange=function(e){this.player_.isFullscreen()?this.controlText("Non-Fullscreen"):this.controlText("Fullscreen")},i.handleClick=function(e){this.player_.isFullscreen()?this.player_.exitFullscreen():this.player_.requestFullscreen()},t}(Jn);Tr.prototype.controlText_="Fullscreen",fi.registerComponent("FullscreenToggle",Tr);var Sr=function(e){function t(){return e.apply(this,arguments)||this}return h()(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-volume-level",innerHTML:'<span class="vjs-control-text"></span>'})},t}(fi);fi.registerComponent("VolumeLevel",Sr);var jr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).on("slideractive",n.updateLastVolume_),n.on(t,"volumechange",n.updateARIAAttributes),t.ready((function(){return n.updateARIAAttributes()})),n}h()(t,e);var i=t.prototype;return i.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-volume-bar vjs-slider-bar"},{"aria-label":this.localize("Volume Level"),"aria-live":"polite"})},i.handleMouseDown=function(t){bt(t)&&e.prototype.handleMouseDown.call(this,t)},i.handleMouseMove=function(e){bt(e)&&(this.checkMuted(),this.player_.volume(this.calculateDistance(e)))},i.checkMuted=function(){this.player_.muted()&&this.player_.muted(!1)},i.getPercent=function(){return this.player_.muted()?0:this.player_.volume()},i.stepForward=function(){this.checkMuted(),this.player_.volume(this.player_.volume()+.1)},i.stepBack=function(){this.checkMuted(),this.player_.volume(this.player_.volume()-.1)},i.updateARIAAttributes=function(e){var t=this.player_.muted()?0:this.volumeAsPercentage_();this.el_.setAttribute("aria-valuenow",t),this.el_.setAttribute("aria-valuetext",t+"%")},i.volumeAsPercentage_=function(){return Math.round(100*this.player_.volume())},i.updateLastVolume_=function(){var e=this,t=this.player_.volume();this.one("sliderinactive",(function(){0===e.player_.volume()&&e.player_.lastVolume_(t)}))},t}(hr);jr.prototype.options_={children:["volumeLevel"],barName:"volumeLevel"},jr.prototype.playerEvent="volumechange",fi.registerComponent("VolumeBar",jr);var kr=function(e){function t(t,i){var n;return void 0===i&&(i={}),i.vertical=i.vertical||!1,(void 0===i.volumeBar||qe(i.volumeBar))&&(i.volumeBar=i.volumeBar||{},i.volumeBar.vertical=i.vertical),n=e.call(this,t,i)||this,function(e,t){t.tech_&&!t.tech_.featuresVolumeControl&&e.addClass("vjs-hidden"),e.on(t,"loadstart",(function(){t.tech_.featuresVolumeControl?e.removeClass("vjs-hidden"):e.addClass("vjs-hidden")}))}(c()(n),t),n.throttledHandleMouseMove=Kt(Xt(c()(n),n.handleMouseMove),30),n.on("mousedown",n.handleMouseDown),n.on("touchstart",n.handleMouseDown),n.on(n.volumeBar,["focus","slideractive"],(function(){n.volumeBar.addClass("vjs-slider-active"),n.addClass("vjs-slider-active"),n.trigger("slideractive")})),n.on(n.volumeBar,["blur","sliderinactive"],(function(){n.volumeBar.removeClass("vjs-slider-active"),n.removeClass("vjs-slider-active"),n.trigger("sliderinactive")})),n}h()(t,e);var i=t.prototype;return i.createEl=function(){var t="vjs-volume-horizontal";return this.options_.vertical&&(t="vjs-volume-vertical"),e.prototype.createEl.call(this,"div",{className:"vjs-volume-control vjs-control "+t})},i.handleMouseDown=function(e){var t=this.el_.ownerDocument;this.on(t,"mousemove",this.throttledHandleMouseMove),this.on(t,"touchmove",this.throttledHandleMouseMove),this.on(t,"mouseup",this.handleMouseUp),this.on(t,"touchend",this.handleMouseUp)},i.handleMouseUp=function(e){var t=this.el_.ownerDocument;this.off(t,"mousemove",this.throttledHandleMouseMove),this.off(t,"touchmove",this.throttledHandleMouseMove),this.off(t,"mouseup",this.handleMouseUp),this.off(t,"touchend",this.handleMouseUp)},i.handleMouseMove=function(e){this.volumeBar.handleMouseMove(e)},t}(fi);kr.prototype.options_={children:["volumeBar"]},fi.registerComponent("VolumeControl",kr);var Cr=function(e){function t(t,i){var n;return n=e.call(this,t,i)||this,function(e,t){t.tech_&&!t.tech_.featuresMuteControl&&e.addClass("vjs-hidden"),e.on(t,"loadstart",(function(){t.tech_.featuresMuteControl?e.removeClass("vjs-hidden"):e.addClass("vjs-hidden")}))}(c()(n),t),n.on(t,["loadstart","volumechange"],n.update),n}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-mute-control "+e.prototype.buildCSSClass.call(this)},i.handleClick=function(e){var t=this.player_.volume(),i=this.player_.lastVolume_();if(0===t){var n=i<.1?.1:i;this.player_.volume(n),this.player_.muted(!1)}else this.player_.muted(!this.player_.muted())},i.update=function(e){this.updateIcon_(),this.updateControlText_()},i.updateIcon_=function(){var e=this.player_.volume(),t=3;Di&&this.player_.tech_&&this.player_.tech_.el_&&this.player_.muted(this.player_.tech_.el_.muted),0===e||this.player_.muted()?t=0:e<.33?t=1:e<.67&&(t=2);for(var i=0;i<4;i++)nt(this.el_,"vjs-vol-"+i);it(this.el_,"vjs-vol-"+t)},i.updateControlText_=function(){var e=this.player_.muted()||0===this.player_.volume()?"Unmute":"Mute";this.controlText()!==e&&this.controlText(e)},t}(Jn);Cr.prototype.controlText_="Mute",fi.registerComponent("MuteToggle",Cr);var wr=function(e){function t(t,i){var n;return void 0===i&&(i={}),void 0!==i.inline?i.inline=i.inline:i.inline=!0,(void 0===i.volumeControl||qe(i.volumeControl))&&(i.volumeControl=i.volumeControl||{},i.volumeControl.vertical=!i.inline),(n=e.call(this,t,i)||this).on(t,["loadstart"],n.volumePanelState_),n.on(n.muteToggle,"keyup",n.handleKeyPress),n.on(n.volumeControl,"keyup",n.handleVolumeControlKeyUp),n.on("keydown",n.handleKeyPress),n.on("mouseover",n.handleMouseOver),n.on("mouseout",n.handleMouseOut),n.on(n.volumeControl,["slideractive"],n.sliderActive_),n.on(n.volumeControl,["sliderinactive"],n.sliderInactive_),n}h()(t,e);var i=t.prototype;return i.sliderActive_=function(){this.addClass("vjs-slider-active")},i.sliderInactive_=function(){this.removeClass("vjs-slider-active")},i.volumePanelState_=function(){this.volumeControl.hasClass("vjs-hidden")&&this.muteToggle.hasClass("vjs-hidden")&&this.addClass("vjs-hidden"),this.volumeControl.hasClass("vjs-hidden")&&!this.muteToggle.hasClass("vjs-hidden")&&this.addClass("vjs-mute-toggle-only")},i.createEl=function(){var t="vjs-volume-panel-horizontal";return this.options_.inline||(t="vjs-volume-panel-vertical"),e.prototype.createEl.call(this,"div",{className:"vjs-volume-panel vjs-control "+t})},i.dispose=function(){this.handleMouseOut(),e.prototype.dispose.call(this)},i.handleVolumeControlKeyUp=function(e){g.a.isEventKey(e,"Esc")&&this.muteToggle.focus()},i.handleMouseOver=function(e){this.addClass("vjs-hover"),Ft(s.a,"keyup",Xt(this,this.handleKeyPress))},i.handleMouseOut=function(e){this.removeClass("vjs-hover"),Bt(s.a,"keyup",Xt(this,this.handleKeyPress))},i.handleKeyPress=function(e){g.a.isEventKey(e,"Esc")&&this.handleMouseOut()},t}(fi);wr.prototype.options_={children:["muteToggle","volumeControl"]},fi.registerComponent("VolumePanel",wr);var Er=function(e){function t(t,i){var n;return n=e.call(this,t,i)||this,i&&(n.menuButton_=i.menuButton),n.focusedChild_=-1,n.on("keydown",n.handleKeyDown),n.boundHandleBlur_=Xt(c()(n),n.handleBlur),n.boundHandleTapClick_=Xt(c()(n),n.handleTapClick),n}h()(t,e);var i=t.prototype;return i.addEventListenerForItem=function(e){e instanceof fi&&(this.on(e,"blur",this.boundHandleBlur_),this.on(e,["tap","click"],this.boundHandleTapClick_))},i.removeEventListenerForItem=function(e){e instanceof fi&&(this.off(e,"blur",this.boundHandleBlur_),this.off(e,["tap","click"],this.boundHandleTapClick_))},i.removeChild=function(t){"string"==typeof t&&(t=this.getChild(t)),this.removeEventListenerForItem(t),e.prototype.removeChild.call(this,t)},i.addItem=function(e){var t=this.addChild(e);t&&this.addEventListenerForItem(t)},i.createEl=function(){var t=this.options_.contentElType||"ul";this.contentEl_=Ze(t,{className:"vjs-menu-content"}),this.contentEl_.setAttribute("role","menu");var i=e.prototype.createEl.call(this,"div",{append:this.contentEl_,className:"vjs-menu"});return i.appendChild(this.contentEl_),Ft(i,"click",(function(e){e.preventDefault(),e.stopImmediatePropagation()})),i},i.dispose=function(){this.contentEl_=null,this.boundHandleBlur_=null,this.boundHandleTapClick_=null,e.prototype.dispose.call(this)},i.handleBlur=function(e){var t=e.relatedTarget||s.a.activeElement;if(!this.children().some((function(e){return e.el()===t}))){var i=this.menuButton_;i&&i.buttonPressed_&&t!==i.el().firstChild&&i.unpressButton()}},i.handleTapClick=function(e){if(this.menuButton_){this.menuButton_.unpressButton();var t=this.children();if(!Array.isArray(t))return;var i=t.filter((function(t){return t.el()===e.target}))[0];if(!i)return;"CaptionSettingsMenuItem"!==i.name()&&this.menuButton_.focus()}},i.handleKeyDown=function(e){g.a.isEventKey(e,"Left")||g.a.isEventKey(e,"Down")?(e.preventDefault(),e.stopPropagation(),this.stepForward()):(g.a.isEventKey(e,"Right")||g.a.isEventKey(e,"Up"))&&(e.preventDefault(),e.stopPropagation(),this.stepBack())},i.stepForward=function(){var e=0;void 0!==this.focusedChild_&&(e=this.focusedChild_+1),this.focus(e)},i.stepBack=function(){var e=0;void 0!==this.focusedChild_&&(e=this.focusedChild_-1),this.focus(e)},i.focus=function(e){void 0===e&&(e=0);var t=this.children().slice();t.length&&t[0].className&&/vjs-menu-title/.test(t[0].className)&&t.shift(),t.length>0&&(e<0?e=0:e>=t.length&&(e=t.length-1),this.focusedChild_=e,t[e].el_.focus())},t}(fi);fi.registerComponent("Menu",Er);var Ar=function(e){function t(t,i){var n;void 0===i&&(i={}),(n=e.call(this,t,i)||this).menuButton_=new Jn(t,i),n.menuButton_.controlText(n.controlText_),n.menuButton_.el_.setAttribute("aria-haspopup","true");var r=Jn.prototype.buildCSSClass();return n.menuButton_.el_.className=n.buildCSSClass()+" "+r,n.menuButton_.removeClass("vjs-control"),n.addChild(n.menuButton_),n.update(),n.enabled_=!0,n.on(n.menuButton_,"tap",n.handleClick),n.on(n.menuButton_,"click",n.handleClick),n.on(n.menuButton_,"keydown",n.handleKeyDown),n.on(n.menuButton_,"mouseenter",(function(){n.addClass("vjs-hover"),n.menu.show(),Ft(s.a,"keyup",Xt(c()(n),n.handleMenuKeyUp))})),n.on("mouseleave",n.handleMouseLeave),n.on("keydown",n.handleSubmenuKeyDown),n}h()(t,e);var i=t.prototype;return i.update=function(){var e=this.createMenu();this.menu&&(this.menu.dispose(),this.removeChild(this.menu)),this.menu=e,this.addChild(e),this.buttonPressed_=!1,this.menuButton_.el_.setAttribute("aria-expanded","false"),this.items&&this.items.length<=this.hideThreshold_?this.hide():this.show()},i.createMenu=function(){var e=new Er(this.player_,{menuButton:this});if(this.hideThreshold_=0,this.options_.title){var t=Ze("li",{className:"vjs-menu-title",innerHTML:li(this.options_.title),tabIndex:-1});this.hideThreshold_+=1;var i=new fi(this.player_,{el:t});e.addItem(i)}if(this.items=this.createItems(),this.items)for(var n=0;n<this.items.length;n++)e.addItem(this.items[n]);return e},i.createItems=function(){},i.createEl=function(){return e.prototype.createEl.call(this,"div",{className:this.buildWrapperCSSClass()},{})},i.buildWrapperCSSClass=function(){var t="vjs-menu-button";return!0===this.options_.inline?t+="-inline":t+="-popup","vjs-menu-button "+t+" "+Jn.prototype.buildCSSClass()+" "+e.prototype.buildCSSClass.call(this)},i.buildCSSClass=function(){var t="vjs-menu-button";return!0===this.options_.inline?t+="-inline":t+="-popup","vjs-menu-button "+t+" "+e.prototype.buildCSSClass.call(this)},i.controlText=function(e,t){return void 0===t&&(t=this.menuButton_.el()),this.menuButton_.controlText(e,t)},i.dispose=function(){this.handleMouseLeave(),e.prototype.dispose.call(this)},i.handleClick=function(e){this.buttonPressed_?this.unpressButton():this.pressButton()},i.handleMouseLeave=function(e){this.removeClass("vjs-hover"),Bt(s.a,"keyup",Xt(this,this.handleMenuKeyUp))},i.focus=function(){this.menuButton_.focus()},i.blur=function(){this.menuButton_.blur()},i.handleKeyDown=function(e){g.a.isEventKey(e,"Esc")||g.a.isEventKey(e,"Tab")?(this.buttonPressed_&&this.unpressButton(),g.a.isEventKey(e,"Tab")||(e.preventDefault(),this.menuButton_.focus())):(g.a.isEventKey(e,"Up")||g.a.isEventKey(e,"Down"))&&(this.buttonPressed_||(e.preventDefault(),this.pressButton()))},i.handleMenuKeyUp=function(e){(g.a.isEventKey(e,"Esc")||g.a.isEventKey(e,"Tab"))&&this.removeClass("vjs-hover")},i.handleSubmenuKeyPress=function(e){this.handleSubmenuKeyDown(e)},i.handleSubmenuKeyDown=function(e){(g.a.isEventKey(e,"Esc")||g.a.isEventKey(e,"Tab"))&&(this.buttonPressed_&&this.unpressButton(),g.a.isEventKey(e,"Tab")||(e.preventDefault(),this.menuButton_.focus()))},i.pressButton=function(){if(this.enabled_){if(this.buttonPressed_=!0,this.menu.show(),this.menu.lockShowing(),this.menuButton_.el_.setAttribute("aria-expanded","true"),Di&&Qe())return;this.menu.focus()}},i.unpressButton=function(){this.enabled_&&(this.buttonPressed_=!1,this.menu.unlockShowing(),this.menu.hide(),this.menuButton_.el_.setAttribute("aria-expanded","false"))},i.disable=function(){this.unpressButton(),this.enabled_=!1,this.addClass("vjs-disabled"),this.menuButton_.disable()},i.enable=function(){this.enabled_=!0,this.removeClass("vjs-disabled"),this.menuButton_.enable()},t}(fi);fi.registerComponent("MenuButton",Ar);var xr=function(e){function t(t,i){var n,r=i.tracks;if((n=e.call(this,t,i)||this).items.length<=1&&n.hide(),!r)return c()(n);var a=Xt(c()(n),n.update);return r.addEventListener("removetrack",a),r.addEventListener("addtrack",a),n.player_.on("ready",a),n.player_.on("dispose",(function(){r.removeEventListener("removetrack",a),r.removeEventListener("addtrack",a)})),n}return h()(t,e),t}(Ar);fi.registerComponent("TrackButton",xr);var Ir=["Tab","Esc","Up","Down","Right","Left"],Pr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).selectable=i.selectable,n.isSelected_=i.selected||!1,n.multiSelectable=i.multiSelectable,n.selected(n.isSelected_),n.selectable?n.multiSelectable?n.el_.setAttribute("role","menuitemcheckbox"):n.el_.setAttribute("role","menuitemradio"):n.el_.setAttribute("role","menuitem"),n}h()(t,e);var i=t.prototype;return i.createEl=function(t,i,n){return this.nonIconControl=!0,e.prototype.createEl.call(this,"li",Ve({className:"vjs-menu-item",innerHTML:'<span class="vjs-menu-item-text">'+this.localize(this.options_.label)+"</span>",tabIndex:-1},i),n)},i.handleKeyDown=function(t){Ir.some((function(e){return g.a.isEventKey(t,e)}))||e.prototype.handleKeyDown.call(this,t)},i.handleClick=function(e){this.selected(!0)},i.selected=function(e){this.selectable&&(e?(this.addClass("vjs-selected"),this.el_.setAttribute("aria-checked","true"),this.controlText(", selected"),this.isSelected_=!0):(this.removeClass("vjs-selected"),this.el_.setAttribute("aria-checked","false"),this.controlText(""),this.isSelected_=!1))},t}(qn);fi.registerComponent("MenuItem",Pr);var Or=function(e){function t(t,i){var n,a=i.track,o=t.textTracks();i.label=a.label||a.language||"Unknown",i.selected="showing"===a.mode,(n=e.call(this,t,i)||this).track=a,n.kinds=(i.kinds||[i.kind||n.track.kind]).filter(Boolean);var l,u=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];n.handleTracksChange.apply(c()(n),t)},d=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];n.handleSelectedLanguageChange.apply(c()(n),t)};(t.on(["loadstart","texttrackchange"],u),o.addEventListener("change",u),o.addEventListener("selectedlanguagechange",d),n.on("dispose",(function(){t.off(["loadstart","texttrackchange"],u),o.removeEventListener("change",u),o.removeEventListener("selectedlanguagechange",d)})),void 0===o.onchange)&&n.on(["tap","click"],(function(){if("object"!=typeof r.a.Event)try{l=new r.a.Event("change")}catch(e){}l||(l=s.a.createEvent("Event")).initEvent("change",!0,!0),o.dispatchEvent(l)}));return n.handleTracksChange(),n}h()(t,e);var i=t.prototype;return i.handleClick=function(t){var i=this.track,n=this.player_.textTracks();if(e.prototype.handleClick.call(this,t),n)for(var r=0;r<n.length;r++){var a=n[r];-1!==this.kinds.indexOf(a.kind)&&(a===i?"showing"!==a.mode&&(a.mode="showing"):"disabled"!==a.mode&&(a.mode="disabled"))}},i.handleTracksChange=function(e){var t="showing"===this.track.mode;t!==this.isSelected_&&this.selected(t)},i.handleSelectedLanguageChange=function(e){if("showing"===this.track.mode){var t=this.player_.cache_.selectedLanguage;if(t&&t.enabled&&t.language===this.track.language&&t.kind!==this.track.kind)return;this.player_.cache_.selectedLanguage={enabled:!0,language:this.track.language,kind:this.track.kind}}},i.dispose=function(){this.track=null,e.prototype.dispose.call(this)},t}(Pr);fi.registerComponent("TextTrackMenuItem",Or);var Lr=function(e){function t(t,i){return i.track={player:t,kind:i.kind,kinds:i.kinds,default:!1,mode:"disabled"},i.kinds||(i.kinds=[i.kind]),i.label?i.track.label=i.label:i.track.label=i.kinds.join(" and ")+" off",i.selectable=!0,i.multiSelectable=!1,e.call(this,t,i)||this}h()(t,e);var i=t.prototype;return i.handleTracksChange=function(e){for(var t=this.player().textTracks(),i=!0,n=0,r=t.length;n<r;n++){var a=t[n];if(this.options_.kinds.indexOf(a.kind)>-1&&"showing"===a.mode){i=!1;break}}i!==this.isSelected_&&this.selected(i)},i.handleSelectedLanguageChange=function(e){for(var t=this.player().textTracks(),i=!0,n=0,r=t.length;n<r;n++){var a=t[n];if(["captions","descriptions","subtitles"].indexOf(a.kind)>-1&&"showing"===a.mode){i=!1;break}}i&&(this.player_.cache_.selectedLanguage={enabled:!1})},t}(Or);fi.registerComponent("OffTextTrackMenuItem",Lr);var Dr=function(e){function t(t,i){return void 0===i&&(i={}),i.tracks=t.textTracks(),e.call(this,t,i)||this}return h()(t,e),t.prototype.createItems=function(e,t){var i;void 0===e&&(e=[]),void 0===t&&(t=Or),this.label_&&(i=this.label_+" off"),e.push(new Lr(this.player_,{kinds:this.kinds_,kind:this.kind_,label:i})),this.hideThreshold_+=1;var n=this.player_.textTracks();Array.isArray(this.kinds_)||(this.kinds_=[this.kind_]);for(var r=0;r<n.length;r++){var a=n[r];if(this.kinds_.indexOf(a.kind)>-1){var s=new t(this.player_,{track:a,kinds:this.kinds_,kind:this.kind_,selectable:!0,multiSelectable:!1});s.addClass("vjs-"+a.kind+"-menu-item"),e.push(s)}}return e},t}(xr);fi.registerComponent("TextTrackButton",Dr);var Mr=function(e){function t(t,i){var n,r=i.track,a=i.cue,s=t.currentTime();return i.selectable=!0,i.multiSelectable=!1,i.label=a.text,i.selected=a.startTime<=s&&s<a.endTime,(n=e.call(this,t,i)||this).track=r,n.cue=a,r.addEventListener("cuechange",Xt(c()(n),n.update)),n}h()(t,e);var i=t.prototype;return i.handleClick=function(t){e.prototype.handleClick.call(this),this.player_.currentTime(this.cue.startTime),this.update(this.cue.startTime)},i.update=function(e){var t=this.cue,i=this.player_.currentTime();this.selected(t.startTime<=i&&i<t.endTime)},t}(Pr);fi.registerComponent("ChaptersTrackMenuItem",Mr);var Nr=function(e){function t(t,i,n){return e.call(this,t,i,n)||this}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-chapters-button "+e.prototype.buildCSSClass.call(this)},i.buildWrapperCSSClass=function(){return"vjs-chapters-button "+e.prototype.buildWrapperCSSClass.call(this)},i.update=function(t){this.track_&&(!t||"addtrack"!==t.type&&"removetrack"!==t.type)||this.setTrack(this.findChaptersTrack()),e.prototype.update.call(this)},i.setTrack=function(e){if(this.track_!==e){if(this.updateHandler_||(this.updateHandler_=this.update.bind(this)),this.track_){var t=this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);t&&t.removeEventListener("load",this.updateHandler_),this.track_=null}if(this.track_=e,this.track_){this.track_.mode="hidden";var i=this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);i&&i.addEventListener("load",this.updateHandler_)}}},i.findChaptersTrack=function(){for(var e=this.player_.textTracks()||[],t=e.length-1;t>=0;t--){var i=e[t];if(i.kind===this.kind_)return i}},i.getMenuCaption=function(){return this.track_&&this.track_.label?this.track_.label:this.localize(li(this.kind_))},i.createMenu=function(){return this.options_.title=this.getMenuCaption(),e.prototype.createMenu.call(this)},i.createItems=function(){var e=[];if(!this.track_)return e;var t=this.track_.cues;if(!t)return e;for(var i=0,n=t.length;i<n;i++){var r=t[i],a=new Mr(this.player_,{track:this.track_,cue:r});e.push(a)}return e},t}(Dr);Nr.prototype.kind_="chapters",Nr.prototype.controlText_="Chapters",fi.registerComponent("ChaptersButton",Nr);var Rr=function(e){function t(t,i,n){var r;r=e.call(this,t,i,n)||this;var a=t.textTracks(),s=Xt(c()(r),r.handleTracksChange);return a.addEventListener("change",s),r.on("dispose",(function(){a.removeEventListener("change",s)})),r}h()(t,e);var i=t.prototype;return i.handleTracksChange=function(e){for(var t=this.player().textTracks(),i=!1,n=0,r=t.length;n<r;n++){var a=t[n];if(a.kind!==this.kind_&&"showing"===a.mode){i=!0;break}}i?this.disable():this.enable()},i.buildCSSClass=function(){return"vjs-descriptions-button "+e.prototype.buildCSSClass.call(this)},i.buildWrapperCSSClass=function(){return"vjs-descriptions-button "+e.prototype.buildWrapperCSSClass.call(this)},t}(Dr);Rr.prototype.kind_="descriptions",Rr.prototype.controlText_="Descriptions",fi.registerComponent("DescriptionsButton",Rr);var Ur=function(e){function t(t,i,n){return e.call(this,t,i,n)||this}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-subtitles-button "+e.prototype.buildCSSClass.call(this)},i.buildWrapperCSSClass=function(){return"vjs-subtitles-button "+e.prototype.buildWrapperCSSClass.call(this)},t}(Dr);Ur.prototype.kind_="subtitles",Ur.prototype.controlText_="Subtitles",fi.registerComponent("SubtitlesButton",Ur);var zr=function(e){function t(t,i){var n;return i.track={player:t,kind:i.kind,label:i.kind+" settings",selectable:!1,default:!1,mode:"disabled"},i.selectable=!1,i.name="CaptionSettingsMenuItem",(n=e.call(this,t,i)||this).addClass("vjs-texttrack-settings"),n.controlText(", opens "+i.kind+" settings dialog"),n}return h()(t,e),t.prototype.handleClick=function(e){this.player().getChild("textTrackSettings").open()},t}(Or);fi.registerComponent("CaptionSettingsMenuItem",zr);var Fr=function(e){function t(t,i,n){return e.call(this,t,i,n)||this}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-captions-button "+e.prototype.buildCSSClass.call(this)},i.buildWrapperCSSClass=function(){return"vjs-captions-button "+e.prototype.buildWrapperCSSClass.call(this)},i.createItems=function(){var t=[];return this.player().tech_&&this.player().tech_.featuresNativeTextTracks||!this.player().getChild("textTrackSettings")||(t.push(new zr(this.player_,{kind:this.kind_})),this.hideThreshold_+=1),e.prototype.createItems.call(this,t)},t}(Dr);Fr.prototype.kind_="captions",Fr.prototype.controlText_="Captions",fi.registerComponent("CaptionsButton",Fr);var Br=function(e){function t(){return e.apply(this,arguments)||this}return h()(t,e),t.prototype.createEl=function(t,i,n){var r='<span class="vjs-menu-item-text">'+this.localize(this.options_.label);return"captions"===this.options_.track.kind&&(r+='\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> '+this.localize("Captions")+"</span>\n      "),r+="</span>",e.prototype.createEl.call(this,t,Ve({innerHTML:r},i),n)},t}(Or);fi.registerComponent("SubsCapsMenuItem",Br);var Vr=function(e){function t(t,i){var n;return void 0===i&&(i={}),(n=e.call(this,t,i)||this).label_="subtitles",["en","en-us","en-ca","fr-ca"].indexOf(n.player_.language_)>-1&&(n.label_="captions"),n.menuButton_.controlText(li(n.label_)),n}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-subs-caps-button "+e.prototype.buildCSSClass.call(this)},i.buildWrapperCSSClass=function(){return"vjs-subs-caps-button "+e.prototype.buildWrapperCSSClass.call(this)},i.createItems=function(){var t=[];return this.player().tech_&&this.player().tech_.featuresNativeTextTracks||!this.player().getChild("textTrackSettings")||(t.push(new zr(this.player_,{kind:this.label_})),this.hideThreshold_+=1),t=e.prototype.createItems.call(this,t,Br)},t}(Dr);Vr.prototype.kinds_=["captions","subtitles"],Vr.prototype.controlText_="Subtitles",fi.registerComponent("SubsCapsButton",Vr);var Hr=function(e){function t(t,i){var n,r=i.track,a=t.audioTracks();i.label=r.label||r.language||"Unknown",i.selected=r.enabled,(n=e.call(this,t,i)||this).track=r,n.addClass("vjs-"+r.kind+"-menu-item");var s=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];n.handleTracksChange.apply(c()(n),t)};return a.addEventListener("change",s),n.on("dispose",(function(){a.removeEventListener("change",s)})),n}h()(t,e);var i=t.prototype;return i.createEl=function(t,i,n){var r='<span class="vjs-menu-item-text">'+this.localize(this.options_.label);return"main-desc"===this.options_.track.kind&&(r+='\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> '+this.localize("Descriptions")+"</span>\n      "),r+="</span>",e.prototype.createEl.call(this,t,Ve({innerHTML:r},i),n)},i.handleClick=function(t){var i=this.player_.audioTracks();e.prototype.handleClick.call(this,t);for(var n=0;n<i.length;n++){var r=i[n];r.enabled=r===this.track}},i.handleTracksChange=function(e){this.selected(this.track.enabled)},t}(Pr);fi.registerComponent("AudioTrackMenuItem",Hr);var qr=function(e){function t(t,i){return void 0===i&&(i={}),i.tracks=t.audioTracks(),e.call(this,t,i)||this}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-audio-button "+e.prototype.buildCSSClass.call(this)},i.buildWrapperCSSClass=function(){return"vjs-audio-button "+e.prototype.buildWrapperCSSClass.call(this)},i.createItems=function(e){void 0===e&&(e=[]),this.hideThreshold_=1;for(var t=this.player_.audioTracks(),i=0;i<t.length;i++){var n=t[i];e.push(new Hr(this.player_,{track:n,selectable:!0,multiSelectable:!1}))}return e},t}(xr);qr.prototype.controlText_="Audio Track",fi.registerComponent("AudioTrackButton",qr);var Wr=function(e){function t(t,i){var n,r=i.rate,a=parseFloat(r,10);return i.label=r,i.selected=1===a,i.selectable=!0,i.multiSelectable=!1,(n=e.call(this,t,i)||this).label=r,n.rate=a,n.on(t,"ratechange",n.update),n}h()(t,e);var i=t.prototype;return i.handleClick=function(t){e.prototype.handleClick.call(this),this.player().playbackRate(this.rate)},i.update=function(e){this.selected(this.player().playbackRate()===this.rate)},t}(Pr);Wr.prototype.contentElType="button",fi.registerComponent("PlaybackRateMenuItem",Wr);var Gr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).updateVisibility(),n.updateLabel(),n.on(t,"loadstart",n.updateVisibility),n.on(t,"ratechange",n.updateLabel),n}h()(t,e);var i=t.prototype;return i.createEl=function(){var t=e.prototype.createEl.call(this);return this.labelEl_=Ze("div",{className:"vjs-playback-rate-value",innerHTML:"1x"}),t.appendChild(this.labelEl_),t},i.dispose=function(){this.labelEl_=null,e.prototype.dispose.call(this)},i.buildCSSClass=function(){return"vjs-playback-rate "+e.prototype.buildCSSClass.call(this)},i.buildWrapperCSSClass=function(){return"vjs-playback-rate "+e.prototype.buildWrapperCSSClass.call(this)},i.createMenu=function(){var e=new Er(this.player()),t=this.playbackRates();if(t)for(var i=t.length-1;i>=0;i--)e.addChild(new Wr(this.player(),{rate:t[i]+"x"}));return e},i.updateARIAAttributes=function(){this.el().setAttribute("aria-valuenow",this.player().playbackRate())},i.handleClick=function(e){for(var t=this.player().playbackRate(),i=this.playbackRates(),n=i[0],r=0;r<i.length;r++)if(i[r]>t){n=i[r];break}this.player().playbackRate(n)},i.playbackRates=function(){return this.options_.playbackRates||this.options_.playerOptions&&this.options_.playerOptions.playbackRates},i.playbackRateSupported=function(){return this.player().tech_&&this.player().tech_.featuresPlaybackRate&&this.playbackRates()&&this.playbackRates().length>0},i.updateVisibility=function(e){this.playbackRateSupported()?this.removeClass("vjs-hidden"):this.addClass("vjs-hidden")},i.updateLabel=function(e){this.playbackRateSupported()&&(this.labelEl_.innerHTML=this.player().playbackRate()+"x")},t}(Ar);Gr.prototype.controlText_="Playback Rate",fi.registerComponent("PlaybackRateMenuButton",Gr);var Xr=function(e){function t(){return e.apply(this,arguments)||this}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-spacer "+e.prototype.buildCSSClass.call(this)},i.createEl=function(){return e.prototype.createEl.call(this,"div",{className:this.buildCSSClass()})},t}(fi);fi.registerComponent("Spacer",Xr);var Kr=function(e){function t(){return e.apply(this,arguments)||this}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-custom-control-spacer "+e.prototype.buildCSSClass.call(this)},i.createEl=function(){var t=e.prototype.createEl.call(this,{className:this.buildCSSClass()});return t.innerHTML=" ",t},t}(Xr);fi.registerComponent("CustomControlSpacer",Kr);var Yr=function(e){function t(){return e.apply(this,arguments)||this}return h()(t,e),t.prototype.createEl=function(){return e.prototype.createEl.call(this,"div",{className:"vjs-control-bar",dir:"ltr"})},t}(fi);Yr.prototype.options_={children:["playToggle","volumePanel","currentTimeDisplay","timeDivider","durationDisplay","progressControl","liveDisplay","seekToLive","remainingTimeDisplay","customControlSpacer","playbackRateMenuButton","chaptersButton","descriptionsButton","subsCapsButton","audioTrackButton","fullscreenToggle"]},"exitPictureInPicture"in s.a&&Yr.prototype.options_.children.splice(Yr.prototype.options_.children.length-1,0,"pictureInPictureToggle"),fi.registerComponent("ControlBar",Yr);var Qr=function(e){function t(t,i){var n;return(n=e.call(this,t,i)||this).on(t,"error",n.open),n}h()(t,e);var i=t.prototype;return i.buildCSSClass=function(){return"vjs-error-display "+e.prototype.buildCSSClass.call(this)},i.content=function(){var e=this.player().error();return e?this.localize(e.message):""},t}(en);Qr.prototype.options_=l()({},en.prototype.options_,{pauseOnOpen:!1,fillAlways:!0,temporary:!1,uncloseable:!0}),fi.registerComponent("ErrorDisplay",Qr);var Jr=["#000","Black"],Zr=["#00F","Blue"],$r=["#0FF","Cyan"],ea=["#0F0","Green"],ta=["#F0F","Magenta"],ia=["#F00","Red"],na=["#FFF","White"],ra=["#FF0","Yellow"],aa=["1","Opaque"],sa=["0.5","Semi-Transparent"],oa=["0","Transparent"],la={backgroundColor:{selector:".vjs-bg-color > select",id:"captions-background-color-%s",label:"Color",options:[Jr,na,ia,ea,Zr,ra,ta,$r]},backgroundOpacity:{selector:".vjs-bg-opacity > select",id:"captions-background-opacity-%s",label:"Transparency",options:[aa,sa,oa]},color:{selector:".vjs-fg-color > select",id:"captions-foreground-color-%s",label:"Color",options:[na,Jr,ia,ea,Zr,ra,ta,$r]},edgeStyle:{selector:".vjs-edge-style > select",id:"%s",label:"Text Edge Style",options:[["none","None"],["raised","Raised"],["depressed","Depressed"],["uniform","Uniform"],["dropshadow","Dropshadow"]]},fontFamily:{selector:".vjs-font-family > select",id:"captions-font-family-%s",label:"Font Family",options:[["proportionalSansSerif","Proportional Sans-Serif"],["monospaceSansSerif","Monospace Sans-Serif"],["proportionalSerif","Proportional Serif"],["monospaceSerif","Monospace Serif"],["casual","Casual"],["script","Script"],["small-caps","Small Caps"]]},fontPercent:{selector:".vjs-font-percent > select",id:"captions-font-size-%s",label:"Font Size",options:[["0.50","50%"],["0.75","75%"],["1.00","100%"],["1.25","125%"],["1.50","150%"],["1.75","175%"],["2.00","200%"],["3.00","300%"],["4.00","400%"]],default:2,parser:function(e){return"1.00"===e?null:Number(e)}},textOpacity:{selector:".vjs-text-opacity > select",id:"captions-foreground-opacity-%s",label:"Transparency",options:[aa,sa]},windowColor:{selector:".vjs-window-color > select",id:"captions-window-color-%s",label:"Color"},windowOpacity:{selector:".vjs-window-opacity > select",id:"captions-window-opacity-%s",label:"Transparency",options:[oa,sa,aa]}};function ua(e,t){if(t&&(e=t(e)),e&&"none"!==e)return e}la.windowColor.options=la.backgroundColor.options;var ca=function(e){function t(t,i){var n;return i.temporary=!1,(n=e.call(this,t,i)||this).updateDisplay=Xt(c()(n),n.updateDisplay),n.fill(),n.hasBeenOpened_=n.hasBeenFilled_=!0,n.endDialog=Ze("p",{className:"vjs-control-text",textContent:n.localize("End of dialog window.")}),n.el().appendChild(n.endDialog),n.setDefaults(),void 0===i.persistTextTrackSettings&&(n.options_.persistTextTrackSettings=n.options_.playerOptions.persistTextTrackSettings),n.on(n.$(".vjs-done-button"),"click",(function(){n.saveSettings(),n.close()})),n.on(n.$(".vjs-default-button"),"click",(function(){n.setDefaults(),n.updateDisplay()})),Be(la,(function(e){n.on(n.$(e.selector),"change",n.updateDisplay)})),n.options_.persistTextTrackSettings&&n.restoreSettings(),n}h()(t,e);var i=t.prototype;return i.dispose=function(){this.endDialog=null,e.prototype.dispose.call(this)},i.createElSelect_=function(e,t,i){var n=this;void 0===t&&(t=""),void 0===i&&(i="label");var r=la[e],a=r.id.replace("%s",this.id_),s=[t,a].join(" ").trim();return["<"+i+' id="'+a+'" class="'+("label"===i?"vjs-label":"")+'">',this.localize(r.label),"</"+i+">",'<select aria-labelledby="'+s+'">'].concat(r.options.map((function(e){var t=a+"-"+e[1].replace(/\W+/g,"");return['<option id="'+t+'" value="'+e[0]+'" ','aria-labelledby="'+s+" "+t+'">',n.localize(e[1]),"</option>"].join("")}))).concat("</select>").join("")},i.createElFgColor_=function(){var e="captions-text-legend-"+this.id_;return['<fieldset class="vjs-fg-color vjs-track-setting">','<legend id="'+e+'">',this.localize("Text"),"</legend>",this.createElSelect_("color",e),'<span class="vjs-text-opacity vjs-opacity">',this.createElSelect_("textOpacity",e),"</span>","</fieldset>"].join("")},i.createElBgColor_=function(){var e="captions-background-"+this.id_;return['<fieldset class="vjs-bg-color vjs-track-setting">','<legend id="'+e+'">',this.localize("Background"),"</legend>",this.createElSelect_("backgroundColor",e),'<span class="vjs-bg-opacity vjs-opacity">',this.createElSelect_("backgroundOpacity",e),"</span>","</fieldset>"].join("")},i.createElWinColor_=function(){var e="captions-window-"+this.id_;return['<fieldset class="vjs-window-color vjs-track-setting">','<legend id="'+e+'">',this.localize("Window"),"</legend>",this.createElSelect_("windowColor",e),'<span class="vjs-window-opacity vjs-opacity">',this.createElSelect_("windowOpacity",e),"</span>","</fieldset>"].join("")},i.createElColors_=function(){return Ze("div",{className:"vjs-track-settings-colors",innerHTML:[this.createElFgColor_(),this.createElBgColor_(),this.createElWinColor_()].join("")})},i.createElFont_=function(){return Ze("div",{className:"vjs-track-settings-font",innerHTML:['<fieldset class="vjs-font-percent vjs-track-setting">',this.createElSelect_("fontPercent","","legend"),"</fieldset>",'<fieldset class="vjs-edge-style vjs-track-setting">',this.createElSelect_("edgeStyle","","legend"),"</fieldset>",'<fieldset class="vjs-font-family vjs-track-setting">',this.createElSelect_("fontFamily","","legend"),"</fieldset>"].join("")})},i.createElControls_=function(){var e=this.localize("restore all settings to the default values");return Ze("div",{className:"vjs-track-settings-controls",innerHTML:['<button type="button" class="vjs-default-button" title="'+e+'">',this.localize("Reset"),'<span class="vjs-control-text"> '+e+"</span>","</button>",'<button type="button" class="vjs-done-button">'+this.localize("Done")+"</button>"].join("")})},i.content=function(){return[this.createElColors_(),this.createElFont_(),this.createElControls_()]},i.label=function(){return this.localize("Caption Settings Dialog")},i.description=function(){return this.localize("Beginning of dialog window. Escape will cancel and close the window.")},i.buildCSSClass=function(){return e.prototype.buildCSSClass.call(this)+" vjs-text-track-settings"},i.getValues=function(){var e,t,i,n=this;return t=function(e,t,i){var r,a,s=(r=n.$(t.selector),a=t.parser,ua(r.options[r.options.selectedIndex].value,a));return void 0!==s&&(e[i]=s),e},void 0===(i={})&&(i=0),Fe(e=la).reduce((function(i,n){return t(i,e[n],n)}),i)},i.setValues=function(e){var t=this;Be(la,(function(i,n){!function(e,t,i){if(t)for(var n=0;n<e.options.length;n++)if(ua(e.options[n].value,i)===t){e.selectedIndex=n;break}}(t.$(i.selector),e[n],i.parser)}))},i.setDefaults=function(){var e=this;Be(la,(function(t){var i=t.hasOwnProperty("default")?t.default:0;e.$(t.selector).selectedIndex=i}))},i.restoreSettings=function(){var e;try{e=JSON.parse(r.a.localStorage.getItem("vjs-text-track-settings"))}catch(e){Re.warn(e)}e&&this.setValues(e)},i.saveSettings=function(){if(this.options_.persistTextTrackSettings){var e=this.getValues();try{Object.keys(e).length?r.a.localStorage.setItem("vjs-text-track-settings",JSON.stringify(e)):r.a.localStorage.removeItem("vjs-text-track-settings")}catch(e){Re.warn(e)}}},i.updateDisplay=function(){var e=this.player_.getChild("textTrackDisplay");e&&e.updateDisplay()},i.conditionalBlur_=function(){this.previouslyActiveEl_=null;var e=this.player_.controlBar,t=e&&e.subsCapsButton,i=e&&e.captionsButton;t?t.focus():i&&i.focus()},t}(en);fi.registerComponent("TextTrackSettings",ca);var da=function(e){function t(t,i){var n,a=i.ResizeObserver||r.a.ResizeObserver;null===i.ResizeObserver&&(a=!1);var s=ui({createEl:!a,reportTouchActivity:!1},i);return(n=e.call(this,t,s)||this).ResizeObserver=i.ResizeObserver||r.a.ResizeObserver,n.loadListener_=null,n.resizeObserver_=null,n.debouncedHandler_=function(e,t,i,n){var a;void 0===n&&(n=r.a);var s=function(){var r=this,s=arguments,o=function(){a=null,o=null,i||e.apply(r,s)};!a&&i&&e.apply(r,s),n.clearTimeout(a),a=n.setTimeout(o,t)};return s.cancel=function(){n.clearTimeout(a),a=null},s}((function(){n.resizeHandler()}),100,!1,c()(n)),a?(n.resizeObserver_=new n.ResizeObserver(n.debouncedHandler_),n.resizeObserver_.observe(t.el())):(n.loadListener_=function(){if(n.el_&&n.el_.contentWindow){var e=n.debouncedHandler_,t=n.unloadListener_=function(){Bt(this,"resize",e),Bt(this,"unload",t),t=null};Ft(n.el_.contentWindow,"unload",t),Ft(n.el_.contentWindow,"resize",e)}},n.one("load",n.loadListener_)),n}h()(t,e);var i=t.prototype;return i.createEl=function(){return e.prototype.createEl.call(this,"iframe",{className:"vjs-resize-manager",tabIndex:-1},{"aria-hidden":"true"})},i.resizeHandler=function(){this.player_&&this.player_.trigger&&this.player_.trigger("playerresize")},i.dispose=function(){this.debouncedHandler_&&this.debouncedHandler_.cancel(),this.resizeObserver_&&(this.player_.el()&&this.resizeObserver_.unobserve(this.player_.el()),this.resizeObserver_.disconnect()),this.loadListener_&&this.off("load",this.loadListener_),this.el_&&this.el_.contentWindow&&this.unloadListener_&&this.unloadListener_.call(this.el_.contentWindow),this.ResizeObserver=null,this.resizeObserver=null,this.debouncedHandler_=null,this.loadListener_=null,e.prototype.dispose.call(this)},t}(fi);fi.registerComponent("ResizeManager",da);var ha={trackingThreshold:30,liveTolerance:15},pa=function(e){function t(t,i){var n,r=ui(ha,i,{createEl:!1});return(n=e.call(this,t,r)||this).reset_(),n.on(n.player_,"durationchange",n.handleDurationchange),Ai&&"hidden"in s.a&&"visibilityState"in s.a&&n.on(s.a,"visibilitychange",n.handleVisibilityChange),n}h()(t,e);var i=t.prototype;return i.handleVisibilityChange=function(){this.player_.duration()===1/0&&(s.a.hidden?this.stopTracking():this.startTracking())},i.trackLive_=function(){var e=this.player_.seekable();if(e&&e.length){var t=Number(r.a.performance.now().toFixed(4)),i=-1===this.lastTime_?0:(t-this.lastTime_)/1e3;this.lastTime_=t,this.pastSeekEnd_=this.pastSeekEnd()+i;var n=this.liveCurrentTime(),a=this.player_.currentTime(),s=this.player_.paused()||this.seekedBehindLive_||Math.abs(n-a)>this.options_.liveTolerance;this.timeupdateSeen_&&n!==1/0||(s=!1),s!==this.behindLiveEdge_&&(this.behindLiveEdge_=s,this.trigger("liveedgechange"))}},i.handleDurationchange=function(){this.player_.duration()===1/0&&this.liveWindow()>=this.options_.trackingThreshold?(this.player_.options_.liveui&&this.player_.addClass("vjs-liveui"),this.startTracking()):(this.player_.removeClass("vjs-liveui"),this.stopTracking())},i.startTracking=function(){this.isTracking()||(this.timeupdateSeen_||(this.timeupdateSeen_=this.player_.hasStarted()),this.trackingInterval_=this.setInterval(this.trackLive_,30),this.trackLive_(),this.on(this.player_,["play","pause"],this.trackLive_),this.timeupdateSeen_?this.on(this.player_,"seeked",this.handleSeeked):(this.one(this.player_,"play",this.handlePlay),this.one(this.player_,"timeupdate",this.handleFirstTimeupdate)))},i.handleFirstTimeupdate=function(){this.timeupdateSeen_=!0,this.on(this.player_,"seeked",this.handleSeeked)},i.handleSeeked=function(){var e=Math.abs(this.liveCurrentTime()-this.player_.currentTime());this.seekedBehindLive_=!this.skipNextSeeked_&&e>2,this.skipNextSeeked_=!1,this.trackLive_()},i.handlePlay=function(){this.one(this.player_,"timeupdate",this.seekToLiveEdge)},i.reset_=function(){this.lastTime_=-1,this.pastSeekEnd_=0,this.lastSeekEnd_=-1,this.behindLiveEdge_=!0,this.timeupdateSeen_=!1,this.seekedBehindLive_=!1,this.skipNextSeeked_=!1,this.clearInterval(this.trackingInterval_),this.trackingInterval_=null,this.off(this.player_,["play","pause"],this.trackLive_),this.off(this.player_,"seeked",this.handleSeeked),this.off(this.player_,"play",this.handlePlay),this.off(this.player_,"timeupdate",this.handleFirstTimeupdate),this.off(this.player_,"timeupdate",this.seekToLiveEdge)},i.stopTracking=function(){this.isTracking()&&(this.reset_(),this.trigger("liveedgechange"))},i.seekableEnd=function(){for(var e=this.player_.seekable(),t=[],i=e?e.length:0;i--;)t.push(e.end(i));return t.length?t.sort()[t.length-1]:1/0},i.seekableStart=function(){for(var e=this.player_.seekable(),t=[],i=e?e.length:0;i--;)t.push(e.start(i));return t.length?t.sort()[0]:0},i.liveWindow=function(){var e=this.liveCurrentTime();return e===1/0?1/0:e-this.seekableStart()},i.isLive=function(){return this.isTracking()},i.atLiveEdge=function(){return!this.behindLiveEdge()},i.liveCurrentTime=function(){return this.pastSeekEnd()+this.seekableEnd()},i.pastSeekEnd=function(){var e=this.seekableEnd();return-1!==this.lastSeekEnd_&&e!==this.lastSeekEnd_&&(this.pastSeekEnd_=0),this.lastSeekEnd_=e,this.pastSeekEnd_},i.behindLiveEdge=function(){return this.behindLiveEdge_},i.isTracking=function(){return"number"==typeof this.trackingInterval_},i.seekToLiveEdge=function(){this.seekedBehindLive_=!1,this.atLiveEdge()||(this.skipNextSeeked_=!0,this.player_.currentTime(this.liveCurrentTime()))},i.dispose=function(){this.off(s.a,"visibilitychange",this.handleVisibilityChange),this.stopTracking(),e.prototype.dispose.call(this)},t}(fi);fi.registerComponent("LiveTracker",pa);var fa,ma=function(e){var t=e.el();if(t.hasAttribute("src"))return e.triggerSourceset(t.src),!0;var i=e.$$("source"),n=[],r="";if(!i.length)return!1;for(var a=0;a<i.length;a++){var s=i[a].src;s&&-1===n.indexOf(s)&&n.push(s)}return!!n.length&&(1===n.length&&(r=n[0]),e.triggerSourceset(r),!0)},ga=Object.defineProperty({},"innerHTML",{get:function(){return this.cloneNode(!0).innerHTML},set:function(e){var t=s.a.createElement(this.nodeName.toLowerCase());t.innerHTML=e;for(var i=s.a.createDocumentFragment();t.childNodes.length;)i.appendChild(t.childNodes[0]);return this.innerText="",r.a.Element.prototype.appendChild.call(this,i),this.innerHTML}}),va=function(e,t){for(var i={},n=0;n<e.length&&!((i=Object.getOwnPropertyDescriptor(e[n],t))&&i.set&&i.get);n++);return i.enumerable=!0,i.configurable=!0,i},ya=function(e){var t=e.el();if(!t.resetSourceWatch_){var i={},n=function(e){return va([e.el(),r.a.HTMLMediaElement.prototype,r.a.Element.prototype,ga],"innerHTML")}(e),a=function(i){return function(){for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];var s=i.apply(t,r);return ma(e),s}};["append","appendChild","insertAdjacentHTML"].forEach((function(e){t[e]&&(i[e]=t[e],t[e]=a(i[e]))})),Object.defineProperty(t,"innerHTML",ui(n,{set:a(n.set)})),t.resetSourceWatch_=function(){t.resetSourceWatch_=null,Object.keys(i).forEach((function(e){t[e]=i[e]})),Object.defineProperty(t,"innerHTML",n)},e.one("sourceset",t.resetSourceWatch_)}},_a=Object.defineProperty({},"src",{get:function(){return this.hasAttribute("src")?vn(r.a.Element.prototype.getAttribute.call(this,"src")):""},set:function(e){return r.a.Element.prototype.setAttribute.call(this,"src",e),e}}),ba=function(e){if(e.featuresSourceset){var t=e.el();if(!t.resetSourceset_){var i=function(e){return va([e.el(),r.a.HTMLMediaElement.prototype,_a],"src")}(e),n=t.setAttribute,a=t.load;Object.defineProperty(t,"src",ui(i,{set:function(n){var r=i.set.call(t,n);return e.triggerSourceset(t.src),r}})),t.setAttribute=function(i,r){var a=n.call(t,i,r);return/src/i.test(i)&&e.triggerSourceset(t.src),a},t.load=function(){var i=a.call(t);return ma(e)||(e.triggerSourceset(""),ya(e)),i},t.currentSrc?e.triggerSourceset(t.currentSrc):ma(e)||ya(e),t.resetSourceset_=function(){t.resetSourceset_=null,t.load=a,t.setAttribute=n,Object.defineProperty(t,"src",i),t.resetSourceWatch_&&t.resetSourceWatch_()}}}},Ta=function(e,t,i,n){void 0===n&&(n=!0);var r=function(i){return Object.defineProperty(e,t,{value:i,enumerable:!0,writable:!0})},a={configurable:!0,enumerable:!0,get:function(){var e=i();return r(e),e}};return n&&(a.set=r),Object.defineProperty(e,t,a)},Sa=function(e){function t(t,i){var n;n=e.call(this,t,i)||this;var r=t.source,a=!1;if(r&&(n.el_.currentSrc!==r.src||t.tag&&3===t.tag.initNetworkState_)?n.setSource(r):n.handleLateInit_(n.el_),t.enableSourceset&&n.setupSourcesetHandling_(),n.el_.hasChildNodes()){for(var s=n.el_.childNodes,o=s.length,l=[];o--;){var u=s[o];"track"===u.nodeName.toLowerCase()&&(n.featuresNativeTextTracks?(n.remoteTextTrackEls().addTrackElement_(u),n.remoteTextTracks().addTrack(u.track),n.textTracks().addTrack(u.track),a||n.el_.hasAttribute("crossorigin")||!_n(u.src)||(a=!0)):l.push(u))}for(var c=0;c<l.length;c++)n.el_.removeChild(l[c])}return n.proxyNativeTracks_(),n.featuresNativeTextTracks&&a&&Re.warn("Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\nThis may prevent text tracks from loading."),n.restoreMetadataTracksInIOSNativePlayer_(),(Pi||Li||ji)&&!0===t.nativeControlsForTouch&&n.setControls(!0),n.proxyWebkitFullscreen_(),n.triggerReady(),n}h()(t,e);var i=t.prototype;return i.dispose=function(){this.el_&&this.el_.resetSourceset_&&this.el_.resetSourceset_(),t.disposeMediaElement(this.el_),this.options_=null,e.prototype.dispose.call(this)},i.setupSourcesetHandling_=function(){ba(this)},i.restoreMetadataTracksInIOSNativePlayer_=function(){var e,t=this.textTracks(),i=function(){e=[];for(var i=0;i<t.length;i++){var n=t[i];"metadata"===n.kind&&e.push({track:n,storedMode:n.mode})}};i(),t.addEventListener("change",i),this.on("dispose",(function(){return t.removeEventListener("change",i)}));var n=function i(){for(var n=0;n<e.length;n++){var r=e[n];"disabled"===r.track.mode&&r.track.mode!==r.storedMode&&(r.track.mode=r.storedMode)}t.removeEventListener("change",i)};this.on("webkitbeginfullscreen",(function(){t.removeEventListener("change",i),t.removeEventListener("change",n),t.addEventListener("change",n)})),this.on("webkitendfullscreen",(function(){t.removeEventListener("change",i),t.addEventListener("change",i),t.removeEventListener("change",n)}))},i.overrideNative_=function(e,t){var i=this;if(t===this["featuresNative"+e+"Tracks"]){var n=e.toLowerCase();this[n+"TracksListeners_"]&&Object.keys(this[n+"TracksListeners_"]).forEach((function(e){i.el()[n+"Tracks"].removeEventListener(e,i[n+"TracksListeners_"][e])})),this["featuresNative"+e+"Tracks"]=!t,this[n+"TracksListeners_"]=null,this.proxyNativeTracksForType_(n)}},i.overrideNativeAudioTracks=function(e){this.overrideNative_("Audio",e)},i.overrideNativeVideoTracks=function(e){this.overrideNative_("Video",e)},i.proxyNativeTracksForType_=function(e){var t=this,i=En[e],n=this.el()[i.getterName],r=this[i.getterName]();if(this["featuresNative"+i.capitalName+"Tracks"]&&n&&n.addEventListener){var a={change:function(i){var n={type:"change",target:r,currentTarget:r,srcElement:r};r.trigger(n),"text"===e&&t[An.remoteText.getterName]().trigger(n)},addtrack:function(e){r.addTrack(e.track)},removetrack:function(e){r.removeTrack(e.track)}},s=function(){for(var e=[],t=0;t<r.length;t++){for(var i=!1,a=0;a<n.length;a++)if(n[a]===r[t]){i=!0;break}i||e.push(r[t])}for(;e.length;)r.removeTrack(e.shift())};this[i.getterName+"Listeners_"]=a,Object.keys(a).forEach((function(e){var i=a[e];n.addEventListener(e,i),t.on("dispose",(function(t){return n.removeEventListener(e,i)}))})),this.on("loadstart",s),this.on("dispose",(function(e){return t.off("loadstart",s)}))}},i.proxyNativeTracks_=function(){var e=this;En.names.forEach((function(t){e.proxyNativeTracksForType_(t)}))},i.createEl=function(){var e=this.options_.tag;if(!e||!this.options_.playerElIngest&&!this.movingMediaElementInDOM){if(e){var i=e.cloneNode(!0);e.parentNode&&e.parentNode.insertBefore(i,e),t.disposeMediaElement(e),e=i}else{e=s.a.createElement("video");var n=ui({},this.options_.tag&&st(this.options_.tag));Pi&&!0===this.options_.nativeControlsForTouch||delete n.controls,at(e,Ve(n,{id:this.options_.techId,class:"vjs-tech"}))}e.playerId=this.options_.playerId}void 0!==this.options_.preload&&lt(e,"preload",this.options_.preload),void 0!==this.options_.disablePictureInPicture&&(e.disablePictureInPicture=this.options_.disablePictureInPicture);for(var r=["loop","muted","playsinline","autoplay"],a=0;a<r.length;a++){var o=r[a],l=this.options_[o];void 0!==l&&(l?lt(e,o,o):ut(e,o),e[o]=l)}return e},i.handleLateInit_=function(e){if(0!==e.networkState&&3!==e.networkState){if(0===e.readyState){var t=!1,i=function(){t=!0};this.on("loadstart",i);var n=function(){t||this.trigger("loadstart")};return this.on("loadedmetadata",n),void this.ready((function(){this.off("loadstart",i),this.off("loadedmetadata",n),t||this.trigger("loadstart")}))}var r=["loadstart"];r.push("loadedmetadata"),e.readyState>=2&&r.push("loadeddata"),e.readyState>=3&&r.push("canplay"),e.readyState>=4&&r.push("canplaythrough"),this.ready((function(){r.forEach((function(e){this.trigger(e)}),this)}))}},i.setScrubbing=function(e){this.isScrubbing_=e},i.setCurrentTime=function(e){try{this.isScrubbing_&&this.el_.fastSeek&&Mi?this.el_.fastSeek(e):this.el_.currentTime=e}catch(e){Re(e,"Video is not ready. (Video.js)")}},i.duration=function(){var e=this;if(this.el_.duration===1/0&&Ti&&wi&&0===this.el_.currentTime){return this.on("timeupdate",(function t(){e.el_.currentTime>0&&(e.el_.duration===1/0&&e.trigger("durationchange"),e.off("timeupdate",t))})),NaN}return this.el_.duration||NaN},i.width=function(){return this.el_.offsetWidth},i.height=function(){return this.el_.offsetHeight},i.proxyWebkitFullscreen_=function(){var e=this;if("webkitDisplayingFullscreen"in this.el_){var t=function(){this.trigger("fullscreenchange",{isFullscreen:!1})},i=function(){"webkitPresentationMode"in this.el_&&"picture-in-picture"!==this.el_.webkitPresentationMode&&(this.one("webkitendfullscreen",t),this.trigger("fullscreenchange",{isFullscreen:!0,nativeIOSFullscreen:!0}))};this.on("webkitbeginfullscreen",i),this.on("dispose",(function(){e.off("webkitbeginfullscreen",i),e.off("webkitendfullscreen",t)}))}},i.supportsFullScreen=function(){if("function"==typeof this.el_.webkitEnterFullScreen){var e=r.a.navigator&&r.a.navigator.userAgent||"";if(/Android/.test(e)||!/Chrome|Mac OS X 10.5/.test(e))return!0}return!1},i.enterFullScreen=function(){var e=this.el_;if(e.paused&&e.networkState<=e.HAVE_METADATA)Qi(this.el_.play()),this.setTimeout((function(){e.pause();try{e.webkitEnterFullScreen()}catch(e){this.trigger("fullscreenerror",e)}}),0);else try{e.webkitEnterFullScreen()}catch(e){this.trigger("fullscreenerror",e)}},i.exitFullScreen=function(){this.el_.webkitDisplayingFullscreen?this.el_.webkitExitFullScreen():this.trigger("fullscreenerror",new Error("The video is not fullscreen"))},i.requestPictureInPicture=function(){return this.el_.requestPictureInPicture()},i.src=function(e){if(void 0===e)return this.el_.src;this.setSrc(e)},i.reset=function(){t.resetMediaElement(this.el_)},i.currentSrc=function(){return this.currentSource_?this.currentSource_.src:this.el_.currentSrc},i.setControls=function(e){this.el_.controls=!!e},i.addTextTrack=function(t,i,n){return this.featuresNativeTextTracks?this.el_.addTextTrack(t,i,n):e.prototype.addTextTrack.call(this,t,i,n)},i.createRemoteTextTrack=function(t){if(!this.featuresNativeTextTracks)return e.prototype.createRemoteTextTrack.call(this,t);var i=s.a.createElement("track");return t.kind&&(i.kind=t.kind),t.label&&(i.label=t.label),(t.language||t.srclang)&&(i.srclang=t.language||t.srclang),t.default&&(i.default=t.default),t.id&&(i.id=t.id),t.src&&(i.src=t.src),i},i.addRemoteTextTrack=function(t,i){var n=e.prototype.addRemoteTextTrack.call(this,t,i);return this.featuresNativeTextTracks&&this.el().appendChild(n),n},i.removeRemoteTextTrack=function(t){if(e.prototype.removeRemoteTextTrack.call(this,t),this.featuresNativeTextTracks)for(var i=this.$$("track"),n=i.length;n--;)t!==i[n]&&t!==i[n].track||this.el().removeChild(i[n])},i.getVideoPlaybackQuality=function(){if("function"==typeof this.el().getVideoPlaybackQuality)return this.el().getVideoPlaybackQuality();var e={};return void 0!==this.el().webkitDroppedFrameCount&&void 0!==this.el().webkitDecodedFrameCount&&(e.droppedVideoFrames=this.el().webkitDroppedFrameCount,e.totalVideoFrames=this.el().webkitDecodedFrameCount),r.a.performance&&"function"==typeof r.a.performance.now?e.creationTime=r.a.performance.now():r.a.performance&&r.a.performance.timing&&"number"==typeof r.a.performance.timing.navigationStart&&(e.creationTime=r.a.Date.now()-r.a.performance.timing.navigationStart),e},t}(In);Ta(Sa,"TEST_VID",(function(){if(Ke()){var e=s.a.createElement("video"),t=s.a.createElement("track");return t.kind="captions",t.srclang="en",t.label="English",e.appendChild(t),e}})),Sa.isSupported=function(){try{Sa.TEST_VID.volume=.5}catch(e){return!1}return!(!Sa.TEST_VID||!Sa.TEST_VID.canPlayType)},Sa.canPlayType=function(e){return Sa.TEST_VID.canPlayType(e)},Sa.canPlaySource=function(e,t){return Sa.canPlayType(e.type)},Sa.canControlVolume=function(){try{var e=Sa.TEST_VID.volume;return Sa.TEST_VID.volume=e/2+.1,e!==Sa.TEST_VID.volume}catch(e){return!1}},Sa.canMuteVolume=function(){try{var e=Sa.TEST_VID.muted;return Sa.TEST_VID.muted=!e,Sa.TEST_VID.muted?lt(Sa.TEST_VID,"muted","muted"):ut(Sa.TEST_VID,"muted"),e!==Sa.TEST_VID.muted}catch(e){return!1}},Sa.canControlPlaybackRate=function(){if(Ti&&wi&&Ei<58)return!1;try{var e=Sa.TEST_VID.playbackRate;return Sa.TEST_VID.playbackRate=e/2+.1,e!==Sa.TEST_VID.playbackRate}catch(e){return!1}},Sa.canOverrideAttributes=function(){try{var e=function(){};Object.defineProperty(s.a.createElement("video"),"src",{get:e,set:e}),Object.defineProperty(s.a.createElement("audio"),"src",{get:e,set:e}),Object.defineProperty(s.a.createElement("video"),"innerHTML",{get:e,set:e}),Object.defineProperty(s.a.createElement("audio"),"innerHTML",{get:e,set:e})}catch(e){return!1}return!0},Sa.supportsNativeTextTracks=function(){return Mi||Di&&wi},Sa.supportsNativeVideoTracks=function(){return!(!Sa.TEST_VID||!Sa.TEST_VID.videoTracks)},Sa.supportsNativeAudioTracks=function(){return!(!Sa.TEST_VID||!Sa.TEST_VID.audioTracks)},Sa.Events=["loadstart","suspend","abort","error","emptied","stalled","loadedmetadata","loadeddata","canplay","canplaythrough","playing","waiting","seeking","seeked","ended","durationchange","timeupdate","progress","play","pause","ratechange","resize","volumechange"],[["featuresVolumeControl","canControlVolume"],["featuresMuteControl","canMuteVolume"],["featuresPlaybackRate","canControlPlaybackRate"],["featuresSourceset","canOverrideAttributes"],["featuresNativeTextTracks","supportsNativeTextTracks"],["featuresNativeVideoTracks","supportsNativeVideoTracks"],["featuresNativeAudioTracks","supportsNativeAudioTracks"]].forEach((function(e){var t=e[0],i=e[1];Ta(Sa.prototype,t,(function(){return Sa[i]()}),!0)})),Sa.prototype.movingMediaElementInDOM=!Di,Sa.prototype.featuresFullscreenResize=!0,Sa.prototype.featuresProgressEvents=!0,Sa.prototype.featuresTimeupdateEvents=!0,Sa.patchCanPlayType=function(){Si>=4&&!ki&&!wi&&(fa=Sa.TEST_VID&&Sa.TEST_VID.constructor.prototype.canPlayType,Sa.TEST_VID.constructor.prototype.canPlayType=function(e){return e&&/^application\/(?:x-|vnd\.apple\.)mpegurl/i.test(e)?"maybe":fa.call(this,e)})},Sa.unpatchCanPlayType=function(){var e=Sa.TEST_VID.constructor.prototype.canPlayType;return fa&&(Sa.TEST_VID.constructor.prototype.canPlayType=fa),e},Sa.patchCanPlayType(),Sa.disposeMediaElement=function(e){if(e){for(e.parentNode&&e.parentNode.removeChild(e);e.hasChildNodes();)e.removeChild(e.firstChild);e.removeAttribute("src"),"function"==typeof e.load&&function(){try{e.load()}catch(e){}}()}},Sa.resetMediaElement=function(e){if(e){for(var t=e.querySelectorAll("source"),i=t.length;i--;)e.removeChild(t[i]);e.removeAttribute("src"),"function"==typeof e.load&&function(){try{e.load()}catch(e){}}()}},["muted","defaultMuted","autoplay","controls","loop","playsinline"].forEach((function(e){Sa.prototype[e]=function(){return this.el_[e]||this.el_.hasAttribute(e)}})),["muted","defaultMuted","autoplay","loop","playsinline"].forEach((function(e){Sa.prototype["set"+li(e)]=function(t){this.el_[e]=t,t?this.el_.setAttribute(e,e):this.el_.removeAttribute(e)}})),["paused","currentTime","buffered","volume","poster","preload","error","seeking","seekable","ended","playbackRate","defaultPlaybackRate","disablePictureInPicture","played","networkState","readyState","videoWidth","videoHeight","crossOrigin"].forEach((function(e){Sa.prototype[e]=function(){return this.el_[e]}})),["volume","src","poster","preload","playbackRate","defaultPlaybackRate","disablePictureInPicture","crossOrigin"].forEach((function(e){Sa.prototype["set"+li(e)]=function(t){this.el_[e]=t}})),["pause","load","play"].forEach((function(e){Sa.prototype[e]=function(){return this.el_[e]()}})),In.withSourceHandlers(Sa),Sa.nativeSourceHandler={},Sa.nativeSourceHandler.canPlayType=function(e){try{return Sa.TEST_VID.canPlayType(e)}catch(e){return""}},Sa.nativeSourceHandler.canHandleSource=function(e,t){if(e.type)return Sa.nativeSourceHandler.canPlayType(e.type);if(e.src){var i=yn(e.src);return Sa.nativeSourceHandler.canPlayType("video/"+i)}return""},Sa.nativeSourceHandler.handleSource=function(e,t,i){t.setSrc(e.src)},Sa.nativeSourceHandler.dispose=function(){},Sa.registerSourceHandler(Sa.nativeSourceHandler),In.registerTech("Html5",Sa);var ja=["progress","abort","suspend","emptied","stalled","loadedmetadata","loadeddata","timeupdate","resize","volumechange","texttrackchange"],ka={canplay:"CanPlay",canplaythrough:"CanPlayThrough",playing:"Playing",seeked:"Seeked"},Ca=["tiny","xsmall","small","medium","large","xlarge","huge"],wa={};Ca.forEach((function(e){var t="x"===e.charAt(0)?"x-"+e.substring(1):e;wa[e]="vjs-layout-"+t}));var Ea={tiny:210,xsmall:320,small:425,medium:768,large:1440,xlarge:2560,huge:1/0},Aa=function(e){function t(i,n,r){var a;if(i.id=i.id||n.id||"vjs_video_"+Lt(),(n=Ve(t.getTagSettings(i),n)).initChildren=!1,n.createEl=!1,n.evented=!1,n.reportTouchActivity=!1,!n.language)if("function"==typeof i.closest){var o=i.closest("[lang]");o&&o.getAttribute&&(n.language=o.getAttribute("lang"))}else for(var l=i;l&&1===l.nodeType;){if(st(l).hasOwnProperty("lang")){n.language=l.getAttribute("lang");break}l=l.parentNode}if((a=e.call(this,null,n,r)||this).boundDocumentFullscreenChange_=Xt(c()(a),a.documentFullscreenChange_),a.boundFullWindowOnEscKey_=Xt(c()(a),a.fullWindowOnEscKey),a.isFullscreen_=!1,a.log=Ue(a.id_),a.fsApi_=Vi,a.isPosterFromTech_=!1,a.queuedCallbacks_=[],a.isReady_=!1,a.hasStarted_=!1,a.userActive_=!1,a.debugEnabled_=!1,!a.options_||!a.options_.techOrder||!a.options_.techOrder.length)throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");if(a.tag=i,a.tagAttributes=i&&st(i),a.language(a.options_.language),n.languages){var u={};Object.getOwnPropertyNames(n.languages).forEach((function(e){u[e.toLowerCase()]=n.languages[e]})),a.languages_=u}else a.languages_=t.prototype.options_.languages;a.resetCache_(),a.poster_=n.poster||"",a.controls_=!!n.controls,i.controls=!1,i.removeAttribute("controls"),a.changingSrc_=!1,a.playCallbacks_=[],a.playTerminatedQueue_=[],i.hasAttribute("autoplay")?a.autoplay(!0):a.autoplay(a.options_.autoplay),n.plugins&&Object.keys(n.plugins).forEach((function(e){if("function"!=typeof a[e])throw new Error('plugin "'+e+'" does not exist')})),a.scrubbing_=!1,a.el_=a.createEl(),ri(c()(a),{eventBusKey:"el_"}),a.fsApi_.requestFullscreen&&(Ft(s.a,a.fsApi_.fullscreenchange,a.boundDocumentFullscreenChange_),a.on(a.fsApi_.fullscreenchange,a.boundDocumentFullscreenChange_)),a.fluid_&&a.on("playerreset",a.updateStyleEl_);var d=ui(a.options_);n.plugins&&Object.keys(n.plugins).forEach((function(e){a[e](n.plugins[e])})),n.debug&&a.debug(!0),a.options_.playerOptions=d,a.middleware_=[],a.initChildren(),a.isAudio("audio"===i.nodeName.toLowerCase()),a.controls()?a.addClass("vjs-controls-enabled"):a.addClass("vjs-controls-disabled"),a.el_.setAttribute("role","region"),a.isAudio()?a.el_.setAttribute("aria-label",a.localize("Audio Player")):a.el_.setAttribute("aria-label",a.localize("Video Player")),a.isAudio()&&a.addClass("vjs-audio"),a.flexNotSupported_()&&a.addClass("vjs-no-flex"),Pi&&a.addClass("vjs-touch-enabled"),Di||a.addClass("vjs-workinghover"),t.players[a.id_]=c()(a);var h="7.10.2".split(".")[0];return a.addClass("vjs-v"+h),a.userActive(!0),a.reportUserActivity(),a.one("play",a.listenForUserActivity_),a.on("stageclick",a.handleStageClick_),a.on("keydown",a.handleKeyDown),a.breakpoints(a.options_.breakpoints),a.responsive(a.options_.responsive),a}h()(t,e);var i=t.prototype;return i.dispose=function(){var i=this;this.trigger("dispose"),this.off("dispose"),Bt(s.a,this.fsApi_.fullscreenchange,this.boundDocumentFullscreenChange_),Bt(s.a,"keydown",this.boundFullWindowOnEscKey_),this.styleEl_&&this.styleEl_.parentNode&&(this.styleEl_.parentNode.removeChild(this.styleEl_),this.styleEl_=null),t.players[this.id_]=null,this.tag&&this.tag.player&&(this.tag.player=null),this.el_&&this.el_.player&&(this.el_.player=null),this.tech_&&(this.tech_.dispose(),this.isPosterFromTech_=!1,this.poster_=""),this.playerElIngest_&&(this.playerElIngest_=null),this.tag&&(this.tag=null),On[this.id()]=null,xn.names.forEach((function(e){var t=xn[e],n=i[t.getterName]();n&&n.off&&n.off()})),e.prototype.dispose.call(this)},i.createEl=function(){var t,i=this.tag,n=this.playerElIngest_=i.parentNode&&i.parentNode.hasAttribute&&i.parentNode.hasAttribute("data-vjs-player"),a="video-js"===this.tag.tagName.toLowerCase();n?t=this.el_=i.parentNode:a||(t=this.el_=e.prototype.createEl.call(this,"div"));var o=st(i);if(a){for(t=this.el_=i,i=this.tag=s.a.createElement("video");t.children.length;)i.appendChild(t.firstChild);tt(t,"video-js")||it(t,"video-js"),t.appendChild(i),n=this.playerElIngest_=t,Object.keys(t).forEach((function(e){try{i[e]=t[e]}catch(e){}}))}if(i.setAttribute("tabindex","-1"),o.tabindex="-1",(Ai||wi&&Ii)&&(i.setAttribute("role","application"),o.role="application"),i.removeAttribute("width"),i.removeAttribute("height"),"width"in o&&delete o.width,"height"in o&&delete o.height,Object.getOwnPropertyNames(o).forEach((function(e){a&&"class"===e||t.setAttribute(e,o[e]),a&&i.setAttribute(e,o[e])})),i.playerId=i.id,i.id+="_html5_api",i.className="vjs-tech",i.player=t.player=this,this.addClass("vjs-paused"),!0!==r.a.VIDEOJS_NO_DYNAMIC_STYLE){this.styleEl_=It("vjs-styles-dimensions");var l=St(".vjs-styles-defaults"),u=St("head");u.insertBefore(this.styleEl_,l?l.nextSibling:u.firstChild)}this.fill_=!1,this.fluid_=!1,this.width(this.options_.width),this.height(this.options_.height),this.fill(this.options_.fill),this.fluid(this.options_.fluid),this.aspectRatio(this.options_.aspectRatio),this.crossOrigin(this.options_.crossOrigin||this.options_.crossorigin);for(var c=i.getElementsByTagName("a"),d=0;d<c.length;d++){var h=c.item(d);it(h,"vjs-hidden"),h.setAttribute("hidden","hidden")}return i.initNetworkState_=i.networkState,i.parentNode&&!n&&i.parentNode.insertBefore(t,i),et(i,t),this.children_.unshift(i),this.el_.setAttribute("lang",this.language_),this.el_=t,t},i.crossOrigin=function(e){if(!e)return this.techGet_("crossOrigin");"anonymous"===e||"use-credentials"===e?this.techCall_("setCrossOrigin",e):Re.warn('crossOrigin must be "anonymous" or "use-credentials", given "'+e+'"')},i.width=function(e){return this.dimension("width",e)},i.height=function(e){return this.dimension("height",e)},i.dimension=function(e,t){var i=e+"_";if(void 0===t)return this[i]||0;if(""===t||"auto"===t)return this[i]=void 0,void this.updateStyleEl_();var n=parseFloat(t);isNaN(n)?Re.error('Improper value "'+t+'" supplied for for '+e):(this[i]=n,this.updateStyleEl_())},i.fluid=function(e){if(void 0===e)return!!this.fluid_;var t,i;this.fluid_=!!e,Qt(this)&&this.off("playerreset",this.updateStyleEl_),e?(this.addClass("vjs-fluid"),this.fill(!1),Qt(t=function(){this.on("playerreset",this.updateStyleEl_)})?i():(t.eventedCallbacks||(t.eventedCallbacks=[]),t.eventedCallbacks.push(i))):this.removeClass("vjs-fluid"),this.updateStyleEl_()},i.fill=function(e){if(void 0===e)return!!this.fill_;this.fill_=!!e,e?(this.addClass("vjs-fill"),this.fluid(!1)):this.removeClass("vjs-fill")},i.aspectRatio=function(e){if(void 0===e)return this.aspectRatio_;if(!/^\d+\:\d+$/.test(e))throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");this.aspectRatio_=e,this.fluid(!0),this.updateStyleEl_()},i.updateStyleEl_=function(){if(!0!==r.a.VIDEOJS_NO_DYNAMIC_STYLE){var e,t,i,n=(void 0!==this.aspectRatio_&&"auto"!==this.aspectRatio_?this.aspectRatio_:this.videoWidth()>0?this.videoWidth()+":"+this.videoHeight():"16:9").split(":"),a=n[1]/n[0];e=void 0!==this.width_?this.width_:void 0!==this.height_?this.height_/a:this.videoWidth()||300,t=void 0!==this.height_?this.height_:e*a,i=/^[^a-zA-Z]/.test(this.id())?"dimensions-"+this.id():this.id()+"-dimensions",this.addClass(i),Pt(this.styleEl_,"\n      ."+i+" {\n        width: "+e+"px;\n        height: "+t+"px;\n      }\n\n      ."+i+".vjs-fluid {\n        padding-top: "+100*a+"%;\n      }\n    ")}else{var s="number"==typeof this.width_?this.width_:this.options_.width,o="number"==typeof this.height_?this.height_:this.options_.height,l=this.tech_&&this.tech_.el();l&&(s>=0&&(l.width=s),o>=0&&(l.height=o))}},i.loadTech_=function(e,t){var i=this;this.tech_&&this.unloadTech_();var n=li(e),r=e.charAt(0).toLowerCase()+e.slice(1);"Html5"!==n&&this.tag&&(In.getTech("Html5").disposeMediaElement(this.tag),this.tag.player=null,this.tag=null),this.techName_=n,this.isReady_=!1;var a={source:t,autoplay:"string"!=typeof this.autoplay()&&this.autoplay(),nativeControlsForTouch:this.options_.nativeControlsForTouch,playerId:this.id(),techId:this.id()+"_"+r+"_api",playsinline:this.options_.playsinline,preload:this.options_.preload,loop:this.options_.loop,disablePictureInPicture:this.options_.disablePictureInPicture,muted:this.options_.muted,poster:this.poster(),language:this.language(),playerElIngest:this.playerElIngest_||!1,"vtt.js":this.options_["vtt.js"],canOverridePoster:!!this.options_.techCanOverridePoster,enableSourceset:this.options_.enableSourceset,Promise:this.options_.Promise};xn.names.forEach((function(e){var t=xn[e];a[t.getterName]=i[t.privateName]})),Ve(a,this.options_[n]),Ve(a,this.options_[r]),Ve(a,this.options_[e.toLowerCase()]),this.tag&&(a.tag=this.tag),t&&t.src===this.cache_.src&&this.cache_.currentTime>0&&(a.startTime=this.cache_.currentTime);var s=In.getTech(e);if(!s)throw new Error("No Tech named '"+n+"' exists! '"+n+"' should be registered using videojs.registerTech()'");this.tech_=new s(a),this.tech_.ready(Xt(this,this.handleTechReady_),!0),$i(this.textTracksJson_||[],this.tech_),ja.forEach((function(e){i.on(i.tech_,e,i["handleTech"+li(e)+"_"])})),Object.keys(ka).forEach((function(e){i.on(i.tech_,e,(function(t){0===i.tech_.playbackRate()&&i.tech_.seeking()?i.queuedCallbacks_.push({callback:i["handleTech"+ka[e]+"_"].bind(i),event:t}):i["handleTech"+ka[e]+"_"](t)}))})),this.on(this.tech_,"loadstart",this.handleTechLoadStart_),this.on(this.tech_,"sourceset",this.handleTechSourceset_),this.on(this.tech_,"waiting",this.handleTechWaiting_),this.on(this.tech_,"ended",this.handleTechEnded_),this.on(this.tech_,"seeking",this.handleTechSeeking_),this.on(this.tech_,"play",this.handleTechPlay_),this.on(this.tech_,"firstplay",this.handleTechFirstPlay_),this.on(this.tech_,"pause",this.handleTechPause_),this.on(this.tech_,"durationchange",this.handleTechDurationChange_),this.on(this.tech_,"fullscreenchange",this.handleTechFullscreenChange_),this.on(this.tech_,"fullscreenerror",this.handleTechFullscreenError_),this.on(this.tech_,"enterpictureinpicture",this.handleTechEnterPictureInPicture_),this.on(this.tech_,"leavepictureinpicture",this.handleTechLeavePictureInPicture_),this.on(this.tech_,"error",this.handleTechError_),this.on(this.tech_,"loadedmetadata",this.updateStyleEl_),this.on(this.tech_,"posterchange",this.handleTechPosterChange_),this.on(this.tech_,"textdata",this.handleTechTextData_),this.on(this.tech_,"ratechange",this.handleTechRateChange_),this.usingNativeControls(this.techGet_("controls")),this.controls()&&!this.usingNativeControls()&&this.addTechControlsListeners_(),this.tech_.el().parentNode===this.el()||"Html5"===n&&this.tag||et(this.tech_.el(),this.el()),this.tag&&(this.tag.player=null,this.tag=null)},i.unloadTech_=function(){var e=this;xn.names.forEach((function(t){var i=xn[t];e[i.privateName]=e[i.getterName]()})),this.textTracksJson_=Zi(this.tech_),this.isReady_=!1,this.tech_.dispose(),this.tech_=!1,this.isPosterFromTech_&&(this.poster_="",this.trigger("posterchange")),this.isPosterFromTech_=!1},i.tech=function(e){return void 0===e&&Re.warn("Using the tech directly can be dangerous. I hope you know what you're doing.\nSee https://github.com/videojs/video.js/issues/2617 for more info.\n"),this.tech_},i.addTechControlsListeners_=function(){this.removeTechControlsListeners_(),this.on(this.tech_,"mouseup",this.handleTechClick_),this.on(this.tech_,"dblclick",this.handleTechDoubleClick_),this.on(this.tech_,"touchstart",this.handleTechTouchStart_),this.on(this.tech_,"touchmove",this.handleTechTouchMove_),this.on(this.tech_,"touchend",this.handleTechTouchEnd_),this.on(this.tech_,"tap",this.handleTechTap_)},i.removeTechControlsListeners_=function(){this.off(this.tech_,"tap",this.handleTechTap_),this.off(this.tech_,"touchstart",this.handleTechTouchStart_),this.off(this.tech_,"touchmove",this.handleTechTouchMove_),this.off(this.tech_,"touchend",this.handleTechTouchEnd_),this.off(this.tech_,"mouseup",this.handleTechClick_),this.off(this.tech_,"dblclick",this.handleTechDoubleClick_)},i.handleTechReady_=function(){this.triggerReady(),this.cache_.volume&&this.techCall_("setVolume",this.cache_.volume),this.handleTechPosterChange_(),this.handleTechDurationChange_()},i.handleTechLoadStart_=function(){this.removeClass("vjs-ended"),this.removeClass("vjs-seeking"),this.error(null),this.handleTechDurationChange_(),this.paused()?(this.hasStarted(!1),this.trigger("loadstart")):(this.trigger("loadstart"),this.trigger("firstplay")),this.manualAutoplay_(this.autoplay())},i.manualAutoplay_=function(e){var t=this;if(this.tech_&&"string"==typeof e){var i,n=function(){var e=t.muted();t.muted(!0);var i=function(){t.muted(e)};t.playTerminatedQueue_.push(i);var n=t.play();if(Yi(n))return n.catch(i)};if("any"===e&&!0!==this.muted()?Yi(i=this.play())&&(i=i.catch(n)):i="muted"===e&&!0!==this.muted()?n():this.play(),Yi(i))return i.then((function(){t.trigger({type:"autoplay-success",autoplay:e})})).catch((function(i){t.trigger({type:"autoplay-failure",autoplay:e})}))}},i.updateSourceCaches_=function(e){void 0===e&&(e="");var t=e,i="";"string"!=typeof t&&(t=e.src,i=e.type),this.cache_.source=this.cache_.source||{},this.cache_.sources=this.cache_.sources||[],t&&!i&&(i=function(e,t){if(!t)return"";if(e.cache_.source.src===t&&e.cache_.source.type)return e.cache_.source.type;var i=e.cache_.sources.filter((function(e){return e.src===t}));if(i.length)return i[0].type;for(var n=e.$$("source"),r=0;r<n.length;r++){var a=n[r];if(a.type&&a.src&&a.src===t)return a.type}return Bn(t)}(this,t)),this.cache_.source=ui({},e,{src:t,type:i});for(var n=this.cache_.sources.filter((function(e){return e.src&&e.src===t})),r=[],a=this.$$("source"),s=[],o=0;o<a.length;o++){var l=st(a[o]);r.push(l),l.src&&l.src===t&&s.push(l.src)}s.length&&!n.length?this.cache_.sources=r:n.length||(this.cache_.sources=[this.cache_.source]),this.cache_.src=t},i.handleTechSourceset_=function(e){var t=this;if(!this.changingSrc_){var i=function(e){return t.updateSourceCaches_(e)},n=this.currentSource().src,r=e.src;n&&!/^blob:/.test(n)&&/^blob:/.test(r)&&(!this.lastSource_||this.lastSource_.tech!==r&&this.lastSource_.player!==n)&&(i=function(){}),i(r),e.src||this.tech_.any(["sourceset","loadstart"],(function(e){if("sourceset"!==e.type){var i=t.techGet("currentSrc");t.lastSource_.tech=i,t.updateSourceCaches_(i)}}))}this.lastSource_={player:this.currentSource().src,tech:e.src},this.trigger({src:e.src,type:"sourceset"})},i.hasStarted=function(e){if(void 0===e)return this.hasStarted_;e!==this.hasStarted_&&(this.hasStarted_=e,this.hasStarted_?(this.addClass("vjs-has-started"),this.trigger("firstplay")):this.removeClass("vjs-has-started"))},i.handleTechPlay_=function(){this.removeClass("vjs-ended"),this.removeClass("vjs-paused"),this.addClass("vjs-playing"),this.hasStarted(!0),this.trigger("play")},i.handleTechRateChange_=function(){this.tech_.playbackRate()>0&&0===this.cache_.lastPlaybackRate&&(this.queuedCallbacks_.forEach((function(e){return e.callback(e.event)})),this.queuedCallbacks_=[]),this.cache_.lastPlaybackRate=this.tech_.playbackRate(),this.trigger("ratechange")},i.handleTechWaiting_=function(){var e=this;this.addClass("vjs-waiting"),this.trigger("waiting");var t=this.currentTime();this.on("timeupdate",(function i(){t!==e.currentTime()&&(e.removeClass("vjs-waiting"),e.off("timeupdate",i))}))},i.handleTechCanPlay_=function(){this.removeClass("vjs-waiting"),this.trigger("canplay")},i.handleTechCanPlayThrough_=function(){this.removeClass("vjs-waiting"),this.trigger("canplaythrough")},i.handleTechPlaying_=function(){this.removeClass("vjs-waiting"),this.trigger("playing")},i.handleTechSeeking_=function(){this.addClass("vjs-seeking"),this.trigger("seeking")},i.handleTechSeeked_=function(){this.removeClass("vjs-seeking"),this.removeClass("vjs-ended"),this.trigger("seeked")},i.handleTechFirstPlay_=function(){this.options_.starttime&&(Re.warn("Passing the `starttime` option to the player will be deprecated in 6.0"),this.currentTime(this.options_.starttime)),this.addClass("vjs-has-started"),this.trigger("firstplay")},i.handleTechPause_=function(){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),this.trigger("pause")},i.handleTechEnded_=function(){this.addClass("vjs-ended"),this.options_.loop?(this.currentTime(0),this.play()):this.paused()||this.pause(),this.trigger("ended")},i.handleTechDurationChange_=function(){this.duration(this.techGet_("duration"))},i.handleTechClick_=function(e){bt(e)&&this.controls_&&(this.paused()?Qi(this.play()):this.pause())},i.handleTechDoubleClick_=function(e){this.controls_&&(Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"),(function(t){return t.contains(e.target)}))||void 0!==this.options_&&void 0!==this.options_.userActions&&void 0!==this.options_.userActions.doubleClick&&!1===this.options_.userActions.doubleClick||(void 0!==this.options_&&void 0!==this.options_.userActions&&"function"==typeof this.options_.userActions.doubleClick?this.options_.userActions.doubleClick.call(this,e):this.isFullscreen()?this.exitFullscreen():this.requestFullscreen()))},i.handleTechTap_=function(){this.userActive(!this.userActive())},i.handleTechTouchStart_=function(){this.userWasActive=this.userActive()},i.handleTechTouchMove_=function(){this.userWasActive&&this.reportUserActivity()},i.handleTechTouchEnd_=function(e){e.preventDefault()},i.handleStageClick_=function(){this.reportUserActivity()},i.toggleFullscreenClass_=function(){this.isFullscreen()?this.addClass("vjs-fullscreen"):this.removeClass("vjs-fullscreen")},i.documentFullscreenChange_=function(e){var t=e.target.player;if(!t||t===this){var i=this.el(),n=s.a[this.fsApi_.fullscreenElement]===i;!n&&i.matches?n=i.matches(":"+this.fsApi_.fullscreen):!n&&i.msMatchesSelector&&(n=i.msMatchesSelector(":"+this.fsApi_.fullscreen)),this.isFullscreen(n)}},i.handleTechFullscreenChange_=function(e,t){t&&(t.nativeIOSFullscreen&&this.toggleClass("vjs-ios-native-fs"),this.isFullscreen(t.isFullscreen))},i.handleTechFullscreenError_=function(e,t){this.trigger("fullscreenerror",t)},i.togglePictureInPictureClass_=function(){this.isInPictureInPicture()?this.addClass("vjs-picture-in-picture"):this.removeClass("vjs-picture-in-picture")},i.handleTechEnterPictureInPicture_=function(e){this.isInPictureInPicture(!0)},i.handleTechLeavePictureInPicture_=function(e){this.isInPictureInPicture(!1)},i.handleTechError_=function(){var e=this.tech_.error();this.error(e)},i.handleTechTextData_=function(){var e=null;arguments.length>1&&(e=arguments[1]),this.trigger("textdata",e)},i.getCache=function(){return this.cache_},i.resetCache_=function(){this.cache_={currentTime:0,initTime:0,inactivityTimeout:this.options_.inactivityTimeout,duration:NaN,lastVolume:1,lastPlaybackRate:this.defaultPlaybackRate(),media:null,src:"",source:{},sources:[],volume:1}},i.techCall_=function(e,t){this.ready((function(){if(e in Rn)return function(e,t,i,n){return t[i](e.reduce(zn(i),n))}(this.middleware_,this.tech_,e,t);if(e in Un)return Mn(this.middleware_,this.tech_,e,t);try{this.tech_&&this.tech_[e](t)}catch(e){throw Re(e),e}}),!0)},i.techGet_=function(e){if(this.tech_&&this.tech_.isReady_){if(e in Nn)return function(e,t,i){return e.reduceRight(zn(i),t[i]())}(this.middleware_,this.tech_,e);if(e in Un)return Mn(this.middleware_,this.tech_,e);try{return this.tech_[e]()}catch(t){if(void 0===this.tech_[e])throw Re("Video.js: "+e+" method not defined for "+this.techName_+" playback technology.",t),t;if("TypeError"===t.name)throw Re("Video.js: "+e+" unavailable on "+this.techName_+" playback technology element.",t),this.tech_.isReady_=!1,t;throw Re(t),t}}},i.play=function(){var e=this,t=this.options_.Promise||r.a.Promise;return t?new t((function(t){e.play_(t)})):this.play_()},i.play_=function(e){var t=this;void 0===e&&(e=Qi),this.playCallbacks_.push(e);var i=Boolean(!this.changingSrc_&&(this.src()||this.currentSrc()));if(this.waitToPlay_&&(this.off(["ready","loadstart"],this.waitToPlay_),this.waitToPlay_=null),!this.isReady_||!i)return this.waitToPlay_=function(e){t.play_()},this.one(["ready","loadstart"],this.waitToPlay_),void(i||!Mi&&!Di||this.load());var n=this.techGet_("play");null===n?this.runPlayTerminatedQueue_():this.runPlayCallbacks_(n)},i.runPlayTerminatedQueue_=function(){var e=this.playTerminatedQueue_.slice(0);this.playTerminatedQueue_=[],e.forEach((function(e){e()}))},i.runPlayCallbacks_=function(e){var t=this.playCallbacks_.slice(0);this.playCallbacks_=[],this.playTerminatedQueue_=[],t.forEach((function(t){t(e)}))},i.pause=function(){this.techCall_("pause")},i.paused=function(){return!1!==this.techGet_("paused")},i.played=function(){return this.techGet_("played")||zi(0,0)},i.scrubbing=function(e){if(void 0===e)return this.scrubbing_;this.scrubbing_=!!e,this.techCall_("setScrubbing",this.scrubbing_),e?this.addClass("vjs-scrubbing"):this.removeClass("vjs-scrubbing")},i.currentTime=function(e){return void 0!==e?(e<0&&(e=0),this.isReady_&&!this.changingSrc_&&this.tech_&&this.tech_.isReady_?(this.techCall_("setCurrentTime",e),void(this.cache_.initTime=0)):(this.cache_.initTime=e,this.off("canplay",this.applyInitTime_),void this.one("canplay",this.applyInitTime_))):(this.cache_.currentTime=this.techGet_("currentTime")||0,this.cache_.currentTime)},i.applyInitTime_=function(){this.currentTime(this.cache_.initTime)},i.duration=function(e){if(void 0===e)return void 0!==this.cache_.duration?this.cache_.duration:NaN;(e=parseFloat(e))<0&&(e=1/0),e!==this.cache_.duration&&(this.cache_.duration=e,e===1/0?this.addClass("vjs-live"):this.removeClass("vjs-live"),isNaN(e)||this.trigger("durationchange"))},i.remainingTime=function(){return this.duration()-this.currentTime()},i.remainingTimeDisplay=function(){return Math.floor(this.duration())-Math.floor(this.currentTime())},i.buffered=function(){var e=this.techGet_("buffered");return e&&e.length||(e=zi(0,0)),e},i.bufferedPercent=function(){return Fi(this.buffered(),this.duration())},i.bufferedEnd=function(){var e=this.buffered(),t=this.duration(),i=e.end(e.length-1);return i>t&&(i=t),i},i.volume=function(e){var t;return void 0!==e?(t=Math.max(0,Math.min(1,parseFloat(e))),this.cache_.volume=t,this.techCall_("setVolume",t),void(t>0&&this.lastVolume_(t))):(t=parseFloat(this.techGet_("volume")),isNaN(t)?1:t)},i.muted=function(e){if(void 0===e)return this.techGet_("muted")||!1;this.techCall_("setMuted",e)},i.defaultMuted=function(e){return void 0!==e?this.techCall_("setDefaultMuted",e):this.techGet_("defaultMuted")||!1},i.lastVolume_=function(e){if(void 0===e||0===e)return this.cache_.lastVolume;this.cache_.lastVolume=e},i.supportsFullScreen=function(){return this.techGet_("supportsFullScreen")||!1},i.isFullscreen=function(e){if(void 0!==e){var t=this.isFullscreen_;return this.isFullscreen_=Boolean(e),this.isFullscreen_!==t&&this.fsApi_.prefixed&&this.trigger("fullscreenchange"),void this.toggleFullscreenClass_()}return this.isFullscreen_},i.requestFullscreen=function(e){var t=this.options_.Promise||r.a.Promise;if(t){var i=this;return new t((function(t,n){function r(){i.off("fullscreenerror",s),i.off("fullscreenchange",a)}function a(){r(),t()}function s(e,t){r(),n(t)}i.one("fullscreenchange",a),i.one("fullscreenerror",s);var o=i.requestFullscreenHelper_(e);if(o)return o.then(r,r),o}))}return this.requestFullscreenHelper_()},i.requestFullscreenHelper_=function(e){var t,i=this;if(this.fsApi_.prefixed||(t=this.options_.fullscreen&&this.options_.fullscreen.options||{},void 0!==e&&(t=e)),this.fsApi_.requestFullscreen){var n=this.el_[this.fsApi_.requestFullscreen](t);return n&&n.then((function(){return i.isFullscreen(!0)}),(function(){return i.isFullscreen(!1)})),n}this.tech_.supportsFullScreen()?this.techCall_("enterFullScreen"):this.enterFullWindow()},i.exitFullscreen=function(){var e=this.options_.Promise||r.a.Promise;if(e){var t=this;return new e((function(e,i){function n(){t.off("fullscreenerror",a),t.off("fullscreenchange",r)}function r(){n(),e()}function a(e,t){n(),i(t)}t.one("fullscreenchange",r),t.one("fullscreenerror",a);var s=t.exitFullscreenHelper_();if(s)return s.then(n,n),s}))}return this.exitFullscreenHelper_()},i.exitFullscreenHelper_=function(){var e=this;if(this.fsApi_.requestFullscreen){var t=s.a[this.fsApi_.exitFullscreen]();return t&&t.then((function(){return e.isFullscreen(!1)})),t}this.tech_.supportsFullScreen()?this.techCall_("exitFullScreen"):this.exitFullWindow()},i.enterFullWindow=function(){this.isFullscreen(!0),this.isFullWindow=!0,this.docOrigOverflow=s.a.documentElement.style.overflow,Ft(s.a,"keydown",this.boundFullWindowOnEscKey_),s.a.documentElement.style.overflow="hidden",it(s.a.body,"vjs-full-window"),this.trigger("enterFullWindow")},i.fullWindowOnEscKey=function(e){g.a.isEventKey(e,"Esc")&&(!0===this.isFullscreen()?this.exitFullscreen():this.exitFullWindow())},i.exitFullWindow=function(){this.isFullscreen(!1),this.isFullWindow=!1,Bt(s.a,"keydown",this.boundFullWindowOnEscKey_),s.a.documentElement.style.overflow=this.docOrigOverflow,nt(s.a.body,"vjs-full-window"),this.trigger("exitFullWindow")},i.disablePictureInPicture=function(e){if(void 0===e)return this.techGet_("disablePictureInPicture");this.techCall_("setDisablePictureInPicture",e),this.options_.disablePictureInPicture=e,this.trigger("disablepictureinpicturechanged")},i.isInPictureInPicture=function(e){return void 0!==e?(this.isInPictureInPicture_=!!e,void this.togglePictureInPictureClass_()):!!this.isInPictureInPicture_},i.requestPictureInPicture=function(){if("pictureInPictureEnabled"in s.a&&!1===this.disablePictureInPicture())return this.techGet_("requestPictureInPicture")},i.exitPictureInPicture=function(){if("pictureInPictureEnabled"in s.a)return s.a.exitPictureInPicture()},i.handleKeyDown=function(e){var t=this.options_.userActions;if(t&&t.hotkeys){(function(e){var t=e.tagName.toLowerCase();if(e.isContentEditable)return!0;if("input"===t)return-1===["button","checkbox","hidden","radio","reset","submit"].indexOf(e.type);return-1!==["textarea"].indexOf(t)})(this.el_.ownerDocument.activeElement)||("function"==typeof t.hotkeys?t.hotkeys.call(this,e):this.handleHotkeys(e))}},i.handleHotkeys=function(e){var t=this.options_.userActions?this.options_.userActions.hotkeys:{},i=t.fullscreenKey,n=void 0===i?function(e){return g.a.isEventKey(e,"f")}:i,r=t.muteKey,a=void 0===r?function(e){return g.a.isEventKey(e,"m")}:r,o=t.playPauseKey,l=void 0===o?function(e){return g.a.isEventKey(e,"k")||g.a.isEventKey(e,"Space")}:o;if(n.call(this,e)){e.preventDefault(),e.stopPropagation();var u=fi.getComponent("FullscreenToggle");!1!==s.a[this.fsApi_.fullscreenEnabled]&&u.prototype.handleClick.call(this,e)}else if(a.call(this,e)){e.preventDefault(),e.stopPropagation(),fi.getComponent("MuteToggle").prototype.handleClick.call(this,e)}else if(l.call(this,e)){e.preventDefault(),e.stopPropagation(),fi.getComponent("PlayToggle").prototype.handleClick.call(this,e)}},i.canPlayType=function(e){for(var t,i=0,n=this.options_.techOrder;i<n.length;i++){var r=n[i],a=In.getTech(r);if(a||(a=fi.getComponent(r)),a){if(a.isSupported()&&(t=a.canPlayType(e)))return t}else Re.error('The "'+r+'" tech is undefined. Skipped browser support check for that tech.')}return""},i.selectSource=function(e){var t,i=this,n=this.options_.techOrder.map((function(e){return[e,In.getTech(e)]})).filter((function(e){var t=e[0],i=e[1];return i?i.isSupported():(Re.error('The "'+t+'" tech is undefined. Skipped browser support check for that tech.'),!1)})),r=function(e,t,i){var n;return e.some((function(e){return t.some((function(t){if(n=i(e,t))return!0}))})),n},a=function(e,t){var n=e[0];if(e[1].canPlaySource(t,i.options_[n.toLowerCase()]))return{source:t,tech:n}};return(this.options_.sourceOrder?r(e,n,(t=a,function(e,i){return t(i,e)})):r(n,e,a))||!1},i.src=function(e){var t=this;if(void 0===e)return this.cache_.src||"";var i=function e(t){if(Array.isArray(t)){var i=[];t.forEach((function(t){t=e(t),Array.isArray(t)?i=i.concat(t):He(t)&&i.push(t)})),t=i}else t="string"==typeof t&&t.trim()?[Vn({src:t})]:He(t)&&"string"==typeof t.src&&t.src&&t.src.trim()?[Vn(t)]:[];return t}(e);i.length?(this.changingSrc_=!0,this.cache_.sources=i,this.updateSourceCaches_(i[0]),Dn(this,i[0],(function(e,n){var r,a;if(t.middleware_=n,t.cache_.sources=i,t.updateSourceCaches_(e),t.src_(e))return i.length>1?t.src(i.slice(1)):(t.changingSrc_=!1,t.setTimeout((function(){this.error({code:4,message:this.localize(this.options_.notSupportedMessage)})}),0),void t.triggerReady());r=n,a=t.tech_,r.forEach((function(e){return e.setTech&&e.setTech(a)}))}))):this.setTimeout((function(){this.error({code:4,message:this.localize(this.options_.notSupportedMessage)})}),0)},i.src_=function(e){var t,i,n=this,r=this.selectSource([e]);return!r||(t=r.tech,i=this.techName_,li(t)!==li(i)?(this.changingSrc_=!0,this.loadTech_(r.tech,r.source),this.tech_.ready((function(){n.changingSrc_=!1})),!1):(this.ready((function(){this.tech_.constructor.prototype.hasOwnProperty("setSource")?this.techCall_("setSource",e):this.techCall_("src",e.src),this.changingSrc_=!1}),!0),!1))},i.load=function(){this.techCall_("load")},i.reset=function(){var e=this,t=this.options_.Promise||r.a.Promise;this.paused()||!t?this.doReset_():Qi(this.play().then((function(){return e.doReset_()})))},i.doReset_=function(){this.tech_&&this.tech_.clearTracks("text"),this.resetCache_(),this.poster(""),this.loadTech_(this.options_.techOrder[0],null),this.techCall_("reset"),this.resetControlBarUI_(),Qt(this)&&this.trigger("playerreset")},i.resetControlBarUI_=function(){this.resetProgressBar_(),this.resetPlaybackRate_(),this.resetVolumeBar_()},i.resetProgressBar_=function(){this.currentTime(0);var e=this.controlBar,t=e.durationDisplay,i=e.remainingTimeDisplay;t&&t.updateContent(),i&&i.updateContent()},i.resetPlaybackRate_=function(){this.playbackRate(this.defaultPlaybackRate()),this.handleTechRateChange_()},i.resetVolumeBar_=function(){this.volume(1),this.trigger("volumechange")},i.currentSources=function(){var e=this.currentSource(),t=[];return 0!==Object.keys(e).length&&t.push(e),this.cache_.sources||t},i.currentSource=function(){return this.cache_.source||{}},i.currentSrc=function(){return this.currentSource()&&this.currentSource().src||""},i.currentType=function(){return this.currentSource()&&this.currentSource().type||""},i.preload=function(e){return void 0!==e?(this.techCall_("setPreload",e),void(this.options_.preload=e)):this.techGet_("preload")},i.autoplay=function(e){if(void 0===e)return this.options_.autoplay||!1;var t;"string"==typeof e&&/(any|play|muted)/.test(e)?(this.options_.autoplay=e,this.manualAutoplay_(e),t=!1):this.options_.autoplay=!!e,t=void 0===t?this.options_.autoplay:t,this.tech_&&this.techCall_("setAutoplay",t)},i.playsinline=function(e){return void 0!==e?(this.techCall_("setPlaysinline",e),this.options_.playsinline=e,this):this.techGet_("playsinline")},i.loop=function(e){return void 0!==e?(this.techCall_("setLoop",e),void(this.options_.loop=e)):this.techGet_("loop")},i.poster=function(e){if(void 0===e)return this.poster_;e||(e=""),e!==this.poster_&&(this.poster_=e,this.techCall_("setPoster",e),this.isPosterFromTech_=!1,this.trigger("posterchange"))},i.handleTechPosterChange_=function(){if((!this.poster_||this.options_.techCanOverridePoster)&&this.tech_&&this.tech_.poster){var e=this.tech_.poster()||"";e!==this.poster_&&(this.poster_=e,this.isPosterFromTech_=!0,this.trigger("posterchange"))}},i.controls=function(e){if(void 0===e)return!!this.controls_;e=!!e,this.controls_!==e&&(this.controls_=e,this.usingNativeControls()&&this.techCall_("setControls",e),this.controls_?(this.removeClass("vjs-controls-disabled"),this.addClass("vjs-controls-enabled"),this.trigger("controlsenabled"),this.usingNativeControls()||this.addTechControlsListeners_()):(this.removeClass("vjs-controls-enabled"),this.addClass("vjs-controls-disabled"),this.trigger("controlsdisabled"),this.usingNativeControls()||this.removeTechControlsListeners_()))},i.usingNativeControls=function(e){if(void 0===e)return!!this.usingNativeControls_;e=!!e,this.usingNativeControls_!==e&&(this.usingNativeControls_=e,this.usingNativeControls_?(this.addClass("vjs-using-native-controls"),this.trigger("usingnativecontrols")):(this.removeClass("vjs-using-native-controls"),this.trigger("usingcustomcontrols")))},i.error=function(e){if(void 0===e)return this.error_||null;if(this.options_.suppressNotSupportedError&&e&&4===e.code){var t=function(){this.error(e)};return this.options_.suppressNotSupportedError=!1,this.any(["click","touchstart"],t),void this.one("loadstart",(function(){this.off(["click","touchstart"],t)}))}if(null===e)return this.error_=e,this.removeClass("vjs-error"),void(this.errorDisplay&&this.errorDisplay.close());this.error_=new Xi(e),this.addClass("vjs-error"),Re.error("(CODE:"+this.error_.code+" "+Xi.errorTypes[this.error_.code]+")",this.error_.message,this.error_),this.trigger("error")},i.reportUserActivity=function(e){this.userActivity_=!0},i.userActive=function(e){if(void 0===e)return this.userActive_;if((e=!!e)!==this.userActive_){if(this.userActive_=e,this.userActive_)return this.userActivity_=!0,this.removeClass("vjs-user-inactive"),this.addClass("vjs-user-active"),void this.trigger("useractive");this.tech_&&this.tech_.one("mousemove",(function(e){e.stopPropagation(),e.preventDefault()})),this.userActivity_=!1,this.removeClass("vjs-user-active"),this.addClass("vjs-user-inactive"),this.trigger("userinactive")}},i.listenForUserActivity_=function(){var e,t,i,n=Xt(this,this.reportUserActivity),r=function(t){n(),this.clearInterval(e)};this.on("mousedown",(function(){n(),this.clearInterval(e),e=this.setInterval(n,250)})),this.on("mousemove",(function(e){e.screenX===t&&e.screenY===i||(t=e.screenX,i=e.screenY,n())})),this.on("mouseup",r),this.on("mouseleave",r);var a,s=this.getChild("controlBar");!s||Di||Ti||(s.on("mouseenter",(function(e){this.player().cache_.inactivityTimeout=this.player().options_.inactivityTimeout,this.player().options_.inactivityTimeout=0})),s.on("mouseleave",(function(e){this.player().options_.inactivityTimeout=this.player().cache_.inactivityTimeout}))),this.on("keydown",n),this.on("keyup",n),this.setInterval((function(){if(this.userActivity_){this.userActivity_=!1,this.userActive(!0),this.clearTimeout(a);var e=this.options_.inactivityTimeout;e<=0||(a=this.setTimeout((function(){this.userActivity_||this.userActive(!1)}),e))}}),250)},i.playbackRate=function(e){if(void 0===e)return this.tech_&&this.tech_.featuresPlaybackRate?this.cache_.lastPlaybackRate||this.techGet_("playbackRate"):1;this.techCall_("setPlaybackRate",e)},i.defaultPlaybackRate=function(e){return void 0!==e?this.techCall_("setDefaultPlaybackRate",e):this.tech_&&this.tech_.featuresPlaybackRate?this.techGet_("defaultPlaybackRate"):1},i.isAudio=function(e){if(void 0===e)return!!this.isAudio_;this.isAudio_=!!e},i.addTextTrack=function(e,t,i){if(this.tech_)return this.tech_.addTextTrack(e,t,i)},i.addRemoteTextTrack=function(e,t){if(this.tech_)return this.tech_.addRemoteTextTrack(e,t)},i.removeRemoteTextTrack=function(e){void 0===e&&(e={});var t=e.track;if(t||(t=e),this.tech_)return this.tech_.removeRemoteTextTrack(t)},i.getVideoPlaybackQuality=function(){return this.techGet_("getVideoPlaybackQuality")},i.videoWidth=function(){return this.tech_&&this.tech_.videoWidth&&this.tech_.videoWidth()||0},i.videoHeight=function(){return this.tech_&&this.tech_.videoHeight&&this.tech_.videoHeight()||0},i.language=function(e){if(void 0===e)return this.language_;this.language_=String(e).toLowerCase()},i.languages=function(){return ui(t.prototype.options_.languages,this.languages_)},i.toJSON=function(){var e=ui(this.options_),t=e.tracks;e.tracks=[];for(var i=0;i<t.length;i++){var n=t[i];(n=ui(n)).player=void 0,e.tracks[i]=n}return e},i.createModal=function(e,t){var i=this;(t=t||{}).content=e||"";var n=new en(this,t);return this.addChild(n),n.on("dispose",(function(){i.removeChild(n)})),n.open(),n},i.updateCurrentBreakpoint_=function(){if(this.responsive())for(var e=this.currentBreakpoint(),t=this.currentWidth(),i=0;i<Ca.length;i++){var n=Ca[i];if(t<=this.breakpoints_[n]){if(e===n)return;e&&this.removeClass(wa[e]),this.addClass(wa[n]),this.breakpoint_=n;break}}},i.removeCurrentBreakpoint_=function(){var e=this.currentBreakpointClass();this.breakpoint_="",e&&this.removeClass(e)},i.breakpoints=function(e){return void 0===e||(this.breakpoint_="",this.breakpoints_=Ve({},Ea,e),this.updateCurrentBreakpoint_()),Ve(this.breakpoints_)},i.responsive=function(e){return void 0===e?this.responsive_:(e=Boolean(e))!==this.responsive_?(this.responsive_=e,e?(this.on("playerresize",this.updateCurrentBreakpoint_),this.updateCurrentBreakpoint_()):(this.off("playerresize",this.updateCurrentBreakpoint_),this.removeCurrentBreakpoint_()),e):void 0},i.currentBreakpoint=function(){return this.breakpoint_},i.currentBreakpointClass=function(){return wa[this.breakpoint_]||""},i.loadMedia=function(e,t){var i=this;if(e&&"object"==typeof e){this.reset(),this.cache_.media=ui(e);var n=this.cache_.media,r=n.artwork,a=n.poster,s=n.src,o=n.textTracks;!r&&a&&(this.cache_.media.artwork=[{src:a,type:Bn(a)}]),s&&this.src(s),a&&this.poster(a),Array.isArray(o)&&o.forEach((function(e){return i.addRemoteTextTrack(e,!1)})),this.ready(t)}},i.getMedia=function(){if(!this.cache_.media){var e=this.poster(),t={src:this.currentSources(),textTracks:Array.prototype.map.call(this.remoteTextTracks(),(function(e){return{kind:e.kind,label:e.label,language:e.language,src:e.src}}))};return e&&(t.poster=e,t.artwork=[{src:t.poster,type:Bn(t.poster)}]),t}return ui(this.cache_.media)},t.getTagSettings=function(e){var t={sources:[],tracks:[]},i=st(e),n=i["data-setup"];if(tt(e,"vjs-fill")&&(i.fill=!0),tt(e,"vjs-fluid")&&(i.fluid=!0),null!==n){var r=f()(n||"{}"),a=r[0],s=r[1];a&&Re.error(a),Ve(i,s)}if(Ve(t,i),e.hasChildNodes())for(var o=e.childNodes,l=0,u=o.length;l<u;l++){var c=o[l],d=c.nodeName.toLowerCase();"source"===d?t.sources.push(st(c)):"track"===d&&t.tracks.push(st(c))}return t},i.flexNotSupported_=function(){var e=s.a.createElement("i");return!("flexBasis"in e.style||"webkitFlexBasis"in e.style||"mozFlexBasis"in e.style||"msFlexBasis"in e.style||"msFlexOrder"in e.style)},i.debug=function(e){if(void 0===e)return this.debugEnabled_;e?(this.trigger("debugon"),this.previousLogLevel_=this.log.level,this.log.level("debug"),this.debugEnabled_=!0):(this.trigger("debugoff"),this.log.level(this.previousLogLevel_),this.previousLogLevel_=void 0,this.debugEnabled_=!1)},t}(fi);xn.names.forEach((function(e){var t=xn[e];Aa.prototype[t.getterName]=function(){return this.tech_?this.tech_[t.getterName]():(this[t.privateName]=this[t.privateName]||new t.ListClass,this[t.privateName])}})),Aa.prototype.crossorigin=Aa.prototype.crossOrigin,Aa.players={};var xa=r.a.navigator;Aa.prototype.options_={techOrder:In.defaultTechOrder_,html5:{},flash:{},inactivityTimeout:2e3,playbackRates:[],liveui:!1,children:["mediaLoader","posterImage","textTrackDisplay","loadingSpinner","bigPlayButton","liveTracker","controlBar","errorDisplay","textTrackSettings","resizeManager"],language:xa&&(xa.languages&&xa.languages[0]||xa.userLanguage||xa.language)||"en",languages:{},notSupportedMessage:"No compatible source was found for this media.",fullscreen:{options:{navigationUI:"hide"}},breakpoints:{},responsive:!1},["ended","seeking","seekable","networkState","readyState"].forEach((function(e){Aa.prototype[e]=function(){return this.techGet_(e)}})),ja.forEach((function(e){Aa.prototype["handleTech"+li(e)+"_"]=function(){return this.trigger(e)}})),fi.registerComponent("Player",Aa);var Ia={},Pa=function(e){return Ia.hasOwnProperty(e)},Oa=function(e){return Pa(e)?Ia[e]:void 0},La=function(e,t){e.activePlugins_=e.activePlugins_||{},e.activePlugins_[t]=!0},Da=function(e,t,i){var n=(i?"before":"")+"pluginsetup";e.trigger(n,t),e.trigger(n+":"+t.name,t)},Ma=function(e,t){return t.prototype.name=e,function(){Da(this,{name:e,plugin:t,instance:null},!0);for(var i=arguments.length,n=new Array(i),r=0;r<i;r++)n[r]=arguments[r];var a=S()(t,[this].concat(n));return this[e]=function(){return a},Da(this,a.getEventHash()),a}},Na=function(){function e(t){if(this.constructor===e)throw new Error("Plugin must be sub-classed; not directly instantiated.");this.player=t,this.log||(this.log=this.player.log.createLogger(this.name)),ri(this),delete this.trigger,si(this,this.constructor.defaultState),La(t,this.name),this.dispose=Xt(this,this.dispose),t.on("dispose",this.dispose)}var t=e.prototype;return t.version=function(){return this.constructor.VERSION},t.getEventHash=function(e){return void 0===e&&(e={}),e.name=this.name,e.plugin=this.constructor,e.instance=this,e},t.trigger=function(e,t){return void 0===t&&(t={}),Vt(this.eventBusEl_,e,this.getEventHash(t))},t.handleStateChanged=function(e){},t.dispose=function(){var e=this.name,t=this.player;this.trigger("dispose"),this.off(),t.off("dispose",this.dispose),t.activePlugins_[e]=!1,this.player=this.state=null,t[e]=Ma(e,Ia[e])},e.isBasic=function(t){var i="string"==typeof t?Oa(t):t;return"function"==typeof i&&!e.prototype.isPrototypeOf(i.prototype)},e.registerPlugin=function(t,i){if("string"!=typeof t)throw new Error('Illegal plugin name, "'+t+'", must be a string, was '+typeof t+".");if(Pa(t))Re.warn('A plugin named "'+t+'" already exists. You may want to avoid re-registering plugins!');else if(Aa.prototype.hasOwnProperty(t))throw new Error('Illegal plugin name, "'+t+'", cannot share a name with an existing player method!');if("function"!=typeof i)throw new Error('Illegal plugin for "'+t+'", must be a function, was '+typeof i+".");return Ia[t]=i,"plugin"!==t&&(e.isBasic(i)?Aa.prototype[t]=function(e,t){var i=function(){Da(this,{name:e,plugin:t,instance:null},!0);var i=t.apply(this,arguments);return La(this,e),Da(this,{name:e,plugin:t,instance:i}),i};return Object.keys(t).forEach((function(e){i[e]=t[e]})),i}(t,i):Aa.prototype[t]=Ma(t,i)),i},e.deregisterPlugin=function(e){if("plugin"===e)throw new Error("Cannot de-register base plugin.");Pa(e)&&(delete Ia[e],delete Aa.prototype[e])},e.getPlugins=function(e){var t;return void 0===e&&(e=Object.keys(Ia)),e.forEach((function(e){var i=Oa(e);i&&((t=t||{})[e]=i)})),t},e.getPluginVersion=function(e){var t=Oa(e);return t&&t.VERSION||""},e}();Na.getPlugin=Oa,Na.BASE_PLUGIN_NAME="plugin",Na.registerPlugin("plugin",Na),Aa.prototype.usingPlugin=function(e){return!!this.activePlugins_&&!0===this.activePlugins_[e]},Aa.prototype.hasPlugin=function(e){return!!Pa(e)};var Ra=function(e){return 0===e.indexOf("#")?e.slice(1):e};function Ua(e,t,i){var n=Ua.getPlayer(e);if(n)return t&&Re.warn('Player "'+e+'" is already initialised. Options will not be applied.'),i&&n.ready(i),n;var r="string"==typeof e?St("#"+Ra(e)):e;if(!Ye(r))throw new TypeError("The element or ID supplied is not valid. (videojs)");r.ownerDocument.defaultView&&r.ownerDocument.body.contains(r)||Re.warn("The element supplied is not included in the DOM"),t=t||{},Ua.hooks("beforesetup").forEach((function(e){var i=e(r,ui(t));He(i)&&!Array.isArray(i)?t=ui(t,i):Re.error("please return an object in beforesetup hooks")}));var a=fi.getComponent("Player");return n=new a(r,t,i),Ua.hooks("setup").forEach((function(e){return e(n)})),n}if(Ua.hooks_={},Ua.hooks=function(e,t){return Ua.hooks_[e]=Ua.hooks_[e]||[],t&&(Ua.hooks_[e]=Ua.hooks_[e].concat(t)),Ua.hooks_[e]},Ua.hook=function(e,t){Ua.hooks(e,t)},Ua.hookOnce=function(e,t){Ua.hooks(e,[].concat(t).map((function(t){return function i(){return Ua.removeHook(e,i),t.apply(void 0,arguments)}})))},Ua.removeHook=function(e,t){var i=Ua.hooks(e).indexOf(t);return!(i<=-1)&&(Ua.hooks_[e]=Ua.hooks_[e].slice(),Ua.hooks_[e].splice(i,1),!0)},!0!==r.a.VIDEOJS_NO_DYNAMIC_STYLE&&Ke()){var za=St(".vjs-styles-defaults");if(!za){za=It("vjs-styles-defaults");var Fa=St("head");Fa&&Fa.insertBefore(za,Fa.firstChild),Pt(za,"\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ")}}Et(1,Ua),Ua.VERSION="7.10.2",Ua.options=Aa.prototype.options_,Ua.getPlayers=function(){return Aa.players},Ua.getPlayer=function(e){var t,i=Aa.players;if("string"==typeof e){var n=Ra(e),r=i[n];if(r)return r;t=St("#"+n)}else t=e;if(Ye(t)){var a=t,s=a.player,o=a.playerId;if(s||i[o])return s||i[o]}},Ua.getAllPlayers=function(){return Object.keys(Aa.players).map((function(e){return Aa.players[e]})).filter(Boolean)},Ua.players=Aa.players,Ua.getComponent=fi.getComponent,Ua.registerComponent=function(e,t){In.isTech(t)&&Re.warn("The "+e+" tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)"),fi.registerComponent.call(fi,e,t)},Ua.getTech=In.getTech,Ua.registerTech=In.registerTech,Ua.use=function(e,t){Pn[e]=Pn[e]||[],Pn[e].push(t)},Object.defineProperty(Ua,"middleware",{value:{},writeable:!1,enumerable:!0}),Object.defineProperty(Ua.middleware,"TERMINATOR",{value:Ln,writeable:!1,enumerable:!0}),Ua.browser=Ni,Ua.TOUCH_ENABLED=Pi,Ua.extend=function(e,t){void 0===t&&(t={});var i=function(){e.apply(this,arguments)},n={};for(var r in"object"==typeof t?(t.constructor!==Object.prototype.constructor&&(i=t.constructor),n=t):"function"==typeof t&&(i=t),k()(i,e),e&&(i.super_=e),n)n.hasOwnProperty(r)&&(i.prototype[r]=n[r]);return i},Ua.mergeOptions=ui,Ua.bind=Xt,Ua.registerPlugin=Na.registerPlugin,Ua.deregisterPlugin=Na.deregisterPlugin,Ua.plugin=function(e,t){return Re.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"),Na.registerPlugin(e,t)},Ua.getPlugins=Na.getPlugins,Ua.getPlugin=Na.getPlugin,Ua.getPluginVersion=Na.getPluginVersion,Ua.addLanguage=function(e,t){var i;return e=(""+e).toLowerCase(),Ua.options.languages=ui(Ua.options.languages,((i={})[e]=t,i)),Ua.options.languages[e]},Ua.log=Re,Ua.createLogger=Ue,Ua.createTimeRange=Ua.createTimeRanges=zi,Ua.formatTime=nr,Ua.setFormatTime=function(e){ir=e},Ua.resetFormatTime=function(){ir=tr},Ua.parseUrl=gn,Ua.isCrossOrigin=_n,Ua.EventTarget=Yt,Ua.on=Ft,Ua.one=Ht,Ua.off=Bt,Ua.trigger=Vt,Ua.xhr=y.a,Ua.TextTrack=jn,Ua.AudioTrack=kn,Ua.VideoTrack=Cn,["isEl","isTextNode","createEl","hasClass","addClass","removeClass","toggleClass","setAttributes","getAttributes","emptyEl","appendContent","insertContent"].forEach((function(e){Ua[e]=function(){return Re.warn("videojs."+e+"() is deprecated; use videojs.dom."+e+"() instead"),kt[e].apply(null,arguments)}})),Ua.computedStyle=We,Ua.dom=kt,Ua.url=bn,Ua.defineLazyProperty=Ta;
/*! @name @videojs/http-streaming @version 2.2.4 @license Apache-2.0 */
var Ba,Va=w.a,Ha=function(e,t,i){return e&&i&&i.responseURL&&t!==i.responseURL?i.responseURL:t},qa=Ua.log,Wa=function(e,t){return e+"-"+t},Ga=function(e){var t=e.manifestString,i=e.customTagParsers,n=void 0===i?[]:i,r=e.customTagMappers,a=void 0===r?[]:r,s=new D;return n.forEach((function(e){return s.addParser(e)})),a.forEach((function(e){return s.addTagMapper(e)})),s.push(t),s.end(),s.manifest},Xa=function(e,t){["AUDIO","SUBTITLES"].forEach((function(i){for(var n in e.mediaGroups[i])for(var r in e.mediaGroups[i][n]){var a=e.mediaGroups[i][n][r];t(a,i,n,r)}}))},Ka=function(e){var t=e.playlist,i=e.uri,n=e.id;t.id=n,i&&(t.uri=i),t.attributes=t.attributes||{}},Ya=function(e,t){e.uri=t;for(var i=0;i<e.playlists.length;i++)if(!e.playlists[i].uri){var n="placeholder-uri-"+i;e.playlists[i].uri=n}Xa(e,(function(t,i,n,r){if(t.playlists&&t.playlists.length&&!t.playlists[0].uri){var a="placeholder-uri-"+i+"-"+n+"-"+r,s=Wa(0,a);t.playlists[0].uri=a,t.playlists[0].id=s,e.playlists[s]=t.playlists[0],e.playlists[a]=t.playlists[0]}})),function(e){for(var t=e.playlists.length;t--;){var i=e.playlists[t];Ka({playlist:i,id:Wa(t,i.uri)}),i.resolvedUri=Va(e.uri,i.uri),e.playlists[i.id]=i,e.playlists[i.uri]=i,i.attributes.BANDWIDTH||qa.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.")}}(e),function(e){Xa(e,(function(t){t.uri&&(t.resolvedUri=Va(e.uri,t.uri))}))}(e)},Qa=Ua.mergeOptions,Ja=Ua.EventTarget,Za=function(e,t){e.resolvedUri||(e.resolvedUri=Va(t,e.uri)),e.key&&!e.key.resolvedUri&&(e.key.resolvedUri=Va(t,e.key.uri)),e.map&&!e.map.resolvedUri&&(e.map.resolvedUri=Va(t,e.map.uri))},$a=function(e,t){var i=Qa(e,{}),n=i.playlists[t.id];if(!n)return null;if(n.segments&&t.segments&&n.segments.length===t.segments.length&&n.endList===t.endList&&n.mediaSequence===t.mediaSequence)return null;var r=Qa(n,t);n.segments&&(r.segments=function(e,t,i){var n=t.slice();i=i||0;for(var r=Math.min(e.length,t.length+i),a=i;a<r;a++)n[a-i]=Qa(e[a],n[a-i]);return n}(n.segments,t.segments,t.mediaSequence-n.mediaSequence)),r.segments.forEach((function(e){Za(e,r.resolvedUri)}));for(var a=0;a<i.playlists.length;a++)i.playlists[a].id===t.id&&(i.playlists[a]=r);return i.playlists[t.id]=r,i.playlists[t.uri]=r,i},es=function(e,t){var i=e.segments[e.segments.length-1];return t&&i&&i.duration?1e3*i.duration:500*(e.targetDuration||10)},ts=function(e){function t(t,i,n){var r;if(void 0===n&&(n={}),r=e.call(this)||this,!t)throw new Error("A non-empty playlist URL or object is required");var a=n,s=a.withCredentials,o=void 0!==s&&s,l=a.handleManifestRedirects,u=void 0!==l&&l;r.src=t,r.vhs_=i,r.withCredentials=o,r.handleManifestRedirects=u;var c=i.options_;return r.customTagParsers=c&&c.customTagParsers||[],r.customTagMappers=c&&c.customTagMappers||[],r.state="HAVE_NOTHING",r.on("mediaupdatetimeout",(function(){"HAVE_METADATA"===r.state&&(r.state="HAVE_CURRENT_METADATA",r.request=r.vhs_.xhr({uri:Va(r.master.uri,r.media().uri),withCredentials:r.withCredentials},(function(e,t){if(r.request)return e?r.playlistRequestError(r.request,r.media(),"HAVE_METADATA"):void r.haveMetadata({playlistString:r.request.responseText,url:r.media().uri,id:r.media().id})})))})),r}h()(t,e);var i=t.prototype;return i.playlistRequestError=function(e,t,i){var n=t.uri,r=t.id;this.request=null,i&&(this.state=i),this.error={playlist:this.master.playlists[r],status:e.status,message:"HLS playlist request error at URL: "+n+".",responseText:e.responseText,code:e.status>=500?4:2},this.trigger("error")},i.haveMetadata=function(e){var t=this,i=e.playlistString,n=e.playlistObject,a=e.url,s=e.id;this.request=null,this.state="HAVE_METADATA";var o=n||Ga({manifestString:i,customTagParsers:this.customTagParsers,customTagMappers:this.customTagMappers});Ka({playlist:o,uri:a,id:s});var l=$a(this.master,o);this.targetDuration=o.targetDuration,l?(this.master=l,this.media_=this.master.playlists[s]):this.trigger("playlistunchanged"),this.media().endList||(r.a.clearTimeout(this.mediaUpdateTimeout),this.mediaUpdateTimeout=r.a.setTimeout((function(){t.trigger("mediaupdatetimeout")}),es(this.media(),!!l))),this.trigger("loadedplaylist")},i.dispose=function(){this.trigger("dispose"),this.stopRequest(),r.a.clearTimeout(this.mediaUpdateTimeout),r.a.clearTimeout(this.finalRenditionTimeout),this.off()},i.stopRequest=function(){if(this.request){var e=this.request;this.request=null,e.onreadystatechange=null,e.abort()}},i.media=function(e,t){var i=this;if(!e)return this.media_;if("HAVE_NOTHING"===this.state)throw new Error("Cannot switch media playlist from "+this.state);if("string"==typeof e){if(!this.master.playlists[e])throw new Error("Unknown playlist URI: "+e);e=this.master.playlists[e]}if(r.a.clearTimeout(this.finalRenditionTimeout),t){var n=e.targetDuration/2*1e3||5e3;this.finalRenditionTimeout=r.a.setTimeout(this.media.bind(this,e,!1),n)}else{var a=this.state,s=!this.media_||e.id!==this.media_.id;if(this.master.playlists[e.id].endList||e.endList&&e.segments.length)return this.request&&(this.request.onreadystatechange=null,this.request.abort(),this.request=null),this.state="HAVE_METADATA",this.media_=e,void(s&&(this.trigger("mediachanging"),"HAVE_MASTER"===a?this.trigger("loadedmetadata"):this.trigger("mediachange")));if(s){if(this.state="SWITCHING_MEDIA",this.request){if(e.resolvedUri===this.request.url)return;this.request.onreadystatechange=null,this.request.abort(),this.request=null}this.media_&&this.trigger("mediachanging"),this.request=this.vhs_.xhr({uri:e.resolvedUri,withCredentials:this.withCredentials},(function(t,n){if(i.request){if(e.resolvedUri=Ha(i.handleManifestRedirects,e.resolvedUri,n),t)return i.playlistRequestError(i.request,e,a);i.haveMetadata({playlistString:n.responseText,url:e.uri,id:e.id}),"HAVE_MASTER"===a?i.trigger("loadedmetadata"):i.trigger("mediachange")}}))}}},i.pause=function(){this.stopRequest(),r.a.clearTimeout(this.mediaUpdateTimeout),"HAVE_NOTHING"===this.state&&(this.started=!1),"SWITCHING_MEDIA"===this.state?this.media_?this.state="HAVE_METADATA":this.state="HAVE_MASTER":"HAVE_CURRENT_METADATA"===this.state&&(this.state="HAVE_METADATA")},i.load=function(e){var t=this;r.a.clearTimeout(this.mediaUpdateTimeout);var i=this.media();if(e){var n=i?i.targetDuration/2*1e3:5e3;this.mediaUpdateTimeout=r.a.setTimeout((function(){return t.load()}),n)}else this.started?i&&!i.endList?this.trigger("mediaupdatetimeout"):this.trigger("loadedplaylist"):this.start()},i.start=function(){var e=this;if(this.started=!0,"object"==typeof this.src)return this.src.uri||(this.src.uri=r.a.location.href),this.src.resolvedUri=this.src.uri,void setTimeout((function(){e.setupInitialPlaylist(e.src)}),0);this.request=this.vhs_.xhr({uri:this.src,withCredentials:this.withCredentials},(function(t,i){if(e.request){if(e.request=null,t)return e.error={status:i.status,message:"HLS playlist request error at URL: "+e.src+".",responseText:i.responseText,code:2},"HAVE_NOTHING"===e.state&&(e.started=!1),e.trigger("error");e.src=Ha(e.handleManifestRedirects,e.src,i);var n=Ga({manifestString:i.responseText,customTagParsers:e.customTagParsers,customTagMappers:e.customTagMappers});e.setupInitialPlaylist(n)}}))},i.srcUri=function(){return"string"==typeof this.src?this.src:this.src.uri},i.setupInitialPlaylist=function(e){if(this.state="HAVE_MASTER",e.playlists)return this.master=e,Ya(this.master,this.srcUri()),e.playlists.forEach((function(e){e.segments&&e.segments.forEach((function(t){Za(t,e.resolvedUri)}))})),this.trigger("loadedplaylist"),void(this.request||this.media(this.master.playlists[0]));var t=this.srcUri()||r.a.location.href;this.master=function(e,t){var i=Wa(0,t),n={mediaGroups:{AUDIO:{},VIDEO:{},"CLOSED-CAPTIONS":{},SUBTITLES:{}},uri:r.a.location.href,resolvedUri:r.a.location.href,playlists:[{uri:t,id:i,resolvedUri:t,attributes:{}}]};return n.playlists[i]=n.playlists[0],n.playlists[t]=n.playlists[0],n}(0,t),this.haveMetadata({playlistObject:e,url:t,id:this.master.playlists[0].id}),this.trigger("loadedmetadata")},t}(Ja),is=function(e,t){var i,n=[];if(e&&e.length)for(i=0;i<e.length;i++)t(e.start(i),e.end(i))&&n.push([e.start(i),e.end(i)]);return Ua.createTimeRanges(n)},ns=function(e,t){return is(e,(function(e,i){return e-.1<=t&&i+.1>=t}))},rs=function(e,t){return is(e,(function(e){return e-1/30>=t}))},as=function(e){var t=[];if(!e||!e.length)return"";for(var i=0;i<e.length;i++)t.push(e.start(i)+" => "+e.end(i));return t.join(", ")},ss=function(e){for(var t=[],i=0;i<e.length;i++)t.push({start:e.start(i),end:e.end(i)});return t},os=Ua.createTimeRange,ls=function(e,t,i){if(void 0===t&&(t=e.mediaSequence+e.segments.length),t<e.mediaSequence)return 0;var n=function(e,t){var i=0,n=t-e.mediaSequence,r=e.segments[n];if(r){if(void 0!==r.start)return{result:r.start,precise:!0};if(void 0!==r.end)return{result:r.end-r.duration,precise:!0}}for(;n--;){if(void 0!==(r=e.segments[n]).end)return{result:i+r.end,precise:!0};if(i+=r.duration,void 0!==r.start)return{result:i+r.start,precise:!0}}return{result:i,precise:!1}}(e,t);if(n.precise)return n.result;var r=function(e,t){for(var i,n=0,r=t-e.mediaSequence;r<e.segments.length;r++){if(void 0!==(i=e.segments[r]).start)return{result:i.start-n,precise:!0};if(n+=i.duration,void 0!==i.end)return{result:i.end-n,precise:!0}}return{result:-1,precise:!1}}(e,t);return r.precise?r.result:n.result+i},us=function(e,t,i){if(!e)return 0;if("number"!=typeof i&&(i=0),void 0===t){if(e.totalDuration)return e.totalDuration;if(!e.endList)return r.a.Infinity}return ls(e,t,i)},cs=function(e,t,i){var n=0;if(t>i){var r=[i,t];t=r[0],i=r[1]}if(t<0){for(var a=t;a<Math.min(0,i);a++)n+=e.targetDuration;t=0}for(var s=t;s<i;s++)n+=e.segments[s].duration;return n},ds=function(e,t){if(!e.segments.length)return 0;var i=e.segments.length,n=e.segments[i-1].duration||e.targetDuration,r="number"==typeof t?t:n+2*e.targetDuration;if(0===r)return i;for(var a=0;i--&&!((a+=e.segments[i].duration)>=r););return Math.max(0,i)},hs=function(e,t,i,n){if(!e||!e.segments)return null;if(e.endList)return us(e);if(null===t)return null;t=t||0;var r=i?ds(e,n):e.segments.length;return ls(e,e.mediaSequence+r,t)},ps=function(e){return e.excludeUntil&&e.excludeUntil>Date.now()},fs=function(e){return e.excludeUntil&&e.excludeUntil===1/0},ms=function(e){var t=ps(e);return!e.disabled&&!t},gs=function(e,t){return t.attributes&&t.attributes[e]},vs=function(e,t){if(1===e.playlists.length)return!0;var i=t.attributes.BANDWIDTH||Number.MAX_VALUE;return 0===e.playlists.filter((function(e){return!!ms(e)&&(e.attributes.BANDWIDTH||0)<i})).length},ys={duration:us,seekable:function(e,t,i){var n=t||0,r=hs(e,t,!0,i);return null===r?os():os(n,r)},safeLiveIndex:ds,getMediaInfoForTime:function(e,t,i,n){var r,a=e.segments.length,s=t-n;if(s<0){if(i>0)for(r=i-1;r>=0;r--)if((s+=e.segments[r].duration+1/30)>0)return{mediaIndex:r,startTime:n-cs(e,i,r)};return{mediaIndex:0,startTime:t}}if(i<0){for(r=i;r<0;r++)if((s-=e.targetDuration)<0)return{mediaIndex:0,startTime:t};i=0}for(r=i;r<a;r++)if((s-=e.segments[r].duration+1/30)<0)return{mediaIndex:r,startTime:n+cs(e,i,r)};return{mediaIndex:a-1,startTime:t}},isEnabled:ms,isDisabled:function(e){return e.disabled},isBlacklisted:ps,isIncompatible:fs,playlistEnd:hs,isAes:function(e){for(var t=0;t<e.segments.length;t++)if(e.segments[t].key)return!0;return!1},hasAttribute:gs,estimateSegmentRequestTime:function(e,t,i,n){return void 0===n&&(n=0),gs("BANDWIDTH",i)?(e*i.attributes.BANDWIDTH-8*n)/t:NaN},isLowestEnabledRendition:vs},_s=Ua.xhr,bs=Ua.mergeOptions,Ts=function(e,t,i,n){var r="arraybuffer"===e.responseType?e.response:e.responseText;!t&&r&&(e.responseTime=Date.now(),e.roundTripTime=e.responseTime-e.requestTime,e.bytesReceived=r.byteLength||r.length,e.bandwidth||(e.bandwidth=Math.floor(e.bytesReceived/e.roundTripTime*8*1e3))),i.headers&&(e.responseHeaders=i.headers),t&&"ETIMEDOUT"===t.code&&(e.timedout=!0),t||e.aborted||200===i.statusCode||206===i.statusCode||0===i.statusCode||(t=new Error("XHR Failed with a response of: "+(e&&(r||e.responseText)))),n(t,e)},Ss=function(){return function e(t,i){t=bs({timeout:45e3},t);var n=e.beforeRequest||Ua.Vhs.xhr.beforeRequest;if(n&&"function"==typeof n){var r=n(t);r&&(t=r)}var a=_s(t,(function(e,t){return Ts(a,e,t,i)})),s=a.abort;return a.abort=function(){return a.aborted=!0,s.apply(a,arguments)},a.uri=t.uri,a.requestTime=Date.now(),a}},js=function(e){var t,i,n={};return e.byterange&&(n.Range=(t=e.byterange,i=t.offset+t.length-1,"bytes="+t.offset+"-"+i)),n},ks=function(e,t){return e.start(t)+"-"+e.end(t)},Cs=function(e,t){var i=e.toString(16);return"00".substring(0,2-i.length)+i+(t%2?" ":"")},ws=function(e){return e>=32&&e<126?String.fromCharCode(e):"."},Es=function(e){var t={};return Object.keys(e).forEach((function(i){var n=e[i];ArrayBuffer.isView(n)?t[i]={bytes:n.buffer,byteOffset:n.byteOffset,byteLength:n.byteLength}:t[i]=n})),t},As=function(e){var t=e.byterange||{length:1/0,offset:0};return[t.length,t.offset,e.resolvedUri].join(",")},xs=function(e){return e.resolvedUri},Is=function(e){for(var t=Array.prototype.slice.call(e),i="",n=0;n<t.length/16;n++)i+=t.slice(16*n,16*n+16).map(Cs).join("")+" "+t.slice(16*n,16*n+16).map(ws).join("")+"\n";return i},Ps=Object.freeze({__proto__:null,createTransferableMessage:Es,initSegmentId:As,segmentKeyId:xs,hexDump:Is,tagDump:function(e){var t=e.bytes;return Is(t)},textRanges:function(e){var t,i="";for(t=0;t<e.length;t++)i+=ks(e,t)+" ";return i}}),Os=function(e){var t=e.playlist,i=e.time,n=void 0===i?void 0:i,r=e.callback;if(!r)throw new Error("getProgramTime: callback must be provided");if(!t||void 0===n)return r({message:"getProgramTime: playlist and time must be provided"});var a=function(e,t){if(!t||!t.segments||0===t.segments.length)return null;for(var i,n=0,r=0;r<t.segments.length&&!(e<=(n=(i=t.segments[r]).videoTimingInfo?i.videoTimingInfo.transmuxedPresentationEnd:n+i.duration));r++);var a=t.segments[t.segments.length-1];if(a.videoTimingInfo&&a.videoTimingInfo.transmuxedPresentationEnd<e)return null;if(e>n){if(e>n+.25*a.duration)return null;i=a}return{segment:i,estimatedStart:i.videoTimingInfo?i.videoTimingInfo.transmuxedPresentationStart:n-i.duration,type:i.videoTimingInfo?"accurate":"estimate"}}(n,t);if(!a)return r({message:"valid programTime was not found"});if("estimate"===a.type)return r({message:"Accurate programTime could not be determined. Please seek to e.seekTime and try again",seekTime:a.estimatedStart});var s={mediaSeconds:n},o=function(e,t){if(!t.dateTimeObject)return null;var i=t.videoTimingInfo.transmuxerPrependedSeconds,n=e-(t.videoTimingInfo.transmuxedPresentationStart+i);return new Date(t.dateTimeObject.getTime()+1e3*n)}(n,a.segment);return o&&(s.programDateTime=o.toISOString()),r(null,s)},Ls=function e(t){var i=t.programTime,n=t.playlist,r=t.retryCount,a=void 0===r?2:r,s=t.seekTo,o=t.pauseAfterSeek,l=void 0===o||o,u=t.tech,c=t.callback;if(!c)throw new Error("seekToProgramTime: callback must be provided");if(void 0===i||!n||!s)return c({message:"seekToProgramTime: programTime, seekTo and playlist must be provided"});if(!n.endList&&!u.hasStarted_)return c({message:"player must be playing a live stream to start buffering"});if(!function(e){if(!e.segments||0===e.segments.length)return!1;for(var t=0;t<e.segments.length;t++){if(!e.segments[t].dateTimeObject)return!1}return!0}(n))return c({message:"programDateTime tags must be provided in the manifest "+n.resolvedUri});var d=function(e,t){var i;try{i=new Date(e)}catch(e){return null}if(!t||!t.segments||0===t.segments.length)return null;var n=t.segments[0];if(i<n.dateTimeObject)return null;for(var r=0;r<t.segments.length-1;r++){if(n=t.segments[r],i<t.segments[r+1].dateTimeObject)break}var a,s=t.segments[t.segments.length-1],o=s.dateTimeObject,l=s.videoTimingInfo?(a=s.videoTimingInfo).transmuxedPresentationEnd-a.transmuxedPresentationStart-a.transmuxerPrependedSeconds:s.duration+.25*s.duration;return i>new Date(o.getTime()+1e3*l)?null:(i>o&&(n=s),{segment:n,estimatedStart:n.videoTimingInfo?n.videoTimingInfo.transmuxedPresentationStart:ys.duration(t,t.mediaSequence+t.segments.indexOf(n)),type:n.videoTimingInfo?"accurate":"estimate"})}(i,n);if(!d)return c({message:i+" was not found in the stream"});var h=d.segment,p=function(e,t){var i,n;try{i=new Date(e),n=new Date(t)}catch(e){}var r=i.getTime();return(n.getTime()-r)/1e3}(h.dateTimeObject,i);if("estimate"===d.type)return 0===a?c({message:i+" is not buffered yet. Try again"}):(s(d.estimatedStart+p),void u.one("seeked",(function(){e({programTime:i,playlist:n,retryCount:a-1,seekTo:s,pauseAfterSeek:l,tech:u,callback:c})})));var f=h.start+p;u.one("seeked",(function(){return c(null,u.currentTime())})),l&&u.pause(),s(f)},Ds=function(e,t){if(4===e.readyState)return t()},Ms=Ua.EventTarget,Ns=Ua.mergeOptions,Rs=function(e){var t=e.masterXml,i=e.srcUrl,n=e.clientOffset,r=e.sidxMapping,a=ke(t,{manifestUri:i,clientOffset:n,sidxMapping:r});return Ya(a,i),a},Us=function(e,t){for(var i=!0,n=Ns(e,{duration:t.duration,minimumUpdatePeriod:t.minimumUpdatePeriod}),r=0;r<t.playlists.length;r++){var a=$a(n,t.playlists[r]);a&&(n=a,i=!1)}return Xa(t,(function(e,t,r,a){if(e.playlists&&e.playlists.length){var s=e.playlists[0].id,o=$a(n,e.playlists[0]);o&&((n=o).mediaGroups[t][r][a].playlists[0]=n.playlists[s],i=!1)}})),t.minimumUpdatePeriod!==e.minimumUpdatePeriod&&(i=!1),i?null:n},zs=function(e){var t=e.byterange.offset+e.byterange.length-1;return e.uri+"-"+e.byterange.offset+"-"+t},Fs=function(e,t){var i,n,r={};for(var a in e){var s=e[a].sidx;if(s){var o=zs(s);if(!t[o])break;var l=t[o].sidxInfo;i=l,n=s,(Boolean(!i.map&&!n.map)||Boolean(i.map&&n.map&&i.map.byterange.offset===n.map.byterange.offset&&i.map.byterange.length===n.map.byterange.length))&&i.uri===n.uri&&i.byterange.offset===n.byterange.offset&&i.byterange.length===n.byterange.length&&(r[o]=t[o])}}return r},Bs=function(e,t,i,n,r,a){var s={uri:Ha(r.handleManifestRedirects,t.resolvedUri),byterange:t.byterange,playlist:i},o=Ua.mergeOptions(s,{responseType:"arraybuffer",headers:js(s)});return function(e,t,i){var n,r=[],a=!1,s=function(e,t,n,r){return t.abort(),a=!0,i(e,t,n,r)},o=function(e,t){if(!a){if(e)return s(e,t,"",r);var i=t.responseText.substring(r&&r.byteLength||0,t.responseText.length);if(r=Object(xe.concatTypedArrays)(r,Object(xe.stringToBytes)(i,!0)),n=n||Object(Ae.getId3Offset)(r),r.length<10||n&&r.length<n+2)return Ds(t,(function(){return s(e,t,"",r)}));var o=Object(Ae.detectContainerForBytes)(r);return"ts"===o&&r.length<188||!o&&r.length<376?Ds(t,(function(){return s(e,t,"",r)})):s(null,t,o,r)}},l=t({uri:e,beforeSend:function(e){e.overrideMimeType("text/plain; charset=x-user-defined"),e.addEventListener("progress",(function(t){t.total,t.loaded;return Ts(e,null,{statusCode:e.status},o)}))}},(function(e,t){return Ts(l,e,t,o)}));return l}(s.uri,n,(function(t,r,l,u){if(t)return a(t,r);if(!l||"mp4"!==l)return a({status:r.status,message:"Unsupported "+(l||"unknown")+" container type for sidx segment at URL: "+s.uri,response:"",playlist:i,internal:!0,blacklistDuration:1/0,code:2},r);var c=s.byterange,d=c.offset,h=c.length;if(u.length>=h+d)return a(t,{response:u.subarray(d,d+h),status:r.status,uri:r.uri});e.request=n(o,a)}))},Vs=function(e){function t(t,i,n,r){var a;void 0===n&&(n={}),a=e.call(this)||this;var s=n,o=s.withCredentials,l=void 0!==o&&o,u=s.handleManifestRedirects,d=void 0!==u&&u;if(a.vhs_=i,a.withCredentials=l,a.handleManifestRedirects=d,!t)throw new Error("A non-empty playlist URL or object is required");return a.on("minimumUpdatePeriod",(function(){a.refreshXml_()})),a.on("mediaupdatetimeout",(function(){a.refreshMedia_(a.media().id)})),a.state="HAVE_NOTHING",a.loadedPlaylists_={},"string"==typeof t?(a.srcUrl=t,a.sidxMapping_={},c()(a)):(a.setupChildLoader(r,t),a)}h()(t,e);var i=t.prototype;return i.setupChildLoader=function(e,t){this.masterPlaylistLoader_=e,this.childPlaylist_=t},i.dispose=function(){this.trigger("dispose"),this.stopRequest(),this.loadedPlaylists_={},r.a.clearTimeout(this.minimumUpdatePeriodTimeout_),r.a.clearTimeout(this.mediaRequest_),r.a.clearTimeout(this.mediaUpdateTimeout),this.off()},i.hasPendingRequest=function(){return this.request||this.mediaRequest_},i.stopRequest=function(){if(this.request){var e=this.request;this.request=null,e.onreadystatechange=null,e.abort()}},i.sidxRequestFinished_=function(e,t,i,n){var r=this;return function(a,s){if(r.request){if(r.request=null,a)return r.error="object"==typeof a?a:{status:s.status,message:"DASH playlist request error at URL: "+e.uri,response:s.response,code:2},i&&(r.state=i),void r.trigger("error");var o=Object(xe.toUint8)(s.response),l=Ee()(o.subarray(8));return n(t,l)}}},i.media=function(e){var t=this;if(!e)return this.media_;if("HAVE_NOTHING"===this.state)throw new Error("Cannot switch media playlist from "+this.state);var i=this.state;if("string"==typeof e){if(!this.master.playlists[e])throw new Error("Unknown playlist URI: "+e);e=this.master.playlists[e]}var n=!this.media_||e.id!==this.media_.id;if(n&&this.loadedPlaylists_[e.id]&&this.loadedPlaylists_[e.id].endList)return this.state="HAVE_METADATA",this.media_=e,void(n&&(this.trigger("mediachanging"),this.trigger("mediachange")));if(n)if(this.media_&&this.trigger("mediachanging"),e.sidx){var a,s;this.masterPlaylistLoader_?(a=this.masterPlaylistLoader_.master,s=this.masterPlaylistLoader_.sidxMapping_):(a=this.master,s=this.sidxMapping_);var o=zs(e.sidx);s[o]={sidxInfo:e.sidx},this.request=Bs(this,e.sidx,e,this.vhs_.xhr,{handleManifestRedirects:this.handleManifestRedirects},this.sidxRequestFinished_(e,a,i,(function(n,r){if(!n||!r)throw new Error("failed to request sidx");s[o].sidx=r,t.haveMetadata({startingState:i,playlist:n.playlists[e.id]})})))}else this.mediaRequest_=r.a.setTimeout(this.haveMetadata.bind(this,{startingState:i,playlist:e}),0)},i.haveMetadata=function(e){var t=e.startingState,i=e.playlist;this.state="HAVE_METADATA",this.loadedPlaylists_[i.id]=i,this.mediaRequest_=null,this.refreshMedia_(i.id),"HAVE_MASTER"===t?this.trigger("loadedmetadata"):this.trigger("mediachange")},i.pause=function(){this.stopRequest(),r.a.clearTimeout(this.mediaUpdateTimeout),r.a.clearTimeout(this.minimumUpdatePeriodTimeout_),"HAVE_NOTHING"===this.state&&(this.started=!1)},i.load=function(e){var t=this;r.a.clearTimeout(this.mediaUpdateTimeout),r.a.clearTimeout(this.minimumUpdatePeriodTimeout_);var i=this.media();if(e){var n=i?i.targetDuration/2*1e3:5e3;this.mediaUpdateTimeout=r.a.setTimeout((function(){return t.load()}),n)}else this.started?i&&!i.endList?this.trigger("mediaupdatetimeout"):this.trigger("loadedplaylist"):this.start()},i.start=function(){var e=this;this.started=!0,this.masterPlaylistLoader_?this.mediaRequest_=r.a.setTimeout(this.haveMaster_.bind(this),0):this.request=this.vhs_.xhr({uri:this.srcUrl,withCredentials:this.withCredentials},(function(t,i){if(e.request){if(e.request=null,t)return e.error={status:i.status,message:"DASH playlist request error at URL: "+e.srcUrl,responseText:i.responseText,code:2},"HAVE_NOTHING"===e.state&&(e.started=!1),e.trigger("error");e.masterXml_=i.responseText,i.responseHeaders&&i.responseHeaders.date?e.masterLoaded_=Date.parse(i.responseHeaders.date):e.masterLoaded_=Date.now(),e.srcUrl=Ha(e.handleManifestRedirects,e.srcUrl,i),e.syncClientServerClock_(e.onClientServerClockSync_.bind(e))}}))},i.syncClientServerClock_=function(e){var t=this,i=Ce(this.masterXml_);return null===i?(this.clientOffset_=this.masterLoaded_-Date.now(),e()):"DIRECT"===i.method?(this.clientOffset_=i.value-Date.now(),e()):void(this.request=this.vhs_.xhr({uri:Va(this.srcUrl,i.value),method:i.method,withCredentials:this.withCredentials},(function(n,r){if(t.request){if(n)return t.clientOffset_=t.masterLoaded_-Date.now(),e();var a;a="HEAD"===i.method?r.responseHeaders&&r.responseHeaders.date?Date.parse(r.responseHeaders.date):t.masterLoaded_:Date.parse(r.responseText),t.clientOffset_=a-Date.now(),e()}})))},i.haveMaster_=function(){this.state="HAVE_MASTER",this.mediaRequest_=null,this.masterPlaylistLoader_?this.media_||this.media(this.childPlaylist_):(this.updateMainManifest_(Rs({masterXml:this.masterXml_,srcUrl:this.srcUrl,clientOffset:this.clientOffset_,sidxMapping:this.sidxMapping_})),this.trigger("loadedplaylist"))},i.updateMinimumUpdatePeriodTimeout_=function(){var e=this;r.a.clearTimeout(this.minimumUpdatePeriodTimeout_);var t=function(t){e.minimumUpdatePeriodTimeout_=r.a.setTimeout((function(){e.trigger("minimumUpdatePeriod")}),t)},i=this.master&&this.master.minimumUpdatePeriod;i>0?t(i):0===i&&(this.media()?t(1e3*this.media().targetDuration):this.one("loadedplaylist",(function(){t(1e3*e.media().targetDuration)})))},i.onClientServerClockSync_=function(){this.haveMaster_(),this.hasPendingRequest()||this.media_||this.media(this.master.playlists[0]),this.updateMinimumUpdatePeriodTimeout_()},i.updateMainManifest_=function(e){if(this.master=e,this.master.locations&&this.master.locations.length){var t=this.master.locations[0];t!==this.srcUrl&&(this.srcUrl=t)}},i.refreshXml_=function(){var e=this;this.request=this.vhs_.xhr({uri:this.srcUrl,withCredentials:this.withCredentials},(function(t,i){if(e.request){if(e.request=null,t)return e.error={status:i.status,message:"DASH playlist request error at URL: "+e.srcUrl,responseText:i.responseText,code:2},"HAVE_NOTHING"===e.state&&(e.started=!1),e.trigger("error");e.masterXml_=i.responseText,e.sidxMapping_=function(e,t,i,n){var r=ke(e,{manifestUri:t,clientOffset:i}),a=Fs(r.playlists,n);return Xa(r,(function(e,t,i,r){if(e.playlists&&e.playlists.length){var s=e.playlists;a=Ns(a,Fs(s,n))}})),a}(e.masterXml_,e.srcUrl,e.clientOffset_,e.sidxMapping_);var n=Rs({masterXml:e.masterXml_,srcUrl:e.srcUrl,clientOffset:e.clientOffset_,sidxMapping:e.sidxMapping_}),r=Us(e.master,n),a=e.media().sidx;if(r)if(a){var s=zs(a);if(!e.sidxMapping_[s]){var o=e.media();e.request=Bs(e,o.sidx,o,e.vhs_.xhr,{handleManifestRedirects:e.handleManifestRedirects},e.sidxRequestFinished_(o,n,e.state,(function(t,i){if(!t||!i)throw new Error("failed to request sidx on minimumUpdatePeriod");e.sidxMapping_[s].sidx=i,e.updateMinimumUpdatePeriodTimeout_(),e.refreshMedia_(e.media().id)})))}}else e.updateMainManifest_(r),e.media_&&(e.media_=e.master.playlists[e.media_.id]);e.updateMinimumUpdatePeriodTimeout_()}}))},i.refreshMedia_=function(e){var t,i,n=this;if(!e)throw new Error("refreshMedia_ must take a media id");this.masterPlaylistLoader_?(t=this.masterPlaylistLoader_.master,i=Rs({masterXml:this.masterPlaylistLoader_.masterXml_,srcUrl:this.masterPlaylistLoader_.srcUrl,clientOffset:this.masterPlaylistLoader_.clientOffset_,sidxMapping:this.masterPlaylistLoader_.sidxMapping_})):(t=this.master,i=Rs({masterXml:this.masterXml_,srcUrl:this.srcUrl,clientOffset:this.clientOffset_,sidxMapping:this.sidxMapping_}));var a=Us(t,i);a?(this.masterPlaylistLoader_?this.masterPlaylistLoader_.master=a:this.master=a,this.media_=a.playlists[e]):(this.media_=t.playlists[e],this.trigger("playlistunchanged")),this.media().endList||(this.mediaUpdateTimeout=r.a.setTimeout((function(){n.trigger("mediaupdatetimeout")}),es(this.media(),!!a))),this.trigger("loadedplaylist")},t}(Ms),Hs={GOAL_BUFFER_LENGTH:30,MAX_GOAL_BUFFER_LENGTH:60,BACK_BUFFER_LENGTH:30,GOAL_BUFFER_LENGTH_RATE:1,INITIAL_BANDWIDTH:4194304,BANDWIDTH_VARIANCE:1.2,BUFFER_LOW_WATER_LINE:0,MAX_BUFFER_LOW_WATER_LINE:30,BUFFER_LOW_WATER_LINE_RATE:1},qs=function(e){for(var t=new Uint8Array(new ArrayBuffer(e.length)),i=0;i<e.length;i++)t[i]=e.charCodeAt(i);return t.buffer},Ws=[],Gs=function(e){var t=e.transmuxer,i=e.bytes,n=e.audioAppendStart,r=e.gopsToAlignWith,a=e.isPartial,s=e.remux,o=e.onData,l=e.onTrackInfo,u=e.onAudioTimingInfo,c=e.onVideoTimingInfo,d=e.onVideoSegmentTimingInfo,h=e.onId3,p=e.onCaptions,f=e.onDone,m={isPartial:a,buffer:[]};if(t.onmessage=function(e){Ba&&("data"===e.data.action&&function(e,t,i){var n=e.data.segment,r=n.type,a=n.initSegment,s=n.captions,o=n.captionStreams,l=n.metadata,u=n.videoFrameDtsTime,c=n.videoFramePtsTime;t.buffer.push({captions:s,captionStreams:o,metadata:l});var d=e.data.segment.boxes||{data:e.data.segment.data},h={type:r,data:new Uint8Array(d.data,d.data.byteOffset,d.data.byteLength),initSegment:new Uint8Array(a.data,a.byteOffset,a.byteLength)};void 0!==u&&(h.videoFrameDtsTime=u),void 0!==c&&(h.videoFramePtsTime=c),i(h)}(e,m,o),"trackinfo"===e.data.action&&l(e.data.trackInfo),"gopInfo"===e.data.action&&function(e,t){t.gopInfo=e.data.gopInfo}(e,m),"audioTimingInfo"===e.data.action&&u(e.data.audioTimingInfo),"videoTimingInfo"===e.data.action&&c(e.data.videoTimingInfo),"videoSegmentTimingInfo"===e.data.action&&d(e.data.videoSegmentTimingInfo),"id3Frame"===e.data.action&&h([e.data.id3Frame],e.data.id3Frame.dispatchType),"caption"===e.data.action&&p(e.data.caption),"transmuxed"===e.data.type&&(t.onmessage=null,function(e){var t=e.transmuxedData,i=e.callback;t.buffer=[],i(t)}({transmuxedData:m,callback:f}),Xs()))},n&&t.postMessage({action:"setAudioAppendStart",appendStart:n}),Array.isArray(r)&&t.postMessage({action:"alignGopsWith",gopsToAlignWith:r}),void 0!==s&&t.postMessage({action:"setRemux",remux:s}),i.byteLength){var g=i instanceof ArrayBuffer?i:i.buffer,v=i instanceof ArrayBuffer?0:i.byteOffset;t.postMessage({action:"push",data:g,byteOffset:v,byteLength:i.byteLength},[g])}t.postMessage({action:a?"partialFlush":"flush"})},Xs=function(){Ba=null,Ws.length&&("function"==typeof(Ba=Ws.shift())?Ba():Gs(Ba))},Ks=function(e,t){e.postMessage({action:t}),Xs()},Ys=function(e,t){if(!Ba)return Ba=e,void Ks(t,e);Ws.push(Ks.bind(null,t,e))},Qs=function(e){if(!Ba)return Ba=e,void Gs(e);Ws.push(e)},Js=function(e){Ys("reset",e)},Zs=function(){Ba=null,Ws.length=0},$s=function(e){Ys("endTimeline",e)},eo=2,to=-101,io=-102,no=function(e){e.forEach((function(e){e.abort()}))},ro=function(e,t){return t.timedout?{status:t.status,message:"HLS request timed-out at URL: "+t.uri,code:to,xhr:t}:t.aborted?{status:t.status,message:"HLS request aborted at URL: "+t.uri,code:io,xhr:t}:e?{status:t.status,message:"HLS request errored at URL: "+t.uri,code:eo,xhr:t}:null},ao=function(e){var t=e.segment,i=e.bytes,n=e.isPartial,r=e.trackInfoFn,a=e.timingInfoFn,s=e.videoSegmentTimingInfoFn,o=e.id3Fn,l=e.captionsFn,u=e.dataFn,c=e.doneFn,d=t.map&&t.map.tracks||{},h=Boolean(d.audio&&d.video),p=a.bind(null,t,"audio","start"),f=a.bind(null,t,"audio","end"),m=a.bind(null,t,"video","start"),g=a.bind(null,t,"video","end");if(!n&&!t.lastReachedChar){var v=function(e,t){var i=Pe.a.inspect(e,t*Oe.ONE_SECOND_IN_TS);if(!i)return null;var n={hasVideo:i.video&&2===i.video.length||!1,hasAudio:i.audio&&2===i.audio.length||!1};return n.hasVideo&&(n.videoStart=i.video[0].ptsTime),n.hasAudio&&(n.audioStart=i.audio[0].ptsTime),n}(i,t.baseStartTime);v&&(r(t,{hasAudio:v.hasAudio,hasVideo:v.hasVideo,isMuxed:h}),r=null,v.hasAudio&&!h&&p(v.audioStart),v.hasVideo&&m(v.videoStart),p=null,m=null)}Qs({bytes:i,transmuxer:t.transmuxer,audioAppendStart:t.audioAppendStart,gopsToAlignWith:t.gopsToAlignWith,isPartial:n,remux:h,onData:function(e){e.type="combined"===e.type?"video":e.type,u(t,e)},onTrackInfo:function(e){r&&(h&&(e.isMuxed=!0),r(t,e))},onAudioTimingInfo:function(e){p&&void 0!==e.start&&(p(e.start),p=null),f&&void 0!==e.end&&f(e.end)},onVideoTimingInfo:function(e){m&&void 0!==e.start&&(m(e.start),m=null),g&&void 0!==e.end&&g(e.end)},onVideoSegmentTimingInfo:function(e){s(e)},onId3:function(e,i){o(t,e,i)},onCaptions:function(e){l(t,[e])},onDone:function(e){c&&!n&&(e.type="combined"===e.type?"video":e.type,c(null,t,e))}})},so=function(e){var t=e.segment,i=e.bytes,n=e.isPartial,r=e.trackInfoFn,a=e.timingInfoFn,s=e.videoSegmentTimingInfoFn,o=e.id3Fn,l=e.captionsFn,u=e.dataFn,c=e.doneFn,d=new Uint8Array(i);if(Object(Ae.isLikelyFmp4MediaSegment)(d)){t.isFmp4=!0;var h=t.map.tracks,p={isFmp4:!0,hasVideo:!!h.video,hasAudio:!!h.audio};h.audio&&h.audio.codec&&"enca"!==h.audio.codec&&(p.audioCodec=h.audio.codec),h.video&&h.video.codec&&"encv"!==h.video.codec&&(p.videoCodec=h.video.codec),h.video&&h.audio&&(p.isMuxed=!0),r(t,p);var f=De.a.startTime(t.map.timescales,d);p.hasAudio&&!p.isMuxed&&a(t,"audio","start",f),p.hasVideo&&a(t,"video","start",f);var m=function(e){u(t,{data:i,type:p.hasAudio&&!p.isMuxed?"audio":"video"}),e&&e.length&&l(t,e),c(null,t,{})};if(!h.video||!i.byteLength||!t.transmuxer)return void m();var g=i instanceof ArrayBuffer?i:i.buffer,v=i instanceof ArrayBuffer?0:i.byteOffset;return t.transmuxer.addEventListener("message",(function e(n){if("mp4Captions"===n.data.action){t.transmuxer.removeEventListener("message",e);var r=n.data.data;t.bytes=i=new Uint8Array(r,r.byteOffset||0,r.byteLength),m(n.data.captions)}})),void t.transmuxer.postMessage({action:"pushMp4Captions",timescales:t.map.timescales,trackIds:[h.video.id],data:g,byteOffset:v,byteLength:i.byteLength},[g])}if(t.transmuxer){if(void 0===t.container&&(t.container=Object(Ae.detectContainerForBytes)(d)),"ts"!==t.container&&"aac"!==t.container)return r(t,{hasAudio:!1,hasVideo:!1}),void c(null,t,{});ao({segment:t,bytes:i,isPartial:n,trackInfoFn:r,timingInfoFn:a,videoSegmentTimingInfoFn:s,id3Fn:o,captionsFn:l,dataFn:u,doneFn:c})}else c(null,t,{})},oo=function(e){var t=e.activeXhrs,i=e.decryptionWorker,n=e.trackInfoFn,r=e.timingInfoFn,a=e.videoSegmentTimingInfoFn,s=e.id3Fn,o=e.captionsFn,l=e.dataFn,u=e.doneFn,c=0,d=!1;return function(e,h){if(!d){if(e)return d=!0,no(t),u(e,h);if((c+=1)===t.length){if(h.endOfAllRequests=Date.now(),h.encryptedBytes)return function(e){var t,i=e.decryptionWorker,n=e.segment,r=e.trackInfoFn,a=e.timingInfoFn,s=e.videoSegmentTimingInfoFn,o=e.id3Fn,l=e.captionsFn,u=e.dataFn,c=e.doneFn;i.addEventListener("message",(function e(t){if(t.data.source===n.requestId){i.removeEventListener("message",e);var d=t.data.decrypted;n.bytes=new Uint8Array(d.bytes,d.byteOffset,d.byteLength),so({segment:n,bytes:n.bytes,isPartial:!1,trackInfoFn:r,timingInfoFn:a,videoSegmentTimingInfoFn:s,id3Fn:o,captionsFn:l,dataFn:u,doneFn:c})}})),t=n.key.bytes.slice?n.key.bytes.slice():new Uint32Array(Array.prototype.slice.call(n.key.bytes)),i.postMessage(Es({source:n.requestId,encrypted:n.encryptedBytes,key:t,iv:n.key.iv}),[n.encryptedBytes.buffer,t.buffer])}({decryptionWorker:i,segment:h,trackInfoFn:n,timingInfoFn:r,videoSegmentTimingInfoFn:a,id3Fn:s,captionsFn:o,dataFn:l,doneFn:u});so({segment:h,bytes:h.bytes,isPartial:!1,trackInfoFn:n,timingInfoFn:r,videoSegmentTimingInfoFn:a,id3Fn:s,captionsFn:o,dataFn:l,doneFn:u})}}}},lo=function(e){var t=e.segment,i=e.progressFn,n=e.trackInfoFn,r=e.timingInfoFn,a=e.videoSegmentTimingInfoFn,s=e.id3Fn,o=e.captionsFn,l=e.dataFn,u=e.handlePartialData;return function(e){var c=e.target;if(!c.aborted){if(u&&!t.key&&c.responseText&&c.responseText.length>=8){var d=qs(c.responseText.substring(t.lastReachedChar||0));!t.lastReachedChar&&Object(Ae.isLikelyFmp4MediaSegment)(new Uint8Array(d))||(t.lastReachedChar=c.responseText.length,so({segment:t,bytes:d,isPartial:!0,trackInfoFn:n,timingInfoFn:r,videoSegmentTimingInfoFn:a,id3Fn:s,captionsFn:o,dataFn:l}))}return t.stats=Ua.mergeOptions(t.stats,function(e){var t=e.target,i={bandwidth:1/0,bytesReceived:0,roundTripTime:Date.now()-t.requestTime||0};return i.bytesReceived=e.loaded,i.bandwidth=Math.floor(i.bytesReceived/i.roundTripTime*8*1e3),i}(e)),!t.stats.firstBytesReceivedAt&&t.stats.bytesReceived&&(t.stats.firstBytesReceivedAt=Date.now()),i(e,t)}}},uo=function(e){var t=e.xhr,i=e.xhrOptions,n=e.decryptionWorker,r=e.segment,a=e.abortFn,s=e.progressFn,o=e.trackInfoFn,l=e.timingInfoFn,u=e.videoSegmentTimingInfoFn,c=e.id3Fn,d=e.captionsFn,h=e.dataFn,p=e.doneFn,f=e.handlePartialData,m=[],g=oo({activeXhrs:m,decryptionWorker:n,trackInfoFn:o,timingInfoFn:l,videoSegmentTimingInfoFn:u,id3Fn:c,captionsFn:d,dataFn:h,doneFn:p});if(r.key&&!r.key.bytes){var v=t(Ua.mergeOptions(i,{uri:r.key.resolvedUri,responseType:"arraybuffer"}),function(e,t){return function(i,n){var r=n.response,a=ro(i,n);if(a)return t(a,e);if(16!==r.byteLength)return t({status:n.status,message:"Invalid HLS key at URL: "+n.uri,code:eo,xhr:n},e);var s=new DataView(r);return e.key.bytes=new Uint32Array([s.getUint32(0),s.getUint32(4),s.getUint32(8),s.getUint32(12)]),t(null,e)}}(r,g));m.push(v)}if(r.map&&!r.map.bytes){var y=t(Ua.mergeOptions(i,{uri:r.map.resolvedUri,responseType:"arraybuffer",headers:js(r.map)}),function(e){var t=e.segment,i=e.finishProcessingFn;return function(e,n){var r=n.response,a=ro(e,n);if(a)return i(a,t);if(0===r.byteLength)return i({status:n.status,message:"Empty HLS segment content at URL: "+n.uri,code:eo,xhr:n},t);t.map.bytes=new Uint8Array(n.response);var s=Object(Ae.detectContainerForBytes)(t.map.bytes);return"mp4"!==s?i({status:n.status,message:"Found unsupported "+(s||"unknown")+" container for initialization segment at URL: "+n.uri,code:eo,internal:!0,xhr:n},t):(De.a.tracks(t.map.bytes).forEach((function(e){t.map.tracks=t.map.tracks||{},t.map.tracks[e.type]||(t.map.tracks[e.type]=e,e.id&&e.timescale&&(t.map.timescales=t.map.timescales||{},t.map.timescales[e.id]=e.timescale))})),i(null,t))}}({segment:r,finishProcessingFn:g}));m.push(y)}var _=Ua.mergeOptions(i,{uri:r.resolvedUri,responseType:"arraybuffer",headers:js(r)});f&&(_.responseType="text",_.beforeSend=function(e){e.overrideMimeType("text/plain; charset=x-user-defined")});var b=t(_,function(e){var t=e.segment,i=e.finishProcessingFn,n=e.responseType;return function(e,r){var a=r.response,s=ro(e,r);if(s)return i(s,t);var o="arraybuffer"!==n&&r.responseText?qs(r.responseText.substring(t.lastReachedChar||0)):r.response;return 0===a.byteLength?i({status:r.status,message:"Empty HLS segment content at URL: "+r.uri,code:eo,xhr:r},t):(t.stats=function(e){return{bandwidth:e.bandwidth,bytesReceived:e.bytesReceived||0,roundTripTime:e.roundTripTime||0}}(r),t.key?t.encryptedBytes=new Uint8Array(o):t.bytes=new Uint8Array(o),i(null,t))}}({segment:r,finishProcessingFn:g,responseType:_.responseType}));b.addEventListener("progress",lo({segment:r,progressFn:s,trackInfoFn:o,timingInfoFn:l,videoSegmentTimingInfoFn:u,id3Fn:c,captionsFn:d,dataFn:h,handlePartialData:f})),m.push(b);var T={};return m.forEach((function(e){e.addEventListener("loadend",function(e){var t=e.loadendState,i=e.abortFn;return function(e){e.target.aborted&&i&&!t.calledAbortFn&&(i(),t.calledAbortFn=!0)}}({loadendState:T,abortFn:a}))})),function(){return no(m)}},co="undefined"!=typeof window?window:{},ho="undefined"==typeof Symbol?"__target":Symbol(),po=co.BlobBuilder||co.WebKitBlobBuilder||co.MozBlobBuilder||co.MSBlobBuilder,fo=co.URL||co.webkitURL||fo&&fo.msURL,mo=co.Worker;function go(e,t){return function(i){var n=this;if(!t)return new mo(e);if(mo&&!i){var r=bo(t.toString().replace(/^function.+?{/,"").slice(0,-1));return this[ho]=new mo(r),function(e,t){if(!e||!t)return;var i=e.terminate;e.objURL=t,e.terminate=function(){e.objURL&&fo.revokeObjectURL(e.objURL),i.call(e)}}(this[ho],r),this[ho]}var a={postMessage:function(e){n.onmessage&&setTimeout((function(){n.onmessage({data:e,target:a})}))}};t.call(a),this.postMessage=function(e){setTimeout((function(){a.onmessage({data:e,target:n})}))},this.isThisThread=!0}}if(mo){var vo,yo=bo("self.onmessage = function () {}"),_o=new Uint8Array(1);try{(vo=new mo(yo)).postMessage(_o,[_o.buffer])}catch(e){mo=null}finally{fo.revokeObjectURL(yo),vo&&vo.terminate()}}function bo(e){try{return fo.createObjectURL(new Blob([e],{type:"application/javascript"}))}catch(i){var t=new po;return t.append(e),fo.createObjectURL(t.getBlob(type))}}var To=new go("./transmuxer-worker.worker.js",(function(e,t){var i=this;
/*! @name @videojs/http-streaming @version 2.2.4 @license Apache-2.0 */!function(){var e=function(){this.init=function(){var e={};this.on=function(t,i){e[t]||(e[t]=[]),e[t]=e[t].concat(i)},this.off=function(t,i){var n;return!!e[t]&&(n=e[t].indexOf(i),e[t]=e[t].slice(),e[t].splice(n,1),n>-1)},this.trigger=function(t){var i,n,r,a;if(i=e[t])if(2===arguments.length)for(r=i.length,n=0;n<r;++n)i[n].call(this,arguments[1]);else{for(a=[],n=arguments.length,n=1;n<arguments.length;++n)a.push(arguments[n]);for(r=i.length,n=0;n<r;++n)i[n].apply(this,a)}},this.dispose=function(){e={}}}};e.prototype.pipe=function(e){return this.on("data",(function(t){e.push(t)})),this.on("done",(function(t){e.flush(t)})),this.on("partialdone",(function(t){e.partialFlush(t)})),this.on("endedtimeline",(function(t){e.endTimeline(t)})),this.on("reset",(function(t){e.reset(t)})),e},e.prototype.push=function(e){this.trigger("data",e)},e.prototype.flush=function(e){this.trigger("done",e)},e.prototype.partialFlush=function(e){this.trigger("partialdone",e)},e.prototype.endTimeline=function(e){this.trigger("endedtimeline",e)},e.prototype.reset=function(e){this.trigger("reset",e)};var t,n,r,a,s,o,l,u,c,d,h,p,f,m,g,v,y,_,b,T,S,j,k,C,w,E,A,x,I,P,O,L,D,M,N,R,U,z,F,B,V=e,H=Math.pow(2,32)-1;!function(){var e;if(j={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],mvex:[],mvhd:[],pasp:[],sdtp:[],smhd:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],styp:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[]},"undefined"!=typeof Uint8Array){for(e in j)j.hasOwnProperty(e)&&(j[e]=[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]);k=new Uint8Array(["i".charCodeAt(0),"s".charCodeAt(0),"o".charCodeAt(0),"m".charCodeAt(0)]),w=new Uint8Array(["a".charCodeAt(0),"v".charCodeAt(0),"c".charCodeAt(0),"1".charCodeAt(0)]),C=new Uint8Array([0,0,0,1]),E=new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),A=new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]),x={video:E,audio:A},O=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),P=new Uint8Array([0,0,0,0,0,0,0,0]),L=new Uint8Array([0,0,0,0,0,0,0,0]),D=L,M=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),N=L,I=new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0])}}(),t=function(e){var t,i,n=[],r=0;for(t=1;t<arguments.length;t++)n.push(arguments[t]);for(t=n.length;t--;)r+=n[t].byteLength;for(i=new Uint8Array(r+8),new DataView(i.buffer,i.byteOffset,i.byteLength).setUint32(0,i.byteLength),i.set(e,4),t=0,r=8;t<n.length;t++)i.set(n[t],r),r+=n[t].byteLength;return i},n=function(){return t(j.dinf,t(j.dref,O))},r=function(e){return t(j.esds,new Uint8Array([0,0,0,0,3,25,0,0,0,4,17,64,21,0,6,0,0,0,218,192,0,0,218,192,5,2,e.audioobjecttype<<3|e.samplingfrequencyindex>>>1,e.samplingfrequencyindex<<7|e.channelcount<<3,6,1,2]))},g=function(e){return t(j.hdlr,x[e])},m=function(e){var i=new Uint8Array([0,0,0,0,0,0,0,2,0,0,0,3,0,1,95,144,e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,85,196,0,0]);return e.samplerate&&(i[12]=e.samplerate>>>24&255,i[13]=e.samplerate>>>16&255,i[14]=e.samplerate>>>8&255,i[15]=255&e.samplerate),t(j.mdhd,i)},f=function(e){return t(j.mdia,m(e),g(e.type),o(e))},s=function(e){return t(j.mfhd,new Uint8Array([0,0,0,0,(4278190080&e)>>24,(16711680&e)>>16,(65280&e)>>8,255&e]))},o=function(e){return t(j.minf,"video"===e.type?t(j.vmhd,I):t(j.smhd,P),n(),y(e))},l=function(e,i){for(var n=[],r=i.length;r--;)n[r]=b(i[r]);return t.apply(null,[j.moof,s(e)].concat(n))},u=function(e){for(var i=e.length,n=[];i--;)n[i]=h(e[i]);return t.apply(null,[j.moov,d(4294967295)].concat(n).concat(c(e)))},c=function(e){for(var i=e.length,n=[];i--;)n[i]=T(e[i]);return t.apply(null,[j.mvex].concat(n))},d=function(e){var i=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,2,0,1,95,144,(4278190080&e)>>24,(16711680&e)>>16,(65280&e)>>8,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return t(j.mvhd,i)},v=function(e){var i,n,r=e.samples||[],a=new Uint8Array(4+r.length);for(n=0;n<r.length;n++)i=r[n].flags,a[n+4]=i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;return t(j.sdtp,a)},y=function(e){return t(j.stbl,_(e),t(j.stts,N),t(j.stsc,D),t(j.stsz,M),t(j.stco,L))},_=function(e){return t(j.stsd,new Uint8Array([0,0,0,0,0,0,0,1]),"video"===e.type?R(e):U(e))},R=function(e){var i,n,r=e.sps||[],a=e.pps||[],s=[],o=[];for(i=0;i<r.length;i++)s.push((65280&r[i].byteLength)>>>8),s.push(255&r[i].byteLength),s=s.concat(Array.prototype.slice.call(r[i]));for(i=0;i<a.length;i++)o.push((65280&a[i].byteLength)>>>8),o.push(255&a[i].byteLength),o=o.concat(Array.prototype.slice.call(a[i]));if(n=[j.avc1,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,(65280&e.width)>>8,255&e.width,(65280&e.height)>>8,255&e.height,0,72,0,0,0,72,0,0,0,0,0,0,0,1,19,118,105,100,101,111,106,115,45,99,111,110,116,114,105,98,45,104,108,115,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),t(j.avcC,new Uint8Array([1,e.profileIdc,e.profileCompatibility,e.levelIdc,255].concat([r.length],s,[a.length],o))),t(j.btrt,new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]))],e.sarRatio){var l=e.sarRatio[0],u=e.sarRatio[1];n.push(t(j.pasp,new Uint8Array([(4278190080&l)>>24,(16711680&l)>>16,(65280&l)>>8,255&l,(4278190080&u)>>24,(16711680&u)>>16,(65280&u)>>8,255&u])))}return t.apply(null,n)},U=function(e){return t(j.mp4a,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,(65280&e.channelcount)>>8,255&e.channelcount,(65280&e.samplesize)>>8,255&e.samplesize,0,0,0,0,(65280&e.samplerate)>>8,255&e.samplerate,0,0]),r(e))},p=function(e){var i=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,(4278190080&e.id)>>24,(16711680&e.id)>>16,(65280&e.id)>>8,255&e.id,0,0,0,0,(4278190080&e.duration)>>24,(16711680&e.duration)>>16,(65280&e.duration)>>8,255&e.duration,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,(65280&e.width)>>8,255&e.width,0,0,(65280&e.height)>>8,255&e.height,0,0]);return t(j.tkhd,i)},b=function(e){var i,n,r,a,s,o;return i=t(j.tfhd,new Uint8Array([0,0,0,58,(4278190080&e.id)>>24,(16711680&e.id)>>16,(65280&e.id)>>8,255&e.id,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0])),s=Math.floor(e.baseMediaDecodeTime/(H+1)),o=Math.floor(e.baseMediaDecodeTime%(H+1)),n=t(j.tfdt,new Uint8Array([1,0,0,0,s>>>24&255,s>>>16&255,s>>>8&255,255&s,o>>>24&255,o>>>16&255,o>>>8&255,255&o])),92,"audio"===e.type?(r=S(e,92),t(j.traf,i,n,r)):(a=v(e),r=S(e,a.length+92),t(j.traf,i,n,r,a))},h=function(e){return e.duration=e.duration||4294967295,t(j.trak,p(e),f(e))},T=function(e){var i=new Uint8Array([0,0,0,0,(4278190080&e.id)>>24,(16711680&e.id)>>16,(65280&e.id)>>8,255&e.id,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return"video"!==e.type&&(i[i.length-1]=0),t(j.trex,i)},B=function(e,t){var i=0,n=0,r=0,a=0;return e.length&&(void 0!==e[0].duration&&(i=1),void 0!==e[0].size&&(n=2),void 0!==e[0].flags&&(r=4),void 0!==e[0].compositionTimeOffset&&(a=8)),[0,0,i|n|r|a,1,(4278190080&e.length)>>>24,(16711680&e.length)>>>16,(65280&e.length)>>>8,255&e.length,(4278190080&t)>>>24,(16711680&t)>>>16,(65280&t)>>>8,255&t]},F=function(e,i){var n,r,a,s,o,l;for(i+=20+16*(s=e.samples||[]).length,a=B(s,i),(r=new Uint8Array(a.length+16*s.length)).set(a),n=a.length,l=0;l<s.length;l++)o=s[l],r[n++]=(4278190080&o.duration)>>>24,r[n++]=(16711680&o.duration)>>>16,r[n++]=(65280&o.duration)>>>8,r[n++]=255&o.duration,r[n++]=(4278190080&o.size)>>>24,r[n++]=(16711680&o.size)>>>16,r[n++]=(65280&o.size)>>>8,r[n++]=255&o.size,r[n++]=o.flags.isLeading<<2|o.flags.dependsOn,r[n++]=o.flags.isDependedOn<<6|o.flags.hasRedundancy<<4|o.flags.paddingValue<<1|o.flags.isNonSyncSample,r[n++]=61440&o.flags.degradationPriority,r[n++]=15&o.flags.degradationPriority,r[n++]=(4278190080&o.compositionTimeOffset)>>>24,r[n++]=(16711680&o.compositionTimeOffset)>>>16,r[n++]=(65280&o.compositionTimeOffset)>>>8,r[n++]=255&o.compositionTimeOffset;return t(j.trun,r)},z=function(e,i){var n,r,a,s,o,l;for(i+=20+8*(s=e.samples||[]).length,a=B(s,i),(n=new Uint8Array(a.length+8*s.length)).set(a),r=a.length,l=0;l<s.length;l++)o=s[l],n[r++]=(4278190080&o.duration)>>>24,n[r++]=(16711680&o.duration)>>>16,n[r++]=(65280&o.duration)>>>8,n[r++]=255&o.duration,n[r++]=(4278190080&o.size)>>>24,n[r++]=(16711680&o.size)>>>16,n[r++]=(65280&o.size)>>>8,n[r++]=255&o.size;return t(j.trun,n)},S=function(e,t){return"audio"===e.type?z(e,t):F(e,t)};a=function(){return t(j.ftyp,k,C,k,w)};var q,W,G,X,K,Y,Q,J,Z=function(e){return t(j.mdat,e)},$=l,ee=function(e){var t,i=a(),n=u(e);return(t=new Uint8Array(i.byteLength+n.byteLength)).set(i),t.set(n,i.byteLength),t},te=function(e,t){var i={size:0,flags:{isLeading:0,dependsOn:1,isDependedOn:0,hasRedundancy:0,degradationPriority:0,isNonSyncSample:1}};return i.dataOffset=t,i.compositionTimeOffset=e.pts-e.dts,i.duration=e.duration,i.size=4*e.length,i.size+=e.byteLength,e.keyFrame&&(i.flags.dependsOn=2,i.flags.isNonSyncSample=0),i},ie=function(e){var t,i,n=[],r=[];for(r.byteLength=0,r.nalCount=0,r.duration=0,n.byteLength=0,t=0;t<e.length;t++)"access_unit_delimiter_rbsp"===(i=e[t]).nalUnitType?(n.length&&(n.duration=i.dts-n.dts,r.byteLength+=n.byteLength,r.nalCount+=n.length,r.duration+=n.duration,r.push(n)),(n=[i]).byteLength=i.data.byteLength,n.pts=i.pts,n.dts=i.dts):("slice_layer_without_partitioning_rbsp_idr"===i.nalUnitType&&(n.keyFrame=!0),n.duration=i.dts-n.dts,n.byteLength+=i.data.byteLength,n.push(i));return r.length&&(!n.duration||n.duration<=0)&&(n.duration=r[r.length-1].duration),r.byteLength+=n.byteLength,r.nalCount+=n.length,r.duration+=n.duration,r.push(n),r},ne=function(e){var t,i,n=[],r=[];for(n.byteLength=0,n.nalCount=0,n.duration=0,n.pts=e[0].pts,n.dts=e[0].dts,r.byteLength=0,r.nalCount=0,r.duration=0,r.pts=e[0].pts,r.dts=e[0].dts,t=0;t<e.length;t++)(i=e[t]).keyFrame?(n.length&&(r.push(n),r.byteLength+=n.byteLength,r.nalCount+=n.nalCount,r.duration+=n.duration),(n=[i]).nalCount=i.length,n.byteLength=i.byteLength,n.pts=i.pts,n.dts=i.dts,n.duration=i.duration):(n.duration+=i.duration,n.nalCount+=i.length,n.byteLength+=i.byteLength,n.push(i));return r.length&&n.duration<=0&&(n.duration=r[r.length-1].duration),r.byteLength+=n.byteLength,r.nalCount+=n.nalCount,r.duration+=n.duration,r.push(n),r},re=function(e){var t;return!e[0][0].keyFrame&&e.length>1&&(t=e.shift(),e.byteLength-=t.byteLength,e.nalCount-=t.nalCount,e[0][0].dts=t.dts,e[0][0].pts=t.pts,e[0][0].duration+=t.duration),e},ae=function(e,t){var i,n,r,a,s,o=t||0,l=[];for(i=0;i<e.length;i++)for(a=e[i],n=0;n<a.length;n++)s=a[n],o+=(r=te(s,o)).size,l.push(r);return l},se=function(e){var t,i,n,r,a,s,o=0,l=e.byteLength,u=e.nalCount,c=new Uint8Array(l+4*u),d=new DataView(c.buffer);for(t=0;t<e.length;t++)for(r=e[t],i=0;i<r.length;i++)for(a=r[i],n=0;n<a.length;n++)s=a[n],d.setUint32(o,s.data.byteLength),o+=4,c.set(s.data,o),o+=s.data.byteLength;return c},oe=function(e,t){var i,n=[];return i=te(e,t||0),n.push(i),n},le=function(e){var t,i,n=0,r=e.byteLength,a=e.length,s=new Uint8Array(r+4*a),o=new DataView(s.buffer);for(t=0;t<e.length;t++)i=e[t],o.setUint32(n,i.data.byteLength),n+=4,s.set(i.data,n),n+=i.data.byteLength;return s},ue=[33,16,5,32,164,27],ce=[33,65,108,84,1,2,4,8,168,2,4,8,17,191,252],de=function(e){for(var t=[];e--;)t.push(0);return t},he=function(){if(!q){var e={96e3:[ue,[227,64],de(154),[56]],88200:[ue,[231],de(170),[56]],64e3:[ue,[248,192],de(240),[56]],48e3:[ue,[255,192],de(268),[55,148,128],de(54),[112]],44100:[ue,[255,192],de(268),[55,163,128],de(84),[112]],32e3:[ue,[255,192],de(268),[55,234],de(226),[112]],24e3:[ue,[255,192],de(268),[55,255,128],de(268),[111,112],de(126),[224]],16e3:[ue,[255,192],de(268),[55,255,128],de(268),[111,255],de(269),[223,108],de(195),[1,192]],12e3:[ce,de(268),[3,127,248],de(268),[6,255,240],de(268),[13,255,224],de(268),[27,253,128],de(259),[56]],11025:[ce,de(268),[3,127,248],de(268),[6,255,240],de(268),[13,255,224],de(268),[27,255,192],de(268),[55,175,128],de(108),[112]],8e3:[ce,de(268),[3,121,16],de(47),[7]]};t=e,q=Object.keys(t).reduce((function(e,i){return e[i]=new Uint8Array(t[i].reduce((function(e,t){return e.concat(t)}),[])),e}),{})}var t;return q};Y=function(e,t){return W(K(e,t))},Q=function(e,t){return G(X(e),t)},J=function(e,t,i){return X(i?e:e-t)};var pe=9e4,fe=(G=function(e,t){return e*t},X=function(e){return e/9e4}),me=(K=function(e,t){return e/t},Y),ge=Q,ve=J,ye=W=function(e){return 9e4*e},_e=fe,be=function(e,t,i,n){var r,a,s,o,l,u=0,c=0,d=0;if(t.length&&(r=me(e.baseMediaDecodeTime,e.samplerate),a=Math.ceil(pe/(e.samplerate/1024)),i&&n&&(u=r-Math.max(i,n),d=(c=Math.floor(u/a))*a),!(c<1||d>pe/2))){for((s=he()[e.samplerate])||(s=t[0].data),o=0;o<c;o++)l=t[0],t.splice(0,0,{data:s,dts:l.dts-a,pts:l.pts-a});e.baseMediaDecodeTime-=Math.floor(ge(d,e.samplerate))}},Te=function(e,t,i){return t.minSegmentDts>=i?e:(t.minSegmentDts=1/0,e.filter((function(e){return e.dts>=i&&(t.minSegmentDts=Math.min(t.minSegmentDts,e.dts),t.minSegmentPts=t.minSegmentDts,!0)})))},Se=function(e){var t,i,n=[];for(t=0;t<e.length;t++)i=e[t],n.push({size:i.data.byteLength,duration:1024});return n},je=function(e){var t,i,n=0,r=new Uint8Array(function(e){var t,i=0;for(t=0;t<e.length;t++)i+=e[t].data.byteLength;return i}(e));for(t=0;t<e.length;t++)i=e[t],r.set(i.data,n),n+=i.data.byteLength;return r},ke=pe,Ce=function(e){delete e.minSegmentDts,delete e.maxSegmentDts,delete e.minSegmentPts,delete e.maxSegmentPts},we=function(e,t){var i,n=e.minSegmentDts;return t||(n-=e.timelineStartInfo.dts),i=e.timelineStartInfo.baseMediaDecodeTime,i+=n,i=Math.max(0,i),"audio"===e.type&&(i*=e.samplerate/ke,i=Math.floor(i)),i},Ee=function(e,t){"number"==typeof t.pts&&(void 0===e.timelineStartInfo.pts&&(e.timelineStartInfo.pts=t.pts),void 0===e.minSegmentPts?e.minSegmentPts=t.pts:e.minSegmentPts=Math.min(e.minSegmentPts,t.pts),void 0===e.maxSegmentPts?e.maxSegmentPts=t.pts:e.maxSegmentPts=Math.max(e.maxSegmentPts,t.pts)),"number"==typeof t.dts&&(void 0===e.timelineStartInfo.dts&&(e.timelineStartInfo.dts=t.dts),void 0===e.minSegmentDts?e.minSegmentDts=t.dts:e.minSegmentDts=Math.min(e.minSegmentDts,t.dts),void 0===e.maxSegmentDts?e.maxSegmentDts=t.dts:e.maxSegmentDts=Math.max(e.maxSegmentDts,t.dts))},Ae=function(e){for(var t=0,i={payloadType:-1,payloadSize:0},n=0,r=0;t<e.byteLength&&128!==e[t];){for(;255===e[t];)n+=255,t++;for(n+=e[t++];255===e[t];)r+=255,t++;if(r+=e[t++],!i.payload&&4===n){if("GA94"===String.fromCharCode(e[t+3],e[t+4],e[t+5],e[t+6])){i.payloadType=n,i.payloadSize=r,i.payload=e.subarray(t,t+r);break}i.payload=void 0}t+=r,n=0,r=0}return i},xe=function(e){return 181!==e.payload[0]||49!=(e.payload[1]<<8|e.payload[2])||"GA94"!==String.fromCharCode(e.payload[3],e.payload[4],e.payload[5],e.payload[6])||3!==e.payload[7]?null:e.payload.subarray(8,e.payload.length-1)},Ie=function(e,t){var i,n,r,a,s=[];if(!(64&t[0]))return s;for(n=31&t[0],i=0;i<n;i++)a={type:3&t[(r=3*i)+2],pts:e},4&t[r+2]&&(a.ccData=t[r+3]<<8|t[r+4],s.push(a));return s},Pe=function(e){for(var t,i,n=e.byteLength,r=[],a=1;a<n-2;)0===e[a]&&0===e[a+1]&&3===e[a+2]?(r.push(a+2),a+=2):a++;if(0===r.length)return e;t=n-r.length,i=new Uint8Array(t);var s=0;for(a=0;a<t;s++,a++)s===r[0]&&(s++,r.shift()),i[a]=e[s];return i},Oe=4,Le=function e(){e.prototype.init.call(this),this.captionPackets_=[],this.ccStreams_=[new Ue(0,0),new Ue(0,1),new Ue(1,0),new Ue(1,1)],this.reset(),this.ccStreams_.forEach((function(e){e.on("data",this.trigger.bind(this,"data")),e.on("partialdone",this.trigger.bind(this,"partialdone")),e.on("done",this.trigger.bind(this,"done"))}),this)};(Le.prototype=new V).push=function(e){var t,i,n;if("sei_rbsp"===e.nalUnitType&&(t=Ae(e.escapedRBSP)).payloadType===Oe&&(i=xe(t)))if(e.dts<this.latestDts_)this.ignoreNextEqualDts_=!0;else{if(e.dts===this.latestDts_&&this.ignoreNextEqualDts_)return this.numSameDts_--,void(this.numSameDts_||(this.ignoreNextEqualDts_=!1));n=Ie(e.pts,i),this.captionPackets_=this.captionPackets_.concat(n),this.latestDts_!==e.dts&&(this.numSameDts_=0),this.numSameDts_++,this.latestDts_=e.dts}},Le.prototype.flushCCStreams=function(e){this.ccStreams_.forEach((function(t){return"flush"===e?t.flush():t.partialFlush()}),this)},Le.prototype.flushStream=function(e){this.captionPackets_.length?(this.captionPackets_.forEach((function(e,t){e.presortIndex=t})),this.captionPackets_.sort((function(e,t){return e.pts===t.pts?e.presortIndex-t.presortIndex:e.pts-t.pts})),this.captionPackets_.forEach((function(e){e.type<2&&this.dispatchCea608Packet(e)}),this),this.captionPackets_.length=0,this.flushCCStreams(e)):this.flushCCStreams(e)},Le.prototype.flush=function(){return this.flushStream("flush")},Le.prototype.partialFlush=function(){return this.flushStream("partialFlush")},Le.prototype.reset=function(){this.latestDts_=null,this.ignoreNextEqualDts_=!1,this.numSameDts_=0,this.activeCea608Channel_=[null,null],this.ccStreams_.forEach((function(e){e.reset()}))},Le.prototype.dispatchCea608Packet=function(e){this.setsTextOrXDSActive(e)?this.activeCea608Channel_[e.type]=null:this.setsChannel1Active(e)?this.activeCea608Channel_[e.type]=0:this.setsChannel2Active(e)&&(this.activeCea608Channel_[e.type]=1),null!==this.activeCea608Channel_[e.type]&&this.ccStreams_[(e.type<<1)+this.activeCea608Channel_[e.type]].push(e)},Le.prototype.setsChannel1Active=function(e){return 4096==(30720&e.ccData)},Le.prototype.setsChannel2Active=function(e){return 6144==(30720&e.ccData)},Le.prototype.setsTextOrXDSActive=function(e){return 256==(28928&e.ccData)||4138==(30974&e.ccData)||6186==(30974&e.ccData)};var De={42:225,92:233,94:237,95:243,96:250,123:231,124:247,125:209,126:241,127:9608,304:174,305:176,306:189,307:191,308:8482,309:162,310:163,311:9834,312:224,313:160,314:232,315:226,316:234,317:238,318:244,319:251,544:193,545:201,546:211,547:218,548:220,549:252,550:8216,551:161,552:42,553:39,554:8212,555:169,556:8480,557:8226,558:8220,559:8221,560:192,561:194,562:199,563:200,564:202,565:203,566:235,567:206,568:207,569:239,570:212,571:217,572:249,573:219,574:171,575:187,800:195,801:227,802:205,803:204,804:236,805:210,806:242,807:213,808:245,809:123,810:125,811:92,812:94,813:95,814:124,815:126,816:196,817:228,818:214,819:246,820:223,821:165,822:164,823:9474,824:197,825:229,826:216,827:248,828:9484,829:9488,830:9492,831:9496},Me=function(e){return null===e?"":(e=De[e]||e,String.fromCharCode(e))},Ne=[4352,4384,4608,4640,5376,5408,5632,5664,5888,5920,4096,4864,4896,5120,5152],Re=function(){for(var e=[],t=15;t--;)e.push("");return e},Ue=function e(t,i){e.prototype.init.call(this),this.field_=t||0,this.dataChannel_=i||0,this.name_="CC"+(1+(this.field_<<1|this.dataChannel_)),this.setConstants(),this.reset(),this.push=function(e){var t,i,n,r,a;if((t=32639&e.ccData)!==this.lastControlCode_){if(4096==(61440&t)?this.lastControlCode_=t:t!==this.PADDING_&&(this.lastControlCode_=null),n=t>>>8,r=255&t,t!==this.PADDING_)if(t===this.RESUME_CAPTION_LOADING_)this.mode_="popOn";else if(t===this.END_OF_CAPTION_)this.mode_="popOn",this.clearFormatting(e.pts),this.flushDisplayed(e.pts),i=this.displayed_,this.displayed_=this.nonDisplayed_,this.nonDisplayed_=i,this.startPts_=e.pts;else if(t===this.ROLL_UP_2_ROWS_)this.rollUpRows_=2,this.setRollUp(e.pts);else if(t===this.ROLL_UP_3_ROWS_)this.rollUpRows_=3,this.setRollUp(e.pts);else if(t===this.ROLL_UP_4_ROWS_)this.rollUpRows_=4,this.setRollUp(e.pts);else if(t===this.CARRIAGE_RETURN_)this.clearFormatting(e.pts),this.flushDisplayed(e.pts),this.shiftRowsUp_(),this.startPts_=e.pts;else if(t===this.BACKSPACE_)"popOn"===this.mode_?this.nonDisplayed_[this.row_]=this.nonDisplayed_[this.row_].slice(0,-1):this.displayed_[this.row_]=this.displayed_[this.row_].slice(0,-1);else if(t===this.ERASE_DISPLAYED_MEMORY_)this.flushDisplayed(e.pts),this.displayed_=Re();else if(t===this.ERASE_NON_DISPLAYED_MEMORY_)this.nonDisplayed_=Re();else if(t===this.RESUME_DIRECT_CAPTIONING_)"paintOn"!==this.mode_&&(this.flushDisplayed(e.pts),this.displayed_=Re()),this.mode_="paintOn",this.startPts_=e.pts;else if(this.isSpecialCharacter(n,r))a=Me((n=(3&n)<<8)|r),this[this.mode_](e.pts,a),this.column_++;else if(this.isExtCharacter(n,r))"popOn"===this.mode_?this.nonDisplayed_[this.row_]=this.nonDisplayed_[this.row_].slice(0,-1):this.displayed_[this.row_]=this.displayed_[this.row_].slice(0,-1),a=Me((n=(3&n)<<8)|r),this[this.mode_](e.pts,a),this.column_++;else if(this.isMidRowCode(n,r))this.clearFormatting(e.pts),this[this.mode_](e.pts," "),this.column_++,14==(14&r)&&this.addFormatting(e.pts,["i"]),1==(1&r)&&this.addFormatting(e.pts,["u"]);else if(this.isOffsetControlCode(n,r))this.column_+=3&r;else if(this.isPAC(n,r)){var s=Ne.indexOf(7968&t);"rollUp"===this.mode_&&(s-this.rollUpRows_+1<0&&(s=this.rollUpRows_-1),this.setRollUp(e.pts,s)),s!==this.row_&&(this.clearFormatting(e.pts),this.row_=s),1&r&&-1===this.formatting_.indexOf("u")&&this.addFormatting(e.pts,["u"]),16==(16&t)&&(this.column_=4*((14&t)>>1)),this.isColorPAC(r)&&14==(14&r)&&this.addFormatting(e.pts,["i"])}else this.isNormalChar(n)&&(0===r&&(r=null),a=Me(n),a+=Me(r),this[this.mode_](e.pts,a),this.column_+=a.length)}else this.lastControlCode_=null}};Ue.prototype=new V,Ue.prototype.flushDisplayed=function(e){var t=this.displayed_.map((function(e){try{return e.trim()}catch(e){return console.error("Skipping malformed caption."),""}})).join("\n").replace(/^\n+|\n+$/g,"");t.length&&this.trigger("data",{startPts:this.startPts_,endPts:e,text:t,stream:this.name_})},Ue.prototype.reset=function(){this.mode_="popOn",this.topRow_=0,this.startPts_=0,this.displayed_=Re(),this.nonDisplayed_=Re(),this.lastControlCode_=null,this.column_=0,this.row_=14,this.rollUpRows_=2,this.formatting_=[]},Ue.prototype.setConstants=function(){0===this.dataChannel_?(this.BASE_=16,this.EXT_=17,this.CONTROL_=(20|this.field_)<<8,this.OFFSET_=23):1===this.dataChannel_&&(this.BASE_=24,this.EXT_=25,this.CONTROL_=(28|this.field_)<<8,this.OFFSET_=31),this.PADDING_=0,this.RESUME_CAPTION_LOADING_=32|this.CONTROL_,this.END_OF_CAPTION_=47|this.CONTROL_,this.ROLL_UP_2_ROWS_=37|this.CONTROL_,this.ROLL_UP_3_ROWS_=38|this.CONTROL_,this.ROLL_UP_4_ROWS_=39|this.CONTROL_,this.CARRIAGE_RETURN_=45|this.CONTROL_,this.RESUME_DIRECT_CAPTIONING_=41|this.CONTROL_,this.BACKSPACE_=33|this.CONTROL_,this.ERASE_DISPLAYED_MEMORY_=44|this.CONTROL_,this.ERASE_NON_DISPLAYED_MEMORY_=46|this.CONTROL_},Ue.prototype.isSpecialCharacter=function(e,t){return e===this.EXT_&&t>=48&&t<=63},Ue.prototype.isExtCharacter=function(e,t){return(e===this.EXT_+1||e===this.EXT_+2)&&t>=32&&t<=63},Ue.prototype.isMidRowCode=function(e,t){return e===this.EXT_&&t>=32&&t<=47},Ue.prototype.isOffsetControlCode=function(e,t){return e===this.OFFSET_&&t>=33&&t<=35},Ue.prototype.isPAC=function(e,t){return e>=this.BASE_&&e<this.BASE_+8&&t>=64&&t<=127},Ue.prototype.isColorPAC=function(e){return e>=64&&e<=79||e>=96&&e<=127},Ue.prototype.isNormalChar=function(e){return e>=32&&e<=127},Ue.prototype.setRollUp=function(e,t){if("rollUp"!==this.mode_&&(this.row_=14,this.mode_="rollUp",this.flushDisplayed(e),this.nonDisplayed_=Re(),this.displayed_=Re()),void 0!==t&&t!==this.row_)for(var i=0;i<this.rollUpRows_;i++)this.displayed_[t-i]=this.displayed_[this.row_-i],this.displayed_[this.row_-i]="";void 0===t&&(t=this.row_),this.topRow_=t-this.rollUpRows_+1},Ue.prototype.addFormatting=function(e,t){this.formatting_=this.formatting_.concat(t);var i=t.reduce((function(e,t){return e+"<"+t+">"}),"");this[this.mode_](e,i)},Ue.prototype.clearFormatting=function(e){if(this.formatting_.length){var t=this.formatting_.reverse().reduce((function(e,t){return e+"</"+t+">"}),"");this.formatting_=[],this[this.mode_](e,t)}},Ue.prototype.popOn=function(e,t){var i=this.nonDisplayed_[this.row_];i+=t,this.nonDisplayed_[this.row_]=i},Ue.prototype.rollUp=function(e,t){var i=this.displayed_[this.row_];i+=t,this.displayed_[this.row_]=i},Ue.prototype.shiftRowsUp_=function(){var e;for(e=0;e<this.topRow_;e++)this.displayed_[e]="";for(e=this.row_+1;e<15;e++)this.displayed_[e]="";for(e=this.topRow_;e<this.row_;e++)this.displayed_[e]=this.displayed_[e+1];this.displayed_[this.row_]=""},Ue.prototype.paintOn=function(e,t){var i=this.displayed_[this.row_];i+=t,this.displayed_[this.row_]=i};var ze={CaptionStream:Le,Cea608Stream:Ue},Fe={H264_STREAM_TYPE:27,ADTS_STREAM_TYPE:15,METADATA_STREAM_TYPE:21},Be=function(e,t){var i=1;for(e>t&&(i=-1);Math.abs(t-e)>4294967296;)e+=8589934592*i;return e},Ve=function e(t){var i,n;e.prototype.init.call(this),this.type_=t||"shared",this.push=function(e){"shared"!==this.type_&&e.type!==this.type_||(void 0===n&&(n=e.dts),e.dts=Be(e.dts,n),e.pts=Be(e.pts,n),i=e.dts,this.trigger("data",e))},this.flush=function(){n=i,this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")},this.discontinuity=function(){n=void 0,i=void 0},this.reset=function(){this.discontinuity(),this.trigger("reset")}};Ve.prototype=new V;var He,qe=Ve,We=function(e,t,i){var n,r="";for(n=t;n<i;n++)r+="%"+("00"+e[n].toString(16)).slice(-2);return r},Ge=function(e,t,i){return decodeURIComponent(We(e,t,i))},Xe=function(e){return e[0]<<21|e[1]<<14|e[2]<<7|e[3]},Ke={TXXX:function(e){var t;if(3===e.data[0]){for(t=1;t<e.data.length;t++)if(0===e.data[t]){e.description=Ge(e.data,1,t),e.value=Ge(e.data,t+1,e.data.length).replace(/\0*$/,"");break}e.data=e.value}},WXXX:function(e){var t;if(3===e.data[0])for(t=1;t<e.data.length;t++)if(0===e.data[t]){e.description=Ge(e.data,1,t),e.url=Ge(e.data,t+1,e.data.length);break}},PRIV:function(e){var t,i;for(t=0;t<e.data.length;t++)if(0===e.data[t]){e.owner=(i=e.data,unescape(We(i,0,t)));break}e.privateData=e.data.subarray(t+1),e.data=e.privateData}};(He=function(e){var t,i={debug:!(!e||!e.debug),descriptor:e&&e.descriptor},n=0,r=[],a=0;if(He.prototype.init.call(this),this.dispatchType=Fe.METADATA_STREAM_TYPE.toString(16),i.descriptor)for(t=0;t<i.descriptor.length;t++)this.dispatchType+=("00"+i.descriptor[t].toString(16)).slice(-2);this.push=function(e){var t,s,o,l,u;if("timed-metadata"===e.type)if(e.dataAlignmentIndicator&&(a=0,r.length=0),0===r.length&&(e.data.length<10||e.data[0]!=="I".charCodeAt(0)||e.data[1]!=="D".charCodeAt(0)||e.data[2]!=="3".charCodeAt(0)))i.debug&&console.log("Skipping unrecognized metadata packet");else if(r.push(e),a+=e.data.byteLength,1===r.length&&(n=Xe(e.data.subarray(6,10)),n+=10),!(a<n)){for(t={data:new Uint8Array(n),frames:[],pts:r[0].pts,dts:r[0].dts},u=0;u<n;)t.data.set(r[0].data.subarray(0,n-u),u),u+=r[0].data.byteLength,a-=r[0].data.byteLength,r.shift();s=10,64&t.data[5]&&(s+=4,s+=Xe(t.data.subarray(10,14)),n-=Xe(t.data.subarray(16,20)));do{if((o=Xe(t.data.subarray(s+4,s+8)))<1)return console.log("Malformed ID3 frame encountered. Skipping metadata parsing.");if((l={id:String.fromCharCode(t.data[s],t.data[s+1],t.data[s+2],t.data[s+3]),data:t.data.subarray(s+10,s+o+10)}).key=l.id,Ke[l.id]&&(Ke[l.id](l),"com.apple.streaming.transportStreamTimestamp"===l.owner)){var c=l.data,d=(1&c[3])<<30|c[4]<<22|c[5]<<14|c[6]<<6|c[7]>>>2;d*=4,d+=3&c[7],l.timeStamp=d,void 0===t.pts&&void 0===t.dts&&(t.pts=l.timeStamp,t.dts=l.timeStamp),this.trigger("timestamp",l)}t.frames.push(l),s+=10,s+=o}while(s<n);this.trigger("data",t)}}}).prototype=new V;var Ye,Qe,Je,Ze=He,$e=qe;(Ye=function(){var e=new Uint8Array(188),t=0;Ye.prototype.init.call(this),this.push=function(i){var n,r=0,a=188;for(t?((n=new Uint8Array(i.byteLength+t)).set(e.subarray(0,t)),n.set(i,t),t=0):n=i;a<n.byteLength;)71!==n[r]||71!==n[a]?(r++,a++):(this.trigger("data",n.subarray(r,a)),r+=188,a+=188);r<n.byteLength&&(e.set(n.subarray(r),0),t=n.byteLength-r)},this.flush=function(){188===t&&71===e[0]&&(this.trigger("data",e),t=0),this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")},this.reset=function(){t=0,this.trigger("reset")}}).prototype=new V,(Qe=function(){var e,t,i,n;Qe.prototype.init.call(this),n=this,this.packetsWaitingForPmt=[],this.programMapTable=void 0,e=function(e,n){var r=0;n.payloadUnitStartIndicator&&(r+=e[r]+1),"pat"===n.type?t(e.subarray(r),n):i(e.subarray(r),n)},t=function(e,t){t.section_number=e[7],t.last_section_number=e[8],n.pmtPid=(31&e[10])<<8|e[11],t.pmtPid=n.pmtPid},i=function(e,t){var i,r;if(1&e[5]){for(n.programMapTable={video:null,audio:null,"timed-metadata":{}},i=3+((15&e[1])<<8|e[2])-4,r=12+((15&e[10])<<8|e[11]);r<i;){var a=e[r],s=(31&e[r+1])<<8|e[r+2];a===Fe.H264_STREAM_TYPE&&null===n.programMapTable.video?n.programMapTable.video=s:a===Fe.ADTS_STREAM_TYPE&&null===n.programMapTable.audio?n.programMapTable.audio=s:a===Fe.METADATA_STREAM_TYPE&&(n.programMapTable["timed-metadata"][s]=a),r+=5+((15&e[r+3])<<8|e[r+4])}t.programMapTable=n.programMapTable}},this.push=function(t){var i={},n=4;if(i.payloadUnitStartIndicator=!!(64&t[1]),i.pid=31&t[1],i.pid<<=8,i.pid|=t[2],(48&t[3])>>>4>1&&(n+=t[n]+1),0===i.pid)i.type="pat",e(t.subarray(n),i),this.trigger("data",i);else if(i.pid===this.pmtPid)for(i.type="pmt",e(t.subarray(n),i),this.trigger("data",i);this.packetsWaitingForPmt.length;)this.processPes_.apply(this,this.packetsWaitingForPmt.shift());else void 0===this.programMapTable?this.packetsWaitingForPmt.push([t,n,i]):this.processPes_(t,n,i)},this.processPes_=function(e,t,i){i.pid===this.programMapTable.video?i.streamType=Fe.H264_STREAM_TYPE:i.pid===this.programMapTable.audio?i.streamType=Fe.ADTS_STREAM_TYPE:i.streamType=this.programMapTable["timed-metadata"][i.pid],i.type="pes",i.data=e.subarray(t),this.trigger("data",i)}}).prototype=new V,Qe.STREAM_TYPES={h264:27,adts:15},(Je=function(){var e,t=this,i={data:[],size:0},n={data:[],size:0},r={data:[],size:0},a=function(e,i,n){var r,a,s=new Uint8Array(e.size),o={type:i},l=0,u=0;if(e.data.length&&!(e.size<9)){for(o.trackId=e.data[0].pid,l=0;l<e.data.length;l++)a=e.data[l],s.set(a.data,u),u+=a.data.byteLength;var c,d,h;c=s,(d=o).packetLength=6+(c[4]<<8|c[5]),d.dataAlignmentIndicator=0!=(4&c[6]),192&(h=c[7])&&(d.pts=(14&c[9])<<27|(255&c[10])<<20|(254&c[11])<<12|(255&c[12])<<5|(254&c[13])>>>3,d.pts*=4,d.pts+=(6&c[13])>>>1,d.dts=d.pts,64&h&&(d.dts=(14&c[14])<<27|(255&c[15])<<20|(254&c[16])<<12|(255&c[17])<<5|(254&c[18])>>>3,d.dts*=4,d.dts+=(6&c[18])>>>1)),d.data=c.subarray(9+c[8]),r="video"===i||o.packetLength<=e.size,(n||r)&&(e.size=0,e.data.length=0),r&&t.trigger("data",o)}};Je.prototype.init.call(this),this.push=function(s){({pat:function(){},pes:function(){var e,t;switch(s.streamType){case Fe.H264_STREAM_TYPE:e=i,t="video";break;case Fe.ADTS_STREAM_TYPE:e=n,t="audio";break;case Fe.METADATA_STREAM_TYPE:e=r,t="timed-metadata";break;default:return}s.payloadUnitStartIndicator&&a(e,t,!0),e.data.push(s),e.size+=s.data.byteLength},pmt:function(){var i={type:"metadata",tracks:[]};null!==(e=s.programMapTable).video&&i.tracks.push({timelineStartInfo:{baseMediaDecodeTime:0},id:+e.video,codec:"avc",type:"video"}),null!==e.audio&&i.tracks.push({timelineStartInfo:{baseMediaDecodeTime:0},id:+e.audio,codec:"adts",type:"audio"}),t.trigger("data",i)}})[s.type]()},this.reset=function(){i.size=0,i.data.length=0,n.size=0,n.data.length=0,this.trigger("reset")},this.flushStreams_=function(){a(i,"video"),a(n,"audio"),a(r,"timed-metadata")},this.flush=function(){this.flushStreams_(),this.trigger("done")}}).prototype=new V;var et={PAT_PID:0,MP2T_PACKET_LENGTH:188,TransportPacketStream:Ye,TransportParseStream:Qe,ElementaryStream:Je,TimestampRolloverStream:$e,CaptionStream:ze.CaptionStream,Cea608Stream:ze.Cea608Stream,MetadataStream:Ze};for(var tt in Fe)Fe.hasOwnProperty(tt)&&(et[tt]=Fe[tt]);var it,nt=et,rt=pe,at=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];(it=function(e){var t,i=0;it.prototype.init.call(this),this.push=function(n){var r,a,s,o,l,u,c=0;if(e||(i=0),"audio"===n.type)for(t?(o=t,(t=new Uint8Array(o.byteLength+n.data.byteLength)).set(o),t.set(n.data,o.byteLength)):t=n.data;c+5<t.length;)if(255===t[c]&&240==(246&t[c+1])){if(a=2*(1&~t[c+1]),r=(3&t[c+3])<<11|t[c+4]<<3|(224&t[c+5])>>5,u=(l=1024*(1+(3&t[c+6])))*rt/at[(60&t[c+2])>>>2],s=c+r,t.byteLength<s)return;if(this.trigger("data",{pts:n.pts+i*u,dts:n.dts+i*u,sampleCount:l,audioobjecttype:1+(t[c+2]>>>6&3),channelcount:(1&t[c+2])<<2|(192&t[c+3])>>>6,samplerate:at[(60&t[c+2])>>>2],samplingfrequencyindex:(60&t[c+2])>>>2,samplesize:16,data:t.subarray(c+7+a,s)}),i++,t.byteLength===s)return void(t=void 0);t=t.subarray(s)}else c++},this.flush=function(){i=0,this.trigger("done")},this.reset=function(){t=void 0,this.trigger("reset")},this.endTimeline=function(){t=void 0,this.trigger("endedtimeline")}}).prototype=new V;var st,ot,lt,ut=it,ct=function(e){var t=e.byteLength,i=0,n=0;this.length=function(){return 8*t},this.bitsAvailable=function(){return 8*t+n},this.loadWord=function(){var r=e.byteLength-t,a=new Uint8Array(4),s=Math.min(4,t);if(0===s)throw new Error("no bytes available");a.set(e.subarray(r,r+s)),i=new DataView(a.buffer).getUint32(0),n=8*s,t-=s},this.skipBits=function(e){var r;n>e?(i<<=e,n-=e):(e-=n,e-=8*(r=Math.floor(e/8)),t-=r,this.loadWord(),i<<=e,n-=e)},this.readBits=function(e){var r=Math.min(n,e),a=i>>>32-r;return(n-=r)>0?i<<=r:t>0&&this.loadWord(),(r=e-r)>0?a<<r|this.readBits(r):a},this.skipLeadingZeros=function(){var e;for(e=0;e<n;++e)if(0!=(i&2147483648>>>e))return i<<=e,n-=e,e;return this.loadWord(),e+this.skipLeadingZeros()},this.skipUnsignedExpGolomb=function(){this.skipBits(1+this.skipLeadingZeros())},this.skipExpGolomb=function(){this.skipBits(1+this.skipLeadingZeros())},this.readUnsignedExpGolomb=function(){var e=this.skipLeadingZeros();return this.readBits(e+1)-1},this.readExpGolomb=function(){var e=this.readUnsignedExpGolomb();return 1&e?1+e>>>1:-1*(e>>>1)},this.readBoolean=function(){return 1===this.readBits(1)},this.readUnsignedByte=function(){return this.readBits(8)},this.loadWord()};(ot=function(){var e,t,i=0;ot.prototype.init.call(this),this.push=function(n){var r;t?((r=new Uint8Array(t.byteLength+n.data.byteLength)).set(t),r.set(n.data,t.byteLength),t=r):t=n.data;for(var a=t.byteLength;i<a-3;i++)if(1===t[i+2]){e=i+5;break}for(;e<a;)switch(t[e]){case 0:if(0!==t[e-1]){e+=2;break}if(0!==t[e-2]){e++;break}i+3!==e-2&&this.trigger("data",t.subarray(i+3,e-2));do{e++}while(1!==t[e]&&e<a);i=e-2,e+=3;break;case 1:if(0!==t[e-1]||0!==t[e-2]){e+=3;break}this.trigger("data",t.subarray(i+3,e-2)),i=e-2,e+=3;break;default:e+=3}t=t.subarray(i),e-=i,i=0},this.reset=function(){t=null,i=0,this.trigger("reset")},this.flush=function(){t&&t.byteLength>3&&this.trigger("data",t.subarray(i+3)),t=null,i=0,this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")}}).prototype=new V,lt={100:!0,110:!0,122:!0,244:!0,44:!0,83:!0,86:!0,118:!0,128:!0,138:!0,139:!0,134:!0},(st=function(){var e,t,i,n,r,a,s,o=new ot;st.prototype.init.call(this),e=this,this.push=function(e){"video"===e.type&&(t=e.trackId,i=e.pts,n=e.dts,o.push(e))},o.on("data",(function(s){var o={trackId:t,pts:i,dts:n,data:s};switch(31&s[0]){case 5:o.nalUnitType="slice_layer_without_partitioning_rbsp_idr";break;case 6:o.nalUnitType="sei_rbsp",o.escapedRBSP=r(s.subarray(1));break;case 7:o.nalUnitType="seq_parameter_set_rbsp",o.escapedRBSP=r(s.subarray(1)),o.config=a(o.escapedRBSP);break;case 8:o.nalUnitType="pic_parameter_set_rbsp";break;case 9:o.nalUnitType="access_unit_delimiter_rbsp"}e.trigger("data",o)})),o.on("done",(function(){e.trigger("done")})),o.on("partialdone",(function(){e.trigger("partialdone")})),o.on("reset",(function(){e.trigger("reset")})),o.on("endedtimeline",(function(){e.trigger("endedtimeline")})),this.flush=function(){o.flush()},this.partialFlush=function(){o.partialFlush()},this.reset=function(){o.reset()},this.endTimeline=function(){o.endTimeline()},s=function(e,t){var i,n=8,r=8;for(i=0;i<e;i++)0!==r&&(r=(n+t.readExpGolomb()+256)%256),n=0===r?n:r},r=function(e){for(var t,i,n=e.byteLength,r=[],a=1;a<n-2;)0===e[a]&&0===e[a+1]&&3===e[a+2]?(r.push(a+2),a+=2):a++;if(0===r.length)return e;t=n-r.length,i=new Uint8Array(t);var s=0;for(a=0;a<t;s++,a++)s===r[0]&&(s++,r.shift()),i[a]=e[s];return i},a=function(e){var t,i,n,r,a,o,l,u,c,d,h,p,f,m=0,g=0,v=0,y=0,_=1;if(i=(t=new ct(e)).readUnsignedByte(),r=t.readUnsignedByte(),n=t.readUnsignedByte(),t.skipUnsignedExpGolomb(),lt[i]&&(3===(a=t.readUnsignedExpGolomb())&&t.skipBits(1),t.skipUnsignedExpGolomb(),t.skipUnsignedExpGolomb(),t.skipBits(1),t.readBoolean()))for(h=3!==a?8:12,f=0;f<h;f++)t.readBoolean()&&s(f<6?16:64,t);if(t.skipUnsignedExpGolomb(),0===(o=t.readUnsignedExpGolomb()))t.readUnsignedExpGolomb();else if(1===o)for(t.skipBits(1),t.skipExpGolomb(),t.skipExpGolomb(),l=t.readUnsignedExpGolomb(),f=0;f<l;f++)t.skipExpGolomb();if(t.skipUnsignedExpGolomb(),t.skipBits(1),u=t.readUnsignedExpGolomb(),c=t.readUnsignedExpGolomb(),0===(d=t.readBits(1))&&t.skipBits(1),t.skipBits(1),t.readBoolean()&&(m=t.readUnsignedExpGolomb(),g=t.readUnsignedExpGolomb(),v=t.readUnsignedExpGolomb(),y=t.readUnsignedExpGolomb()),t.readBoolean()&&t.readBoolean()){switch(t.readUnsignedByte()){case 1:p=[1,1];break;case 2:p=[12,11];break;case 3:p=[10,11];break;case 4:p=[16,11];break;case 5:p=[40,33];break;case 6:p=[24,11];break;case 7:p=[20,11];break;case 8:p=[32,11];break;case 9:p=[80,33];break;case 10:p=[18,11];break;case 11:p=[15,11];break;case 12:p=[64,33];break;case 13:p=[160,99];break;case 14:p=[4,3];break;case 15:p=[3,2];break;case 16:p=[2,1];break;case 255:p=[t.readUnsignedByte()<<8|t.readUnsignedByte(),t.readUnsignedByte()<<8|t.readUnsignedByte()]}p&&(_=p[0]/p[1])}return{profileIdc:i,levelIdc:n,profileCompatibility:r,width:Math.ceil((16*(u+1)-2*m-2*g)*_),height:(2-d)*(c+1)*16-2*v-2*y,sarRatio:p}}}).prototype=new V;var dt,ht={H264Stream:st,NalByteStream:ot},pt=function(e,t){var i=e[t+6]<<21|e[t+7]<<14|e[t+8]<<7|e[t+9];return i=i>=0?i:0,(16&e[t+5])>>4?i+20:i+10},ft=function(e){var t=function e(t,i){return t.length-i<10||t[i]!=="I".charCodeAt(0)||t[i+1]!=="D".charCodeAt(0)||t[i+2]!=="3".charCodeAt(0)?i:e(t,i+=pt(t,i))}(e,0);return e.length>=t+2&&255==(255&e[t])&&240==(240&e[t+1])&&16==(22&e[t+1])},mt=pt,gt=function(e,t){var i=(224&e[t+5])>>5,n=e[t+4]<<3;return 6144&e[t+3]|n|i};(dt=function(){var e=new Uint8Array,t=0;dt.prototype.init.call(this),this.setTimestamp=function(e){t=e},this.push=function(i){var n,r,a,s,o=0,l=0;for(e.length?(s=e.length,(e=new Uint8Array(i.byteLength+s)).set(e.subarray(0,s)),e.set(i,s)):e=i;e.length-l>=3;)if(e[l]!=="I".charCodeAt(0)||e[l+1]!=="D".charCodeAt(0)||e[l+2]!=="3".charCodeAt(0))if(255!=(255&e[l])||240!=(240&e[l+1]))l++;else{if(e.length-l<7)break;if(l+(o=gt(e,l))>e.length)break;a={type:"audio",data:e.subarray(l,l+o),pts:t,dts:t},this.trigger("data",a),l+=o}else{if(e.length-l<10)break;if(l+(o=mt(e,l))>e.length)break;r={type:"timed-metadata",data:e.subarray(l,l+o)},this.trigger("data",r),l+=o}n=e.length-l,e=n>0?e.subarray(l):new Uint8Array},this.reset=function(){e=new Uint8Array,this.trigger("reset")},this.endTimeline=function(){e=new Uint8Array,this.trigger("endedtimeline")}}).prototype=new V;var vt,yt,_t,bt,Tt=dt,St=["audioobjecttype","channelcount","samplerate","samplingfrequencyindex","samplesize"],jt=["width","height","profileIdc","levelIdc","profileCompatibility","sarRatio"],kt=ht.H264Stream,Ct=ft,wt=pe,Et=function(e,t){var i;if(e.length!==t.length)return!1;for(i=0;i<e.length;i++)if(e[i]!==t[i])return!1;return!0},At=function(e,t,i,n,r,a){return{start:{dts:e,pts:e+(i-t)},end:{dts:e+(n-t),pts:e+(r-i)},prependedContentDuration:a,baseMediaDecodeTime:e}};(yt=function(e,t){var i=[],n=0,r=0,a=0,s=1/0;t=t||{},yt.prototype.init.call(this),this.push=function(t){Ee(e,t),e&&St.forEach((function(i){e[i]=t[i]})),i.push(t)},this.setEarliestDts=function(e){r=e},this.setVideoBaseMediaDecodeTime=function(e){s=e},this.setAudioAppendStart=function(e){a=e},this.flush=function(){var o,l,u,c,d;0!==i.length?(o=Te(i,e,r),e.baseMediaDecodeTime=we(e,t.keepOriginalTimestamps),be(e,o,a,s),e.samples=Se(o),u=Z(je(o)),i=[],l=$(n,[e]),c=new Uint8Array(l.byteLength+u.byteLength),n++,c.set(l),c.set(u,l.byteLength),Ce(e),d=Math.ceil(1024*wt/e.samplerate),o.length&&this.trigger("timingInfo",{start:o[0].pts,end:o[0].pts+o.length*d}),this.trigger("data",{track:e,boxes:c}),this.trigger("done","AudioSegmentStream")):this.trigger("done","AudioSegmentStream")},this.reset=function(){Ce(e),i=[],this.trigger("reset")}}).prototype=new V,(vt=function(e,t){var i,n,r=0,a=[],s=[];t=t||{},vt.prototype.init.call(this),delete e.minPTS,this.gopCache_=[],this.push=function(t){Ee(e,t),"seq_parameter_set_rbsp"!==t.nalUnitType||i||(i=t.config,e.sps=[t.data],jt.forEach((function(t){e[t]=i[t]}),this)),"pic_parameter_set_rbsp"!==t.nalUnitType||n||(n=t.data,e.pps=[t.data]),a.push(t)},this.flush=function(){for(var i,n,o,l,u,c,d,h,p=0;a.length&&"access_unit_delimiter_rbsp"!==a[0].nalUnitType;)a.shift();if(0===a.length)return this.resetStream_(),void this.trigger("done","VideoSegmentStream");if(i=ie(a),(o=ne(i))[0][0].keyFrame||((n=this.getGopForFusion_(a[0],e))?(p=n.duration,o.unshift(n),o.byteLength+=n.byteLength,o.nalCount+=n.nalCount,o.pts=n.pts,o.dts=n.dts,o.duration+=n.duration):o=re(o)),s.length){var f;if(!(f=t.alignGopsAtEnd?this.alignGopsAtEnd_(o):this.alignGopsAtStart_(o)))return this.gopCache_.unshift({gop:o.pop(),pps:e.pps,sps:e.sps}),this.gopCache_.length=Math.min(6,this.gopCache_.length),a=[],this.resetStream_(),void this.trigger("done","VideoSegmentStream");Ce(e),o=f}Ee(e,o),e.samples=ae(o),u=Z(se(o)),e.baseMediaDecodeTime=we(e,t.keepOriginalTimestamps),this.trigger("processedGopsInfo",o.map((function(e){return{pts:e.pts,dts:e.dts,byteLength:e.byteLength}}))),d=o[0],h=o[o.length-1],this.trigger("segmentTimingInfo",At(e.baseMediaDecodeTime,d.dts,d.pts,h.dts+h.duration,h.pts+h.duration,p)),this.trigger("timingInfo",{start:o[0].pts,end:o[o.length-1].pts+o[o.length-1].duration}),this.gopCache_.unshift({gop:o.pop(),pps:e.pps,sps:e.sps}),this.gopCache_.length=Math.min(6,this.gopCache_.length),a=[],this.trigger("baseMediaDecodeTime",e.baseMediaDecodeTime),this.trigger("timelineStartInfo",e.timelineStartInfo),l=$(r,[e]),c=new Uint8Array(l.byteLength+u.byteLength),r++,c.set(l),c.set(u,l.byteLength),this.trigger("data",{track:e,boxes:c}),this.resetStream_(),this.trigger("done","VideoSegmentStream")},this.reset=function(){this.resetStream_(),a=[],this.gopCache_.length=0,s.length=0,this.trigger("reset")},this.resetStream_=function(){Ce(e),i=void 0,n=void 0},this.getGopForFusion_=function(t){var i,n,r,a,s,o=1/0;for(s=0;s<this.gopCache_.length;s++)r=(a=this.gopCache_[s]).gop,e.pps&&Et(e.pps[0],a.pps[0])&&e.sps&&Et(e.sps[0],a.sps[0])&&(r.dts<e.timelineStartInfo.dts||(i=t.dts-r.dts-r.duration)>=-1e4&&i<=45e3&&(!n||o>i)&&(n=a,o=i));return n?n.gop:null},this.alignGopsAtStart_=function(e){var t,i,n,r,a,o,l,u;for(a=e.byteLength,o=e.nalCount,l=e.duration,t=i=0;t<s.length&&i<e.length&&(n=s[t],r=e[i],n.pts!==r.pts);)r.pts>n.pts?t++:(i++,a-=r.byteLength,o-=r.nalCount,l-=r.duration);return 0===i?e:i===e.length?null:((u=e.slice(i)).byteLength=a,u.duration=l,u.nalCount=o,u.pts=u[0].pts,u.dts=u[0].dts,u)},this.alignGopsAtEnd_=function(e){var t,i,n,r,a,o,l;for(t=s.length-1,i=e.length-1,a=null,o=!1;t>=0&&i>=0;){if(n=s[t],r=e[i],n.pts===r.pts){o=!0;break}n.pts>r.pts?t--:(t===s.length-1&&(a=i),i--)}if(!o&&null===a)return null;if(0===(l=o?i:a))return e;var u=e.slice(l),c=u.reduce((function(e,t){return e.byteLength+=t.byteLength,e.duration+=t.duration,e.nalCount+=t.nalCount,e}),{byteLength:0,duration:0,nalCount:0});return u.byteLength=c.byteLength,u.duration=c.duration,u.nalCount=c.nalCount,u.pts=u[0].pts,u.dts=u[0].dts,u},this.alignGopsWith=function(e){s=e}}).prototype=new V,(bt=function(e,t){this.numberOfTracks=0,this.metadataStream=t,void 0!==(e=e||{}).remux?this.remuxTracks=!!e.remux:this.remuxTracks=!0,"boolean"==typeof e.keepOriginalTimestamps?this.keepOriginalTimestamps=e.keepOriginalTimestamps:this.keepOriginalTimestamps=!1,this.pendingTracks=[],this.videoTrack=null,this.pendingBoxes=[],this.pendingCaptions=[],this.pendingMetadata=[],this.pendingBytes=0,this.emittedTracks=0,bt.prototype.init.call(this),this.push=function(e){return e.text?this.pendingCaptions.push(e):e.frames?this.pendingMetadata.push(e):(this.pendingTracks.push(e.track),this.pendingBytes+=e.boxes.byteLength,"video"===e.track.type&&(this.videoTrack=e.track,this.pendingBoxes.push(e.boxes)),void("audio"===e.track.type&&(this.audioTrack=e.track,this.pendingBoxes.unshift(e.boxes))))}}).prototype=new V,bt.prototype.flush=function(e){var t,i,n,r,a=0,s={captions:[],captionStreams:{},metadata:[],info:{}},o=0;if(this.pendingTracks.length<this.numberOfTracks){if("VideoSegmentStream"!==e&&"AudioSegmentStream"!==e)return;if(this.remuxTracks)return;if(0===this.pendingTracks.length)return this.emittedTracks++,void(this.emittedTracks>=this.numberOfTracks&&(this.trigger("done"),this.emittedTracks=0))}if(this.videoTrack?(o=this.videoTrack.timelineStartInfo.pts,jt.forEach((function(e){s.info[e]=this.videoTrack[e]}),this)):this.audioTrack&&(o=this.audioTrack.timelineStartInfo.pts,St.forEach((function(e){s.info[e]=this.audioTrack[e]}),this)),this.videoTrack||this.audioTrack){for(1===this.pendingTracks.length?s.type=this.pendingTracks[0].type:s.type="combined",this.emittedTracks+=this.pendingTracks.length,n=ee(this.pendingTracks),s.initSegment=new Uint8Array(n.byteLength),s.initSegment.set(n),s.data=new Uint8Array(this.pendingBytes),r=0;r<this.pendingBoxes.length;r++)s.data.set(this.pendingBoxes[r],a),a+=this.pendingBoxes[r].byteLength;for(r=0;r<this.pendingCaptions.length;r++)(t=this.pendingCaptions[r]).startTime=ve(t.startPts,o,this.keepOriginalTimestamps),t.endTime=ve(t.endPts,o,this.keepOriginalTimestamps),s.captionStreams[t.stream]=!0,s.captions.push(t);for(r=0;r<this.pendingMetadata.length;r++)(i=this.pendingMetadata[r]).cueTime=ve(i.pts,o,this.keepOriginalTimestamps),s.metadata.push(i);for(s.metadata.dispatchType=this.metadataStream.dispatchType,this.pendingTracks.length=0,this.videoTrack=null,this.pendingBoxes.length=0,this.pendingCaptions.length=0,this.pendingBytes=0,this.pendingMetadata.length=0,this.trigger("data",s),r=0;r<s.captions.length;r++)t=s.captions[r],this.trigger("caption",t);for(r=0;r<s.metadata.length;r++)i=s.metadata[r],this.trigger("id3Frame",i)}this.emittedTracks>=this.numberOfTracks&&(this.trigger("done"),this.emittedTracks=0)},bt.prototype.setRemux=function(e){this.remuxTracks=e},(_t=function(e){var t,i,n=this,r=!0;_t.prototype.init.call(this),e=e||{},this.baseMediaDecodeTime=e.baseMediaDecodeTime||0,this.transmuxPipeline_={},this.setupAacPipeline=function(){var r={};this.transmuxPipeline_=r,r.type="aac",r.metadataStream=new nt.MetadataStream,r.aacStream=new Tt,r.audioTimestampRolloverStream=new nt.TimestampRolloverStream("audio"),r.timedMetadataTimestampRolloverStream=new nt.TimestampRolloverStream("timed-metadata"),r.adtsStream=new ut,r.coalesceStream=new bt(e,r.metadataStream),r.headOfPipeline=r.aacStream,r.aacStream.pipe(r.audioTimestampRolloverStream).pipe(r.adtsStream),r.aacStream.pipe(r.timedMetadataTimestampRolloverStream).pipe(r.metadataStream).pipe(r.coalesceStream),r.metadataStream.on("timestamp",(function(e){r.aacStream.setTimestamp(e.timeStamp)})),r.aacStream.on("data",(function(a){"timed-metadata"!==a.type&&"audio"!==a.type||r.audioSegmentStream||(i=i||{timelineStartInfo:{baseMediaDecodeTime:n.baseMediaDecodeTime},codec:"adts",type:"audio"},r.coalesceStream.numberOfTracks++,r.audioSegmentStream=new yt(i,e),r.audioSegmentStream.on("timingInfo",n.trigger.bind(n,"audioTimingInfo")),r.adtsStream.pipe(r.audioSegmentStream).pipe(r.coalesceStream),n.trigger("trackinfo",{hasAudio:!!i,hasVideo:!!t}))})),r.coalesceStream.on("data",this.trigger.bind(this,"data")),r.coalesceStream.on("done",this.trigger.bind(this,"done"))},this.setupTsPipeline=function(){var r={};this.transmuxPipeline_=r,r.type="ts",r.metadataStream=new nt.MetadataStream,r.packetStream=new nt.TransportPacketStream,r.parseStream=new nt.TransportParseStream,r.elementaryStream=new nt.ElementaryStream,r.timestampRolloverStream=new nt.TimestampRolloverStream,r.adtsStream=new ut,r.h264Stream=new kt,r.captionStream=new nt.CaptionStream,r.coalesceStream=new bt(e,r.metadataStream),r.headOfPipeline=r.packetStream,r.packetStream.pipe(r.parseStream).pipe(r.elementaryStream).pipe(r.timestampRolloverStream),r.timestampRolloverStream.pipe(r.h264Stream),r.timestampRolloverStream.pipe(r.adtsStream),r.timestampRolloverStream.pipe(r.metadataStream).pipe(r.coalesceStream),r.h264Stream.pipe(r.captionStream).pipe(r.coalesceStream),r.elementaryStream.on("data",(function(a){var s;if("metadata"===a.type){for(s=a.tracks.length;s--;)t||"video"!==a.tracks[s].type?i||"audio"!==a.tracks[s].type||((i=a.tracks[s]).timelineStartInfo.baseMediaDecodeTime=n.baseMediaDecodeTime):(t=a.tracks[s]).timelineStartInfo.baseMediaDecodeTime=n.baseMediaDecodeTime;t&&!r.videoSegmentStream&&(r.coalesceStream.numberOfTracks++,r.videoSegmentStream=new vt(t,e),r.videoSegmentStream.on("timelineStartInfo",(function(t){i&&!e.keepOriginalTimestamps&&(i.timelineStartInfo=t,r.audioSegmentStream.setEarliestDts(t.dts-n.baseMediaDecodeTime))})),r.videoSegmentStream.on("processedGopsInfo",n.trigger.bind(n,"gopInfo")),r.videoSegmentStream.on("segmentTimingInfo",n.trigger.bind(n,"videoSegmentTimingInfo")),r.videoSegmentStream.on("baseMediaDecodeTime",(function(e){i&&r.audioSegmentStream.setVideoBaseMediaDecodeTime(e)})),r.videoSegmentStream.on("timingInfo",n.trigger.bind(n,"videoTimingInfo")),r.h264Stream.pipe(r.videoSegmentStream).pipe(r.coalesceStream)),i&&!r.audioSegmentStream&&(r.coalesceStream.numberOfTracks++,r.audioSegmentStream=new yt(i,e),r.audioSegmentStream.on("timingInfo",n.trigger.bind(n,"audioTimingInfo")),r.adtsStream.pipe(r.audioSegmentStream).pipe(r.coalesceStream)),n.trigger("trackinfo",{hasAudio:!!i,hasVideo:!!t})}})),r.coalesceStream.on("data",this.trigger.bind(this,"data")),r.coalesceStream.on("id3Frame",(function(e){e.dispatchType=r.metadataStream.dispatchType,n.trigger("id3Frame",e)})),r.coalesceStream.on("caption",this.trigger.bind(this,"caption")),r.coalesceStream.on("done",this.trigger.bind(this,"done"))},this.setBaseMediaDecodeTime=function(n){var r=this.transmuxPipeline_;e.keepOriginalTimestamps||(this.baseMediaDecodeTime=n),i&&(i.timelineStartInfo.dts=void 0,i.timelineStartInfo.pts=void 0,Ce(i),r.audioTimestampRolloverStream&&r.audioTimestampRolloverStream.discontinuity()),t&&(r.videoSegmentStream&&(r.videoSegmentStream.gopCache_=[]),t.timelineStartInfo.dts=void 0,t.timelineStartInfo.pts=void 0,Ce(t),r.captionStream.reset()),r.timestampRolloverStream&&r.timestampRolloverStream.discontinuity()},this.setAudioAppendStart=function(e){i&&this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(e)},this.setRemux=function(t){var i=this.transmuxPipeline_;e.remux=t,i&&i.coalesceStream&&i.coalesceStream.setRemux(t)},this.alignGopsWith=function(e){t&&this.transmuxPipeline_.videoSegmentStream&&this.transmuxPipeline_.videoSegmentStream.alignGopsWith(e)},this.push=function(e){if(r){var t=Ct(e);t&&"aac"!==this.transmuxPipeline_.type?this.setupAacPipeline():t||"ts"===this.transmuxPipeline_.type||this.setupTsPipeline(),r=!1}this.transmuxPipeline_.headOfPipeline.push(e)},this.flush=function(){r=!0,this.transmuxPipeline_.headOfPipeline.flush()},this.endTimeline=function(){this.transmuxPipeline_.headOfPipeline.endTimeline()},this.reset=function(){this.transmuxPipeline_.headOfPipeline&&this.transmuxPipeline_.headOfPipeline.reset()},this.resetCaptions=function(){this.transmuxPipeline_.captionStream&&this.transmuxPipeline_.captionStream.reset()}}).prototype=new V;var xt={Transmuxer:_t,VideoSegmentStream:vt,AudioSegmentStream:yt,AUDIO_PROPERTIES:St,VIDEO_PROPERTIES:jt,generateVideoSegmentTimingInfo:At}.Transmuxer,It={Adts:ut,h264:ht},Pt=pe,Ot=function e(t,i){var n=[],r=0,a=0,s=0,o=1/0,l=null,u=null;i=i||{},e.prototype.init.call(this),this.push=function(e){Ee(t,e),t&&St.forEach((function(i){t[i]=e[i]})),n.push(e)},this.setEarliestDts=function(e){a=e},this.setVideoBaseMediaDecodeTime=function(e){o=e},this.setAudioAppendStart=function(e){s=e},this.processFrames_=function(){var e,c,d,h,p;0!==n.length&&0!==(e=Te(n,t,a)).length&&(t.baseMediaDecodeTime=we(t,i.keepOriginalTimestamps),be(t,e,s,o),t.samples=Se(e),d=Z(je(e)),n=[],c=$(r,[t]),r++,t.initSegment=ee([t]),(h=new Uint8Array(c.byteLength+d.byteLength)).set(c),h.set(d,c.byteLength),Ce(t),null===l&&(u=l=e[0].pts),u+=e.length*(1024*Pt/t.samplerate),p={start:l},this.trigger("timingInfo",p),this.trigger("data",{track:t,boxes:h}))},this.flush=function(){this.processFrames_(),this.trigger("timingInfo",{start:l,end:u}),this.resetTiming_(),this.trigger("done","AudioSegmentStream")},this.partialFlush=function(){this.processFrames_(),this.trigger("partialdone","AudioSegmentStream")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline","AudioSegmentStream")},this.resetTiming_=function(){Ce(t),l=null,u=null},this.reset=function(){this.resetTiming_(),n=[],this.trigger("reset")}};Ot.prototype=new V;var Lt=Ot,Dt=function e(t,i){var n,r,a,s=0,o=[],l=[],u=null,c=null,d=!0;i=i||{},e.prototype.init.call(this),this.push=function(e){Ee(t,e),void 0===t.timelineStartInfo.dts&&(t.timelineStartInfo.dts=e.dts),"seq_parameter_set_rbsp"!==e.nalUnitType||n||(n=e.config,t.sps=[e.data],jt.forEach((function(e){t[e]=n[e]}),this)),"pic_parameter_set_rbsp"!==e.nalUnitType||r||(r=e.data,t.pps=[e.data]),o.push(e)},this.processNals_=function(e){var n;for(o=l.concat(o);o.length&&"access_unit_delimiter_rbsp"!==o[0].nalUnitType;)o.shift();if(0!==o.length){var r=ie(o);if(r.length)if(l=r[r.length-1],e&&(r.pop(),r.duration-=l.duration,r.nalCount-=l.length,r.byteLength-=l.byteLength),r.length){if(this.trigger("timelineStartInfo",t.timelineStartInfo),d){if(!(a=ne(r))[0][0].keyFrame){if(!(a=re(a))[0][0].keyFrame)return o=[].concat.apply([],r).concat(l),void(l=[]);(r=[].concat.apply([],a)).duration=a.duration}d=!1}for(null===u&&(u=r[0].pts,c=u),c+=r.duration,this.trigger("timingInfo",{start:u,end:c}),n=0;n<r.length;n++){var h=r[n];t.samples=oe(h);var p=Z(le(h));Ce(t),Ee(t,h),t.baseMediaDecodeTime=we(t,i.keepOriginalTimestamps);var f=$(s,[t]);s++,t.initSegment=ee([t]);var m=new Uint8Array(f.byteLength+p.byteLength);m.set(f),m.set(p,f.byteLength),this.trigger("data",{track:t,boxes:m,sequence:s,videoFrameDts:h.dts,videoFramePts:h.pts})}o=[]}else o=[]}},this.resetTimingAndConfig_=function(){n=void 0,r=void 0,u=null,c=null},this.partialFlush=function(){this.processNals_(!0),this.trigger("partialdone","VideoSegmentStream")},this.flush=function(){this.processNals_(!1),this.resetTimingAndConfig_(),this.trigger("done","VideoSegmentStream")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline","VideoSegmentStream")},this.reset=function(){this.resetTimingAndConfig_(),l=[],o=[],d=!0,this.trigger("reset")}};Dt.prototype=new V;var Mt=Dt,Nt=ft,Rt=function(e){return e.prototype=new V,e.prototype.init.call(e),e},Ut=function(e,t){e.on("data",t.trigger.bind(t,"data")),e.on("done",t.trigger.bind(t,"done")),e.on("partialdone",t.trigger.bind(t,"partialdone")),e.on("endedtimeline",t.trigger.bind(t,"endedtimeline")),e.on("audioTimingInfo",t.trigger.bind(t,"audioTimingInfo")),e.on("videoTimingInfo",t.trigger.bind(t,"videoTimingInfo")),e.on("trackinfo",t.trigger.bind(t,"trackinfo")),e.on("id3Frame",(function(i){i.dispatchType=e.metadataStream.dispatchType,i.cueTime=fe(i.pts),t.trigger("id3Frame",i)})),e.on("caption",(function(e){t.trigger("caption",e)}))},zt=function e(t){var i=null,n=!0;t=t||{},e.prototype.init.call(this),t.baseMediaDecodeTime=t.baseMediaDecodeTime||0,this.push=function(e){if(n){var r=Nt(e);!r||i&&"aac"===i.type?r||i&&"ts"===i.type||(i=function(e){var t={type:"ts",tracks:{audio:null,video:null},packet:new nt.TransportPacketStream,parse:new nt.TransportParseStream,elementary:new nt.ElementaryStream,timestampRollover:new nt.TimestampRolloverStream,adts:new It.Adts,h264:new It.h264.H264Stream,captionStream:new nt.CaptionStream,metadataStream:new nt.MetadataStream};return t.headOfPipeline=t.packet,t.packet.pipe(t.parse).pipe(t.elementary).pipe(t.timestampRollover),t.timestampRollover.pipe(t.h264),t.h264.pipe(t.captionStream),t.timestampRollover.pipe(t.metadataStream),t.timestampRollover.pipe(t.adts),t.elementary.on("data",(function(i){if("metadata"===i.type){for(var n=0;n<i.tracks.length;n++)t.tracks[i.tracks[n].type]||(t.tracks[i.tracks[n].type]=i.tracks[n],t.tracks[i.tracks[n].type].timelineStartInfo.baseMediaDecodeTime=e.baseMediaDecodeTime);t.tracks.video&&!t.videoSegmentStream&&(t.videoSegmentStream=new Mt(t.tracks.video,e),t.videoSegmentStream.on("timelineStartInfo",(function(i){t.tracks.audio&&!e.keepOriginalTimestamps&&t.audioSegmentStream.setEarliestDts(i.dts-e.baseMediaDecodeTime)})),t.videoSegmentStream.on("timingInfo",t.trigger.bind(t,"videoTimingInfo")),t.videoSegmentStream.on("data",(function(e){t.trigger("data",{type:"video",data:e})})),t.videoSegmentStream.on("done",t.trigger.bind(t,"done")),t.videoSegmentStream.on("partialdone",t.trigger.bind(t,"partialdone")),t.videoSegmentStream.on("endedtimeline",t.trigger.bind(t,"endedtimeline")),t.h264.pipe(t.videoSegmentStream)),t.tracks.audio&&!t.audioSegmentStream&&(t.audioSegmentStream=new Lt(t.tracks.audio,e),t.audioSegmentStream.on("data",(function(e){t.trigger("data",{type:"audio",data:e})})),t.audioSegmentStream.on("done",t.trigger.bind(t,"done")),t.audioSegmentStream.on("partialdone",t.trigger.bind(t,"partialdone")),t.audioSegmentStream.on("endedtimeline",t.trigger.bind(t,"endedtimeline")),t.audioSegmentStream.on("timingInfo",t.trigger.bind(t,"audioTimingInfo")),t.adts.pipe(t.audioSegmentStream)),t.trigger("trackinfo",{hasAudio:!!t.tracks.audio,hasVideo:!!t.tracks.video})}})),t.captionStream.on("data",(function(i){var n;n=t.tracks.video&&t.tracks.video.timelineStartInfo.pts||0,i.startTime=ve(i.startPts,n,e.keepOriginalTimestamps),i.endTime=ve(i.endPts,n,e.keepOriginalTimestamps),t.trigger("caption",i)})),(t=Rt(t)).metadataStream.on("data",t.trigger.bind(t,"id3Frame")),t}(t),Ut(i,this)):(i=function(e){var t={type:"aac",tracks:{audio:null},metadataStream:new nt.MetadataStream,aacStream:new Tt,audioRollover:new nt.TimestampRolloverStream("audio"),timedMetadataRollover:new nt.TimestampRolloverStream("timed-metadata"),adtsStream:new ut(!0)};return t.headOfPipeline=t.aacStream,t.aacStream.pipe(t.audioRollover).pipe(t.adtsStream),t.aacStream.pipe(t.timedMetadataRollover).pipe(t.metadataStream),t.metadataStream.on("timestamp",(function(e){t.aacStream.setTimestamp(e.timeStamp)})),t.aacStream.on("data",(function(i){"timed-metadata"!==i.type&&"audio"!==i.type||t.audioSegmentStream||(t.tracks.audio=t.tracks.audio||{timelineStartInfo:{baseMediaDecodeTime:e.baseMediaDecodeTime},codec:"adts",type:"audio"},t.audioSegmentStream=new Lt(t.tracks.audio,e),t.audioSegmentStream.on("data",(function(e){t.trigger("data",{type:"audio",data:e})})),t.audioSegmentStream.on("partialdone",t.trigger.bind(t,"partialdone")),t.audioSegmentStream.on("done",t.trigger.bind(t,"done")),t.audioSegmentStream.on("endedtimeline",t.trigger.bind(t,"endedtimeline")),t.audioSegmentStream.on("timingInfo",t.trigger.bind(t,"audioTimingInfo")),t.adtsStream.pipe(t.audioSegmentStream),t.trigger("trackinfo",{hasAudio:!!t.tracks.audio,hasVideo:!!t.tracks.video}))})),(t=Rt(t)).metadataStream.on("data",t.trigger.bind(t,"id3Frame")),t}(t),Ut(i,this)),n=!1}i.headOfPipeline.push(e)},this.flush=function(){i&&(n=!0,i.headOfPipeline.flush())},this.partialFlush=function(){i&&i.headOfPipeline.partialFlush()},this.endTimeline=function(){i&&i.headOfPipeline.endTimeline()},this.reset=function(){i&&i.headOfPipeline.reset()},this.setBaseMediaDecodeTime=function(e){t.keepOriginalTimestamps||(t.baseMediaDecodeTime=e),i&&(i.tracks.audio&&(i.tracks.audio.timelineStartInfo.dts=void 0,i.tracks.audio.timelineStartInfo.pts=void 0,Ce(i.tracks.audio),i.audioRollover&&i.audioRollover.discontinuity()),i.tracks.video&&(i.videoSegmentStream&&(i.videoSegmentStream.gopCache_=[]),i.tracks.video.timelineStartInfo.dts=void 0,i.tracks.video.timelineStartInfo.pts=void 0,Ce(i.tracks.video)),i.timestampRollover&&i.timestampRollover.discontinuity())},this.setRemux=function(e){t.remux=e,i&&i.coalesceStream&&i.coalesceStream.setRemux(e)},this.setAudioAppendStart=function(e){i&&i.tracks.audio&&i.audioSegmentStream&&i.audioSegmentStream.setAudioAppendStart(e)},this.alignGopsWith=function(e){}};zt.prototype=new V;var Ft=zt,Bt=function(e){return e>>>0},Vt=function(e){var t="";return t+=String.fromCharCode(e[0]),t+=String.fromCharCode(e[1]),t+=String.fromCharCode(e[2]),t+=String.fromCharCode(e[3])},Ht=Bt,qt=function e(t,i){var n,r,a,s,o,l=[];if(!i.length)return null;for(n=0;n<t.byteLength;)r=Ht(t[n]<<24|t[n+1]<<16|t[n+2]<<8|t[n+3]),a=Vt(t.subarray(n+4,n+8)),s=r>1?n+r:t.byteLength,a===i[0]&&(1===i.length?l.push(t.subarray(n+8,s)):(o=e(t.subarray(n+8,s),i.slice(1))).length&&(l=l.concat(o))),n=s;return l},Wt=Bt,Gt=function(e){var t={version:e[0],flags:new Uint8Array(e.subarray(1,4)),baseMediaDecodeTime:Wt(e[4]<<24|e[5]<<16|e[6]<<8|e[7])};return 1===t.version&&(t.baseMediaDecodeTime*=Math.pow(2,32),t.baseMediaDecodeTime+=Wt(e[8]<<24|e[9]<<16|e[10]<<8|e[11])),t},Xt=function(e){return{isLeading:(12&e[0])>>>2,dependsOn:3&e[0],isDependedOn:(192&e[1])>>>6,hasRedundancy:(48&e[1])>>>4,paddingValue:(14&e[1])>>>1,isNonSyncSample:1&e[1],degradationPriority:e[2]<<8|e[3]}},Kt=function(e){var t,i={version:e[0],flags:new Uint8Array(e.subarray(1,4)),samples:[]},n=new DataView(e.buffer,e.byteOffset,e.byteLength),r=1&i.flags[2],a=4&i.flags[2],s=1&i.flags[1],o=2&i.flags[1],l=4&i.flags[1],u=8&i.flags[1],c=n.getUint32(4),d=8;for(r&&(i.dataOffset=n.getInt32(d),d+=4),a&&c&&(t={flags:Xt(e.subarray(d,d+4))},d+=4,s&&(t.duration=n.getUint32(d),d+=4),o&&(t.size=n.getUint32(d),d+=4),u&&(1===i.version?t.compositionTimeOffset=n.getInt32(d):t.compositionTimeOffset=n.getUint32(d),d+=4),i.samples.push(t),c--);c--;)t={},s&&(t.duration=n.getUint32(d),d+=4),o&&(t.size=n.getUint32(d),d+=4),l&&(t.flags=Xt(e.subarray(d,d+4)),d+=4),u&&(1===i.version?t.compositionTimeOffset=n.getInt32(d):t.compositionTimeOffset=n.getUint32(d),d+=4),i.samples.push(t);return i},Yt=function(e){var t,i=new DataView(e.buffer,e.byteOffset,e.byteLength),n={version:e[0],flags:new Uint8Array(e.subarray(1,4)),trackId:i.getUint32(4)},r=1&n.flags[2],a=2&n.flags[2],s=8&n.flags[2],o=16&n.flags[2],l=32&n.flags[2],u=65536&n.flags[0],c=131072&n.flags[0];return t=8,r&&(t+=4,n.baseDataOffset=i.getUint32(12),t+=4),a&&(n.sampleDescriptionIndex=i.getUint32(t),t+=4),s&&(n.defaultSampleDuration=i.getUint32(t),t+=4),o&&(n.defaultSampleSize=i.getUint32(t),t+=4),l&&(n.defaultSampleFlags=i.getUint32(t)),u&&(n.durationIsEmpty=!0),!r&&c&&(n.baseDataOffsetIsMoof=!0),n},Qt=Pe,Jt=ze.CaptionStream,Zt=function(e,t){for(var i=e,n=0;n<t.length;n++){var r=t[n];if(i<r.size)return r;i-=r.size}return null},$t=function(e,t){var i=qt(e,["moof","traf"]),n=qt(e,["mdat"]),r={},a=[];return n.forEach((function(e,t){var n=i[t];a.push({mdat:e,traf:n})})),a.forEach((function(e){var i,n=e.mdat,a=e.traf,s=qt(a,["tfhd"]),o=Yt(s[0]),l=o.trackId,u=qt(a,["tfdt"]),c=u.length>0?Gt(u[0]).baseMediaDecodeTime:0,d=qt(a,["trun"]);t===l&&d.length>0&&(i=function(e,t,i){var n,r,a,s,o=new DataView(e.buffer,e.byteOffset,e.byteLength),l=[];for(r=0;r+4<e.length;r+=a)if(a=o.getUint32(r),r+=4,!(a<=0))switch(31&e[r]){case 6:var u=e.subarray(r+1,r+1+a),c=Zt(r,t);if(n={nalUnitType:"sei_rbsp",size:a,data:u,escapedRBSP:Qt(u),trackId:i},c)n.pts=c.pts,n.dts=c.dts,s=c;else{if(!s){console.log("We've encountered a nal unit without data. See mux.js#233.");break}n.pts=s.pts,n.dts=s.dts}l.push(n)}return l}(n,function(e,t,i){var n=t,r=i.defaultSampleDuration||0,a=i.defaultSampleSize||0,s=i.trackId,o=[];return e.forEach((function(e){var t=Kt(e).samples;t.forEach((function(e){void 0===e.duration&&(e.duration=r),void 0===e.size&&(e.size=a),e.trackId=s,e.dts=n,void 0===e.compositionTimeOffset&&(e.compositionTimeOffset=0),e.pts=n+e.compositionTimeOffset,n+=e.duration})),o=o.concat(t)})),o}(d,c,o),l),r[l]||(r[l]=[]),r[l]=r[l].concat(i))})),r},ei=function(){var e,t,i,n,r,a,s=!1;this.isInitialized=function(){return s},this.init=function(t){e=new Jt,s=!0,a=!!t&&t.isPartial,e.on("data",(function(e){e.startTime=e.startPts/n,e.endTime=e.endPts/n,r.captions.push(e),r.captionStreams[e.stream]=!0}))},this.isNewInit=function(e,t){return!(e&&0===e.length||t&&"object"==typeof t&&0===Object.keys(t).length)&&(i!==e[0]||n!==t[i])},this.parse=function(e,a,s){var o;if(!this.isInitialized())return null;if(!a||!s)return null;if(this.isNewInit(a,s))i=a[0],n=s[i];else if(null===i||!n)return t.push(e),null;for(;t.length>0;){var l=t.shift();this.parse(l,a,s)}return null!==(o=function(e,t,i){return null===t?null:{seiNals:$t(e,t)[t],timescale:i}}(e,i,n))&&o.seiNals?(this.pushNals(o.seiNals),this.flushStream(),r):null},this.pushNals=function(t){if(!this.isInitialized()||!t||0===t.length)return null;t.forEach((function(t){e.push(t)}))},this.flushStream=function(){if(!this.isInitialized())return null;a?e.partialFlush():e.flush()},this.clearParsedCaptions=function(){r.captions=[],r.captionStreams={}},this.resetCaptionStream=function(){if(!this.isInitialized())return null;e.reset()},this.clearAllCaptions=function(){this.clearParsedCaptions(),this.resetCaptionStream()},this.reset=function(){t=[],i=null,n=null,r?this.clearParsedCaptions():r={captions:[],captionStreams:{}},this.resetCaptionStream()},this.reset()},ti=function(e){return"AudioSegmentStream"===e?"audio":"VideoSegmentStream"===e?"video":""},ii=function(){function e(e,t){this.options=t||{},this.self=e,this.init()}var t=e.prototype;return t.init=function(){this.transmuxer&&this.transmuxer.dispose(),this.transmuxer=this.options.handlePartialData?new Ft(this.options):new xt(this.options),this.options.handlePartialData?function(e,t){t.on("data",(function(t){var i={data:t.data.track.initSegment.buffer,byteOffset:t.data.track.initSegment.byteOffset,byteLength:t.data.track.initSegment.byteLength},n={boxes:{data:t.data.boxes.buffer,byteOffset:t.data.boxes.byteOffset,byteLength:t.data.boxes.byteLength},initSegment:i,type:t.type,sequence:t.data.sequence};void 0!==t.data.videoFrameDts&&(n.videoFrameDtsTime=_e(t.data.videoFrameDts)),void 0!==t.data.videoFramePts&&(n.videoFramePtsTime=_e(t.data.videoFramePts)),e.postMessage({action:"data",segment:n},[n.boxes.data,n.initSegment.data])})),t.on("id3Frame",(function(t){e.postMessage({action:"id3Frame",id3Frame:t})})),t.on("caption",(function(t){e.postMessage({action:"caption",caption:t})})),t.on("done",(function(t){e.postMessage({action:"done",type:ti(t)})})),t.on("partialdone",(function(t){e.postMessage({action:"partialdone",type:ti(t)})})),t.on("endedsegment",(function(t){e.postMessage({action:"endedSegment",type:ti(t)})})),t.on("trackinfo",(function(t){e.postMessage({action:"trackinfo",trackInfo:t})})),t.on("audioTimingInfo",(function(t){if(null!==t.start){var i={start:_e(t.start)};t.end&&(i.end=_e(t.end)),e.postMessage({action:"audioTimingInfo",audioTimingInfo:i})}else e.postMessage({action:"audioTimingInfo",audioTimingInfo:t})})),t.on("videoTimingInfo",(function(t){var i={start:_e(t.start)};t.end&&(i.end=_e(t.end)),e.postMessage({action:"videoTimingInfo",videoTimingInfo:i})}))}(this.self,this.transmuxer):function(e,t){t.on("data",(function(t){var i=t.initSegment;t.initSegment={data:i.buffer,byteOffset:i.byteOffset,byteLength:i.byteLength};var n=t.data;t.data=n.buffer,e.postMessage({action:"data",segment:t,byteOffset:n.byteOffset,byteLength:n.byteLength},[t.data])})),t.on("done",(function(t){e.postMessage({action:"done"})})),t.on("gopInfo",(function(t){e.postMessage({action:"gopInfo",gopInfo:t})})),t.on("videoSegmentTimingInfo",(function(t){var i={start:{decode:_e(t.start.dts),presentation:_e(t.start.pts)},end:{decode:_e(t.end.dts),presentation:_e(t.end.pts)},baseMediaDecodeTime:_e(t.baseMediaDecodeTime)};t.prependedContentDuration&&(i.prependedContentDuration=_e(t.prependedContentDuration)),e.postMessage({action:"videoSegmentTimingInfo",videoSegmentTimingInfo:i})})),t.on("id3Frame",(function(t){e.postMessage({action:"id3Frame",id3Frame:t})})),t.on("caption",(function(t){e.postMessage({action:"caption",caption:t})})),t.on("trackinfo",(function(t){e.postMessage({action:"trackinfo",trackInfo:t})})),t.on("audioTimingInfo",(function(t){e.postMessage({action:"audioTimingInfo",audioTimingInfo:{start:_e(t.start),end:_e(t.end)}})})),t.on("videoTimingInfo",(function(t){e.postMessage({action:"videoTimingInfo",videoTimingInfo:{start:_e(t.start),end:_e(t.end)}})}))}(this.self,this.transmuxer)},t.pushMp4Captions=function(e){this.captionParser||(this.captionParser=new ei,this.captionParser.init());var t=new Uint8Array(e.data,e.byteOffset,e.byteLength),i=this.captionParser.parse(t,e.trackIds,e.timescales);this.self.postMessage({action:"mp4Captions",captions:i&&i.captions||[],data:t.buffer},[t.buffer])},t.clearAllMp4Captions=function(){this.captionParser&&this.captionParser.clearAllCaptions()},t.clearParsedMp4Captions=function(){this.captionParser&&this.captionParser.clearParsedCaptions()},t.push=function(e){var t=new Uint8Array(e.data,e.byteOffset,e.byteLength);this.transmuxer.push(t)},t.reset=function(){this.transmuxer.reset()},t.setTimestampOffset=function(e){var t=e.timestampOffset||0;this.transmuxer.setBaseMediaDecodeTime(Math.round(ye(t)))},t.setAudioAppendStart=function(e){this.transmuxer.setAudioAppendStart(Math.ceil(ye(e.appendStart)))},t.setRemux=function(e){this.transmuxer.setRemux(e.remux)},t.flush=function(e){this.transmuxer.flush(),i.postMessage({action:"done",type:"transmuxed"})},t.partialFlush=function(e){this.transmuxer.partialFlush(),i.postMessage({action:"partialdone",type:"transmuxed"})},t.endTimeline=function(){this.transmuxer.endTimeline(),i.postMessage({action:"endedtimeline",type:"transmuxed"})},t.alignGopsWith=function(e){this.transmuxer.alignGopsWith(e.gopsToAlignWith.slice())},e}();new function(e){e.onmessage=function(t){"init"===t.data.action&&t.data.options?this.messageHandlers=new ii(e,t.data.options):(this.messageHandlers||(this.messageHandlers=new ii(e)),t.data&&t.data.action&&"init"!==t.data.action&&this.messageHandlers[t.data.action]&&this.messageHandlers[t.data.action](t.data))}}(i)}()})),So=function(e,t){var i=t.attributes||{};return e&&e.mediaGroups&&e.mediaGroups.AUDIO&&i.AUDIO&&e.mediaGroups.AUDIO[i.AUDIO]},jo=function(e,t){var i=t.attributes||{},n=function(e){var t=e.attributes||{};if(t.CODECS)return Object(Me.parseCodecs)(t.CODECS)}(t)||{};if(So(e,t)&&!n.audio&&!function(e,t){if(!So(e,t))return!0;var i=t.attributes||{},n=e.mediaGroups.AUDIO[i.AUDIO];for(var r in n)if(!n[r].uri&&!n[r].playlists)return!0;return!1}(e,t)){var r=Object(Me.codecsFromDefault)(e,i.AUDIO);r&&(n.audio=r.audio)}var a={};return n.video&&(a.video=Object(Me.translateLegacyCodec)(""+n.video.type+n.video.details)),n.audio&&(a.audio=Object(Me.translateLegacyCodec)(""+n.audio.type+n.audio.details)),a},ko=function(e){return Ua.log.debug?Ua.log.debug.bind(Ua,"VHS:",e+" >"):function(){}},Co=ko("PlaylistSelector"),wo=function(e){if(e&&e.playlist){var t=e.playlist;return JSON.stringify({id:t.id,bandwidth:e.bandwidth,width:e.width,height:e.height,codecs:t.attributes&&t.attributes.CODECS||""})}},Eo=function(e,t){if(!e)return"";var i=r.a.getComputedStyle(e);return i?i[t]:""},Ao=function(e,t){var i=e.slice();e.sort((function(e,n){var r=t(e,n);return 0===r?i.indexOf(e)-i.indexOf(n):r}))},xo=function(e,t){var i,n;return e.attributes.BANDWIDTH&&(i=e.attributes.BANDWIDTH),i=i||r.a.Number.MAX_VALUE,t.attributes.BANDWIDTH&&(n=t.attributes.BANDWIDTH),i-(n=n||r.a.Number.MAX_VALUE)},Io=function(e){var t=e.inbandTextTracks,i=e.metadataArray,n=e.timestampOffset,a=e.videoDuration;if(i){var s=r.a.WebKitDataCue||r.a.VTTCue,o=t.metadataTrack_;if(o&&(i.forEach((function(e){var t=e.cueTime+n;!("number"!=typeof t||r.a.isNaN(t)||t<0)&&t<1/0&&e.frames.forEach((function(e){var i=new s(t,t,e.value||e.url||e.data||"");i.frame=e,i.value=e,function(e){Object.defineProperties(e.frame,{id:{get:function(){return Ua.log.warn("cue.frame.id is deprecated. Use cue.value.key instead."),e.value.key}},value:{get:function(){return Ua.log.warn("cue.frame.value is deprecated. Use cue.value.data instead."),e.value.data}},privateData:{get:function(){return Ua.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead."),e.value.data}}})}(i),o.addCue(i)}))})),o.cues&&o.cues.length)){for(var l=o.cues,u=[],c=0;c<l.length;c++)l[c]&&u.push(l[c]);var d=u.reduce((function(e,t){var i=e[t.startTime]||[];return i.push(t),e[t.startTime]=i,e}),{}),h=Object.keys(d).sort((function(e,t){return Number(e)-Number(t)}));h.forEach((function(e,t){var i=d[e],n=Number(h[t+1])||a;i.forEach((function(e){e.endTime=n}))}))}}},Po=function(e,t,i){var n,r;if(i&&i.cues)for(n=i.cues.length;n--;)(r=i.cues[n]).startTime>=e&&r.endTime<=t&&i.removeCue(r)},Oo=function(e){return"number"==typeof e&&isFinite(e)},Lo=function(e){return e+"TimingInfo"},Do=function(e){var t=e.segmentTimeline,i=e.currentTimeline,n=e.startOfSegment,r=e.buffered;return e.overrideCheck||t!==i?r.length?r.end(r.length-1):n:null},Mo=function(e){var t=e.timelineChangeController,i=e.currentTimeline,n=e.segmentTimeline,r=e.loaderType,a=e.audioDisabled;if(i===n)return!1;if("audio"===r){var s=t.lastTimelineChange({type:"main"});return!s||s.to!==n}if("main"===r&&a){var o=t.pendingTimelineChange({type:"audio"});return!o||o.to!==n}return!1},No=function(e){function t(t,i){var n;if(n=e.call(this)||this,!t)throw new TypeError("Initialization settings are required");if("function"!=typeof t.currentTime)throw new TypeError("No currentTime getter specified");if(!t.mediaSource)throw new TypeError("No MediaSource specified");return n.bandwidth=t.bandwidth,n.throughput={rate:0,count:0},n.roundTrip=NaN,n.resetStats_(),n.mediaIndex=null,n.hasPlayed_=t.hasPlayed,n.currentTime_=t.currentTime,n.seekable_=t.seekable,n.seeking_=t.seeking,n.duration_=t.duration,n.mediaSource_=t.mediaSource,n.vhs_=t.vhs,n.loaderType_=t.loaderType,n.currentMediaInfo_=void 0,n.startingMediaInfo_=void 0,n.segmentMetadataTrack_=t.segmentMetadataTrack,n.goalBufferLength_=t.goalBufferLength,n.sourceType_=t.sourceType,n.sourceUpdater_=t.sourceUpdater,n.inbandTextTracks_=t.inbandTextTracks,n.state_="INIT",n.handlePartialData_=t.handlePartialData,n.timelineChangeController_=t.timelineChangeController,n.shouldSaveSegmentTimingInfo_=!0,n.checkBufferTimeout_=null,n.error_=void 0,n.currentTimeline_=-1,n.pendingSegment_=null,n.xhrOptions_=null,n.pendingSegments_=[],n.audioDisabled_=!1,n.isPendingTimestampOffset_=!1,n.gopBuffer_=[],n.timeMapping_=0,n.safeAppend_=Ua.browser.IE_VERSION>=11,n.appendInitSegment_={audio:!0,video:!0},n.playlistOfLastInitSegment_={audio:null,video:null},n.callQueue_=[],n.loadQueue_=[],n.metadataQueue_={id3:[],caption:[]},n.activeInitSegmentId_=null,n.initSegments_={},n.cacheEncryptionKeys_=t.cacheEncryptionKeys,n.keyCache_={},n.decrypter_=t.decrypter,n.syncController_=t.syncController,n.syncPoint_={segmentIndex:0,time:0},n.transmuxer_=n.createTransmuxer_(),n.triggerSyncInfoUpdate_=function(){return n.trigger("syncinfoupdate")},n.syncController_.on("syncinfoupdate",n.triggerSyncInfoUpdate_),n.mediaSource_.addEventListener("sourceopen",(function(){n.isEndOfStream_()||(n.ended_=!1)})),n.fetchAtBuffer_=!1,n.logger_=ko("SegmentLoader["+n.loaderType_+"]"),Object.defineProperty(c()(n),"state",{get:function(){return this.state_},set:function(e){e!==this.state_&&(this.logger_(this.state_+" -> "+e),this.state_=e,this.trigger("statechange"))}}),n.sourceUpdater_.on("ready",(function(){n.hasEnoughInfoToAppend_()&&n.processCallQueue_()})),"main"===n.loaderType_&&n.timelineChangeController_.on("pendingtimelinechange",(function(){n.hasEnoughInfoToAppend_()&&n.processCallQueue_()})),"audio"===n.loaderType_&&n.timelineChangeController_.on("timelinechange",(function(){n.hasEnoughInfoToLoad_()&&n.processLoadQueue_(),n.hasEnoughInfoToAppend_()&&n.processCallQueue_()})),n}h()(t,e);var i=t.prototype;return i.createTransmuxer_=function(){var e=new To;return e.postMessage({action:"init",options:{remux:!1,alignGopsAtEnd:this.safeAppend_,keepOriginalTimestamps:!0,handlePartialData:this.handlePartialData_}}),e},i.resetStats_=function(){this.mediaBytesTransferred=0,this.mediaRequests=0,this.mediaRequestsAborted=0,this.mediaRequestsTimedout=0,this.mediaRequestsErrored=0,this.mediaTransferDuration=0,this.mediaSecondsLoaded=0},i.dispose=function(){this.trigger("dispose"),this.state="DISPOSED",this.pause(),this.abort_(),this.transmuxer_&&(this.transmuxer_.terminate(),Zs()),this.resetStats_(),this.checkBufferTimeout_&&r.a.clearTimeout(this.checkBufferTimeout_),this.syncController_&&this.triggerSyncInfoUpdate_&&this.syncController_.off("syncinfoupdate",this.triggerSyncInfoUpdate_),this.off()},i.setAudio=function(e){this.audioDisabled_=!e,e?this.appendInitSegment_.audio=!0:this.sourceUpdater_.removeAudio(0,this.duration_())},i.abort=function(){"WAITING"===this.state?(this.abort_(),this.state="READY",this.paused()||this.monitorBuffer_()):this.pendingSegment_&&(this.pendingSegment_=null)},i.abort_=function(){this.pendingSegment_&&this.pendingSegment_.abortRequests&&this.pendingSegment_.abortRequests(),this.pendingSegment_=null,this.callQueue_=[],this.loadQueue_=[],this.metadataQueue_.id3=[],this.metadataQueue_.caption=[],this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_)},i.checkForAbort_=function(e){return"APPENDING"!==this.state||this.pendingSegment_?!this.pendingSegment_||this.pendingSegment_.requestId!==e:(this.state="READY",!0)},i.error=function(e){return void 0!==e&&(this.logger_("error occurred:",e),this.error_=e),this.pendingSegment_=null,this.error_},i.endOfStream=function(){this.ended_=!0,this.transmuxer_&&Js(this.transmuxer_),this.gopBuffer_.length=0,this.pause(),this.trigger("ended")},i.buffered_=function(){if(!this.sourceUpdater_||!this.startingMediaInfo_)return Ua.createTimeRanges();if("main"===this.loaderType_){var e=this.startingMediaInfo_,t=e.hasAudio,i=e.hasVideo,n=e.isMuxed;if(i&&t&&!this.audioDisabled_&&!n)return this.sourceUpdater_.buffered();if(i)return this.sourceUpdater_.videoBuffered()}return this.sourceUpdater_.audioBuffered()},i.initSegmentForMap=function(e,t){if(void 0===t&&(t=!1),!e)return null;var i=As(e),n=this.initSegments_[i];return t&&!n&&e.bytes&&(this.initSegments_[i]=n={resolvedUri:e.resolvedUri,byterange:e.byterange,bytes:e.bytes,tracks:e.tracks,timescales:e.timescales}),n||e},i.segmentKey=function(e,t){if(void 0===t&&(t=!1),!e)return null;var i=xs(e),n=this.keyCache_[i];this.cacheEncryptionKeys_&&t&&!n&&e.bytes&&(this.keyCache_[i]=n={resolvedUri:e.resolvedUri,bytes:e.bytes});var r={resolvedUri:(n||e).resolvedUri};return n&&(r.bytes=n.bytes),r},i.couldBeginLoading_=function(){return this.playlist_&&!this.paused()},i.load=function(){if(this.monitorBuffer_(),this.playlist_){if(this.syncController_.setDateTimeMapping(this.playlist_),"INIT"===this.state&&this.couldBeginLoading_())return this.init_();!this.couldBeginLoading_()||"READY"!==this.state&&"INIT"!==this.state||(this.state="READY")}},i.init_=function(){return this.state="READY",this.resetEverything(),this.monitorBuffer_()},i.playlist=function(e,t){if(void 0===t&&(t={}),e){var i=this.playlist_,n=this.pendingSegment_;this.playlist_=e,this.xhrOptions_=t,"INIT"===this.state&&(e.syncInfo={mediaSequence:e.mediaSequence,time:0});var r=null;if(i&&(i.id?r=i.id:i.uri&&(r=i.uri)),this.logger_("playlist update ["+r+" => "+(e.id||e.uri)+"]"),this.trigger("syncinfoupdate"),"INIT"===this.state&&this.couldBeginLoading_())return this.init_();if(!i||i.uri!==e.uri)return(null!==this.mediaIndex||this.handlePartialData_)&&this.resyncLoader(),this.currentMediaInfo_=void 0,void this.trigger("playlistupdate");var a=e.mediaSequence-i.mediaSequence;this.logger_("live window shift ["+a+"]"),null!==this.mediaIndex&&(this.mediaIndex-=a),n&&(n.mediaIndex-=a,n.mediaIndex>=0&&(n.segment=e.segments[n.mediaIndex])),this.syncController_.saveExpiredSegmentInfo(i,e)}},i.pause=function(){this.checkBufferTimeout_&&(r.a.clearTimeout(this.checkBufferTimeout_),this.checkBufferTimeout_=null)},i.paused=function(){return null===this.checkBufferTimeout_},i.resetEverything=function(e){this.ended_=!1,this.appendInitSegment_={audio:!0,video:!0},this.resetLoader(),this.remove(0,1/0,e),this.transmuxer_&&this.transmuxer_.postMessage({action:"clearAllMp4Captions"})},i.resetLoader=function(){this.fetchAtBuffer_=!1,this.resyncLoader()},i.resyncLoader=function(){this.transmuxer_&&Js(this.transmuxer_),this.mediaIndex=null,this.syncPoint_=null,this.isPendingTimestampOffset_=!1,this.callQueue_=[],this.loadQueue_=[],this.metadataQueue_.id3=[],this.metadataQueue_.caption=[],this.abort(),this.transmuxer_&&this.transmuxer_.postMessage({action:"clearParsedMp4Captions"})},i.remove=function(e,t,i){if(void 0===i&&(i=function(){}),t===1/0&&(t=this.duration_()),this.sourceUpdater_&&this.currentMediaInfo_){var n=1,r=function(){0===--n&&i()};for(var a in this.audioDisabled_||(n++,this.sourceUpdater_.removeAudio(e,t,r)),"main"===this.loaderType_&&this.currentMediaInfo_&&this.currentMediaInfo_.hasVideo&&(this.gopBuffer_=function(e,t,i,n){for(var r=Math.ceil((t-n)*Oe.ONE_SECOND_IN_TS),a=Math.ceil((i-n)*Oe.ONE_SECOND_IN_TS),s=e.slice(),o=e.length;o--&&!(e[o].pts<=a););if(-1===o)return s;for(var l=o+1;l--&&!(e[l].pts<=r););return l=Math.max(l,0),s.splice(l,o-l+1),s}(this.gopBuffer_,e,t,this.timeMapping_),n++,this.sourceUpdater_.removeVideo(e,t,r)),this.inbandTextTracks_)Po(e,t,this.inbandTextTracks_[a]);Po(e,t,this.segmentMetadataTrack_),r()}},i.monitorBuffer_=function(){this.checkBufferTimeout_&&r.a.clearTimeout(this.checkBufferTimeout_),this.checkBufferTimeout_=r.a.setTimeout(this.monitorBufferTick_.bind(this),1)},i.monitorBufferTick_=function(){"READY"===this.state&&this.fillBuffer_(),this.checkBufferTimeout_&&r.a.clearTimeout(this.checkBufferTimeout_),this.checkBufferTimeout_=r.a.setTimeout(this.monitorBufferTick_.bind(this),500)},i.fillBuffer_=function(){if(!this.sourceUpdater_.updating()){this.syncPoint_||(this.syncPoint_=this.syncController_.getSyncPoint(this.playlist_,this.duration_(),this.currentTimeline_,this.currentTime_()));var e=this.buffered_(),t=this.checkBuffer_(e,this.playlist_,this.mediaIndex,this.hasPlayed_(),this.currentTime_(),this.syncPoint_);t&&(t.timestampOffset=Do({segmentTimeline:t.timeline,currentTimeline:this.currentTimeline_,startOfSegment:t.startOfSegment,buffered:e,overrideCheck:this.isPendingTimestampOffset_}),this.isPendingTimestampOffset_=!1,"number"==typeof t.timestampOffset&&this.timelineChangeController_.pendingTimelineChange({type:this.loaderType_,from:this.currentTimeline_,to:t.timeline}),this.loadSegment_(t))}},i.isEndOfStream_=function(e,t){if(void 0===e&&(e=this.mediaIndex),void 0===t&&(t=this.playlist_),!t||!this.mediaSource_)return!1;var i=e+1===t.segments.length;return t.endList&&"open"===this.mediaSource_.readyState&&i},i.checkBuffer_=function(e,t,i,n,r,a){var s=0;e.length&&(s=e.end(e.length-1));var o=Math.max(0,s-r);if(!t.segments.length)return null;if(o>=this.goalBufferLength_())return null;if(!n&&o>=1)return null;var l,u=null,c=!1;if(null===a)u=this.getSyncSegmentCandidate_(t),c=!0;else if(null!==i){var d=t.segments[i];l=d&&d.end?d.end:s,u=i+1}else if(this.fetchAtBuffer_){var h=ys.getMediaInfoForTime(t,s,a.segmentIndex,a.time);u=h.mediaIndex,l=h.startTime}else{var p=ys.getMediaInfoForTime(t,r,a.segmentIndex,a.time);u=p.mediaIndex,l=p.startTime}var f=this.generateSegmentInfo_(t,u,l,c);return!f||this.mediaSource_&&this.playlist_&&f.mediaIndex===this.playlist_.segments.length-1&&"ended"===this.mediaSource_.readyState&&!this.seeking_()?void 0:(this.logger_("checkBuffer_ returning "+f.uri,{segmentInfo:f,playlist:t,currentMediaIndex:i,nextMediaIndex:u,startOfSegment:l,isSyncRequest:c}),f)},i.getSyncSegmentCandidate_=function(e){var t=this;if(-1===this.currentTimeline_)return 0;var i=e.segments.map((function(e,t){return{timeline:e.timeline,segmentIndex:t}})).filter((function(e){return e.timeline===t.currentTimeline_}));return i.length?i[Math.min(i.length-1,1)].segmentIndex:Math.max(e.segments.length-1,0)},i.generateSegmentInfo_=function(e,t,i,n){if(t<0||t>=e.segments.length)return null;var r,a,s=e.segments[t],o=this.sourceUpdater_.audioBuffered(),l=this.sourceUpdater_.videoBuffered();return o.length&&(r=o.end(o.length-1)-this.sourceUpdater_.audioTimestampOffset()),l.length&&(a=function(e,t,i){if(null==t||!e.length)return[];var n,r=Math.ceil((t-i+3)*Oe.ONE_SECOND_IN_TS);for(n=0;n<e.length&&!(e[n].pts>r);n++);return e.slice(n)}(this.gopBuffer_,this.currentTime_()-this.sourceUpdater_.videoTimestampOffset(),this.timeMapping_)),{requestId:"segment-loader-"+Math.random(),uri:s.resolvedUri,mediaIndex:t,isSyncRequest:n,startOfSegment:i,playlist:e,bytes:null,encryptedBytes:null,timestampOffset:null,timeline:s.timeline,duration:s.duration,segment:s,byteLength:0,transmuxer:this.transmuxer_,audioAppendStart:r,gopsToAlignWith:a}},i.abortRequestEarly_=function(e){if(this.vhs_.tech_.paused()||!this.xhrOptions_.timeout||!this.playlist_.attributes.BANDWIDTH)return!1;if(Date.now()-(e.firstBytesReceivedAt||Date.now())<1e3)return!1;var t=this.currentTime_(),i=e.bandwidth,n=this.pendingSegment_.duration,r=ys.estimateSegmentRequestTime(n,i,this.playlist_,e.bytesReceived),a=function(e,t,i){return void 0===i&&(i=1),((e.length?e.end(e.length-1):0)-t)/i}(this.buffered_(),t,this.vhs_.tech_.playbackRate())-1;if(r<=a)return!1;var s=function(e){var t=e.master,i=e.currentTime,n=e.bandwidth,r=e.duration,a=e.segmentDuration,s=e.timeUntilRebuffer,o=e.currentTimeline,l=e.syncController,u=t.playlists.filter((function(e){return!ys.isIncompatible(e)})),c=u.filter(ys.isEnabled);c.length||(c=u.filter((function(e){return!ys.isDisabled(e)})));var d=c.filter(ys.hasAttribute.bind(null,"BANDWIDTH")).map((function(e){var t=l.getSyncPoint(e,r,o,i)?1:2;return{playlist:e,rebufferingImpact:ys.estimateSegmentRequestTime(a,n,e)*t-s}})),h=d.filter((function(e){return e.rebufferingImpact<=0}));return Ao(h,(function(e,t){return xo(t.playlist,e.playlist)})),h.length?h[0]:(Ao(d,(function(e,t){return e.rebufferingImpact-t.rebufferingImpact})),d[0]||null)}({master:this.vhs_.playlists.master,currentTime:t,bandwidth:i,duration:this.duration_(),segmentDuration:n,timeUntilRebuffer:a,currentTimeline:this.currentTimeline_,syncController:this.syncController_});if(s){var o=r-a-s.rebufferingImpact,l=.5;return a<=1/30&&(l=1),!s.playlist||s.playlist.uri===this.playlist_.uri||o<l?!1:(this.bandwidth=s.playlist.attributes.BANDWIDTH*Hs.BANDWIDTH_VARIANCE+1,this.abort(),this.trigger("earlyabort"),!0)}},i.handleAbort_=function(){this.mediaRequestsAborted+=1},i.handleProgress_=function(e,t){this.checkForAbort_(t.requestId)||this.abortRequestEarly_(t.stats)||this.trigger("progress")},i.handleTrackInfo_=function(e,t){this.checkForAbort_(e.requestId)||this.abortRequestEarly_(e.stats)||this.checkForIllegalMediaSwitch(t)||(t=t||{},function(e,t){if(!e&&!t||!e&&t||e&&!t)return!1;if(e===t)return!0;var i=Object.keys(e).sort(),n=Object.keys(t).sort();if(i.length!==n.length)return!1;for(var r=0;r<i.length;r++){var a=i[r];if(a!==n[r])return!1;if(e[a]!==t[a])return!1}return!0}(this.currentMediaInfo_,t)||(this.appendInitSegment_={audio:!0,video:!0},this.startingMediaInfo_=t,this.currentMediaInfo_=t,this.logger_("trackinfo update",t),this.trigger("trackinfo")),this.checkForAbort_(e.requestId)||this.abortRequestEarly_(e.stats)||(this.pendingSegment_.trackInfo=t,this.hasEnoughInfoToAppend_()&&this.processCallQueue_()))},i.handleTimingInfo_=function(e,t,i,n){if(!this.checkForAbort_(e.requestId)&&!this.abortRequestEarly_(e.stats)){var r=this.pendingSegment_,a=Lo(t);r[a]=r[a]||{},r[a][i]=n,this.logger_("timinginfo: "+t+" - "+i+" - "+n),this.hasEnoughInfoToAppend_()&&this.processCallQueue_()}},i.handleCaptions_=function(e,t){var i=this;if(!this.checkForAbort_(e.requestId)&&!this.abortRequestEarly_(e.stats))if(0!==t.length)if(this.pendingSegment_.hasAppendedData_){var n=null===this.sourceUpdater_.videoTimestampOffset()?this.sourceUpdater_.audioTimestampOffset():this.sourceUpdater_.videoTimestampOffset(),a={};t.forEach((function(e){a[e.stream]=a[e.stream]||{startTime:1/0,captions:[],endTime:0};var t=a[e.stream];t.startTime=Math.min(t.startTime,e.startTime+n),t.endTime=Math.max(t.endTime,e.endTime+n),t.captions.push(e)})),Object.keys(a).forEach((function(e){var t=a[e],s=t.startTime,o=t.endTime,l=t.captions,u=i.inbandTextTracks_;i.logger_("adding cues from "+s+" -> "+o+" for "+e),function(e,t,i){if(!e[i]){t.trigger({type:"usage",name:"vhs-608"}),t.trigger({type:"usage",name:"hls-608"});var n=t.textTracks().getTrackById(i);e[i]=n||t.addRemoteTextTrack({kind:"captions",id:i,label:i},!1).track}}(u,i.vhs_.tech_,e),Po(s,o,u[e]),function(e){var t=e.inbandTextTracks,i=e.captionArray,n=e.timestampOffset;if(i){var a=r.a.WebKitDataCue||r.a.VTTCue;i.forEach((function(e){var i=e.stream;t[i].addCue(new a(e.startTime+n,e.endTime+n,e.text))}))}}({captionArray:l,inbandTextTracks:u,timestampOffset:n})})),this.transmuxer_&&this.transmuxer_.postMessage({action:"clearParsedMp4Captions"})}else this.metadataQueue_.caption.push(this.handleCaptions_.bind(this,e,t));else this.logger_("SegmentLoader received no captions from a caption event")},i.handleId3_=function(e,t,i){if(!this.checkForAbort_(e.requestId)&&!this.abortRequestEarly_(e.stats))if(this.pendingSegment_.hasAppendedData_){var n=null===this.sourceUpdater_.videoTimestampOffset()?this.sourceUpdater_.audioTimestampOffset():this.sourceUpdater_.videoTimestampOffset();!function(e,t,i){e.metadataTrack_||(e.metadataTrack_=i.addRemoteTextTrack({kind:"metadata",label:"Timed Metadata"},!1).track,e.metadataTrack_.inBandMetadataTrackDispatchType=t)}(this.inbandTextTracks_,i,this.vhs_.tech_),Io({inbandTextTracks:this.inbandTextTracks_,metadataArray:t,timestampOffset:n,videoDuration:this.duration_()})}else this.metadataQueue_.id3.push(this.handleId3_.bind(this,e,t,i))},i.processMetadataQueue_=function(){this.metadataQueue_.id3.forEach((function(e){return e()})),this.metadataQueue_.caption.forEach((function(e){return e()})),this.metadataQueue_.id3=[],this.metadataQueue_.caption=[]},i.processCallQueue_=function(){var e=this.callQueue_;this.callQueue_=[],e.forEach((function(e){return e()}))},i.processLoadQueue_=function(){var e=this.loadQueue_;this.loadQueue_=[],e.forEach((function(e){return e()}))},i.hasEnoughInfoToLoad_=function(){if("audio"!==this.loaderType_)return!0;var e=this.pendingSegment_;return!!e&&(!this.currentMediaInfo_||!Mo({timelineChangeController:this.timelineChangeController_,currentTimeline:this.currentTimeline_,segmentTimeline:e.timeline,loaderType:this.loaderType_,audioDisabled:this.audioDisabled_}))},i.hasEnoughInfoToAppend_=function(){if(!this.sourceUpdater_.ready())return!1;var e=this.pendingSegment_;if(!e||!e.trackInfo)return!1;if(!this.handlePartialData_){var t=this.currentMediaInfo_,i=t.hasAudio,n=t.hasVideo,r=t.isMuxed;if(n&&!e.videoTimingInfo)return!1;if(i&&!this.audioDisabled_&&!r&&!e.audioTimingInfo)return!1}return!Mo({timelineChangeController:this.timelineChangeController_,currentTimeline:this.currentTimeline_,segmentTimeline:e.timeline,loaderType:this.loaderType_,audioDisabled:this.audioDisabled_})},i.handleData_=function(e,t){if(!this.checkForAbort_(e.requestId)&&!this.abortRequestEarly_(e.stats))if(!this.callQueue_.length&&this.hasEnoughInfoToAppend_()){var i=this.pendingSegment_;if(this.setTimeMapping_(i.timeline),this.updateMediaSecondsLoaded_(i.segment),"closed"!==this.mediaSource_.readyState){if(e.map&&(e.map=this.initSegmentForMap(e.map,!0),i.segment.map=e.map),e.key&&this.segmentKey(e.key,!0),i.isFmp4=e.isFmp4,i.timingInfo=i.timingInfo||{},i.isFmp4)this.trigger("fmp4"),i.timingInfo.start=i[Lo(t.type)].start;else{var n,r="main"===this.loaderType_&&this.currentMediaInfo_.hasVideo;r&&(n=this.handlePartialData_?t.videoFramePtsTime:i.videoTimingInfo.start),i.timingInfo.start=this.trueSegmentStart_({currentStart:i.timingInfo.start,playlist:i.playlist,mediaIndex:i.mediaIndex,currentVideoTimestampOffset:this.sourceUpdater_.videoTimestampOffset(),useVideoTimingInfo:r,firstVideoFrameTimeForData:n,videoTimingInfo:i.videoTimingInfo,audioTimingInfo:i.audioTimingInfo})}this.updateAppendInitSegmentStatus(i,t.type),this.updateSourceBufferTimestampOffset_(i),i.hasAppendedData_=!0,this.processMetadataQueue_(),this.appendData_(i,t)}}else this.callQueue_.push(this.handleData_.bind(this,e,t))},i.updateAppendInitSegmentStatus=function(e,t){"main"!==this.loaderType_||"number"!=typeof e.timestampOffset||e.changedTimestampOffset||(this.appendInitSegment_={audio:!0,video:!0}),this.playlistOfLastInitSegment_[t]!==e.playlist&&(this.appendInitSegment_[t]=!0)},i.getInitSegmentAndUpdateState_=function(e){var t=e.type,i=e.initSegment,n=e.map,r=e.playlist;if(n){var a=As(n);if(this.activeInitSegmentId_===a)return null;i=this.initSegmentForMap(n,!0).bytes,this.activeInitSegmentId_=a}return i&&this.appendInitSegment_[t]?(this.playlistOfLastInitSegment_[t]=r,this.appendInitSegment_[t]=!!n,this.activeInitSegmentId_=null,i):null},i.appendToSourceBuffer_=function(e){var t=this,i=e.segmentInfo,n=e.type,r=e.initSegment,a=e.data,s=[a],o=a.byteLength;r&&(s.unshift(r),o+=r.byteLength);var l,u,c,d=(c=0,(l={bytes:o,segments:s}).bytes&&(u=new Uint8Array(l.bytes),l.segments.forEach((function(e){u.set(e,c),c+=e.byteLength}))),u);this.sourceUpdater_.appendBuffer({segmentInfo:i,type:n,bytes:d},(function(e){e&&(t.error(n+" append of "+d.length+"b failed for segment #"+i.mediaIndex+" in playlist "+i.playlist.id),t.trigger("appenderror"))}))},i.handleVideoSegmentTimingInfo_=function(e,t){if(this.pendingSegment_&&e===this.pendingSegment_.requestId){var i=this.pendingSegment_.segment;i.videoTimingInfo||(i.videoTimingInfo={}),i.videoTimingInfo.transmuxerPrependedSeconds=t.prependedContentDuration||0,i.videoTimingInfo.transmuxedPresentationStart=t.start.presentation,i.videoTimingInfo.transmuxedPresentationEnd=t.end.presentation,i.videoTimingInfo.baseMediaDecodeTime=t.baseMediaDecodeTime}},i.appendData_=function(e,t){var i=t.type,n=t.data;if(n&&n.byteLength&&("audio"!==i||!this.audioDisabled_)){var r=this.getInitSegmentAndUpdateState_({type:i,initSegment:t.initSegment,playlist:e.playlist,map:e.isFmp4?e.segment.map:null});this.appendToSourceBuffer_({segmentInfo:e,type:i,initSegment:r,data:n})}},i.loadSegment_=function(e){var t=this;this.state="WAITING",this.pendingSegment_=e,this.trimBackBuffer_(e),"number"==typeof e.timestampOffset&&this.transmuxer_&&this.transmuxer_.postMessage({action:"clearAllMp4Captions"}),this.hasEnoughInfoToLoad_()?this.updateTransmuxerAndRequestSegment_(e):this.loadQueue_.push((function(){var i=t.buffered_();"number"==typeof e.timestampOffset&&(e.timestampOffset=Do({segmentTimeline:e.timeline,currentTimeline:t.currentTimeline_,startOfSegment:e.startOfSegment,buffered:i,overrideCheck:!0})),delete e.audioAppendStart;var n=t.sourceUpdater_.audioBuffered();n.length&&(e.audioAppendStart=n.end(n.length-1)-t.sourceUpdater_.audioTimestampOffset()),t.updateTransmuxerAndRequestSegment_(e)}))},i.updateTransmuxerAndRequestSegment_=function(e){this.shouldUpdateTransmuxerTimestampOffset_(e.timestampOffset)&&(this.gopBuffer_.length=0,e.gopsToAlignWith=[],this.timeMapping_=0,this.transmuxer_.postMessage({action:"reset"}),this.transmuxer_.postMessage({action:"setTimestampOffset",timestampOffset:e.timestampOffset}));var t=this.createSimplifiedSegmentObj_(e);e.abortRequests=uo({xhr:this.vhs_.xhr,xhrOptions:this.xhrOptions_,decryptionWorker:this.decrypter_,segment:t,handlePartialData:this.handlePartialData_,abortFn:this.handleAbort_.bind(this),progressFn:this.handleProgress_.bind(this),trackInfoFn:this.handleTrackInfo_.bind(this),timingInfoFn:this.handleTimingInfo_.bind(this),videoSegmentTimingInfoFn:this.handleVideoSegmentTimingInfo_.bind(this,e.requestId),captionsFn:this.handleCaptions_.bind(this),id3Fn:this.handleId3_.bind(this),dataFn:this.handleData_.bind(this),doneFn:this.segmentRequestFinished_.bind(this)})},i.trimBackBuffer_=function(e){var t=function(e,t,i){var n=t-Hs.BACK_BUFFER_LENGTH;e.length&&(n=Math.max(n,e.start(0)));var r=t-i;return Math.min(r,n)}(this.seekable_(),this.currentTime_(),this.playlist_.targetDuration||10);t>0&&this.remove(0,t)},i.createSimplifiedSegmentObj_=function(e){var t=e.segment,i={resolvedUri:t.resolvedUri,byterange:t.byterange,requestId:e.requestId,transmuxer:e.transmuxer,audioAppendStart:e.audioAppendStart,gopsToAlignWith:e.gopsToAlignWith},n=e.playlist.segments[e.mediaIndex];if(n&&n.end&&n.timeline===t.timeline&&(i.baseStartTime=n.end+e.timestampOffset),t.key){var r=t.key.iv||new Uint32Array([0,0,0,e.mediaIndex+e.playlist.mediaSequence]);i.key=this.segmentKey(t.key),i.key.iv=r}return t.map&&(i.map=this.initSegmentForMap(t.map)),i},i.saveTransferStats_=function(e){this.mediaRequests+=1,e&&(this.mediaBytesTransferred+=e.bytesReceived,this.mediaTransferDuration+=e.roundTripTime)},i.saveBandwidthRelatedStats_=function(e){this.bandwidth=e.bandwidth,this.roundTrip=e.roundTripTime,this.pendingSegment_.byteLength=e.bytesReceived},i.handleTimeout_=function(){this.mediaRequestsTimedout+=1,this.bandwidth=1,this.roundTrip=NaN,this.trigger("bandwidthupdate")},i.segmentRequestFinished_=function(e,t,i){if(this.callQueue_.length)this.callQueue_.push(this.segmentRequestFinished_.bind(this,e,t,i));else if(this.saveTransferStats_(t.stats),this.pendingSegment_&&t.requestId===this.pendingSegment_.requestId){if(e){if(this.pendingSegment_=null,this.state="READY",e.code===io)return;return this.pause(),e.code===to?void this.handleTimeout_():(this.mediaRequestsErrored+=1,this.error(e),void this.trigger("error"))}this.saveBandwidthRelatedStats_(t.stats);var n=this.pendingSegment_;n.endOfAllRequests=t.endOfAllRequests,i.gopInfo&&(this.gopBuffer_=function(e,t,i){if(!t.length)return e;if(i)return t.slice();for(var n=t[0].pts,r=0;r<e.length&&!(e[r].pts>=n);r++);return e.slice(0,r).concat(t)}(this.gopBuffer_,i.gopInfo,this.safeAppend_)),this.state="APPENDING";var r=this.isEndOfStream_(n.mediaIndex,n.playlist),a=null!==this.mediaIndex,s=n.timeline!==this.currentTimeline_&&n.timeline>0;!n.isFmp4&&(r||a&&s)&&$s(this.transmuxer_),this.trigger("appending"),this.waitForAppendsToComplete_(n)}},i.setTimeMapping_=function(e){var t=this.syncController_.mappingForTimeline(e);null!==t&&(this.timeMapping_=t)},i.updateMediaSecondsLoaded_=function(e){"number"==typeof e.start&&"number"==typeof e.end?this.mediaSecondsLoaded+=e.end-e.start:this.mediaSecondsLoaded+=e.duration},i.shouldUpdateTransmuxerTimestampOffset_=function(e){return null!==e&&("main"===this.loaderType_&&e!==this.sourceUpdater_.videoTimestampOffset()||!this.audioDisabled_&&e!==this.sourceUpdater_.audioTimestampOffset())},i.trueSegmentStart_=function(e){var t=e.currentStart,i=e.playlist,n=e.mediaIndex,r=e.firstVideoFrameTimeForData,a=e.currentVideoTimestampOffset,s=e.useVideoTimingInfo,o=e.videoTimingInfo,l=e.audioTimingInfo;if(void 0!==t)return t;if(!s)return l.start;var u=i.segments[n-1];return 0!==n&&u&&void 0!==u.start&&u.end===r+a?o.start:r},i.waitForAppendsToComplete_=function(e){if(!this.currentMediaInfo_)return this.error({message:"No starting media returned, likely due to an unsupported media format.",blacklistDuration:1/0}),void this.trigger("error");var t=this.currentMediaInfo_,i=t.hasAudio,n=t.hasVideo,r=t.isMuxed,a="main"===this.loaderType_&&n,s=!this.audioDisabled_&&i&&!r;if(e.waitingOnAppends=0,!e.hasAppendedData_)return e.timingInfo||"number"!=typeof e.timestampOffset||(this.isPendingTimestampOffset_=!0),e.timingInfo={start:0},e.waitingOnAppends++,this.isPendingTimestampOffset_||(this.updateSourceBufferTimestampOffset_(e),this.processMetadataQueue_()),void this.checkAppendsDone_(e);a&&e.waitingOnAppends++,s&&e.waitingOnAppends++,a&&this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this,e)),s&&this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this,e))},i.checkAppendsDone_=function(e){this.checkForAbort_(e.requestId)||(e.waitingOnAppends--,0===e.waitingOnAppends&&this.handleAppendsDone_())},i.checkForIllegalMediaSwitch=function(e){var t=function(e,t,i){return"main"===e&&t&&i?i.hasAudio||i.hasVideo?t.hasVideo&&!i.hasVideo?"Only audio found in segment when we expected video. We can't switch to audio only from a stream that had video. To get rid of this message, please add codec information to the manifest.":!t.hasVideo&&i.hasVideo?"Video found in segment when we expected only audio. We can't switch to a stream with video from an audio only stream. To get rid of this message, please add codec information to the manifest.":null:"Neither audio nor video found in segment.":null}(this.loaderType_,this.currentMediaInfo_,e);return!!t&&(this.error({message:t,blacklistDuration:1/0}),this.trigger("error"),!0)},i.updateSourceBufferTimestampOffset_=function(e){if(null!==e.timestampOffset&&"number"==typeof e.timingInfo.start&&!e.changedTimestampOffset&&"main"===this.loaderType_){var t=!1;e.timestampOffset-=e.timingInfo.start,e.changedTimestampOffset=!0,e.timestampOffset!==this.sourceUpdater_.videoTimestampOffset()&&(this.sourceUpdater_.videoTimestampOffset(e.timestampOffset),t=!0),e.timestampOffset!==this.sourceUpdater_.audioTimestampOffset()&&(this.sourceUpdater_.audioTimestampOffset(e.timestampOffset),t=!0),t&&this.trigger("timestampoffset")}},i.updateTimingInfoEnd_=function(e){e.timingInfo=e.timingInfo||{};var t="main"===this.loaderType_&&this.currentMediaInfo_.hasVideo&&e.videoTimingInfo?e.videoTimingInfo:e.audioTimingInfo;t&&(e.timingInfo.end="number"==typeof t.end?t.end:t.start+e.duration)},i.handleAppendsDone_=function(){if(this.pendingSegment_&&this.trigger("appendsdone"),!this.pendingSegment_)return this.state="READY",void(this.paused()||this.monitorBuffer_());var e=this.pendingSegment_;if(this.updateTimingInfoEnd_(e),this.shouldSaveSegmentTimingInfo_&&this.syncController_.saveSegmentTimingInfo({segmentInfo:e,shouldSaveTimelineMapping:"main"===this.loaderType_}),this.logger_(function(e){var t=e.segment,i=t.start,n=t.end,r=e.playlist,a=r.mediaSequence,s=r.id,o=r.segments,l=void 0===o?[]:o,u=e.mediaIndex,c=e.timeline;return["appending ["+u+"] of ["+a+", "+(a+l.length)+"] from playlist ["+s+"]","["+i+" => "+n+"] in timeline ["+c+"]"].join(" ")}(e)),this.recordThroughput_(e),this.pendingSegment_=null,this.state="READY",e.isSyncRequest)this.trigger("syncinfoupdate");else{this.addSegmentMetadataCue_(e),this.fetchAtBuffer_=!0,this.currentTimeline_!==e.timeline&&(this.timelineChangeController_.lastTimelineChange({type:this.loaderType_,from:this.currentTimeline_,to:e.timeline}),"main"!==this.loaderType_||this.audioDisabled_||this.timelineChangeController_.lastTimelineChange({type:"audio",from:this.currentTimeline_,to:e.timeline})),this.currentTimeline_=e.timeline,this.trigger("syncinfoupdate");var t=e.segment;if(t.end&&this.currentTime_()-t.end>3*e.playlist.targetDuration)this.resetEverything();else null!==this.mediaIndex&&this.trigger("bandwidthupdate"),this.trigger("progress"),this.mediaIndex=e.mediaIndex,this.isEndOfStream_(e.mediaIndex,e.playlist)&&this.endOfStream(),this.trigger("appended"),this.paused()||this.monitorBuffer_()}},i.recordThroughput_=function(e){var t=this.throughput.rate,i=Date.now()-e.endOfAllRequests+1,n=Math.floor(e.byteLength/i*8*1e3);this.throughput.rate+=(n-t)/++this.throughput.count},i.addSegmentMetadataCue_=function(e){if(this.segmentMetadataTrack_){var t=e.segment,i=t.start,n=t.end;if(Oo(i)&&Oo(n)){Po(i,n,this.segmentMetadataTrack_);var a=r.a.WebKitDataCue||r.a.VTTCue,s={custom:t.custom,dateTimeObject:t.dateTimeObject,dateTimeString:t.dateTimeString,bandwidth:e.playlist.attributes.BANDWIDTH,resolution:e.playlist.attributes.RESOLUTION,codecs:e.playlist.attributes.CODECS,byteLength:e.byteLength,uri:e.uri,timeline:e.timeline,playlist:e.playlist.id,start:i,end:n},o=new a(i,n,JSON.stringify(s));o.value=s,this.segmentMetadataTrack_.addCue(o)}}},t}(Ua.EventTarget);function Ro(){}var Uo,zo=function(e){return"string"!=typeof e?e:e.replace(/./,(function(e){return e.toUpperCase()}))},Fo=["video","audio"],Bo=function(e,t){var i=t[e+"Buffer"];return i&&i.updating||t.queuePending[e]},Vo=function e(t,i){if(0!==i.queue.length){var n=0,r=i.queue[n];if("mediaSource"!==r.type){if("mediaSource"!==t&&i.started_&&"closed"!==i.mediaSource.readyState&&!Bo(t,i)){if(r.type!==t){if(null===(n=function(e,t){for(var i=0;i<t.length;i++){var n=t[i];if("mediaSource"===n.type)return null;if(n.type===e)return i}return null}(t,i.queue)))return;r=i.queue[n]}i.queue.splice(n,1),r.action(t,i),r.doneFn?i.queuePending[t]=r:e(t,i)}}else i.updating()||"closed"===i.mediaSource.readyState||(i.queue.shift(),r.action(i),r.doneFn&&r.doneFn(),e("audio",i),e("video",i))}},Ho=function(e,t){var i=t[e+"Buffer"],n=zo(e);i&&(i.removeEventListener("updateend",t["on"+n+"UpdateEnd_"]),i.removeEventListener("error",t["on"+n+"Error_"]),t.codecs[e]=null,t[e+"Buffer"]=null)},qo=function(e,t){return e&&t&&-1!==Array.prototype.indexOf.call(e.sourceBuffers,t)},Wo=function(e,t){return function(i,n){var r=n[i+"Buffer"];qo(n.mediaSource,r)&&(n.logger_("Appending segment "+t.mediaIndex+"'s "+e.length+" bytes to "+i+"Buffer"),r.appendBuffer(e))}},Go=function(e,t){return function(i,n){var r=n[i+"Buffer"];qo(n.mediaSource,r)&&(n.logger_("Removing "+e+" to "+t+" from "+i+"Buffer"),r.remove(e,t))}},Xo=function(e){return function(t,i){var n=i[t+"Buffer"];qo(i.mediaSource,n)&&(i.logger_("Setting "+t+"timestampOffset to "+e),n.timestampOffset=e)}},Ko=function(e){return function(t,i){e()}},Yo=function(e){return function(t){if("open"===t.mediaSource.readyState){t.logger_("Calling mediaSource endOfStream("+(e||"")+")");try{t.mediaSource.endOfStream(e)}catch(e){Ua.log.warn("Failed to call media source endOfStream",e)}}}},Qo=function(e){return function(t){t.logger_("Setting mediaSource duration to "+e);try{t.mediaSource.duration=e}catch(e){Ua.log.warn("Failed to set media source duration",e)}}},Jo=function(){return function(e,t){if("open"===t.mediaSource.readyState){var i=t[e+"Buffer"];if(qo(t.mediaSource,i)){t.logger_("calling abort on "+e+"Buffer");try{i.abort()}catch(t){Ua.log.warn("Failed to abort on "+e+"Buffer",t)}}}}},Zo=function(e,t){return function(i){var n=zo(e),r=Object(Me.getMimeForCodec)(t);i.logger_("Adding "+e+"Buffer with codec "+t+" to mediaSource");var a=i.mediaSource.addSourceBuffer(r);a.addEventListener("updateend",i["on"+n+"UpdateEnd_"]),a.addEventListener("error",i["on"+n+"Error_"]),i.codecs[e]=t,i[e+"Buffer"]=a}},$o=function(e){return function(t){var i=t[e+"Buffer"];if(Ho(e,t),qo(t.mediaSource,i)){t.logger_("Removing "+e+"Buffer with codec "+t.codecs[e]+" from mediaSource");try{t.mediaSource.removeSourceBuffer(i)}catch(t){Ua.log.warn("Failed to removeSourceBuffer "+e+"Buffer",t)}}}},el=function(e){return function(t,i){var n=i[t+"Buffer"],r=Object(Me.getMimeForCodec)(e);qo(i.mediaSource,n)&&i.codecs[t]!==e&&(i.logger_("changing "+t+"Buffer codec from "+i.codecs[t]+" to "+e),n.changeType(r),i.codecs[t]=e)}},tl=function(e){var t=e.type,i=e.sourceUpdater,n=e.action,r=e.doneFn,a=e.name;i.queue.push({type:t,action:n,doneFn:r,name:a}),Vo(t,i)},il=function(e,t){return function(i){if(t.queuePending[e]){var n=t.queuePending[e].doneFn;t.queuePending[e]=null,n&&n(t[e+"Error_"])}Vo(e,t)}},nl=function(e){function t(t){var i;return(i=e.call(this)||this).mediaSource=t,i.sourceopenListener_=function(){return Vo("mediaSource",c()(i))},i.mediaSource.addEventListener("sourceopen",i.sourceopenListener_),i.logger_=ko("SourceUpdater"),i.audioTimestampOffset_=0,i.videoTimestampOffset_=0,i.queue=[],i.queuePending={audio:null,video:null},i.delayedAudioAppendQueue_=[],i.videoAppendQueued_=!1,i.codecs={},i.onVideoUpdateEnd_=il("video",c()(i)),i.onAudioUpdateEnd_=il("audio",c()(i)),i.onVideoError_=function(e){i.videoError_=e},i.onAudioError_=function(e){i.audioError_=e},i.started_=!1,i}h()(t,e);var i=t.prototype;return i.ready=function(){return this.started_},i.createSourceBuffers=function(e){this.ready()||(this.addOrChangeSourceBuffers(e),this.started_=!0,this.trigger("ready"))},i.addSourceBuffer=function(e,t){tl({type:"mediaSource",sourceUpdater:this,action:Zo(e,t),name:"addSourceBuffer"})},i.abort=function(e){tl({type:e,sourceUpdater:this,action:Jo(e),name:"abort"})},i.removeSourceBuffer=function(e){this.canRemoveSourceBuffer()?tl({type:"mediaSource",sourceUpdater:this,action:$o(e),name:"removeSourceBuffer"}):Ua.log.error("removeSourceBuffer is not supported!")},i.canRemoveSourceBuffer=function(){return!Ua.browser.IE_VERSION&&r.a.MediaSource&&r.a.MediaSource.prototype&&"function"==typeof r.a.MediaSource.prototype.removeSourceBuffer},t.canChangeType=function(){return r.a.SourceBuffer&&r.a.SourceBuffer.prototype&&"function"==typeof r.a.SourceBuffer.prototype.changeType},i.canChangeType=function(){return this.constructor.canChangeType()},i.changeType=function(e,t){this.canChangeType()?tl({type:e,sourceUpdater:this,action:el(t),name:"changeType"}):Ua.log.error("changeType is not supported!")},i.addOrChangeSourceBuffers=function(e){var t=this;if(!e||"object"!=typeof e||0===Object.keys(e).length)throw new Error("Cannot addOrChangeSourceBuffers to undefined codecs");Object.keys(e).forEach((function(i){var n=e[i];if(!t.ready())return t.addSourceBuffer(i,n);t.canChangeType()&&t.changeType(i,n)}))},i.appendBuffer=function(e,t){var i=this,n=e.segmentInfo,r=e.type,a=e.bytes;if(this.processedAppend_=!0,"audio"===r&&this.videoBuffer&&!this.videoAppendQueued_)return this.delayedAudioAppendQueue_.push([e,t]),void this.logger_("delayed audio append of "+a.length+" until video append");if(tl({type:r,sourceUpdater:this,action:Wo(a,n||{mediaIndex:-1}),doneFn:t,name:"appendBuffer"}),"video"===r){if(this.videoAppendQueued_=!0,!this.delayedAudioAppendQueue_.length)return;var s=this.delayedAudioAppendQueue_.slice();this.logger_("queuing delayed audio "+s.length+" appendBuffers"),this.delayedAudioAppendQueue_.length=0,s.forEach((function(e){i.appendBuffer.apply(i,e)}))}},i.audioBuffered=function(){return qo(this.mediaSource,this.audioBuffer)&&this.audioBuffer.buffered?this.audioBuffer.buffered:Ua.createTimeRange()},i.videoBuffered=function(){return qo(this.mediaSource,this.videoBuffer)&&this.videoBuffer.buffered?this.videoBuffer.buffered:Ua.createTimeRange()},i.buffered=function(){var e=qo(this.mediaSource,this.videoBuffer)?this.videoBuffer:null,t=qo(this.mediaSource,this.audioBuffer)?this.audioBuffer:null;return t&&!e?this.audioBuffered():e&&!t?this.videoBuffered():function(e,t){var i=null,n=null,r=0,a=[],s=[];if(!(e&&e.length&&t&&t.length))return Ua.createTimeRange();for(var o=e.length;o--;)a.push({time:e.start(o),type:"start"}),a.push({time:e.end(o),type:"end"});for(o=t.length;o--;)a.push({time:t.start(o),type:"start"}),a.push({time:t.end(o),type:"end"});for(a.sort((function(e,t){return e.time-t.time})),o=0;o<a.length;o++)"start"===a[o].type?2===++r&&(i=a[o].time):"end"===a[o].type&&1===--r&&(n=a[o].time),null!==i&&null!==n&&(s.push([i,n]),i=null,n=null);return Ua.createTimeRanges(s)}(this.audioBuffered(),this.videoBuffered())},i.setDuration=function(e,t){void 0===t&&(t=Ro),tl({type:"mediaSource",sourceUpdater:this,action:Qo(e),name:"duration",doneFn:t})},i.endOfStream=function(e,t){void 0===e&&(e=null),void 0===t&&(t=Ro),"string"!=typeof e&&(e=void 0),tl({type:"mediaSource",sourceUpdater:this,action:Yo(e),name:"endOfStream",doneFn:t})},i.removeAudio=function(e,t,i){void 0===i&&(i=Ro),this.audioBuffered().length&&0!==this.audioBuffered().end(0)?tl({type:"audio",sourceUpdater:this,action:Go(e,t),doneFn:i,name:"remove"}):i()},i.removeVideo=function(e,t,i){void 0===i&&(i=Ro),this.videoBuffered().length&&0!==this.videoBuffered().end(0)?tl({type:"video",sourceUpdater:this,action:Go(e,t),doneFn:i,name:"remove"}):i()},i.updating=function(){return!(!Bo("audio",this)&&!Bo("video",this))},i.audioTimestampOffset=function(e){return void 0!==e&&this.audioBuffer&&this.audioTimestampOffset_!==e&&(tl({type:"audio",sourceUpdater:this,action:Xo(e),name:"timestampOffset"}),this.audioTimestampOffset_=e),this.audioTimestampOffset_},i.videoTimestampOffset=function(e){return void 0!==e&&this.videoBuffer&&this.videoTimestampOffset!==e&&(tl({type:"video",sourceUpdater:this,action:Xo(e),name:"timestampOffset"}),this.videoTimestampOffset_=e),this.videoTimestampOffset_},i.audioQueueCallback=function(e){this.audioBuffer&&tl({type:"audio",sourceUpdater:this,action:Ko(e),name:"callback"})},i.videoQueueCallback=function(e){this.videoBuffer&&tl({type:"video",sourceUpdater:this,action:Ko(e),name:"callback"})},i.dispose=function(){var e=this;this.trigger("dispose"),Fo.forEach((function(t){e.abort(t),e.canRemoveSourceBuffer()?e.removeSourceBuffer(t):e[t+"QueueCallback"]((function(){return Ho(t,e)}))})),this.videoAppendQueued_=!1,this.delayedAudioAppendQueue_.length=0,this.sourceopenListener_&&this.mediaSource.removeEventListener("sourceopen",this.sourceopenListener_),this.off()},t}(Ua.EventTarget),rl=function(e){return decodeURIComponent(escape(String.fromCharCode.apply(null,e)))},al=new Uint8Array("\n\n".split("").map((function(e){return e.charCodeAt(0)}))),sl=function(e){function t(t,i){var n;return void 0===i&&(i={}),(n=e.call(this,t,i)||this).handlePartialData_=!1,n.mediaSource_=null,n.subtitlesTrack_=null,n.loaderType_="subtitle",n.featuresNativeTextTracks_=t.featuresNativeTextTracks,n.shouldSaveSegmentTimingInfo_=!1,n}h()(t,e);var i=t.prototype;return i.createTransmuxer_=function(){return null},i.buffered_=function(){if(!this.subtitlesTrack_||!this.subtitlesTrack_.cues.length)return Ua.createTimeRanges();var e=this.subtitlesTrack_.cues,t=e[0].startTime,i=e[e.length-1].startTime;return Ua.createTimeRanges([[t,i]])},i.initSegmentForMap=function(e,t){if(void 0===t&&(t=!1),!e)return null;var i=As(e),n=this.initSegments_[i];if(t&&!n&&e.bytes){var r=al.byteLength+e.bytes.byteLength,a=new Uint8Array(r);a.set(e.bytes),a.set(al,e.bytes.byteLength),this.initSegments_[i]=n={resolvedUri:e.resolvedUri,byterange:e.byterange,bytes:a}}return n||e},i.couldBeginLoading_=function(){return this.playlist_&&this.subtitlesTrack_&&!this.paused()},i.init_=function(){return this.state="READY",this.resetEverything(),this.monitorBuffer_()},i.track=function(e){return void 0===e||(this.subtitlesTrack_=e,"INIT"===this.state&&this.couldBeginLoading_()&&this.init_()),this.subtitlesTrack_},i.remove=function(e,t){Po(e,t,this.subtitlesTrack_)},i.fillBuffer_=function(){var e=this;this.syncPoint_||(this.syncPoint_=this.syncController_.getSyncPoint(this.playlist_,this.duration_(),this.currentTimeline_,this.currentTime_()));var t=this.checkBuffer_(this.buffered_(),this.playlist_,this.mediaIndex,this.hasPlayed_(),this.currentTime_(),this.syncPoint_);if(t=this.skipEmptySegments_(t)){if(null===this.syncController_.timestampOffsetForTimeline(t.timeline)){return this.syncController_.one("timestampoffset",(function(){e.state="READY",e.paused()||e.monitorBuffer_()})),void(this.state="WAITING_ON_TIMELINE")}this.loadSegment_(t)}},i.skipEmptySegments_=function(e){for(;e&&e.segment.empty;)e=this.generateSegmentInfo_(e.playlist,e.mediaIndex+1,e.startOfSegment+e.duration,e.isSyncRequest);return e},i.stopForError=function(e){this.error(e),this.state="READY",this.pause(),this.trigger("error")},i.segmentRequestFinished_=function(e,t,i){var n=this;if(this.subtitlesTrack_){if(this.saveTransferStats_(t.stats),!this.pendingSegment_)return this.state="READY",void(this.mediaRequestsAborted+=1);if(e)return e.code===to&&this.handleTimeout_(),e.code===io?this.mediaRequestsAborted+=1:this.mediaRequestsErrored+=1,void this.stopForError(e);this.saveBandwidthRelatedStats_(t.stats),this.state="APPENDING",this.trigger("appending");var a=this.pendingSegment_,s=a.segment;if(s.map&&(s.map.bytes=t.map.bytes),a.bytes=t.bytes,"function"!=typeof r.a.WebVTT&&this.subtitlesTrack_&&this.subtitlesTrack_.tech_){var o,l=function(){n.subtitlesTrack_.tech_.off("vttjsloaded",o),n.stopForError({message:"Error loading vtt.js"})};return o=function(){n.subtitlesTrack_.tech_.off("vttjserror",l),n.segmentRequestFinished_(e,t,i)},this.state="WAITING_ON_VTTJS",this.subtitlesTrack_.tech_.one("vttjsloaded",o),void this.subtitlesTrack_.tech_.one("vttjserror",l)}s.requested=!0;try{this.parseVTTCues_(a)}catch(e){return void this.stopForError({message:e.message})}if(this.updateTimeMapping_(a,this.syncController_.timelines[a.timeline],this.playlist_),a.cues.length?a.timingInfo={start:a.cues[0].startTime,end:a.cues[a.cues.length-1].endTime}:a.timingInfo={start:a.startOfSegment,end:a.startOfSegment+a.duration},a.isSyncRequest)return this.trigger("syncinfoupdate"),this.pendingSegment_=null,void(this.state="READY");a.byteLength=a.bytes.byteLength,this.mediaSecondsLoaded+=s.duration,a.cues.forEach((function(e){n.remove(e.startTime,e.endTime),n.subtitlesTrack_.addCue(n.featuresNativeTextTracks_?new r.a.VTTCue(e.startTime,e.endTime,e.text):e)})),this.handleAppendsDone_()}else this.state="READY"},i.handleData_=function(){},i.updateTimingInfoEnd_=function(){},i.parseVTTCues_=function(e){var t,i=!1;"function"==typeof r.a.TextDecoder?t=new r.a.TextDecoder("utf8"):(t=r.a.WebVTT.StringDecoder(),i=!0);var n=new r.a.WebVTT.Parser(r.a,r.a.vttjs,t);if(e.cues=[],e.timestampmap={MPEGTS:0,LOCAL:0},n.oncue=e.cues.push.bind(e.cues),n.ontimestampmap=function(t){e.timestampmap=t},n.onparsingerror=function(e){Ua.log.warn("Error encountered when parsing cues: "+e.message)},e.segment.map){var a=e.segment.map.bytes;i&&(a=rl(a)),n.parse(a)}var s=e.bytes;i&&(s=rl(s)),n.parse(s),n.flush()},i.updateTimeMapping_=function(e,t,i){var n=e.segment;if(t)if(e.cues.length){var r=e.timestampmap,a=r.MPEGTS/Oe.ONE_SECOND_IN_TS-r.LOCAL+t.mapping;if(e.cues.forEach((function(e){e.startTime+=a,e.endTime+=a})),!i.syncInfo){var s=e.cues[0].startTime,o=e.cues[e.cues.length-1].startTime;i.syncInfo={mediaSequence:i.mediaSequence+e.mediaIndex,time:Math.min(s,o-n.duration)}}}else n.empty=!0},t}(No),ol=function(e,t){for(var i=e.cues,n=0;n<i.length;n++){var r=i[n];if(t>=r.adStartTime&&t<=r.adEndTime)return r}return null},ll=[{name:"VOD",run:function(e,t,i,n,r){if(i!==1/0){return{time:0,segmentIndex:0}}return null}},{name:"ProgramDateTime",run:function(e,t,i,n,r){if(!e.datetimeToDisplayTime)return null;var a=t.segments||[],s=null,o=null;r=r||0;for(var l=0;l<a.length;l++){var u=a[l];if(u.dateTimeObject){var c=u.dateTimeObject.getTime()/1e3+e.datetimeToDisplayTime,d=Math.abs(r-c);if(null!==o&&(0===d||o<d))break;o=d,s={time:c,segmentIndex:l}}}return s}},{name:"Segment",run:function(e,t,i,n,r){var a=t.segments||[],s=null,o=null;r=r||0;for(var l=0;l<a.length;l++){var u=a[l];if(u.timeline===n&&void 0!==u.start){var c=Math.abs(r-u.start);if(null!==o&&o<c)break;(!s||null===o||o>=c)&&(o=c,s={time:u.start,segmentIndex:l})}}return s}},{name:"Discontinuity",run:function(e,t,i,n,r){var a=null;if(r=r||0,t.discontinuityStarts&&t.discontinuityStarts.length)for(var s=null,o=0;o<t.discontinuityStarts.length;o++){var l=t.discontinuityStarts[o],u=t.discontinuitySequence+o+1,c=e.discontinuities[u];if(c){var d=Math.abs(r-c.time);if(null!==s&&s<d)break;(!a||null===s||s>=d)&&(s=d,a={time:c.time,segmentIndex:l})}}return a}},{name:"Playlist",run:function(e,t,i,n,r){return t.syncInfo?{time:t.syncInfo.time,segmentIndex:t.syncInfo.mediaSequence-t.mediaSequence}:null}}],ul=function(e){function t(t){var i;return(i=e.call(this)||this).timelines=[],i.discontinuities=[],i.datetimeToDisplayTime=null,i.logger_=ko("SyncController"),i}h()(t,e);var i=t.prototype;return i.getSyncPoint=function(e,t,i,n){var r=this.runStrategies_(e,t,i,n);return r.length?this.selectSyncPoint_(r,{key:"time",value:n}):null},i.getExpiredTime=function(e,t){if(!e||!e.segments)return null;var i=this.runStrategies_(e,t,e.discontinuitySequence,0);if(!i.length)return null;var n=this.selectSyncPoint_(i,{key:"segmentIndex",value:0});return n.segmentIndex>0&&(n.time*=-1),Math.abs(n.time+cs(e,n.segmentIndex,0))},i.runStrategies_=function(e,t,i,n){for(var r=[],a=0;a<ll.length;a++){var s=ll[a],o=s.run(this,e,t,i,n);o&&(o.strategy=s.name,r.push({strategy:s.name,syncPoint:o}))}return r},i.selectSyncPoint_=function(e,t){for(var i=e[0].syncPoint,n=Math.abs(e[0].syncPoint[t.key]-t.value),r=e[0].strategy,a=1;a<e.length;a++){var s=Math.abs(e[a].syncPoint[t.key]-t.value);s<n&&(n=s,i=e[a].syncPoint,r=e[a].strategy)}return this.logger_("syncPoint for ["+t.key+": "+t.value+"] chosen with strategy ["+r+"]: [time:"+i.time+", segmentIndex:"+i.segmentIndex+"]"),i},i.saveExpiredSegmentInfo=function(e,t){for(var i=t.mediaSequence-e.mediaSequence-1;i>=0;i--){var n=e.segments[i];if(n&&void 0!==n.start){t.syncInfo={mediaSequence:e.mediaSequence+i,time:n.start},this.logger_("playlist refresh sync: [time:"+t.syncInfo.time+", mediaSequence: "+t.syncInfo.mediaSequence+"]"),this.trigger("syncinfoupdate");break}}},i.setDateTimeMapping=function(e){if(!this.datetimeToDisplayTime&&e.segments&&e.segments.length&&e.segments[0].dateTimeObject){var t=e.segments[0].dateTimeObject.getTime()/1e3;this.datetimeToDisplayTime=-t}},i.saveSegmentTimingInfo=function(e){var t=e.segmentInfo,i=e.shouldSaveTimelineMapping;this.calculateSegmentTimeMapping_(t,t.timingInfo,i)&&(this.saveDiscontinuitySyncInfo_(t),t.playlist.syncInfo||(t.playlist.syncInfo={mediaSequence:t.playlist.mediaSequence+t.mediaIndex,time:t.segment.start}))},i.timestampOffsetForTimeline=function(e){return void 0===this.timelines[e]?null:this.timelines[e].time},i.mappingForTimeline=function(e){return void 0===this.timelines[e]?null:this.timelines[e].mapping},i.calculateSegmentTimeMapping_=function(e,t,i){var n=e.segment,r=this.timelines[e.timeline];if(null!==e.timestampOffset)r={time:e.startOfSegment,mapping:e.startOfSegment-t.start},i&&(this.timelines[e.timeline]=r,this.trigger("timestampoffset"),this.logger_("time mapping for timeline "+e.timeline+": [time: "+r.time+"] [mapping: "+r.mapping+"]")),n.start=e.startOfSegment,n.end=t.end+r.mapping;else{if(!r)return!1;n.start=t.start+r.mapping,n.end=t.end+r.mapping}return!0},i.saveDiscontinuitySyncInfo_=function(e){var t=e.playlist,i=e.segment;if(i.discontinuity)this.discontinuities[i.timeline]={time:i.start,accuracy:0};else if(t.discontinuityStarts&&t.discontinuityStarts.length)for(var n=0;n<t.discontinuityStarts.length;n++){var r=t.discontinuityStarts[n],a=t.discontinuitySequence+n+1,s=r-e.mediaIndex,o=Math.abs(s);if(!this.discontinuities[a]||this.discontinuities[a].accuracy>o){var l=void 0;l=s<0?i.start-cs(t,e.mediaIndex,r):i.end+cs(t,e.mediaIndex+1,r),this.discontinuities[a]={time:l,accuracy:o}}}},i.dispose=function(){this.trigger("dispose"),this.off()},t}(Ua.EventTarget),cl=function(e){function t(){var t;return(t=e.call(this)||this).pendingTimelineChanges_={},t.lastTimelineChanges_={},t}h()(t,e);var i=t.prototype;return i.clearPendingTimelineChange=function(e){this.pendingTimelineChanges_[e]=null,this.trigger("pendingtimelinechange")},i.pendingTimelineChange=function(e){var t=e.type,i=e.from,n=e.to;return"number"==typeof i&&"number"==typeof n&&(this.pendingTimelineChanges_[t]={type:t,from:i,to:n},this.trigger("pendingtimelinechange")),this.pendingTimelineChanges_[t]},i.lastTimelineChange=function(e){var t=e.type,i=e.from,n=e.to;return"number"==typeof i&&"number"==typeof n&&(this.lastTimelineChanges_[t]={type:t,from:i,to:n},delete this.pendingTimelineChanges_[t],this.trigger("timelinechange")),this.lastTimelineChanges_[t]},i.dispose=function(){this.trigger("dispose"),this.pendingTimelineChanges_={},this.lastTimelineChanges_={},this.off()},t}(Ua.EventTarget),dl=new go("./decrypter-worker.worker.js",(function(e,t){var i=this;
/*! @name @videojs/http-streaming @version 2.2.4 @license Apache-2.0 */!function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var t=function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t};var n=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t},r=function(){function e(){this.listeners={}}var t=e.prototype;return t.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)},t.off=function(e,t){if(!this.listeners[e])return!1;var i=this.listeners[e].indexOf(t);return this.listeners[e]=this.listeners[e].slice(0),this.listeners[e].splice(i,1),i>-1},t.trigger=function(e){var t=this.listeners[e];if(t)if(2===arguments.length)for(var i=t.length,n=0;n<i;++n)t[n].call(this,arguments[1]);else for(var r=Array.prototype.slice.call(arguments,1),a=t.length,s=0;s<a;++s)t[s].apply(this,r)},t.dispose=function(){this.listeners={}},t.pipe=function(e){this.on("data",(function(t){e.push(t)}))},e}();
/*! @name @videojs/vhs-utils @version 2.2.1 @license MIT */
/*! @name aes-decrypter @version 3.1.0 @license Apache-2.0 */
var a=null,s=function(){function e(e){var t,i,n;a||(a=function(){var e,t,i,n,r,a,s,o,l=[[[],[],[],[],[]],[[],[],[],[],[]]],u=l[0],c=l[1],d=u[4],h=c[4],p=[],f=[];for(e=0;e<256;e++)f[(p[e]=e<<1^283*(e>>7))^e]=e;for(t=i=0;!d[t];t^=n||1,i=f[i]||1)for(a=(a=i^i<<1^i<<2^i<<3^i<<4)>>8^255&a^99,d[t]=a,h[a]=t,o=16843009*p[r=p[n=p[t]]]^65537*r^257*n^16843008*t,s=257*p[a]^16843008*a,e=0;e<4;e++)u[e][t]=s=s<<24^s>>>8,c[e][a]=o=o<<24^o>>>8;for(e=0;e<5;e++)u[e]=u[e].slice(0),c[e]=c[e].slice(0);return l}()),this._tables=[[a[0][0].slice(),a[0][1].slice(),a[0][2].slice(),a[0][3].slice(),a[0][4].slice()],[a[1][0].slice(),a[1][1].slice(),a[1][2].slice(),a[1][3].slice(),a[1][4].slice()]];var r=this._tables[0][4],s=this._tables[1],o=e.length,l=1;if(4!==o&&6!==o&&8!==o)throw new Error("Invalid aes key size");var u=e.slice(0),c=[];for(this._key=[u,c],t=o;t<4*o+28;t++)n=u[t-1],(t%o==0||8===o&&t%o==4)&&(n=r[n>>>24]<<24^r[n>>16&255]<<16^r[n>>8&255]<<8^r[255&n],t%o==0&&(n=n<<8^n>>>24^l<<24,l=l<<1^283*(l>>7))),u[t]=u[t-o]^n;for(i=0;t;i++,t--)n=u[3&i?t:t-4],c[i]=t<=4||i<4?n:s[0][r[n>>>24]]^s[1][r[n>>16&255]]^s[2][r[n>>8&255]]^s[3][r[255&n]]}return e.prototype.decrypt=function(e,t,i,n,r,a){var s,o,l,u,c=this._key[1],d=e^c[0],h=n^c[1],p=i^c[2],f=t^c[3],m=c.length/4-2,g=4,v=this._tables[1],y=v[0],_=v[1],b=v[2],T=v[3],S=v[4];for(u=0;u<m;u++)s=y[d>>>24]^_[h>>16&255]^b[p>>8&255]^T[255&f]^c[g],o=y[h>>>24]^_[p>>16&255]^b[f>>8&255]^T[255&d]^c[g+1],l=y[p>>>24]^_[f>>16&255]^b[d>>8&255]^T[255&h]^c[g+2],f=y[f>>>24]^_[d>>16&255]^b[h>>8&255]^T[255&p]^c[g+3],g+=4,d=s,h=o,p=l;for(u=0;u<4;u++)r[(3&-u)+a]=S[d>>>24]<<24^S[h>>16&255]<<16^S[p>>8&255]<<8^S[255&f]^c[g++],s=d,d=h,h=p,p=f,f=s},e}(),o=function(e){function t(){var t;return(t=e.call(this,r)||this).jobs=[],t.delay=1,t.timeout_=null,t}n(t,e);var i=t.prototype;return i.processJob_=function(){this.jobs.shift()(),this.jobs.length?this.timeout_=setTimeout(this.processJob_.bind(this),this.delay):this.timeout_=null},i.push=function(e){this.jobs.push(e),this.timeout_||(this.timeout_=setTimeout(this.processJob_.bind(this),this.delay))},t}(r),l=function(e){return e<<24|(65280&e)<<8|(16711680&e)>>8|e>>>24},u=function(){function e(t,i,n,r){var a=e.STEP,s=new Int32Array(t.buffer),u=new Uint8Array(t.byteLength),c=0;for(this.asyncStream_=new o,this.asyncStream_.push(this.decryptChunk_(s.subarray(c,c+a),i,n,u)),c=a;c<s.length;c+=a)n=new Uint32Array([l(s[c-4]),l(s[c-3]),l(s[c-2]),l(s[c-1])]),this.asyncStream_.push(this.decryptChunk_(s.subarray(c,c+a),i,n,u));this.asyncStream_.push((function(){
/*! @name pkcs7 @version 1.0.4 @license Apache-2.0 */
var e;r(null,(e=u).subarray(0,e.byteLength-e[e.byteLength-1]))}))}return e.prototype.decryptChunk_=function(e,t,i,n){return function(){var r=function(e,t,i){var n,r,a,o,u,c,d,h,p,f=new Int32Array(e.buffer,e.byteOffset,e.byteLength>>2),m=new s(Array.prototype.slice.call(t)),g=new Uint8Array(e.byteLength),v=new Int32Array(g.buffer);for(n=i[0],r=i[1],a=i[2],o=i[3],p=0;p<f.length;p+=4)u=l(f[p]),c=l(f[p+1]),d=l(f[p+2]),h=l(f[p+3]),m.decrypt(u,c,d,h,v,p),v[p]=l(v[p]^n),v[p+1]=l(v[p+1]^r),v[p+2]=l(v[p+2]^a),v[p+3]=l(v[p+3]^o),n=u,r=c,a=d,o=h;return g}(e,t,i);n.set(r,e.byteOffset)}},t(e,null,[{key:"STEP",get:function(){return 32e3}}]),e}();new function(e){e.onmessage=function(t){var i=t.data,n=new Uint8Array(i.encrypted.bytes,i.encrypted.byteOffset,i.encrypted.byteLength),r=new Uint32Array(i.key.bytes,i.key.byteOffset,i.key.byteLength/4),a=new Uint32Array(i.iv.bytes,i.iv.byteOffset,i.iv.byteLength/4);new u(n,r,a,(function(t,n){var r,a;e.postMessage((r={source:i.source,decrypted:n},a={},Object.keys(r).forEach((function(e){var t=r[e];ArrayBuffer.isView(t)?a[e]={bytes:t.buffer,byteOffset:t.byteOffset,byteLength:t.byteLength}:a[e]=t})),a),[n.buffer])}))}}(i)}()})),hl=function(e){var t=e.default?"main":"alternative";return e.characteristics&&e.characteristics.indexOf("public.accessibility.describes-video")>=0&&(t="main-desc"),t},pl=function(e,t){e.abort(),e.pause(),t&&t.activePlaylistLoader&&(t.activePlaylistLoader.pause(),t.activePlaylistLoader=null)},fl=function(e,t){t.activePlaylistLoader=e,e.load()},ml={AUDIO:function(e,t){return function(){var i=t.segmentLoaders[e],n=t.mediaTypes[e],r=t.blacklistCurrentPlaylist;pl(i,n);var a=n.activeTrack(),s=n.activeGroup(),o=(s.filter((function(e){return e.default}))[0]||s[0]).id,l=n.tracks[o];if(a!==l){for(var u in Ua.log.warn("Problem encountered loading the alternate audio track.Switching back to default."),n.tracks)n.tracks[u].enabled=n.tracks[u]===l;n.onTrackChanged()}else r({message:"Problem encountered loading the default audio track."})}},SUBTITLES:function(e,t){return function(){var i=t.segmentLoaders[e],n=t.mediaTypes[e];Ua.log.warn("Problem encountered loading the subtitle track.Disabling subtitle track."),pl(i,n);var r=n.activeTrack();r&&(r.mode="disabled"),n.onTrackChanged()}}},gl={AUDIO:function(e,t,i){if(t){var n=i.tech,r=i.requestOptions,a=i.segmentLoaders[e];t.on("loadedmetadata",(function(){var e=t.media();a.playlist(e,r),(!n.paused()||e.endList&&"none"!==n.preload())&&a.load()})),t.on("loadedplaylist",(function(){a.playlist(t.media(),r),n.paused()||a.load()})),t.on("error",ml[e](e,i))}},SUBTITLES:function(e,t,i){var n=i.tech,r=i.requestOptions,a=i.segmentLoaders[e],s=i.mediaTypes[e];t.on("loadedmetadata",(function(){var e=t.media();a.playlist(e,r),a.track(s.activeTrack()),(!n.paused()||e.endList&&"none"!==n.preload())&&a.load()})),t.on("loadedplaylist",(function(){a.playlist(t.media(),r),n.paused()||a.load()})),t.on("error",ml[e](e,i))}},vl={AUDIO:function(e,t){var i=t.vhs,n=t.sourceType,r=t.segmentLoaders[e],a=t.requestOptions,s=t.master,o=s.mediaGroups,l=s.playlists,u=t.mediaTypes[e],c=u.groups,d=u.tracks,h=t.masterPlaylistLoader;o[e]&&0!==Object.keys(o[e]).length||(o[e]={main:{default:{default:!0}}});var p=function(r){c[r]||(c[r]=[]);var s=l.filter((function(t){return t.attributes[e]===r})),u=function(l){var u=o[e][r][l];s.filter((function(e){return e.resolvedUri===u.resolvedUri})).length&&delete u.resolvedUri;var p=void 0;if(p="vhs-json"===n&&u.playlists?new ts(u.playlists[0],i,a):u.resolvedUri?new ts(u.resolvedUri,i,a):u.playlists&&"dash"===n?new Vs(u.playlists[0],i,a,h):null,u=Ua.mergeOptions({id:l,playlistLoader:p},u),gl[e](e,u.playlistLoader,t),c[r].push(u),void 0===d[l]){var f=new Ua.AudioTrack({id:l,kind:hl(u),enabled:!1,language:u.language,default:u.default,label:l});d[l]=f}};for(var p in o[e][r])u(p)};for(var f in o[e])p(f);r.on("error",ml[e](e,t))},SUBTITLES:function(e,t){var i=t.tech,n=t.vhs,r=t.sourceType,a=t.segmentLoaders[e],s=t.requestOptions,o=t.master.mediaGroups,l=t.mediaTypes[e],u=l.groups,c=l.tracks,d=t.masterPlaylistLoader;for(var h in o[e])for(var p in u[h]||(u[h]=[]),o[e][h])if(!o[e][h][p].forced){var f=o[e][h][p],m=void 0;if("hls"===r?m=new ts(f.resolvedUri,n,s):"dash"===r?m=new Vs(f.playlists[0],n,s,d):"vhs-json"===r&&(m=new ts(f.playlists?f.playlists[0]:f.resolvedUri,n,s)),f=Ua.mergeOptions({id:p,playlistLoader:m},f),gl[e](e,f.playlistLoader,t),u[h].push(f),void 0===c[p]){var g=i.addRemoteTextTrack({id:p,kind:"subtitles",default:f.default&&f.autoselect,language:f.language,label:p},!1).track;c[p]=g}}a.on("error",ml[e](e,t))},"CLOSED-CAPTIONS":function(e,t){var i=t.tech,n=t.master.mediaGroups,r=t.mediaTypes[e],a=r.groups,s=r.tracks;for(var o in n[e])for(var l in a[o]||(a[o]=[]),n[e][o]){var u=n[e][o][l];if(u.instreamId.match(/CC\d/)&&(a[o].push(Ua.mergeOptions({id:l},u)),void 0===s[l])){var c=i.addRemoteTextTrack({id:u.instreamId,kind:"captions",default:u.default&&u.autoselect,language:u.language,label:l},!1).track;s[l]=c}}}},yl={AUDIO:function(e,t){return function(){var i=t.mediaTypes[e].tracks;for(var n in i)if(i[n].enabled)return i[n];return null}},SUBTITLES:function(e,t){return function(){var i=t.mediaTypes[e].tracks;for(var n in i)if("showing"===i[n].mode||"hidden"===i[n].mode)return i[n];return null}}},_l=function(e){["AUDIO","SUBTITLES","CLOSED-CAPTIONS"].forEach((function(t){vl[t](t,e)}));var t=e.mediaTypes,i=e.masterPlaylistLoader,n=e.tech,r=e.vhs;["AUDIO","SUBTITLES"].forEach((function(i){t[i].activeGroup=function(e,t){return function(i){var n=t.masterPlaylistLoader,r=t.mediaTypes[e].groups,a=n.media();if(!a)return null;var s=null;return a.attributes[e]&&(s=r[a.attributes[e]]),s=s||r.main,void 0===i?s:null===i?null:s.filter((function(e){return e.id===i.id}))[0]||null}}(i,e),t[i].activeTrack=yl[i](i,e),t[i].onGroupChanged=function(e,t){return function(){var i=t.segmentLoaders,n=i[e],r=i.main,a=t.mediaTypes[e],s=a.activeTrack(),o=a.activeGroup(s),l=a.activePlaylistLoader;pl(n,a),o&&(o.playlistLoader?(n.resyncLoader(),fl(o.playlistLoader,a)):l&&r.resetEverything())}}(i,e),t[i].onGroupChanging=function(e,t){return function(){var i=t.segmentLoaders[e];i.abort(),i.pause()}}(i,e),t[i].onTrackChanged=function(e,t){return function(){var i=t.segmentLoaders,n=i[e],r=i.main,a=t.mediaTypes[e],s=a.activeTrack(),o=a.activeGroup(s),l=a.activePlaylistLoader;if(pl(n,a),o){if("AUDIO"===e){if(!o.playlistLoader)return r.setAudio(!0),void r.resetEverything();n.setAudio(!0),r.setAudio(!1)}l!==o.playlistLoader?(n.track&&n.track(s),n.resetEverything(),fl(o.playlistLoader,a)):fl(o.playlistLoader,a)}}}(i,e)}));var a=t.AUDIO.activeGroup();if(a){var s=(a.filter((function(e){return e.default}))[0]||a[0]).id;t.AUDIO.tracks[s].enabled=!0,t.AUDIO.onTrackChanged()}i.on("mediachange",(function(){["AUDIO","SUBTITLES"].forEach((function(e){return t[e].onGroupChanged()}))})),i.on("mediachanging",(function(){["AUDIO","SUBTITLES"].forEach((function(e){return t[e].onGroupChanging()}))}));var o=function(){t.AUDIO.onTrackChanged(),n.trigger({type:"usage",name:"vhs-audio-change"}),n.trigger({type:"usage",name:"hls-audio-change"})};for(var l in n.audioTracks().addEventListener("change",o),n.remoteTextTracks().addEventListener("change",t.SUBTITLES.onTrackChanged),r.on("dispose",(function(){n.audioTracks().removeEventListener("change",o),n.remoteTextTracks().removeEventListener("change",t.SUBTITLES.onTrackChanged)})),n.clearTracks("audio"),t.AUDIO.tracks)n.audioTracks().addTrack(t.AUDIO.tracks[l])},bl=["mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaBytesTransferred"],Tl=function(e){return this.audioSegmentLoader_[e]+this.mainSegmentLoader_[e]},Sl=function(e){function t(t){var i;i=e.call(this)||this;var n,a=t.src,s=t.handleManifestRedirects,o=t.withCredentials,l=t.tech,u=t.bandwidth,d=t.externVhs,h=t.useCueTags,p=t.blacklistDuration,f=t.enableLowInitialPlaylist,m=t.sourceType,g=t.cacheEncryptionKeys,v=t.handlePartialData;if(!a)throw new Error("A non-empty playlist URL or JSON manifest string is required");Uo=d,i.withCredentials=o,i.tech_=l,i.vhs_=l.vhs,i.sourceType_=m,i.useCueTags_=h,i.blacklistDuration=p,i.enableLowInitialPlaylist=f,i.useCueTags_&&(i.cueTagsTrack_=i.tech_.addTextTrack("metadata","ad-cues"),i.cueTagsTrack_.inBandMetadataTrackDispatchType=""),i.requestOptions_={withCredentials:o,handleManifestRedirects:s,timeout:null},i.on("error",i.pauseLoading),i.mediaTypes_=(n={},["AUDIO","SUBTITLES","CLOSED-CAPTIONS"].forEach((function(e){n[e]={groups:{},tracks:{},activePlaylistLoader:null,activeGroup:Ro,activeTrack:Ro,onGroupChanged:Ro,onTrackChanged:Ro}})),n),i.mediaSource=new r.a.MediaSource,i.handleDurationChange_=i.handleDurationChange_.bind(c()(i)),i.handleSourceOpen_=i.handleSourceOpen_.bind(c()(i)),i.handleSourceEnded_=i.handleSourceEnded_.bind(c()(i)),i.mediaSource.addEventListener("durationchange",i.handleDurationChange_),i.mediaSource.addEventListener("sourceopen",i.handleSourceOpen_),i.mediaSource.addEventListener("sourceended",i.handleSourceEnded_),i.seekable_=Ua.createTimeRanges(),i.hasPlayed_=!1,i.syncController_=new ul(t),i.segmentMetadataTrack_=l.addRemoteTextTrack({kind:"metadata",label:"segment-metadata"},!1).track,i.decrypter_=new dl,i.sourceUpdater_=new nl(i.mediaSource),i.inbandTextTracks_={},i.timelineChangeController_=new cl;var y={vhs:i.vhs_,mediaSource:i.mediaSource,currentTime:i.tech_.currentTime.bind(i.tech_),seekable:function(){return i.seekable()},seeking:function(){return i.tech_.seeking()},duration:function(){return i.duration()},hasPlayed:function(){return i.hasPlayed_},goalBufferLength:function(){return i.goalBufferLength()},bandwidth:u,syncController:i.syncController_,decrypter:i.decrypter_,sourceType:i.sourceType_,inbandTextTracks:i.inbandTextTracks_,cacheEncryptionKeys:g,handlePartialData:v,sourceUpdater:i.sourceUpdater_,timelineChangeController:i.timelineChangeController_};return i.masterPlaylistLoader_="dash"===i.sourceType_?new Vs(a,i.vhs_,i.requestOptions_):new ts(a,i.vhs_,i.requestOptions_),i.setupMasterPlaylistLoaderListeners_(),i.mainSegmentLoader_=new No(Ua.mergeOptions(y,{segmentMetadataTrack:i.segmentMetadataTrack_,loaderType:"main"}),t),i.audioSegmentLoader_=new No(Ua.mergeOptions(y,{loaderType:"audio"}),t),i.subtitleSegmentLoader_=new sl(Ua.mergeOptions(y,{loaderType:"vtt",featuresNativeTextTracks:i.tech_.featuresNativeTextTracks}),t),i.setupSegmentLoaderListeners_(),bl.forEach((function(e){i[e+"_"]=Tl.bind(c()(i),e)})),i.logger_=ko("MPC"),i.triggeredFmp4Usage=!1,i.masterPlaylistLoader_.load(),i}h()(t,e);var i=t.prototype;return i.setupMasterPlaylistLoaderListeners_=function(){var e=this;this.masterPlaylistLoader_.on("loadedmetadata",(function(){var t=e.masterPlaylistLoader_.media(),i=1.5*t.targetDuration*1e3;vs(e.masterPlaylistLoader_.master,e.masterPlaylistLoader_.media())?e.requestOptions_.timeout=0:e.requestOptions_.timeout=i,t.endList&&"none"!==e.tech_.preload()&&(e.mainSegmentLoader_.playlist(t,e.requestOptions_),e.mainSegmentLoader_.load()),_l({sourceType:e.sourceType_,segmentLoaders:{AUDIO:e.audioSegmentLoader_,SUBTITLES:e.subtitleSegmentLoader_,main:e.mainSegmentLoader_},tech:e.tech_,requestOptions:e.requestOptions_,masterPlaylistLoader:e.masterPlaylistLoader_,vhs:e.vhs_,master:e.master(),mediaTypes:e.mediaTypes_,blacklistCurrentPlaylist:e.blacklistCurrentPlaylist.bind(e)}),e.triggerPresenceUsage_(e.master(),t),e.setupFirstPlay(),!e.mediaTypes_.AUDIO.activePlaylistLoader||e.mediaTypes_.AUDIO.activePlaylistLoader.media()?e.trigger("selectedinitialmedia"):e.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata",(function(){e.trigger("selectedinitialmedia")}))})),this.masterPlaylistLoader_.on("loadedplaylist",(function(){var t=e.masterPlaylistLoader_.media();if(!t){var i;if(e.excludeUnsupportedVariants_(),e.enableLowInitialPlaylist&&(i=e.selectInitialPlaylist()),i||(i=e.selectPlaylist()),e.initialMedia_=i,e.masterPlaylistLoader_.media(e.initialMedia_),!("vhs-json"===e.sourceType_&&e.initialMedia_.segments))return;t=e.initialMedia_}e.handleUpdatedMediaPlaylist(t)})),this.masterPlaylistLoader_.on("error",(function(){e.blacklistCurrentPlaylist(e.masterPlaylistLoader_.error)})),this.masterPlaylistLoader_.on("mediachanging",(function(){e.mainSegmentLoader_.abort(),e.mainSegmentLoader_.pause()})),this.masterPlaylistLoader_.on("mediachange",(function(){var t=e.masterPlaylistLoader_.media(),i=1.5*t.targetDuration*1e3;vs(e.masterPlaylistLoader_.master,e.masterPlaylistLoader_.media())?e.requestOptions_.timeout=0:e.requestOptions_.timeout=i,e.mainSegmentLoader_.playlist(t,e.requestOptions_),e.mainSegmentLoader_.load(),e.tech_.trigger({type:"mediachange",bubbles:!0})})),this.masterPlaylistLoader_.on("playlistunchanged",(function(){var t=e.masterPlaylistLoader_.media();e.stuckAtPlaylistEnd_(t)&&(e.blacklistCurrentPlaylist({message:"Playlist no longer updating."}),e.tech_.trigger("playliststuck"))})),this.masterPlaylistLoader_.on("renditiondisabled",(function(){e.tech_.trigger({type:"usage",name:"vhs-rendition-disabled"}),e.tech_.trigger({type:"usage",name:"hls-rendition-disabled"})})),this.masterPlaylistLoader_.on("renditionenabled",(function(){e.tech_.trigger({type:"usage",name:"vhs-rendition-enabled"}),e.tech_.trigger({type:"usage",name:"hls-rendition-enabled"})}))},i.handleUpdatedMediaPlaylist=function(e){this.useCueTags_&&this.updateAdCues_(e),this.mainSegmentLoader_.playlist(e,this.requestOptions_),this.updateDuration(!e.endList),this.tech_.paused()||(this.mainSegmentLoader_.load(),this.audioSegmentLoader_&&this.audioSegmentLoader_.load())},i.triggerPresenceUsage_=function(e,t){var i=e.mediaGroups||{},n=!0,r=Object.keys(i.AUDIO);for(var a in i.AUDIO)for(var s in i.AUDIO[a]){i.AUDIO[a][s].uri||(n=!1)}n&&(this.tech_.trigger({type:"usage",name:"vhs-demuxed"}),this.tech_.trigger({type:"usage",name:"hls-demuxed"})),Object.keys(i.SUBTITLES).length&&(this.tech_.trigger({type:"usage",name:"vhs-webvtt"}),this.tech_.trigger({type:"usage",name:"hls-webvtt"})),Uo.Playlist.isAes(t)&&(this.tech_.trigger({type:"usage",name:"vhs-aes"}),this.tech_.trigger({type:"usage",name:"hls-aes"})),r.length&&Object.keys(i.AUDIO[r[0]]).length>1&&(this.tech_.trigger({type:"usage",name:"vhs-alternate-audio"}),this.tech_.trigger({type:"usage",name:"hls-alternate-audio"})),this.useCueTags_&&(this.tech_.trigger({type:"usage",name:"vhs-playlist-cue-tags"}),this.tech_.trigger({type:"usage",name:"hls-playlist-cue-tags"}))},i.setupSegmentLoaderListeners_=function(){var e=this;this.mainSegmentLoader_.on("bandwidthupdate",(function(){var t=e.selectPlaylist(),i=e.masterPlaylistLoader_.media(),n=e.tech_.buffered();(function(e){var t=e.currentPlaylist,i=e.nextPlaylist,n=e.forwardBuffer,r=e.bufferLowWaterLine,a=e.duration;e.log;return i?!t.endList||(a<Hs.MAX_BUFFER_LOW_WATER_LINE||(i.attributes.BANDWIDTH<t.attributes.BANDWIDTH||n>=r)):(Ua.log.warn("We received no playlist to switch to. Please check your stream."),!1)})({currentPlaylist:i,nextPlaylist:t,forwardBuffer:n.length?n.end(n.length-1)-e.tech_.currentTime():0,bufferLowWaterLine:e.bufferLowWaterLine(),duration:e.duration(),log:e.logger_})&&e.masterPlaylistLoader_.media(t),e.tech_.trigger("bandwidthupdate")})),this.mainSegmentLoader_.on("progress",(function(){e.trigger("progress")})),this.mainSegmentLoader_.on("error",(function(){e.blacklistCurrentPlaylist(e.mainSegmentLoader_.error())})),this.mainSegmentLoader_.on("appenderror",(function(){e.error=e.mainSegmentLoader_.error_,e.trigger("error")})),this.mainSegmentLoader_.on("syncinfoupdate",(function(){e.onSyncInfoUpdate_()})),this.mainSegmentLoader_.on("timestampoffset",(function(){e.tech_.trigger({type:"usage",name:"vhs-timestamp-offset"}),e.tech_.trigger({type:"usage",name:"hls-timestamp-offset"})})),this.audioSegmentLoader_.on("syncinfoupdate",(function(){e.onSyncInfoUpdate_()})),this.audioSegmentLoader_.on("appenderror",(function(){e.error=e.audioSegmentLoader_.error_,e.trigger("error")})),this.mainSegmentLoader_.on("ended",(function(){e.logger_("main segment loader ended"),e.onEndOfStream()})),this.mainSegmentLoader_.on("earlyabort",(function(){e.blacklistCurrentPlaylist({message:"Aborted early because there isn't enough bandwidth to complete the request without rebuffering."},120)}));var t=function(){if(!e.sourceUpdater_.ready())return e.tryToCreateSourceBuffers_();var t=e.getCodecsOrExclude_();t&&e.sourceUpdater_.addOrChangeSourceBuffers(t)};this.mainSegmentLoader_.on("trackinfo",t),this.audioSegmentLoader_.on("trackinfo",t),this.mainSegmentLoader_.on("fmp4",(function(){e.triggeredFmp4Usage||(e.tech_.trigger({type:"usage",name:"vhs-fmp4"}),e.tech_.trigger({type:"usage",name:"hls-fmp4"}),e.triggeredFmp4Usage=!0)})),this.audioSegmentLoader_.on("fmp4",(function(){e.triggeredFmp4Usage||(e.tech_.trigger({type:"usage",name:"vhs-fmp4"}),e.tech_.trigger({type:"usage",name:"hls-fmp4"}),e.triggeredFmp4Usage=!0)})),this.audioSegmentLoader_.on("ended",(function(){e.logger_("audioSegmentLoader ended"),e.onEndOfStream()}))},i.mediaSecondsLoaded_=function(){return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded+this.mainSegmentLoader_.mediaSecondsLoaded)},i.load=function(){this.mainSegmentLoader_.load(),this.mediaTypes_.AUDIO.activePlaylistLoader&&this.audioSegmentLoader_.load(),this.mediaTypes_.SUBTITLES.activePlaylistLoader&&this.subtitleSegmentLoader_.load()},i.smoothQualityChange_=function(e){void 0===e&&(e=this.selectPlaylist()),e!==this.masterPlaylistLoader_.media()&&(this.masterPlaylistLoader_.media(e),this.mainSegmentLoader_.resetLoader())},i.fastQualityChange_=function(e){var t=this;void 0===e&&(e=this.selectPlaylist()),e!==this.masterPlaylistLoader_.media()&&(this.masterPlaylistLoader_.media(e),this.mainSegmentLoader_.resetEverything((function(){Ua.browser.IE_VERSION||Ua.browser.IS_EDGE?t.tech_.setCurrentTime(t.tech_.currentTime()+.04):t.tech_.setCurrentTime(t.tech_.currentTime())})))},i.play=function(){if(!this.setupFirstPlay()){this.tech_.ended()&&this.tech_.setCurrentTime(0),this.hasPlayed_&&this.load();var e=this.tech_.seekable();return this.tech_.duration()===1/0&&this.tech_.currentTime()<e.start(0)?this.tech_.setCurrentTime(e.end(e.length-1)):void 0}},i.setupFirstPlay=function(){var e=this,t=this.masterPlaylistLoader_.media();if(!t||this.tech_.paused()||this.hasPlayed_)return!1;if(!t.endList){var i=this.seekable();if(!i.length)return!1;if(Ua.browser.IE_VERSION&&0===this.tech_.readyState())return this.tech_.one("loadedmetadata",(function(){e.trigger("firstplay"),e.tech_.setCurrentTime(i.end(0)),e.hasPlayed_=!0})),!1;this.trigger("firstplay"),this.tech_.setCurrentTime(i.end(0))}return this.hasPlayed_=!0,this.load(),!0},i.handleSourceOpen_=function(){if(this.tryToCreateSourceBuffers_(),this.tech_.autoplay()){var e=this.tech_.play();void 0!==e&&"function"==typeof e.then&&e.then(null,(function(e){}))}this.trigger("sourceopen")},i.handleSourceEnded_=function(){if(this.inbandTextTracks_.metadataTrack_){var e=this.inbandTextTracks_.metadataTrack_.cues;if(e&&e.length){var t=this.duration();e[e.length-1].endTime=isNaN(t)||Math.abs(t)===1/0?Number.MAX_VALUE:t}}},i.handleDurationChange_=function(){this.tech_.trigger("durationchange")},i.onEndOfStream=function(){var e=this.mainSegmentLoader_.ended_;this.mediaTypes_.AUDIO.activePlaylistLoader&&(e=!this.mainSegmentLoader_.currentMediaInfo_||this.mainSegmentLoader_.currentMediaInfo_.hasVideo?e&&this.audioSegmentLoader_.ended_:this.audioSegmentLoader_.ended_),e&&this.sourceUpdater_.endOfStream()},i.stuckAtPlaylistEnd_=function(e){if(!this.seekable().length)return!1;var t=this.syncController_.getExpiredTime(e,this.duration());if(null===t)return!1;var i=Uo.Playlist.playlistEnd(e,t),n=this.tech_.currentTime(),r=this.tech_.buffered();if(!r.length)return i-n<=.1;var a=r.end(r.length-1);return a-n<=.1&&i-a<=.1},i.blacklistCurrentPlaylist=function(e,t){void 0===e&&(e={});var i=e.playlist||this.masterPlaylistLoader_.media();if(t=t||e.blacklistDuration||this.blacklistDuration,!i)return this.error=e,void("open"!==this.mediaSource.readyState?this.trigger("error"):this.sourceUpdater_.endOfStream("network"));var n=this.masterPlaylistLoader_.master.playlists,r=n.filter(ms),a=1===r.length&&r[0]===i;if(1===n.length&&t!==1/0)return Ua.log.warn("Problem encountered with playlist "+i.id+". Trying again since it is the only playlist."),this.tech_.trigger("retryplaylist"),this.masterPlaylistLoader_.load(a);if(a){var s=!1;n.forEach((function(e){if(e!==i){var t=e.excludeUntil;void 0!==t&&t!==1/0&&(s=!0,delete e.excludeUntil)}})),s&&(Ua.log.warn("Removing other playlists from the exclusion list because the last rendition is about to be excluded."),this.tech_.trigger("retryplaylist"))}i.excludeUntil=Date.now()+1e3*t,this.tech_.trigger("blacklistplaylist"),this.tech_.trigger({type:"usage",name:"vhs-rendition-blacklisted"}),this.tech_.trigger({type:"usage",name:"hls-rendition-blacklisted"});var o=this.selectPlaylist();if(!o)return this.error="Playback cannot continue. No available working or supported playlists.",void this.trigger("error");var l=e.internal?this.logger_:Ua.log.warn,u=e.message?" "+e.message:"";return l((e.internal?"Internal problem":"Problem")+" encountered with playlist "+i.id+"."+u+" Switching to playlist "+o.id+"."),o.attributes.AUDIO!==i.attributes.AUDIO&&this.delegateLoaders_("audio",["abort","pause"]),o.attributes.SUBTITLES!==i.attributes.SUBTITLES&&this.delegateLoaders_("subtitle",["abort","pause"]),this.delegateLoaders_("main",["abort","pause"]),this.masterPlaylistLoader_.media(o,a)},i.pauseLoading=function(){this.delegateLoaders_("all",["abort","pause"])},i.delegateLoaders_=function(e,t){var i=this,n=[],r="all"===e;(r||"main"===e)&&n.push(this.masterPlaylistLoader_);var a=[];(r||"audio"===e)&&a.push("AUDIO"),(r||"subtitle"===e)&&(a.push("CLOSED-CAPTIONS"),a.push("SUBTITLES")),a.forEach((function(e){var t=i.mediaTypes_[e]&&i.mediaTypes_[e].activePlaylistLoader;t&&n.push(t)})),["main","audio","subtitle"].forEach((function(t){var r=i[t+"SegmentLoader_"];!r||e!==t&&"all"!==e||n.push(r)})),n.forEach((function(e){return t.forEach((function(t){"function"==typeof e[t]&&e[t]()}))}))},i.setCurrentTime=function(e){var t=ns(this.tech_.buffered(),e);return this.masterPlaylistLoader_&&this.masterPlaylistLoader_.media()&&this.masterPlaylistLoader_.media().segments?t&&t.length?e:(this.mainSegmentLoader_.resetEverything(),this.mainSegmentLoader_.abort(),this.mediaTypes_.AUDIO.activePlaylistLoader&&(this.audioSegmentLoader_.resetEverything(),this.audioSegmentLoader_.abort()),this.mediaTypes_.SUBTITLES.activePlaylistLoader&&(this.subtitleSegmentLoader_.resetEverything(),this.subtitleSegmentLoader_.abort()),void this.load()):0},i.duration=function(){if(!this.masterPlaylistLoader_)return 0;var e=this.masterPlaylistLoader_.media();return e?e.endList?this.mediaSource?this.mediaSource.duration:Uo.Playlist.duration(e):1/0:0},i.seekable=function(){return this.seekable_},i.onSyncInfoUpdate_=function(){var e;if(this.masterPlaylistLoader_){var t=this.masterPlaylistLoader_.media();if(t){var i=this.syncController_.getExpiredTime(t,this.duration());if(null!==i){var n=this.masterPlaylistLoader_.master.suggestedPresentationDelay,r=Uo.Playlist.seekable(t,i,n);if(0!==r.length){if(this.mediaTypes_.AUDIO.activePlaylistLoader){if(t=this.mediaTypes_.AUDIO.activePlaylistLoader.media(),null===(i=this.syncController_.getExpiredTime(t,this.duration())))return;if(0===(e=Uo.Playlist.seekable(t,i,n)).length)return}var a,s;this.seekable_&&this.seekable_.length&&(a=this.seekable_.end(0),s=this.seekable_.start(0)),e?e.start(0)>r.end(0)||r.start(0)>e.end(0)?this.seekable_=r:this.seekable_=Ua.createTimeRanges([[e.start(0)>r.start(0)?e.start(0):r.start(0),e.end(0)<r.end(0)?e.end(0):r.end(0)]]):this.seekable_=r,this.seekable_&&this.seekable_.length&&this.seekable_.end(0)===a&&this.seekable_.start(0)===s||(this.logger_("seekable updated ["+as(this.seekable_)+"]"),this.tech_.trigger("seekablechanged"))}}}}},i.updateDuration=function(e){if(this.updateDuration_&&(this.mediaSource.removeEventListener("sourceopen",this.updateDuration_),this.updateDuration_=null),"open"!==this.mediaSource.readyState)return this.updateDuration_=this.updateDuration.bind(this,e),void this.mediaSource.addEventListener("sourceopen",this.updateDuration_);if(e){var t=this.seekable();if(!t.length)return;(isNaN(this.mediaSource.duration)||this.mediaSource.duration<t.end(t.length-1))&&this.sourceUpdater_.setDuration(t.end(t.length-1))}else{var i=this.tech_.buffered(),n=Uo.Playlist.duration(this.masterPlaylistLoader_.media());i.length>0&&(n=Math.max(n,i.end(i.length-1))),this.mediaSource.duration!==n&&this.sourceUpdater_.setDuration(n)}},i.dispose=function(){var e=this;this.trigger("dispose"),this.decrypter_.terminate(),this.masterPlaylistLoader_.dispose(),this.mainSegmentLoader_.dispose(),["AUDIO","SUBTITLES"].forEach((function(t){var i=e.mediaTypes_[t].groups;for(var n in i)i[n].forEach((function(e){e.playlistLoader&&e.playlistLoader.dispose()}))})),this.audioSegmentLoader_.dispose(),this.subtitleSegmentLoader_.dispose(),this.sourceUpdater_.dispose(),this.timelineChangeController_.dispose(),this.updateDuration_&&this.mediaSource.removeEventListener("sourceopen",this.updateDuration_),this.mediaSource.removeEventListener("durationchange",this.handleDurationChange_),this.mediaSource.removeEventListener("sourceopen",this.handleSourceOpen_),this.mediaSource.removeEventListener("sourceended",this.handleSourceEnded_),this.off()},i.master=function(){return this.masterPlaylistLoader_.master},i.media=function(){return this.masterPlaylistLoader_.media()||this.initialMedia_},i.areMediaTypesKnown_=function(){var e=!!this.mediaTypes_.AUDIO.activePlaylistLoader;return!(!this.mainSegmentLoader_.currentMediaInfo_||e&&!this.audioSegmentLoader_.currentMediaInfo_)},i.getCodecsOrExclude_=function(){var e=this,t={main:this.mainSegmentLoader_.currentMediaInfo_||{},audio:this.audioSegmentLoader_.currentMediaInfo_||{}};t.video=t.main;var i=jo(this.master(),this.media()),n={},r=!!this.mediaTypes_.AUDIO.activePlaylistLoader;if(t.main.hasVideo&&(n.video=i.video||t.main.videoCodec||Me.DEFAULT_VIDEO_CODEC),t.main.isMuxed&&(n.video+=","+(i.audio||t.main.audioCodec||Me.DEFAULT_AUDIO_CODEC)),(t.main.hasAudio&&!t.main.isMuxed||t.audio.hasAudio||r)&&(n.audio=i.audio||t.main.audioCodec||t.audio.audioCodec||Me.DEFAULT_AUDIO_CODEC,t.audio.isFmp4=t.main.hasAudio&&!t.main.isMuxed?t.main.isFmp4:t.audio.isFmp4),n.audio||n.video){var a,s={};if(["video","audio"].forEach((function(e){if(n.hasOwnProperty(e)&&(r=t[e].isFmp4,o=n[e],!(r?Object(Me.browserSupportsCodec)(o):Object(Me.muxerSupportsCodec)(o)))){var i=t[e].isFmp4?"browser":"muxer";s[i]=s[i]||[],s[i].push(n[e]),"audio"===e&&(a=i)}var r,o})),r&&a&&this.media().attributes.AUDIO){var o=this.media().attributes.AUDIO;this.master().playlists.forEach((function(t){(t.attributes&&t.attributes.AUDIO)===o&&t!==e.media()&&(t.excludeUntil=1/0)})),this.logger_("excluding audio group "+o+" as "+a+' does not support codec(s): "'+n.audio+'"')}if(!Object.keys(s).length){if(this.sourceUpdater_.ready()&&!this.sourceUpdater_.canChangeType()){var l=[];if(["video","audio"].forEach((function(t){var i=(Object(Me.parseCodecs)(e.sourceUpdater_.codecs[t]||"")[t]||{}).type,r=(Object(Me.parseCodecs)(n[t]||"")[t]||{}).type;i&&r&&i.toLowerCase()!==r.toLowerCase()&&l.push('"'+e.sourceUpdater_.codecs[t]+'" -> "'+n[t]+'"')})),l.length)return void this.blacklistCurrentPlaylist({playlist:this.media(),message:"Codec switching not supported: "+l.join(", ")+".",blacklistDuration:1/0,internal:!0})}return n}var u=Object.keys(s).reduce((function(e,t){return e&&(e+=", "),e+=t+' does not support codec(s): "'+s[t].join(",")+'"'}),"")+".";this.blacklistCurrentPlaylist({playlist:this.media(),internal:!0,message:u,blacklistDuration:1/0})}else this.blacklistCurrentPlaylist({playlist:this.media(),message:"Could not determine codecs for playlist.",blacklistDuration:1/0})},i.tryToCreateSourceBuffers_=function(){if("open"===this.mediaSource.readyState&&!this.sourceUpdater_.ready()&&this.areMediaTypesKnown_()){var e=this.getCodecsOrExclude_();if(e){this.sourceUpdater_.createSourceBuffers(e);var t=[e.video,e.audio].filter(Boolean).join(",");this.excludeIncompatibleVariants_(t)}}},i.excludeUnsupportedVariants_=function(){var e=this;this.master().playlists.forEach((function(t){var i=jo(e.master,t);!i.audio||Object(Me.muxerSupportsCodec)(i.audio)||Object(Me.browserSupportsCodec)(i.audio)||(t.excludeUntil=1/0),!i.video||Object(Me.muxerSupportsCodec)(i.video)||Object(Me.browserSupportsCodec)(i.video)||(t.excludeUntil=1/0)}))},i.excludeIncompatibleVariants_=function(e){var t=this,i=Object(Me.parseCodecs)(e),n=Object.keys(i).length;this.master().playlists.forEach((function(e){if(e.excludeUntil!==1/0){var r={},a=2,s=[],o=jo(t.masterPlaylistLoader_.master,e);if(o.audio||o.video){var l=[o.video,o.audio].filter(Boolean).join(",");r=Object(Me.parseCodecs)(l),a=Object.keys(r).length}a!==n&&(s.push('codec count "'+a+'" !== "'+n+'"'),e.excludeUntil=1/0),t.sourceUpdater_.canChangeType()||(r.video&&i.video&&r.video.type.toLowerCase()!==i.video.type.toLowerCase()&&(s.push('video codec "'+r.video.type+'" !== "'+i.video.type+'"'),e.excludeUntil=1/0),r.audio&&i.audio&&r.audio.type.toLowerCase()!==i.audio.type.toLowerCase()&&(e.excludeUntil=1/0,s.push('audio codec "'+r.audio.type+'" !== "'+i.audio.type+'"'))),s.length&&t.logger_("blacklisting "+e.id+": "+s.join(" && "))}}))},i.updateAdCues_=function(e){var t=0,i=this.seekable();i.length&&(t=i.start(0)),function(e,t,i){if(void 0===i&&(i=0),e.segments)for(var n,a=i,s=0;s<e.segments.length;s++){var o=e.segments[s];if(n||(n=ol(t,a+o.duration/2)),n){if("cueIn"in o){n.endTime=a,n.adEndTime=a,a+=o.duration,n=null;continue}if(a<n.endTime){a+=o.duration;continue}n.endTime+=o.duration}else if("cueOut"in o&&((n=new r.a.VTTCue(a,a+o.duration,o.cueOut)).adStartTime=a,n.adEndTime=a+parseFloat(o.cueOut),t.addCue(n)),"cueOutCont"in o){var l=o.cueOutCont.split("/").map(parseFloat),u=l[0],c=l[1];(n=new r.a.VTTCue(a,a+o.duration,"")).adStartTime=a-u,n.adEndTime=n.adStartTime+c,t.addCue(n)}a+=o.duration}}(e,this.cueTagsTrack_,t)},i.goalBufferLength=function(){var e=this.tech_.currentTime(),t=Hs.GOAL_BUFFER_LENGTH,i=Hs.GOAL_BUFFER_LENGTH_RATE,n=Math.max(t,Hs.MAX_GOAL_BUFFER_LENGTH);return Math.min(t+e*i,n)},i.bufferLowWaterLine=function(){var e=this.tech_.currentTime(),t=Hs.BUFFER_LOW_WATER_LINE,i=Hs.BUFFER_LOW_WATER_LINE_RATE,n=Math.max(t,Hs.MAX_BUFFER_LOW_WATER_LINE);return Math.min(t+e*i,n)},t}(Ua.EventTarget),jl=function(e,t,i){var n,r,a,s=e.masterPlaylistController_,o=s[(e.options_.smoothQualityChange?"smooth":"fast")+"QualityChange_"].bind(s);if(t.attributes.RESOLUTION){var l=t.attributes.RESOLUTION;this.width=l.width,this.height=l.height}this.bandwidth=t.attributes.BANDWIDTH,this.codecs=jo(s.master(),t),this.playlist=t,this.id=i,this.enabled=(n=e.playlists,r=t.id,a=o,function(e){var t=n.master.playlists[r],i=fs(t),s=ms(t);return void 0===e?s:(e?delete t.disabled:t.disabled=!0,e===s||i||(a(),e?n.trigger("renditionenabled"):n.trigger("renditiondisabled")),e)})},kl=["seeking","seeked","pause","playing","error"],Cl=function(){function e(e){var t=this;this.masterPlaylistController_=e.masterPlaylistController,this.tech_=e.tech,this.seekable=e.seekable,this.allowSeeksWithinUnsafeLiveWindow=e.allowSeeksWithinUnsafeLiveWindow,this.media=e.media,this.consecutiveUpdates=0,this.lastRecordedTime=null,this.timer_=null,this.checkCurrentTimeTimeout_=null,this.logger_=ko("PlaybackWatcher"),this.logger_("initialize");var i=function(){return t.monitorCurrentTime_()},n=function(){return t.techWaiting_()},a=function(){return t.cancelTimer_()},s=function(){return t.fixesBadSeeks_()},o=this.masterPlaylistController_,l=["main","subtitle","audio"],u={};l.forEach((function(e){u[e]={reset:function(){return t.resetSegmentDownloads_(e)},updateend:function(){return t.checkSegmentDownloads_(e)}},o[e+"SegmentLoader_"].on("appendsdone",u[e].updateend),o[e+"SegmentLoader_"].on("playlistupdate",u[e].reset),t.tech_.on(["seeked","seeking"],u[e].reset)})),this.tech_.on("seekablechanged",s),this.tech_.on("waiting",n),this.tech_.on(kl,a),this.tech_.on("canplay",i),this.dispose=function(){t.logger_("dispose"),t.tech_.off("seekablechanged",s),t.tech_.off("waiting",n),t.tech_.off(kl,a),t.tech_.off("canplay",i),l.forEach((function(e){o[e+"SegmentLoader_"].off("appendsdone",u[e].updateend),o[e+"SegmentLoader_"].off("playlistupdate",u[e].reset),t.tech_.off(["seeked","seeking"],u[e].reset)})),t.checkCurrentTimeTimeout_&&r.a.clearTimeout(t.checkCurrentTimeTimeout_),t.cancelTimer_()}}var t=e.prototype;return t.monitorCurrentTime_=function(){this.checkCurrentTime_(),this.checkCurrentTimeTimeout_&&r.a.clearTimeout(this.checkCurrentTimeTimeout_),this.checkCurrentTimeTimeout_=r.a.setTimeout(this.monitorCurrentTime_.bind(this),250)},t.resetSegmentDownloads_=function(e){var t=this.masterPlaylistController_[e+"SegmentLoader_"];this[e+"StalledDownloads_"]>0&&this.logger_("resetting possible stalled download count for "+e+" loader"),this[e+"StalledDownloads_"]=0,this[e+"Buffered_"]=t.buffered_()},t.checkSegmentDownloads_=function(e){var t=this.masterPlaylistController_,i=t[e+"SegmentLoader_"],n=i.buffered_(),r=function(e,t){if(e===t)return!1;if(!e&&t||!t&&e)return!0;if(e.length!==t.length)return!0;for(var i=0;i<e.length;i++)if(e.start(i)!==t.start(i)||e.end(i)!==t.end(i))return!0;return!1}(this[e+"Buffered_"],n);this[e+"Buffered_"]=n,r?this.resetSegmentDownloads_(e):(this[e+"StalledDownloads_"]++,this.logger_("found #"+this[e+"StalledDownloads_"]+" "+e+" appends that did not increase buffer (possible stalled download)",{playlistId:i.playlist_&&i.playlist_.id,buffered:ss(n)}),this[e+"StalledDownloads_"]<10||(this.logger_(e+" loader stalled download exclusion"),this.resetSegmentDownloads_(e),this.tech_.trigger({type:"usage",name:"vhs-"+e+"-download-exclusion"}),"subtitle"!==e&&t.blacklistCurrentPlaylist({message:"Excessive "+e+" segment downloading detected."},1/0)))},t.checkCurrentTime_=function(){if(this.tech_.seeking()&&this.fixesBadSeeks_())return this.consecutiveUpdates=0,void(this.lastRecordedTime=this.tech_.currentTime());if(!this.tech_.paused()&&!this.tech_.seeking()){var e=this.tech_.currentTime(),t=this.tech_.buffered();if(this.lastRecordedTime===e&&(!t.length||e+.1>=t.end(t.length-1)))return this.techWaiting_();this.consecutiveUpdates>=5&&e===this.lastRecordedTime?(this.consecutiveUpdates++,this.waiting_()):e===this.lastRecordedTime?this.consecutiveUpdates++:(this.consecutiveUpdates=0,this.lastRecordedTime=e)}},t.cancelTimer_=function(){this.consecutiveUpdates=0,this.timer_&&(this.logger_("cancelTimer_"),clearTimeout(this.timer_)),this.timer_=null},t.fixesBadSeeks_=function(){if(!this.tech_.seeking())return!1;var e,t=this.seekable(),i=this.tech_.currentTime();this.afterSeekableWindow_(t,i,this.media(),this.allowSeeksWithinUnsafeLiveWindow)&&(e=t.end(t.length-1));if(this.beforeSeekableWindow_(t,i)){var n=t.start(0);e=n+(n===t.end(0)?0:.1)}if(void 0!==e)return this.logger_("Trying to seek outside of seekable at time "+i+" with seekable range "+as(t)+". Seeking to "+e+"."),this.tech_.setCurrentTime(e),!0;var r=this.tech_.buffered();return!!function(e){var t=e.buffered,i=e.targetDuration,n=e.currentTime;return!!t.length&&(!(t.end(0)-t.start(0)<2*i)&&(!(n>t.start(0))&&t.start(0)-n<i))}({buffered:r,targetDuration:this.media().targetDuration,currentTime:i})&&(e=r.start(0)+.1,this.logger_("Buffered region starts ("+r.start(0)+")  just beyond seek point ("+i+"). Seeking to "+e+"."),this.tech_.setCurrentTime(e),!0)},t.waiting_=function(){if(!this.techWaiting_()){var e=this.tech_.currentTime(),t=this.tech_.buffered(),i=ns(t,e);return i.length&&e+3<=i.end(0)?(this.cancelTimer_(),this.tech_.setCurrentTime(e),this.logger_("Stopped at "+e+" while inside a buffered region ["+i.start(0)+" -> "+i.end(0)+"]. Attempting to resume playback by seeking to the current time."),this.tech_.trigger({type:"usage",name:"vhs-unknown-waiting"}),void this.tech_.trigger({type:"usage",name:"hls-unknown-waiting"})):void 0}},t.techWaiting_=function(){var e=this.seekable(),t=this.tech_.currentTime();if(this.tech_.seeking()&&this.fixesBadSeeks_())return!0;if(this.tech_.seeking()||null!==this.timer_)return!0;if(this.beforeSeekableWindow_(e,t)){var i=e.end(e.length-1);return this.logger_("Fell out of live window at time "+t+". Seeking to live point (seekable end) "+i),this.cancelTimer_(),this.tech_.setCurrentTime(i),this.tech_.trigger({type:"usage",name:"vhs-live-resync"}),this.tech_.trigger({type:"usage",name:"hls-live-resync"}),!0}var n=this.tech_.vhs.masterPlaylistController_.sourceUpdater_,r=this.tech_.buffered();if(this.videoUnderflow_({audioBuffered:n.audioBuffered(),videoBuffered:n.videoBuffered(),currentTime:t}))return this.cancelTimer_(),this.tech_.setCurrentTime(t),this.tech_.trigger({type:"usage",name:"vhs-video-underflow"}),this.tech_.trigger({type:"usage",name:"hls-video-underflow"}),!0;var a=rs(r,t);if(a.length>0){var s=a.start(0)-t;return this.logger_("Stopped at "+t+", setting timer for "+s+", seeking to "+a.start(0)),this.cancelTimer_(),this.timer_=setTimeout(this.skipTheGap_.bind(this),1e3*s,t),!0}return!1},t.afterSeekableWindow_=function(e,t,i,n){if(void 0===n&&(n=!1),!e.length)return!1;var r=e.end(e.length-1)+.1;return!i.endList&&n&&(r=e.end(e.length-1)+3*i.targetDuration),t>r},t.beforeSeekableWindow_=function(e,t){return!!(e.length&&e.start(0)>0&&t<e.start(0)-.1)},t.videoUnderflow_=function(e){var t=e.videoBuffered,i=e.audioBuffered,n=e.currentTime;if(t){var r;if(t.length&&i.length){var a=ns(t,n-3),s=ns(t,n),o=ns(i,n);o.length&&!s.length&&a.length&&(r={start:a.end(0),end:o.end(0)})}else{rs(t,n).length||(r=this.gapFromVideoUnderflow_(t,n))}return!!r&&(this.logger_("Encountered a gap in video from "+r.start+" to "+r.end+". Seeking to current time "+n),!0)}},t.skipTheGap_=function(e){var t=this.tech_.buffered(),i=this.tech_.currentTime(),n=rs(t,i);this.cancelTimer_(),0!==n.length&&i===e&&(this.logger_("skipTheGap_:","currentTime:",i,"scheduled currentTime:",e,"nextRange start:",n.start(0)),this.tech_.setCurrentTime(n.start(0)+1/30),this.tech_.trigger({type:"usage",name:"vhs-gap-skip"}),this.tech_.trigger({type:"usage",name:"hls-gap-skip"}))},t.gapFromVideoUnderflow_=function(e,t){for(var i=function(e){if(e.length<2)return Ua.createTimeRanges();for(var t=[],i=1;i<e.length;i++){var n=e.end(i-1),r=e.start(i);t.push([n,r])}return Ua.createTimeRanges(t)}(e),n=0;n<i.length;n++){var r=i.start(n),a=i.end(n);if(t-r<4&&t-r>2)return{start:r,end:a}}return null},e}(),wl={errorInterval:30,getSource:function(e){return e(this.tech({IWillNotUseThisInPlugins:!0}).currentSource_||this.currentSource())}},El=function(e){!function e(t,i){var n=0,r=0,a=Ua.mergeOptions(wl,i);t.ready((function(){t.trigger({type:"usage",name:"vhs-error-reload-initialized"}),t.trigger({type:"usage",name:"hls-error-reload-initialized"})}));var s=function(){r&&t.currentTime(r)},o=function(e){null!=e&&(r=t.duration()!==1/0&&t.currentTime()||0,t.one("loadedmetadata",s),t.src(e),t.trigger({type:"usage",name:"vhs-error-reload"}),t.trigger({type:"usage",name:"hls-error-reload"}),t.play())},l=function(){return Date.now()-n<1e3*a.errorInterval?(t.trigger({type:"usage",name:"vhs-error-reload-canceled"}),void t.trigger({type:"usage",name:"hls-error-reload-canceled"})):a.getSource&&"function"==typeof a.getSource?(n=Date.now(),a.getSource.call(t,o)):void Ua.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!")},u=function e(){t.off("loadedmetadata",s),t.off("error",l),t.off("dispose",e)};t.on("error",l),t.on("dispose",u),t.reloadSourceOnError=function(i){u(),e(t,i)}}(this,e)},Al={PlaylistLoader:ts,Playlist:ys,utils:Ps,STANDARD_PLAYLIST_SELECTOR:function(){var e=this.useDevicePixelRatio&&r.a.devicePixelRatio||1;return function(e,t,i,n,a){var s={bandwidth:t,width:i,height:n,limitRenditionByPlayerDimensions:a},o=e.playlists.map((function(e){var t=e.attributes.RESOLUTION&&e.attributes.RESOLUTION.width,i=e.attributes.RESOLUTION&&e.attributes.RESOLUTION.height;return{bandwidth:e.attributes.BANDWIDTH||r.a.Number.MAX_VALUE,width:t,height:i,playlist:e}}));Ao(o,(function(e,t){return e.bandwidth-t.bandwidth}));var l=(o=o.filter((function(e){return!ys.isIncompatible(e.playlist)}))).filter((function(e){return ys.isEnabled(e.playlist)}));l.length||(l=o.filter((function(e){return!ys.isDisabled(e.playlist)})));var u=l.filter((function(e){return e.bandwidth*Hs.BANDWIDTH_VARIANCE<t})),c=u[u.length-1],d=u.filter((function(e){return e.bandwidth===c.bandwidth}))[0];if(!1===a){var h=d||l[0]||o[0];if(h&&h.playlist){var p="sortedPlaylistReps";return d&&(p="bandwidthBestRep"),l[0]&&(p="enabledPlaylistReps"),Co("choosing "+wo(h)+" using "+p+" with options",s),h.playlist}return Co("could not choose a playlist with options",s),null}var f=u.filter((function(e){return e.width&&e.height}));Ao(f,(function(e,t){return e.width-t.width}));var m=f.filter((function(e){return e.width===i&&e.height===n}));c=m[m.length-1];var g,v,y,_=m.filter((function(e){return e.bandwidth===c.bandwidth}))[0];_||(v=(g=f.filter((function(e){return e.width>i||e.height>n}))).filter((function(e){return e.width===g[0].width&&e.height===g[0].height})),c=v[v.length-1],y=v.filter((function(e){return e.bandwidth===c.bandwidth}))[0]);var b=y||_||d||l[0]||o[0];if(b&&b.playlist){var T="sortedPlaylistReps";return y?T="resolutionPlusOneRep":_?T="resolutionBestRep":d?T="bandwidthBestRep":l[0]&&(T="enabledPlaylistReps"),Co("choosing "+wo(b)+" using "+T+" with options",s),b.playlist}return Co("could not choose a playlist with options",s),null}(this.playlists.master,this.systemBandwidth,parseInt(Eo(this.tech_.el(),"width"),10)*e,parseInt(Eo(this.tech_.el(),"height"),10)*e,this.limitRenditionByPlayerDimensions)},INITIAL_PLAYLIST_SELECTOR:function(){var e=this,t=this.playlists.master.playlists.filter(ys.isEnabled);return Ao(t,(function(e,t){return xo(e,t)})),t.filter((function(t){return!!jo(e.playlists.master,t).video}))[0]||null},comparePlaylistBandwidth:xo,comparePlaylistResolution:function(e,t){var i,n;return e.attributes.RESOLUTION&&e.attributes.RESOLUTION.width&&(i=e.attributes.RESOLUTION.width),i=i||r.a.Number.MAX_VALUE,t.attributes.RESOLUTION&&t.attributes.RESOLUTION.width&&(n=t.attributes.RESOLUTION.width),i===(n=n||r.a.Number.MAX_VALUE)&&e.attributes.BANDWIDTH&&t.attributes.BANDWIDTH?e.attributes.BANDWIDTH-t.attributes.BANDWIDTH:i-n},xhr:Ss()};["GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","BACK_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","BANDWIDTH_VARIANCE"].forEach((function(e){Object.defineProperty(Al,e,{get:function(){return Ua.log.warn("using Vhs."+e+" is UNSAFE be sure you know what you are doing"),Hs[e]},set:function(t){Ua.log.warn("using Vhs."+e+" is UNSAFE be sure you know what you are doing"),"number"!=typeof t||t<0?Ua.log.warn("value of Vhs."+e+" must be greater than or equal to 0"):Hs[e]=t}})}));var xl=function(e,t){for(var i=t.media(),n=-1,r=0;r<e.length;r++)if(e[r].id===i.id){n=r;break}e.selectedIndex_=n,e.trigger({selectedIndex:n,type:"change"})};Al.canPlaySource=function(){return Ua.log.warn("HLS is no longer a tech. Please remove it from your player's techOrder.")};var Il=function(e){var t=e.player,i=e.sourceKeySystems,n=e.media,r=e.audioMedia,a=e.mainPlaylists,s=function(e,t,i){if(!e)return e;var n={video:t&&t.attributes&&t.attributes.CODECS,audio:i&&i.attributes&&i.attributes.CODECS};!n.audio&&n.video&&n.video.split(",").length>1&&n.video.split(",").forEach((function(e){e=e.trim(),Object(Me.isAudioCodec)(e)?n.audio=e:Object(Me.isVideoCodec)(e)&&(n.video=e)}));var r=n.video?'video/mp4;codecs="'+n.video+'"':null,a=n.audio?'audio/mp4;codecs="'+n.audio+'"':null,s={};for(var o in e)s[o]={audioContentType:a,videoContentType:r},t.contentProtection&&t.contentProtection[o]&&t.contentProtection[o].pssh&&(s[o].pssh=t.contentProtection[o].pssh),"string"==typeof e[o]&&(s[o].url=e[o]);return Ua.mergeOptions(e,s)}(i,n,r);s&&(t.currentSource().keySystems=s,!s||t.eme?11!==Ua.browser.IE_VERSION&&t.eme.initializeMediaKeys&&function(e,t){return e.reduce((function(e,i){if(!i.contentProtection)return e;var n=t.reduce((function(e,t){var n=i.contentProtection[t];return n&&n.pssh&&(e[t]={pssh:n.pssh}),e}),{});return Object.keys(n).length&&e.push(n),e}),[])}(r?a.concat([r]):a,Object.keys(i)).forEach((function(e){t.eme.initializeMediaKeys({keySystems:e})})):Ua.log.warn("DRM encrypted source cannot be decrypted without a DRM plugin"))},Pl=function(){if(!r.a.localStorage)return null;var e=r.a.localStorage.getItem("videojs-vhs");if(!e)return null;try{return JSON.parse(e)}catch(e){return null}};Al.supportsNativeHls=function(){if(!s.a||!s.a.createElement)return!1;var e=s.a.createElement("video");if(!Ua.getTech("Html5").isSupported())return!1;return["application/vnd.apple.mpegurl","audio/mpegurl","audio/x-mpegurl","application/x-mpegurl","video/x-mpegurl","video/mpegurl","application/mpegurl"].some((function(t){return/maybe|probably/i.test(e.canPlayType(t))}))}(),Al.supportsNativeDash=!!(s.a&&s.a.createElement&&Ua.getTech("Html5").isSupported())&&/maybe|probably/i.test(s.a.createElement("video").canPlayType("application/dash+xml")),Al.supportsTypeNatively=function(e){return"hls"===e?Al.supportsNativeHls:"dash"===e&&Al.supportsNativeDash},Al.isSupported=function(){return Ua.log.warn("HLS is no longer a tech. Please remove it from your player's techOrder.")};var Ol=function(e){function t(t,i,n){var r;if(r=e.call(this,i,Ua.mergeOptions(n.hls,n.vhs))||this,n.hls&&Object.keys(n.hls).length&&Ua.log.warn("Using hls options is deprecated. Use vhs instead."),i.options_&&i.options_.playerId){var a=Ua(i.options_.playerId);a.hasOwnProperty("hls")||Object.defineProperty(a,"hls",{get:function(){return Ua.log.warn("player.hls is deprecated. Use player.tech().vhs instead."),i.trigger({type:"usage",name:"hls-player-access"}),c()(r)},configurable:!0}),a.hasOwnProperty("vhs")||Object.defineProperty(a,"vhs",{get:function(){return Ua.log.warn("player.vhs is deprecated. Use player.tech().vhs instead."),i.trigger({type:"usage",name:"vhs-player-access"}),c()(r)},configurable:!0}),a.hasOwnProperty("dash")||Object.defineProperty(a,"dash",{get:function(){return Ua.log.warn("player.dash is deprecated. Use player.tech().vhs instead."),c()(r)},configurable:!0}),r.player_=a}if(r.tech_=i,r.source_=t,r.stats={},r.ignoreNextSeekingEvent_=!1,r.setOptions_(),r.options_.overrideNative&&i.overrideNativeAudioTracks&&i.overrideNativeVideoTracks)i.overrideNativeAudioTracks(!0),i.overrideNativeVideoTracks(!0);else if(r.options_.overrideNative&&(i.featuresNativeVideoTracks||i.featuresNativeAudioTracks))throw new Error("Overriding native HLS requires emulated tracks. See https://git.io/vMpjB");return r.on(s.a,["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"],(function(e){var t=s.a.fullscreenElement||s.a.webkitFullscreenElement||s.a.mozFullScreenElement||s.a.msFullscreenElement;t&&t.contains(r.tech_.el())&&r.masterPlaylistController_.smoothQualityChange_()})),r.on(r.tech_,"seeking",(function(){this.ignoreNextSeekingEvent_?this.ignoreNextSeekingEvent_=!1:this.setCurrentTime(this.tech_.currentTime())})),r.on(r.tech_,"error",(function(){this.tech_.error()&&this.masterPlaylistController_&&this.masterPlaylistController_.pauseLoading()})),r.on(r.tech_,"play",r.play),r}h()(t,e);var i=t.prototype;return i.setOptions_=function(){var e=this;if(this.options_.withCredentials=this.options_.withCredentials||!1,this.options_.handleManifestRedirects=!1!==this.options_.handleManifestRedirects,this.options_.limitRenditionByPlayerDimensions=!1!==this.options_.limitRenditionByPlayerDimensions,this.options_.useDevicePixelRatio=this.options_.useDevicePixelRatio||!1,this.options_.smoothQualityChange=this.options_.smoothQualityChange||!1,this.options_.useBandwidthFromLocalStorage=void 0!==this.source_.useBandwidthFromLocalStorage?this.source_.useBandwidthFromLocalStorage:this.options_.useBandwidthFromLocalStorage||!1,this.options_.customTagParsers=this.options_.customTagParsers||[],this.options_.customTagMappers=this.options_.customTagMappers||[],this.options_.cacheEncryptionKeys=this.options_.cacheEncryptionKeys||!1,this.options_.handlePartialData=this.options_.handlePartialData||!1,"number"!=typeof this.options_.blacklistDuration&&(this.options_.blacklistDuration=300),"number"!=typeof this.options_.bandwidth&&this.options_.useBandwidthFromLocalStorage){var t=Pl();t&&t.bandwidth&&(this.options_.bandwidth=t.bandwidth,this.tech_.trigger({type:"usage",name:"vhs-bandwidth-from-local-storage"}),this.tech_.trigger({type:"usage",name:"hls-bandwidth-from-local-storage"})),t&&t.throughput&&(this.options_.throughput=t.throughput,this.tech_.trigger({type:"usage",name:"vhs-throughput-from-local-storage"}),this.tech_.trigger({type:"usage",name:"hls-throughput-from-local-storage"}))}"number"!=typeof this.options_.bandwidth&&(this.options_.bandwidth=Hs.INITIAL_BANDWIDTH),this.options_.enableLowInitialPlaylist=this.options_.enableLowInitialPlaylist&&this.options_.bandwidth===Hs.INITIAL_BANDWIDTH,["withCredentials","useDevicePixelRatio","limitRenditionByPlayerDimensions","bandwidth","smoothQualityChange","customTagParsers","customTagMappers","handleManifestRedirects","cacheEncryptionKeys","handlePartialData"].forEach((function(t){void 0!==e.source_[t]&&(e.options_[t]=e.source_[t])})),this.limitRenditionByPlayerDimensions=this.options_.limitRenditionByPlayerDimensions,this.useDevicePixelRatio=this.options_.useDevicePixelRatio},i.src=function(e,t){var i,n=this;e&&(this.setOptions_(),this.options_.src=0===(i=this.source_.src).toLowerCase().indexOf("data:application/vnd.videojs.vhs+json,")?JSON.parse(i.substring(i.indexOf(",")+1)):i,this.options_.tech=this.tech_,this.options_.externVhs=Al,this.options_.sourceType=Object(M.simpleTypeFromSourceType)(t),this.options_.seekTo=function(e){n.tech_.setCurrentTime(e)},this.masterPlaylistController_=new Sl(this.options_),this.playbackWatcher_=new Cl(Ua.mergeOptions(this.options_,{seekable:function(){return n.seekable()},media:function(){return n.masterPlaylistController_.media()},masterPlaylistController:this.masterPlaylistController_})),this.masterPlaylistController_.on("error",(function(){var e=Ua.players[n.tech_.options_.playerId],t=n.masterPlaylistController_.error;"object"!=typeof t||t.code?"string"==typeof t&&(t={message:t,code:3}):t.code=3,e.error(t)})),this.masterPlaylistController_.selectPlaylist=this.selectPlaylist?this.selectPlaylist.bind(this):Al.STANDARD_PLAYLIST_SELECTOR.bind(this),this.masterPlaylistController_.selectInitialPlaylist=Al.INITIAL_PLAYLIST_SELECTOR.bind(this),this.playlists=this.masterPlaylistController_.masterPlaylistLoader_,this.mediaSource=this.masterPlaylistController_.mediaSource,Object.defineProperties(this,{selectPlaylist:{get:function(){return this.masterPlaylistController_.selectPlaylist},set:function(e){this.masterPlaylistController_.selectPlaylist=e.bind(this)}},throughput:{get:function(){return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate},set:function(e){this.masterPlaylistController_.mainSegmentLoader_.throughput.rate=e,this.masterPlaylistController_.mainSegmentLoader_.throughput.count=1}},bandwidth:{get:function(){return this.masterPlaylistController_.mainSegmentLoader_.bandwidth},set:function(e){this.masterPlaylistController_.mainSegmentLoader_.bandwidth=e,this.masterPlaylistController_.mainSegmentLoader_.throughput={rate:0,count:0}}},systemBandwidth:{get:function(){var e,t=1/(this.bandwidth||1);return e=this.throughput>0?1/this.throughput:0,Math.floor(1/(t+e))},set:function(){Ua.log.error('The "systemBandwidth" property is read-only')}}}),this.options_.bandwidth&&(this.bandwidth=this.options_.bandwidth),this.options_.throughput&&(this.throughput=this.options_.throughput),Object.defineProperties(this.stats,{bandwidth:{get:function(){return n.bandwidth||0},enumerable:!0},mediaRequests:{get:function(){return n.masterPlaylistController_.mediaRequests_()||0},enumerable:!0},mediaRequestsAborted:{get:function(){return n.masterPlaylistController_.mediaRequestsAborted_()||0},enumerable:!0},mediaRequestsTimedout:{get:function(){return n.masterPlaylistController_.mediaRequestsTimedout_()||0},enumerable:!0},mediaRequestsErrored:{get:function(){return n.masterPlaylistController_.mediaRequestsErrored_()||0},enumerable:!0},mediaTransferDuration:{get:function(){return n.masterPlaylistController_.mediaTransferDuration_()||0},enumerable:!0},mediaBytesTransferred:{get:function(){return n.masterPlaylistController_.mediaBytesTransferred_()||0},enumerable:!0},mediaSecondsLoaded:{get:function(){return n.masterPlaylistController_.mediaSecondsLoaded_()||0},enumerable:!0},buffered:{get:function(){return ss(n.tech_.buffered())},enumerable:!0},currentTime:{get:function(){return n.tech_.currentTime()},enumerable:!0},currentSource:{get:function(){return n.tech_.currentSource_},enumerable:!0},currentTech:{get:function(){return n.tech_.name_},enumerable:!0},duration:{get:function(){return n.tech_.duration()},enumerable:!0},master:{get:function(){return n.playlists.master},enumerable:!0},playerDimensions:{get:function(){return n.tech_.currentDimensions()},enumerable:!0},seekable:{get:function(){return ss(n.tech_.seekable())},enumerable:!0},timestamp:{get:function(){return Date.now()},enumerable:!0},videoPlaybackQuality:{get:function(){return n.tech_.getVideoPlaybackQuality()},enumerable:!0}}),this.tech_.one("canplay",this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_)),this.tech_.on("bandwidthupdate",(function(){n.options_.useBandwidthFromLocalStorage&&function(e){if(!r.a.localStorage)return!1;var t=Pl();t=t?Ua.mergeOptions(t,e):e;try{r.a.localStorage.setItem("videojs-vhs",JSON.stringify(t))}catch(e){return!1}}({bandwidth:n.bandwidth,throughput:Math.round(n.throughput)})})),this.masterPlaylistController_.on("selectedinitialmedia",(function(){var e,t;t=(e=n).playlists,e.representations=function(){return t&&t.master&&t.master.playlists?t.master.playlists.filter((function(e){return!fs(e)})).map((function(t,i){return new jl(e,t,t.id)})):[]}})),this.masterPlaylistController_.sourceUpdater_.on("ready",(function(){var e=n.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader;Il({player:n.player_,sourceKeySystems:n.source_.keySystems,media:n.playlists.media(),audioMedia:e&&e.media(),mainPlaylists:n.playlists.master.playlists})})),this.on(this.masterPlaylistController_,"progress",(function(){this.tech_.trigger("progress")})),this.on(this.masterPlaylistController_,"firstplay",(function(){this.ignoreNextSeekingEvent_=!0})),this.setupQualityLevels_(),this.tech_.el()&&(this.mediaSourceUrl_=r.a.URL.createObjectURL(this.masterPlaylistController_.mediaSource),this.tech_.src(this.mediaSourceUrl_)))},i.setupQualityLevels_=function(){var e=this,t=Ua.players[this.tech_.options_.playerId];t&&t.qualityLevels&&!this.qualityLevels_&&(this.qualityLevels_=t.qualityLevels(),this.masterPlaylistController_.on("selectedinitialmedia",(function(){var t,i;t=e.qualityLevels_,(i=e).representations().forEach((function(e){t.addQualityLevel(e)})),xl(t,i.playlists)})),this.playlists.on("mediachange",(function(){xl(e.qualityLevels_,e.playlists)})))},t.version=function(){return{"@videojs/http-streaming":"2.2.4","mux.js":"5.6.7","mpd-parser":"0.14.0","m3u8-parser":"4.5.0","aes-decrypter":"3.1.0"}},i.version=function(){return this.constructor.version()},i.canChangeType=function(){return nl.canChangeType()},i.play=function(){this.masterPlaylistController_.play()},i.setCurrentTime=function(e){this.masterPlaylistController_.setCurrentTime(e)},i.duration=function(){return this.masterPlaylistController_.duration()},i.seekable=function(){return this.masterPlaylistController_.seekable()},i.dispose=function(){this.playbackWatcher_&&this.playbackWatcher_.dispose(),this.masterPlaylistController_&&this.masterPlaylistController_.dispose(),this.qualityLevels_&&this.qualityLevels_.dispose(),this.player_&&(delete this.player_.vhs,delete this.player_.dash,delete this.player_.hls),this.tech_&&this.tech_.vhs&&delete this.tech_.vhs,this.tech_&&delete this.tech_.hls,this.mediaSourceUrl_&&r.a.URL.revokeObjectURL&&(r.a.URL.revokeObjectURL(this.mediaSourceUrl_),this.mediaSourceUrl_=null),e.prototype.dispose.call(this)},i.convertToProgramTime=function(e,t){return Os({playlist:this.masterPlaylistController_.media(),time:e,callback:t})},i.seekToProgramTime=function(e,t,i,n){return void 0===i&&(i=!0),void 0===n&&(n=2),Ls({programTime:e,playlist:this.masterPlaylistController_.media(),retryCount:n,pauseAfterSeek:i,seekTo:this.options_.seekTo,tech:this.options_.tech,callback:t})},t}(Ua.getComponent("Component")),Ll={name:"videojs-http-streaming",VERSION:"2.2.4",canHandleSource:function(e,t){void 0===t&&(t={});var i=Ua.mergeOptions(Ua.options,t);return Ll.canPlayType(e.type,i)},handleSource:function(e,t,i){void 0===i&&(i={});var n=Ua.mergeOptions(Ua.options,i);return t.vhs=new Ol(e,t,n),Ua.hasOwnProperty("hls")||Object.defineProperty(t,"hls",{get:function(){return Ua.log.warn("player.tech().hls is deprecated. Use player.tech().vhs instead."),t.vhs},configurable:!0}),t.vhs.xhr=Ss(),t.vhs.src(e.src,e.type),t.vhs},canPlayType:function(e,t){void 0===t&&(t={});var i=Ua.mergeOptions(Ua.options,t).vhs.overrideNative,n=void 0===i?!Ua.browser.IS_ANY_SAFARI:i,r=Object(M.simpleTypeFromSourceType)(e);return r&&(!Al.supportsTypeNatively(r)||n)?"maybe":""}};Object(Me.browserSupportsCodec)("avc1.4d400d,mp4a.40.2")&&Ua.getTech("Html5").registerSourceHandler(Ll,0),Ua.VhsHandler=Ol,Object.defineProperty(Ua,"HlsHandler",{get:function(){return Ua.log.warn("videojs.HlsHandler is deprecated. Use videojs.VhsHandler instead."),Ol},configurable:!0}),Ua.VhsSourceHandler=Ll,Object.defineProperty(Ua,"HlsSourceHandler",{get:function(){return Ua.log.warn("videojs.HlsSourceHandler is deprecated. Use videojs.VhsSourceHandler instead."),Ll},configurable:!0}),Ua.Vhs=Al,Object.defineProperty(Ua,"Hls",{get:function(){return Ua.log.warn("videojs.Hls is deprecated. Use videojs.Vhs instead."),Al},configurable:!0}),Ua.use||(Ua.registerComponent("Hls",Al),Ua.registerComponent("Vhs",Al)),Ua.options.vhs=Ua.options.vhs||{},Ua.options.hls=Ua.options.hls||{},Ua.registerPlugin?Ua.registerPlugin("reloadSourceOnError",El):Ua.plugin("reloadSourceOnError",El);t.a=Ua},d6f6:function(e,t,i){(function(t){var n,r=void 0!==t?t:"undefined"!=typeof window?window:{},a=i(4);"undefined"!=typeof document?n=document:(n=r["__GLOBAL_DOCUMENT_CACHE@4"])||(n=r["__GLOBAL_DOCUMENT_CACHE@4"]=a),e.exports=n}).call(this,i("0288"))},de0d:function(e,t,i){var n=i("967c").toUnsigned;e.exports=function(e){var t={version:e[0],flags:new Uint8Array(e.subarray(1,4)),baseMediaDecodeTime:n(e[4]<<24|e[5]<<16|e[6]<<8|e[7])};return 1===t.version&&(t.baseMediaDecodeTime*=Math.pow(2,32),t.baseMediaDecodeTime+=n(e[8]<<24|e[9]<<16|e[10]<<8|e[11])),t}},e0d3:function(e,t){function i(t,n){return e.exports=i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},i(t,n)}e.exports=i},e1e2:function(e,t,i){"use strict";var n=i("ebb6"),r=function(e,t){var i=1;for(e>t&&(i=-1);Math.abs(t-e)>4294967296;)e+=8589934592*i;return e},a=function(e){var t,i;a.prototype.init.call(this),this.type_=e||"shared",this.push=function(e){"shared"!==this.type_&&e.type!==this.type_||(void 0===i&&(i=e.dts),e.dts=r(e.dts,i),e.pts=r(e.pts,i),t=e.dts,this.trigger("data",e))},this.flush=function(){i=t,this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")},this.discontinuity=function(){i=void 0,t=void 0},this.reset=function(){this.discontinuity(),this.trigger("reset")}};a.prototype=new n,e.exports={TimestampRolloverStream:a,handleRollover:r}},e3a5:function(e,t,i){"use strict";var n=i("185d"),r=i("e1e2").handleRollover,a={};a.ts=i("1ee2"),a.aac=i("c862");var s=i("629a").ONE_SECOND_IN_TS,o=function(e,t,i){for(var n,r,s,o,l=0,u=188,c=!1;u<=e.byteLength;)if(71!==e[l]||71!==e[u]&&u!==e.byteLength)l++,u++;else{switch(n=e.subarray(l,u),a.ts.parseType(n,t.pid)){case"pes":r=a.ts.parsePesType(n,t.table),s=a.ts.parsePayloadUnitStartIndicator(n),"audio"===r&&s&&(o=a.ts.parsePesTime(n))&&(o.type="audio",i.audio.push(o),c=!0)}if(c)break;l+=188,u+=188}for(l=(u=e.byteLength)-188,c=!1;l>=0;)if(71!==e[l]||71!==e[u]&&u!==e.byteLength)l--,u--;else{switch(n=e.subarray(l,u),a.ts.parseType(n,t.pid)){case"pes":r=a.ts.parsePesType(n,t.table),s=a.ts.parsePayloadUnitStartIndicator(n),"audio"===r&&s&&(o=a.ts.parsePesTime(n))&&(o.type="audio",i.audio.push(o),c=!0)}if(c)break;l-=188,u-=188}},l=function(e,t,i){for(var n,r,s,o,l,u,c,d=0,h=188,p=!1,f={data:[],size:0};h<e.byteLength;)if(71!==e[d]||71!==e[h])d++,h++;else{switch(n=e.subarray(d,h),a.ts.parseType(n,t.pid)){case"pes":if(r=a.ts.parsePesType(n,t.table),s=a.ts.parsePayloadUnitStartIndicator(n),"video"===r&&(s&&!p&&(o=a.ts.parsePesTime(n))&&(o.type="video",i.video.push(o),p=!0),!i.firstKeyFrame)){if(s&&0!==f.size){for(l=new Uint8Array(f.size),u=0;f.data.length;)c=f.data.shift(),l.set(c,u),u+=c.byteLength;if(a.ts.videoPacketContainsKeyFrame(l)){var m=a.ts.parsePesTime(l);m?(i.firstKeyFrame=m,i.firstKeyFrame.type="video"):console.warn("Failed to extract PTS/DTS from PES at first keyframe. This could be an unusual TS segment, or else mux.js did not parse your TS segment correctly. If you know your TS segments do contain PTS/DTS on keyframes please file a bug report! You can try ffprobe to double check for yourself.")}f.size=0}f.data.push(n),f.size+=n.byteLength}}if(p&&i.firstKeyFrame)break;d+=188,h+=188}for(d=(h=e.byteLength)-188,p=!1;d>=0;)if(71!==e[d]||71!==e[h])d--,h--;else{switch(n=e.subarray(d,h),a.ts.parseType(n,t.pid)){case"pes":r=a.ts.parsePesType(n,t.table),s=a.ts.parsePayloadUnitStartIndicator(n),"video"===r&&s&&(o=a.ts.parsePesTime(n))&&(o.type="video",i.video.push(o),p=!0)}if(p)break;d-=188,h-=188}},u=function(e){var t={pid:null,table:null},i={};for(var r in function(e,t){for(var i,n=0,r=188;r<e.byteLength;)if(71!==e[n]||71!==e[r])n++,r++;else{switch(i=e.subarray(n,r),a.ts.parseType(i,t.pid)){case"pat":t.pid||(t.pid=a.ts.parsePat(i));break;case"pmt":t.table||(t.table=a.ts.parsePmt(i))}if(t.pid&&t.table)return;n+=188,r+=188}}(e,t),t.table){if(t.table.hasOwnProperty(r))switch(t.table[r]){case n.H264_STREAM_TYPE:i.video=[],l(e,t,i),0===i.video.length&&delete i.video;break;case n.ADTS_STREAM_TYPE:i.audio=[],o(e,t,i),0===i.audio.length&&delete i.audio}}return i};e.exports={inspect:function(e,t){var i;return(i=a.aac.isLikelyAacData(e)?function(e){for(var t,i=!1,n=0,r=null,o=null,l=0,u=0;e.length-u>=3;){switch(a.aac.parseType(e,u)){case"timed-metadata":if(e.length-u<10){i=!0;break}if((l=a.aac.parseId3TagSize(e,u))>e.length){i=!0;break}null===o&&(t=e.subarray(u,u+l),o=a.aac.parseAacTimestamp(t)),u+=l;break;case"audio":if(e.length-u<7){i=!0;break}if((l=a.aac.parseAdtsSize(e,u))>e.length){i=!0;break}null===r&&(t=e.subarray(u,u+l),r=a.aac.parseSampleRate(t)),n++,u+=l;break;default:u++}if(i)return null}if(null===r||null===o)return null;var c=s/r;return{audio:[{type:"audio",dts:o,pts:o},{type:"audio",dts:o+1024*n*c,pts:o+1024*n*c}]}}(e):u(e))&&(i.audio||i.video)?(function(e,t){if(e.audio&&e.audio.length){var i=t;void 0===i&&(i=e.audio[0].dts),e.audio.forEach((function(e){e.dts=r(e.dts,i),e.pts=r(e.pts,i),e.dtsTime=e.dts/s,e.ptsTime=e.pts/s}))}if(e.video&&e.video.length){var n=t;if(void 0===n&&(n=e.video[0].dts),e.video.forEach((function(e){e.dts=r(e.dts,n),e.pts=r(e.pts,n),e.dtsTime=e.dts/s,e.ptsTime=e.pts/s})),e.firstKeyFrame){var a=e.firstKeyFrame;a.dts=r(a.dts,n),a.pts=r(a.pts,n),a.dtsTime=a.dts/s,a.ptsTime=a.dts/s}}}(i,t),i):null},parseAudioPes_:o}},e3b7:function(e,t){e.exports=function(e){var t,i=new DataView(e.buffer,e.byteOffset,e.byteLength),n={version:e[0],flags:new Uint8Array(e.subarray(1,4)),trackId:i.getUint32(4)},r=1&n.flags[2],a=2&n.flags[2],s=8&n.flags[2],o=16&n.flags[2],l=32&n.flags[2],u=65536&n.flags[0],c=131072&n.flags[0];return t=8,r&&(t+=4,n.baseDataOffset=i.getUint32(12),t+=4),a&&(n.sampleDescriptionIndex=i.getUint32(t),t+=4),s&&(n.defaultSampleDuration=i.getUint32(t),t+=4),o&&(n.defaultSampleSize=i.getUint32(t),t+=4),l&&(n.defaultSampleFlags=i.getUint32(t)),u&&(n.durationIsEmpty=!0),!r&&c&&(n.baseDataOffsetIsMoof=!0),n}},e3c3:function(e,t){e.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}},e60d:function(e,t,i){"use strict";
/*! @name @videojs/vhs-utils @version 2.2.1 @license MIT */var n=function(){function e(){this.listeners={}}var t=e.prototype;return t.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)},t.off=function(e,t){if(!this.listeners[e])return!1;var i=this.listeners[e].indexOf(t);return this.listeners[e]=this.listeners[e].slice(0),this.listeners[e].splice(i,1),i>-1},t.trigger=function(e){var t=this.listeners[e];if(t)if(2===arguments.length)for(var i=t.length,n=0;n<i;++n)t[n].call(this,arguments[1]);else for(var r=Array.prototype.slice.call(arguments,1),a=t.length,s=0;s<a;++s)t[s].apply(this,r)},t.dispose=function(){this.listeners={}},t.pipe=function(e){this.on("data",(function(t){e.push(t)}))},e}();e.exports=n},ebb6:function(e,t,i){"use strict";var n=function(){this.init=function(){var e={};this.on=function(t,i){e[t]||(e[t]=[]),e[t]=e[t].concat(i)},this.off=function(t,i){var n;return!!e[t]&&(n=e[t].indexOf(i),e[t]=e[t].slice(),e[t].splice(n,1),n>-1)},this.trigger=function(t){var i,n,r,a;if(i=e[t])if(2===arguments.length)for(r=i.length,n=0;n<r;++n)i[n].call(this,arguments[1]);else{for(a=[],n=arguments.length,n=1;n<arguments.length;++n)a.push(arguments[n]);for(r=i.length,n=0;n<r;++n)i[n].apply(this,a)}},this.dispose=function(){e={}}}};n.prototype.pipe=function(e){return this.on("data",(function(t){e.push(t)})),this.on("done",(function(t){e.flush(t)})),this.on("partialdone",(function(t){e.partialFlush(t)})),this.on("endedtimeline",(function(t){e.endTimeline(t)})),this.on("reset",(function(t){e.reset(t)})),e},n.prototype.push=function(e){this.trigger("data",e)},n.prototype.flush=function(e){this.trigger("done",e)},n.prototype.partialFlush=function(e){this.trigger("partialdone",e)},n.prototype.endTimeline=function(e){this.trigger("endedtimeline",e)},n.prototype.reset=function(e){this.trigger("reset",e)},e.exports=n},ecdc:function(e,t,i){(function(t){var i;i="undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{},e.exports=i}).call(this,i("0288"))},ee7c:function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},f433:function(e,t){function i(){return e.exports=i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e},i.apply(this,arguments)}e.exports=i},f639:function(e,t,i){"use strict";
/*! @name @videojs/vhs-utils @version 2.2.1 @license MIT */Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){return e instanceof Uint8Array?e:new Uint8Array(e&&e.buffer||e,e&&e.byteOffset||0,e&&e.byteLength||0)};t.bytesToString=function(e){if(!e)return"";e=Array.prototype.slice.call(e);var t=String.fromCharCode.apply(null,n(e));try{return decodeURIComponent(escape(t))}catch(e){}return t},t.concatTypedArrays=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=t.reduce((function(e,t){return e+=t&&(t.byteLength||t.length)||0}),0),a=new Uint8Array(r),s=0;return t.forEach((function(e){e=n(e),a.set(e,s),s+=e.byteLength})),a},t.isTypedArray=function(e){return ArrayBuffer.isView(e)},t.stringToBytes=function(e,t){void 0===t&&(t=!1);return"string"!=typeof e&&e&&"function"==typeof e.toString&&(e=e.toString()),"string"!=typeof e?[]:(t||(e=unescape(encodeURIComponent(e))),e.split("").map((function(e){return 255&e.charCodeAt(0)})))},t.toUint8=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19AdmlkZW9qc194aHJAMi41LjFAQHZpZGVvanMveGhyL2luZGV4LmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTIuNUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fZ2xvYmFsQDQuMy4yQGdsb2JhbC9kb2N1bWVudC5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19zYWZlLWpzb24tcGFyc2VANC4wLjBAc2FmZS1qc29uLXBhcnNlL3R1cGxlLmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX0B2aWRlb2pzX3Zocy11dGlsc0AyLjIuMUBAdmlkZW9qcy92aHMtdXRpbHMvZGlzdC9yZXNvbHZlLXVybC5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19tdXguanNANS42LjdAbXV4LmpzL2xpYi9tMnRzL3N0cmVhbS10eXBlcy5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19tdXguanNANS42LjdAbXV4LmpzL2xpYi90b29scy9wYXJzZS1zaWR4LmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX211eC5qc0A1LjYuN0BtdXguanMvbGliL20ydHMvcHJvYmUuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fdXJsLXRvb2xraXRAMi4yLjFAdXJsLXRvb2xraXQvc3JjL3VybC10b29sa2l0LmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX3ZpZGVvLmpzQDcuMTAuMkB2aWRlby5qcy9kaXN0L3ZpZGVvLWpzLmNzcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19rZXljb2RlQDIuMi4wQGtleWNvZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9feG1sZG9tQDAuMS4zMUB4bWxkb20vZG9tLmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTIuNUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL192aWRlby5qc0A3LjEwLjJAdmlkZW8uanMvZGlzdC92aWRlby1qcy5jc3M/MjJlZiIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19tdXguanNANS42LjdAbXV4LmpzL2xpYi9tcDQvcHJvYmUuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fbXV4LmpzQDUuNi43QG11eC5qcy9saWIvdXRpbHMvY2xvY2suanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fZ2xvYmFsQDQuNC4wQGdsb2JhbC93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xMi41QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fbXV4LmpzQDUuNi43QG11eC5qcy9saWIvdG9vbHMvcGFyc2Utc2FtcGxlLWZsYWdzLmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX0B2aWRlb2pzX3Zocy11dGlsc0AyLjIuMUBAdmlkZW9qcy92aHMtdXRpbHMvZGlzdC9jb2RlY3MuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fbXV4LmpzQDUuNi43QG11eC5qcy9saWIvbXA0L3BhcnNlLXR5cGUuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fQHZpZGVvanNfdmhzLXV0aWxzQDIuMi4xQEB2aWRlb2pzL3Zocy11dGlscy9kaXN0L2RlY29kZS1iNjQtdG8tdWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fdmlkZW9qcy12dHQuanNAMC4xNS4yQHZpZGVvanMtdnR0LmpzL2xpYi9icm93c2VyLWluZGV4LmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX211eC5qc0A1LjYuN0BtdXguanMvbGliL3V0aWxzL2Jpbi5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19tdXguanNANS42LjdAbXV4LmpzL2xpYi90b29scy9wYXJzZS10cnVuLmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX3htbGRvbUAwLjEuMzFAeG1sZG9tL2RvbS1wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fbXV4LmpzQDUuNi43QG11eC5qcy9saWIvbXA0L2ZpbmQtYm94LmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX3ZpZGVvanMtdnR0LmpzQDAuMTUuMkB2aWRlb2pzLXZ0dC5qcy9saWIvdnR0LmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX0B2aWRlb2pzX3Zocy11dGlsc0AyLjIuMUBAdmlkZW9qcy92aHMtdXRpbHMvZGlzdC9tZWRpYS10eXBlcy5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL192aWRlb2pzLXZ0dC5qc0AwLjE1LjJAdmlkZW9qcy12dHQuanMvbGliL3Z0dHJlZ2lvbi5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19AdmlkZW9qc192aHMtdXRpbHNAMi4yLjFAQHZpZGVvanMvdmhzLXV0aWxzL2Rpc3QvY29udGFpbmVycy5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjEyLjVAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19tdXguanNANS42LjdAbXV4LmpzL2xpYi9hYWMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xMi41QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX3htbGRvbUAwLjEuMzFAeG1sZG9tL3NheC5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjEyLjVAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fdmlkZW9qcy12dHQuanNAMC4xNS4yQHZpZGVvanMtdnR0LmpzL2xpYi92dHRjdWUuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9faXMtZnVuY3Rpb25AMS4wLjJAaXMtZnVuY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fbTN1OC1wYXJzZXJANC41LjBAbTN1OC1wYXJzZXIvZGlzdC9tM3U4LXBhcnNlci5lcy5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19tcGQtcGFyc2VyQDAuMTQuMEBtcGQtcGFyc2VyL2Rpc3QvbXBkLXBhcnNlci5lcy5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL192aWRlby5qc0A3LjEwLjJAdmlkZW8uanMvZGlzdC92aWRlby5lcy5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19nbG9iYWxANC40LjBAZ2xvYmFsL2RvY3VtZW50LmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX211eC5qc0A1LjYuN0BtdXguanMvbGliL3Rvb2xzL3BhcnNlLXRmZHQuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xMi41QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fbXV4LmpzQDUuNi43QG11eC5qcy9saWIvbTJ0cy90aW1lc3RhbXAtcm9sbG92ZXItc3RyZWFtLmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX211eC5qc0A1LjYuN0BtdXguanMvbGliL3Rvb2xzL3RzLWluc3BlY3Rvci5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19tdXguanNANS42LjdAbXV4LmpzL2xpYi90b29scy9wYXJzZS10ZmhkLmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTIuNUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19AdmlkZW9qc192aHMtdXRpbHNAMi4yLjFAQHZpZGVvanMvdmhzLXV0aWxzL2Rpc3Qvc3RyZWFtLmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX211eC5qc0A1LjYuN0BtdXguanMvbGliL3V0aWxzL3N0cmVhbS5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19nbG9iYWxANC4zLjJAZ2xvYmFsL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly9fX21vZHVsZV9lbnRyeV96amFwcF9fLy4vbm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjEyLjVAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL19fbW9kdWxlX2VudHJ5X3pqYXBwX18vLi9ub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTIuNUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vX19tb2R1bGVfZW50cnlfemphcHBfXy8uL25vZGVfbW9kdWxlcy9fQHZpZGVvanNfdmhzLXV0aWxzQDIuMi4xQEB2aWRlb2pzL3Zocy11dGlscy9kaXN0L2J5dGUtaGVscGVycy5qcyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJfZXh0ZW5kcyIsImlzRnVuY3Rpb24iLCJpbml0UGFyYW1zIiwidXJpIiwib3B0aW9ucyIsImNhbGxiYWNrIiwicGFyYW1zIiwiY3JlYXRlWEhSIiwiX2NyZWF0ZVhIUiIsIkVycm9yIiwiY2FsbGVkIiwiZXJyIiwicmVzcG9uc2UiLCJib2R5IiwiZ2V0Qm9keSIsInVuZGVmaW5lZCIsInhociIsInJlc3BvbnNlVGV4dCIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlWE1MIiwiZmlyZWZveEJ1Z1Rha2VuRWZmZWN0IiwiZG9jdW1lbnRFbGVtZW50Iiwibm9kZU5hbWUiLCJlIiwiZ2V0WG1sIiwiaXNKc29uIiwiSlNPTiIsInBhcnNlIiwiZXJyb3JGdW5jIiwiZXZ0IiwiY2xlYXJUaW1lb3V0IiwidGltZW91dFRpbWVyIiwic3RhdHVzQ29kZSIsImZhaWx1cmVSZXNwb25zZSIsImxvYWRGdW5jIiwiYWJvcnRlZCIsInN0YXR1cyIsInVzZVhEUiIsIm1ldGhvZCIsImhlYWRlcnMiLCJ1cmwiLCJyYXdSZXF1ZXN0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzdWx0IiwidHJpbSIsInNwbGl0IiwiZm9yRWFjaCIsInJvdyIsImluZGV4IiwiaW5kZXhPZiIsImtleSIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsInB1c2giLCJwYXJzZUhlYWRlcnMiLCJjb3JzIiwiWERvbWFpblJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImRhdGEiLCJzeW5jIiwianNvbiIsInN0cmluZ2lmeSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzZXRUaW1lb3V0Iiwib25sb2FkIiwib25lcnJvciIsIm9ucHJvZ3Jlc3MiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib3BlbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ0aW1lb3V0IiwiYWJvcnQiLCJjb2RlIiwic2V0UmVxdWVzdEhlYWRlciIsImhhc093blByb3BlcnR5Iiwib2JqIiwiaSIsImlzRW1wdHkiLCJiZWZvcmVTZW5kIiwic2VuZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwiYXJyYXkiLCJpdGVyYXRvciIsImxlbmd0aCIsImZvckVhY2hBcnJheSIsInRvVXBwZXJDYXNlIiwiX3R5cGVvZiIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJjYWxsIiwiZG9jY3kiLCJtaW5Eb2MiLCJkb2N1bWVudCIsInRvcExldmVsIiwicmV2aXZlciIsImVycm9yIiwiVVJMVG9vbGtpdCIsIl9pbnRlcm9wRGVmYXVsdExlZ2FjeSIsIlVSTFRvb2xraXRfX2RlZmF1bHQiLCJ3aW5kb3dfX2RlZmF1bHQiLCJiYXNlVXJsIiwicmVsYXRpdmVVcmwiLCJ0ZXN0IiwiYnVpbGRBYnNvbHV0ZVVSTCIsImxvY2F0aW9uIiwiaHJlZiIsIkgyNjRfU1RSRUFNX1RZUEUiLCJBRFRTX1NUUkVBTV9UWVBFIiwiTUVUQURBVEFfU1RSRUFNX1RZUEUiLCJ2aWV3IiwiRGF0YVZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsInZlcnNpb24iLCJmbGFncyIsIlVpbnQ4QXJyYXkiLCJzdWJhcnJheSIsInJlZmVyZW5jZXMiLCJyZWZlcmVuY2VJZCIsImdldFVpbnQzMiIsInRpbWVzY2FsZSIsImVhcmxpZXN0UHJlc2VudGF0aW9uVGltZSIsImZpcnN0T2Zmc2V0IiwicmVmZXJlbmNlQ291bnQiLCJnZXRVaW50MTYiLCJyZWZlcmVuY2VUeXBlIiwicmVmZXJlbmNlZFNpemUiLCJzdWJzZWdtZW50RHVyYXRpb24iLCJzdGFydHNXaXRoU2FwIiwic2FwVHlwZSIsInNhcERlbHRhVGltZSIsIlN0cmVhbVR5cGVzIiwicGFyc2VQaWQiLCJwYWNrZXQiLCJwaWQiLCJwYXJzZVBheWxvYWRVbml0U3RhcnRJbmRpY2F0b3IiLCJwYXJzZUFkYXB0aW9uRmllbGQiLCJvZmZzZXQiLCJwYXJzZU5hbFVuaXRUeXBlIiwidHlwZSIsInBhcnNlVHlwZSIsInBtdFBpZCIsInBhcnNlUGF0IiwicHVzaSIsInBhcnNlUG10IiwicHJvZ3JhbU1hcFRhYmxlIiwicGF5bG9hZE9mZnNldCIsInRhYmxlRW5kIiwicGFyc2VQZXNUeXBlIiwicGFyc2VQZXNUaW1lIiwicHRzRHRzRmxhZ3MiLCJwZXMiLCJwdHMiLCJkdHMiLCJ2aWRlb1BhY2tldENvbnRhaW5zS2V5RnJhbWUiLCJmcmFtZUJ1ZmZlciIsImZyYW1lSSIsImZyYW1lU3luY1BvaW50IiwiZm91bmRLZXlGcmFtZSIsIlVSTF9SRUdFWCIsIkZJUlNUX1NFR01FTlRfUkVHRVgiLCJTTEFTSF9ET1RfUkVHRVgiLCJTTEFTSF9ET1RfRE9UX1JFR0VYIiwiYmFzZVVSTCIsInJlbGF0aXZlVVJMIiwib3B0cyIsImFsd2F5c05vcm1hbGl6ZSIsImJhc2VQYXJ0c0Zvck5vcm1hbGlzZSIsInBhcnNlVVJMIiwicGF0aCIsIm5vcm1hbGl6ZVBhdGgiLCJidWlsZFVSTEZyb21QYXJ0cyIsInJlbGF0aXZlUGFydHMiLCJzY2hlbWUiLCJiYXNlUGFydHMiLCJuZXRMb2MiLCJwYXRoUGFydHMiLCJleGVjIiwiYnVpbHRQYXJ0cyIsInF1ZXJ5IiwiZnJhZ21lbnQiLCJiYXNlVVJMUGF0aCIsIm5ld1BhdGgiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsInBhcnRzIiwicmV2ZXJzZSIsImpvaW4iLCJyZXBsYWNlIiwia2V5Q29kZSIsInNlYXJjaElucHV0IiwiaGFzS2V5Q29kZSIsIndoaWNoIiwiY2hhckNvZGUiLCJuYW1lcyIsImZvdW5kTmFtZWRLZXkiLCJzZWFyY2giLCJTdHJpbmciLCJjb2RlcyIsImFsaWFzZXMiLCJjaGFyQ29kZUF0IiwiaXNFdmVudEtleSIsImV2ZW50IiwibmFtZU9yQ29kZSIsImZyb21DaGFyQ29kZSIsInRpdGxlIiwiYWxpYXMiLCJjb3B5Iiwic3JjIiwiZGVzdCIsInAiLCJDbGFzcyIsIlN1cGVyIiwicHQiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJwcHQiLCJfX3Byb3RvX18iLCJ0IiwiY29uc3RydWN0b3IiLCJjb25zb2xlIiwiTm9kZVR5cGUiLCJFTEVNRU5UX05PREUiLCJBVFRSSUJVVEVfTk9ERSIsIlRFWFRfTk9ERSIsIkNEQVRBX1NFQ1RJT05fTk9ERSIsIkVOVElUWV9SRUZFUkVOQ0VfTk9ERSIsIkVOVElUWV9OT0RFIiwiUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFIiwiQ09NTUVOVF9OT0RFIiwiRE9DVU1FTlRfTk9ERSIsIkRPQ1VNRU5UX1RZUEVfTk9ERSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJOT1RBVElPTl9OT0RFIiwiRXhjZXB0aW9uQ29kZSIsIkV4Y2VwdGlvbk1lc3NhZ2UiLCJISUVSQVJDSFlfUkVRVUVTVF9FUlIiLCJJTkRFWF9TSVpFX0VSUiIsIkRPTVNUUklOR19TSVpFX0VSUiIsIk5PVF9GT1VORF9FUlIiLCJXUk9OR19ET0NVTUVOVF9FUlIiLCJJTlZBTElEX0NIQVJBQ1RFUl9FUlIiLCJOT19EQVRBX0FMTE9XRURfRVJSIiwiTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSIiwiSU5VU0VfQVRUUklCVVRFX0VSUiIsIk5PVF9TVVBQT1JURURfRVJSIiwiSU5WQUxJRF9TVEFURV9FUlIiLCJTWU5UQVhfRVJSIiwiSU5WQUxJRF9NT0RJRklDQVRJT05fRVJSIiwiTkFNRVNQQUNFX0VSUiIsIklOVkFMSURfQUNDRVNTX0VSUiIsIkRPTUV4Y2VwdGlvbiIsIm1lc3NhZ2UiLCJ0aGlzIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJOb2RlTGlzdCIsIkxpdmVOb2RlTGlzdCIsIm5vZGUiLCJyZWZyZXNoIiwiX25vZGUiLCJfcmVmcmVzaCIsIl91cGRhdGVMaXZlTGlzdCIsImxpc3QiLCJpbmMiLCJfaW5jIiwib3duZXJEb2N1bWVudCIsImxzIiwiX19zZXRfXyIsIk5hbWVkTm9kZU1hcCIsIl9maW5kTm9kZUluZGV4IiwiX2FkZE5hbWVkTm9kZSIsImVsIiwibmV3QXR0ciIsIm9sZEF0dHIiLCJvd25lckVsZW1lbnQiLCJkb2MiLCJfb25SZW1vdmVBdHRyaWJ1dGUiLCJuYW1lc3BhY2VVUkkiLCJfbnNNYXAiLCJwcmVmaXgiLCJsb2NhbE5hbWUiLCJfb25BZGRBdHRyaWJ1dGUiLCJfcmVtb3ZlTmFtZWROb2RlIiwiYXR0ciIsInRhZ05hbWUiLCJsYXN0SW5kZXgiLCJET01JbXBsZW1lbnRhdGlvbiIsImZlYXR1cmVzIiwiX2ZlYXR1cmVzIiwiZmVhdHVyZSIsIk5vZGUiLCJfeG1sRW5jb2RlciIsImMiLCJfdmlzaXROb2RlIiwiZmlyc3RDaGlsZCIsIm5leHRTaWJsaW5nIiwiRG9jdW1lbnQiLCJyZW1vdmUiLCJfb25VcGRhdGVDaGlsZCIsIm5ld0NoaWxkIiwiY3MiLCJjaGlsZE5vZGVzIiwiY2hpbGQiLCJfcmVtb3ZlQ2hpbGQiLCJwYXJlbnROb2RlIiwicHJldmlvdXMiLCJwcmV2aW91c1NpYmxpbmciLCJuZXh0IiwibGFzdENoaWxkIiwiX2luc2VydEJlZm9yZSIsIm5leHRDaGlsZCIsImNwIiwicmVtb3ZlQ2hpbGQiLCJub2RlVHlwZSIsIm5ld0ZpcnN0IiwibmV3TGFzdCIsInByZSIsIkVsZW1lbnQiLCJBdHRyIiwiQ2hhcmFjdGVyRGF0YSIsIlRleHQiLCJDb21tZW50IiwiQ0RBVEFTZWN0aW9uIiwiRG9jdW1lbnRUeXBlIiwiTm90YXRpb24iLCJFbnRpdHkiLCJFbnRpdHlSZWZlcmVuY2UiLCJEb2N1bWVudEZyYWdtZW50IiwiUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiWE1MU2VyaWFsaXplciIsIm5vZGVTZXJpYWxpemVUb1N0cmluZyIsImlzSHRtbCIsIm5vZGVGaWx0ZXIiLCJidWYiLCJyZWZOb2RlIiwibG9va3VwUHJlZml4IiwidmlzaWJsZU5hbWVzcGFjZXMiLCJuYW1lc3BhY2UiLCJzZXJpYWxpemVUb1N0cmluZyIsIm5lZWROYW1lc3BhY2VEZWZpbmUiLCJpc0hUTUwiLCJucyIsImF0dHJzIiwiYXR0cmlidXRlcyIsImxlbiIsIml0ZW0iLCJuYW1lIiwicHViaWQiLCJwdWJsaWNJZCIsInN5c2lkIiwic3lzdGVtSWQiLCJzdWIiLCJpbnRlcm5hbFN1YnNldCIsInRhcmdldCIsIm9iamVjdCIsInRvU3RyaW5nIiwiZ2V0TmFtZWRJdGVtIiwic2V0TmFtZWRJdGVtIiwiX293bmVyRWxlbWVudCIsInNldE5hbWVkSXRlbU5TIiwiZ2V0TmFtZWRJdGVtTlMiLCJyZW1vdmVOYW1lZEl0ZW0iLCJyZW1vdmVOYW1lZEl0ZW1OUyIsImhhc0ZlYXR1cmUiLCJ2ZXJzaW9ucyIsImNyZWF0ZURvY3VtZW50IiwicXVhbGlmaWVkTmFtZSIsImRvY3R5cGUiLCJpbXBsZW1lbnRhdGlvbiIsImFwcGVuZENoaWxkIiwicm9vdCIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZURvY3VtZW50VHlwZSIsIm5vZGVWYWx1ZSIsImluc2VydEJlZm9yZSIsInJlZkNoaWxkIiwicmVwbGFjZUNoaWxkIiwib2xkQ2hpbGQiLCJoYXNDaGlsZE5vZGVzIiwiY2xvbmVOb2RlIiwiZGVlcCIsIm5vZGUyIiwibiIsInYiLCJhdHRyczIiLCJzZXRBdHRyaWJ1dGVOb2RlIiwibm9ybWFsaXplIiwiYXBwZW5kRGF0YSIsImlzU3VwcG9ydGVkIiwiaGFzQXR0cmlidXRlcyIsIm1hcCIsImxvb2t1cE5hbWVzcGFjZVVSSSIsImlzRGVmYXVsdE5hbWVzcGFjZSIsImltcG9ydE5vZGUiLCJpbXBvcnRlZE5vZGUiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwicnR2IiwiZ2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUNvbW1lbnQiLCJjcmVhdGVDREFUQVNlY3Rpb24iLCJjcmVhdGVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJjcmVhdGVBdHRyaWJ1dGUiLCJzcGVjaWZpZWQiLCJjcmVhdGVFbnRpdHlSZWZlcmVuY2UiLCJwbCIsImNyZWF0ZUF0dHJpYnV0ZU5TIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlTm9kZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZU5vZGUiLCJfYXBwZW5kU2luZ2xlQ2hpbGQiLCJzZXRBdHRyaWJ1dGVOb2RlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsIm9sZCIsImdldEF0dHJpYnV0ZU5vZGVOUyIsImhhc0F0dHJpYnV0ZU5TIiwiZ2V0QXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYmFzZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lTlMiLCJzdWJzdHJpbmdEYXRhIiwiY291bnQiLCJ0ZXh0IiwiaW5zZXJ0RGF0YSIsInJlcGxhY2VEYXRhIiwiZGVsZXRlRGF0YSIsInNwbGl0VGV4dCIsIm5ld1RleHQiLCJuZXdOb2RlIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCIkJGxlbmd0aCIsImdldFRleHRDb250ZW50Iiwic2V0IiwiUmVmZXJlbmNlRXJyb3IiLCJjb250ZW50IiwibG9jYWxzIiwiYWRkIiwic3RhcnRUaW1lIiwiY29tcG9zaXRpb25TdGFydFRpbWUiLCJnZXRWaWRlb1RyYWNrSWRzIiwiZ2V0VHJhY2tzIiwiZ2V0VGltZXNjYWxlRnJvbU1lZGlhSGVhZGVyIiwidG9VbnNpZ25lZCIsInRvSGV4U3RyaW5nIiwiZmluZEJveCIsInBhcnNlVGZoZCIsInBhcnNlVHJ1biIsInBhcnNlVGZkdCIsImluaXQiLCJyZWR1Y2UiLCJ0cmFrIiwidGtoZCIsIm1kaGQiLCJ0cmFmcyIsImJhc2VUaW1lcyIsImNvbmNhdCIsImFwcGx5IiwidHJhZiIsInRmaGQiLCJzY2FsZSIsInRmZHQiLCJNYXRoIiwicG93IiwiSW5maW5pdHkiLCJtaW4iLCJpc0Zpbml0ZSIsInRpbWVzY2FsZXMiLCJ0cmFja0lkIiwidHJhZkJveGVzIiwiYmFzZU1lZGlhRGVjb2RlVGltZSIsImNvbXBvc2l0aW9uVGltZU9mZnNldCIsInRydW4iLCJwYXJzZWRUcnVuIiwic2FtcGxlcyIsInRyYWtzIiwidmlkZW9UcmFja0lkcyIsImhkbHJzIiwidGtoZHMiLCJoZGxyIiwiaGFuZGxlclR5cGUiLCJnZXRVaW50OCIsInRyYWNrcyIsInRraGRWZXJzaW9uIiwidHJhY2siLCJzdHNkIiwic2FtcGxlRGVzY3JpcHRpb25zIiwiY29kZWMiLCJjb2RlY0NvbmZpZyIsImNvZGVjQm94Iiwic2Vjb25kc1RvVmlkZW9UcyIsInNlY29uZHNUb0F1ZGlvVHMiLCJ2aWRlb1RzVG9TZWNvbmRzIiwiYXVkaW9Uc1RvU2Vjb25kcyIsImF1ZGlvVHNUb1ZpZGVvVHMiLCJ2aWRlb1RzVG9BdWRpb1RzIiwibWV0YWRhdGFUc1RvU2Vjb25kcyIsInNlY29uZHMiLCJzYW1wbGVSYXRlIiwidGltZXN0YW1wIiwidGltZWxpbmVTdGFydFB0cyIsImtlZXBPcmlnaW5hbFRpbWVzdGFtcHMiLCJPTkVfU0VDT05EX0lOX1RTIiwid2luIiwiZ2xvYmFsIiwiX2dldFByb3RvdHlwZU9mIiwibyIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJpc0xlYWRpbmciLCJkZXBlbmRzT24iLCJpc0RlcGVuZGVkT24iLCJoYXNSZWR1bmRhbmN5IiwicGFkZGluZ1ZhbHVlIiwiaXNOb25TeW5jU2FtcGxlIiwiZGVncmFkYXRpb25Qcmlvcml0eSIsInJlZ2V4cyIsIm1wNCIsIndlYm0iLCJvZ2ciLCJ2aWRlbyIsImF1ZGlvIiwibXV4ZXJWaWRlbyIsIm11eGVyQXVkaW8iLCJ0cmFuc2xhdGVMZWdhY3lDb2RlYyIsIm9yaWciLCJwcm9maWxlIiwiYXZjTGV2ZWwiLCJOdW1iZXIiLCJ0cmFuc2xhdGVMZWdhY3lDb2RlY3MiLCJjb2RlY3MiLCJwYXJzZUNvZGVjcyIsImNvZGVjU3RyaW5nIiwibWF0Y2giLCJkZXRhaWxzIiwiaXNBdWRpb0NvZGVjIiwiZ2V0TWltZUZvckNvZGVjIiwiY29udGFpbmVyIiwiZXZlcnkiLCJERUZBVUxUX0FVRElPX0NPREVDIiwiREVGQVVMVF9WSURFT19DT0RFQyIsImJyb3dzZXJTdXBwb3J0c0NvZGVjIiwiTWVkaWFTb3VyY2UiLCJpc1R5cGVTdXBwb3J0ZWQiLCJjb2RlY3NGcm9tRGVmYXVsdCIsIm1hc3RlciIsImF1ZGlvR3JvdXBJZCIsIm1lZGlhR3JvdXBzIiwiQVVESU8iLCJhdWRpb0dyb3VwIiwiYXVkaW9UeXBlIiwicGxheWxpc3RzIiwiQ09ERUNTIiwiaXNWaWRlb0NvZGVjIiwibWFwTGVnYWN5QXZjQ29kZWNzIiwibXV4ZXJTdXBwb3J0c0NvZGVjIiwiYjY0VGV4dCIsInMiLCJkZWNvZGVkU3RyaW5nIiwiYXRvYiIsIkJ1ZmZlciIsImZyb20iLCJ2dHRqcyIsIldlYlZUVCIsIlZUVEN1ZSIsIlZUVFJlZ2lvbiIsImN1ZVNoaW0iLCJyZWdpb25TaGltIiwibmF0aXZlVlRUQ3VlIiwibmF0aXZlVlRUUmVnaW9uIiwic2hpbSIsInJlc3RvcmUiLCJwYXJzZVNhbXBsZUZsYWdzIiwic2FtcGxlIiwiZGF0YU9mZnNldFByZXNlbnQiLCJmaXJzdFNhbXBsZUZsYWdzUHJlc2VudCIsInNhbXBsZUR1cmF0aW9uUHJlc2VudCIsInNhbXBsZVNpemVQcmVzZW50Iiwic2FtcGxlRmxhZ3NQcmVzZW50Iiwic2FtcGxlQ29tcG9zaXRpb25UaW1lT2Zmc2V0UHJlc2VudCIsInNhbXBsZUNvdW50IiwiZGF0YU9mZnNldCIsImdldEludDMyIiwiZHVyYXRpb24iLCJzaXplIiwiRE9NUGFyc2VyIiwibG9jYXRvciIsIkRPTUhhbmRsZXIiLCJjZGF0YSIsInBvc2l0aW9uIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsIl9sb2NhdG9yIiwibCIsIl90b1N0cmluZyIsImNoYXJzIiwic3RhcnQiLCJzdWJzdHIiLCJqYXZhIiwibGFuZyIsImFwcGVuZEVsZW1lbnQiLCJoYW5kZXIiLCJjdXJyZW50RWxlbWVudCIsInBhcnNlRnJvbVN0cmluZyIsInNvdXJjZSIsIm1pbWVUeXBlIiwic2F4IiwiWE1MUmVhZGVyIiwiZG9tQnVpbGRlciIsImVycm9ySGFuZGxlciIsImRlZmF1bHROU01hcCIsInhtbG5zIiwiZW50aXR5TWFwIiwic2V0RG9jdW1lbnRMb2NhdG9yIiwiZXJyb3JJbXBsIiwiaXNDYWxsYmFjayIsIkZ1bmN0aW9uIiwiYnVpbGQiLCJmbiIsIm1zZyIsImJ1aWxkRXJyb3JIYW5kbGVyIiwibmJzcCIsInhtbCIsInN0YXJ0RG9jdW1lbnQiLCJkb2N1bWVudFVSSSIsInN0YXJ0RWxlbWVudCIsInFOYW1lIiwiZ2V0VVJJIiwiZ2V0VmFsdWUiLCJnZXRRTmFtZSIsImdldExvY2F0b3IiLCJlbmRFbGVtZW50IiwiY3VycmVudCIsInN0YXJ0UHJlZml4TWFwcGluZyIsImVuZFByZWZpeE1hcHBpbmciLCJwcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJpbnMiLCJpZ25vcmFibGVXaGl0ZXNwYWNlIiwiY2giLCJjaGFyYWN0ZXJzIiwiYXJndW1lbnRzIiwiY2hhck5vZGUiLCJza2lwcGVkRW50aXR5IiwiZW5kRG9jdW1lbnQiLCJjb21tZW50IiwiY29tbSIsInN0YXJ0Q0RBVEEiLCJlbmRDREFUQSIsInN0YXJ0RFREIiwiaW1wbCIsImR0Iiwid2FybmluZyIsIndhcm4iLCJmYXRhbEVycm9yIiwiZW5kIiwic3VicmVzdWx0cyIsInJlc3VsdHMiLCJfb2JqQ3JlYXRlIiwiRiIsIlBhcnNpbmdFcnJvciIsImVycm9yRGF0YSIsInBhcnNlVGltZVN0YW1wIiwiaW5wdXQiLCJjb21wdXRlU2Vjb25kcyIsImgiLCJtIiwiZiIsIlNldHRpbmdzIiwidmFsdWVzIiwicGFyc2VPcHRpb25zIiwia2V5VmFsdWVEZWxpbSIsImdyb3VwRGVsaW0iLCJncm91cHMiLCJrdiIsInBhcnNlQ3VlIiwiY3VlIiwicmVnaW9uTGlzdCIsIm9JbnB1dCIsImNvbnN1bWVUaW1lU3RhbXAiLCJ0cyIsIkVycm9ycyIsIkJhZFRpbWVTdGFtcCIsInNraXBXaGl0ZXNwYWNlIiwiZW5kVGltZSIsInNldHRpbmdzIiwiayIsInJlZ2lvbiIsImFsdCIsInZhbHMiLCJ2YWxzMCIsImludGVnZXIiLCJwZXJjZW50IiwidmVydGljYWwiLCJsaW5lIiwibGluZUFsaWduIiwic25hcFRvTGluZXMiLCJhbGlnbiIsImxlZnQiLCJjZW50ZXIiLCJtaWRkbGUiLCJyaWdodCIsInBvc2l0aW9uQWxpZ24iLCJjb25zdW1lQ3VlU2V0dGluZ3MiLCJCYWRTaWduYXR1cmUiLCJkZmx0IiwiZGVmYXVsdEtleSIsImhhcyIsImEiLCJwYXJzZUludCIsInBhcnNlRmxvYXQiLCJURVhUQVJFQV9FTEVNRU5UIiwiVEFHX05BTUUiLCJiIiwidSIsInJ1YnkiLCJydCIsIkRFRkFVTFRfQ09MT1JfQ0xBU1MiLCJ3aGl0ZSIsImxpbWUiLCJjeWFuIiwicmVkIiwieWVsbG93IiwibWFnZW50YSIsImJsdWUiLCJibGFjayIsIlRBR19BTk5PVEFUSU9OIiwiTkVFRFNfUEFSRU5UIiwicGFyc2VDb250ZW50IiwibmV4dFRva2VuIiwic2hvdWxkQWRkIiwiZWxlbWVudCIsImFubm90YXRpb24iLCJyb290RGl2IiwidGFnU3RhY2siLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsInBvcCIsImNsYXNzZXMiLCJjbCIsImJnQ29sb3IiLCJjb2xvck5hbWUiLCJwcm9wTmFtZSIsInByb3BWYWx1ZSIsInN0eWxlIiwiY2xhc3NOYW1lIiwic3Ryb25nUlRMUmFuZ2VzIiwiaXNTdHJvbmdSVExDaGFyIiwiY3VycmVudFJhbmdlIiwiZGV0ZXJtaW5lQmlkaSIsImN1ZURpdiIsIm5vZGVTdGFjayIsInB1c2hOb2RlcyIsIm5leHRUZXh0Tm9kZSIsImlubmVyVGV4dCIsIlN0eWxlQm94IiwiQ3VlU3R5bGVCb3giLCJzdHlsZU9wdGlvbnMiLCJzdHlsZXMiLCJjb2xvciIsImJhY2tncm91bmRDb2xvciIsInRvcCIsImJvdHRvbSIsImRpc3BsYXkiLCJ3cml0aW5nTW9kZSIsInVuaWNvZGVCaWRpIiwiYXBwbHlTdHlsZXMiLCJkaXYiLCJkaXJlY3Rpb24iLCJ0ZXh0QWxpZ24iLCJmb250Iiwid2hpdGVTcGFjZSIsInRleHRQb3MiLCJmb3JtYXRTdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwibW92ZSIsImJveCIsIkJveFBvc2l0aW9uIiwibGgiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRXaWR0aCIsIm9mZnNldFRvcCIsInJlY3RzIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtYXgiLCJsaW5lSGVpZ2h0IiwibW92ZUJveFRvTGluZVBvc2l0aW9uIiwic3R5bGVCb3giLCJjb250YWluZXJCb3giLCJib3hQb3NpdGlvbnMiLCJib3hQb3NpdGlvbiIsImxpbmVQb3MiLCJ0ZXh0VHJhY2tMaXN0IiwibWVkaWFFbGVtZW50IiwidHJhY2tMaXN0IiwibW9kZSIsImNvbXB1dGVMaW5lUG9zIiwiYXhpcyIsInN0ZXAiLCJyb3VuZCIsIm1heFBvc2l0aW9uIiwiaW5pdGlhbEF4aXMiLCJhYnMiLCJjZWlsIiwiY2FsY3VsYXRlZFBlcmNlbnRhZ2UiLCJiZXN0UG9zaXRpb24iLCJzcGVjaWZpZWRQb3NpdGlvbiIsInBlcmNlbnRhZ2UiLCJvdmVybGFwc09wcG9zaXRlQXhpcyIsIndpdGhpbiIsIm92ZXJsYXBzQW55IiwiaW50ZXJzZWN0UGVyY2VudGFnZSIsImZpbmRCZXN0UG9zaXRpb24iLCJ0b0NTU0NvbXBhdFZhbHVlcyIsInByb3AiLCJ2YWwiLCJ1bml0IiwidG9Nb3ZlIiwib3ZlcmxhcHMiLCJiMiIsImJveGVzIiwicmVmZXJlbmNlIiwiZ2V0U2ltcGxlQm94UG9zaXRpb24iLCJTdHJpbmdEZWNvZGVyIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY29udmVydEN1ZVRvRE9NVHJlZSIsImN1ZXRleHQiLCJwcm9jZXNzQ3VlcyIsImN1ZXMiLCJvdmVybGF5IiwicGFkZGVkT3ZlcmxheSIsIm1hcmdpbiIsImhhc0JlZW5SZXNldCIsImRpc3BsYXlTdGF0ZSIsInNob3VsZENvbXB1dGUiLCJmb250U2l6ZSIsIlBhcnNlciIsImRlY29kZXIiLCJzdGF0ZSIsIlRleHREZWNvZGVyIiwicmVwb3J0T3JUaHJvd0Vycm9yIiwib25wYXJzaW5nZXJyb3IiLCJjb2xsZWN0TmV4dExpbmUiLCJwb3MiLCJwYXJzZUhlYWRlciIsIm9udGltZXN0YW1wbWFwIiwicGFyc2VUaW1lc3RhbXBNYXAiLCJ4eSIsImFuY2hvciIsImxpbmVzIiwicmVnaW9uQW5jaG9yWCIsInJlZ2lvbkFuY2hvclkiLCJ2aWV3cG9ydEFuY2hvclgiLCJ2aWV3cG9ydEFuY2hvclkiLCJzY3JvbGwiLCJvbnJlZ2lvbiIsInBhcnNlUmVnaW9uIiwic3RyZWFtIiwiYWxyZWFkeUNvbGxlY3RlZExpbmUiLCJoYXNTdWJzdHJpbmciLCJvbmN1ZSIsImZsdXNoIiwib25mbHVzaCIsIk1QRUdVUkxfUkVHRVgiLCJEQVNIX1JFR0VYIiwic2ltcGxlVHlwZUZyb21Tb3VyY2VUeXBlIiwic2Nyb2xsU2V0dGluZyIsImlzVmFsaWRQZXJjZW50VmFsdWUiLCJfd2lkdGgiLCJfbGluZXMiLCJfcmVnaW9uQW5jaG9yWCIsIl9yZWdpb25BbmNob3JZIiwiX3ZpZXdwb3J0QW5jaG9yWCIsIl92aWV3cG9ydEFuY2hvclkiLCJfc2Nyb2xsIiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1lcmFibGUiLCJUeXBlRXJyb3IiLCJzZXR0aW5nIiwiZmluZFNjcm9sbFNldHRpbmciLCJ0b1VpbnQ4IiwiYnl0ZXMiLCJieXRlc1RvU3RyaW5nIiwic3RyaW5nIiwiZXNjYXBlIiwiaWQzU2l6ZSIsInJldHVyblNpemUiLCJnZXRJZDNPZmZzZXQiLCJpc0xpa2VseSIsImFhYyIsIm1wMyIsImZsYWMiLCJpc0xpa2VseVR5cGVzIiwia2V5cyIsImZpbHRlciIsImlzTGlrZWx5Rm4iLCJkZXRlY3RDb250YWluZXJGb3JCeXRlcyIsImlzTGlrZWx5Rm1wNE1lZGlhU2VnbWVudCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiQURUU19TQU1QTElOR19GUkVRVUVOQ0lFUyIsInBhcnNlSWQzVGFnU2l6ZSIsImhlYWRlciIsImJ5dGVJbmRleCIsInBhcnNlU3luY1NhZmVJbnRlZ2VyIiwiaXNMaWtlbHlBYWNEYXRhIiwicGFyc2VBZHRzU2l6ZSIsImxvd1RocmVlIiwicGFyc2VTYW1wbGVSYXRlIiwicGFyc2VBYWNUaW1lc3RhbXAiLCJmcmFtZVN0YXJ0IiwiZnJhbWVTaXplIiwiZnJhbWUiLCJ1bmVzY2FwZSIsInBlcmNlbnRFbmNvZGUiLCJkIiwiU3ltYm9sIiwibmFtZVN0YXJ0Q2hhciIsIm5hbWVDaGFyIiwiUmVnRXhwIiwidGFnTmFtZVBhdHRlcm4iLCJjb3B5TG9jYXRvciIsInBhcnNlRWxlbWVudFN0YXJ0UGFydCIsImN1cnJlbnROU01hcCIsImVudGl0eVJlcGxhY2VyIiwiYXR0ck5hbWUiLCJjaGFyQXQiLCJzZXRUYWdOYW1lIiwiY2xvc2VkIiwibG9jYWxOU01hcCIsIm5zcCIsIm5zUHJlZml4IiwiX2NvcHkiLCJwYXJzZUh0bWxTcGVjaWFsQ29udGVudCIsImVsU3RhcnRFbmQiLCJlbEVuZFN0YXJ0IiwiZml4U2VsZkNsb3NlZCIsImNsb3NlTWFwIiwicGFyc2VEQ0MiLCJtYXRjaHMiLCJyZWciLCJsYXN0TWF0Y2giLCJlbmREVEQiLCJwYXJzZUluc3RydWN0aW9uIiwiRWxlbWVudEF0dHJpYnV0ZXMiLCJfc2V0X3Byb3RvXyIsInRoaXoiLCJwYXJlbnQiLCJkZWZhdWx0TlNNYXBDb3B5Iiwic3Vycm9nYXRlMSIsInN1cnJvZ2F0ZTIiLCJmaXhlZEZyb21DaGFyQ29kZSIsImFwcGVuZFRleHQiLCJ4dCIsImxpbmVFbmQiLCJsaW5lUGF0dGVybiIsImxpbmVTdGFydCIsInBhcnNlU3RhY2siLCJ0YWdTdGFydCIsImNvbmZpZyIsImVuZE1hdGNoIiwibG9jYXRvcjIiLCJnZXRMb2NhbE5hbWUiLCJpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY29uc3RydWN0IiwiUGFyZW50IiwiYXJncyIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJpbnN0YW5jZSIsImJpbmQiLCJkaXJlY3Rpb25TZXR0aW5nIiwiYWxpZ25TZXR0aW5nIiwiZmluZEFsaWduU2V0dGluZyIsIl9pZCIsIl9wYXVzZU9uRXhpdCIsIl9zdGFydFRpbWUiLCJfZW5kVGltZSIsIl90ZXh0IiwiX3JlZ2lvbiIsIl92ZXJ0aWNhbCIsIl9zbmFwVG9MaW5lcyIsIl9saW5lIiwiX2xpbmVBbGlnbiIsIl9wb3NpdGlvbiIsIl9wb3NpdGlvbkFsaWduIiwiX3NpemUiLCJfYWxpZ24iLCJmaW5kRGlyZWN0aW9uU2V0dGluZyIsIlN5bnRheEVycm9yIiwiZ2V0Q3VlQXNIVE1MIiwiYWxlcnQiLCJjb25maXJtIiwicHJvbXB0IiwiX1N0cmVhbSIsIkxpbmVTdHJlYW0iLCJfdGhpcyIsIm5leHROZXdsaW5lIiwidHJpZ2dlciIsInBhcnNlQXR0cmlidXRlcyIsIlBhcnNlU3RyZWFtIiwiY3VzdG9tUGFyc2VycyIsInRhZ01hcHBlcnMiLCJfcHJvdG8iLCJfdGhpczIiLCJhY2MiLCJtYXBwZXIiLCJtYXBwZWRMaW5lIiwibmV3TGluZSIsInRhZ1R5cGUiLCJudW1iZXIiLCJwbGF5bGlzdFR5cGUiLCJhbGxvd2VkIiwiVVJJIiwiQllURVJBTkdFIiwiX2F0dHJpYnV0ZXMkQllURVJBTkdFIiwiYnl0ZXJhbmdlIiwiUkVTT0xVVElPTiIsInJlc29sdXRpb24iLCJCQU5EV0lEVEgiLCJkYXRlVGltZVN0cmluZyIsImRhdGVUaW1lT2JqZWN0IiwiRGF0ZSIsIklWIiwiVWludDMyQXJyYXkiLCJQUkVDSVNFIiwiYWRkUGFyc2VyIiwiX3JlZiIsIl90aGlzMyIsImV4cHJlc3Npb24iLCJjdXN0b21UeXBlIiwiZGF0YVBhcnNlciIsInNlZ21lbnQiLCJhZGRUYWdNYXBwZXIiLCJfcmVmMiIsImxpbmVTdHJlYW0iLCJwYXJzZVN0cmVhbSIsInBpcGUiLCJjdXJyZW50TWFwIiwiX2tleSIsInVyaXMiLCJjdXJyZW50VXJpIiwibm9vcCIsImRlZmF1bHRNZWRpYUdyb3VwcyIsImN1cnJlbnRUaW1lbGluZSIsIm1hbmlmZXN0IiwiYWxsb3dDYWNoZSIsImRpc2NvbnRpbnVpdHlTdGFydHMiLCJzZWdtZW50cyIsImxhc3RCeXRlcmFuZ2VFbmQiLCJvbiIsImVudHJ5IiwibWVkaWFHcm91cCIsInJlbmRpdGlvbiIsInRhZyIsImVuZGxpc3QiLCJlbmRMaXN0IiwiaW5mIiwibWVkaWFTZXF1ZW5jZSIsImRpc2NvbnRpbnVpdHlTZXF1ZW5jZSIsIk1FVEhPRCIsIktFWUZPUk1BVCIsIktFWUlEIiwiY29udGVudFByb3RlY3Rpb24iLCJzY2hlbWVJZFVyaSIsImtleUlkIiwicHNzaCIsIml2IiwicGxheWxpc3QiLCJtZWRpYSIsIlRZUEUiLCJOQU1FIiwibWVkaWFHcm91cFR5cGUiLCJERUZBVUxUIiwiYXV0b3NlbGVjdCIsIkFVVE9TRUxFQ1QiLCJMQU5HVUFHRSIsImxhbmd1YWdlIiwiaW5zdHJlYW1JZCIsIkNIQVJBQ1RFUklTVElDUyIsImNoYXJhY3RlcmlzdGljcyIsIkZPUkNFRCIsImZvcmNlZCIsImRpc2NvbnRpbnVpdHkiLCJ0YXJnZXRkdXJhdGlvbiIsInRhcmdldER1cmF0aW9uIiwidG90YWxkdXJhdGlvbiIsInRvdGFsRHVyYXRpb24iLCJpc05hTiIsInRpbWVPZmZzZXQiLCJwcmVjaXNlIiwiY3VlT3V0IiwiY3VlT3V0Q29udCIsImN1ZUluIiwidGltZWxpbmUiLCJjdXN0b20iLCJjaHVuayIsImlzT2JqZWN0IiwibWVyZ2UiLCJfbGVuIiwib2JqZWN0cyIsImZsYXR0ZW4iLCJsaXN0cyIsIngiLCJ5IiwiX3JlZiRiYXNlVXJsIiwiX3JlZiRzb3VyY2UiLCJfcmVmJHJhbmdlIiwicmFuZ2UiLCJfcmVmJGluZGV4UmFuZ2UiLCJpbmRleFJhbmdlIiwicmVzb2x2ZWRVcmkiLCJyYW5nZXMiLCJzdGFydFJhbmdlIiwiZW5kUmFuZ2UiLCJzZWdtZW50UmFuZ2UiLCJzdGF0aWMiLCJfYXR0cmlidXRlcyR0aW1lc2NhbGUiLCJzb3VyY2VEdXJhdGlvbiIsImR5bmFtaWMiLCJOT1ciLCJjbGllbnRPZmZzZXQiLCJhdmFpbGFiaWxpdHlTdGFydFRpbWUiLCJfYXR0cmlidXRlcyR0aW1lc2NhbGUyIiwiX2F0dHJpYnV0ZXMkc3RhcnQiLCJfYXR0cmlidXRlcyRtaW5pbXVtVXAiLCJtaW5pbXVtVXBkYXRlUGVyaW9kIiwiX2F0dHJpYnV0ZXMkdGltZVNoaWZ0IiwidGltZVNoaWZ0QnVmZmVyRGVwdGgiLCJub3ciLCJwZXJpb2RTdGFydFdDIiwicGVyaW9kRHVyYXRpb24iLCJzZWdtZW50Q291bnQiLCJhdmFpbGFibGVTdGFydCIsImZsb29yIiwiYXZhaWxhYmxlRW5kIiwicGFyc2VCeUR1cmF0aW9uIiwiX2F0dHJpYnV0ZXMkdHlwZSIsIl9hdHRyaWJ1dGVzJHRpbWVzY2FsZTQiLCJfc2VnbWVudFJhbmdlJHR5cGUiLCJfYXR0cmlidXRlcyR0aW1lc2NhbGUzIiwicGVyaW9kSW5kZXgiLCJfYXR0cmlidXRlcyRzdGFydE51bWIiLCJzdGFydE51bWJlciIsInRpbWUiLCJ0b1NlZ21lbnRzIiwic2VnbWVudHNGcm9tQmFzZSIsIl9hdHRyaWJ1dGVzJGluaXRpYWxpeiIsImluaXRpYWxpemF0aW9uIiwiX2F0dHJpYnV0ZXMkaW5kZXhSYW5nIiwiaW5pdFNlZ21lbnQiLCJzb3VyY2VVUkwiLCJzZWdtZW50VGltZUluZm8iLCJhZGRTZWdtZW50c1RvUGxheWxpc3QiLCJzaWR4Iiwic2lkeEJ5dGVSYW5nZSIsInNpZHhFbmQiLCJtZWRpYVJlZmVyZW5jZXMiLCJyIiwic3RhcnRJbmRleCIsIm1lcmdlRGlzY29udGlndW91c1BsYXlsaXN0cyIsIl9hY2MkbmFtZSRzZWdtZW50cyIsImFkZFNlZ21lbnRJbmZvRnJvbVNpZHgiLCJzaWR4TWFwcGluZyIsInNpZHhLZXkiLCJzaWR4TWF0Y2giLCJmb3JtYXRBdWRpb1BsYXlsaXN0IiwiX2F0dHJpYnV0ZXMiLCJiYW5kd2lkdGgiLCJmb3JtYXRWdHRQbGF5bGlzdCIsIl9tM3U4QXR0cmlidXRlcyIsIm0zdThBdHRyaWJ1dGVzIiwiZm9ybWF0VmlkZW9QbGF5bGlzdCIsIl9yZWYzIiwiX2F0dHJpYnV0ZXMyIiwiU1VCVElUTEVTIiwidG9NM3U4IiwiZGFzaFBsYXlsaXN0cyIsImxvY2F0aW9ucyIsIl9tZWRpYUdyb3VwcyIsIl9kYXNoUGxheWxpc3RzJDAkYXR0ciIsIl9kYXNoUGxheWxpc3RzJDAkYXR0cjIiLCJzdWdnZXN0ZWRQcmVzZW50YXRpb25EZWxheSIsInZpZGVvUGxheWxpc3RzIiwiX3JlZjQiLCJjb250ZW50VHlwZSIsImF1ZGlvUGxheWxpc3RzIiwiX3JlZjUiLCJ2dHRQbGF5bGlzdHMiLCJfcmVmNiIsIlZJREVPIiwibWFpblBsYXlsaXN0IiwiZm9ybWF0dGVkUGxheWxpc3RzIiwicm9sZSIsImxhYmVsIiwicm9sZUxhYmVsIiwib3JnYW5pemVBdWRpb1BsYXlsaXN0cyIsInN1YnMiLCJvcmdhbml6ZVZ0dFBsYXlsaXN0cyIsImdldExpdmVSVmFsdWUiLCJwYXJzZUJ5VGltZWxpbmUiLCJzZWdtZW50VGltZWxpbmUiLCJfYXR0cmlidXRlcyRtaW5pbXVtVXAyIiwiX2F0dHJpYnV0ZXMkbWVkaWEiLCJzSW5kZXgiLCJTIiwicmVwZWF0Iiwic2VnbWVudFRpbWUiLCJuZXh0UyIsImlkZW50aWZpZXJQYXR0ZXJuIiwiY29uc3RydWN0VGVtcGxhdGVVcmwiLCJpZGVudGlmaWVyIiwiZm9ybWF0IiwiaWRlbnRpZmllclJlcGxhY2VtZW50IiwidGVtcGxhdGVWYWx1ZXMiLCJSZXByZXNlbnRhdGlvbklEIiwiQmFuZHdpZHRoIiwibWFwU2VnbWVudCIsInBhcnNlVGVtcGxhdGVJbmZvIiwiVGltZSIsInNlZ21lbnRzRnJvbUxpc3QiLCJfYXR0cmlidXRlcyRzZWdtZW50VXIiLCJzZWdtZW50VXJscyIsInNlZ21lbnRVcmxNYXAiLCJzZWdtZW50VXJsT2JqZWN0Iiwic2VnbWVudFVybCIsIm1lZGlhUmFuZ2UiLCJTZWdtZW50VVJMVG9TZWdtZW50T2JqZWN0IiwiZ2VuZXJhdGVTZWdtZW50cyIsInNlZ21lbnRBdHRyaWJ1dGVzIiwic2VnbWVudHNGbiIsInNlZ21lbnRJbmZvIiwidGVtcGxhdGUiLCJzZWdtZW50c0luZm8iLCJfc2VnbWVudEF0dHJpYnV0ZXMiLCJfc2VnbWVudEF0dHJpYnV0ZXMkdGkiLCJmaW5kQ2hpbGRyZW4iLCJnZXRDb250ZW50IiwicGFyc2VEdXJhdGlvbiIsInN0ciIsIl9tYXRjaCRzbGljZSIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJwYXJzZXJzIiwibWVkaWFQcmVzZW50YXRpb25EdXJhdGlvbiIsInBhcnNlZFZhbHVlIiwicGFyc2VGbiIsImtleVN5c3RlbXNNYXAiLCJyZWZlcmVuY2VVcmxzIiwiYmFzZVVybEVsZW1lbnRzIiwiYmFzZVVybEVsZW1lbnQiLCJnZXRTZWdtZW50SW5mb3JtYXRpb24iLCJhZGFwdGF0aW9uU2V0Iiwic2VnbWVudFRlbXBsYXRlIiwic2VnbWVudExpc3QiLCJzZWdtZW50QmFzZSIsInNlZ21lbnRUaW1lbGluZVBhcmVudE5vZGUiLCJzZWdtZW50SW5pdGlhbGl6YXRpb25QYXJlbnROb2RlIiwic2VnbWVudEluaXRpYWxpemF0aW9uIiwidG9SZXByZXNlbnRhdGlvbnMiLCJwZXJpb2RBdHRyaWJ1dGVzIiwicGVyaW9kQmFzZVVybHMiLCJwZXJpb2RTZWdtZW50SW5mbyIsImFkYXB0YXRpb25TZXRBdHRyaWJ1dGVzIiwiYWRhcHRhdGlvblNldEJhc2VVcmxzIiwicm9sZUF0dHJpYnV0ZXMiLCJrZXlTeXN0ZW0iLCJwc3NoTm9kZSIsInBzc2hCdWZmZXIiLCJyZXByZXNlbnRhdGlvbnMiLCJhZGFwdGF0aW9uU2V0U2VnbWVudEluZm8iLCJyZXByZXNlbnRhdGlvbiIsInJlcEJhc2VVcmxFbGVtZW50cyIsInJlcEJhc2VVcmxzIiwicmVwcmVzZW50YXRpb25TZWdtZW50SW5mbyIsImluaGVyaXRCYXNlVXJscyIsIm1wZEF0dHJpYnV0ZXMiLCJtcGRCYXNlVXJscyIsInBlcmlvZCIsInBlcmlvZEF0dCIsInBhcnNlZFBlcmlvZElkIiwiYWRhcHRhdGlvblNldHMiLCJtYW5pZmVzdFN0cmluZyIsIm1wZCIsInBhcnNlZE1hbmlmZXN0SW5mbyIsIl9vcHRpb25zIiwiX29wdGlvbnMkbWFuaWZlc3RVcmkiLCJtYW5pZmVzdFVyaSIsIl9vcHRpb25zJE5PVyIsIl9vcHRpb25zJGNsaWVudE9mZnNldCIsInBlcmlvZHMiLCJyZXByZXNlbnRhdGlvbkluZm8iLCJpbmhlcml0QXR0cmlidXRlcyIsInBhcnNlVVRDVGltaW5nIiwiVVRDVGltaW5nTm9kZSIsInBhcnNlVVRDVGltaW5nU2NoZW1lIiwiY3JlYXRlTG9nZ2VyIiwibG9nQnlUeXBlIiwibGV2ZWwiLCJsb2ciLCJsdmwiLCJsZXZlbHMiLCJsdmxSZWdFeHAiLCJ1bnNoaWZ0Iiwic3BsaWNlIiwiaW5mbyIsInN1Ym5hbWUiLCJhbGwiLCJvZmYiLCJkZWJ1ZyIsImhpc3RvcnkiLCJmbmFtZSIsImhpc3RvcnlJdGVtIiwiY2xlYXIiLCJkaXNhYmxlIiwiZW5hYmxlIiwiX2xlbjIiLCJfa2V5MiIsIl9sZW4zIiwiX2tleTMiLCJfbGVuNCIsIl9rZXk0IiwiY3JlYXRlTG9nZ2VyJDEiLCJlYWNoIiwic291cmNlcyIsImFzc2lnbiIsImlzUGxhaW4iLCJjb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNvbXB1dGVkU3R5bGVWYWx1ZSIsImdldFByb3BlcnR5VmFsdWUiLCJpc05vbkJsYW5rU3RyaW5nIiwiQm9vbGVhbiIsInRocm93SWZXaGl0ZXNwYWNlIiwiaXNSZWFsIiwiaXNFbCIsImlzSW5GcmFtZSIsImNyZWF0ZVF1ZXJpZXIiLCJzZWxlY3RvciIsImNvbnRleHQiLCJxdWVyeVNlbGVjdG9yIiwiY3R4IiwicHJvcGVydGllcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJhcHBlbmRDb250ZW50IiwicHJlcGVuZFRvIiwiaGFzQ2xhc3MiLCJjbGFzc1RvQ2hlY2siLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImFkZENsYXNzIiwiY2xhc3NUb0FkZCIsInJlbW92ZUNsYXNzIiwiY2xhc3NUb1JlbW92ZSIsInRvZ2dsZUNsYXNzIiwiY2xhc3NUb1RvZ2dsZSIsInByZWRpY2F0ZSIsInNldEF0dHJpYnV0ZXMiLCJhdHRyVmFsdWUiLCJnZXRBdHRyaWJ1dGVzIiwia25vd25Cb29sZWFucyIsImF0dHJWYWwiLCJhdHRyaWJ1dGUiLCJibG9ja1RleHRTZWxlY3Rpb24iLCJmb2N1cyIsIm9uc2VsZWN0c3RhcnQiLCJ1bmJsb2NrVGV4dFNlbGVjdGlvbiIsInJlY3QiLCJmaW5kUG9zaXRpb24iLCJvZmZzZXRQYXJlbnQiLCJvZmZzZXRMZWZ0IiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwiYm94VGFyZ2V0IiwiYm94VyIsImJveEgiLCJvZmZzZXRZIiwib2Zmc2V0WCIsImNoYW5nZWRUb3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsImlzVGV4dE5vZGUiLCJlbXB0eUVsIiwibm9ybWFsaXplQ29udGVudCIsImluc2VydENvbnRlbnQiLCJpc1NpbmdsZUxlZnRDbGljayIsImJ1dHRvbiIsImJ1dHRvbnMiLCJ2aWRlb2pzIiwiJCIsIiQkIiwiRG9tIiwiZnJlZXplIiwiY3JlYXRlRWwiLCJfd2luZG93TG9hZGVkIiwiYXV0b1NldHVwIiwidmlkcyIsImF1ZGlvcyIsImRpdnMiLCJtZWRpYUVscyIsIm1lZGlhRWwiLCJhdXRvU2V0dXBUaW1lb3V0IiwicGxheWVyIiwid2FpdCIsInZqcyIsInNldFdpbmRvd0xvYWRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwic2V0VGV4dENvbnRlbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsIl9ndWlkIiwibmV3R1VJRCIsIldlYWtNYXAiLCJGYWtlV2Vha01hcCIsInZkYXRhIiwicGVyZm9ybWFuY2UiLCJhY2Nlc3MiLCJfc3VwcG9ydHNQYXNzaXZlIiwiRG9tRGF0YSIsIl9jbGVhblVwRXZlbnRzIiwiZWxlbSIsImhhbmRsZXJzIiwiZGlzcGF0Y2hlciIsImRldGFjaEV2ZW50IiwiZGlzYWJsZWQiLCJfaGFuZGxlTXVsdGlwbGVFdmVudHMiLCJ0eXBlcyIsImZpeEV2ZW50IiwiZml4ZWRfIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsInNyY0VsZW1lbnQiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJyZXR1cm5WYWx1ZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImNsaWVudFgiLCJzY3JvbGxMZWZ0IiwiY2xpZW50TGVmdCIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJwYXNzaXZlRXZlbnRzIiwiZ3VpZCIsImhhc2giLCJoYW5kbGVyc0NvcHkiLCJwYXNzaXZlIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVUeXBlIiwiZWxlbURhdGEiLCJidWJibGVzIiwidGFyZ2V0RGF0YSIsIm9uZSIsImZ1bmMiLCJhbnkiLCJFVkVOVF9NQVAiLCJFdmVudHMiLCJ1aWQiLCJib3VuZCIsImxhc3QiLCJFdmVudFRhcmdldCIsImFsbG93ZWRFdmVudHNfIiwiYWVsIiwiZGlzcGF0Y2hFdmVudCIsInF1ZXVlVHJpZ2dlciIsIk1hcCIsIm9sZFRpbWVvdXQiLCJpc0V2ZW50ZWQiLCJldmVudEJ1c0VsXyIsImlzVmFsaWRFdmVudFR5cGUiLCJ2YWxpZGF0ZVRhcmdldCIsInZhbGlkYXRlRXZlbnRUeXBlIiwidmFsaWRhdGVMaXN0ZW5lciIsImxpc3RlbmVyIiwibm9ybWFsaXplTGlzdGVuQXJncyIsImlzVGFyZ2V0aW5nU2VsZiIsInNoaWZ0IiwibGlzdGVuIiwiRXZlbnRlZE1peGluIiwiX25vcm1hbGl6ZUxpc3RlbkFyZ3MiLCJyZW1vdmVMaXN0ZW5lck9uRGlzcG9zZSIsInJlbW92ZVJlbW92ZXJPblRhcmdldERpc3Bvc2UiLCJfbm9ybWFsaXplTGlzdGVuQXJnczIiLCJ3cmFwcGVyIiwibGFyZ3MiLCJfbm9ybWFsaXplTGlzdGVuQXJnczMiLCJfbGVuNSIsIl9rZXk1IiwidGFyZ2V0T3JUeXBlIiwidHlwZU9yTGlzdGVuZXIiLCJldmVudGVkIiwiZXZlbnRCdXNLZXkiLCJldmVudGVkQ2FsbGJhY2tzIiwiU3RhdGVmdWxNaXhpbiIsInNldFN0YXRlIiwic3RhdGVVcGRhdGVzIiwiY2hhbmdlcyIsInRvIiwic3RhdGVmdWwiLCJkZWZhdWx0U3RhdGUiLCJoYW5kbGVTdGF0ZUNoYW5nZWQiLCJ3IiwidG9UaXRsZUNhc2UiLCJtZXJnZU9wdGlvbnMiLCJNYXBTaGFtIiwibWFwXyIsInNldF8iLCJ0aGlzQXJnIiwiTWFwJDEiLCJTZXRTaGFtIiwiU2V0IiwiQ29tcG9uZW50IiwicmVhZHkiLCJwbGF5IiwicGxheWVyXyIsImlzRGlzcG9zZWRfIiwicGFyZW50Q29tcG9uZW50XyIsIm9wdGlvbnNfIiwiaWRfIiwibmFtZV8iLCJlbF8iLCJjaGlsZHJlbl8iLCJjaGlsZEluZGV4XyIsImNoaWxkTmFtZUluZGV4XyIsInNldFRpbWVvdXRJZHNfIiwic2V0SW50ZXJ2YWxJZHNfIiwicmFmSWRzXyIsIm5hbWVkUmFmc18iLCJjbGVhcmluZ1RpbWVyc09uRGlzcG9zZV8iLCJpbml0Q2hpbGRyZW4iLCJyZXBvcnRUb3VjaEFjdGl2aXR5IiwiZW5hYmxlVG91Y2hBY3Rpdml0eSIsImRpc3Bvc2UiLCJpc0Rpc3Bvc2VkIiwibG9jYWxpemUiLCJ0b2tlbnMiLCJkZWZhdWx0VmFsdWUiLCJsYW5ndWFnZXMiLCJwcmltYXJ5Q29kZSIsInByaW1hcnlMYW5nIiwibG9jYWxpemVkU3RyaW5nIiwicmV0IiwiY29udGVudEVsIiwiY29udGVudEVsXyIsImNoaWxkcmVuIiwiZ2V0Q2hpbGRCeUlkIiwiZ2V0Q2hpbGQiLCJnZXREZXNjZW5kYW50IiwiY3VycmVudENoaWxkIiwiYWRkQ2hpbGQiLCJjb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwiY29tcG9uZW50Q2xhc3NOYW1lIiwiY29tcG9uZW50Q2xhc3MiLCJDb21wb25lbnRDbGFzcyIsImdldENvbXBvbmVudCIsImNoaWxkRm91bmQiLCJjb21wRWwiLCJ3b3JraW5nQ2hpbGRyZW4iLCJwYXJlbnRPcHRpb25zIiwiVGVjaCIsInNvbWUiLCJ3Y2hpbGQiLCJpc1RlY2giLCJwbGF5ZXJPcHRpb25zIiwiYnVpbGRDU1NDbGFzcyIsImlzUmVhZHlfIiwicmVhZHlRdWV1ZV8iLCJ0cmlnZ2VyUmVhZHkiLCJyZWFkeVF1ZXVlIiwic2hvdyIsImhpZGUiLCJsb2NrU2hvd2luZyIsInVubG9ja1Nob3dpbmciLCJudW0iLCJza2lwTGlzdGVuZXJzIiwiZGltZW5zaW9uIiwiZGltZW5zaW9ucyIsIndpZHRoT3JIZWlnaHQiLCJweEluZGV4IiwiY3VycmVudERpbWVuc2lvbiIsImNvbXB1dGVkV2lkdGhPckhlaWdodCIsInJ1bGUiLCJjdXJyZW50RGltZW5zaW9ucyIsImN1cnJlbnRXaWR0aCIsImN1cnJlbnRIZWlnaHQiLCJibHVyIiwiaGFuZGxlS2V5RG93biIsImhhbmRsZUtleVByZXNzIiwiZW1pdFRhcEV2ZW50cyIsImNvdWxkQmVUYXAiLCJ0b3VjaFN0YXJ0IiwiZmlyc3RUb3VjaCIsInRvdWNoZXMiLCJ4ZGlmZiIsInlkaWZmIiwic3FydCIsIm5vVGFwIiwicmVwb3J0VXNlckFjdGl2aXR5IiwidG91Y2hIb2xkaW5nIiwicmVwb3J0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwidG91Y2hFbmQiLCJ0aW1lb3V0SWQiLCJjbGVhclRpbWVyc09uRGlzcG9zZV8iLCJpbnRlcnZhbCIsImludGVydmFsSWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdXBwb3J0c1JhZl8iLCJyZXF1ZXN0TmFtZWRBbmltYXRpb25GcmFtZSIsIl90aGlzNCIsImNhbmNlbE5hbWVkQW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIl90aGlzNSIsImlkTmFtZSIsImNhbmNlbE5hbWUiLCJyZWdpc3RlckNvbXBvbmVudCIsIkNvbXBvbmVudFRvUmVnaXN0ZXIiLCJyZWFzb24iLCJpc0NvbXAiLCJpc1Byb3RvdHlwZU9mIiwiY29tcG9uZW50c18iLCJQbGF5ZXIiLCJwbGF5ZXJzIiwicGxheWVyTmFtZXMiLCJwbmFtZSIsIlVTRVJfQUdFTlQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ3ZWJraXRWZXJzaW9uTWFwIiwiYXBwbGVXZWJraXRWZXJzaW9uIiwiSVNfSVBPRCIsIklPU19WRVJTSU9OIiwiSVNfQU5EUk9JRCIsIkFORFJPSURfVkVSU0lPTiIsIm1ham9yIiwibWlub3IiLCJJU19OQVRJVkVfQU5EUk9JRCIsIklTX0ZJUkVGT1giLCJJU19FREdFIiwiSVNfQ0hST01FIiwiQ0hST01FX1ZFUlNJT04iLCJJRV9WRVJTSU9OIiwiSVNfU0FGQVJJIiwiSVNfV0lORE9XUyIsIlRPVUNIX0VOQUJMRUQiLCJtYXhUb3VjaFBvaW50cyIsIkRvY3VtZW50VG91Y2giLCJJU19JUEFEIiwiSVNfSVBIT05FIiwiSVNfSU9TIiwiSVNfQU5ZX1NBRkFSSSIsImJyb3dzZXIiLCJnZXRSYW5nZSIsImZuTmFtZSIsInZhbHVlSW5kZXgiLCJyYW5nZUluZGV4IiwibWF4SW5kZXgiLCJyYW5nZUNoZWNrIiwiY3JlYXRlVGltZVJhbmdlc09iaiIsImNyZWF0ZVRpbWVSYW5nZXMiLCJidWZmZXJlZFBlcmNlbnQiLCJidWZmZXJlZCIsImJ1ZmZlcmVkRHVyYXRpb24iLCJicm93c2VyQXBpIiwiRnVsbHNjcmVlbkFwaSIsInByZWZpeGVkIiwiYXBpTWFwIiwic3BlY0FwaSIsIl9pIiwiTWVkaWFFcnJvciIsImRlZmF1bHRNZXNzYWdlcyIsImVycm9yVHlwZXMiLCIxIiwiMiIsIjMiLCI0IiwiNSIsImVyck51bSIsImlzUHJvbWlzZSIsInRoZW4iLCJzaWxlbmNlUHJvbWlzZSIsInRyYWNrVG9Kc29uXyIsInRleHRUcmFja0NvbnZlcnRlciIsInRlY2giLCJ0cmFja0VscyIsInRyYWNrT2JqcyIsInRyYWNrRWwiLCJ0ZXh0VHJhY2tzIiwiYWRkZWRUcmFjayIsImFkZFJlbW90ZVRleHRUcmFjayIsImFkZEN1ZSIsIl9Db21wb25lbnQiLCJNb2RhbERpYWxvZyIsIm9wZW5lZF8iLCJoYXNCZWVuT3BlbmVkXyIsImhhc0JlZW5GaWxsZWRfIiwiY2xvc2VhYmxlIiwidW5jbG9zZWFibGUiLCJNT0RBTF9DTEFTU19OQU1FIiwiZGVzY0VsXyIsImRlc2NyaXB0aW9uIiwidGFiSW5kZXgiLCJwcmV2aW91c2x5QWN0aXZlRWxfIiwiZGVzYyIsImZpbGxBbHdheXMiLCJmaWxsIiwid2FzUGxheWluZ18iLCJwYXVzZWQiLCJwYXVzZU9uT3BlbiIsInBhdXNlIiwiaGFkQ29udHJvbHNfIiwiY29udHJvbHMiLCJjb25kaXRpb25hbEZvY3VzXyIsIm9wZW5lZCIsImNsb3NlIiwiY29uZGl0aW9uYWxCbHVyXyIsInRlbXBvcmFyeSIsImNsb3NlYWJsZV8iLCJ0ZW1wIiwiY29udHJvbFRleHQiLCJmaWxsV2l0aCIsInBhcmVudEVsIiwibmV4dFNpYmxpbmdFbCIsImVtcHR5IiwiY2xvc2VCdXR0b24iLCJjb250ZW50XyIsImFjdGl2ZUVsIiwiYWN0aXZlRWxlbWVudCIsInBsYXllckVsIiwiZm9jdXNJbmRleCIsImZvY3VzYWJsZUVscyIsImZvY3VzYWJsZUVsc18iLCJzaGlmdEtleSIsImFsbENoaWxkcmVuIiwicXVlcnlTZWxlY3RvckFsbCIsIkhUTUxBbmNob3JFbGVtZW50IiwiSFRNTEFyZWFFbGVtZW50IiwiSFRNTElucHV0RWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiSFRNTFRleHRBcmVhRWxlbWVudCIsIkhUTUxCdXR0b25FbGVtZW50IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJIVE1MT2JqZWN0RWxlbWVudCIsIkhUTUxFbWJlZEVsZW1lbnQiLCJfRXZlbnRUYXJnZXQiLCJUcmFja0xpc3QiLCJ0cmFja3NfIiwiYWRkVHJhY2siLCJyZW1vdmVUcmFjayIsInJ0cmFjayIsImdldFRyYWNrQnlJZCIsImNoYW5nZSIsImFkZHRyYWNrIiwicmVtb3ZldHJhY2siLCJkaXNhYmxlT3RoZXJzIiwiZW5hYmxlZCIsIl9UcmFja0xpc3QiLCJBdWRpb1RyYWNrTGlzdCIsImNoYW5naW5nXyIsImVuYWJsZWRDaGFuZ2VfIiwiZGlzYWJsZU90aGVycyQxIiwic2VsZWN0ZWQiLCJWaWRlb1RyYWNrTGlzdCIsInNlbGVjdGVkQ2hhbmdlXyIsIlRleHRUcmFja0xpc3QiLCJxdWV1ZUNoYW5nZV8iLCJ0cmlnZ2VyU2VsZWN0ZWRsYW5ndWFnZWNoYW5nZSIsInRyaWdnZXJTZWxlY3RlZGxhbmd1YWdlY2hhbmdlXyIsImtpbmQiLCJzZWxlY3RlZGxhbmd1YWdlY2hhbmdlXyIsIkh0bWxUcmFja0VsZW1lbnRMaXN0IiwidHJhY2tFbGVtZW50cyIsInRyYWNrRWxlbWVudHNfIiwiYWRkVHJhY2tFbGVtZW50XyIsInRyYWNrRWxlbWVudCIsImdldFRyYWNrRWxlbWVudEJ5VHJhY2tfIiwidHJhY2tFbGVtZW50XyIsInJlbW92ZVRyYWNrRWxlbWVudF8iLCJUZXh0VHJhY2tDdWVMaXN0Iiwic2V0Q3Vlc18iLCJsZW5ndGhfIiwib2xkTGVuZ3RoIiwiY3Vlc18iLCJkZWZpbmVQcm9wIiwiZ2V0Q3VlQnlJZCIsIlZpZGVvVHJhY2tLaW5kIiwiYWx0ZXJuYXRpdmUiLCJjYXB0aW9ucyIsIm1haW4iLCJzaWduIiwic3VidGl0bGVzIiwiY29tbWVudGFyeSIsIkF1ZGlvVHJhY2tLaW5kIiwiVGV4dFRyYWNrS2luZCIsImRlc2NyaXB0aW9ucyIsImNoYXB0ZXJzIiwibWV0YWRhdGEiLCJUZXh0VHJhY2tNb2RlIiwiaGlkZGVuIiwic2hvd2luZyIsIlRyYWNrIiwidHJhY2tQcm9wcyIsIl9sb29wIiwicHJvcHMiLCJhZGRUb0JvZHkiLCJob3N0IiwicHJvdG9jb2wiLCJnZXRGaWxlRXh0ZW5zaW9uIiwid2luTG9jIiwidXJsSW5mbyIsIlVybCIsInBhcnNlVXJsIiwiZ2V0QWJzb2x1dGVVUkwiLCJpc0Nyb3NzT3JpZ2luIiwic3JjQ29udGVudCIsInBhcnNlciIsImVycm9ycyIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJjcm9zc09yaWdpbiIsInRlY2hfIiwicmVzcG9uc2VCb2R5IiwibG9hZGVkXyIsIl9UcmFjayIsIlRleHRUcmFjayIsInNyY2xhbmciLCJkZWZhdWx0XyIsImFjdGl2ZUN1ZXNfIiwicHJlbG9hZF8iLCJwcmVsb2FkVGV4dFRyYWNrcyIsImFjdGl2ZUN1ZXMiLCJjaGFuZ2VkIiwidGltZXVwZGF0ZUhhbmRsZXIiLCJuZXdNb2RlIiwiY3QiLCJjdXJyZW50VGltZSIsImFjdGl2ZSIsIm9yaWdpbmFsQ3VlIiwib3JpZ2luYWxDdWVfIiwicmVtb3ZlQ3VlIiwiX3JlbW92ZUN1ZSIsImN1ZWNoYW5nZSIsIkF1ZGlvVHJhY2siLCJuZXdFbmFibGVkIiwiVmlkZW9UcmFjayIsIm5ld1NlbGVjdGVkIiwiSFRNTFRyYWNrRWxlbWVudCIsImxvYWQiLCJOT05FIiwiTE9BRElORyIsIkxPQURFRCIsIkVSUk9SIiwiTk9STUFMIiwiTGlzdENsYXNzIiwiVHJhY2tDbGFzcyIsImNhcGl0YWxOYW1lIiwiZ2V0dGVyTmFtZSIsInByaXZhdGVOYW1lIiwiUkVNT1RFIiwicmVtb3RlVGV4dCIsInJlbW90ZVRleHRFbCIsIkFMTCIsImhhc1N0YXJ0ZWRfIiwiZmVhdHVyZXNQcm9ncmVzc0V2ZW50cyIsIm1hbnVhbFByb2dyZXNzT24iLCJmZWF0dXJlc1RpbWV1cGRhdGVFdmVudHMiLCJtYW51YWxUaW1lVXBkYXRlc09uIiwibmF0aXZlQ2FwdGlvbnMiLCJuYXRpdmVUZXh0VHJhY2tzIiwiZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzIiwiZW11bGF0ZVRleHRUcmFja3MiLCJhdXRvUmVtb3RlVGV4dFRyYWNrc18iLCJpbml0VHJhY2tMaXN0ZW5lcnMiLCJuYXRpdmVDb250cm9sc0ZvclRvdWNoIiwidHJpZ2dlclNvdXJjZXNldCIsIm9uRHVyYXRpb25DaGFuZ2UiLCJtYW51YWxQcm9ncmVzcyIsInRyYWNrUHJvZ3Jlc3MiLCJtYW51YWxQcm9ncmVzc09mZiIsInN0b3BUcmFja2luZ1Byb2dyZXNzIiwicHJvZ3Jlc3NJbnRlcnZhbCIsIm51bUJ1ZmZlcmVkUGVyY2VudCIsImJ1ZmZlcmVkUGVyY2VudF8iLCJkdXJhdGlvbl8iLCJtYW51YWxUaW1lVXBkYXRlcyIsInRyYWNrQ3VycmVudFRpbWUiLCJzdG9wVHJhY2tpbmdDdXJyZW50VGltZSIsIm1hbnVhbFRpbWVVcGRhdGVzT2ZmIiwiY3VycmVudFRpbWVJbnRlcnZhbCIsIm1hbnVhbGx5VHJpZ2dlcmVkIiwiY2xlYXJUcmFja3MiLCJyZW1vdmVSZW1vdGVUZXh0VHJhY2siLCJjbGVhbnVwQXV0b1RleHRUcmFja3MiLCJyZXNldCIsInNldENyb3NzT3JpZ2luIiwiZXJyb3JfIiwicGxheWVkIiwic2V0U2NydWJiaW5nIiwic2V0Q3VycmVudFRpbWUiLCJ0cmFja0xpc3RDaGFuZ2VzIiwiYWRkV2ViVnR0U2NyaXB0XyIsInNjcmlwdCIsIl90aGlzNiIsInJlbW90ZVRyYWNrcyIsInJlbW90ZVRleHRUcmFja3MiLCJoYW5kbGVBZGRUcmFjayIsImhhbmRsZVJlbW92ZVRyYWNrIiwidXBkYXRlRGlzcGxheSIsInRleHRUcmFja3NDaGFuZ2VzIiwiYWRkVGV4dFRyYWNrIiwiY3JlYXRlVHJhY2tIZWxwZXIiLCJjcmVhdGVSZW1vdGVUZXh0VHJhY2siLCJtYW51YWxDbGVhbnVwIiwiX3RoaXM3IiwiaHRtbFRyYWNrRWxlbWVudCIsInJlbW90ZVRleHRUcmFja0VscyIsImdldFZpZGVvUGxheWJhY2tRdWFsaXR5IiwicmVxdWVzdFBpY3R1cmVJblBpY3R1cmUiLCJQcm9taXNlQ2xhc3MiLCJQcm9taXNlIiwicmVqZWN0IiwiZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUiLCJzZXREaXNhYmxlUGljdHVyZUluUGljdHVyZSIsInNldFBvc3RlciIsInBsYXlzaW5saW5lIiwic2V0UGxheXNpbmxpbmUiLCJvdmVycmlkZU5hdGl2ZUF1ZGlvVHJhY2tzIiwib3ZlcnJpZGVOYXRpdmVWaWRlb1RyYWNrcyIsImNhblBsYXlUeXBlIiwiY2FuUGxheVNvdXJjZSIsInNyY09iaiIsInJlZ2lzdGVyVGVjaCIsInRlY2hzXyIsImRlZmF1bHRUZWNoT3JkZXJfIiwiZ2V0VGVjaCIsImZlYXR1cmVzVm9sdW1lQ29udHJvbCIsImZlYXR1cmVzTXV0ZUNvbnRyb2wiLCJmZWF0dXJlc0Z1bGxzY3JlZW5SZXNpemUiLCJmZWF0dXJlc1BsYXliYWNrUmF0ZSIsImZlYXR1cmVzU291cmNlc2V0Iiwid2l0aFNvdXJjZUhhbmRsZXJzIiwiX1RlY2giLCJyZWdpc3RlclNvdXJjZUhhbmRsZXIiLCJoYW5kbGVyIiwic291cmNlSGFuZGxlcnMiLCJjYW4iLCJzZWxlY3RTb3VyY2VIYW5kbGVyIiwiY2FuSGFuZGxlU291cmNlIiwic2giLCJvcmlnaW5hbEZuIiwic291cmNlSGFuZGxlcl8iLCJzZXRTb3VyY2UiLCJuYXRpdmVTb3VyY2VIYW5kbGVyIiwiZGlzcG9zZVNvdXJjZUhhbmRsZXIiLCJjdXJyZW50U291cmNlXyIsImhhbmRsZVNvdXJjZSIsIm1pZGRsZXdhcmVzIiwibWlkZGxld2FyZUluc3RhbmNlcyIsIlRFUk1JTkFUT1IiLCJzZXRTb3VyY2VIZWxwZXIiLCJtaWRkbGV3YXJlIiwibGFzdFJ1biIsIl9taWRkbGV3YXJlIiwibXdGYWN0b3J5IiwibXdyZXN0IiwibXciLCJtd3MiLCJfbXdzJGkiLCJtd2YiLCJtd2kiLCJnZXRPckNyZWF0ZUZhY3RvcnkiLCJfc3JjIiwibWVkaWF0ZSIsImFyZyIsImNhbGxNZXRob2QiLCJtaWRkbGV3YXJlVmFsdWUiLCJtaWRkbGV3YXJlSXRlcmF0b3IiLCJ0ZXJtaW5hdGVkIiwiZXhlY3V0ZVJpZ2h0IiwiYWxsb3dlZEdldHRlcnMiLCJtdXRlZCIsInNlZWthYmxlIiwidm9sdW1lIiwiYWxsb3dlZFNldHRlcnMiLCJzZXRNdXRlZCIsInNldFZvbHVtZSIsImFsbG93ZWRNZWRpYXRvcnMiLCJNaW1ldHlwZXNLaW5kIiwib3B1cyIsIm9ndiIsIm1vdiIsIm00diIsIm1rdiIsIm00YSIsImNhZiIsIm9nYSIsIndhdiIsIm0zdTgiLCJqcGciLCJqcGVnIiwiZ2lmIiwicG5nIiwic3ZnIiwid2VicCIsImdldE1pbWV0eXBlIiwiZXh0IiwiZml4U291cmNlIiwibWltZXR5cGUiLCJNZWRpYUxvYWRlciIsImoiLCJ0ZWNoT3JkZXIiLCJ0ZWNoTmFtZSIsImxvYWRUZWNoXyIsIkNsaWNrYWJsZUNvbXBvbmVudCIsInRhYkluZGV4XyIsImNyZWF0ZUNvbnRyb2xUZXh0RWwiLCJjb250cm9sVGV4dEVsXyIsImNvbnRyb2xUZXh0XyIsImxvY2FsaXplZFRleHQiLCJub25JY29uQ29udHJvbCIsImVuYWJsZWRfIiwiaGFuZGxlQ2xpY2siLCJoYW5kbGVNb3VzZU92ZXIiLCJoYW5kbGVNb3VzZU91dCIsImNsaWNrSGFuZGxlciIsIl9DbGlja2FibGVDb21wb25lbnQiLCJQb3N0ZXJJbWFnZSIsInVwZGF0ZSIsInBvc3RlciIsInNldFNyYyIsImJhY2tncm91bmRJbWFnZSIsInNvdXJjZUlzRW5jcnlwdGVkIiwidXNpbmdQbHVnaW4iLCJlbWUiLCJzZXNzaW9ucyIsImZvbnRNYXAiLCJtb25vc3BhY2UiLCJzYW5zU2VyaWYiLCJzZXJpZiIsIm1vbm9zcGFjZVNhbnNTZXJpZiIsIm1vbm9zcGFjZVNlcmlmIiwicHJvcG9ydGlvbmFsU2Fuc1NlcmlmIiwicHJvcG9ydGlvbmFsU2VyaWYiLCJjYXN1YWwiLCJzbWFsbGNhcHMiLCJjb25zdHJ1Y3RDb2xvciIsIm9wYWNpdHkiLCJoZXgiLCJ0cnlVcGRhdGVTdHlsZSIsIlRleHRUcmFja0Rpc3BsYXkiLCJ1cGRhdGVEaXNwbGF5SGFuZGxlciIsInRvZ2dsZURpc3BsYXkiLCJwcmVzZWxlY3RUcmFjayIsImZpcnN0RGVzYyIsImZpcnN0Q2FwdGlvbnMiLCJwcmVmZXJyZWRUcmFjayIsIm1vZGVzIiwidXNlclByZWYiLCJjYWNoZV8iLCJzZWxlY3RlZExhbmd1YWdlIiwiY2xlYXJEaXNwbGF5IiwiYWxsb3dNdWx0aXBsZVNob3dpbmdUcmFja3MiLCJzaG93aW5nVHJhY2tzIiwidXBkYXRlRm9yVHJhY2siLCJkZXNjcmlwdGlvbnNUcmFjayIsImNhcHRpb25zU3VidGl0bGVzVHJhY2siLCJfdHJhY2siLCJ1cGRhdGVEaXNwbGF5U3RhdGUiLCJvdmVycmlkZXMiLCJ0ZXh0VHJhY2tTZXR0aW5ncyIsImdldFZhbHVlcyIsInRleHRPcGFjaXR5IiwiYmFja2dyb3VuZE9wYWNpdHkiLCJ3aW5kb3dDb2xvciIsIndpbmRvd09wYWNpdHkiLCJlZGdlU3R5bGUiLCJ0ZXh0U2hhZG93IiwiZm9udFBlcmNlbnQiLCJmb250RmFtaWx5IiwiZm9udFZhcmlhbnQiLCJfaTIiLCJfdHJhY2syIiwiX2oiLCJjdWVFbCIsIkxvYWRpbmdTcGlubmVyIiwiaXNBdWRpbyIsInBsYXllclR5cGUiLCJkaXIiLCJCdXR0b24iLCJfQnV0dG9uIiwiQmlnUGxheUJ1dHRvbiIsIm1vdXNldXNlZF8iLCJoYW5kbGVNb3VzZURvd24iLCJwbGF5UHJvbWlzZSIsImNiIiwicGxheVRvZ2dsZSIsInBsYXlGb2N1cyIsIkNsb3NlQnV0dG9uIiwiUGxheVRvZ2dsZSIsInJlcGxheSIsImhhbmRsZVBsYXkiLCJoYW5kbGVQYXVzZSIsImhhbmRsZUVuZGVkIiwiaGFuZGxlU2Vla2VkIiwiZGVmYXVsdEltcGxlbWVudGF0aW9uIiwiZ3VpZGUiLCJnbSIsImdoIiwiZm9ybWF0VGltZSIsIlRpbWVEaXNwbGF5IiwidXBkYXRlQ29udGVudCIsInVwZGF0ZVRleHROb2RlXyIsImxhYmVsVGV4dF8iLCJ0ZXh0Tm9kZV8iLCJmb3JtYXR0ZWRUaW1lXyIsIm9sZE5vZGUiLCJfVGltZURpc3BsYXkiLCJDdXJyZW50VGltZURpc3BsYXkiLCJlbmRlZCIsInNjcnViYmluZyIsImdldENhY2hlIiwiRHVyYXRpb25EaXNwbGF5IiwiVGltZURpdmlkZXIiLCJSZW1haW5pbmdUaW1lRGlzcGxheSIsInJlbWFpbmluZ1RpbWVEaXNwbGF5IiwicmVtYWluaW5nVGltZSIsIkxpdmVEaXNwbGF5IiwidXBkYXRlU2hvd2luZyIsIlNlZWtUb0xpdmUiLCJ1cGRhdGVMaXZlRWRnZVN0YXR1cyIsImxpdmVUcmFja2VyIiwidGV4dEVsXyIsImF0TGl2ZUVkZ2UiLCJzZWVrVG9MaXZlRWRnZSIsImNsYW1wIiwiU2xpZGVyIiwiYmFyIiwiYmFyTmFtZSIsInBsYXllckV2ZW50IiwiaGFuZGxlTW91c2VNb3ZlIiwiaGFuZGxlTW91c2VVcCIsInByb2dyZXNzIiwiZ2V0UHJvZ3Jlc3MiLCJwcm9ncmVzc18iLCJzaXplS2V5IiwidG9GaXhlZCIsImdldFBlcmNlbnQiLCJjYWxjdWxhdGVEaXN0YW5jZSIsInN0ZXBCYWNrIiwic3RlcEZvcndhcmQiLCJib29sIiwidmVydGljYWxfIiwicGVyY2VudGlmeSIsIkxvYWRQcm9ncmVzc0JhciIsInBhcnRFbHNfIiwibG9hZGVkVGV4dCIsInNlcGFyYXRvciIsInBlcmNlbnRhZ2VFbF8iLCJpc0xpdmUiLCJzZWVrYWJsZUVuZCIsImJ1ZmZlcmVkRW5kIiwicGVyY2VudF8iLCJwYXJ0IiwiZGF0YXNldCIsIlRpbWVUb29sdGlwIiwic2Vla0JhclJlY3QiLCJzZWVrQmFyUG9pbnQiLCJ0b29sdGlwUmVjdCIsInBsYXllclJlY3QiLCJzZWVrQmFyUG9pbnRQeCIsInNwYWNlTGVmdE9mUG9pbnQiLCJzcGFjZVJpZ2h0T2ZQb2ludCIsInB1bGxUb29sdGlwQnkiLCJ3cml0ZSIsInVwZGF0ZVRpbWUiLCJsaXZlV2luZG93Iiwic2Vjb25kc0JlaGluZCIsIlBsYXlQcm9ncmVzc0JhciIsInRpbWVUb29sdGlwIiwiTW91c2VUaW1lRGlzcGxheSIsIl9TbGlkZXIiLCJTZWVrQmFyIiwic2V0RXZlbnRIYW5kbGVyc18iLCJ1cGRhdGVfIiwidXBkYXRlSW50ZXJ2YWwiLCJlbmFibGVJbnRlcnZhbF8iLCJkaXNhYmxlSW50ZXJ2YWxfIiwidG9nZ2xlVmlzaWJpbGl0eV8iLCJnZXRDdXJyZW50VGltZV8iLCJsaXZlQ3VycmVudFRpbWUiLCJjdXJyZW50VGltZV8iLCJzZWVrYWJsZVN0YXJ0IiwidmlkZW9XYXNQbGF5aW5nIiwibmV3VGltZSIsImRpc3RhbmNlIiwibW91c2VUaW1lRGlzcGxheSIsImhhbmRsZUFjdGlvbiIsImdvdG9GcmFjdGlvbiIsIlNURVBfU0VDT05EUyIsIlByb2dyZXNzQ29udHJvbCIsInRocm90dGxlZEhhbmRsZU1vdXNlU2VlayIsImhhbmRsZU1vdXNlU2VlayIsInNlZWtCYXIiLCJwbGF5UHJvZ3Jlc3NCYXIiLCJzZWVrQmFyRWwiLCJQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlIiwiaGFuZGxlUGljdHVyZUluUGljdHVyZUNoYW5nZSIsImhhbmRsZVBpY3R1cmVJblBpY3R1cmVFbmFibGVkQ2hhbmdlIiwicGljdHVyZUluUGljdHVyZUVuYWJsZWQiLCJpc0luUGljdHVyZUluUGljdHVyZSIsImV4aXRQaWN0dXJlSW5QaWN0dXJlIiwiRnVsbHNjcmVlblRvZ2dsZSIsImhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UiLCJmc0FwaV8iLCJmdWxsc2NyZWVuRW5hYmxlZCIsImlzRnVsbHNjcmVlbiIsImV4aXRGdWxsc2NyZWVuIiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJWb2x1bWVMZXZlbCIsIlZvbHVtZUJhciIsInVwZGF0ZUxhc3RWb2x1bWVfIiwidXBkYXRlQVJJQUF0dHJpYnV0ZXMiLCJjaGVja011dGVkIiwiYXJpYVZhbHVlIiwidm9sdW1lQXNQZXJjZW50YWdlXyIsInZvbHVtZUJlZm9yZURyYWciLCJsYXN0Vm9sdW1lXyIsIlZvbHVtZUNvbnRyb2wiLCJ2b2x1bWVCYXIiLCJjaGVja1ZvbHVtZVN1cHBvcnQiLCJ0aHJvdHRsZWRIYW5kbGVNb3VzZU1vdmUiLCJvcmllbnRhdGlvbkNsYXNzIiwiTXV0ZVRvZ2dsZSIsImNoZWNrTXV0ZVN1cHBvcnQiLCJ2b2wiLCJsYXN0Vm9sdW1lIiwidm9sdW1lVG9TZXQiLCJ1cGRhdGVJY29uXyIsInVwZGF0ZUNvbnRyb2xUZXh0XyIsIlZvbHVtZVBhbmVsIiwiaW5saW5lIiwidm9sdW1lQ29udHJvbCIsInZvbHVtZVBhbmVsU3RhdGVfIiwibXV0ZVRvZ2dsZSIsImhhbmRsZVZvbHVtZUNvbnRyb2xLZXlVcCIsInNsaWRlckFjdGl2ZV8iLCJzbGlkZXJJbmFjdGl2ZV8iLCJNZW51IiwibWVudUJ1dHRvbl8iLCJtZW51QnV0dG9uIiwiZm9jdXNlZENoaWxkXyIsImJvdW5kSGFuZGxlQmx1cl8iLCJoYW5kbGVCbHVyIiwiYm91bmRIYW5kbGVUYXBDbGlja18iLCJoYW5kbGVUYXBDbGljayIsImFkZEV2ZW50TGlzdGVuZXJGb3JJdGVtIiwicmVtb3ZlRXZlbnRMaXN0ZW5lckZvckl0ZW0iLCJhZGRJdGVtIiwiY2hpbGRDb21wb25lbnQiLCJjb250ZW50RWxUeXBlIiwiYXBwZW5kIiwiYnRuIiwiYnV0dG9uUHJlc3NlZF8iLCJ1bnByZXNzQnV0dG9uIiwiY2hpbGRDb21wb25lbnRzIiwiZm91bmRDb21wb25lbnQiLCJzdGVwQ2hpbGQiLCJNZW51QnV0dG9uIiwiYnV0dG9uQ2xhc3MiLCJtZW51IiwiaGFuZGxlTWVudUtleVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZVN1Ym1lbnVLZXlEb3duIiwiY3JlYXRlTWVudSIsIml0ZW1zIiwiaGlkZVRocmVzaG9sZF8iLCJ0aXRsZUVsIiwidGl0bGVDb21wb25lbnQiLCJjcmVhdGVJdGVtcyIsImJ1aWxkV3JhcHBlckNTU0NsYXNzIiwibWVudUJ1dHRvbkNsYXNzIiwicHJlc3NCdXR0b24iLCJoYW5kbGVTdWJtZW51S2V5UHJlc3MiLCJfTWVudUJ1dHRvbiIsIlRyYWNrQnV0dG9uIiwidXBkYXRlSGFuZGxlciIsIk1lbnVLZXlzIiwiTWVudUl0ZW0iLCJzZWxlY3RhYmxlIiwiaXNTZWxlY3RlZF8iLCJtdWx0aVNlbGVjdGFibGUiLCJfc2VsZWN0ZWQiLCJfTWVudUl0ZW0iLCJUZXh0VHJhY2tNZW51SXRlbSIsImtpbmRzIiwiY2hhbmdlSGFuZGxlciIsImhhbmRsZVRyYWNrc0NoYW5nZSIsInNlbGVjdGVkTGFuZ3VhZ2VDaGFuZ2VIYW5kbGVyIiwiaGFuZGxlU2VsZWN0ZWRMYW5ndWFnZUNoYW5nZSIsIm9uY2hhbmdlIiwiRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsInJlZmVyZW5jZVRyYWNrIiwic2hvdWxkQmVTZWxlY3RlZCIsIl9UZXh0VHJhY2tNZW51SXRlbSIsIk9mZlRleHRUcmFja01lbnVJdGVtIiwiYWxsSGlkZGVuIiwiX1RyYWNrQnV0dG9uIiwiVGV4dFRyYWNrQnV0dG9uIiwiVHJhY2tNZW51SXRlbSIsImxhYmVsXyIsImtpbmRzXyIsImtpbmRfIiwiQ2hhcHRlcnNUcmFja01lbnVJdGVtIiwiX1RleHRUcmFja0J1dHRvbiIsIkNoYXB0ZXJzQnV0dG9uIiwidHJhY2tfIiwic2V0VHJhY2siLCJmaW5kQ2hhcHRlcnNUcmFjayIsInVwZGF0ZUhhbmRsZXJfIiwicmVtb3RlVGV4dFRyYWNrRWwiLCJfcmVtb3RlVGV4dFRyYWNrRWwiLCJnZXRNZW51Q2FwdGlvbiIsIm1pIiwiRGVzY3JpcHRpb25zQnV0dG9uIiwiU3VidGl0bGVzQnV0dG9uIiwiQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0iLCJDYXB0aW9uc0J1dHRvbiIsIlN1YnNDYXBzTWVudUl0ZW0iLCJTdWJzQ2Fwc0J1dHRvbiIsImxhbmd1YWdlXyIsIkF1ZGlvVHJhY2tNZW51SXRlbSIsImF1ZGlvVHJhY2tzIiwiQXVkaW9UcmFja0J1dHRvbiIsIlBsYXliYWNrUmF0ZU1lbnVJdGVtIiwicmF0ZSIsInBsYXliYWNrUmF0ZSIsIlBsYXliYWNrUmF0ZU1lbnVCdXR0b24iLCJ1cGRhdGVWaXNpYmlsaXR5IiwidXBkYXRlTGFiZWwiLCJsYWJlbEVsXyIsInJhdGVzIiwicGxheWJhY2tSYXRlcyIsImN1cnJlbnRSYXRlIiwibmV3UmF0ZSIsInBsYXliYWNrUmF0ZVN1cHBvcnRlZCIsIlNwYWNlciIsIl9TcGFjZXIiLCJDdXN0b21Db250cm9sU3BhY2VyIiwiQ29udHJvbEJhciIsIl9Nb2RhbERpYWxvZyIsIkVycm9yRGlzcGxheSIsIkNPTE9SX0JMQUNLIiwiQ09MT1JfQkxVRSIsIkNPTE9SX0NZQU4iLCJDT0xPUl9HUkVFTiIsIkNPTE9SX01BR0VOVEEiLCJDT0xPUl9SRUQiLCJDT0xPUl9XSElURSIsIkNPTE9SX1lFTExPVyIsIk9QQUNJVFlfT1BBUVVFIiwiT1BBQ0lUWV9TRU1JIiwiT1BBQ0lUWV9UUkFOUyIsInNlbGVjdENvbmZpZ3MiLCJwYXJzZU9wdGlvblZhbHVlIiwiVGV4dFRyYWNrU2V0dGluZ3MiLCJlbmREaWFsb2ciLCJzZXREZWZhdWx0cyIsInBlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncyIsInNhdmVTZXR0aW5ncyIsInJlc3RvcmVTZXR0aW5ncyIsImNyZWF0ZUVsU2VsZWN0XyIsImxlZ2VuZElkIiwic2VsZWN0TGFiZWxsZWRieUlkcyIsIm9wdGlvbklkIiwiY3JlYXRlRWxGZ0NvbG9yXyIsImNyZWF0ZUVsQmdDb2xvcl8iLCJjcmVhdGVFbFdpbkNvbG9yXyIsImNyZWF0ZUVsQ29sb3JzXyIsImNyZWF0ZUVsRm9udF8iLCJjcmVhdGVFbENvbnRyb2xzXyIsImRlZmF1bHRzRGVzY3JpcHRpb24iLCJpbml0aWFsIiwiYWNjdW0iLCJzZWxlY3RlZEluZGV4Iiwic2V0VmFsdWVzIiwic2V0U2VsZWN0ZWRPcHRpb24iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJ0dERpc3BsYXkiLCJjb250cm9sQmFyIiwic3Vic0NhcHNCdG4iLCJzdWJzQ2Fwc0J1dHRvbiIsImNjQnRuIiwiY2FwdGlvbnNCdXR0b24iLCJSZXNpemVNYW5hZ2VyIiwiUkVTSVpFX09CU0VSVkVSX0FWQUlMQUJMRSIsIlJlc2l6ZU9ic2VydmVyIiwibG9hZExpc3RlbmVyXyIsInJlc2l6ZU9ic2VydmVyXyIsImRlYm91bmNlZEhhbmRsZXJfIiwiaW1tZWRpYXRlIiwiZGVib3VuY2VkIiwiX2xhdGVyIiwiY2FuY2VsIiwicmVzaXplSGFuZGxlciIsIm9ic2VydmUiLCJjb250ZW50V2luZG93IiwidW5sb2FkTGlzdGVuZXJfIiwidW5vYnNlcnZlIiwiZGlzY29ubmVjdCIsInJlc2l6ZU9ic2VydmVyIiwiZGVmYXVsdHMiLCJ0cmFja2luZ1RocmVzaG9sZCIsImxpdmVUb2xlcmFuY2UiLCJMaXZlVHJhY2tlciIsInJlc2V0XyIsImhhbmRsZUR1cmF0aW9uY2hhbmdlIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInN0b3BUcmFja2luZyIsInN0YXJ0VHJhY2tpbmciLCJ0cmFja0xpdmVfIiwiZGVsdGFUaW1lIiwibGFzdFRpbWVfIiwicGFzdFNlZWtFbmRfIiwicGFzdFNlZWtFbmQiLCJpc0JlaGluZCIsInNlZWtlZEJlaGluZExpdmVfIiwidGltZXVwZGF0ZVNlZW5fIiwiYmVoaW5kTGl2ZUVkZ2VfIiwibGl2ZXVpIiwiaXNUcmFja2luZyIsImhhc1N0YXJ0ZWQiLCJ0cmFja2luZ0ludGVydmFsXyIsImhhbmRsZUZpcnN0VGltZXVwZGF0ZSIsInRpbWVEaWZmIiwic2tpcE5leHRTZWVrZWRfIiwibGFzdFNlZWtFbmRfIiwic2Vla2FibGVFbmRzIiwic29ydCIsInNlZWthYmxlU3RhcnRzIiwiYmVoaW5kTGl2ZUVkZ2UiLCJzb3VyY2VzZXRMb2FkIiwic3JjVXJscyIsImlubmVySFRNTERlc2NyaXB0b3JQb2x5ZmlsbCIsImR1bW15IiwiZG9jRnJhZyIsImdldERlc2NyaXB0b3IiLCJwcmlvcml0eSIsImRlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmaXJzdFNvdXJjZVdhdGNoIiwicmVzZXRTb3VyY2VXYXRjaF8iLCJpbm5lckRlc2NyaXB0b3IiLCJIVE1MTWVkaWFFbGVtZW50IiwiYXBwZW5kV3JhcHBlciIsImFwcGVuZEZuIiwicmV0dmFsIiwic3JjRGVzY3JpcHRvclBvbHlmaWxsIiwic2V0dXBTb3VyY2VzZXQiLCJyZXNldFNvdXJjZXNldF8iLCJzcmNEZXNjcmlwdG9yIiwib2xkU2V0QXR0cmlidXRlIiwib2xkTG9hZCIsImN1cnJlbnRTcmMiLCJkZWZpbmVMYXp5UHJvcGVydHkiLCJzZXR0ZXIiLCJIdG1sNSIsImNyb3Nzb3JpZ2luVHJhY2tzIiwiaW5pdE5ldHdvcmtTdGF0ZV8iLCJoYW5kbGVMYXRlSW5pdF8iLCJlbmFibGVTb3VyY2VzZXQiLCJzZXR1cFNvdXJjZXNldEhhbmRsaW5nXyIsIm5vZGVzIiwibm9kZXNMZW5ndGgiLCJyZW1vdmVOb2RlcyIsInByb3h5TmF0aXZlVHJhY2tzXyIsInJlc3RvcmVNZXRhZGF0YVRyYWNrc0luSU9TTmF0aXZlUGxheWVyXyIsInNldENvbnRyb2xzIiwicHJveHlXZWJraXRGdWxsc2NyZWVuXyIsImRpc3Bvc2VNZWRpYUVsZW1lbnQiLCJtZXRhZGF0YVRyYWNrc1ByZUZ1bGxzY3JlZW5TdGF0ZSIsInRha2VNZXRhZGF0YVRyYWNrU25hcHNob3QiLCJzdG9yZWRNb2RlIiwicmVzdG9yZVRyYWNrTW9kZSIsInN0b3JlZFRyYWNrIiwib3ZlcnJpZGVOYXRpdmVfIiwib3ZlcnJpZGUiLCJsb3dlckNhc2VUeXBlIiwiZXZlbnROYW1lIiwicHJveHlOYXRpdmVUcmFja3NGb3JUeXBlXyIsImVsVHJhY2tzIiwidGVjaFRyYWNrcyIsImxpc3RlbmVycyIsImN1cnJlbnRUYXJnZXQiLCJyZW1vdmVPbGRUcmFja3MiLCJyZW1vdmVUcmFja3MiLCJmb3VuZCIsInBsYXllckVsSW5nZXN0IiwibW92aW5nTWVkaWFFbGVtZW50SW5ET00iLCJjbG9uZSIsInRlY2hJZCIsInBsYXllcklkIiwicHJlbG9hZCIsInNldHRpbmdzQXR0cnMiLCJuZXR3b3JrU3RhdGUiLCJsb2Fkc3RhcnRGaXJlZCIsInNldExvYWRzdGFydEZpcmVkIiwidHJpZ2dlckxvYWRzdGFydCIsImV2ZW50c1RvVHJpZ2dlciIsImlzU2NydWJiaW5nIiwiaXNTY3J1YmJpbmdfIiwiZmFzdFNlZWsiLCJjaGVja1Byb2dyZXNzIiwiTmFOIiwiZW5kRm4iLCJiZWdpbkZuIiwid2Via2l0UHJlc2VudGF0aW9uTW9kZSIsIm5hdGl2ZUlPU0Z1bGxzY3JlZW4iLCJzdXBwb3J0c0Z1bGxTY3JlZW4iLCJ3ZWJraXRFbnRlckZ1bGxTY3JlZW4iLCJlbnRlckZ1bGxTY3JlZW4iLCJIQVZFX01FVEFEQVRBIiwiZXhpdEZ1bGxTY3JlZW4iLCJ3ZWJraXREaXNwbGF5aW5nRnVsbHNjcmVlbiIsIndlYmtpdEV4aXRGdWxsU2NyZWVuIiwicmVzZXRNZWRpYUVsZW1lbnQiLCJ2aWRlb1BsYXliYWNrUXVhbGl0eSIsIndlYmtpdERyb3BwZWRGcmFtZUNvdW50Iiwid2Via2l0RGVjb2RlZEZyYW1lQ291bnQiLCJkcm9wcGVkVmlkZW9GcmFtZXMiLCJ0b3RhbFZpZGVvRnJhbWVzIiwiY3JlYXRpb25UaW1lIiwidGltaW5nIiwibmF2aWdhdGlvblN0YXJ0IiwiVEVTVF9WSUQiLCJjYW5Db250cm9sVm9sdW1lIiwiY2FuTXV0ZVZvbHVtZSIsImNhbkNvbnRyb2xQbGF5YmFja1JhdGUiLCJjYW5PdmVycmlkZUF0dHJpYnV0ZXMiLCJzdXBwb3J0c05hdGl2ZVRleHRUcmFja3MiLCJzdXBwb3J0c05hdGl2ZVZpZGVvVHJhY2tzIiwidmlkZW9UcmFja3MiLCJzdXBwb3J0c05hdGl2ZUF1ZGlvVHJhY2tzIiwicGF0Y2hDYW5QbGF5VHlwZSIsInVucGF0Y2hDYW5QbGF5VHlwZSIsIlRFQ0hfRVZFTlRTX1JFVFJJR0dFUiIsIlRFQ0hfRVZFTlRTX1FVRVVFIiwiY2FucGxheSIsImNhbnBsYXl0aHJvdWdoIiwicGxheWluZyIsInNlZWtlZCIsIkJSRUFLUE9JTlRfT1JERVIiLCJCUkVBS1BPSU5UX0NMQVNTRVMiLCJERUZBVUxUX0JSRUFLUE9JTlRTIiwidGlueSIsInhzbWFsbCIsInNtYWxsIiwibWVkaXVtIiwibGFyZ2UiLCJ4bGFyZ2UiLCJodWdlIiwiZ2V0VGFnU2V0dGluZ3MiLCJjbG9zZXN0IiwiYm91bmREb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2VfIiwiZG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyIsImJvdW5kRnVsbFdpbmRvd09uRXNjS2V5XyIsImZ1bGxXaW5kb3dPbkVzY0tleSIsImlzRnVsbHNjcmVlbl8iLCJpc1Bvc3RlckZyb21UZWNoXyIsInF1ZXVlZENhbGxiYWNrc18iLCJ1c2VyQWN0aXZlXyIsImRlYnVnRW5hYmxlZF8iLCJ0YWdBdHRyaWJ1dGVzIiwibGFuZ3VhZ2VzVG9Mb3dlciIsImxhbmd1YWdlc18iLCJyZXNldENhY2hlXyIsInBvc3Rlcl8iLCJjb250cm9sc18iLCJjaGFuZ2luZ1NyY18iLCJwbGF5Q2FsbGJhY2tzXyIsInBsYXlUZXJtaW5hdGVkUXVldWVfIiwiYXV0b3BsYXkiLCJwbHVnaW5zIiwic2NydWJiaW5nXyIsImZ1bGxzY3JlZW5jaGFuZ2UiLCJmbHVpZF8iLCJ1cGRhdGVTdHlsZUVsXyIsInBsYXllck9wdGlvbnNDb3B5IiwibWlkZGxld2FyZV8iLCJmbGV4Tm90U3VwcG9ydGVkXyIsIm1ham9yVmVyc2lvbiIsInVzZXJBY3RpdmUiLCJsaXN0ZW5Gb3JVc2VyQWN0aXZpdHlfIiwiaGFuZGxlU3RhZ2VDbGlja18iLCJicmVha3BvaW50cyIsInJlc3BvbnNpdmUiLCJzdHlsZUVsXyIsInBsYXllckVsSW5nZXN0XyIsImRpdkVtYmVkIiwidGFiaW5kZXgiLCJWSURFT0pTX05PX0RZTkFNSUNfU1RZTEUiLCJkZWZhdWx0c1N0eWxlRWwiLCJoZWFkIiwiZmlsbF8iLCJmbHVpZCIsImFzcGVjdFJhdGlvIiwiY3Jvc3NvcmlnaW4iLCJsaW5rcyIsImxpbmtFbCIsInRlY2hHZXRfIiwidGVjaENhbGxfIiwiX2RpbWVuc2lvbiIsInByaXZEaW1lbnNpb24iLCJwYXJzZWRWYWwiLCJyYXRpbyIsImFzcGVjdFJhdGlvXyIsImlkQ2xhc3MiLCJyYXRpb1BhcnRzIiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0IiwicmF0aW9NdWx0aXBsaWVyIiwid2lkdGhfIiwiaGVpZ2h0XyIsIl9oZWlnaHQiLCJ0ZWNoRWwiLCJ1bmxvYWRUZWNoXyIsInRpdGxlVGVjaE5hbWUiLCJjYW1lbFRlY2hOYW1lIiwidGVjaE5hbWVfIiwidGVjaE9wdGlvbnMiLCJsb29wIiwidGVjaENhbk92ZXJyaWRlUG9zdGVyIiwiVGVjaENsYXNzIiwiaGFuZGxlVGVjaFJlYWR5XyIsInRleHRUcmFja3NKc29uXyIsImV2ZW50T2JqIiwic2Vla2luZyIsImhhbmRsZVRlY2hMb2FkU3RhcnRfIiwiaGFuZGxlVGVjaFNvdXJjZXNldF8iLCJoYW5kbGVUZWNoV2FpdGluZ18iLCJoYW5kbGVUZWNoRW5kZWRfIiwiaGFuZGxlVGVjaFNlZWtpbmdfIiwiaGFuZGxlVGVjaFBsYXlfIiwiaGFuZGxlVGVjaEZpcnN0UGxheV8iLCJoYW5kbGVUZWNoUGF1c2VfIiwiaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXyIsImhhbmRsZVRlY2hGdWxsc2NyZWVuQ2hhbmdlXyIsImhhbmRsZVRlY2hGdWxsc2NyZWVuRXJyb3JfIiwiaGFuZGxlVGVjaEVudGVyUGljdHVyZUluUGljdHVyZV8iLCJoYW5kbGVUZWNoTGVhdmVQaWN0dXJlSW5QaWN0dXJlXyIsImhhbmRsZVRlY2hFcnJvcl8iLCJoYW5kbGVUZWNoUG9zdGVyQ2hhbmdlXyIsImhhbmRsZVRlY2hUZXh0RGF0YV8iLCJoYW5kbGVUZWNoUmF0ZUNoYW5nZV8iLCJ1c2luZ05hdGl2ZUNvbnRyb2xzIiwiYWRkVGVjaENvbnRyb2xzTGlzdGVuZXJzXyIsInNhZmV0eSIsInJlbW92ZVRlY2hDb250cm9sc0xpc3RlbmVyc18iLCJoYW5kbGVUZWNoQ2xpY2tfIiwiaGFuZGxlVGVjaERvdWJsZUNsaWNrXyIsImhhbmRsZVRlY2hUb3VjaFN0YXJ0XyIsImhhbmRsZVRlY2hUb3VjaE1vdmVfIiwiaGFuZGxlVGVjaFRvdWNoRW5kXyIsImhhbmRsZVRlY2hUYXBfIiwibWFudWFsQXV0b3BsYXlfIiwicHJvbWlzZSIsInByZXZpb3VzbHlNdXRlZCIsInJlc3RvcmVNdXRlZCIsIm11dGVkUHJvbWlzZSIsInVwZGF0ZVNvdXJjZUNhY2hlc18iLCJtYXRjaGluZ1NvdXJjZXMiLCJmaW5kTWltZXR5cGUiLCJzb3VyY2VFbFNvdXJjZXMiLCJzb3VyY2VFbHMiLCJtYXRjaGluZ1NvdXJjZUVscyIsInNvdXJjZU9iaiIsInVwZGF0ZVNvdXJjZUNhY2hlcyIsInBsYXllclNyYyIsImN1cnJlbnRTb3VyY2UiLCJldmVudFNyYyIsImxhc3RTb3VyY2VfIiwidGVjaFNyYyIsInRlY2hHZXQiLCJyZXF1ZXN0IiwibGFzdFBsYXliYWNrUmF0ZSIsInF1ZXVlZCIsInRpbWVXaGVuV2FpdGluZyIsInRpbWVVcGRhdGVMaXN0ZW5lciIsImhhbmRsZVRlY2hDYW5QbGF5XyIsImhhbmRsZVRlY2hDYW5QbGF5VGhyb3VnaF8iLCJoYW5kbGVUZWNoUGxheWluZ18iLCJoYW5kbGVUZWNoU2Vla2VkXyIsInN0YXJ0dGltZSIsInVzZXJBY3Rpb25zIiwiZG91YmxlQ2xpY2siLCJ1c2VyV2FzQWN0aXZlIiwidG9nZ2xlRnVsbHNjcmVlbkNsYXNzXyIsInRhcmdldFBsYXllciIsImlzRnMiLCJmdWxsc2NyZWVuRWxlbWVudCIsIm1hdGNoZXMiLCJmdWxsc2NyZWVuIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ0b2dnbGVQaWN0dXJlSW5QaWN0dXJlQ2xhc3NfIiwiaW5pdFRpbWUiLCJpbmFjdGl2aXR5VGltZW91dCIsImRlZmF1bHRQbGF5YmFja1JhdGUiLCJyZWR1Y2VSaWdodCIsIl90aGlzOCIsInJlc29sdmUiLCJwbGF5XyIsIl90aGlzOSIsImlzU3JjUmVhZHkiLCJ3YWl0VG9QbGF5XyIsInJ1blBsYXlUZXJtaW5hdGVkUXVldWVfIiwicnVuUGxheUNhbGxiYWNrc18iLCJxdWV1ZSIsInEiLCJjYWxsYmFja3MiLCJhcHBseUluaXRUaW1lXyIsInBlcmNlbnRBc0RlY2ltYWwiLCJfbXV0ZWQiLCJkZWZhdWx0TXV0ZWQiLCJfZGVmYXVsdE11dGVkIiwiaXNGUyIsIm9sZFZhbHVlIiwiZnVsbHNjcmVlbk9wdGlvbnMiLCJvZmZIYW5kbGVyIiwicmVxdWVzdEZ1bGxzY3JlZW5IZWxwZXJfIiwiZnNPcHRpb25zIiwiX3RoaXMxMCIsImVudGVyRnVsbFdpbmRvdyIsImV4aXRGdWxsc2NyZWVuSGVscGVyXyIsIl90aGlzMTEiLCJleGl0RnVsbFdpbmRvdyIsImlzRnVsbFdpbmRvdyIsImRvY09yaWdPdmVyZmxvdyIsIm92ZXJmbG93IiwiaXNQaVAiLCJpc0luUGljdHVyZUluUGljdHVyZV8iLCJob3RrZXlzIiwiaXNDb250ZW50RWRpdGFibGUiLCJleGNsdWRlRWxlbWVudCIsImhhbmRsZUhvdGtleXMiLCJfaG90a2V5cyRmdWxsc2NyZWVuS2UiLCJmdWxsc2NyZWVuS2V5Iiwia2V5ZG93bkV2ZW50IiwiX2hvdGtleXMkbXV0ZUtleSIsIm11dGVLZXkiLCJfaG90a2V5cyRwbGF5UGF1c2VLZXkiLCJwbGF5UGF1c2VLZXkiLCJGU1RvZ2dsZSIsInNlbGVjdFNvdXJjZSIsIl90aGlzMTIiLCJ0ZWNocyIsImZpbmRGaXJzdFBhc3NpbmdUZWNoU291cmNlUGFpciIsIm91dGVyQXJyYXkiLCJpbm5lckFycmF5IiwidGVzdGVyIiwib3V0ZXJDaG9pY2UiLCJpbm5lckNob2ljZSIsImZpbmRlciIsInNvdXJjZU9yZGVyIiwiX3RoaXMxMyIsImZpbHRlclNvdXJjZSIsIm5ld3NyYyIsInNyY29iaiIsIm1pZGRsZXdhcmVTb3VyY2UiLCJzcmNfIiwibm90U3VwcG9ydGVkTWVzc2FnZSIsInNldFRlY2giLCJzdHIxIiwic3RyMiIsIl90aGlzMTQiLCJzb3VyY2VUZWNoIiwiX3RoaXMxNSIsImRvUmVzZXRfIiwicmVzZXRDb250cm9sQmFyVUlfIiwicmVzZXRQcm9ncmVzc0Jhcl8iLCJyZXNldFBsYXliYWNrUmF0ZV8iLCJyZXNldFZvbHVtZUJhcl8iLCJfdGhpcyRjb250cm9sQmFyIiwiZHVyYXRpb25EaXNwbGF5IiwiY3VycmVudFNvdXJjZXMiLCJjdXJyZW50VHlwZSIsInRlY2hBdXRvcGxheSIsIm5ld1Bvc3RlciIsInVzaW5nTmF0aXZlQ29udHJvbHNfIiwic3VwcHJlc3NOb3RTdXBwb3J0ZWRFcnJvciIsInRyaWdnZXJTdXBwcmVzc2VkRXJyb3IiLCJlcnJvckRpc3BsYXkiLCJ1c2VyQWN0aXZpdHlfIiwibW91c2VJblByb2dyZXNzIiwibGFzdE1vdmVYIiwibGFzdE1vdmVZIiwiaGFuZGxlQWN0aXZpdHkiLCJoYW5kbGVNb3VzZVVwQW5kTW91c2VMZWF2ZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiaXNBdWRpb18iLCJ0b0pTT04iLCJjcmVhdGVNb2RhbCIsIl90aGlzMTYiLCJtb2RhbCIsInVwZGF0ZUN1cnJlbnRCcmVha3BvaW50XyIsImN1cnJlbnRCcmVha3BvaW50IiwiY2FuZGlkYXRlQnJlYWtwb2ludCIsImJyZWFrcG9pbnRzXyIsImJyZWFrcG9pbnRfIiwicmVtb3ZlQ3VycmVudEJyZWFrcG9pbnRfIiwiY3VycmVudEJyZWFrcG9pbnRDbGFzcyIsIl9icmVha3BvaW50cyIsInJlc3BvbnNpdmVfIiwibG9hZE1lZGlhIiwiX3RoaXMxNyIsIl90aGlzJGNhY2hlXyRtZWRpYSIsImFydHdvcmsiLCJ0dCIsImdldE1lZGlhIiwiYmFzZU9wdGlvbnMiLCJ0YWdPcHRpb25zIiwiZGF0YVNldHVwIiwiX3NhZmVQYXJzZVR1cGxlIiwiY2hpbGROYW1lIiwicHJldmlvdXNMb2dMZXZlbF8iLCJodG1sNSIsImZsYXNoIiwidXNlckxhbmd1YWdlIiwibmF2aWdhdGlvblVJIiwicGx1Z2luU3RvcmFnZSIsInBsdWdpbkV4aXN0cyIsImdldFBsdWdpbiIsIm1hcmtQbHVnaW5Bc0FjdGl2ZSIsInRyaWdnZXJTZXR1cEV2ZW50IiwiYmVmb3JlIiwiUGx1Z2luU3ViQ2xhc3MiLCJwbHVnaW4iLCJnZXRFdmVudEhhc2giLCJQbHVnaW4iLCJWRVJTSU9OIiwiaXNCYXNpYyIsInJlZ2lzdGVyUGx1Z2luIiwiYmFzaWNQbHVnaW5XcmFwcGVyIiwiY3JlYXRlQmFzaWNQbHVnaW4iLCJkZXJlZ2lzdGVyUGx1Z2luIiwiZ2V0UGx1Z2lucyIsImdldFBsdWdpblZlcnNpb24iLCJCQVNFX1BMVUdJTl9OQU1FIiwiaGFzUGx1Z2luIiwibm9ybWFsaXplSWQiLCJ2aWRlb2pzJDEiLCJnZXRQbGF5ZXIiLCJkZWZhdWx0VmlldyIsImhvb2tzIiwiaG9va0Z1bmN0aW9uIiwiUGxheWVyQ29tcG9uZW50IiwiaG9va3NfIiwiaG9vayIsImhvb2tPbmNlIiwib3JpZ2luYWwiLCJyZW1vdmVIb29rIiwiZ2V0UGxheWVycyIsIm5JZCIsIl90YWciLCJfcGxheWVyIiwiZ2V0QWxsUGxheWVycyIsImNvbXAiLCJ1c2UiLCJ3cml0ZWFibGUiLCJleHRlbmQiLCJzdWJDbGFzc01ldGhvZHMiLCJtZXRob2RzIiwic3VwZXJfIiwiYWRkTGFuZ3VhZ2UiLCJfbWVyZ2VPcHRpb25zIiwiY3JlYXRlVGltZVJhbmdlIiwic2V0Rm9ybWF0VGltZSIsImN1c3RvbUltcGxlbWVudGF0aW9uIiwicmVzZXRGb3JtYXRUaW1lIiwiZG9tIiwiY3VycmVudFRyYW5zbXV4IiwicmVzb2x2ZVVybCIsInJlc29sdmVNYW5pZmVzdFJlZGlyZWN0IiwiaGFuZGxlTWFuaWZlc3RSZWRpcmVjdCIsInJlcSIsInJlc3BvbnNlVVJMIiwibG9nJDEiLCJjcmVhdGVQbGF5bGlzdElEIiwiX3JlZiRjdXN0b21UYWdQYXJzZXJzIiwiY3VzdG9tVGFnUGFyc2VycyIsIl9yZWYkY3VzdG9tVGFnTWFwcGVycyIsImN1c3RvbVRhZ01hcHBlcnMiLCJjdXN0b21QYXJzZXIiLCJmb3JFYWNoTWVkaWFHcm91cCIsIm1lZGlhVHlwZSIsImdyb3VwS2V5IiwibGFiZWxLZXkiLCJtZWRpYVByb3BlcnRpZXMiLCJzZXR1cE1lZGlhUGxheWxpc3QiLCJhZGRQcm9wZXJ0aWVzVG9NYXN0ZXIiLCJwaG9ueVVyaSIsInNldHVwTWVkaWFQbGF5bGlzdHMiLCJyZXNvbHZlTWVkaWFHcm91cFVyaXMiLCJtZXJnZU9wdGlvbnMkMSIsIkV2ZW50VGFyZ2V0JDEiLCJyZXNvbHZlU2VnbWVudFVyaXMiLCJiYXNlVXJpIiwidXBkYXRlTWFzdGVyIiwibWVyZ2VkUGxheWxpc3QiLCJ1cGRhdGVTZWdtZW50cyIsInJlZnJlc2hEZWxheSIsImxhc3RTZWdtZW50IiwiUGxheWxpc3RMb2FkZXIiLCJ2aHMiLCJfb3B0aW9ucyR3aXRoQ3JlZGVudGkiLCJfb3B0aW9ucyRoYW5kbGVNYW5pZmUiLCJoYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyIsInZoc18iLCJ2aHNPcHRpb25zIiwicGxheWxpc3RSZXF1ZXN0RXJyb3IiLCJoYXZlTWV0YWRhdGEiLCJwbGF5bGlzdFN0cmluZyIsInN0YXJ0aW5nU3RhdGUiLCJwbGF5bGlzdE9iamVjdCIsIm1lZGlhXyIsIm1lZGlhVXBkYXRlVGltZW91dCIsInN0b3BSZXF1ZXN0IiwiZmluYWxSZW5kaXRpb25UaW1lb3V0Iiwib2xkUmVxdWVzdCIsImlzRmluYWxSZW5kaXRpb24iLCJkZWxheSIsIm1lZGlhQ2hhbmdlIiwic3RhcnRlZCIsInNldHVwSW5pdGlhbFBsYXlsaXN0Iiwic3JjVXJpIiwiZmlsdGVyUmFuZ2VzIiwidGltZVJhbmdlcyIsImZpbmRSYW5nZSIsIlRJTUVfRlVER0VfRkFDVE9SIiwiZmluZE5leHRSYW5nZSIsInByaW50YWJsZVJhbmdlIiwic3RyQXJyIiwidGltZVJhbmdlc1RvQXJyYXkiLCJ0aW1lUmFuZ2VzTGlzdCIsImludGVydmFsRHVyYXRpb24iLCJlbmRTZXF1ZW5jZSIsImV4cGlyZWQiLCJiYWNrd2FyZCIsImJhY2t3YXJkRHVyYXRpb24iLCJmb3J3YXJkIiwiZm9yd2FyZER1cmF0aW9uIiwic3VtRHVyYXRpb25zIiwiZW5kSW5kZXgiLCJkdXJhdGlvbnMiLCJzYWZlTGl2ZUluZGV4IiwibGl2ZUVkZ2VQYWRkaW5nIiwibGFzdFNlZ21lbnREdXJhdGlvbiIsInNhZmVEaXN0YW5jZSIsImRpc3RhbmNlRnJvbUVuZCIsInBsYXlsaXN0RW5kIiwidXNlU2FmZUxpdmVFbmQiLCJpc0JsYWNrbGlzdGVkIiwiZXhjbHVkZVVudGlsIiwiaXNJbmNvbXBhdGlibGUiLCJpc0VuYWJsZWQiLCJibGFja2xpc3RlZCIsImlzTG93ZXN0RW5hYmxlZFJlbmRpdGlvbiIsImN1cnJlbnRCYW5kd2lkdGgiLCJNQVhfVkFMVUUiLCJQbGF5bGlzdCIsImdldE1lZGlhSW5mb0ZvclRpbWUiLCJudW1TZWdtZW50cyIsIm1lZGlhSW5kZXgiLCJpc0Rpc2FibGVkIiwiaXNBZXMiLCJlc3RpbWF0ZVNlZ21lbnRSZXF1ZXN0VGltZSIsInNlZ21lbnREdXJhdGlvbiIsImJ5dGVzUmVjZWl2ZWQiLCJ2aWRlb2pzWEhSIiwibWVyZ2VPcHRpb25zJDEkMSIsImNhbGxiYWNrV3JhcHBlciIsInJlcVJlc3BvbnNlIiwicmVzcG9uc2VUaW1lIiwicm91bmRUcmlwVGltZSIsInJlcXVlc3RUaW1lIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZWRvdXQiLCJ4aHJGYWN0b3J5IiwiWGhyRnVuY3Rpb24iLCJiZWZvcmVSZXF1ZXN0IiwiVmhzIiwibmV3T3B0aW9ucyIsIm9yaWdpbmFsQWJvcnQiLCJzZWdtZW50WGhySGVhZGVycyIsImJ5dGVyYW5nZUVuZCIsIlJhbmdlIiwidGV4dFJhbmdlIiwiZm9ybWF0SGV4U3RyaW5nIiwiZm9ybWF0QXNjaWlTdHJpbmciLCJjcmVhdGVUcmFuc2ZlcmFibGVNZXNzYWdlIiwidHJhbnNmZXJhYmxlIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpbml0U2VnbWVudElkIiwic2VnbWVudEtleUlkIiwiaGV4RHVtcCIsInV0aWxzIiwidGFnRHVtcCIsInRleHRSYW5nZXMiLCJnZXRQcm9ncmFtVGltZSIsIl9yZWYkdGltZSIsIm1hdGNoZWRTZWdtZW50Iiwic2VnbWVudEVuZCIsInZpZGVvVGltaW5nSW5mbyIsInRyYW5zbXV4ZWRQcmVzZW50YXRpb25FbmQiLCJlc3RpbWF0ZWRTdGFydCIsInRyYW5zbXV4ZWRQcmVzZW50YXRpb25TdGFydCIsImZpbmRTZWdtZW50Rm9yUGxheWVyVGltZSIsInNlZWtUaW1lIiwicHJvZ3JhbVRpbWVPYmplY3QiLCJtZWRpYVNlY29uZHMiLCJwcm9ncmFtVGltZSIsInBsYXllclRpbWUiLCJ0cmFuc211eGVyUHJlcGVuZGVkU2Vjb25kcyIsIm9mZnNldEZyb21TZWdtZW50U3RhcnQiLCJnZXRUaW1lIiwicGxheWVyVGltZVRvUHJvZ3JhbVRpbWUiLCJwcm9ncmFtRGF0ZVRpbWUiLCJ0b0lTT1N0cmluZyIsInNlZWtUb1Byb2dyYW1UaW1lIiwiX3JlZjIkcmV0cnlDb3VudCIsInJldHJ5Q291bnQiLCJzZWVrVG8iLCJfcmVmMiRwYXVzZUFmdGVyU2VlayIsInBhdXNlQWZ0ZXJTZWVrIiwidmVyaWZ5UHJvZ3JhbURhdGVUaW1lVGFncyIsImxhc3RTZWdtZW50U3RhcnQiLCJmaW5kU2VnbWVudEZvclByb2dyYW1UaW1lIiwibWVkaWFPZmZzZXQiLCJjb21wYXJpc29uVGltZVN0YW1wIiwic2VnbWVudERhdGVUaW1lIiwic2VnbWVudFRpbWVFcG9jaCIsImdldE9mZnNldEZyb21UaW1lc3RhbXAiLCJzZWVrVG9UaW1lIiwiY2FsbGJhY2tPbkNvbXBsZXRlZCIsIkV2ZW50VGFyZ2V0JDEkMSIsIm1lcmdlT3B0aW9ucyQyIiwibWFzdGVyWG1sIiwic3JjVXJsIiwidXBkYXRlTWFzdGVyJDEiLCJvbGRNYXN0ZXIiLCJuZXdNYXN0ZXIiLCJub0NoYW5nZXMiLCJwbGF5bGlzdFVwZGF0ZSIsImdyb3VwIiwiX3BsYXlsaXN0VXBkYXRlIiwiZ2VuZXJhdGVTaWR4S2V5Iiwic2lkeEluZm8iLCJzaWR4Qnl0ZVJhbmdlRW5kIiwiY29tcGFyZVNpZHhFbnRyeSIsIm9sZFNpZHhNYXBwaW5nIiwibmV3U2lkeE1hcHBpbmciLCJjdXJyZW50U2lkeEluZm8iLCJzYXZlZFNpZHhJbmZvIiwicmVxdWVzdFNpZHhfIiwibG9hZGVyIiwic2lkeFJhbmdlIiwiZmluaXNoUHJvY2Vzc2luZ0ZuIiwic2lkeFJlcXVlc3RPcHRpb25zIiwiaWQzT2Zmc2V0IiwiZmluaXNoZWQiLCJlbmRSZXF1ZXN0QW5kQ2FsbGJhY2siLCJfYnl0ZXMiLCJwcm9ncmVzc0xpc3RlbmVyIiwibmV3UGFydCIsIm92ZXJyaWRlTWltZVR5cGUiLCJ0b3RhbCIsImxvYWRlZCIsImludGVybmFsIiwiYmxhY2tsaXN0RHVyYXRpb24iLCJfc2lkeEluZm8kYnl0ZXJhbmdlIiwiRGFzaFBsYXlsaXN0TG9hZGVyIiwic3JjVXJsT3JQbGF5bGlzdCIsIm1hc3RlclBsYXlsaXN0TG9hZGVyIiwicmVmcmVzaFhtbF8iLCJyZWZyZXNoTWVkaWFfIiwibG9hZGVkUGxheWxpc3RzXyIsInNpZHhNYXBwaW5nXyIsInNldHVwQ2hpbGRMb2FkZXIiLCJtYXN0ZXJQbGF5bGlzdExvYWRlcl8iLCJjaGlsZFBsYXlsaXN0XyIsIm1pbmltdW1VcGRhdGVQZXJpb2RUaW1lb3V0XyIsIm1lZGlhUmVxdWVzdF8iLCJoYXNQZW5kaW5nUmVxdWVzdCIsInNpZHhSZXF1ZXN0RmluaXNoZWRfIiwiZG9uZUZuIiwiaGF2ZU1hc3Rlcl8iLCJtYXN0ZXJYbWxfIiwiZGF0ZSIsIm1hc3RlckxvYWRlZF8iLCJzeW5jQ2xpZW50U2VydmVyQ2xvY2tfIiwib25DbGllbnRTZXJ2ZXJDbG9ja1N5bmNfIiwiZG9uZSIsInV0Y1RpbWluZyIsImNsaWVudE9mZnNldF8iLCJzZXJ2ZXJUaW1lIiwidXBkYXRlTWFpbk1hbmlmZXN0XyIsInVwZGF0ZU1pbmltdW1VcGRhdGVQZXJpb2RUaW1lb3V0XyIsImNyZWF0ZU1VUFRpbWVvdXQiLCJtdXAiLCJ1cGRhdGVkTWFuaWZlc3QiLCJtZWRpYUdyb3VwU2lkeCIsInVwZGF0ZWRNYXN0ZXIiLCJtZWRpYUlEIiwiQ29uZmlnIiwiR09BTF9CVUZGRVJfTEVOR1RIIiwiTUFYX0dPQUxfQlVGRkVSX0xFTkdUSCIsIkJBQ0tfQlVGRkVSX0xFTkdUSCIsIkdPQUxfQlVGRkVSX0xFTkdUSF9SQVRFIiwiSU5JVElBTF9CQU5EV0lEVEgiLCJCQU5EV0lEVEhfVkFSSUFOQ0UiLCJCVUZGRVJfTE9XX1dBVEVSX0xJTkUiLCJNQVhfQlVGRkVSX0xPV19XQVRFUl9MSU5FIiwiQlVGRkVSX0xPV19XQVRFUl9MSU5FX1JBVEUiLCJzdHJpbmdUb0FycmF5QnVmZmVyIiwidHJhbnNtdXhRdWV1ZSIsInByb2Nlc3NUcmFuc211eCIsInRyYW5zbXV4ZXIiLCJhdWRpb0FwcGVuZFN0YXJ0IiwiZ29wc1RvQWxpZ25XaXRoIiwiaXNQYXJ0aWFsIiwicmVtdXgiLCJvbkRhdGEiLCJvblRyYWNrSW5mbyIsIm9uQXVkaW9UaW1pbmdJbmZvIiwib25WaWRlb1RpbWluZ0luZm8iLCJvblZpZGVvU2VnbWVudFRpbWluZ0luZm8iLCJvbklkMyIsIm9uQ2FwdGlvbnMiLCJvbkRvbmUiLCJ0cmFuc211eGVkRGF0YSIsIm9ubWVzc2FnZSIsImFjdGlvbiIsIl9ldmVudCRkYXRhJHNlZ21lbnQiLCJjYXB0aW9uU3RyZWFtcyIsInZpZGVvRnJhbWVEdHNUaW1lIiwidmlkZW9GcmFtZVB0c1RpbWUiLCJoYW5kbGVEYXRhXyIsInRyYWNrSW5mbyIsImdvcEluZm8iLCJoYW5kbGVHb3BJbmZvXyIsImF1ZGlvVGltaW5nSW5mbyIsInZpZGVvU2VnbWVudFRpbWluZ0luZm8iLCJpZDNGcmFtZSIsImRpc3BhdGNoVHlwZSIsImNhcHRpb24iLCJoYW5kbGVEb25lXyIsImRlcXVldWUiLCJwb3N0TWVzc2FnZSIsImFwcGVuZFN0YXJ0IiwicHJvY2Vzc0FjdGlvbiIsImVucXVldWVBY3Rpb24iLCJ0cmFuc211eCIsInNlZ21lbnRUcmFuc211eGVyIiwiUkVRVUVTVF9FUlJPUlMiLCJhYm9ydEFsbCIsImFjdGl2ZVhocnMiLCJoYW5kbGVFcnJvcnMiLCJ0cmFuc211eEFuZE5vdGlmeSIsInRyYWNrSW5mb0ZuIiwidGltaW5nSW5mb0ZuIiwidmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuIiwiaWQzRm4iLCJjYXB0aW9uc0ZuIiwiZGF0YUZuIiwiZm1wNFRyYWNrcyIsImlzTXV4ZWQiLCJhdWRpb1N0YXJ0Rm4iLCJhdWRpb0VuZEZuIiwidmlkZW9TdGFydEZuIiwidmlkZW9FbmRGbiIsImxhc3RSZWFjaGVkQ2hhciIsInByb2JlUmVzdWx0IiwiYmFzZVN0YXJ0VGltZSIsInRpbWVJbmZvIiwiaW5zcGVjdCIsImhhc1ZpZGVvIiwiaGFzQXVkaW8iLCJ2aWRlb1N0YXJ0IiwicHRzVGltZSIsImF1ZGlvU3RhcnQiLCJpZDNGcmFtZXMiLCJieXRlc0FzVWludDhBcnJheSIsImlzRm1wNCIsImF1ZGlvQ29kZWMiLCJ2aWRlb0NvZGVjIiwidGltaW5nSW5mbyIsImZpbmlzaExvYWRpbmciLCJsaXN0ZW5Gb3JDYXB0aW9ucyIsInRyYWNrSWRzIiwid2FpdEZvckNvbXBsZXRpb24iLCJkZWNyeXB0aW9uV29ya2VyIiwiZGlkRXJyb3IiLCJlbmRPZkFsbFJlcXVlc3RzIiwiZW5jcnlwdGVkQnl0ZXMiLCJrZXlCeXRlcyIsImRlY3J5cHRpb25IYW5kbGVyIiwicmVxdWVzdElkIiwiZGVjcnlwdGVkIiwiZW5jcnlwdGVkIiwiZGVjcnlwdFNlZ21lbnQiLCJfcmVmOCIsInByb2dyZXNzRm4iLCJoYW5kbGVQYXJ0aWFsRGF0YSIsIm5ld0J5dGVzIiwic3RhdHMiLCJwcm9ncmVzc0V2ZW50IiwiZ2V0UHJvZ3Jlc3NTdGF0cyIsImZpcnN0Qnl0ZXNSZWNlaXZlZEF0IiwibWVkaWFTZWdtZW50UmVxdWVzdCIsIl9yZWY5IiwieGhyT3B0aW9ucyIsImFib3J0Rm4iLCJrZXlYaHIiLCJlcnJvck9iaiIsImhhbmRsZUtleVJlc3BvbnNlIiwiaW5pdFNlZ21lbnRYaHIiLCJzZWdtZW50UmVxdWVzdE9wdGlvbnMiLCJ4aHJPYmplY3QiLCJzZWdtZW50WGhyIiwiZ2V0UmVxdWVzdFN0YXRzIiwiaGFuZGxlU2VnbWVudFJlc3BvbnNlIiwibG9hZGVuZFN0YXRlIiwiYWN0aXZlWGhyIiwiX3JlZjciLCJjYWxsZWRBYm9ydEZuIiwiaGFuZGxlTG9hZEVuZCIsIlRBUkdFVCIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJVUkwiLCJ3ZWJraXRVUkwiLCJtc1VSTCIsIldvcmtlciIsInNoaW1Xb3JrZXIiLCJmaWxlbmFtZSIsImZvcmNlRmFsbGJhY2siLCJvYmpVUkwiLCJjcmVhdGVTb3VyY2VPYmplY3QiLCJ3b3JrZXIiLCJ0ZXJtIiwidGVybWluYXRlIiwicmV2b2tlT2JqZWN0VVJMIiwid3JhcFRlcm1pbmF0ZSIsInNlbGZTaGltIiwiaXNUaGlzVGhyZWFkIiwidGVzdFdvcmtlciIsInRlc3RBcnJheSIsImNyZWF0ZU9iamVjdFVSTCIsIkJsb2IiLCJibG9iIiwiZ2V0QmxvYiIsIlRyYW5zbXV4V29ya2VyIiwiU3RyZWFtIiwiZGVzdGluYXRpb24iLCJmbHVzaFNvdXJjZSIsInBhcnRpYWxGbHVzaCIsImVuZFRpbWVsaW5lIiwiZGluZiIsImVzZHMiLCJmdHlwIiwibWZoZCIsIm1pbmYiLCJtb29mIiwibW9vdiIsIm12ZXgiLCJtdmhkIiwibWRpYSIsInNkdHAiLCJzdGJsIiwidHJleCIsIk1BSk9SX0JSQU5EIiwiTUlOT1JfVkVSU0lPTiIsIkFWQzFfQlJBTkQiLCJWSURFT19IRExSIiwiQVVESU9fSERMUiIsIkhETFJfVFlQRVMiLCJWTUhEIiwiU01IRCIsIkRSRUYiLCJTVENPIiwiU1RTQyIsIlNUU1oiLCJTVFRTIiwidmlkZW9TYW1wbGUiLCJhdWRpb1NhbXBsZSIsImF1ZGlvVHJ1biIsInZpZGVvVHJ1biIsInRydW5IZWFkZXIiLCJVSU5UMzJfTUFYIiwiYXZjMSIsImF2Y0MiLCJidHJ0IiwiZHJlZiIsIm1kYXQiLCJtcDRhIiwicGFzcCIsInNtaGQiLCJzdGNvIiwic3RzYyIsInN0c3oiLCJzdHRzIiwic3R5cCIsInZtaGQiLCJwYXlsb2FkIiwic2V0VWludDMyIiwiYXVkaW9vYmplY3R0eXBlIiwic2FtcGxpbmdmcmVxdWVuY3lpbmRleCIsImNoYW5uZWxjb3VudCIsInNhbXBsZXJhdGUiLCJzZXF1ZW5jZU51bWJlciIsInRyYWNrRnJhZ21lbnRzIiwiYXZjMUJveCIsInNwcyIsInBwcyIsInNlcXVlbmNlUGFyYW1ldGVyU2V0cyIsInBpY3R1cmVQYXJhbWV0ZXJTZXRzIiwicHJvZmlsZUlkYyIsInByb2ZpbGVDb21wYXRpYmlsaXR5IiwibGV2ZWxJZGMiLCJzYXJSYXRpbyIsImhTcGFjaW5nIiwidlNwYWNpbmciLCJzYW1wbGVzaXplIiwidHJhY2tGcmFnbWVudEhlYWRlciIsInRyYWNrRnJhZ21lbnREZWNvZGVUaW1lIiwidHJhY2tGcmFnbWVudFJ1biIsInNhbXBsZURlcGVuZGVuY3lUYWJsZSIsInVwcGVyV29yZEJhc2VNZWRpYURlY29kZVRpbWUiLCJsb3dlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lIiwiZHVyYXRpb25QcmVzZW50Iiwic2l6ZVByZXNlbnQiLCJmbGFnc1ByZXNlbnQiLCJieXRlc09mZmVzdCIsInNpbGVuY2UiLCJtcDRHZW5lcmF0b3IiLCJmaWxlVHlwZSIsIm1vdmllIiwic2FtcGxlRm9yRnJhbWUiLCJrZXlGcmFtZSIsImZyYW1lVXRpbHMiLCJuYWxVbml0cyIsImN1cnJlbnROYWwiLCJjdXJyZW50RnJhbWUiLCJmcmFtZXMiLCJuYWxDb3VudCIsIm5hbFVuaXRUeXBlIiwiY3VycmVudEdvcCIsImdvcHMiLCJiYXNlRGF0YU9mZnNldCIsIm5hbHNCeXRlTGVuZ3RoIiwibnVtYmVyT2ZOYWxzIiwiaGlnaFByZWZpeCIsImxvd1ByZWZpeCIsInplcm9GaWxsIiwic2lsZW5jZV8xIiwiY29uZU9mU2lsZW5jZSIsIjk2MDAwIiwiODgyMDAiLCI2NDAwMCIsIjQ4MDAwIiwiNDQxMDAiLCIzMjAwMCIsIjI0MDAwIiwiMTYwMDAiLCIxMjAwMCIsIjExMDI1IiwiODAwMCIsIm1ldGFUYWJsZSIsImFyciIsImNsb2NrIiwiY2xvY2tfMiIsImNsb2NrXzQiLCJhdWRpb0ZyYW1lVXRpbHMiLCJhdWRpb0FwcGVuZFN0YXJ0VHMiLCJ2aWRlb0Jhc2VNZWRpYURlY29kZVRpbWUiLCJiYXNlTWVkaWFEZWNvZGVUaW1lVHMiLCJmcmFtZUR1cmF0aW9uIiwic2lsZW50RnJhbWUiLCJmaXJzdEZyYW1lIiwiYXVkaW9HYXBEdXJhdGlvbiIsImF1ZGlvRmlsbEZyYW1lQ291bnQiLCJhdWRpb0ZpbGxEdXJhdGlvbiIsImFkdHNGcmFtZXMiLCJlYXJsaWVzdEFsbG93ZWREdHMiLCJtaW5TZWdtZW50RHRzIiwibWluU2VnbWVudFB0cyIsInN1bSIsInN1bUZyYW1lQnl0ZUxlbmd0aHMiLCJPTkVfU0VDT05EX0lOX1RTJDEiLCJ0cmFja0RlY29kZUluZm8iLCJtYXhTZWdtZW50RHRzIiwibWF4U2VnbWVudFB0cyIsInRpbWVsaW5lU3RhcnRJbmZvIiwiY2FwdGlvblBhY2tldFBhcnNlciIsInBheWxvYWRUeXBlIiwicGF5bG9hZFNpemUiLCJzZWkiLCJ1c2VyRGF0YSIsImNjRGF0YSIsIm5ld0xlbmd0aCIsIm5ld0RhdGEiLCJlbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXNQb3NpdGlvbnMiLCJzb3VyY2VJbmRleCIsIkNhcHRpb25TdHJlYW0iLCJjYXB0aW9uUGFja2V0c18iLCJjY1N0cmVhbXNfIiwiQ2VhNjA4U3RyZWFtIiwiY2MiLCJuZXdDYXB0aW9uUGFja2V0cyIsImVzY2FwZWRSQlNQIiwibGF0ZXN0RHRzXyIsImlnbm9yZU5leHRFcXVhbER0c18iLCJudW1TYW1lRHRzXyIsImZsdXNoQ0NTdHJlYW1zIiwiZmx1c2hUeXBlIiwiZmx1c2hTdHJlYW0iLCJpZHgiLCJwcmVzb3J0SW5kZXgiLCJkaXNwYXRjaENlYTYwOFBhY2tldCIsImFjdGl2ZUNlYTYwOENoYW5uZWxfIiwiY2NTdHJlYW0iLCJzZXRzVGV4dE9yWERTQWN0aXZlIiwic2V0c0NoYW5uZWwxQWN0aXZlIiwic2V0c0NoYW5uZWwyQWN0aXZlIiwiQ0hBUkFDVEVSX1RSQU5TTEFUSU9OIiwiZ2V0Q2hhckZyb21Db2RlIiwiUk9XUyIsImNyZWF0ZURpc3BsYXlCdWZmZXIiLCJCT1RUT01fUk9XIiwiZmllbGQiLCJkYXRhQ2hhbm5lbCIsImZpZWxkXyIsImRhdGFDaGFubmVsXyIsInNldENvbnN0YW50cyIsInN3YXAiLCJjaGFyMCIsImNoYXIxIiwibGFzdENvbnRyb2xDb2RlXyIsIlBBRERJTkdfIiwiUkVTVU1FX0NBUFRJT05fTE9BRElOR18iLCJtb2RlXyIsIkVORF9PRl9DQVBUSU9OXyIsImNsZWFyRm9ybWF0dGluZyIsImZsdXNoRGlzcGxheWVkIiwiZGlzcGxheWVkXyIsIm5vbkRpc3BsYXllZF8iLCJzdGFydFB0c18iLCJST0xMX1VQXzJfUk9XU18iLCJyb2xsVXBSb3dzXyIsInNldFJvbGxVcCIsIlJPTExfVVBfM19ST1dTXyIsIlJPTExfVVBfNF9ST1dTXyIsIkNBUlJJQUdFX1JFVFVSTl8iLCJzaGlmdFJvd3NVcF8iLCJCQUNLU1BBQ0VfIiwicm93XyIsIkVSQVNFX0RJU1BMQVlFRF9NRU1PUllfIiwiRVJBU0VfTk9OX0RJU1BMQVlFRF9NRU1PUllfIiwiUkVTVU1FX0RJUkVDVF9DQVBUSU9OSU5HXyIsImlzU3BlY2lhbENoYXJhY3RlciIsImNvbHVtbl8iLCJpc0V4dENoYXJhY3RlciIsImlzTWlkUm93Q29kZSIsImFkZEZvcm1hdHRpbmciLCJpc09mZnNldENvbnRyb2xDb2RlIiwiaXNQQUMiLCJmb3JtYXR0aW5nXyIsImlzQ29sb3JQQUMiLCJpc05vcm1hbENoYXIiLCJzdGFydFB0cyIsImVuZFB0cyIsInRvcFJvd18iLCJCQVNFXyIsIkVYVF8iLCJDT05UUk9MXyIsIk9GRlNFVF8iLCJfY2hhciIsIm5ld0Jhc2VSb3ciLCJwb3BPbiIsImJhc2VSb3ciLCJyb2xsVXAiLCJwYWludE9uIiwiY2FwdGlvblN0cmVhbSIsInN0cmVhbVR5cGVzIiwiaGFuZGxlUm9sbG92ZXIiLCJUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSIsImxhc3REVFMiLCJyZWZlcmVuY2VEVFMiLCJ0eXBlXyIsIl9NZXRhZGF0YVN0cmVhbSIsInRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtIiwicGFyc2VVdGY4IiwidGFnUGFyc2VycyIsIlRYWFgiLCJXWFhYIiwiUFJJViIsIm93bmVyIiwicHJpdmF0ZURhdGEiLCJ0YWdTaXplIiwiYnVmZmVyU2l6ZSIsImRhdGFBbGlnbm1lbnRJbmRpY2F0b3IiLCJ0aW1lU3RhbXAiLCJfVHJhbnNwb3J0UGFja2V0U3RyZWFtIiwiX1RyYW5zcG9ydFBhcnNlU3RyZWFtIiwiX0VsZW1lbnRhcnlTdHJlYW0iLCJtZXRhZGF0YVN0cmVhbSIsIlRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtJDEiLCJieXRlc0luQnVmZmVyIiwiZXZlcnl0aGluZyIsInBhcnNlUHNpIiwicGFja2V0c1dhaXRpbmdGb3JQbXQiLCJwc2kiLCJwYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yIiwicGF0Iiwic2VjdGlvbl9udW1iZXIiLCJsYXN0X3NlY3Rpb25fbnVtYmVyIiwicG10Iiwic3RyZWFtVHlwZSIsInByb2Nlc3NQZXNfIiwiU1RSRUFNX1RZUEVTIiwiaDI2NCIsImFkdHMiLCJ0aW1lZE1ldGFkYXRhIiwiZm9yY2VGbHVzaCIsInBhY2tldEZsdXNoYWJsZSIsInBhY2tldERhdGEiLCJwYWNrZXRMZW5ndGgiLCJmbHVzaFN0cmVhbXNfIiwibTJ0cyIsIlBBVF9QSUQiLCJNUDJUX1BBQ0tFVF9MRU5HVEgiLCJUcmFuc3BvcnRQYWNrZXRTdHJlYW0iLCJUcmFuc3BvcnRQYXJzZVN0cmVhbSIsIkVsZW1lbnRhcnlTdHJlYW0iLCJNZXRhZGF0YVN0cmVhbSIsIl9BZHRzU3RyZWFtIiwibTJ0c18xIiwiT05FX1NFQ09ORF9JTl9UUyQyIiwiaGFuZGxlUGFydGlhbFNlZ21lbnRzIiwiZnJhbWVOdW0iLCJmcmFtZUxlbmd0aCIsInByb3RlY3Rpb25Ta2lwQnl0ZXMiLCJmcmFtZUVuZCIsIm9sZEJ1ZmZlciIsImFkdHNGcmFtZUR1cmF0aW9uIiwiX0gyNjRTdHJlYW0iLCJfTmFsQnl0ZVN0cmVhbSIsIlBST0ZJTEVTX1dJVEhfT1BUSU9OQUxfU1BTX0RBVEEiLCJleHBHb2xvbWIiLCJ3b3JraW5nRGF0YSIsIndvcmtpbmdCeXRlc0F2YWlsYWJsZSIsIndvcmtpbmdXb3JkIiwid29ya2luZ0JpdHNBdmFpbGFibGUiLCJiaXRzQXZhaWxhYmxlIiwibG9hZFdvcmQiLCJ3b3JraW5nQnl0ZXMiLCJhdmFpbGFibGVCeXRlcyIsInNraXBCaXRzIiwic2tpcEJ5dGVzIiwicmVhZEJpdHMiLCJiaXRzIiwidmFsdSIsInNraXBMZWFkaW5nWmVyb3MiLCJsZWFkaW5nWmVyb0NvdW50Iiwic2tpcFVuc2lnbmVkRXhwR29sb21iIiwic2tpcEV4cEdvbG9tYiIsInJlYWRVbnNpZ25lZEV4cEdvbG9tYiIsImNseiIsInJlYWRFeHBHb2xvbWIiLCJyZWFkQm9vbGVhbiIsInJlYWRVbnNpZ25lZEJ5dGUiLCJzeW5jUG9pbnQiLCJzd2FwQnVmZmVyIiwiMTAwIiwiMTEwIiwiMTIyIiwiMjQ0IiwiNDQiLCI4MyIsIjg2IiwiMTE4IiwiMTI4IiwiMTM4IiwiMTM5IiwiMTM0IiwiY3VycmVudFB0cyIsImN1cnJlbnREdHMiLCJkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzIiwicmVhZFNlcXVlbmNlUGFyYW1ldGVyU2V0Iiwic2tpcFNjYWxpbmdMaXN0IiwibmFsQnl0ZVN0cmVhbSIsImV4cEdvbG9tYkRlY29kZXIiLCJsYXN0U2NhbGUiLCJuZXh0U2NhbGUiLCJjaHJvbWFGb3JtYXRJZGMiLCJwaWNPcmRlckNudFR5cGUiLCJudW1SZWZGcmFtZXNJblBpY09yZGVyQ250Q3ljbGUiLCJwaWNXaWR0aEluTWJzTWludXMxIiwicGljSGVpZ2h0SW5NYXBVbml0c01pbnVzMSIsImZyYW1lTWJzT25seUZsYWciLCJzY2FsaW5nTGlzdENvdW50IiwiZnJhbWVDcm9wTGVmdE9mZnNldCIsImZyYW1lQ3JvcFJpZ2h0T2Zmc2V0IiwiZnJhbWVDcm9wVG9wT2Zmc2V0IiwiZnJhbWVDcm9wQm90dG9tT2Zmc2V0Iiwic2FyU2NhbGUiLCJfQWFjU3RyZWFtIiwiSDI2NFN0cmVhbSIsIk5hbEJ5dGVTdHJlYW0iLCJzZXRUaW1lc3RhbXAiLCJieXRlc0xlZnQiLCJ0ZW1wTGVuZ3RoIiwiX1ZpZGVvU2VnbWVudFN0cmVhbSIsIl9BdWRpb1NlZ21lbnRTdHJlYW0iLCJfVHJhbnNtdXhlciIsIl9Db2FsZXNjZVN0cmVhbSIsImF1ZGlvUHJvcGVydGllcyIsInZpZGVvUHJvcGVydGllcyIsIkgyNjRTdHJlYW0kMSIsImlzTGlrZWx5QWFjRGF0YSQxIiwiT05FX1NFQ09ORF9JTl9UUyQzIiwiYXJyYXlFcXVhbHMiLCJnZW5lcmF0ZVZpZGVvU2VnbWVudFRpbWluZ0luZm8iLCJzdGFydER0cyIsImVuZER0cyIsInByZXBlbmRlZENvbnRlbnREdXJhdGlvbiIsInNldEVhcmxpZXN0RHRzIiwiZWFybGllc3REdHMiLCJzZXRWaWRlb0Jhc2VNZWRpYURlY29kZVRpbWUiLCJzZXRBdWRpb0FwcGVuZFN0YXJ0IiwibWluUFRTIiwiZ29wQ2FjaGVfIiwibmFsVW5pdCIsImdvcEZvckZ1c2lvbiIsImZpcnN0R29wIiwibGFzdEdvcCIsInJlc2V0U3RyZWFtXyIsImdldEdvcEZvckZ1c2lvbl8iLCJhbGlnbmVkR29wcyIsImFsaWduR29wc0F0RW5kIiwiYWxpZ25Hb3BzQXRFbmRfIiwiYWxpZ25Hb3BzQXRTdGFydF8iLCJnb3AiLCJkdHNEaXN0YW5jZSIsIm5lYXJlc3RHb3BPYmoiLCJjdXJyZW50R29wT2JqIiwibmVhcmVzdERpc3RhbmNlIiwiYWxpZ25JbmRleCIsImdvcEluZGV4IiwiYWxpZ25FbmRJbmRleCIsIm1hdGNoRm91bmQiLCJ0cmltSW5kZXgiLCJhbGlnbkdvcHNXaXRoIiwibmV3R29wc1RvQWxpZ25XaXRoIiwibnVtYmVyT2ZUcmFja3MiLCJyZW11eFRyYWNrcyIsInBlbmRpbmdUcmFja3MiLCJ2aWRlb1RyYWNrIiwicGVuZGluZ0JveGVzIiwicGVuZGluZ0NhcHRpb25zIiwicGVuZGluZ01ldGFkYXRhIiwicGVuZGluZ0J5dGVzIiwiZW1pdHRlZFRyYWNrcyIsIm91dHB1dCIsImF1ZGlvVHJhY2siLCJpZDMiLCJjdWVUaW1lIiwic2V0UmVtdXgiLCJoYXNGbHVzaGVkIiwidHJhbnNtdXhQaXBlbGluZV8iLCJzZXR1cEFhY1BpcGVsaW5lIiwicGlwZWxpbmUiLCJhYWNTdHJlYW0iLCJhdWRpb1RpbWVzdGFtcFJvbGxvdmVyU3RyZWFtIiwidGltZWRNZXRhZGF0YVRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtIiwiYWR0c1N0cmVhbSIsImNvYWxlc2NlU3RyZWFtIiwiaGVhZE9mUGlwZWxpbmUiLCJhdWRpb1NlZ21lbnRTdHJlYW0iLCJzZXR1cFRzUGlwZWxpbmUiLCJwYWNrZXRTdHJlYW0iLCJlbGVtZW50YXJ5U3RyZWFtIiwiaDI2NFN0cmVhbSIsInZpZGVvU2VnbWVudFN0cmVhbSIsInNldEJhc2VNZWRpYURlY29kZVRpbWUiLCJpc0FhYyIsInJlc2V0Q2FwdGlvbnMiLCJ0cmFuc211eGVyXzEiLCJUcmFuc211eGVyIiwiVmlkZW9TZWdtZW50U3RyZWFtIiwiQXVkaW9TZWdtZW50U3RyZWFtIiwiQVVESU9fUFJPUEVSVElFUyIsIlZJREVPX1BST1BFUlRJRVMiLCJBZHRzIiwiT05FX1NFQ09ORF9JTl9UUyQ0IiwiQXVkaW9TZWdtZW50U3RyZWFtJDEiLCJzZWdtZW50U3RhcnRQdHMiLCJzZWdtZW50RW5kUHRzIiwicHJvY2Vzc0ZyYW1lc18iLCJyZXNldFRpbWluZ18iLCJWaWRlb1NlZ21lbnRTdHJlYW0kMSIsImZyYW1lQ2FjaGUiLCJlbnN1cmVOZXh0RnJhbWVJc0tleUZyYW1lIiwicHJvY2Vzc05hbHNfIiwiY2FjaGVMYXN0RnJhbWUiLCJzZXF1ZW5jZSIsInZpZGVvRnJhbWVEdHMiLCJ2aWRlb0ZyYW1lUHRzIiwicmVzZXRUaW1pbmdBbmRDb25maWdfIiwiaXNMaWtlbHlBYWNEYXRhJDIiLCJjcmVhdGVQaXBlbGluZSIsInNldHVwUGlwZWxpbmVMaXN0ZW5lcnMiLCJUcmFuc211eGVyJDEiLCJlbGVtZW50YXJ5IiwidGltZXN0YW1wUm9sbG92ZXIiLCJ0c1BpcGVsaW5lIiwiYXVkaW9Sb2xsb3ZlciIsInRpbWVkTWV0YWRhdGFSb2xsb3ZlciIsImFhY1BpcGVsaW5lIiwidHJhbnNtdXhlciQxIiwiYmluIiwicGFyc2VUeXBlXzEiLCJ0b1Vuc2lnbmVkJDEiLCJmaW5kQm94XzEiLCJ0b1Vuc2lnbmVkJDIiLCJwYXJzZVNhbXBsZUZsYWdzXzEiLCJiYXNlRGF0YU9mZnNldFByZXNlbnQiLCJzYW1wbGVEZXNjcmlwdGlvbkluZGV4UHJlc2VudCIsImRlZmF1bHRTYW1wbGVEdXJhdGlvblByZXNlbnQiLCJkZWZhdWx0U2FtcGxlU2l6ZVByZXNlbnQiLCJkZWZhdWx0U2FtcGxlRmxhZ3NQcmVzZW50IiwiZHVyYXRpb25Jc0VtcHR5IiwiZGVmYXVsdEJhc2VJc01vb2YiLCJzYW1wbGVEZXNjcmlwdGlvbkluZGV4IiwiZGVmYXVsdFNhbXBsZUR1cmF0aW9uIiwiZGVmYXVsdFNhbXBsZVNpemUiLCJkZWZhdWx0U2FtcGxlRmxhZ3MiLCJiYXNlRGF0YU9mZnNldElzTW9vZiIsImRpc2NhcmRFbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXMkMSIsIkNhcHRpb25TdHJlYW0kMSIsIm1hcFRvU2FtcGxlIiwiYXBwcm94aW1hdGVPZmZzZXQiLCJwYXJzZUNhcHRpb25OYWxzIiwidmlkZW9UcmFja0lkIiwibWRhdHMiLCJjYXB0aW9uTmFscyIsIm1kYXRUcmFmUGFpcnMiLCJtYXRjaGluZ1RyYWYiLCJwYWlyIiwic2VpTmFscyIsImhlYWRlckluZm8iLCJ0cnVucyIsImF2Y1N0cmVhbSIsInNlaU5hbCIsImxhc3RNYXRjaGVkU2FtcGxlIiwiYXZjVmlldyIsIm1hdGNoaW5nU2FtcGxlIiwiZmluZFNlaU5hbHMiLCJhbGxTYW1wbGVzIiwicGFyc2VTYW1wbGVzIiwiY2FwdGlvblBhcnNlciIsInNlZ21lbnRDYWNoZSIsInBhcnNlZENhcHRpb25zIiwicGFyc2luZ1BhcnRpYWwiLCJpc0luaXRpYWxpemVkIiwiaXNOZXdJbml0IiwicGFyc2VkRGF0YSIsImNhY2hlZFNlZ21lbnQiLCJwYXJzZUVtYmVkZGVkQ2FwdGlvbnMiLCJwdXNoTmFscyIsIm5hbHMiLCJuYWwiLCJjbGVhclBhcnNlZENhcHRpb25zIiwicmVzZXRDYXB0aW9uU3RyZWFtIiwiY2xlYXJBbGxDYXB0aW9ucyIsInR5cGVGcm9tU3RyZWFtU3RyaW5nIiwic3RyZWFtU3RyaW5nIiwiTWVzc2FnZUhhbmRsZXJzIiwidGltaW5nSW5mb0luU2Vjb25kcyIsIndpcmVQYXJ0aWFsVHJhbnNtdXhlckV2ZW50cyIsImluaXRBcnJheSIsInR5cGVkQXJyYXkiLCJwcmVzZW50YXRpb24iLCJ3aXJlRnVsbFRyYW5zbXV4ZXJFdmVudHMiLCJwdXNoTXA0Q2FwdGlvbnMiLCJwYXJzZWQiLCJjbGVhckFsbE1wNENhcHRpb25zIiwiY2xlYXJQYXJzZWRNcDRDYXB0aW9ucyIsInNldFRpbWVzdGFtcE9mZnNldCIsInRpbWVzdGFtcE9mZnNldCIsIm1lc3NhZ2VIYW5kbGVycyIsImlzTWFhdCIsIm1lZGlhQXR0cmlidXRlcyIsImNvZGVjSW5mbyIsImdyb3VwSWQiLCJkZWZhdWx0Q29kZWNzIiwibG9nZ2VyIiwibG9nRm4iLCJyZXByZXNlbnRhdGlvblRvU3RyaW5nIiwicHJvcGVydHkiLCJzdGFibGVTb3J0Iiwic29ydEZuIiwibmV3QXJyYXkiLCJjbXAiLCJsZWZ0QmFuZHdpZHRoIiwicmlnaHRCYW5kd2lkdGgiLCJpbmJhbmRUZXh0VHJhY2tzIiwibWV0YWRhdGFBcnJheSIsInZpZGVvRHVyYXRpb24iLCJDdWUiLCJXZWJLaXREYXRhQ3VlIiwibWV0YWRhdGFUcmFjayIsIm1ldGFkYXRhVHJhY2tfIiwiZGVwcmVjYXRlT2xkQ3VlIiwiY3Vlc0FycmF5IiwiY3Vlc0dyb3VwZWRCeVN0YXJ0VGltZSIsInRpbWVTbG90Iiwic29ydGVkU3RhcnRUaW1lcyIsImN1ZUdyb3VwIiwibmV4dFRpbWUiLCJyZW1vdmVDdWVzRnJvbVRyYWNrIiwiZmluaXRlIiwidGltaW5nSW5mb1Byb3BlcnR5Rm9yTWVkaWEiLCJ0aW1lc3RhbXBPZmZzZXRGb3JTZWdtZW50Iiwic3RhcnRPZlNlZ21lbnQiLCJvdmVycmlkZUNoZWNrIiwic2hvdWxkV2FpdEZvclRpbWVsaW5lQ2hhbmdlIiwidGltZWxpbmVDaGFuZ2VDb250cm9sbGVyIiwibG9hZGVyVHlwZSIsImF1ZGlvRGlzYWJsZWQiLCJsYXN0TWFpblRpbWVsaW5lQ2hhbmdlIiwibGFzdFRpbWVsaW5lQ2hhbmdlIiwicGVuZGluZ0F1ZGlvVGltZWxpbmVDaGFuZ2UiLCJwZW5kaW5nVGltZWxpbmVDaGFuZ2UiLCJfdmlkZW9qcyRFdmVudFRhcmdldCIsIlNlZ21lbnRMb2FkZXIiLCJtZWRpYVNvdXJjZSIsInRocm91Z2hwdXQiLCJyb3VuZFRyaXAiLCJyZXNldFN0YXRzXyIsImhhc1BsYXllZF8iLCJoYXNQbGF5ZWQiLCJzZWVrYWJsZV8iLCJzZWVraW5nXyIsIm1lZGlhU291cmNlXyIsImxvYWRlclR5cGVfIiwiY3VycmVudE1lZGlhSW5mb18iLCJzdGFydGluZ01lZGlhSW5mb18iLCJzZWdtZW50TWV0YWRhdGFUcmFja18iLCJzZWdtZW50TWV0YWRhdGFUcmFjayIsImdvYWxCdWZmZXJMZW5ndGhfIiwiZ29hbEJ1ZmZlckxlbmd0aCIsInNvdXJjZVR5cGVfIiwic291cmNlVHlwZSIsInNvdXJjZVVwZGF0ZXJfIiwic291cmNlVXBkYXRlciIsImluYmFuZFRleHRUcmFja3NfIiwic3RhdGVfIiwiaGFuZGxlUGFydGlhbERhdGFfIiwidGltZWxpbmVDaGFuZ2VDb250cm9sbGVyXyIsInNob3VsZFNhdmVTZWdtZW50VGltaW5nSW5mb18iLCJjaGVja0J1ZmZlclRpbWVvdXRfIiwiY3VycmVudFRpbWVsaW5lXyIsInBlbmRpbmdTZWdtZW50XyIsInhock9wdGlvbnNfIiwicGVuZGluZ1NlZ21lbnRzXyIsImF1ZGlvRGlzYWJsZWRfIiwiaXNQZW5kaW5nVGltZXN0YW1wT2Zmc2V0XyIsImdvcEJ1ZmZlcl8iLCJ0aW1lTWFwcGluZ18iLCJzYWZlQXBwZW5kXyIsImFwcGVuZEluaXRTZWdtZW50XyIsInBsYXlsaXN0T2ZMYXN0SW5pdFNlZ21lbnRfIiwiY2FsbFF1ZXVlXyIsImxvYWRRdWV1ZV8iLCJtZXRhZGF0YVF1ZXVlXyIsImFjdGl2ZUluaXRTZWdtZW50SWRfIiwiaW5pdFNlZ21lbnRzXyIsImNhY2hlRW5jcnlwdGlvbktleXNfIiwiY2FjaGVFbmNyeXB0aW9uS2V5cyIsImtleUNhY2hlXyIsImRlY3J5cHRlcl8iLCJkZWNyeXB0ZXIiLCJzeW5jQ29udHJvbGxlcl8iLCJzeW5jQ29udHJvbGxlciIsInN5bmNQb2ludF8iLCJzZWdtZW50SW5kZXgiLCJ0cmFuc211eGVyXyIsImNyZWF0ZVRyYW5zbXV4ZXJfIiwidHJpZ2dlclN5bmNJbmZvVXBkYXRlXyIsImlzRW5kT2ZTdHJlYW1fIiwiZW5kZWRfIiwiZmV0Y2hBdEJ1ZmZlcl8iLCJsb2dnZXJfIiwibmV3U3RhdGUiLCJoYXNFbm91Z2hJbmZvVG9BcHBlbmRfIiwicHJvY2Vzc0NhbGxRdWV1ZV8iLCJoYXNFbm91Z2hJbmZvVG9Mb2FkXyIsInByb2Nlc3NMb2FkUXVldWVfIiwibWVkaWFCeXRlc1RyYW5zZmVycmVkIiwibWVkaWFSZXF1ZXN0cyIsIm1lZGlhUmVxdWVzdHNBYm9ydGVkIiwibWVkaWFSZXF1ZXN0c1RpbWVkb3V0IiwibWVkaWFSZXF1ZXN0c0Vycm9yZWQiLCJtZWRpYVRyYW5zZmVyRHVyYXRpb24iLCJtZWRpYVNlY29uZHNMb2FkZWQiLCJhYm9ydF8iLCJzZXRBdWRpbyIsInJlbW92ZUF1ZGlvIiwibW9uaXRvckJ1ZmZlcl8iLCJhYm9ydFJlcXVlc3RzIiwiY2xlYXJQZW5kaW5nVGltZWxpbmVDaGFuZ2UiLCJjaGVja0ZvckFib3J0XyIsIl9lcnJvciIsImVuZE9mU3RyZWFtIiwiYnVmZmVyZWRfIiwiX3RoaXMkc3RhcnRpbmdNZWRpYUluIiwidmlkZW9CdWZmZXJlZCIsImF1ZGlvQnVmZmVyZWQiLCJpbml0U2VnbWVudEZvck1hcCIsInN0b3JlZE1hcCIsInNlZ21lbnRLZXkiLCJzdG9yZWRLZXkiLCJjb3VsZEJlZ2luTG9hZGluZ18iLCJwbGF5bGlzdF8iLCJzZXREYXRlVGltZU1hcHBpbmciLCJpbml0XyIsInJlc2V0RXZlcnl0aGluZyIsIm5ld1BsYXlsaXN0Iiwib2xkUGxheWxpc3QiLCJzeW5jSW5mbyIsIm9sZElkIiwicmVzeW5jTG9hZGVyIiwibWVkaWFTZXF1ZW5jZURpZmYiLCJzYXZlRXhwaXJlZFNlZ21lbnRJbmZvIiwicmVzZXRMb2FkZXIiLCJyZW1vdmVzUmVtYWluaW5nIiwicmVtb3ZlRmluaXNoZWQiLCJtYXBwaW5nIiwidXBkYXRlZEJ1ZmZlciIsInJlbW92ZVZpZGVvIiwibW9uaXRvckJ1ZmZlclRpY2tfIiwiZmlsbEJ1ZmZlcl8iLCJ1cGRhdGluZyIsImdldFN5bmNQb2ludCIsImNoZWNrQnVmZmVyXyIsImxvYWRTZWdtZW50XyIsImFwcGVuZGVkTGFzdFNlZ21lbnQiLCJjdXJyZW50TWVkaWFJbmRleCIsImxhc3RCdWZmZXJlZEVuZCIsImJ1ZmZlcmVkVGltZSIsIm5leHRNZWRpYUluZGV4IiwiaXNTeW5jUmVxdWVzdCIsImdldFN5bmNTZWdtZW50Q2FuZGlkYXRlXyIsIm1lZGlhU291cmNlSW5mbyIsIl9tZWRpYVNvdXJjZUluZm8iLCJnZW5lcmF0ZVNlZ21lbnRJbmZvXyIsInNlZ21lbnRJbmRleEFycmF5IiwiYXVkaW9UaW1lc3RhbXBPZmZzZXQiLCJjdXJyZW50VGltZVB0cyIsInZpZGVvVGltZXN0YW1wT2Zmc2V0IiwicmFuZG9tIiwiYWJvcnRSZXF1ZXN0RWFybHlfIiwibWVhc3VyZWRCYW5kd2lkdGgiLCJyZXF1ZXN0VGltZVJlbWFpbmluZyIsInRpbWVVbnRpbFJlYnVmZmVyJDEiLCJ0aW1lVW50aWxSZWJ1ZmZlciIsInN3aXRjaENhbmRpZGF0ZSIsImNvbXBhdGlibGVQbGF5bGlzdHMiLCJlbmFibGVkUGxheWxpc3RzIiwicmVidWZmZXJpbmdFc3RpbWF0ZXMiLCJudW1SZXF1ZXN0cyIsInJlYnVmZmVyaW5nSW1wYWN0Iiwibm9SZWJ1ZmZlcmluZ1BsYXlsaXN0cyIsImVzdGltYXRlIiwibWluUmVidWZmZXJNYXhCYW5kd2lkdGhTZWxlY3RvciIsInRpbWVTYXZlZEJ5U3dpdGNoaW5nIiwibWluaW11bVRpbWVTYXZpbmciLCJoYW5kbGVBYm9ydF8iLCJoYW5kbGVQcm9ncmVzc18iLCJzaW1wbGVTZWdtZW50IiwiaGFuZGxlVHJhY2tJbmZvXyIsImNoZWNrRm9ySWxsZWdhbE1lZGlhU3dpdGNoIiwiYWtleXMiLCJia2V5cyIsInNoYWxsb3dFcXVhbCIsImhhbmRsZVRpbWluZ0luZm9fIiwidGltZVR5cGUiLCJ0aW1pbmdJbmZvUHJvcGVydHkiLCJoYW5kbGVDYXB0aW9uc18iLCJjYXB0aW9uRGF0YSIsImhhc0FwcGVuZGVkRGF0YV8iLCJjYXB0aW9uVHJhY2tzIiwiY2FwdGlvblRyYWNrIiwidHJhY2tOYW1lIiwiX2NhcHRpb25UcmFja3MkdHJhY2tOIiwiY3JlYXRlQ2FwdGlvbnNUcmFja0lmTm90RXhpc3RzIiwiY2FwdGlvbkFycmF5IiwiaGFuZGxlSWQzXyIsImluQmFuZE1ldGFkYXRhVHJhY2tEaXNwYXRjaFR5cGUiLCJjcmVhdGVNZXRhZGF0YVRyYWNrSWZOb3RFeGlzdHMiLCJwcm9jZXNzTWV0YWRhdGFRdWV1ZV8iLCJjYWxsUXVldWUiLCJmdW4iLCJsb2FkUXVldWUiLCJfdGhpcyRjdXJyZW50TWVkaWFJbmYiLCJzZXRUaW1lTWFwcGluZ18iLCJ1cGRhdGVNZWRpYVNlY29uZHNMb2FkZWRfIiwiZmlyc3RWaWRlb0ZyYW1lVGltZUZvckRhdGEiLCJ1c2VWaWRlb1RpbWluZ0luZm8iLCJ0cnVlU2VnbWVudFN0YXJ0XyIsImN1cnJlbnRTdGFydCIsImN1cnJlbnRWaWRlb1RpbWVzdGFtcE9mZnNldCIsInVwZGF0ZUFwcGVuZEluaXRTZWdtZW50U3RhdHVzIiwidXBkYXRlU291cmNlQnVmZmVyVGltZXN0YW1wT2Zmc2V0XyIsImFwcGVuZERhdGFfIiwiY2hhbmdlZFRpbWVzdGFtcE9mZnNldCIsImdldEluaXRTZWdtZW50QW5kVXBkYXRlU3RhdGVfIiwiYXBwZW5kVG9Tb3VyY2VCdWZmZXJfIiwic2VnbWVudE9iaiIsInRlbXBCdWZmZXIiLCJhcHBlbmRCdWZmZXIiLCJoYW5kbGVWaWRlb1NlZ21lbnRUaW1pbmdJbmZvXyIsInRyaW1CYWNrQnVmZmVyXyIsInVwZGF0ZVRyYW5zbXV4ZXJBbmRSZXF1ZXN0U2VnbWVudF8iLCJzaG91bGRVcGRhdGVUcmFuc211eGVyVGltZXN0YW1wT2Zmc2V0XyIsImNyZWF0ZVNpbXBsaWZpZWRTZWdtZW50T2JqXyIsInNlZ21lbnRSZXF1ZXN0RmluaXNoZWRfIiwicmVtb3ZlVG9UaW1lIiwidHJpbVRpbWUiLCJtYXhUcmltVGltZSIsInNhZmVCYWNrQnVmZmVyVHJpbVRpbWUiLCJwcmV2aW91c1NlZ21lbnQiLCJzYXZlVHJhbnNmZXJTdGF0c18iLCJzYXZlQmFuZHdpZHRoUmVsYXRlZFN0YXRzXyIsImhhbmRsZVRpbWVvdXRfIiwidXBkYXRlR29wQnVmZmVyIiwiaXNFbmRPZlN0cmVhbSIsImlzV2Fsa2luZ0ZvcndhcmQiLCJpc0Rpc2NvbnRpbnVpdHkiLCJ3YWl0Rm9yQXBwZW5kc1RvQ29tcGxldGVfIiwidGltZWxpbmVNYXBwaW5nIiwibWFwcGluZ0ZvclRpbWVsaW5lIiwiX3RoaXMkY3VycmVudE1lZGlhSW5mMiIsIndhaXRGb3JWaWRlbyIsIndhaXRGb3JBdWRpbyIsIndhaXRpbmdPbkFwcGVuZHMiLCJjaGVja0FwcGVuZHNEb25lXyIsInZpZGVvUXVldWVDYWxsYmFjayIsImF1ZGlvUXVldWVDYWxsYmFjayIsImhhbmRsZUFwcGVuZHNEb25lXyIsImlsbGVnYWxNZWRpYVN3aXRjaEVycm9yIiwic3RhcnRpbmdNZWRpYSIsImlsbGVnYWxNZWRpYVN3aXRjaCIsImRpZENoYW5nZSIsInVwZGF0ZVRpbWluZ0luZm9FbmRfIiwicHJpb3JpdGl6ZWRUaW1pbmdJbmZvIiwic2F2ZVNlZ21lbnRUaW1pbmdJbmZvIiwic2hvdWxkU2F2ZVRpbWVsaW5lTWFwcGluZyIsIl9zZWdtZW50SW5mbyRzZWdtZW50IiwiX3NlZ21lbnRJbmZvJHBsYXlsaXN0Iiwic2VxIiwiX3NlZ21lbnRJbmZvJHBsYXlsaXN0MiIsInNlZ21lbnRJbmZvU3RyaW5nIiwicmVjb3JkVGhyb3VnaHB1dF8iLCJhZGRTZWdtZW50TWV0YWRhdGFDdWVfIiwic2VnbWVudFByb2Nlc3NpbmdUaW1lIiwic2VnbWVudFByb2Nlc3NpbmdUaHJvdWdocHV0IiwidG9UaXRsZUNhc2UkMSIsImJ1ZmZlclR5cGVzIiwiX3VwZGF0aW5nIiwic291cmNlQnVmZmVyIiwicXVldWVQZW5kaW5nIiwic2hpZnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJxdWV1ZUVudHJ5Iiwic3RhcnRlZF8iLCJuZXh0UXVldWVJbmRleE9mVHlwZSIsImNsZWFudXBCdWZmZXIiLCJ0aXRsZVR5cGUiLCJpblNvdXJjZUJ1ZmZlcnMiLCJzb3VyY2VCdWZmZXJzIiwiYWN0aW9ucyIsIl9jYWxsYmFjayIsIl9kdXJhdGlvbiIsIm1pbWUiLCJhZGRTb3VyY2VCdWZmZXIiLCJyZW1vdmVTb3VyY2VCdWZmZXIiLCJjaGFuZ2VUeXBlIiwicHVzaFF1ZXVlIiwib25VcGRhdGVlbmQiLCJTb3VyY2VVcGRhdGVyIiwic291cmNlb3Blbkxpc3RlbmVyXyIsImF1ZGlvVGltZXN0YW1wT2Zmc2V0XyIsInZpZGVvVGltZXN0YW1wT2Zmc2V0XyIsImRlbGF5ZWRBdWRpb0FwcGVuZFF1ZXVlXyIsInZpZGVvQXBwZW5kUXVldWVkXyIsIm9uVmlkZW9VcGRhdGVFbmRfIiwib25BdWRpb1VwZGF0ZUVuZF8iLCJvblZpZGVvRXJyb3JfIiwidmlkZW9FcnJvcl8iLCJvbkF1ZGlvRXJyb3JfIiwiYXVkaW9FcnJvcl8iLCJjcmVhdGVTb3VyY2VCdWZmZXJzIiwiYWRkT3JDaGFuZ2VTb3VyY2VCdWZmZXJzIiwiY2FuUmVtb3ZlU291cmNlQnVmZmVyIiwiY2FuQ2hhbmdlVHlwZSIsIlNvdXJjZUJ1ZmZlciIsInByb2Nlc3NlZEFwcGVuZF8iLCJ2aWRlb0J1ZmZlciIsInF1ZSIsImF1ZGlvQnVmZmVyIiwiYnVmZmVyQSIsImJ1ZmZlckIiLCJhcml0eSIsImV4dGVudHMiLCJidWZmZXJJbnRlcnNlY3Rpb24iLCJzZXREdXJhdGlvbiIsInVpbnQ4VG9VdGY4IiwidWludEFycmF5IiwiVlRUX0xJTkVfVEVSTUlOQVRPUlMiLCJfY2hhcjIiLCJfU2VnbWVudExvYWRlciIsIlZUVFNlZ21lbnRMb2FkZXIiLCJzdWJ0aXRsZXNUcmFja18iLCJmZWF0dXJlc05hdGl2ZVRleHRUcmFja3NfIiwiY29tYmluZWRCeXRlTGVuZ3RoIiwiY29tYmluZWRTZWdtZW50Iiwic2tpcEVtcHR5U2VnbWVudHNfIiwidGltZXN0YW1wT2Zmc2V0Rm9yVGltZWxpbmUiLCJzdG9wRm9yRXJyb3IiLCJsb2FkSGFuZGxlciIsInJlcXVlc3RlZCIsInBhcnNlVlRUQ3Vlc18iLCJ1cGRhdGVUaW1lTWFwcGluZ18iLCJ0aW1lbGluZXMiLCJkZWNvZGVCeXRlc1RvU3RyaW5nIiwidGltZXN0YW1wbWFwIiwiTVBFR1RTIiwiTE9DQUwiLCJtYXBEYXRhIiwic2VnbWVudERhdGEiLCJtYXBwaW5nT2JqIiwiZGlmZiIsImZpcnN0U3RhcnQiLCJsYXN0U3RhcnQiLCJmaW5kQWRDdWUiLCJtZWRpYVRpbWUiLCJhZFN0YXJ0VGltZSIsImFkRW5kVGltZSIsInN5bmNQb2ludFN0cmF0ZWdpZXMiLCJydW4iLCJkYXRldGltZVRvRGlzcGxheVRpbWUiLCJsYXN0RGlzdGFuY2UiLCJzZWdtZW50U3RhcnQiLCJkaXNjb250aW51aXR5U3luYyIsImRpc2NvbnRpbnVpdGllcyIsIlN5bmNDb250cm9sbGVyIiwic3luY1BvaW50cyIsInJ1blN0cmF0ZWdpZXNfIiwic2VsZWN0U3luY1BvaW50XyIsImdldEV4cGlyZWRUaW1lIiwic3RyYXRlZ3kiLCJiZXN0U3luY1BvaW50IiwiYmVzdERpc3RhbmNlIiwiYmVzdFN0cmF0ZWd5IiwibmV3RGlzdGFuY2UiLCJsYXN0UmVtb3ZlZFNlZ21lbnQiLCJwbGF5bGlzdFRpbWVzdGFtcCIsImNhbGN1bGF0ZVNlZ21lbnRUaW1lTWFwcGluZ18iLCJzYXZlRGlzY29udGludWl0eVN5bmNJbmZvXyIsImFjY3VyYWN5IiwibWVkaWFJbmRleERpZmYiLCJUaW1lbGluZUNoYW5nZUNvbnRyb2xsZXIiLCJwZW5kaW5nVGltZWxpbmVDaGFuZ2VzXyIsImxhc3RUaW1lbGluZUNoYW5nZXNfIiwiRGVjcnlwdGVyIiwiX2RlZmluZVByb3BlcnRpZXMiLCJjcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiaW5oZXJpdHNMb29zZSIsIl9sZW5ndGgiLCJhZXNUYWJsZXMiLCJBRVMiLCJ0bXAiLCJ4SW52IiwieDIiLCJ4NCIsInRFbmMiLCJ0RGVjIiwidGFibGVzIiwiZW5jVGFibGUiLCJkZWNUYWJsZSIsInNib3giLCJzYm94SW52IiwidGgiLCJwcmVjb21wdXRlIiwiX3RhYmxlcyIsImtleUxlbiIsInJjb24iLCJlbmNLZXkiLCJkZWNLZXkiLCJkZWNyeXB0IiwiZW5jcnlwdGVkMCIsImVuY3J5cHRlZDEiLCJlbmNyeXB0ZWQyIiwiZW5jcnlwdGVkMyIsIm91dCIsImEyIiwiYzIiLCJuSW5uZXJSb3VuZHMiLCJrSW5kZXgiLCJ0YWJsZSIsInRhYmxlMCIsInRhYmxlMSIsInRhYmxlMiIsInRhYmxlMyIsIkFzeW5jU3RyZWFtIiwiam9icyIsInRpbWVvdXRfIiwicHJvY2Vzc0pvYl8iLCJqb2IiLCJudG9oIiwid29yZCIsImluaXRWZWN0b3IiLCJTVEVQIiwiZW5jcnlwdGVkMzIiLCJJbnQzMkFycmF5IiwiYXN5bmNTdHJlYW1fIiwiZGVjcnlwdENodW5rXyIsInBhZGRlZCIsImluaXQwIiwiaW5pdDEiLCJpbml0MiIsImluaXQzIiwid29yZEl4IiwiZGVjaXBoZXIiLCJkZWNyeXB0ZWQzMiIsImF1ZGlvVHJhY2tLaW5kXyIsInN0b3BMb2FkZXJzIiwic2VnbWVudExvYWRlciIsImFjdGl2ZVBsYXlsaXN0TG9hZGVyIiwic3RhcnRMb2FkZXJzIiwicGxheWxpc3RMb2FkZXIiLCJvbkVycm9yIiwic2VnbWVudExvYWRlcnMiLCJtZWRpYVR5cGVzIiwiYmxhY2tsaXN0Q3VycmVudFBsYXlsaXN0IiwiYWN0aXZlVHJhY2siLCJhY3RpdmVHcm91cCIsImRlZmF1bHRUcmFjayIsIm9uVHJhY2tDaGFuZ2VkIiwic2V0dXBMaXN0ZW5lcnMiLCJyZXF1ZXN0T3B0aW9ucyIsImluaXRpYWxpemUiLCJfc2V0dGluZ3MkbWFzdGVyIiwiX3NldHRpbmdzJG1lZGlhVHlwZXMkIiwiZ3JvdXBQbGF5bGlzdHMiLCJfbG9vcDIiLCJ2YXJpYW50TGFiZWwiLCJfc2V0dGluZ3MkbWVkaWFUeXBlcyQyIiwiX3NldHRpbmdzJG1lZGlhVHlwZXMkMyIsInNldHVwTWVkaWFHcm91cHMiLCJ2YXJpYW50cyIsIm9uR3JvdXBDaGFuZ2VkIiwiX3NldHRpbmdzJHNlZ21lbnRMb2FkIiwibWFpblNlZ21lbnRMb2FkZXIiLCJwcmV2aW91c0FjdGl2ZUxvYWRlciIsIm9uR3JvdXBDaGFuZ2luZyIsIl9zZXR0aW5ncyRzZWdtZW50TG9hZDIiLCJvbkF1ZGlvVHJhY2tDaGFuZ2VkIiwibG9hZGVyU3RhdHMiLCJzdW1Mb2FkZXJTdGF0Iiwic3RhdCIsImF1ZGlvU2VnbWVudExvYWRlcl8iLCJtYWluU2VnbWVudExvYWRlcl8iLCJNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXIiLCJleHRlcm5WaHMiLCJ1c2VDdWVUYWdzIiwiZW5hYmxlTG93SW5pdGlhbFBsYXlsaXN0IiwidXNlQ3VlVGFnc18iLCJjdWVUYWdzVHJhY2tfIiwicmVxdWVzdE9wdGlvbnNfIiwicGF1c2VMb2FkaW5nIiwibWVkaWFUeXBlc18iLCJoYW5kbGVEdXJhdGlvbkNoYW5nZV8iLCJoYW5kbGVTb3VyY2VPcGVuXyIsImhhbmRsZVNvdXJjZUVuZGVkXyIsInNlZ21lbnRMb2FkZXJTZXR0aW5ncyIsInNldHVwTWFzdGVyUGxheWxpc3RMb2FkZXJMaXN0ZW5lcnNfIiwic3VidGl0bGVTZWdtZW50TG9hZGVyXyIsInNldHVwU2VnbWVudExvYWRlckxpc3RlbmVyc18iLCJ0cmlnZ2VyZWRGbXA0VXNhZ2UiLCJyZXF1ZXN0VGltZW91dCIsInRyaWdnZXJQcmVzZW5jZVVzYWdlXyIsInNldHVwRmlyc3RQbGF5IiwidXBkYXRlZFBsYXlsaXN0Iiwic2VsZWN0ZWRNZWRpYSIsImV4Y2x1ZGVVbnN1cHBvcnRlZFZhcmlhbnRzXyIsInNlbGVjdEluaXRpYWxQbGF5bGlzdCIsInNlbGVjdFBsYXlsaXN0IiwiaW5pdGlhbE1lZGlhXyIsImhhbmRsZVVwZGF0ZWRNZWRpYVBsYXlsaXN0Iiwic3R1Y2tBdFBsYXlsaXN0RW5kXyIsInVwZGF0ZUFkQ3Vlc18iLCJ1cGRhdGVEdXJhdGlvbiIsImRlZmF1bHREZW11eGVkIiwiYXVkaW9Hcm91cEtleXMiLCJuZXh0UGxheWxpc3QiLCJjdXJyZW50UGxheWxpc3QiLCJmb3J3YXJkQnVmZmVyIiwiYnVmZmVyTG93V2F0ZXJMaW5lIiwic2hvdWxkU3dpdGNoVG9NZWRpYSIsIm9uU3luY0luZm9VcGRhdGVfIiwib25FbmRPZlN0cmVhbSIsInVwZGF0ZUNvZGVjcyIsInRyeVRvQ3JlYXRlU291cmNlQnVmZmVyc18iLCJnZXRDb2RlY3NPckV4Y2x1ZGVfIiwibWVkaWFTZWNvbmRzTG9hZGVkXyIsInNtb290aFF1YWxpdHlDaGFuZ2VfIiwiZmFzdFF1YWxpdHlDaGFuZ2VfIiwiYWJzb2x1dGVQbGF5bGlzdEVuZCIsInJlaW5jbHVkZWQiLCJlcnJvck1lc3NhZ2UiLCJkZWxlZ2F0ZUxvYWRlcnNfIiwiZm5OYW1lcyIsImxvYWRlcnMiLCJkb250RmlsdGVyUGxheWxpc3QiLCJhdWRpb1NlZWthYmxlIiwibWFpblNlZWthYmxlIiwib2xkRW5kIiwib2xkU3RhcnQiLCJ1cGRhdGVEdXJhdGlvbl8iLCJhcmVNZWRpYVR5cGVzS25vd25fIiwidXNpbmdBdWRpb0xvYWRlciIsInBsYXlsaXN0Q29kZWNzIiwidW5zdXBwb3J0ZWRBdWRpbyIsInVuc3VwcG9ydGVkQ29kZWNzIiwic3VwcG9ydGVyIiwidmFyaWFudCIsInN3aXRjaE1lc3NhZ2VzIiwibmV3Q29kZWMiLCJvbGRDb2RlYyIsImV4Y2x1ZGVJbmNvbXBhdGlibGVWYXJpYW50c18iLCJjb2RlY0NvdW50IiwidmFyaWFudENvZGVjcyIsInZhcmlhbnRDb2RlY0NvdW50IiwiYmxhY2tsaXN0UmVhc29ucyIsInZhcmlhbnRDb2RlY1N0cmluZ3MiLCJ2YXJpYW50Q29kZWNTdHJpbmciLCJfc2VnbWVudCRjdWVPdXRDb250JHMiLCJhZE9mZnNldCIsImFkVG90YWwiLCJSZXByZXNlbnRhdGlvbiIsInZoc0hhbmRsZXIiLCJwbGF5bGlzdElEIiwiY2hhbmdlUGxheWxpc3RGbiIsIm1wYyIsIm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8iLCJxdWFsaXR5Q2hhbmdlRnVuY3Rpb24iLCJzbW9vdGhRdWFsaXR5Q2hhbmdlIiwiaW5jb21wYXRpYmxlIiwiY3VycmVudGx5RW5hYmxlZCIsInRpbWVyQ2FuY2VsRXZlbnRzIiwiUGxheWJhY2tXYXRjaGVyIiwibWFzdGVyUGxheWxpc3RDb250cm9sbGVyIiwiYWxsb3dTZWVrc1dpdGhpblVuc2FmZUxpdmVXaW5kb3ciLCJjb25zZWN1dGl2ZVVwZGF0ZXMiLCJsYXN0UmVjb3JkZWRUaW1lIiwidGltZXJfIiwiY2hlY2tDdXJyZW50VGltZVRpbWVvdXRfIiwiY2FuUGxheUhhbmRsZXIiLCJtb25pdG9yQ3VycmVudFRpbWVfIiwid2FpdGluZ0hhbmRsZXIiLCJ0ZWNoV2FpdGluZ18iLCJjYW5jZWxUaW1lckhhbmRsZXIiLCJjYW5jZWxUaW1lcl8iLCJmaXhlc0JhZFNlZWtzSGFuZGxlciIsImZpeGVzQmFkU2Vla3NfIiwibG9hZGVyVHlwZXMiLCJsb2FkZXJDaGVja3MiLCJyZXNldFNlZ21lbnREb3dubG9hZHNfIiwidXBkYXRlZW5kIiwiY2hlY2tTZWdtZW50RG93bmxvYWRzXyIsImNoZWNrQ3VycmVudFRpbWVfIiwiaXNCdWZmZXJlZERpZmZlcmVudCIsImlzUmFuZ2VEaWZmZXJlbnQiLCJwbGF5bGlzdElkIiwid2FpdGluZ18iLCJhZnRlclNlZWthYmxlV2luZG93XyIsImJlZm9yZVNlZWthYmxlV2luZG93XyIsImNsb3NlVG9CdWZmZXJlZENvbnRlbnQiLCJsaXZlUG9pbnQiLCJ2aWRlb1VuZGVyZmxvd18iLCJuZXh0UmFuZ2UiLCJkaWZmZXJlbmNlIiwic2tpcFRoZUdhcF8iLCJhbGxvd2VkRW5kIiwiZ2FwIiwibGFzdFZpZGVvUmFuZ2UiLCJ2aWRlb1JhbmdlIiwiYXVkaW9SYW5nZSIsImdhcEZyb21WaWRlb1VuZGVyZmxvd18iLCJzY2hlZHVsZWRDdXJyZW50VGltZSIsImdhcHMiLCJmaW5kR2FwcyIsImRlZmF1bHRPcHRpb25zIiwiZXJyb3JJbnRlcnZhbCIsImdldFNvdXJjZSIsIklXaWxsTm90VXNlVGhpc0luUGx1Z2lucyIsInJlbG9hZFNvdXJjZU9uRXJyb3IiLCJpbml0UGx1Z2luIiwibGFzdENhbGxlZCIsImxvY2FsT3B0aW9ucyIsImxvYWRlZE1ldGFkYXRhSGFuZGxlciIsImNsZWFudXBFdmVudHMiLCJWaHMkMSIsIlNUQU5EQVJEX1BMQVlMSVNUX1NFTEVDVE9SIiwicGl4ZWxSYXRpbyIsInVzZURldmljZVBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwicGxheWVyQmFuZHdpZHRoIiwicGxheWVyV2lkdGgiLCJwbGF5ZXJIZWlnaHQiLCJsaW1pdFJlbmRpdGlvbkJ5UGxheWVyRGltZW5zaW9ucyIsInNvcnRlZFBsYXlsaXN0UmVwcyIsImVuYWJsZWRQbGF5bGlzdFJlcHMiLCJyZXAiLCJiYW5kd2lkdGhQbGF5bGlzdFJlcHMiLCJoaWdoZXN0UmVtYWluaW5nQmFuZHdpZHRoUmVwIiwiYmFuZHdpZHRoQmVzdFJlcCIsIl9jaG9zZW5SZXAiLCJoYXZlUmVzb2x1dGlvbiIsInJlc29sdXRpb25CZXN0UmVwTGlzdCIsInJlc29sdXRpb25QbHVzT25lTGlzdCIsInJlc29sdXRpb25QbHVzT25lU21hbGxlc3QiLCJyZXNvbHV0aW9uUGx1c09uZVJlcCIsInJlc29sdXRpb25CZXN0UmVwIiwiY2hvc2VuUmVwIiwiX3R5cGUiLCJzeXN0ZW1CYW5kd2lkdGgiLCJJTklUSUFMX1BMQVlMSVNUX1NFTEVDVE9SIiwiY29tcGFyZVBsYXlsaXN0QmFuZHdpZHRoIiwiY29tcGFyZVBsYXlsaXN0UmVzb2x1dGlvbiIsImxlZnRXaWR0aCIsInJpZ2h0V2lkdGgiLCJoYW5kbGVWaHNNZWRpYUNoYW5nZSIsInF1YWxpdHlMZXZlbHMiLCJzZWxlY3RlZEluZGV4XyIsInNldHVwRW1lT3B0aW9ucyIsInNvdXJjZUtleVN5c3RlbXMiLCJhdWRpb01lZGlhIiwibWFpblBsYXlsaXN0cyIsInNvdXJjZU9wdGlvbnMiLCJrZXlTeXN0ZW1PcHRpb25zIiwidmlkZW9QbGF5bGlzdCIsImF1ZGlvUGxheWxpc3QiLCJ2aWRlb0NvbnRlbnRUeXBlIiwiYXVkaW9Db250ZW50VHlwZSIsImtleVN5c3RlbUNvbnRlbnRUeXBlcyIsImtleVN5c3RlbXMiLCJpbml0aWFsaXplTWVkaWFLZXlzIiwia2V5U3lzdGVtc0FyciIsImtleVN5c3RlbXNPcHRpb25zIiwia2V5U3lzdGVtc09iaiIsImdldEFsbFBzc2hLZXlTeXN0ZW1zT3B0aW9ucyIsInN0b3JlZE9iamVjdCIsInN1cHBvcnRzTmF0aXZlSGxzIiwiY2FuSXRQbGF5Iiwic3VwcG9ydHNOYXRpdmVEYXNoIiwic3VwcG9ydHNUeXBlTmF0aXZlbHkiLCJWaHNIYW5kbGVyIiwiaGxzIiwic291cmNlXyIsImlnbm9yZU5leHRTZWVraW5nRXZlbnRfIiwic2V0T3B0aW9uc18iLCJvdmVycmlkZU5hdGl2ZSIsImZlYXR1cmVzTmF0aXZlVmlkZW9UcmFja3MiLCJmZWF0dXJlc05hdGl2ZUF1ZGlvVHJhY2tzIiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJtb3pGdWxsU2NyZWVuRWxlbWVudCIsIm1zRnVsbHNjcmVlbkVsZW1lbnQiLCJ1c2VCYW5kd2lkdGhGcm9tTG9jYWxTdG9yYWdlIiwib3B0aW9uIiwiZGF0YVVyaSIsInBsYXliYWNrV2F0Y2hlcl8iLCJpbnZUaHJvdWdocHV0IiwiaW52QmFuZHdpZHRoIiwibWVkaWFSZXF1ZXN0c18iLCJtZWRpYVJlcXVlc3RzQWJvcnRlZF8iLCJtZWRpYVJlcXVlc3RzVGltZWRvdXRfIiwibWVkaWFSZXF1ZXN0c0Vycm9yZWRfIiwibWVkaWFUcmFuc2ZlckR1cmF0aW9uXyIsIm1lZGlhQnl0ZXNUcmFuc2ZlcnJlZF8iLCJjdXJyZW50VGVjaCIsInBsYXllckRpbWVuc2lvbnMiLCJvYmplY3RUb1N0b3JlIiwiYXVkaW9QbGF5bGlzdExvYWRlciIsInNldHVwUXVhbGl0eUxldmVsc18iLCJtZWRpYVNvdXJjZVVybF8iLCJxdWFsaXR5TGV2ZWxzXyIsImFkZFF1YWxpdHlMZXZlbCIsImRhc2giLCJjb252ZXJ0VG9Qcm9ncmFtVGltZSIsIlZoc1NvdXJjZUhhbmRsZXIiLCJfdmlkZW9qcyRtZXJnZU9wdGlvbnMyIiwic3VwcG9ydGVkVHlwZSIsIl9zZXRQcm90b3R5cGVPZiIsInByb2JlIiwicGFyc2VBdWRpb1Blc18iLCJwZXNUeXBlIiwiZW5kTG9vcCIsInBhcnNlVmlkZW9QZXNfIiwiZmlyc3RLZXlGcmFtZSIsImluc3BlY3RUc18iLCJwYXJzZVBzaV8iLCJiYXNlVGltZXN0YW1wIiwiYXVkaW9Db3VudCIsImF1ZGlvVGltZXNjYWxlIiwiaW5zcGVjdEFhY18iLCJhdWRpb0Jhc2VUaW1lc3RhbXAiLCJkdHNUaW1lIiwidmlkZW9CYXNlVGltZXN0YW1wIiwiYWRqdXN0VGltZXN0YW1wXyIsInNoYW0iLCJQcm94eSIsImNvbmNhdFR5cGVkQXJyYXlzIiwiYnVmZmVycyIsInRvdGFsTGVuZ3RoIiwiaXNUeXBlZEFycmF5Iiwic3RyaW5nVG9CeXRlcyIsInN0cmluZ0lzQnl0ZXMiXSwibWFwcGluZ3MiOiJvSkFDQSxJQUFJQSxFQUFTLEVBQVEsUUFDakJDLEVBQVcsRUFBUSxRQUNuQkMsRUFBYSxFQUFRLFFBNkR6QixTQUFTQyxFQUFXQyxFQUFLQyxFQUFTQyxHQUM5QixJQUFJQyxFQUFTSCxFQVliLE9BVklGLEVBQVdHLElBQ1hDLEVBQVdELEVBQ1EsaUJBQVJELElBQ1BHLEVBQVMsQ0FBQ0gsSUFBSUEsS0FHbEJHLEVBQVNOLEVBQVMsR0FBSUksRUFBUyxDQUFDRCxJQUFLQSxJQUd6Q0csRUFBT0QsU0FBV0EsRUFDWEMsRUFHWCxTQUFTQyxFQUFVSixFQUFLQyxFQUFTQyxHQUU3QixPQUFPRyxFQURQSixFQUFVRixFQUFXQyxFQUFLQyxFQUFTQyxJQUl2QyxTQUFTRyxFQUFXSixHQUNoQixRQUErQixJQUFyQkEsRUFBUUMsU0FDZCxNQUFNLElBQUlJLE1BQU0sNkJBR3BCLElBQUlDLEdBQVMsRUFDVEwsRUFBVyxTQUFnQk0sRUFBS0MsRUFBVUMsR0FDdENILElBQ0FBLEdBQVMsRUFDVE4sRUFBUUMsU0FBU00sRUFBS0MsRUFBVUMsS0FVeEMsU0FBU0MsSUFFTCxJQUFJRCxPQUFPRSxFQVFYLEdBTElGLEVBREFHLEVBQUlKLFNBQ0dJLEVBQUlKLFNBRUpJLEVBQUlDLGNBc0p2QixTQUFnQkQsR0FHWixJQUNJLEdBQXlCLGFBQXJCQSxFQUFJRSxhQUNKLE9BQU9GLEVBQUlHLFlBRWYsSUFBSUMsRUFBd0JKLEVBQUlHLGFBQTRELGdCQUE3Q0gsRUFBSUcsWUFBWUUsZ0JBQWdCQyxTQUMvRSxHQUF5QixLQUFyQk4sRUFBSUUsZUFBd0JFLEVBQzVCLE9BQU9KLEVBQUlHLFlBRWpCLE1BQU9JLElBRVQsT0FBTyxLQW5LNEJDLENBQU9SLEdBR2xDUyxFQUNBLElBQ0laLEVBQU9hLEtBQUtDLE1BQU1kLEdBQ3BCLE1BQU9V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QUMsS0FBTyxNQUFRLENBQUMsS0FBUSxNQUN6RCxDQUFDLE1BQVEsT0FBUyxDQUFDLE1BQVEsT0FBUyxDQUFDLE1BQVEsT0FBUyxDQUFDLE1BQVEsT0FDL0QsQ0FBQyxNQUFRLE9BQVMsQ0FBQyxNQUFRLE9BQVMsQ0FBQyxNQUFRLE9BQVMsQ0FBQyxNQUFRLE9BQy9ELENBQUMsTUFBUSxPQUFTLENBQUMsTUFBUSxPQUFTLENBQUMsTUFBUSxPQUFTLENBQUMsTUFBUSxPQUMvRCxDQUFDLE1BQVEsT0FBUyxDQUFDLE1BQVEsT0FBUyxDQUFDLE1BQVMsT0FBVSxDQUFDLE1BQVMsT0FDbEUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQ3RFLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUN0RSxDQUFDLE1BQVMsT0FBVSxDQUFDLE1BQVMsT0FBVSxDQUFDLE1BQVMsT0FBVSxDQUFDLE1BQVMsT0FDdEUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQVUsQ0FBQyxNQUFTLE9BQ3RFLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUFVLENBQUMsTUFBUyxPQUN0RSxDQUFDLE1BQVMsT0FBVSxDQUFDLE1BQVMsT0FBVSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFDdEUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQ3RFLENBQUMsT0FBUyxRQUFVLENBQUMsT0FBUyxRQUFVLENBQUMsT0FBUyxRQUFVLENBQUMsT0FBUyxRQUN0RSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFBVSxDQUFDLE9BQVMsUUFDdEUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQVUsQ0FBQyxPQUFTLFFBQ3RFLENBQUMsT0FBUyxRQUFVLENB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QUFRa21ILFFBQzNCLElBQWxCQSxJQUNGQSxHQUFnQixHQVNsQixNQUpzQixpQkFBWGxtSCxHQUF1QkEsR0FBcUMsbUJBQXBCQSxFQUFPemhCLFdBQ3hEeWhCLEVBQVNBLEVBQU96aEIsWUFHSSxpQkFBWHloQixFQU5DLElBV1BrbUgsSUFDSGxtSCxFQUFTZ0MsU0FBUzNGLG1CQUFtQjJELEtBR2hDQSxFQUFPMTFCLE1BQU0sSUFBSW9XLEtBQUksU0FBVTZLLEdBQ3BDLE9BQXlCLElBQWxCQSxFQUFFNVcsV0FBVyxRQTJCeEIxSCxFQUFRNHlCLFFBQVVBIiwiZmlsZSI6ImpzL2NodW5rLTEzMzAxNDM0LmpzP3YxNjA4NzE0NDUxMTk1Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgd2luZG93ID0gcmVxdWlyZShcImdsb2JhbC93aW5kb3dcIilcbnZhciBfZXh0ZW5kcyA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIik7XG52YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJ2lzLWZ1bmN0aW9uJyk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIHNsaWdobHkgbW9kaWZpZWQgcGFyc2UtaGVhZGVycyAyLjAuMiA8aHR0cHM6Ly9naXRodWIuY29tL2tlc2xhL3BhcnNlLWhlYWRlcnMvPlxuICogQ29weXJpZ2h0IChjKSAyMDE0IERhdmlkIEJqw7Zya2x1bmRcbiAqIEF2YWlsYWJsZSB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIDxodHRwczovL2dpdGh1Yi5jb20va2VzbGEvcGFyc2UtaGVhZGVycy9ibG9iL21hc3Rlci9MSUNFTkNFPlxuICovXG5cbnZhciBwYXJzZUhlYWRlcnMgPSBmdW5jdGlvbihoZWFkZXJzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gICAgaWYgKCFoZWFkZXJzKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgaGVhZGVycy50cmltKCkuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJvdy5pbmRleE9mKCc6Jyk7XG4gICAgICAgIHZhciBrZXkgPSByb3cuc2xpY2UoMCwgaW5kZXgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YXIgdmFsdWUgPSByb3cuc2xpY2UoaW5kZXggKyAxKS50cmltKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihyZXN1bHRba2V5XSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZVxuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0W2tleV0pKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IFsgcmVzdWx0W2tleV0sIHZhbHVlIF1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlWEhSXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVYSFI7XG5jcmVhdGVYSFIuWE1MSHR0cFJlcXVlc3QgPSB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgfHwgbm9vcFxuY3JlYXRlWEhSLlhEb21haW5SZXF1ZXN0ID0gXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiAobmV3IGNyZWF0ZVhIUi5YTUxIdHRwUmVxdWVzdCgpKSA/IGNyZWF0ZVhIUi5YTUxIdHRwUmVxdWVzdCA6IHdpbmRvdy5YRG9tYWluUmVxdWVzdFxuXG5mb3JFYWNoQXJyYXkoW1wiZ2V0XCIsIFwicHV0XCIsIFwicG9zdFwiLCBcInBhdGNoXCIsIFwiaGVhZFwiLCBcImRlbGV0ZVwiXSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgY3JlYXRlWEhSW21ldGhvZCA9PT0gXCJkZWxldGVcIiA/IFwiZGVsXCIgOiBtZXRob2RdID0gZnVuY3Rpb24odXJpLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBvcHRpb25zID0gaW5pdFBhcmFtcyh1cmksIG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgICAgICBvcHRpb25zLm1ldGhvZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgICAgIHJldHVybiBfY3JlYXRlWEhSKG9wdGlvbnMpXG4gICAgfVxufSlcblxuZnVuY3Rpb24gZm9yRWFjaEFycmF5KGFycmF5LCBpdGVyYXRvcikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0b3IoYXJyYXlbaV0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0VtcHR5KG9iail7XG4gICAgZm9yKHZhciBpIGluIG9iail7XG4gICAgICAgIGlmKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGluaXRQYXJhbXModXJpLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBwYXJhbXMgPSB1cmlcblxuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9uc1xuICAgICAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcGFyYW1zID0ge3VyaTp1cml9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge3VyaTogdXJpfSlcbiAgICB9XG5cbiAgICBwYXJhbXMuY2FsbGJhY2sgPSBjYWxsYmFja1xuICAgIHJldHVybiBwYXJhbXNcbn1cblxuZnVuY3Rpb24gY3JlYXRlWEhSKHVyaSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBvcHRpb25zID0gaW5pdFBhcmFtcyh1cmksIG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgIHJldHVybiBfY3JlYXRlWEhSKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVYSFIob3B0aW9ucykge1xuICAgIGlmKHR5cGVvZiBvcHRpb25zLmNhbGxiYWNrID09PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FsbGJhY2sgYXJndW1lbnQgbWlzc2luZ1wiKVxuICAgIH1cblxuICAgIHZhciBjYWxsZWQgPSBmYWxzZVxuICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNiT25jZShlcnIsIHJlc3BvbnNlLCBib2R5KXtcbiAgICAgICAgaWYoIWNhbGxlZCl7XG4gICAgICAgICAgICBjYWxsZWQgPSB0cnVlXG4gICAgICAgICAgICBvcHRpb25zLmNhbGxiYWNrKGVyciwgcmVzcG9uc2UsIGJvZHkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkeXN0YXRlY2hhbmdlKCkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQobG9hZEZ1bmMsIDApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRCb2R5KCkge1xuICAgICAgICAvLyBDaHJvbWUgd2l0aCByZXF1ZXN0VHlwZT1ibG9iIHRocm93cyBlcnJvcnMgYXJyb3VuZCB3aGVuIGV2ZW4gdGVzdGluZyBhY2Nlc3MgdG8gcmVzcG9uc2VUZXh0XG4gICAgICAgIHZhciBib2R5ID0gdW5kZWZpbmVkXG5cbiAgICAgICAgaWYgKHhoci5yZXNwb25zZSkge1xuICAgICAgICAgICAgYm9keSA9IHhoci5yZXNwb25zZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keSA9IHhoci5yZXNwb25zZVRleHQgfHwgZ2V0WG1sKHhocilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0pzb24pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYm9keSA9IEpTT04ucGFyc2UoYm9keSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm9keVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVycm9yRnVuYyhldnQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRUaW1lcilcbiAgICAgICAgaWYoIShldnQgaW5zdGFuY2VvZiBFcnJvcikpe1xuICAgICAgICAgICAgZXZ0ID0gbmV3IEVycm9yKFwiXCIgKyAoZXZ0IHx8IFwiVW5rbm93biBYTUxIdHRwUmVxdWVzdCBFcnJvclwiKSApXG4gICAgICAgIH1cbiAgICAgICAgZXZ0LnN0YXR1c0NvZGUgPSAwXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhldnQsIGZhaWx1cmVSZXNwb25zZSlcbiAgICB9XG5cbiAgICAvLyB3aWxsIGxvYWQgdGhlIGRhdGEgJiBwcm9jZXNzIHRoZSByZXNwb25zZSBpbiBhIHNwZWNpYWwgcmVzcG9uc2Ugb2JqZWN0XG4gICAgZnVuY3Rpb24gbG9hZEZ1bmMoKSB7XG4gICAgICAgIGlmIChhYm9ydGVkKSByZXR1cm5cbiAgICAgICAgdmFyIHN0YXR1c1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dFRpbWVyKVxuICAgICAgICBpZihvcHRpb25zLnVzZVhEUiAmJiB4aHIuc3RhdHVzPT09dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvL0lFOCBDT1JTIEdFVCBzdWNjZXNzZnVsIHJlc3BvbnNlIGRvZXNuJ3QgaGF2ZSBhIHN0YXR1cyBmaWVsZCwgYnV0IGJvZHkgaXMgZmluZVxuICAgICAgICAgICAgc3RhdHVzID0gMjAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0dXMgPSAoeGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXMpXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3BvbnNlID0gZmFpbHVyZVJlc3BvbnNlXG4gICAgICAgIHZhciBlcnIgPSBudWxsXG5cbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gMCl7XG4gICAgICAgICAgICByZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICBib2R5OiBnZXRCb2R5KCksXG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogc3RhdHVzLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICAgICAgICAgIHVybDogdXJpLFxuICAgICAgICAgICAgICAgIHJhd1JlcXVlc3Q6IHhoclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycyl7IC8vcmVtZW1iZXIgeGhyIGNhbiBpbiBmYWN0IGJlIFhEUiBmb3IgQ09SUyBpbiBJRVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmhlYWRlcnMgPSBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyID0gbmV3IEVycm9yKFwiSW50ZXJuYWwgWE1MSHR0cFJlcXVlc3QgRXJyb3JcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCByZXNwb25zZSwgcmVzcG9uc2UuYm9keSlcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gb3B0aW9ucy54aHIgfHwgbnVsbFxuXG4gICAgaWYgKCF4aHIpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuY29ycyB8fCBvcHRpb25zLnVzZVhEUikge1xuICAgICAgICAgICAgeGhyID0gbmV3IGNyZWF0ZVhIUi5YRG9tYWluUmVxdWVzdCgpXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgeGhyID0gbmV3IGNyZWF0ZVhIUi5YTUxIdHRwUmVxdWVzdCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5XG4gICAgdmFyIGFib3J0ZWRcbiAgICB2YXIgdXJpID0geGhyLnVybCA9IG9wdGlvbnMudXJpIHx8IG9wdGlvbnMudXJsXG4gICAgdmFyIG1ldGhvZCA9IHhoci5tZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCBcIkdFVFwiXG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHkgfHwgb3B0aW9ucy5kYXRhXG4gICAgdmFyIGhlYWRlcnMgPSB4aHIuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fVxuICAgIHZhciBzeW5jID0gISFvcHRpb25zLnN5bmNcbiAgICB2YXIgaXNKc29uID0gZmFsc2VcbiAgICB2YXIgdGltZW91dFRpbWVyXG4gICAgdmFyIGZhaWx1cmVSZXNwb25zZSA9IHtcbiAgICAgICAgYm9keTogdW5kZWZpbmVkLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgc3RhdHVzQ29kZTogMCxcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIHVybDogdXJpLFxuICAgICAgICByYXdSZXF1ZXN0OiB4aHJcbiAgICB9XG5cbiAgICBpZiAoXCJqc29uXCIgaW4gb3B0aW9ucyAmJiBvcHRpb25zLmpzb24gIT09IGZhbHNlKSB7XG4gICAgICAgIGlzSnNvbiA9IHRydWVcbiAgICAgICAgaGVhZGVyc1tcImFjY2VwdFwiXSB8fCBoZWFkZXJzW1wiQWNjZXB0XCJdIHx8IChoZWFkZXJzW1wiQWNjZXB0XCJdID0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIC8vRG9uJ3Qgb3ZlcnJpZGUgZXhpc3RpbmcgYWNjZXB0IGhlYWRlciBkZWNsYXJlZCBieSB1c2VyXG4gICAgICAgIGlmIChtZXRob2QgIT09IFwiR0VUXCIgJiYgbWV0aG9kICE9PSBcIkhFQURcIikge1xuICAgICAgICAgICAgaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSB8fCBoZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdIHx8IChoZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIC8vRG9uJ3Qgb3ZlcnJpZGUgZXhpc3RpbmcgYWNjZXB0IGhlYWRlciBkZWNsYXJlZCBieSB1c2VyXG4gICAgICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5qc29uID09PSB0cnVlID8gYm9keSA6IG9wdGlvbnMuanNvbilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSByZWFkeXN0YXRlY2hhbmdlXG4gICAgeGhyLm9ubG9hZCA9IGxvYWRGdW5jXG4gICAgeGhyLm9uZXJyb3IgPSBlcnJvckZ1bmNcbiAgICAvLyBJRTkgbXVzdCBoYXZlIG9ucHJvZ3Jlc3MgYmUgc2V0IHRvIGEgdW5pcXVlIGZ1bmN0aW9uLlxuICAgIHhoci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJRSBtdXN0IGRpZVxuICAgIH1cbiAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICB4aHIub250aW1lb3V0ID0gZXJyb3JGdW5jXG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmksICFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkKVxuICAgIC8vaGFzIHRvIGJlIGFmdGVyIG9wZW5cbiAgICBpZighc3luYykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gISFvcHRpb25zLndpdGhDcmVkZW50aWFsc1xuICAgIH1cbiAgICAvLyBDYW5ub3Qgc2V0IHRpbWVvdXQgd2l0aCBzeW5jIHJlcXVlc3RcbiAgICAvLyBub3Qgc2V0dGluZyB0aW1lb3V0IG9uIHRoZSB4aHIgb2JqZWN0LCBiZWNhdXNlIG9mIG9sZCB3ZWJraXRzIGV0Yy4gbm90IGhhbmRsaW5nIHRoYXQgY29ycmVjdGx5XG4gICAgLy8gYm90aCBucG0ncyByZXF1ZXN0IGFuZCBqcXVlcnkgMS54IHVzZSB0aGlzIGtpbmQgb2YgdGltZW91dCwgc28gdGhpcyBpcyBiZWluZyBjb25zaXN0ZW50XG4gICAgaWYgKCFzeW5jICYmIG9wdGlvbnMudGltZW91dCA+IDAgKSB7XG4gICAgICAgIHRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmIChhYm9ydGVkKSByZXR1cm5cbiAgICAgICAgICAgIGFib3J0ZWQgPSB0cnVlLy9JRTkgbWF5IHN0aWxsIGNhbGwgcmVhZHlzdGF0ZWNoYW5nZVxuICAgICAgICAgICAgeGhyLmFib3J0KFwidGltZW91dFwiKVxuICAgICAgICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoXCJYTUxIdHRwUmVxdWVzdCB0aW1lb3V0XCIpXG4gICAgICAgICAgICBlLmNvZGUgPSBcIkVUSU1FRE9VVFwiXG4gICAgICAgICAgICBlcnJvckZ1bmMoZSlcbiAgICAgICAgfSwgb3B0aW9ucy50aW1lb3V0IClcbiAgICB9XG5cbiAgICBpZiAoeGhyLnNldFJlcXVlc3RIZWFkZXIpIHtcbiAgICAgICAgZm9yKGtleSBpbiBoZWFkZXJzKXtcbiAgICAgICAgICAgIGlmKGhlYWRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSl7XG4gICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBoZWFkZXJzW2tleV0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaGVhZGVycyAmJiAhaXNFbXB0eShvcHRpb25zLmhlYWRlcnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhlYWRlcnMgY2Fubm90IGJlIHNldCBvbiBhbiBYRG9tYWluUmVxdWVzdCBvYmplY3RcIilcbiAgICB9XG5cbiAgICBpZiAoXCJyZXNwb25zZVR5cGVcIiBpbiBvcHRpb25zKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBvcHRpb25zLnJlc3BvbnNlVHlwZVxuICAgIH1cblxuICAgIGlmIChcImJlZm9yZVNlbmRcIiBpbiBvcHRpb25zICYmXG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmJlZm9yZVNlbmQgPT09IFwiZnVuY3Rpb25cIlxuICAgICkge1xuICAgICAgICBvcHRpb25zLmJlZm9yZVNlbmQoeGhyKVxuICAgIH1cblxuICAgIC8vIE1pY3Jvc29mdCBFZGdlIGJyb3dzZXIgc2VuZHMgXCJ1bmRlZmluZWRcIiB3aGVuIHNlbmQgaXMgY2FsbGVkIHdpdGggdW5kZWZpbmVkIHZhbHVlLlxuICAgIC8vIFhNTEh0dHBSZXF1ZXN0IHNwZWMgc2F5cyB0byBwYXNzIG51bGwgYXMgYm9keSB0byBpbmRpY2F0ZSBubyBib2R5XG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uYXVndHVyL3hoci9pc3N1ZXMvMTAwLlxuICAgIHhoci5zZW5kKGJvZHkgfHwgbnVsbClcblxuICAgIHJldHVybiB4aHJcblxuXG59XG5cbmZ1bmN0aW9uIGdldFhtbCh4aHIpIHtcbiAgICAvLyB4aHIucmVzcG9uc2VYTUwgd2lsbCB0aHJvdyBFeGNlcHRpb24gXCJJbnZhbGlkU3RhdGVFcnJvclwiIG9yIFwiRE9NRXhjZXB0aW9uXCJcbiAgICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0L3Jlc3BvbnNlWE1MLlxuICAgIHRyeSB7XG4gICAgICAgIGlmICh4aHIucmVzcG9uc2VUeXBlID09PSBcImRvY3VtZW50XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB4aHIucmVzcG9uc2VYTUxcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmlyZWZveEJ1Z1Rha2VuRWZmZWN0ID0geGhyLnJlc3BvbnNlWE1MICYmIHhoci5yZXNwb25zZVhNTC5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgPT09IFwicGFyc2VyZXJyb3JcIlxuICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVHlwZSA9PT0gXCJcIiAmJiAhZmlyZWZveEJ1Z1Rha2VuRWZmZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlWE1MXG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJ2YXIgdG9wTGV2ZWwgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fVxudmFyIG1pbkRvYyA9IHJlcXVpcmUoJ21pbi1kb2N1bWVudCcpO1xuXG52YXIgZG9jY3k7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZG9jY3kgPSBkb2N1bWVudDtcbn0gZWxzZSB7XG4gICAgZG9jY3kgPSB0b3BMZXZlbFsnX19HTE9CQUxfRE9DVU1FTlRfQ0FDSEVANCddO1xuXG4gICAgaWYgKCFkb2NjeSkge1xuICAgICAgICBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J10gPSBtaW5Eb2M7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvY2N5O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBTYWZlUGFyc2VUdXBsZVxuXG5mdW5jdGlvbiBTYWZlUGFyc2VUdXBsZShvYmosIHJldml2ZXIpIHtcbiAgICB2YXIganNvblxuICAgIHZhciBlcnJvciA9IG51bGxcblxuICAgIHRyeSB7XG4gICAgICAgIGpzb24gPSBKU09OLnBhcnNlKG9iaiwgcmV2aXZlcilcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZXJyb3IgPSBlcnJcbiAgICB9XG5cbiAgICByZXR1cm4gW2Vycm9yLCBqc29uXVxufVxuIiwiLyohIEBuYW1lIEB2aWRlb2pzL3Zocy11dGlscyBAdmVyc2lvbiAyLjIuMSBAbGljZW5zZSBNSVQgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFVSTFRvb2xraXQgPSByZXF1aXJlKCd1cmwtdG9vbGtpdCcpO1xudmFyIHdpbmRvdyA9IHJlcXVpcmUoJ2dsb2JhbC93aW5kb3cnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0TGVnYWN5IChlKSB7IHJldHVybiBlICYmIHR5cGVvZiBlID09PSAnb2JqZWN0JyAmJiAnZGVmYXVsdCcgaW4gZSA/IGUgOiB7ICdkZWZhdWx0JzogZSB9OyB9XG5cbnZhciBVUkxUb29sa2l0X19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShVUkxUb29sa2l0KTtcbnZhciB3aW5kb3dfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KHdpbmRvdyk7XG5cbnZhciByZXNvbHZlVXJsID0gZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlVXJsLCByZWxhdGl2ZVVybCkge1xuICAvLyByZXR1cm4gZWFybHkgaWYgd2UgZG9uJ3QgbmVlZCB0byByZXNvbHZlXG4gIGlmICgvXlthLXpdKzovaS50ZXN0KHJlbGF0aXZlVXJsKSkge1xuICAgIHJldHVybiByZWxhdGl2ZVVybDtcbiAgfSAvLyBpZiB0aGUgYmFzZSBVUkwgaXMgcmVsYXRpdmUgdGhlbiBjb21iaW5lIHdpdGggdGhlIGN1cnJlbnQgbG9jYXRpb25cblxuXG4gIGlmICghL1xcL1xcLy9pLnRlc3QoYmFzZVVybCkpIHtcbiAgICBiYXNlVXJsID0gVVJMVG9vbGtpdF9fZGVmYXVsdFsnZGVmYXVsdCddLmJ1aWxkQWJzb2x1dGVVUkwod2luZG93X19kZWZhdWx0WydkZWZhdWx0J10ubG9jYXRpb24gJiYgd2luZG93X19kZWZhdWx0WydkZWZhdWx0J10ubG9jYXRpb24uaHJlZiB8fCAnJywgYmFzZVVybCk7XG4gIH1cblxuICByZXR1cm4gVVJMVG9vbGtpdF9fZGVmYXVsdFsnZGVmYXVsdCddLmJ1aWxkQWJzb2x1dGVVUkwoYmFzZVVybCwgcmVsYXRpdmVVcmwpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXNvbHZlVXJsO1xuIiwiLyoqXG4gKiBtdXguanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSDI2NF9TVFJFQU1fVFlQRTogMHgxQixcbiAgQURUU19TVFJFQU1fVFlQRTogMHgwRixcbiAgTUVUQURBVEFfU1RSRUFNX1RZUEU6IDB4MTVcbn07XG4iLCJ2YXIgcGFyc2VTaWR4ID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLFxuICAgIHJlc3VsdCA9IHtcbiAgICAgIHZlcnNpb246IGRhdGFbMF0sXG4gICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICByZWZlcmVuY2VzOiBbXSxcbiAgICAgIHJlZmVyZW5jZUlkOiB2aWV3LmdldFVpbnQzMig0KSxcbiAgICAgIHRpbWVzY2FsZTogdmlldy5nZXRVaW50MzIoOCksXG4gICAgICBlYXJsaWVzdFByZXNlbnRhdGlvblRpbWU6IHZpZXcuZ2V0VWludDMyKDEyKSxcbiAgICAgIGZpcnN0T2Zmc2V0OiB2aWV3LmdldFVpbnQzMigxNilcbiAgICB9LFxuICAgIHJlZmVyZW5jZUNvdW50ID0gdmlldy5nZXRVaW50MTYoMjIpLFxuICAgIGk7XG5cbiAgZm9yIChpID0gMjQ7IHJlZmVyZW5jZUNvdW50OyBpICs9IDEyLCByZWZlcmVuY2VDb3VudC0tKSB7XG4gICAgcmVzdWx0LnJlZmVyZW5jZXMucHVzaCh7XG4gICAgICByZWZlcmVuY2VUeXBlOiAoZGF0YVtpXSAmIDB4ODApID4+PiA3LFxuICAgICAgcmVmZXJlbmNlZFNpemU6IHZpZXcuZ2V0VWludDMyKGkpICYgMHg3RkZGRkZGRixcbiAgICAgIHN1YnNlZ21lbnREdXJhdGlvbjogdmlldy5nZXRVaW50MzIoaSArIDQpLFxuICAgICAgc3RhcnRzV2l0aFNhcDogISEoZGF0YVtpICsgOF0gJiAweDgwKSxcbiAgICAgIHNhcFR5cGU6IChkYXRhW2kgKyA4XSAmIDB4NzApID4+PiA0LFxuICAgICAgc2FwRGVsdGFUaW1lOiB2aWV3LmdldFVpbnQzMihpICsgOCkgJiAweDBGRkZGRkZGXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVNpZHg7XG4iLCIvKipcbiAqIG11eC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICogTGljZW5zZWQgQXBhY2hlLTIuMCBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy9tdXguanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIFV0aWxpdGllcyB0byBkZXRlY3QgYmFzaWMgcHJvcGVydGllcyBhbmQgbWV0YWRhdGEgYWJvdXQgVFMgU2VnbWVudHMuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFN0cmVhbVR5cGVzID0gcmVxdWlyZSgnLi9zdHJlYW0tdHlwZXMuanMnKTtcblxudmFyIHBhcnNlUGlkID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBwaWQgPSBwYWNrZXRbMV0gJiAweDFmO1xuICBwaWQgPDw9IDg7XG4gIHBpZCB8PSBwYWNrZXRbMl07XG4gIHJldHVybiBwaWQ7XG59O1xuXG52YXIgcGFyc2VQYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHJldHVybiAhIShwYWNrZXRbMV0gJiAweDQwKTtcbn07XG5cbnZhciBwYXJzZUFkYXB0aW9uRmllbGQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIC8vIGlmIGFuIGFkYXB0aW9uIGZpZWxkIGlzIHByZXNlbnQsIGl0cyBsZW5ndGggaXMgc3BlY2lmaWVkIGJ5IHRoZVxuICAvLyBmaWZ0aCBieXRlIG9mIHRoZSBUUyBwYWNrZXQgaGVhZGVyLiBUaGUgYWRhcHRhdGlvbiBmaWVsZCBpc1xuICAvLyB1c2VkIHRvIGFkZCBzdHVmZmluZyB0byBQRVMgcGFja2V0cyB0aGF0IGRvbid0IGZpbGwgYSBjb21wbGV0ZVxuICAvLyBUUyBwYWNrZXQsIGFuZCB0byBzcGVjaWZ5IHNvbWUgZm9ybXMgb2YgdGltaW5nIGFuZCBjb250cm9sIGRhdGFcbiAgLy8gdGhhdCB3ZSBkbyBub3QgY3VycmVudGx5IHVzZS5cbiAgaWYgKCgocGFja2V0WzNdICYgMHgzMCkgPj4+IDQpID4gMHgwMSkge1xuICAgIG9mZnNldCArPSBwYWNrZXRbNF0gKyAxO1xuICB9XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuXG52YXIgcGFyc2VUeXBlID0gZnVuY3Rpb24ocGFja2V0LCBwbXRQaWQpIHtcbiAgdmFyIHBpZCA9IHBhcnNlUGlkKHBhY2tldCk7XG4gIGlmIChwaWQgPT09IDApIHtcbiAgICByZXR1cm4gJ3BhdCc7XG4gIH0gZWxzZSBpZiAocGlkID09PSBwbXRQaWQpIHtcbiAgICByZXR1cm4gJ3BtdCc7XG4gIH0gZWxzZSBpZiAocG10UGlkKSB7XG4gICAgcmV0dXJuICdwZXMnO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIHBhcnNlUGF0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBwdXNpID0gcGFyc2VQYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yKHBhY2tldCk7XG4gIHZhciBvZmZzZXQgPSA0ICsgcGFyc2VBZGFwdGlvbkZpZWxkKHBhY2tldCk7XG5cbiAgaWYgKHB1c2kpIHtcbiAgICBvZmZzZXQgKz0gcGFja2V0W29mZnNldF0gKyAxO1xuICB9XG5cbiAgcmV0dXJuIChwYWNrZXRbb2Zmc2V0ICsgMTBdICYgMHgxZikgPDwgOCB8IHBhY2tldFtvZmZzZXQgKyAxMV07XG59O1xuXG52YXIgcGFyc2VQbXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIHByb2dyYW1NYXBUYWJsZSA9IHt9O1xuICB2YXIgcHVzaSA9IHBhcnNlUGF5bG9hZFVuaXRTdGFydEluZGljYXRvcihwYWNrZXQpO1xuICB2YXIgcGF5bG9hZE9mZnNldCA9IDQgKyBwYXJzZUFkYXB0aW9uRmllbGQocGFja2V0KTtcblxuICBpZiAocHVzaSkge1xuICAgIHBheWxvYWRPZmZzZXQgKz0gcGFja2V0W3BheWxvYWRPZmZzZXRdICsgMTtcbiAgfVxuXG4gIC8vIFBNVHMgY2FuIGJlIHNlbnQgYWhlYWQgb2YgdGhlIHRpbWUgd2hlbiB0aGV5IHNob3VsZCBhY3R1YWxseVxuICAvLyB0YWtlIGVmZmVjdC4gV2UgZG9uJ3QgYmVsaWV2ZSB0aGlzIHNob3VsZCBldmVyIGJlIHRoZSBjYXNlXG4gIC8vIGZvciBITFMgYnV0IHdlJ2xsIGlnbm9yZSBcImZvcndhcmRcIiBQTVQgZGVjbGFyYXRpb25zIGlmIHdlIHNlZVxuICAvLyB0aGVtLiBGdXR1cmUgUE1UIGRlY2xhcmF0aW9ucyBoYXZlIHRoZSBjdXJyZW50X25leHRfaW5kaWNhdG9yXG4gIC8vIHNldCB0byB6ZXJvLlxuICBpZiAoIShwYWNrZXRbcGF5bG9hZE9mZnNldCArIDVdICYgMHgwMSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VjdGlvbkxlbmd0aCwgdGFibGVFbmQsIHByb2dyYW1JbmZvTGVuZ3RoO1xuICAvLyB0aGUgbWFwcGluZyB0YWJsZSBlbmRzIGF0IHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgc2VjdGlvblxuICBzZWN0aW9uTGVuZ3RoID0gKHBhY2tldFtwYXlsb2FkT2Zmc2V0ICsgMV0gJiAweDBmKSA8PCA4IHwgcGFja2V0W3BheWxvYWRPZmZzZXQgKyAyXTtcbiAgdGFibGVFbmQgPSAzICsgc2VjdGlvbkxlbmd0aCAtIDQ7XG5cbiAgLy8gdG8gZGV0ZXJtaW5lIHdoZXJlIHRoZSB0YWJsZSBpcywgd2UgaGF2ZSB0byBmaWd1cmUgb3V0IGhvd1xuICAvLyBsb25nIHRoZSBwcm9ncmFtIGluZm8gZGVzY3JpcHRvcnMgYXJlXG4gIHByb2dyYW1JbmZvTGVuZ3RoID0gKHBhY2tldFtwYXlsb2FkT2Zmc2V0ICsgMTBdICYgMHgwZikgPDwgOCB8IHBhY2tldFtwYXlsb2FkT2Zmc2V0ICsgMTFdO1xuXG4gIC8vIGFkdmFuY2UgdGhlIG9mZnNldCB0byB0aGUgZmlyc3QgZW50cnkgaW4gdGhlIG1hcHBpbmcgdGFibGVcbiAgdmFyIG9mZnNldCA9IDEyICsgcHJvZ3JhbUluZm9MZW5ndGg7XG4gIHdoaWxlIChvZmZzZXQgPCB0YWJsZUVuZCkge1xuICAgIHZhciBpID0gcGF5bG9hZE9mZnNldCArIG9mZnNldDtcbiAgICAvLyBhZGQgYW4gZW50cnkgdGhhdCBtYXBzIHRoZSBlbGVtZW50YXJ5X3BpZCB0byB0aGUgc3RyZWFtX3R5cGVcbiAgICBwcm9ncmFtTWFwVGFibGVbKHBhY2tldFtpICsgMV0gJiAweDFGKSA8PCA4IHwgcGFja2V0W2kgKyAyXV0gPSBwYWNrZXRbaV07XG5cbiAgICAvLyBtb3ZlIHRvIHRoZSBuZXh0IHRhYmxlIGVudHJ5XG4gICAgLy8gc2tpcCBwYXN0IHRoZSBlbGVtZW50YXJ5IHN0cmVhbSBkZXNjcmlwdG9ycywgaWYgcHJlc2VudFxuICAgIG9mZnNldCArPSAoKHBhY2tldFtpICsgM10gJiAweDBGKSA8PCA4IHwgcGFja2V0W2kgKyA0XSkgKyA1O1xuICB9XG4gIHJldHVybiBwcm9ncmFtTWFwVGFibGU7XG59O1xuXG52YXIgcGFyc2VQZXNUeXBlID0gZnVuY3Rpb24ocGFja2V0LCBwcm9ncmFtTWFwVGFibGUpIHtcbiAgdmFyIHBpZCA9IHBhcnNlUGlkKHBhY2tldCk7XG4gIHZhciB0eXBlID0gcHJvZ3JhbU1hcFRhYmxlW3BpZF07XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgU3RyZWFtVHlwZXMuSDI2NF9TVFJFQU1fVFlQRTpcbiAgICAgIHJldHVybiAndmlkZW8nO1xuICAgIGNhc2UgU3RyZWFtVHlwZXMuQURUU19TVFJFQU1fVFlQRTpcbiAgICAgIHJldHVybiAnYXVkaW8nO1xuICAgIGNhc2UgU3RyZWFtVHlwZXMuTUVUQURBVEFfU1RSRUFNX1RZUEU6XG4gICAgICByZXR1cm4gJ3RpbWVkLW1ldGFkYXRhJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbnZhciBwYXJzZVBlc1RpbWUgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIHB1c2kgPSBwYXJzZVBheWxvYWRVbml0U3RhcnRJbmRpY2F0b3IocGFja2V0KTtcbiAgaWYgKCFwdXNpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgb2Zmc2V0ID0gNCArIHBhcnNlQWRhcHRpb25GaWVsZChwYWNrZXQpO1xuXG4gIGlmIChvZmZzZXQgPj0gcGFja2V0LmJ5dGVMZW5ndGgpIHtcbiAgICAvLyBGcm9tIHRoZSBIIDIyMi4wIE1QRUctVFMgc3BlY1xuICAgIC8vIFwiRm9yIHRyYW5zcG9ydCBzdHJlYW0gcGFja2V0cyBjYXJyeWluZyBQRVMgcGFja2V0cywgc3R1ZmZpbmcgaXMgbmVlZGVkIHdoZW4gdGhlcmVcbiAgICAvLyAgaXMgaW5zdWZmaWNpZW50IFBFUyBwYWNrZXQgZGF0YSB0byBjb21wbGV0ZWx5IGZpbGwgdGhlIHRyYW5zcG9ydCBzdHJlYW0gcGFja2V0XG4gICAgLy8gIHBheWxvYWQgYnl0ZXMuIFN0dWZmaW5nIGlzIGFjY29tcGxpc2hlZCBieSBkZWZpbmluZyBhbiBhZGFwdGF0aW9uIGZpZWxkIGxvbmdlciB0aGFuXG4gICAgLy8gIHRoZSBzdW0gb2YgdGhlIGxlbmd0aHMgb2YgdGhlIGRhdGEgZWxlbWVudHMgaW4gaXQsIHNvIHRoYXQgdGhlIHBheWxvYWQgYnl0ZXNcbiAgICAvLyAgcmVtYWluaW5nIGFmdGVyIHRoZSBhZGFwdGF0aW9uIGZpZWxkIGV4YWN0bHkgYWNjb21tb2RhdGVzIHRoZSBhdmFpbGFibGUgUEVTIHBhY2tldFxuICAgIC8vICBkYXRhLlwiXG4gICAgLy9cbiAgICAvLyBJZiB0aGUgb2Zmc2V0IGlzID49IHRoZSBsZW5ndGggb2YgdGhlIHBhY2tldCwgdGhlbiB0aGUgcGFja2V0IGNvbnRhaW5zIG5vIGRhdGFcbiAgICAvLyBhbmQgaW5zdGVhZCBpcyBqdXN0IGFkYXB0aW9uIGZpZWxkIHN0dWZmaW5nIGJ5dGVzXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcGVzID0gbnVsbDtcbiAgdmFyIHB0c0R0c0ZsYWdzO1xuXG4gIC8vIFBFUyBwYWNrZXRzIG1heSBiZSBhbm5vdGF0ZWQgd2l0aCBhIFBUUyB2YWx1ZSwgb3IgYSBQVFMgdmFsdWVcbiAgLy8gYW5kIGEgRFRTIHZhbHVlLiBEZXRlcm1pbmUgd2hhdCBjb21iaW5hdGlvbiBvZiB2YWx1ZXMgaXNcbiAgLy8gYXZhaWxhYmxlIHRvIHdvcmsgd2l0aC5cbiAgcHRzRHRzRmxhZ3MgPSBwYWNrZXRbb2Zmc2V0ICsgN107XG5cbiAgLy8gUFRTIGFuZCBEVFMgYXJlIG5vcm1hbGx5IHN0b3JlZCBhcyBhIDMzLWJpdCBudW1iZXIuICBKYXZhc2NyaXB0XG4gIC8vIHBlcmZvcm1zIGFsbCBiaXR3aXNlIG9wZXJhdGlvbnMgb24gMzItYml0IGludGVnZXJzIGJ1dCBqYXZhc2NyaXB0XG4gIC8vIHN1cHBvcnRzIGEgbXVjaCBncmVhdGVyIHJhbmdlICg1Mi1iaXRzKSBvZiBpbnRlZ2VyIHVzaW5nIHN0YW5kYXJkXG4gIC8vIG1hdGhlbWF0aWNhbCBvcGVyYXRpb25zLlxuICAvLyBXZSBjb25zdHJ1Y3QgYSAzMS1iaXQgdmFsdWUgdXNpbmcgYml0d2lzZSBvcGVyYXRvcnMgb3ZlciB0aGUgMzFcbiAgLy8gbW9zdCBzaWduaWZpY2FudCBiaXRzIGFuZCB0aGVuIG11bHRpcGx5IGJ5IDQgKGVxdWFsIHRvIGEgbGVmdC1zaGlmdFxuICAvLyBvZiAyKSBiZWZvcmUgd2UgYWRkIHRoZSBmaW5hbCAyIGxlYXN0IHNpZ25pZmljYW50IGJpdHMgb2YgdGhlXG4gIC8vIHRpbWVzdGFtcCAoZXF1YWwgdG8gYW4gT1IuKVxuICBpZiAocHRzRHRzRmxhZ3MgJiAweEMwKSB7XG4gICAgcGVzID0ge307XG4gICAgLy8gdGhlIFBUUyBhbmQgRFRTIGFyZSBub3Qgd3JpdHRlbiBvdXQgZGlyZWN0bHkuIEZvciBpbmZvcm1hdGlvblxuICAgIC8vIG9uIGhvdyB0aGV5IGFyZSBlbmNvZGVkLCBzZWVcbiAgICAvLyBodHRwOi8vZHZkLnNvdXJjZWZvcmdlLm5ldC9kdmRpbmZvL3Blcy1oZHIuaHRtbFxuICAgIHBlcy5wdHMgPSAocGFja2V0W29mZnNldCArIDldICYgMHgwRSkgPDwgMjcgfFxuICAgICAgKHBhY2tldFtvZmZzZXQgKyAxMF0gJiAweEZGKSA8PCAyMCB8XG4gICAgICAocGFja2V0W29mZnNldCArIDExXSAmIDB4RkUpIDw8IDEyIHxcbiAgICAgIChwYWNrZXRbb2Zmc2V0ICsgMTJdICYgMHhGRikgPDwgIDUgfFxuICAgICAgKHBhY2tldFtvZmZzZXQgKyAxM10gJiAweEZFKSA+Pj4gIDM7XG4gICAgcGVzLnB0cyAqPSA0OyAvLyBMZWZ0IHNoaWZ0IGJ5IDJcbiAgICBwZXMucHRzICs9IChwYWNrZXRbb2Zmc2V0ICsgMTNdICYgMHgwNikgPj4+IDE7IC8vIE9SIGJ5IHRoZSB0d28gTFNCc1xuICAgIHBlcy5kdHMgPSBwZXMucHRzO1xuICAgIGlmIChwdHNEdHNGbGFncyAmIDB4NDApIHtcbiAgICAgIHBlcy5kdHMgPSAocGFja2V0W29mZnNldCArIDE0XSAmIDB4MEUpIDw8IDI3IHxcbiAgICAgICAgKHBhY2tldFtvZmZzZXQgKyAxNV0gJiAweEZGKSA8PCAyMCB8XG4gICAgICAgIChwYWNrZXRbb2Zmc2V0ICsgMTZdICYgMHhGRSkgPDwgMTIgfFxuICAgICAgICAocGFja2V0W29mZnNldCArIDE3XSAmIDB4RkYpIDw8IDUgfFxuICAgICAgICAocGFja2V0W29mZnNldCArIDE4XSAmIDB4RkUpID4+PiAzO1xuICAgICAgcGVzLmR0cyAqPSA0OyAvLyBMZWZ0IHNoaWZ0IGJ5IDJcbiAgICAgIHBlcy5kdHMgKz0gKHBhY2tldFtvZmZzZXQgKyAxOF0gJiAweDA2KSA+Pj4gMTsgLy8gT1IgYnkgdGhlIHR3byBMU0JzXG4gICAgfVxuICB9XG4gIHJldHVybiBwZXM7XG59O1xuXG52YXIgcGFyc2VOYWxVbml0VHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAweDA1OlxuICAgICAgcmV0dXJuICdzbGljZV9sYXllcl93aXRob3V0X3BhcnRpdGlvbmluZ19yYnNwX2lkcic7XG4gICAgY2FzZSAweDA2OlxuICAgICAgcmV0dXJuICdzZWlfcmJzcCc7XG4gICAgY2FzZSAweDA3OlxuICAgICAgcmV0dXJuICdzZXFfcGFyYW1ldGVyX3NldF9yYnNwJztcbiAgICBjYXNlIDB4MDg6XG4gICAgICByZXR1cm4gJ3BpY19wYXJhbWV0ZXJfc2V0X3Jic3AnO1xuICAgIGNhc2UgMHgwOTpcbiAgICAgIHJldHVybiAnYWNjZXNzX3VuaXRfZGVsaW1pdGVyX3Jic3AnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxudmFyIHZpZGVvUGFja2V0Q29udGFpbnNLZXlGcmFtZSA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICB2YXIgb2Zmc2V0ID0gNCArIHBhcnNlQWRhcHRpb25GaWVsZChwYWNrZXQpO1xuICB2YXIgZnJhbWVCdWZmZXIgPSBwYWNrZXQuc3ViYXJyYXkob2Zmc2V0KTtcbiAgdmFyIGZyYW1lSSA9IDA7XG4gIHZhciBmcmFtZVN5bmNQb2ludCA9IDA7XG4gIHZhciBmb3VuZEtleUZyYW1lID0gZmFsc2U7XG4gIHZhciBuYWxUeXBlO1xuXG4gIC8vIGFkdmFuY2UgdGhlIHN5bmMgcG9pbnQgdG8gYSBOQUwgc3RhcnQsIGlmIG5lY2Vzc2FyeVxuICBmb3IgKDsgZnJhbWVTeW5jUG9pbnQgPCBmcmFtZUJ1ZmZlci5ieXRlTGVuZ3RoIC0gMzsgZnJhbWVTeW5jUG9pbnQrKykge1xuICAgIGlmIChmcmFtZUJ1ZmZlcltmcmFtZVN5bmNQb2ludCArIDJdID09PSAxKSB7XG4gICAgICAvLyB0aGUgc3luYyBwb2ludCBpcyBwcm9wZXJseSBhbGlnbmVkXG4gICAgICBmcmFtZUkgPSBmcmFtZVN5bmNQb2ludCArIDU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoZnJhbWVJIDwgZnJhbWVCdWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgIC8vIGxvb2sgYXQgdGhlIGN1cnJlbnQgYnl0ZSB0byBkZXRlcm1pbmUgaWYgd2UndmUgaGl0IHRoZSBlbmQgb2ZcbiAgICAvLyBhIE5BTCB1bml0IGJvdW5kYXJ5XG4gICAgc3dpdGNoIChmcmFtZUJ1ZmZlcltmcmFtZUldKSB7XG4gICAgY2FzZSAwOlxuICAgICAgLy8gc2tpcCBwYXN0IG5vbi1zeW5jIHNlcXVlbmNlc1xuICAgICAgaWYgKGZyYW1lQnVmZmVyW2ZyYW1lSSAtIDFdICE9PSAwKSB7XG4gICAgICAgIGZyYW1lSSArPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAoZnJhbWVCdWZmZXJbZnJhbWVJIC0gMl0gIT09IDApIHtcbiAgICAgICAgZnJhbWVJKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoZnJhbWVTeW5jUG9pbnQgKyAzICE9PSBmcmFtZUkgLSAyKSB7XG4gICAgICAgIG5hbFR5cGUgPSBwYXJzZU5hbFVuaXRUeXBlKGZyYW1lQnVmZmVyW2ZyYW1lU3luY1BvaW50ICsgM10gJiAweDFmKTtcbiAgICAgICAgaWYgKG5hbFR5cGUgPT09ICdzbGljZV9sYXllcl93aXRob3V0X3BhcnRpdGlvbmluZ19yYnNwX2lkcicpIHtcbiAgICAgICAgICBmb3VuZEtleUZyYW1lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBkcm9wIHRyYWlsaW5nIHplcm9lc1xuICAgICAgZG8ge1xuICAgICAgICBmcmFtZUkrKztcbiAgICAgIH0gd2hpbGUgKGZyYW1lQnVmZmVyW2ZyYW1lSV0gIT09IDEgJiYgZnJhbWVJIDwgZnJhbWVCdWZmZXIubGVuZ3RoKTtcbiAgICAgIGZyYW1lU3luY1BvaW50ID0gZnJhbWVJIC0gMjtcbiAgICAgIGZyYW1lSSArPSAzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgLy8gc2tpcCBwYXN0IG5vbi1zeW5jIHNlcXVlbmNlc1xuICAgICAgaWYgKGZyYW1lQnVmZmVyW2ZyYW1lSSAtIDFdICE9PSAwIHx8XG4gICAgICAgICAgZnJhbWVCdWZmZXJbZnJhbWVJIC0gMl0gIT09IDApIHtcbiAgICAgICAgZnJhbWVJICs9IDM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBuYWxUeXBlID0gcGFyc2VOYWxVbml0VHlwZShmcmFtZUJ1ZmZlcltmcmFtZVN5bmNQb2ludCArIDNdICYgMHgxZik7XG4gICAgICBpZiAobmFsVHlwZSA9PT0gJ3NsaWNlX2xheWVyX3dpdGhvdXRfcGFydGl0aW9uaW5nX3Jic3BfaWRyJykge1xuICAgICAgICBmb3VuZEtleUZyYW1lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZyYW1lU3luY1BvaW50ID0gZnJhbWVJIC0gMjtcbiAgICAgIGZyYW1lSSArPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIHRoZSBjdXJyZW50IGJ5dGUgaXNuJ3QgYSBvbmUgb3IgemVybywgc28gaXQgY2Fubm90IGJlIHBhcnRcbiAgICAgIC8vIG9mIGEgc3luYyBzZXF1ZW5jZVxuICAgICAgZnJhbWVJICs9IDM7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgZnJhbWVCdWZmZXIgPSBmcmFtZUJ1ZmZlci5zdWJhcnJheShmcmFtZVN5bmNQb2ludCk7XG4gIGZyYW1lSSAtPSBmcmFtZVN5bmNQb2ludDtcbiAgZnJhbWVTeW5jUG9pbnQgPSAwO1xuICAvLyBwYXJzZSB0aGUgZmluYWwgbmFsXG4gIGlmIChmcmFtZUJ1ZmZlciAmJiBmcmFtZUJ1ZmZlci5ieXRlTGVuZ3RoID4gMykge1xuICAgIG5hbFR5cGUgPSBwYXJzZU5hbFVuaXRUeXBlKGZyYW1lQnVmZmVyW2ZyYW1lU3luY1BvaW50ICsgM10gJiAweDFmKTtcbiAgICBpZiAobmFsVHlwZSA9PT0gJ3NsaWNlX2xheWVyX3dpdGhvdXRfcGFydGl0aW9uaW5nX3Jic3BfaWRyJykge1xuICAgICAgZm91bmRLZXlGcmFtZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvdW5kS2V5RnJhbWU7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZVR5cGU6IHBhcnNlVHlwZSxcbiAgcGFyc2VQYXQ6IHBhcnNlUGF0LFxuICBwYXJzZVBtdDogcGFyc2VQbXQsXG4gIHBhcnNlUGF5bG9hZFVuaXRTdGFydEluZGljYXRvcjogcGFyc2VQYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yLFxuICBwYXJzZVBlc1R5cGU6IHBhcnNlUGVzVHlwZSxcbiAgcGFyc2VQZXNUaW1lOiBwYXJzZVBlc1RpbWUsXG4gIHZpZGVvUGFja2V0Q29udGFpbnNLZXlGcmFtZTogdmlkZW9QYWNrZXRDb250YWluc0tleUZyYW1lXG59O1xuIiwiLy8gc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMxODA4XG5cbihmdW5jdGlvbiAocm9vdCkge1xuICB2YXIgVVJMX1JFR0VYID0gL14oKD86W2EtekEtWjAtOStcXC0uXSs6KT8pKFxcL1xcL1teXFwvPyNdKik/KCg/OlteXFwvPyNdKlxcLykqW147PyNdKik/KDtbXj8jXSopPyhcXD9bXiNdKik/KCMuKik/JC87XG4gIHZhciBGSVJTVF9TRUdNRU5UX1JFR0VYID0gL14oW15cXC8/I10qKSguKikkLztcbiAgdmFyIFNMQVNIX0RPVF9SRUdFWCA9IC8oPzpcXC98XilcXC4oPz1cXC8pL2c7XG4gIHZhciBTTEFTSF9ET1RfRE9UX1JFR0VYID0gLyg/OlxcL3xeKVxcLlxcLlxcLyg/IVxcLlxcLlxcLylbXlxcL10qKD89XFwvKS9nO1xuXG4gIHZhciBVUkxUb29sa2l0ID0ge1xuICAgIC8vIElmIG9wdHMuYWx3YXlzTm9ybWFsaXplIGlzIHRydWUgdGhlbiB0aGUgcGF0aCB3aWxsIGFsd2F5cyBiZSBub3JtYWxpemVkIGV2ZW4gd2hlbiBpdCBzdGFydHMgd2l0aCAvIG9yIC8vXG4gICAgLy8gRS5nXG4gICAgLy8gV2l0aCBvcHRzLmFsd2F5c05vcm1hbGl6ZSA9IGZhbHNlIChkZWZhdWx0LCBzcGVjIGNvbXBsaWFudClcbiAgICAvLyBodHRwOi8vYS5jb20vYi9jZCArIC9lL2YvLi4vZyA9PiBodHRwOi8vYS5jb20vZS9mLy4uL2dcbiAgICAvLyBXaXRoIG9wdHMuYWx3YXlzTm9ybWFsaXplID0gdHJ1ZSAobm90IHNwZWMgY29tcGxpYW50KVxuICAgIC8vIGh0dHA6Ly9hLmNvbS9iL2NkICsgL2UvZi8uLi9nID0+IGh0dHA6Ly9hLmNvbS9lL2dcbiAgICBidWlsZEFic29sdXRlVVJMOiBmdW5jdGlvbiAoYmFzZVVSTCwgcmVsYXRpdmVVUkwsIG9wdHMpIHtcbiAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgICAgLy8gcmVtb3ZlIGFueSByZW1haW5pbmcgc3BhY2UgYW5kIENSTEZcbiAgICAgIGJhc2VVUkwgPSBiYXNlVVJMLnRyaW0oKTtcbiAgICAgIHJlbGF0aXZlVVJMID0gcmVsYXRpdmVVUkwudHJpbSgpO1xuICAgICAgaWYgKCFyZWxhdGl2ZVVSTCkge1xuICAgICAgICAvLyAyYSkgSWYgdGhlIGVtYmVkZGVkIFVSTCBpcyBlbnRpcmVseSBlbXB0eSwgaXQgaW5oZXJpdHMgdGhlXG4gICAgICAgIC8vIGVudGlyZSBiYXNlIFVSTCAoaS5lLiwgaXMgc2V0IGVxdWFsIHRvIHRoZSBiYXNlIFVSTClcbiAgICAgICAgLy8gYW5kIHdlIGFyZSBkb25lLlxuICAgICAgICBpZiAoIW9wdHMuYWx3YXlzTm9ybWFsaXplKSB7XG4gICAgICAgICAgcmV0dXJuIGJhc2VVUkw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhc2VQYXJ0c0Zvck5vcm1hbGlzZSA9IFVSTFRvb2xraXQucGFyc2VVUkwoYmFzZVVSTCk7XG4gICAgICAgIGlmICghYmFzZVBhcnRzRm9yTm9ybWFsaXNlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciB0cnlpbmcgdG8gcGFyc2UgYmFzZSBVUkwuJyk7XG4gICAgICAgIH1cbiAgICAgICAgYmFzZVBhcnRzRm9yTm9ybWFsaXNlLnBhdGggPSBVUkxUb29sa2l0Lm5vcm1hbGl6ZVBhdGgoXG4gICAgICAgICAgYmFzZVBhcnRzRm9yTm9ybWFsaXNlLnBhdGhcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIFVSTFRvb2xraXQuYnVpbGRVUkxGcm9tUGFydHMoYmFzZVBhcnRzRm9yTm9ybWFsaXNlKTtcbiAgICAgIH1cbiAgICAgIHZhciByZWxhdGl2ZVBhcnRzID0gVVJMVG9vbGtpdC5wYXJzZVVSTChyZWxhdGl2ZVVSTCk7XG4gICAgICBpZiAoIXJlbGF0aXZlUGFydHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciB0cnlpbmcgdG8gcGFyc2UgcmVsYXRpdmUgVVJMLicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlbGF0aXZlUGFydHMuc2NoZW1lKSB7XG4gICAgICAgIC8vIDJiKSBJZiB0aGUgZW1iZWRkZWQgVVJMIHN0YXJ0cyB3aXRoIGEgc2NoZW1lIG5hbWUsIGl0IGlzXG4gICAgICAgIC8vIGludGVycHJldGVkIGFzIGFuIGFic29sdXRlIFVSTCBhbmQgd2UgYXJlIGRvbmUuXG4gICAgICAgIGlmICghb3B0cy5hbHdheXNOb3JtYWxpemUpIHtcbiAgICAgICAgICByZXR1cm4gcmVsYXRpdmVVUkw7XG4gICAgICAgIH1cbiAgICAgICAgcmVsYXRpdmVQYXJ0cy5wYXRoID0gVVJMVG9vbGtpdC5ub3JtYWxpemVQYXRoKHJlbGF0aXZlUGFydHMucGF0aCk7XG4gICAgICAgIHJldHVybiBVUkxUb29sa2l0LmJ1aWxkVVJMRnJvbVBhcnRzKHJlbGF0aXZlUGFydHMpO1xuICAgICAgfVxuICAgICAgdmFyIGJhc2VQYXJ0cyA9IFVSTFRvb2xraXQucGFyc2VVUkwoYmFzZVVSTCk7XG4gICAgICBpZiAoIWJhc2VQYXJ0cykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHRyeWluZyB0byBwYXJzZSBiYXNlIFVSTC4nKTtcbiAgICAgIH1cbiAgICAgIGlmICghYmFzZVBhcnRzLm5ldExvYyAmJiBiYXNlUGFydHMucGF0aCAmJiBiYXNlUGFydHMucGF0aFswXSAhPT0gJy8nKSB7XG4gICAgICAgIC8vIElmIG5ldExvYyBtaXNzaW5nIGFuZCBwYXRoIGRvZXNuJ3Qgc3RhcnQgd2l0aCAnLycsIGFzc3VtZSBldmVydGhpbmcgYmVmb3JlIHRoZSBmaXJzdCAnLycgaXMgdGhlIG5ldExvY1xuICAgICAgICAvLyBUaGlzIGNhdXNlcyAnZXhhbXBsZS5jb20vYScgdG8gYmUgaGFuZGxlZCBhcyAnLy9leGFtcGxlLmNvbS9hJyBpbnN0ZWFkIG9mICcvZXhhbXBsZS5jb20vYSdcbiAgICAgICAgdmFyIHBhdGhQYXJ0cyA9IEZJUlNUX1NFR01FTlRfUkVHRVguZXhlYyhiYXNlUGFydHMucGF0aCk7XG4gICAgICAgIGJhc2VQYXJ0cy5uZXRMb2MgPSBwYXRoUGFydHNbMV07XG4gICAgICAgIGJhc2VQYXJ0cy5wYXRoID0gcGF0aFBhcnRzWzJdO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2VQYXJ0cy5uZXRMb2MgJiYgIWJhc2VQYXJ0cy5wYXRoKSB7XG4gICAgICAgIGJhc2VQYXJ0cy5wYXRoID0gJy8nO1xuICAgICAgfVxuICAgICAgdmFyIGJ1aWx0UGFydHMgPSB7XG4gICAgICAgIC8vIDJjKSBPdGhlcndpc2UsIHRoZSBlbWJlZGRlZCBVUkwgaW5oZXJpdHMgdGhlIHNjaGVtZSBvZlxuICAgICAgICAvLyB0aGUgYmFzZSBVUkwuXG4gICAgICAgIHNjaGVtZTogYmFzZVBhcnRzLnNjaGVtZSxcbiAgICAgICAgbmV0TG9jOiByZWxhdGl2ZVBhcnRzLm5ldExvYyxcbiAgICAgICAgcGF0aDogbnVsbCxcbiAgICAgICAgcGFyYW1zOiByZWxhdGl2ZVBhcnRzLnBhcmFtcyxcbiAgICAgICAgcXVlcnk6IHJlbGF0aXZlUGFydHMucXVlcnksXG4gICAgICAgIGZyYWdtZW50OiByZWxhdGl2ZVBhcnRzLmZyYWdtZW50LFxuICAgICAgfTtcbiAgICAgIGlmICghcmVsYXRpdmVQYXJ0cy5uZXRMb2MpIHtcbiAgICAgICAgLy8gMykgSWYgdGhlIGVtYmVkZGVkIFVSTCdzIDxuZXRfbG9jPiBpcyBub24tZW1wdHksIHdlIHNraXAgdG9cbiAgICAgICAgLy8gU3RlcCA3LiAgT3RoZXJ3aXNlLCB0aGUgZW1iZWRkZWQgVVJMIGluaGVyaXRzIHRoZSA8bmV0X2xvYz5cbiAgICAgICAgLy8gKGlmIGFueSkgb2YgdGhlIGJhc2UgVVJMLlxuICAgICAgICBidWlsdFBhcnRzLm5ldExvYyA9IGJhc2VQYXJ0cy5uZXRMb2M7XG4gICAgICAgIC8vIDQpIElmIHRoZSBlbWJlZGRlZCBVUkwgcGF0aCBpcyBwcmVjZWRlZCBieSBhIHNsYXNoIFwiL1wiLCB0aGVcbiAgICAgICAgLy8gcGF0aCBpcyBub3QgcmVsYXRpdmUgYW5kIHdlIHNraXAgdG8gU3RlcCA3LlxuICAgICAgICBpZiAocmVsYXRpdmVQYXJ0cy5wYXRoWzBdICE9PSAnLycpIHtcbiAgICAgICAgICBpZiAoIXJlbGF0aXZlUGFydHMucGF0aCkge1xuICAgICAgICAgICAgLy8gNSkgSWYgdGhlIGVtYmVkZGVkIFVSTCBwYXRoIGlzIGVtcHR5IChhbmQgbm90IHByZWNlZGVkIGJ5IGFcbiAgICAgICAgICAgIC8vIHNsYXNoKSwgdGhlbiB0aGUgZW1iZWRkZWQgVVJMIGluaGVyaXRzIHRoZSBiYXNlIFVSTCBwYXRoXG4gICAgICAgICAgICBidWlsdFBhcnRzLnBhdGggPSBiYXNlUGFydHMucGF0aDtcbiAgICAgICAgICAgIC8vIDVhKSBpZiB0aGUgZW1iZWRkZWQgVVJMJ3MgPHBhcmFtcz4gaXMgbm9uLWVtcHR5LCB3ZSBza2lwIHRvXG4gICAgICAgICAgICAvLyBzdGVwIDc7IG90aGVyd2lzZSwgaXQgaW5oZXJpdHMgdGhlIDxwYXJhbXM+IG9mIHRoZSBiYXNlXG4gICAgICAgICAgICAvLyBVUkwgKGlmIGFueSkgYW5kXG4gICAgICAgICAgICBpZiAoIXJlbGF0aXZlUGFydHMucGFyYW1zKSB7XG4gICAgICAgICAgICAgIGJ1aWx0UGFydHMucGFyYW1zID0gYmFzZVBhcnRzLnBhcmFtcztcbiAgICAgICAgICAgICAgLy8gNWIpIGlmIHRoZSBlbWJlZGRlZCBVUkwncyA8cXVlcnk+IGlzIG5vbi1lbXB0eSwgd2Ugc2tpcCB0b1xuICAgICAgICAgICAgICAvLyBzdGVwIDc7IG90aGVyd2lzZSwgaXQgaW5oZXJpdHMgdGhlIDxxdWVyeT4gb2YgdGhlIGJhc2VcbiAgICAgICAgICAgICAgLy8gVVJMIChpZiBhbnkpIGFuZCB3ZSBza2lwIHRvIHN0ZXAgNy5cbiAgICAgICAgICAgICAgaWYgKCFyZWxhdGl2ZVBhcnRzLnF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgYnVpbHRQYXJ0cy5xdWVyeSA9IGJhc2VQYXJ0cy5xdWVyeTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyA2KSBUaGUgbGFzdCBzZWdtZW50IG9mIHRoZSBiYXNlIFVSTCdzIHBhdGggKGFueXRoaW5nXG4gICAgICAgICAgICAvLyBmb2xsb3dpbmcgdGhlIHJpZ2h0bW9zdCBzbGFzaCBcIi9cIiwgb3IgdGhlIGVudGlyZSBwYXRoIGlmIG5vXG4gICAgICAgICAgICAvLyBzbGFzaCBpcyBwcmVzZW50KSBpcyByZW1vdmVkIGFuZCB0aGUgZW1iZWRkZWQgVVJMJ3MgcGF0aCBpc1xuICAgICAgICAgICAgLy8gYXBwZW5kZWQgaW4gaXRzIHBsYWNlLlxuICAgICAgICAgICAgdmFyIGJhc2VVUkxQYXRoID0gYmFzZVBhcnRzLnBhdGg7XG4gICAgICAgICAgICB2YXIgbmV3UGF0aCA9XG4gICAgICAgICAgICAgIGJhc2VVUkxQYXRoLnN1YnN0cmluZygwLCBiYXNlVVJMUGF0aC5sYXN0SW5kZXhPZignLycpICsgMSkgK1xuICAgICAgICAgICAgICByZWxhdGl2ZVBhcnRzLnBhdGg7XG4gICAgICAgICAgICBidWlsdFBhcnRzLnBhdGggPSBVUkxUb29sa2l0Lm5vcm1hbGl6ZVBhdGgobmV3UGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYnVpbHRQYXJ0cy5wYXRoID09PSBudWxsKSB7XG4gICAgICAgIGJ1aWx0UGFydHMucGF0aCA9IG9wdHMuYWx3YXlzTm9ybWFsaXplXG4gICAgICAgICAgPyBVUkxUb29sa2l0Lm5vcm1hbGl6ZVBhdGgocmVsYXRpdmVQYXJ0cy5wYXRoKVxuICAgICAgICAgIDogcmVsYXRpdmVQYXJ0cy5wYXRoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFVSTFRvb2xraXQuYnVpbGRVUkxGcm9tUGFydHMoYnVpbHRQYXJ0cyk7XG4gICAgfSxcbiAgICBwYXJzZVVSTDogZnVuY3Rpb24gKHVybCkge1xuICAgICAgdmFyIHBhcnRzID0gVVJMX1JFR0VYLmV4ZWModXJsKTtcbiAgICAgIGlmICghcGFydHMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzY2hlbWU6IHBhcnRzWzFdIHx8ICcnLFxuICAgICAgICBuZXRMb2M6IHBhcnRzWzJdIHx8ICcnLFxuICAgICAgICBwYXRoOiBwYXJ0c1szXSB8fCAnJyxcbiAgICAgICAgcGFyYW1zOiBwYXJ0c1s0XSB8fCAnJyxcbiAgICAgICAgcXVlcnk6IHBhcnRzWzVdIHx8ICcnLFxuICAgICAgICBmcmFnbWVudDogcGFydHNbNl0gfHwgJycsXG4gICAgICB9O1xuICAgIH0sXG4gICAgbm9ybWFsaXplUGF0aDogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIC8vIFRoZSBmb2xsb3dpbmcgb3BlcmF0aW9ucyBhcmVcbiAgICAgIC8vIHRoZW4gYXBwbGllZCwgaW4gb3JkZXIsIHRvIHRoZSBuZXcgcGF0aDpcbiAgICAgIC8vIDZhKSBBbGwgb2NjdXJyZW5jZXMgb2YgXCIuL1wiLCB3aGVyZSBcIi5cIiBpcyBhIGNvbXBsZXRlIHBhdGhcbiAgICAgIC8vIHNlZ21lbnQsIGFyZSByZW1vdmVkLlxuICAgICAgLy8gNmIpIElmIHRoZSBwYXRoIGVuZHMgd2l0aCBcIi5cIiBhcyBhIGNvbXBsZXRlIHBhdGggc2VnbWVudCxcbiAgICAgIC8vIHRoYXQgXCIuXCIgaXMgcmVtb3ZlZC5cbiAgICAgIHBhdGggPSBwYXRoLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJykucmVwbGFjZShTTEFTSF9ET1RfUkVHRVgsICcnKTtcbiAgICAgIC8vIDZjKSBBbGwgb2NjdXJyZW5jZXMgb2YgXCI8c2VnbWVudD4vLi4vXCIsIHdoZXJlIDxzZWdtZW50PiBpcyBhXG4gICAgICAvLyBjb21wbGV0ZSBwYXRoIHNlZ21lbnQgbm90IGVxdWFsIHRvIFwiLi5cIiwgYXJlIHJlbW92ZWQuXG4gICAgICAvLyBSZW1vdmFsIG9mIHRoZXNlIHBhdGggc2VnbWVudHMgaXMgcGVyZm9ybWVkIGl0ZXJhdGl2ZWx5LFxuICAgICAgLy8gcmVtb3ZpbmcgdGhlIGxlZnRtb3N0IG1hdGNoaW5nIHBhdHRlcm4gb24gZWFjaCBpdGVyYXRpb24sXG4gICAgICAvLyB1bnRpbCBubyBtYXRjaGluZyBwYXR0ZXJuIHJlbWFpbnMuXG4gICAgICAvLyA2ZCkgSWYgdGhlIHBhdGggZW5kcyB3aXRoIFwiPHNlZ21lbnQ+Ly4uXCIsIHdoZXJlIDxzZWdtZW50PiBpcyBhXG4gICAgICAvLyBjb21wbGV0ZSBwYXRoIHNlZ21lbnQgbm90IGVxdWFsIHRvIFwiLi5cIiwgdGhhdFxuICAgICAgLy8gXCI8c2VnbWVudD4vLi5cIiBpcyByZW1vdmVkLlxuICAgICAgd2hpbGUgKFxuICAgICAgICBwYXRoLmxlbmd0aCAhPT0gKHBhdGggPSBwYXRoLnJlcGxhY2UoU0xBU0hfRE9UX0RPVF9SRUdFWCwgJycpKS5sZW5ndGhcbiAgICAgICkge31cbiAgICAgIHJldHVybiBwYXRoLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyk7XG4gICAgfSxcbiAgICBidWlsZFVSTEZyb21QYXJ0czogZnVuY3Rpb24gKHBhcnRzKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwYXJ0cy5zY2hlbWUgK1xuICAgICAgICBwYXJ0cy5uZXRMb2MgK1xuICAgICAgICBwYXJ0cy5wYXRoICtcbiAgICAgICAgcGFydHMucGFyYW1zICtcbiAgICAgICAgcGFydHMucXVlcnkgK1xuICAgICAgICBwYXJ0cy5mcmFnbWVudFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBVUkxUb29sa2l0O1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gVVJMVG9vbGtpdDtcbiAgICB9KTtcbiAgZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSBleHBvcnRzWydVUkxUb29sa2l0J10gPSBVUkxUb29sa2l0O1xuICBlbHNlIHJvb3RbJ1VSTFRvb2xraXQnXSA9IFVSTFRvb2xraXQ7XG59KSh0aGlzKTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9fY3NzLWxvYWRlckAxLjAuMUBjc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAY2hhcnNldCBcXFwiVVRGLThcXFwiOy56amFwcCAudmlkZW8tanMgLnZqcy1iaWctcGxheS1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZpZGVvLWpzIC52anMtbW9kYWwtZGlhbG9nLC56amFwcCAudmpzLWJ1dHRvbj4udmpzLWljb24tcGxhY2Vob2xkZXI6YmVmb3JlLC56amFwcCAudmpzLW1vZGFsLWRpYWxvZyAudmpzLW1vZGFsLWRpYWxvZy1jb250ZW50e3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS56amFwcCAudmlkZW8tanMgLnZqcy1iaWctcGxheS1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1idXR0b24+LnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZXt0ZXh0LWFsaWduOmNlbnRlcn1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OlZpZGVvSlM7c3JjOnVybChkYXRhOmFwcGxpY2F0aW9uL2ZvbnQtd29mZjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxkMDlHUmdBQkFBQUFBQkRrQUFzQUFBQUFHNmdBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkhVMVZDQUFBQkNBQUFBRHNBQUFCVUlJc2xlazlUTHpJQUFBRkVBQUFBUGdBQUFGWlJpVjNoWTIxaGNBQUFBWVFBQUFEYUFBQURQdjc0OS9wbmJIbG1BQUFDWUFBQUMzQUFBQkhRWmc2T2NXaGxZV1FBQUEzUUFBQUFLd0FBQURZWncyNTFhR2hsWVFBQURmd0FBQUFkQUFBQUpBK1JDTEZvYlhSNEFBQU9IQUFBQUJNQUFBQ003NDRBQUd4dlkyRUFBQTR3QUFBQVNBQUFBRWhGNmtxdWJXRjRjQUFBRG5nQUFBQWZBQUFBSUFFMEFJRnVZVzFsQUFBT21BQUFBU1VBQUFJSzFjZjFvSEJ2YzNRQUFBL0FBQUFCSkFBQUFkUEV4WXVOZUp4allHUmdZT0JpTUdDd1kyQnljZk1KWWVETFNTekpZNUJpWUdHQUFKQThNcHN4SnpNOWtZRUR4Z1BLc1lCcERpQm1nNGdDQUNZN0JVZ0FlSnhqWUdTN3dUaUJnWldCZ2FXUTVSa0RBOE12Q00wY3d4RE9lSTZCZ1ltQmxaa0JLd2hJYzAxaGNQakkrRkdKSGNSZHlBNFJaZ1FSQURLM0N4RUFBSGljN2RGWmJzTWdBRVhSUzB5Y3labm5PZUc3eStxQzhwVTFkSHVzSU9YeHVveGFPbHdaWVdRQjBBZWE0cXVJRU40RTlMektiS2p6RGVNNkgvbXVhNkxtYy9wOHloZzBsdmRZeDE1Wkc4dU9MUU9Hak1wM0V6cW16Sml6WU1tS05SdTI3Tmh6NE1pSk14ZXUzTGp6NEVrcW03VDhQNTJHOFBQM2xuVE9WaysrWjZpTjZRWnpOTjFGN3B0dU43ZUdPakRVb2FHT0RIVnN1dlU4TWRUTzlIZDVhcWd6UTUwYjZzSlFsNGE2TXRTMW9XNE1kV3VvTzBQZEcrckJVSStHZWpMVXM2RmVEUFZxcURkRHZSdnF3MUNmaHBxTTlBdDBpRkxhQUFCNG5KMVlEWEJUVlJaKzUvMjJUVWxKOHdlMHBIbEptN1JKZjVPOEYyajZFeW1sU1BrcHhhTDhVMnhwYTNES2owQ0JoYzJJVzRlV0tTb2tJb0xzdU1xc3NNNjRmK2pBNEhTZFdYWFhzY0JxNjdJT3MzRlhaMVpZV1Z5UkZkbzg5OXlYdElCUVo5MGs3NzE3enozdjNIUFBPZmQ4NTRZQ0NqOWNMOWRMMFJRRk9xQ2JHSm5ySGI1RWF5aUtJV044aUEvaFdCYmxvNmhVV204VHRDRHdFODBXTUp1cy9pcnd5eE9keGVCME1EYjE0Vk5KSG5YWW9MTFNsNkZmQ1VZTzluWVBUQThFcGc5MDkwTHByZmJCYloyaFkwVWxKVVhIUXAzL3Z0V2tTNkVCdjgrclBNcTV1OTY5MmYvZE54Sk5pcXdDMXhQRTlUQ1VnQ3NTZFFXZ0UzWFFEMjVsa0c0Q04yeG1UY09YV0JPeXNlcjZSTjZLbkdiS1NibVEzK2QwT0kxbTJXOFF6TExrSTJzeWtyV0FnSkpFdEE4dkdHVy8yUStDbVQzbjh6Uzl3Wnd1MkRDdnR1WktaTjN4a3JMaDM2eUNadVVvbVFTcUdwWTh0LzI1VmZIVmh3OHo0ZWJHQnRmTGIweWE5UENhRGMrOGRHVHZrMmRzaDZ6N1d6dm93bFhLVVNXbzlNSjE1YTNLckVQMmxvT3IyT2podzZpVzZoZjJCRGRFY2NRdlpHcGFBeTdZb3ZTd3E4a3I3SEdsbHhwZDcxcmtTNkcwU2YxMXNsOU92TUsxK2p3UFBPRHhqVXdrT2ltOUNVM2l4MXdOalhEZm1KU0VuNjE4QnM2bHBXd1VwVSs4UENxTE1ZNjUwempxOFZoQ0lQMTdORUtUeDNlYUxMK3M1UGk2eUpXYVdqVEhMUjFqWXpQU1Y5VkYvNk9qZGIvMWtPM01rM3VoSEMweDZnYzFCamxLUStuUUZ4VFlkYUprWjd5U1Z4TEJiaFIxZHNib05YcDF0Q1lLVzJMUmFFenBZY0l4MkJLTnhhTDBaYVVuU3FmRm9pTmhIS1IvR2tYNlBXVVNBYUplbFFhcVpMMUVwb0hOc2FqU0V5UFNvSjlJamhJeFRkakhMbXdadmhSRE9pRlRZL1llUW52clZabWlUUXRHbmNFQ1h0RlRCWkxPVnd3TVJnb1hIQWtYek16UG4xbkFKSjhqWVNiTURhcU4yd2FHTHpOaGloL2JaeW5VQk1wSVdTZzdWWWk3RFJ4Mm04QUxrSWRSQ0p3STZBckp4MkVJOGthRFdlVFFLZUFGazlmamwvMUF2d2t0alExUDdOanlNR1F5ZmQ0dmppcFg2TS9pNTJEN0NxODBrcWxjeEVjR1hSci9GRWNnczB1NXVHZ0I0Vld1TUZmcGRuMlJlNkhpM1Bxem14V0tzejYrYWUyUG45aFhYdy9mcU04NTlVaUdDMG9LWVlJTEpCcUpyc24xWjFFNXFPczlyUUNpVVFSUkVqbTh5SmNiSEY1Y1VKdWZYMXZBSGxlZncwWGdVb2JvUzNFVGZRbFR4QkM0U090dUU4VlBSSlRCU0NRU2paQ3BrN0dxenUrbWFzYVoyeTdaamVoaG80RjNnODJCTkRrQUhwT1JHNCtPQ1MrZjZKVFBtdFJuL1BIMWtjaDZkMDRzcDdBUWIyNWFRL3BxVXlYZVE4dnJlYkc4T1lRZFhPUSs1ODV1MHNkVzlycWFselJVUmlKKzlGNE13ZVJGcktVamwxR1VZaEgxQTI3V09IdzVjVEZTRlBNbzlFZVVJR25RVFpISWFKN0FITGFPS3NPT0RhTkY5amtCallHMlFFc1EyeGpNVUF4MmJCRWJlVEJXTUh3c2tCam5ncTU2Uy95ZmdrQm5XQmE0SzlzcUt0cTJ0MVVJOFM5SGU1WHVCUmJhd0FkYXRyUUVBaTMwQWtzMitMTThXZUNiYWxWWmtXTnlsdkorZHFKbnpWYitPSGxTb0tXOG5QQ1A3UmQrQ2NaMkRkV0FHcUoyQ0JGT3BoZ3l3RkZDRkJOdGZBYkd0TlBCQ3d4dnlnSGVZTVpNWTlaYm9CcXdxL3BWcnNiZ041dGt2MTUyT0RsYk1maXF3R01CZ3hhNEV4ejNRaG92UklVcDZhY3FabVF6UnEweXBEWFMyVFBMVDAyWUlrUUVUbk9FNDQ1b09HeE9tWEFxVUpOTkc3WGd1cE1qUHEydWE5YXNyajV5WS95dUt0ZU8xS3gwWU5KVHVmcmlyTGUxbVpuYXQ3T0w2cm5VZENXZW5wVzZJOG1BbmJzWThLV3MxUHVTb3ZDVzlBL1oyNVBRMjRhN2NOT3FnbVRrTG1CTWdoNFRIZ2M0YjlrMklWdjEvZy9GNW5HbGp3UExmT2dIQXpKemg0NVYvNCtXZW5Uem1NdFI1Wjd1czJUeXM5MDlVSHFyUFk3S2Jja294UnZSSGhtVmMzY0pHRTk3dW1sMFIxUzBqZFVMVmw3RXZadERGVkJGMzVOOWNFZGpwZ21BaU9sRlorRHRvaDkzK0QzenpIcjhSUk5aUWhuQ05NTmJjZWdPdnBFd1pvTCswNmNKUTA3aCt0aDNmWi83UFZiVkM2bmdUQVYvS29MRnVPNisyS0ZjVTY1MWdFYjV1Z1BTSWIxRCtYcDhWNCtrM3NFSUdudzVtWWU0SWY0azFsRllyNlNDem1NMkVROGlXdG13am5CSTlrVHdlMVRsZkFtWGg3SDAyYnk5ZlcyZ3NqS3d0djBhYVVSS2lsNE9kVjdyREwxTVhJRk5yaGR4b2hjWlhZVG5xNDdXaXNyS2l0YU9iYmY1K3l2a0xpNUo2bENOWlorQjZHQzM4Vk5CWkJEaWRTUy8rbVN2aDZzK3NyZ0M4cHlLTXZEdHQrZGUzYzlmVTc2WlBmdU04dWQ0S3YwZnlQL0xxZmVwTVQvM29aeFNxcFphVGExRGFRWUxZOFRGc0hZYldZc1BvUmhSV2ZMNWVTU1FiaFVHZ0dDM1lMYlZNazZQaXRURk5HcEFzTnJDNkQxVk5CS2dCSE1lamFpdVJXRVdHZ3NTREJUSmpxV0lsOGtKTGxzYUxKMnRYRHI2eEdmVDg1Yk0yUTA2YTQ2eDJIVGd2ZG5WOHo1WUR5LzI3SjR6dDZ4MlZ0a3pqb1lwa3EzNmthQnI0ZVFTZzd0eWlWd2VXdWJYWnVndGFkbDU4eWRhcGZiT1JmS3NEVHVaME9CZ3g0Y2ZkakNmNXRiV05JVG5MMTIwZmRPaTFSVjFDM3VLR3pOZHdZTGNNdlozQnhvUHlUT0NEMVh2WFRwN1UxMGdXQ1ZtVFY5YjNyMnowU2tHV292YjJocDlJODlPOGEyc21seWFPOG11TVUrZFJtdHpwNjBJekFvRnBqTHIxbjM4OGJvTHlmMGRSdnhoc0haMHFiV3FEa3dxdnZwa2o0bDBmWTZFSVhSaTVzUVNyQXZzVll3WFJ5NHFKMkVWdEQxQU43YTBIV3RoOXltdkwxeGMzV1RVS0svVEFIQS9iWERWdFZXZk9NZnVHeEdadjRMbi9qVnI5amMzajF5TXYwdG5kbXl0OVZxODhZOWdIMXd0TFgzS1dqb3Q1KytqV0hnQW9aWmtRMTR3R1EyMEZsaTcxVW1LSkF5NHhLTVNUR2JWZHliVzdGRERBdXQ5WHBENUF6V3JZTzd6UThxZmZxRjgrWW5kL2NsckhjZHl4R3kzYS8zK21mTm56Qy9jQnN2ZVRqblR2WGYxbzZ2ek9sWnc3V3RxdGRtUEsvRXJyei82Tk50RDcyem1OT1pmYm1ZZFRHSGZvb2ZxSTc5T2MrUjJuMWxybkw2cE9tMFVwN2t3eGhUVzEyQW1tN1dZa1hSMnFZckYyQW1nbWJBc3haand5MXhwZy9tMUplMnZycDh2L256MnhwbWxCZzRFOWhyTVUzNDF3VnBUT2gvT2ZtR3ZBbnJhOHE2dWN0cjYwWlFIVjNRK1dNUUp5a01qOFpzV24yUUJPbW1ITUIrbTVwRElwVEZvbllpZ2lhS0FoR0VpQUhGN0VsaVZuUWtqb0xWSU1QdEpwQktIWWQzQThHWUg5akp6cld3bUh4NVFqcDd2REFYMHN1R1J5bTF2dG0vOVcxL0h5Ujh2Y3pmTXM2U2s4RFN2ODU1LzVkbFg5b1FxNTJoVDhzeXlwMnJ4NUlkMTdJQXlBTTN3SWpRUE1PSHp5dEVCNjRxNkQ1elQ5MXlOYm54M1YvbnFuZDAxN1M5WTA2MDVrM2l6b1hMcHN4ZGUybjM4eW9PVjlzMUxjand6TmpiZFg2YXNuQlZhQmovNi9Ed0t3UGtwY3FiREc3Qm5zWG9TcVduVUFtb3R0WUY2ak1TZFZ5WVpoM3pWWENqd1Rpd3dISDZzR3VSaUVIUUd6dVJYNndoWmtwMTIzb3kxQldFMm1FZkovdHZJUnRNNFpNNWJEWGlNc1BNYUFLT1R5YzV1TDU3cnF5eWM1eTVKRTVwbTFpMlMyaVVYMENjYVE2bEM2Wm9nN0pxU3FabVlsb3NsMks2cHdOQTg0elJuUVc2U2FBTFlaUUdXNWxoQ3RVL1czNE42bytiS2ZaOGNmMy9DbC8raVRYM3dCenBPWTRtUmtlTmYzcnB0eWNHU3NoUVdnR2JZdDVqRmMyZTArRGdsSXJ3bDZEVldRN0J1d2FKM1hrMUo0Vkw1dXJuTGwvV2YrZ0hVL2hab1pkS055bTZsRytJMzRGYU5lWktjU3BKSW8ySWVDVnZwZHNER2ZLdnpKbkF3bWVEMzdPdzY1Wld3U293cGd3WDVUNjlzL3JCNTVkUDVCY3BnREtGVjhwN3Eyc24vMXVjOTNiVnpUL3c2VXJDcURUV3ZmQ3Evb0NEL3FaWE5vVWo4Qkw1S3A2R1UwMTdmcmZOWGtBdGlpeWYvU09DRWVMcW5kOFIvUWw5R2xDUmZjdFM2azVjaHZJQnVRMXpDQ2pvQ0hMMkRITkhJWHhNSjNrUWVPOGxic1VYT05lU2ZBNUVqY0c2L0UrS2RoTjRiUDA0dkJoZGk4ODMrQkZCelFieEZidlp6UWVZOUxOQlpjMEZOZm41TndmRG42ckNUblR3NlI4bytnZnBmNWhDb20zM2NSdWlUbHNzM0tIbVpqRCtCUE4rNWdYdUEyemlTL1E3M21MeFVrcGJLTi9lcXd6NXVLMFg5RjNoMmQxVjRuR05nWkdCZ0FPSmQ3NzYraXVlMytjckF6YzRBQWplNUJmY2cweHo5WUhFT0JpWVFCUUE4RlFsRkFIaWNZMkJrWUdCbkFBR09QZ2FHLy84NStoa1lHVkNCTWdCR0d3TllBQUFBZUp4allHQmdZQjhFbUtPUGdRRUFRMDRCZmdBQUFBQUFBQTRBYUFCK0FNd0E0QUVDQVVJQmJBR1lBY0lDR0FKWUFyUUM0QU13QTdBRDNnUXdCSllFM0FVa0JXWUZpZ1lnQm1ZR3RBYnFCMWdJRWdoWUNHNEloQWkyQ09oNG5HTmdaR0JnVUdZb1pXQm5BQUVtSU9ZQ1FnYUcvMkErQXdBWUNRRzJBSGljWFpCTmFvTkFHSVpmRTVQUUNLRlEybFVwczJvWEJmT3p6QUVTeURLQlFKZEdSMk5RUjNRU1NFL1FFL1FFUFVVUFVIcXN2c3JYalRNdzgzelB2UE1OQ3VBV1AzRFFEQWVqZG0xR2p6d1M3cE1td2k3NVhuZ0FENC9DUS9vWDRURmU0UXQ3dU1NYk96anVEYzBFbVhDUC9DN2NKMzhJdStSUDRRRWU4Q1U4cFA4V0htT1BYMkVQejg3VFBvMjAyZXkyT2psblFTWFYvNmFyT2pXRm12c3pNV3RkNkNxd09sS0hxNm92eWNMYVdNV1Z5ZFhLRkZabm1WRmxaVTQ2dFA3UjJuSTVuY2JpL2REa2ZEdEZCQTJERFhiWWtoS2MrVjBCcXM1WnQ5Sk0xSFFHQlJUbS9FZXpUbVpOS3RwY0FNczlZdTZBSzljYUY3NnpvTFdJV2NmTUdPU2tWZHV2U1dlY2hxWnN6MDQwSWIyUFkzdXJ4QkpUenJpVDk1bGlweitUTjFmbUFBQUFlSnh0a01sMndqQU1SZk9BaEFCbEttMmg4MEMzK2FqZ0NLS0RZNmNlZ1A1OVRZQnp1a0FMK3oxWnNxOGN0YUpUVEtQcnNVUUxiWFFRSTBFWEtYcm9ZNEFiRERIQ0dCTk1jWXNaN25DUEI4eXh3Q09lOEl3WHZPSU43L2pBSjc2d3hIZlVxV1grT3pndW1XQWpKTVYxN2kwTmRscjZpckxLTytxZnRkVDdpNnk0dUZTVXZDa25heStsRllaSVphUWNtZkgveElGZFluOThicWhyYTFhS1RNLzZsV01ueWFZaXJ4MXJGVVFaRkJrYjJ6SlV0b1hlSkNlZzBXbkx0SGVTRmMzT3Rybm96TndxaTBUa1NwQk1EQjFuU2RlNW9KWFcyM2hUUzIvVDBMaWxnbFhYN2RtRlZ4TG5xNVUwdllBVEhGazN6WDNCT2lzb1FITkRGRGVabnFLRHk5aFJOYXdON1ZoNzI3aEZ6Y0o1YzhUSUxyS1pmSDd0SVB4QUZQMEJwTGVKUEE9PSkgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfS56amFwcCAudmlkZW8tanMgLnZqcy1iaWctcGxheS1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZpZGVvLWpzIC52anMtcGxheS1jb250cm9sIC52anMtaWNvbi1wbGFjZWhvbGRlciwuemphcHAgLnZqcy1pY29uLXBsYXl7Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52aWRlby1qcyAudmpzLWJpZy1wbGF5LWJ1dHRvbiAudmpzLWljb24tcGxhY2Vob2xkZXI6YmVmb3JlLC56amFwcCAudmlkZW8tanMgLnZqcy1wbGF5LWNvbnRyb2wgLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1pY29uLXBsYXk6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTAxXFxcIn0uemphcHAgLnZqcy1pY29uLXBsYXktY2lyY2xle2ZvbnQtZmFtaWx5OlZpZGVvSlM7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfS56amFwcCAudmpzLWljb24tcGxheS1jaXJjbGU6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTAyXFxcIn0uemphcHAgLnZpZGVvLWpzIC52anMtcGxheS1jb250cm9sLnZqcy1wbGF5aW5nIC52anMtaWNvbi1wbGFjZWhvbGRlciwuemphcHAgLnZqcy1pY29uLXBhdXNle2ZvbnQtZmFtaWx5OlZpZGVvSlM7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfS56amFwcCAudmlkZW8tanMgLnZqcy1wbGF5LWNvbnRyb2wudmpzLXBsYXlpbmcgLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1pY29uLXBhdXNlOmJlZm9yZXtjb250ZW50OlxcXCJcXFxcRjEwM1xcXCJ9LnpqYXBwIC52aWRlby1qcyAudmpzLW11dGUtY29udHJvbC52anMtdm9sLTAgLnZqcy1pY29uLXBsYWNlaG9sZGVyLC56amFwcCAudmpzLWljb24tdm9sdW1lLW11dGV7Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52aWRlby1qcyAudmpzLW11dGUtY29udHJvbC52anMtdm9sLTAgLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1pY29uLXZvbHVtZS1tdXRlOmJlZm9yZXtjb250ZW50OlxcXCJcXFxcRjEwNFxcXCJ9LnpqYXBwIC52aWRlby1qcyAudmpzLW11dGUtY29udHJvbC52anMtdm9sLTEgLnZqcy1pY29uLXBsYWNlaG9sZGVyLC56amFwcCAudmpzLWljb24tdm9sdW1lLWxvd3tmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZpZGVvLWpzIC52anMtbXV0ZS1jb250cm9sLnZqcy12b2wtMSAudmpzLWljb24tcGxhY2Vob2xkZXI6YmVmb3JlLC56amFwcCAudmpzLWljb24tdm9sdW1lLWxvdzpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMDVcXFwifS56amFwcCAudmlkZW8tanMgLnZqcy1tdXRlLWNvbnRyb2wudmpzLXZvbC0yIC52anMtaWNvbi1wbGFjZWhvbGRlciwuemphcHAgLnZqcy1pY29uLXZvbHVtZS1taWR7Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52aWRlby1qcyAudmpzLW11dGUtY29udHJvbC52anMtdm9sLTIgLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1pY29uLXZvbHVtZS1taWQ6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTA2XFxcIn0uemphcHAgLnZpZGVvLWpzIC52anMtbXV0ZS1jb250cm9sIC52anMtaWNvbi1wbGFjZWhvbGRlciwuemphcHAgLnZqcy1pY29uLXZvbHVtZS1oaWdoe2ZvbnQtZmFtaWx5OlZpZGVvSlM7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfS56amFwcCAudmlkZW8tanMgLnZqcy1tdXRlLWNvbnRyb2wgLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1pY29uLXZvbHVtZS1oaWdoOmJlZm9yZXtjb250ZW50OlxcXCJcXFxcRjEwN1xcXCJ9LnpqYXBwIC52aWRlby1qcyAudmpzLWZ1bGxzY3JlZW4tY29udHJvbCAudmpzLWljb24tcGxhY2Vob2xkZXIsLnpqYXBwIC52anMtaWNvbi1mdWxsc2NyZWVuLWVudGVye2ZvbnQtZmFtaWx5OlZpZGVvSlM7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfS56amFwcCAudmlkZW8tanMgLnZqcy1mdWxsc2NyZWVuLWNvbnRyb2wgLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1pY29uLWZ1bGxzY3JlZW4tZW50ZXI6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTA4XFxcIn0uemphcHAgLnZpZGVvLWpzLnZqcy1mdWxsc2NyZWVuIC52anMtZnVsbHNjcmVlbi1jb250cm9sIC52anMtaWNvbi1wbGFjZWhvbGRlciwuemphcHAgLnZqcy1pY29uLWZ1bGxzY3JlZW4tZXhpdHtmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZpZGVvLWpzLnZqcy1mdWxsc2NyZWVuIC52anMtZnVsbHNjcmVlbi1jb250cm9sIC52anMtaWNvbi1wbGFjZWhvbGRlcjpiZWZvcmUsLnpqYXBwIC52anMtaWNvbi1mdWxsc2NyZWVuLWV4aXQ6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTA5XFxcIn0uemphcHAgLnZqcy1pY29uLXNxdWFyZXtmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZqcy1pY29uLXNxdWFyZTpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMEFcXFwifS56amFwcCAudmpzLWljb24tc3Bpbm5lcntmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZqcy1pY29uLXNwaW5uZXI6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTBCXFxcIn0uemphcHAgLnZpZGVvLWpzLnZpZGVvLWpzOmxhbmcoZW4tQVUpIC52anMtc3Vicy1jYXBzLWJ1dHRvbiAudmpzLWljb24tcGxhY2Vob2xkZXIsLnpqYXBwIC52aWRlby1qcy52aWRlby1qczpsYW5nKGVuLUdCKSAudmpzLXN1YnMtY2Fwcy1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyLC56amFwcCAudmlkZW8tanMudmlkZW8tanM6bGFuZyhlbi1JRSkgLnZqcy1zdWJzLWNhcHMtYnV0dG9uIC52anMtaWNvbi1wbGFjZWhvbGRlciwuemphcHAgLnZpZGVvLWpzLnZpZGVvLWpzOmxhbmcoZW4tTlopIC52anMtc3Vicy1jYXBzLWJ1dHRvbiAudmpzLWljb24tcGxhY2Vob2xkZXIsLnpqYXBwIC52aWRlby1qcyAudmpzLXN1YnMtY2Fwcy1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyLC56amFwcCAudmlkZW8tanMgLnZqcy1zdWJ0aXRsZXMtYnV0dG9uIC52anMtaWNvbi1wbGFjZWhvbGRlciwuemphcHAgLnZqcy1pY29uLXN1YnRpdGxlc3tmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZpZGVvLWpzLnZpZGVvLWpzOmxhbmcoZW4tQVUpIC52anMtc3Vicy1jYXBzLWJ1dHRvbiAudmpzLWljb24tcGxhY2Vob2xkZXI6YmVmb3JlLC56amFwcCAudmlkZW8tanMudmlkZW8tanM6bGFuZyhlbi1HQikgLnZqcy1zdWJzLWNhcHMtYnV0dG9uIC52anMtaWNvbi1wbGFjZWhvbGRlcjpiZWZvcmUsLnpqYXBwIC52aWRlby1qcy52aWRlby1qczpsYW5nKGVuLUlFKSAudmpzLXN1YnMtY2Fwcy1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZpZGVvLWpzLnZpZGVvLWpzOmxhbmcoZW4tTlopIC52anMtc3Vicy1jYXBzLWJ1dHRvbiAudmpzLWljb24tcGxhY2Vob2xkZXI6YmVmb3JlLC56amFwcCAudmlkZW8tanMgLnZqcy1zdWJzLWNhcHMtYnV0dG9uIC52anMtaWNvbi1wbGFjZWhvbGRlcjpiZWZvcmUsLnpqYXBwIC52aWRlby1qcyAudmpzLXN1YnRpdGxlcy1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1pY29uLXN1YnRpdGxlczpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMENcXFwifS56amFwcCAudmlkZW8tanMgLnZqcy1jYXB0aW9ucy1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyLC56amFwcCAudmlkZW8tanM6bGFuZyhlbikgLnZqcy1zdWJzLWNhcHMtYnV0dG9uIC52anMtaWNvbi1wbGFjZWhvbGRlciwuemphcHAgLnZpZGVvLWpzOmxhbmcoZnItQ0EpIC52anMtc3Vicy1jYXBzLWJ1dHRvbiAudmpzLWljb24tcGxhY2Vob2xkZXIsLnpqYXBwIC52anMtaWNvbi1jYXB0aW9uc3tmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZpZGVvLWpzIC52anMtY2FwdGlvbnMtYnV0dG9uIC52anMtaWNvbi1wbGFjZWhvbGRlcjpiZWZvcmUsLnpqYXBwIC52aWRlby1qczpsYW5nKGVuKSAudmpzLXN1YnMtY2Fwcy1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZpZGVvLWpzOmxhbmcoZnItQ0EpIC52anMtc3Vicy1jYXBzLWJ1dHRvbiAudmpzLWljb24tcGxhY2Vob2xkZXI6YmVmb3JlLC56amFwcCAudmpzLWljb24tY2FwdGlvbnM6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTBEXFxcIn0uemphcHAgLnZpZGVvLWpzIC52anMtY2hhcHRlcnMtYnV0dG9uIC52anMtaWNvbi1wbGFjZWhvbGRlciwuemphcHAgLnZqcy1pY29uLWNoYXB0ZXJze2ZvbnQtZmFtaWx5OlZpZGVvSlM7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfS56amFwcCAudmlkZW8tanMgLnZqcy1jaGFwdGVycy1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1pY29uLWNoYXB0ZXJzOmJlZm9yZXtjb250ZW50OlxcXCJcXFxcRjEwRVxcXCJ9LnpqYXBwIC52anMtaWNvbi1zaGFyZXtmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZqcy1pY29uLXNoYXJlOmJlZm9yZXtjb250ZW50OlxcXCJcXFxcRjEwRlxcXCJ9LnpqYXBwIC52anMtaWNvbi1jb2d7Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52anMtaWNvbi1jb2c6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTEwXFxcIn0uemphcHAgLnZpZGVvLWpzIC52anMtcGxheS1wcm9ncmVzcywuemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLWxldmVsLC56amFwcCAudmpzLWljb24tY2lyY2xlLC56amFwcCAudmpzLXNlZWstdG8tbGl2ZS1jb250cm9sIC52anMtaWNvbi1wbGFjZWhvbGRlcntmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZpZGVvLWpzIC52anMtcGxheS1wcm9ncmVzczpiZWZvcmUsLnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1sZXZlbDpiZWZvcmUsLnpqYXBwIC52anMtaWNvbi1jaXJjbGU6YmVmb3JlLC56amFwcCAudmpzLXNlZWstdG8tbGl2ZS1jb250cm9sIC52anMtaWNvbi1wbGFjZWhvbGRlcjpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMTFcXFwifS56amFwcCAudmpzLWljb24tY2lyY2xlLW91dGxpbmV7Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52anMtaWNvbi1jaXJjbGUtb3V0bGluZTpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMTJcXFwifS56amFwcCAudmpzLWljb24tY2lyY2xlLWlubmVyLWNpcmNsZXtmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZqcy1pY29uLWNpcmNsZS1pbm5lci1jaXJjbGU6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTEzXFxcIn0uemphcHAgLnZqcy1pY29uLWhke2ZvbnQtZmFtaWx5OlZpZGVvSlM7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfS56amFwcCAudmpzLWljb24taGQ6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTE0XFxcIn0uemphcHAgLnZpZGVvLWpzIC52anMtY29udHJvbC52anMtY2xvc2UtYnV0dG9uIC52anMtaWNvbi1wbGFjZWhvbGRlciwuemphcHAgLnZqcy1pY29uLWNhbmNlbHtmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZpZGVvLWpzIC52anMtY29udHJvbC52anMtY2xvc2UtYnV0dG9uIC52anMtaWNvbi1wbGFjZWhvbGRlcjpiZWZvcmUsLnpqYXBwIC52anMtaWNvbi1jYW5jZWw6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTE1XFxcIn0uemphcHAgLnZpZGVvLWpzIC52anMtcGxheS1jb250cm9sLnZqcy1lbmRlZCAudmpzLWljb24tcGxhY2Vob2xkZXIsLnpqYXBwIC52anMtaWNvbi1yZXBsYXl7Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52aWRlby1qcyAudmpzLXBsYXktY29udHJvbC52anMtZW5kZWQgLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1pY29uLXJlcGxheTpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMTZcXFwifS56amFwcCAudmpzLWljb24tZmFjZWJvb2t7Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52anMtaWNvbi1mYWNlYm9vazpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMTdcXFwifS56amFwcCAudmpzLWljb24tZ3BsdXN7Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52anMtaWNvbi1ncGx1czpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMThcXFwifS56amFwcCAudmpzLWljb24tbGlua2VkaW57Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52anMtaWNvbi1saW5rZWRpbjpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMTlcXFwifS56amFwcCAudmpzLWljb24tdHdpdHRlcntmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZqcy1pY29uLXR3aXR0ZXI6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTFBXFxcIn0uemphcHAgLnZqcy1pY29uLXR1bWJscntmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZqcy1pY29uLXR1bWJscjpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMUJcXFwifS56amFwcCAudmpzLWljb24tcGludGVyZXN0e2ZvbnQtZmFtaWx5OlZpZGVvSlM7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfS56amFwcCAudmpzLWljb24tcGludGVyZXN0OmJlZm9yZXtjb250ZW50OlxcXCJcXFxcRjExQ1xcXCJ9LnpqYXBwIC52aWRlby1qcyAudmpzLWRlc2NyaXB0aW9ucy1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyLC56amFwcCAudmpzLWljb24tYXVkaW8tZGVzY3JpcHRpb257Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52aWRlby1qcyAudmpzLWRlc2NyaXB0aW9ucy1idXR0b24gLnZqcy1pY29uLXBsYWNlaG9sZGVyOmJlZm9yZSwuemphcHAgLnZqcy1pY29uLWF1ZGlvLWRlc2NyaXB0aW9uOmJlZm9yZXtjb250ZW50OlxcXCJcXFxcRjExRFxcXCJ9LnpqYXBwIC52aWRlby1qcyAudmpzLWF1ZGlvLWJ1dHRvbiAudmpzLWljb24tcGxhY2Vob2xkZXIsLnpqYXBwIC52anMtaWNvbi1hdWRpb3tmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZpZGVvLWpzIC52anMtYXVkaW8tYnV0dG9uIC52anMtaWNvbi1wbGFjZWhvbGRlcjpiZWZvcmUsLnpqYXBwIC52anMtaWNvbi1hdWRpbzpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMUVcXFwifS56amFwcCAudmpzLWljb24tbmV4dC1pdGVte2ZvbnQtZmFtaWx5OlZpZGVvSlM7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfS56amFwcCAudmpzLWljb24tbmV4dC1pdGVtOmJlZm9yZXtjb250ZW50OlxcXCJcXFxcRjExRlxcXCJ9LnpqYXBwIC52anMtaWNvbi1wcmV2aW91cy1pdGVte2ZvbnQtZmFtaWx5OlZpZGVvSlM7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfS56amFwcCAudmpzLWljb24tcHJldmlvdXMtaXRlbTpiZWZvcmV7Y29udGVudDpcXFwiXFxcXEYxMjBcXFwifS56amFwcCAudmlkZW8tanMgLnZqcy1waWN0dXJlLWluLXBpY3R1cmUtY29udHJvbCAudmpzLWljb24tcGxhY2Vob2xkZXIsLnpqYXBwIC52anMtaWNvbi1waWN0dXJlLWluLXBpY3R1cmUtZW50ZXJ7Zm9udC1mYW1pbHk6VmlkZW9KUztmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9LnpqYXBwIC52aWRlby1qcyAudmpzLXBpY3R1cmUtaW4tcGljdHVyZS1jb250cm9sIC52anMtaWNvbi1wbGFjZWhvbGRlcjpiZWZvcmUsLnpqYXBwIC52anMtaWNvbi1waWN0dXJlLWluLXBpY3R1cmUtZW50ZXI6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTIxXFxcIn0uemphcHAgLnZpZGVvLWpzLnZqcy1waWN0dXJlLWluLXBpY3R1cmUgLnZqcy1waWN0dXJlLWluLXBpY3R1cmUtY29udHJvbCAudmpzLWljb24tcGxhY2Vob2xkZXIsLnpqYXBwIC52anMtaWNvbi1waWN0dXJlLWluLXBpY3R1cmUtZXhpdHtmb250LWZhbWlseTpWaWRlb0pTO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0uemphcHAgLnZpZGVvLWpzLnZqcy1waWN0dXJlLWluLXBpY3R1cmUgLnZqcy1waWN0dXJlLWluLXBpY3R1cmUtY29udHJvbCAudmpzLWljb24tcGxhY2Vob2xkZXI6YmVmb3JlLC56amFwcCAudmpzLWljb24tcGljdHVyZS1pbi1waWN0dXJlLWV4aXQ6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFxGMTIyXFxcIn0uemphcHAgLnZpZGVvLWpze2Rpc3BsYXk6YmxvY2s7dmVydGljYWwtYWxpZ246dG9wO2JveC1zaXppbmc6Ym9yZGVyLWJveDtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzAwMDtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nOjA7Zm9udC1zaXplOjEwcHg7bGluZS1oZWlnaHQ6MTtmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC1mYW1pbHk6QXJpYWwsSGVsdmV0aWNhLHNhbnMtc2VyaWY7d29yZC1icmVhazpub3JtYWx9LnpqYXBwIC52aWRlby1qczotbW96LWZ1bGwtc2NyZWVue3Bvc2l0aW9uOmFic29sdXRlfS56amFwcCAudmlkZW8tanM6LXdlYmtpdC1mdWxsLXNjcmVlbnt3aWR0aDoxMDAlIWltcG9ydGFudDtoZWlnaHQ6MTAwJSFpbXBvcnRhbnR9LnpqYXBwIC52aWRlby1qc1t0YWJpbmRleD1cXFwiLTFcXFwiXXtvdXRsaW5lOm5vbmV9LnpqYXBwIC52aWRlby1qcyAqLC56amFwcCAudmlkZW8tanMgOmFmdGVyLC56amFwcCAudmlkZW8tanMgOmJlZm9yZXtib3gtc2l6aW5nOmluaGVyaXR9LnpqYXBwIC52aWRlby1qcyB1bHtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O2xpbmUtaGVpZ2h0OmluaGVyaXQ7bGlzdC1zdHlsZS1wb3NpdGlvbjpvdXRzaWRlO21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MH0uemphcHAgLnZpZGVvLWpzLnZqcy00LTMsLnpqYXBwIC52aWRlby1qcy52anMtMTYtOSwuemphcHAgLnZpZGVvLWpzLnZqcy1mbHVpZHt3aWR0aDoxMDAlO21heC13aWR0aDoxMDAlO2hlaWdodDowfS56amFwcCAudmlkZW8tanMudmpzLTE2LTl7cGFkZGluZy10b3A6NTYuMjUlfS56amFwcCAudmlkZW8tanMudmpzLTQtM3twYWRkaW5nLXRvcDo3NSV9LnpqYXBwIC52aWRlby1qcy52anMtZmlsbHt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS56amFwcCAudmlkZW8tanMgLnZqcy10ZWNoe3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS56amFwcCBib2R5LnZqcy1mdWxsLXdpbmRvd3twYWRkaW5nOjA7bWFyZ2luOjA7aGVpZ2h0OjEwMCV9LnpqYXBwIC52anMtZnVsbC13aW5kb3cgLnZpZGVvLWpzLnZqcy1mdWxsc2NyZWVue3Bvc2l0aW9uOmZpeGVkO292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjEwMDA7bGVmdDowO3RvcDowO2JvdHRvbTowO3JpZ2h0OjB9LnpqYXBwIC52aWRlby1qcy52anMtZnVsbHNjcmVlbjpub3QoLnZqcy1pb3MtbmF0aXZlLWZzKXt3aWR0aDoxMDAlIWltcG9ydGFudDtoZWlnaHQ6MTAwJSFpbXBvcnRhbnQ7cGFkZGluZy10b3A6MCFpbXBvcnRhbnR9LnpqYXBwIC52aWRlby1qcy52anMtZnVsbHNjcmVlbi52anMtdXNlci1pbmFjdGl2ZXtjdXJzb3I6bm9uZX0uemphcHAgLnZqcy1oaWRkZW57ZGlzcGxheTpub25lIWltcG9ydGFudH0uemphcHAgLnZqcy1kaXNhYmxlZHtvcGFjaXR5Oi41O2N1cnNvcjpkZWZhdWx0fS56amFwcCAudmlkZW8tanMgLnZqcy1vZmZzY3JlZW57aGVpZ2h0OjFweDtsZWZ0Oi05OTk5cHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7d2lkdGg6MXB4fS56amFwcCAudmpzLWxvY2stc2hvd2luZ3tkaXNwbGF5OmJsb2NrIWltcG9ydGFudDtvcGFjaXR5OjE7dmlzaWJpbGl0eTp2aXNpYmxlfS56amFwcCAudmpzLW5vLWpze3BhZGRpbmc6MjBweDtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzAwMDtmb250LXNpemU6MThweDtmb250LWZhbWlseTpBcmlhbCxIZWx2ZXRpY2Esc2Fucy1zZXJpZjt0ZXh0LWFsaWduOmNlbnRlcjt3aWR0aDozMDBweDtoZWlnaHQ6MTUwcHg7bWFyZ2luOjAgYXV0b30uemphcHAgLnZqcy1uby1qcyBhLC56amFwcCAudmpzLW5vLWpzIGE6dmlzaXRlZHtjb2xvcjojNjZhOGNjfS56amFwcCAudmlkZW8tanMgLnZqcy1iaWctcGxheS1idXR0b257Zm9udC1zaXplOjNlbTtsaW5lLWhlaWdodDoxLjVlbTtoZWlnaHQ6MS42MzMzMmVtO3dpZHRoOjNlbTtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMHB4O2xlZnQ6MTBweDtwYWRkaW5nOjA7Y3Vyc29yOnBvaW50ZXI7b3BhY2l0eToxO2JvcmRlcjouMDY2NjZlbSBzb2xpZCAjZmZmO2JhY2tncm91bmQtY29sb3I6IzJiMzMzZjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNDMsNTEsNjMsLjcpO2JvcmRlci1yYWRpdXM6LjNlbTt0cmFuc2l0aW9uOmFsbCAuNHN9LnpqYXBwIC52anMtYmlnLXBsYXktY2VudGVyZWQgLnZqcy1iaWctcGxheS1idXR0b257dG9wOjUwJTtsZWZ0OjUwJTttYXJnaW4tdG9wOi0uODE2NjZlbTttYXJnaW4tbGVmdDotMS41ZW19LnpqYXBwIC52aWRlby1qcyAudmpzLWJpZy1wbGF5LWJ1dHRvbjpmb2N1cywuemphcHAgLnZpZGVvLWpzOmhvdmVyIC52anMtYmlnLXBsYXktYnV0dG9ue2JvcmRlci1jb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzczODU5ZjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTE1LDEzMywxNTksLjUpO3RyYW5zaXRpb246YWxsIDBzfS56amFwcCAudmpzLWNvbnRyb2xzLWRpc2FibGVkIC52anMtYmlnLXBsYXktYnV0dG9uLC56amFwcCAudmpzLWVycm9yIC52anMtYmlnLXBsYXktYnV0dG9uLC56amFwcCAudmpzLWhhcy1zdGFydGVkIC52anMtYmlnLXBsYXktYnV0dG9uLC56amFwcCAudmpzLXVzaW5nLW5hdGl2ZS1jb250cm9scyAudmpzLWJpZy1wbGF5LWJ1dHRvbntkaXNwbGF5Om5vbmV9LnpqYXBwIC52anMtaGFzLXN0YXJ0ZWQudmpzLXBhdXNlZC52anMtc2hvdy1iaWctcGxheS1idXR0b24tb24tcGF1c2UgLnZqcy1iaWctcGxheS1idXR0b257ZGlzcGxheTpibG9ja30uemphcHAgLnZpZGVvLWpzIGJ1dHRvbntiYWNrZ3JvdW5kOm5vbmU7Ym9yZGVyOm5vbmU7Y29sb3I6aW5oZXJpdDtkaXNwbGF5OmlubGluZS1ibG9jaztmb250LXNpemU6aW5oZXJpdDtsaW5lLWhlaWdodDppbmhlcml0O3RleHQtdHJhbnNmb3JtOm5vbmU7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dHJhbnNpdGlvbjpub25lOy13ZWJraXQtYXBwZWFyYW5jZTpub25lOy1tb3otYXBwZWFyYW5jZTpub25lO2FwcGVhcmFuY2U6bm9uZX0uemphcHAgLnZqcy1jb250cm9sIC52anMtYnV0dG9ue3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LnpqYXBwIC52aWRlby1qcyAudmpzLWNvbnRyb2wudmpzLWNsb3NlLWJ1dHRvbntjdXJzb3I6cG9pbnRlcjtoZWlnaHQ6M2VtO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjA7dG9wOi41ZW07ei1pbmRleDoyfS56amFwcCAudmlkZW8tanMgLnZqcy1tb2RhbC1kaWFsb2d7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC44KTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcscmdiYSgwLDAsMCwuOCksaHNsYSgwLDAlLDEwMCUsMCkpO292ZXJmbG93OmF1dG99LnpqYXBwIC52aWRlby1qcyAudmpzLW1vZGFsLWRpYWxvZz4qe2JveC1zaXppbmc6Ym9yZGVyLWJveH0uemphcHAgLnZqcy1tb2RhbC1kaWFsb2cgLnZqcy1tb2RhbC1kaWFsb2ctY29udGVudHtmb250LXNpemU6MS4yZW07bGluZS1oZWlnaHQ6MS41O3BhZGRpbmc6MjBweCAyNHB4O3otaW5kZXg6MX0uemphcHAgLnZqcy1tZW51LWJ1dHRvbntjdXJzb3I6cG9pbnRlcn0uemphcHAgLnZqcy1tZW51LWJ1dHRvbi52anMtZGlzYWJsZWR7Y3Vyc29yOmRlZmF1bHR9LnpqYXBwIC52anMtd29ya2luZ2hvdmVyIC52anMtbWVudS1idXR0b24udmpzLWRpc2FibGVkOmhvdmVyIC52anMtbWVudXtkaXNwbGF5Om5vbmV9LnpqYXBwIC52anMtbWVudSAudmpzLW1lbnUtY29udGVudHtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MDttYXJnaW46MDtmb250LWZhbWlseTpBcmlhbCxIZWx2ZXRpY2Esc2Fucy1zZXJpZjtvdmVyZmxvdzphdXRvfS56amFwcCAudmpzLW1lbnUgLnZqcy1tZW51LWNvbnRlbnQ+Kntib3gtc2l6aW5nOmJvcmRlci1ib3h9LnpqYXBwIC52anMtc2NydWJiaW5nIC52anMtY29udHJvbC52anMtbWVudS1idXR0b246aG92ZXIgLnZqcy1tZW51e2Rpc3BsYXk6bm9uZX0uemphcHAgLnZqcy1tZW51IGxpe2xpc3Qtc3R5bGU6bm9uZTttYXJnaW46MDtwYWRkaW5nOi4yZW0gMDtsaW5lLWhlaWdodDoxLjRlbTtmb250LXNpemU6MS4yZW07dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC10cmFuc2Zvcm06bG93ZXJjYXNlfS56amFwcCAuanMtZm9jdXMtdmlzaWJsZSAudmpzLW1lbnUgbGkudmpzLW1lbnUtaXRlbTpob3ZlciwuemphcHAgLnZqcy1tZW51IGxpLnZqcy1tZW51LWl0ZW06Zm9jdXMsLnpqYXBwIC52anMtbWVudSBsaS52anMtbWVudS1pdGVtOmhvdmVye2JhY2tncm91bmQtY29sb3I6IzczODU5ZjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTE1LDEzMywxNTksLjUpfS56amFwcCAuanMtZm9jdXMtdmlzaWJsZSAudmpzLW1lbnUgbGkudmpzLXNlbGVjdGVkOmhvdmVyLC56amFwcCAudmpzLW1lbnUgbGkudmpzLXNlbGVjdGVkLC56amFwcCAudmpzLW1lbnUgbGkudmpzLXNlbGVjdGVkOmZvY3VzLC56amFwcCAudmpzLW1lbnUgbGkudmpzLXNlbGVjdGVkOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2ZmZjtjb2xvcjojMmIzMzNmfS56amFwcCAudmpzLW1lbnUgbGkudmpzLW1lbnUtdGl0bGV7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtc2l6ZToxZW07bGluZS1oZWlnaHQ6MmVtO3BhZGRpbmc6MDttYXJnaW46MCAwIC4zZW0gMDtmb250LXdlaWdodDo3MDA7Y3Vyc29yOmRlZmF1bHR9LnpqYXBwIC52anMtbWVudS1idXR0b24tcG9wdXAgLnZqcy1tZW51e2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MDt3aWR0aDoxMGVtO2xlZnQ6LTNlbTtoZWlnaHQ6MDttYXJnaW4tYm90dG9tOjEuNWVtO2JvcmRlci10b3AtY29sb3I6cmdiYSg0Myw1MSw2MywuNyl9LnpqYXBwIC52anMtbWVudS1idXR0b24tcG9wdXAgLnZqcy1tZW51IC52anMtbWVudS1jb250ZW50e2JhY2tncm91bmQtY29sb3I6IzJiMzMzZjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNDMsNTEsNjMsLjcpO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7Ym90dG9tOjEuNWVtO21heC1oZWlnaHQ6MTVlbX0uemphcHAgLnZqcy1sYXlvdXQtdGlueSAudmpzLW1lbnUtYnV0dG9uLXBvcHVwIC52anMtbWVudSAudmpzLW1lbnUtY29udGVudCwuemphcHAgLnZqcy1sYXlvdXQteC1zbWFsbCAudmpzLW1lbnUtYnV0dG9uLXBvcHVwIC52anMtbWVudSAudmpzLW1lbnUtY29udGVudHttYXgtaGVpZ2h0OjVlbX0uemphcHAgLnZqcy1sYXlvdXQtc21hbGwgLnZqcy1tZW51LWJ1dHRvbi1wb3B1cCAudmpzLW1lbnUgLnZqcy1tZW51LWNvbnRlbnR7bWF4LWhlaWdodDoxMGVtfS56amFwcCAudmpzLWxheW91dC1tZWRpdW0gLnZqcy1tZW51LWJ1dHRvbi1wb3B1cCAudmpzLW1lbnUgLnZqcy1tZW51LWNvbnRlbnR7bWF4LWhlaWdodDoxNGVtfS56amFwcCAudmpzLWxheW91dC1odWdlIC52anMtbWVudS1idXR0b24tcG9wdXAgLnZqcy1tZW51IC52anMtbWVudS1jb250ZW50LC56amFwcCAudmpzLWxheW91dC1sYXJnZSAudmpzLW1lbnUtYnV0dG9uLXBvcHVwIC52anMtbWVudSAudmpzLW1lbnUtY29udGVudCwuemphcHAgLnZqcy1sYXlvdXQteC1sYXJnZSAudmpzLW1lbnUtYnV0dG9uLXBvcHVwIC52anMtbWVudSAudmpzLW1lbnUtY29udGVudHttYXgtaGVpZ2h0OjI1ZW19LnpqYXBwIC52anMtbWVudS1idXR0b24tcG9wdXAgLnZqcy1tZW51LnZqcy1sb2NrLXNob3dpbmcsLnpqYXBwIC52anMtd29ya2luZ2hvdmVyIC52anMtbWVudS1idXR0b24tcG9wdXAudmpzLWhvdmVyIC52anMtbWVudXtkaXNwbGF5OmJsb2NrfS56amFwcCAudmlkZW8tanMgLnZqcy1tZW51LWJ1dHRvbi1pbmxpbmV7dHJhbnNpdGlvbjphbGwgLjRzO292ZXJmbG93OmhpZGRlbn0uemphcHAgLnZpZGVvLWpzIC52anMtbWVudS1idXR0b24taW5saW5lOmJlZm9yZXt3aWR0aDoyLjIyMjIyMjIyMmVtfS56amFwcCAudmlkZW8tanMgLnZqcy1tZW51LWJ1dHRvbi1pbmxpbmUudmpzLXNsaWRlci1hY3RpdmUsLnpqYXBwIC52aWRlby1qcyAudmpzLW1lbnUtYnV0dG9uLWlubGluZTpmb2N1cywuemphcHAgLnZpZGVvLWpzIC52anMtbWVudS1idXR0b24taW5saW5lOmhvdmVyLC56amFwcCAudmlkZW8tanMudmpzLW5vLWZsZXggLnZqcy1tZW51LWJ1dHRvbi1pbmxpbmV7d2lkdGg6MTJlbX0uemphcHAgLnZqcy1tZW51LWJ1dHRvbi1pbmxpbmUgLnZqcy1tZW51e29wYWNpdHk6MDtoZWlnaHQ6MTAwJTt3aWR0aDphdXRvO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NGVtO3RvcDowO3BhZGRpbmc6MDttYXJnaW46MDt0cmFuc2l0aW9uOmFsbCAuNHN9LnpqYXBwIC52anMtbWVudS1idXR0b24taW5saW5lLnZqcy1zbGlkZXItYWN0aXZlIC52anMtbWVudSwuemphcHAgLnZqcy1tZW51LWJ1dHRvbi1pbmxpbmU6Zm9jdXMgLnZqcy1tZW51LC56amFwcCAudmpzLW1lbnUtYnV0dG9uLWlubGluZTpob3ZlciAudmpzLW1lbnV7ZGlzcGxheTpibG9jaztvcGFjaXR5OjF9LnpqYXBwIC52anMtbm8tZmxleCAudmpzLW1lbnUtYnV0dG9uLWlubGluZSAudmpzLW1lbnV7ZGlzcGxheTpibG9jaztvcGFjaXR5OjE7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6YXV0b30uemphcHAgLnZqcy1uby1mbGV4IC52anMtbWVudS1idXR0b24taW5saW5lLnZqcy1zbGlkZXItYWN0aXZlIC52anMtbWVudSwuemphcHAgLnZqcy1uby1mbGV4IC52anMtbWVudS1idXR0b24taW5saW5lOmZvY3VzIC52anMtbWVudSwuemphcHAgLnZqcy1uby1mbGV4IC52anMtbWVudS1idXR0b24taW5saW5lOmhvdmVyIC52anMtbWVudXt3aWR0aDphdXRvfS56amFwcCAudmpzLW1lbnUtYnV0dG9uLWlubGluZSAudmpzLW1lbnUtY29udGVudHt3aWR0aDphdXRvO2hlaWdodDoxMDAlO21hcmdpbjowO292ZXJmbG93OmhpZGRlbn0uemphcHAgLnZpZGVvLWpzIC52anMtY29udHJvbC1iYXJ7ZGlzcGxheTpub25lO3dpZHRoOjEwMCU7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7aGVpZ2h0OjNlbTtiYWNrZ3JvdW5kLWNvbG9yOiMyYjMzM2Y7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDQzLDUxLDYzLC43KX0uemphcHAgLnZqcy1oYXMtc3RhcnRlZCAudmpzLWNvbnRyb2wtYmFye2Rpc3BsYXk6ZmxleDt2aXNpYmlsaXR5OnZpc2libGU7b3BhY2l0eToxO3RyYW5zaXRpb246dmlzaWJpbGl0eSAuMXMsb3BhY2l0eSAuMXN9LnpqYXBwIC52anMtaGFzLXN0YXJ0ZWQudmpzLXVzZXItaW5hY3RpdmUudmpzLXBsYXlpbmcgLnZqcy1jb250cm9sLWJhcnt2aXNpYmlsaXR5OnZpc2libGU7b3BhY2l0eTowO3RyYW5zaXRpb246dmlzaWJpbGl0eSAxcyxvcGFjaXR5IDFzfS56amFwcCAudmpzLWNvbnRyb2xzLWRpc2FibGVkIC52anMtY29udHJvbC1iYXIsLnpqYXBwIC52anMtZXJyb3IgLnZqcy1jb250cm9sLWJhciwuemphcHAgLnZqcy11c2luZy1uYXRpdmUtY29udHJvbHMgLnZqcy1jb250cm9sLWJhcntkaXNwbGF5Om5vbmUhaW1wb3J0YW50fS56amFwcCAudmpzLWF1ZGlvLnZqcy1oYXMtc3RhcnRlZC52anMtdXNlci1pbmFjdGl2ZS52anMtcGxheWluZyAudmpzLWNvbnRyb2wtYmFye29wYWNpdHk6MTt2aXNpYmlsaXR5OnZpc2libGV9LnpqYXBwIC52anMtaGFzLXN0YXJ0ZWQudmpzLW5vLWZsZXggLnZqcy1jb250cm9sLWJhcntkaXNwbGF5OnRhYmxlfS56amFwcCAudmlkZW8tanMgLnZqcy1jb250cm9se3Bvc2l0aW9uOnJlbGF0aXZlO3RleHQtYWxpZ246Y2VudGVyO21hcmdpbjowO3BhZGRpbmc6MDtoZWlnaHQ6MTAwJTt3aWR0aDo0ZW07ZmxleDpub25lfS56amFwcCAudmpzLWJ1dHRvbj4udmpzLWljb24tcGxhY2Vob2xkZXI6YmVmb3Jle2ZvbnQtc2l6ZToxLjhlbTtsaW5lLWhlaWdodDoxLjY3fS56amFwcCAudmlkZW8tanMgLnZqcy1jb250cm9sOmZvY3VzLC56amFwcCAudmlkZW8tanMgLnZqcy1jb250cm9sOmZvY3VzOmJlZm9yZSwuemphcHAgLnZpZGVvLWpzIC52anMtY29udHJvbDpob3ZlcjpiZWZvcmV7dGV4dC1zaGFkb3c6MCAwIDFlbSAjZmZmfS56amFwcCAudmlkZW8tanMgLnZqcy1jb250cm9sLXRleHR7Ym9yZGVyOjA7Y2xpcDpyZWN0KDAgMCAwIDApO2hlaWdodDoxcHg7b3ZlcmZsb3c6aGlkZGVuO3BhZGRpbmc6MDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxcHh9LnpqYXBwIC52anMtbm8tZmxleCAudmpzLWNvbnRyb2x7ZGlzcGxheTp0YWJsZS1jZWxsO3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0uemphcHAgLnZpZGVvLWpzIC52anMtY3VzdG9tLWNvbnRyb2wtc3BhY2Vye2Rpc3BsYXk6bm9uZX0uemphcHAgLnZpZGVvLWpzIC52anMtcHJvZ3Jlc3MtY29udHJvbHtjdXJzb3I6cG9pbnRlcjtmbGV4OmF1dG87ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjttaW4td2lkdGg6NGVtO3RvdWNoLWFjdGlvbjpub25lfS56amFwcCAudmlkZW8tanMgLnZqcy1wcm9ncmVzcy1jb250cm9sLmRpc2FibGVke2N1cnNvcjpkZWZhdWx0fS56amFwcCAudmpzLWxpdmUgLnZqcy1wcm9ncmVzcy1jb250cm9se2Rpc3BsYXk6bm9uZX0uemphcHAgLnZqcy1saXZldWkgLnZqcy1wcm9ncmVzcy1jb250cm9se2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9LnpqYXBwIC52anMtbm8tZmxleCAudmpzLXByb2dyZXNzLWNvbnRyb2x7d2lkdGg6YXV0b30uemphcHAgLnZpZGVvLWpzIC52anMtcHJvZ3Jlc3MtaG9sZGVye2ZsZXg6YXV0bzt0cmFuc2l0aW9uOmFsbCAuMnM7aGVpZ2h0Oi4zZW19LnpqYXBwIC52aWRlby1qcyAudmpzLXByb2dyZXNzLWNvbnRyb2wgLnZqcy1wcm9ncmVzcy1ob2xkZXJ7bWFyZ2luOjAgMTBweH0uemphcHAgLnZpZGVvLWpzIC52anMtcHJvZ3Jlc3MtY29udHJvbDpob3ZlciAudmpzLXByb2dyZXNzLWhvbGRlcntmb250LXNpemU6MS42NjY2NjY2NjY3ZW19LnpqYXBwIC52aWRlby1qcyAudmpzLXByb2dyZXNzLWNvbnRyb2w6aG92ZXIgLnZqcy1wcm9ncmVzcy1ob2xkZXIuZGlzYWJsZWR7Zm9udC1zaXplOjFlbX0uemphcHAgLnZpZGVvLWpzIC52anMtcHJvZ3Jlc3MtaG9sZGVyIC52anMtbG9hZC1wcm9ncmVzcywuemphcHAgLnZpZGVvLWpzIC52anMtcHJvZ3Jlc3MtaG9sZGVyIC52anMtbG9hZC1wcm9ncmVzcyBkaXYsLnpqYXBwIC52aWRlby1qcyAudmpzLXByb2dyZXNzLWhvbGRlciAudmpzLXBsYXktcHJvZ3Jlc3N7cG9zaXRpb246YWJzb2x1dGU7ZGlzcGxheTpibG9jaztoZWlnaHQ6MTAwJTttYXJnaW46MDtwYWRkaW5nOjA7d2lkdGg6MH0uemphcHAgLnZpZGVvLWpzIC52anMtcGxheS1wcm9ncmVzc3tiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnpqYXBwIC52aWRlby1qcyAudmpzLXBsYXktcHJvZ3Jlc3M6YmVmb3Jle2ZvbnQtc2l6ZTouOWVtO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0Oi0uNWVtO3RvcDotLjMzMzMzMzMzMzNlbTt6LWluZGV4OjF9LnpqYXBwIC52aWRlby1qcyAudmpzLWxvYWQtcHJvZ3Jlc3N7YmFja2dyb3VuZDpyZ2JhKDExNSwxMzMsMTU5LC41KX0uemphcHAgLnZpZGVvLWpzIC52anMtbG9hZC1wcm9ncmVzcyBkaXZ7YmFja2dyb3VuZDpyZ2JhKDExNSwxMzMsMTU5LC43NSl9LnpqYXBwIC52aWRlby1qcyAudmpzLXRpbWUtdG9vbHRpcHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjpoc2xhKDAsMCUsMTAwJSwuOCk7Ym9yZGVyLXJhZGl1czouM2VtO2NvbG9yOiMwMDA7ZmxvYXQ6cmlnaHQ7Zm9udC1mYW1pbHk6QXJpYWwsSGVsdmV0aWNhLHNhbnMtc2VyaWY7Zm9udC1zaXplOjFlbTtwYWRkaW5nOjZweCA4cHggOHB4IDhweDtwb2ludGVyLWV2ZW50czpub25lO3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMy40ZW07dmlzaWJpbGl0eTpoaWRkZW47ei1pbmRleDoxfS56amFwcCAudmlkZW8tanMgLnZqcy1wcm9ncmVzcy1ob2xkZXI6Zm9jdXMgLnZqcy10aW1lLXRvb2x0aXB7ZGlzcGxheTpub25lfS56amFwcCAudmlkZW8tanMgLnZqcy1wcm9ncmVzcy1jb250cm9sOmhvdmVyIC52anMtcHJvZ3Jlc3MtaG9sZGVyOmZvY3VzIC52anMtdGltZS10b29sdGlwLC56amFwcCAudmlkZW8tanMgLnZqcy1wcm9ncmVzcy1jb250cm9sOmhvdmVyIC52anMtdGltZS10b29sdGlwe2Rpc3BsYXk6YmxvY2s7Zm9udC1zaXplOi42ZW07dmlzaWJpbGl0eTp2aXNpYmxlfS56amFwcCAudmlkZW8tanMgLnZqcy1wcm9ncmVzcy1jb250cm9sLmRpc2FibGVkOmhvdmVyIC52anMtdGltZS10b29sdGlwe2ZvbnQtc2l6ZToxZW19LnpqYXBwIC52aWRlby1qcyAudmpzLXByb2dyZXNzLWNvbnRyb2wgLnZqcy1tb3VzZS1kaXNwbGF5e2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxcHg7aGVpZ2h0OjEwMCU7YmFja2dyb3VuZC1jb2xvcjojMDAwO3otaW5kZXg6MX0uemphcHAgLnZqcy1uby1mbGV4IC52anMtcHJvZ3Jlc3MtY29udHJvbCAudmpzLW1vdXNlLWRpc3BsYXl7ei1pbmRleDowfS56amFwcCAudmlkZW8tanMgLnZqcy1wcm9ncmVzcy1jb250cm9sOmhvdmVyIC52anMtbW91c2UtZGlzcGxheXtkaXNwbGF5OmJsb2NrfS56amFwcCAudmlkZW8tanMudmpzLXVzZXItaW5hY3RpdmUgLnZqcy1wcm9ncmVzcy1jb250cm9sIC52anMtbW91c2UtZGlzcGxheXt2aXNpYmlsaXR5OmhpZGRlbjtvcGFjaXR5OjA7dHJhbnNpdGlvbjp2aXNpYmlsaXR5IDFzLG9wYWNpdHkgMXN9LnpqYXBwIC52aWRlby1qcy52anMtdXNlci1pbmFjdGl2ZS52anMtbm8tZmxleCAudmpzLXByb2dyZXNzLWNvbnRyb2wgLnZqcy1tb3VzZS1kaXNwbGF5e2Rpc3BsYXk6bm9uZX0uemphcHAgLnZqcy1tb3VzZS1kaXNwbGF5IC52anMtdGltZS10b29sdGlwe2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMDAwO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuOCl9LnpqYXBwIC52aWRlby1qcyAudmpzLXNsaWRlcntwb3NpdGlvbjpyZWxhdGl2ZTtjdXJzb3I6cG9pbnRlcjtwYWRkaW5nOjA7bWFyZ2luOjAgLjQ1ZW0gMCAuNDVlbTstd2Via2l0LXRvdWNoLWNhbGxvdXQ6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7YmFja2dyb3VuZC1jb2xvcjojNzM4NTlmO2JhY2tncm91bmQtY29sb3I6cmdiYSgxMTUsMTMzLDE1OSwuNSl9LnpqYXBwIC52aWRlby1qcyAudmpzLXNsaWRlci5kaXNhYmxlZHtjdXJzb3I6ZGVmYXVsdH0uemphcHAgLnZpZGVvLWpzIC52anMtc2xpZGVyOmZvY3Vze3RleHQtc2hhZG93OjAgMCAxZW0gI2ZmZjtib3gtc2hhZG93OjAgMCAxZW0gI2ZmZn0uemphcHAgLnZpZGVvLWpzIC52anMtbXV0ZS1jb250cm9se2N1cnNvcjpwb2ludGVyO2ZsZXg6bm9uZX0uemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLWNvbnRyb2x7Y3Vyc29yOnBvaW50ZXI7bWFyZ2luLXJpZ2h0OjFlbTtkaXNwbGF5OmZsZXh9LnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1jb250cm9sLnZqcy12b2x1bWUtaG9yaXpvbnRhbHt3aWR0aDo1ZW19LnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1wYW5lbCAudmpzLXZvbHVtZS1jb250cm9se3Zpc2liaWxpdHk6dmlzaWJsZTtvcGFjaXR5OjA7d2lkdGg6MXB4O2hlaWdodDoxcHg7bWFyZ2luLWxlZnQ6LTFweH0uemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLXBhbmVse3RyYW5zaXRpb246d2lkdGggMXN9LnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1wYW5lbC52anMtaG92ZXIgLnZqcy1tdXRlLWNvbnRyb2x+LnZqcy12b2x1bWUtY29udHJvbCwuemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLXBhbmVsLnZqcy1ob3ZlciAudmpzLXZvbHVtZS1jb250cm9sLC56amFwcCAudmlkZW8tanMgLnZqcy12b2x1bWUtcGFuZWwgLnZqcy12b2x1bWUtY29udHJvbC52anMtc2xpZGVyLWFjdGl2ZSwuemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLXBhbmVsIC52anMtdm9sdW1lLWNvbnRyb2w6YWN0aXZlLC56amFwcCAudmlkZW8tanMgLnZqcy12b2x1bWUtcGFuZWw6YWN0aXZlIC52anMtdm9sdW1lLWNvbnRyb2wsLnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1wYW5lbDpmb2N1cyAudmpzLXZvbHVtZS1jb250cm9se3Zpc2liaWxpdHk6dmlzaWJsZTtvcGFjaXR5OjE7cG9zaXRpb246cmVsYXRpdmU7dHJhbnNpdGlvbjp2aXNpYmlsaXR5IC4xcyxvcGFjaXR5IC4xcyxoZWlnaHQgLjFzLHdpZHRoIC4xcyxsZWZ0IDBzLHRvcCAwc30uemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLXBhbmVsLnZqcy1ob3ZlciAudmpzLW11dGUtY29udHJvbH4udmpzLXZvbHVtZS1jb250cm9sLnZqcy12b2x1bWUtaG9yaXpvbnRhbCwuemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLXBhbmVsLnZqcy1ob3ZlciAudmpzLXZvbHVtZS1jb250cm9sLnZqcy12b2x1bWUtaG9yaXpvbnRhbCwuemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLXBhbmVsIC52anMtdm9sdW1lLWNvbnRyb2wudmpzLXNsaWRlci1hY3RpdmUudmpzLXZvbHVtZS1ob3Jpem9udGFsLC56amFwcCAudmlkZW8tanMgLnZqcy12b2x1bWUtcGFuZWwgLnZqcy12b2x1bWUtY29udHJvbDphY3RpdmUudmpzLXZvbHVtZS1ob3Jpem9udGFsLC56amFwcCAudmlkZW8tanMgLnZqcy12b2x1bWUtcGFuZWw6YWN0aXZlIC52anMtdm9sdW1lLWNvbnRyb2wudmpzLXZvbHVtZS1ob3Jpem9udGFsLC56amFwcCAudmlkZW8tanMgLnZqcy12b2x1bWUtcGFuZWw6Zm9jdXMgLnZqcy12b2x1bWUtY29udHJvbC52anMtdm9sdW1lLWhvcml6b250YWx7d2lkdGg6NWVtO2hlaWdodDozZW07bWFyZ2luLXJpZ2h0OjB9LnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1wYW5lbC52anMtaG92ZXIgLnZqcy1tdXRlLWNvbnRyb2x+LnZqcy12b2x1bWUtY29udHJvbC52anMtdm9sdW1lLXZlcnRpY2FsLC56amFwcCAudmlkZW8tanMgLnZqcy12b2x1bWUtcGFuZWwudmpzLWhvdmVyIC52anMtdm9sdW1lLWNvbnRyb2wudmpzLXZvbHVtZS12ZXJ0aWNhbCwuemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLXBhbmVsIC52anMtdm9sdW1lLWNvbnRyb2wudmpzLXNsaWRlci1hY3RpdmUudmpzLXZvbHVtZS12ZXJ0aWNhbCwuemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLXBhbmVsIC52anMtdm9sdW1lLWNvbnRyb2w6YWN0aXZlLnZqcy12b2x1bWUtdmVydGljYWwsLnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1wYW5lbDphY3RpdmUgLnZqcy12b2x1bWUtY29udHJvbC52anMtdm9sdW1lLXZlcnRpY2FsLC56amFwcCAudmlkZW8tanMgLnZqcy12b2x1bWUtcGFuZWw6Zm9jdXMgLnZqcy12b2x1bWUtY29udHJvbC52anMtdm9sdW1lLXZlcnRpY2Fse2xlZnQ6LTMuNWVtO3RyYW5zaXRpb246bGVmdCAwc30uemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLXBhbmVsLnZqcy12b2x1bWUtcGFuZWwtaG9yaXpvbnRhbC52anMtaG92ZXIsLnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1wYW5lbC52anMtdm9sdW1lLXBhbmVsLWhvcml6b250YWwudmpzLXNsaWRlci1hY3RpdmUsLnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1wYW5lbC52anMtdm9sdW1lLXBhbmVsLWhvcml6b250YWw6YWN0aXZle3dpZHRoOjEwZW07dHJhbnNpdGlvbjp3aWR0aCAuMXN9LnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1wYW5lbC52anMtdm9sdW1lLXBhbmVsLWhvcml6b250YWwudmpzLW11dGUtdG9nZ2xlLW9ubHl7d2lkdGg6NGVtfS56amFwcCAudmlkZW8tanMgLnZqcy12b2x1bWUtcGFuZWwgLnZqcy12b2x1bWUtY29udHJvbC52anMtdm9sdW1lLXZlcnRpY2Fse2hlaWdodDo4ZW07d2lkdGg6M2VtO2xlZnQ6LTMwMDBlbTt0cmFuc2l0aW9uOnZpc2liaWxpdHkgMXMsb3BhY2l0eSAxcyxoZWlnaHQgMXMgMXMsd2lkdGggMXMgMXMsbGVmdCAxcyAxcyx0b3AgMXMgMXN9LnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1wYW5lbCAudmpzLXZvbHVtZS1jb250cm9sLnZqcy12b2x1bWUtaG9yaXpvbnRhbHt0cmFuc2l0aW9uOnZpc2liaWxpdHkgMXMsb3BhY2l0eSAxcyxoZWlnaHQgMXMgMXMsd2lkdGggMXMsbGVmdCAxcyAxcyx0b3AgMXMgMXN9LnpqYXBwIC52aWRlby1qcy52anMtbm8tZmxleCAudmpzLXZvbHVtZS1wYW5lbCAudmpzLXZvbHVtZS1jb250cm9sLnZqcy12b2x1bWUtaG9yaXpvbnRhbHt3aWR0aDo1ZW07aGVpZ2h0OjNlbTt2aXNpYmlsaXR5OnZpc2libGU7b3BhY2l0eToxO3Bvc2l0aW9uOnJlbGF0aXZlO3RyYW5zaXRpb246bm9uZX0uemphcHAgLnZpZGVvLWpzLnZqcy1uby1mbGV4IC52anMtdm9sdW1lLWNvbnRyb2wudmpzLXZvbHVtZS12ZXJ0aWNhbCwuemphcHAgLnZpZGVvLWpzLnZqcy1uby1mbGV4IC52anMtdm9sdW1lLXBhbmVsIC52anMtdm9sdW1lLWNvbnRyb2wudmpzLXZvbHVtZS12ZXJ0aWNhbHtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206M2VtO2xlZnQ6LjVlbX0uemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLXBhbmVse2Rpc3BsYXk6ZmxleH0uemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLWJhcnttYXJnaW46MS4zNWVtIC40NWVtfS56amFwcCAudmpzLXZvbHVtZS1iYXIudmpzLXNsaWRlci1ob3Jpem9udGFse3dpZHRoOjVlbTtoZWlnaHQ6LjNlbX0uemphcHAgLnZqcy12b2x1bWUtYmFyLnZqcy1zbGlkZXItdmVydGljYWx7d2lkdGg6LjNlbTtoZWlnaHQ6NWVtO21hcmdpbjoxLjM1ZW0gYXV0b30uemphcHAgLnZpZGVvLWpzIC52anMtdm9sdW1lLWxldmVse3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowO2xlZnQ6MDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS1sZXZlbDpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7Zm9udC1zaXplOi45ZW19LnpqYXBwIC52anMtc2xpZGVyLXZlcnRpY2FsIC52anMtdm9sdW1lLWxldmVse3dpZHRoOi4zZW19LnpqYXBwIC52anMtc2xpZGVyLXZlcnRpY2FsIC52anMtdm9sdW1lLWxldmVsOmJlZm9yZXt0b3A6LS41ZW07bGVmdDotLjNlbX0uemphcHAgLnZqcy1zbGlkZXItaG9yaXpvbnRhbCAudmpzLXZvbHVtZS1sZXZlbHtoZWlnaHQ6LjNlbX0uemphcHAgLnZqcy1zbGlkZXItaG9yaXpvbnRhbCAudmpzLXZvbHVtZS1sZXZlbDpiZWZvcmV7dG9wOi0uM2VtO3JpZ2h0Oi0uNWVtfS56amFwcCAudmlkZW8tanMgLnZqcy12b2x1bWUtcGFuZWwudmpzLXZvbHVtZS1wYW5lbC12ZXJ0aWNhbHt3aWR0aDo0ZW19LnpqYXBwIC52anMtdm9sdW1lLWJhci52anMtc2xpZGVyLXZlcnRpY2FsIC52anMtdm9sdW1lLWxldmVse2hlaWdodDoxMDAlfS56amFwcCAudmpzLXZvbHVtZS1iYXIudmpzLXNsaWRlci1ob3Jpem9udGFsIC52anMtdm9sdW1lLWxldmVse3dpZHRoOjEwMCV9LnpqYXBwIC52aWRlby1qcyAudmpzLXZvbHVtZS12ZXJ0aWNhbHt3aWR0aDozZW07aGVpZ2h0OjhlbTtib3R0b206OGVtO2JhY2tncm91bmQtY29sb3I6IzJiMzMzZjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNDMsNTEsNjMsLjcpfS56amFwcCAudmlkZW8tanMgLnZqcy12b2x1bWUtaG9yaXpvbnRhbCAudmpzLW1lbnV7bGVmdDotMmVtfS56amFwcCAudmpzLXBvc3RlcntkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246NTAlIDUwJTtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtiYWNrZ3JvdW5kLWNvbG9yOiMwMDA7Y3Vyc29yOnBvaW50ZXI7bWFyZ2luOjA7cGFkZGluZzowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO2hlaWdodDoxMDAlfS56amFwcCAudmpzLWhhcy1zdGFydGVkIC52anMtcG9zdGVye2Rpc3BsYXk6bm9uZX0uemphcHAgLnZqcy1hdWRpby52anMtaGFzLXN0YXJ0ZWQgLnZqcy1wb3N0ZXJ7ZGlzcGxheTpibG9ja30uemphcHAgLnZqcy11c2luZy1uYXRpdmUtY29udHJvbHMgLnZqcy1wb3N0ZXJ7ZGlzcGxheTpub25lfS56amFwcCAudmlkZW8tanMgLnZqcy1saXZlLWNvbnRyb2x7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQ7ZmxleDphdXRvO2ZvbnQtc2l6ZToxZW07bGluZS1oZWlnaHQ6M2VtfS56amFwcCAudmpzLW5vLWZsZXggLnZqcy1saXZlLWNvbnRyb2x7ZGlzcGxheTp0YWJsZS1jZWxsO3dpZHRoOmF1dG87dGV4dC1hbGlnbjpsZWZ0fS56amFwcCAudmlkZW8tanMudmpzLWxpdmV1aSAudmpzLWxpdmUtY29udHJvbCwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWxpdmUpIC52anMtbGl2ZS1jb250cm9se2Rpc3BsYXk6bm9uZX0uemphcHAgLnZpZGVvLWpzIC52anMtc2Vlay10by1saXZlLWNvbnRyb2x7Y3Vyc29yOnBvaW50ZXI7ZmxleDpub25lO2Rpc3BsYXk6aW5saW5lLWZsZXg7aGVpZ2h0OjEwMCU7cGFkZGluZy1sZWZ0Oi41ZW07cGFkZGluZy1yaWdodDouNWVtO2ZvbnQtc2l6ZToxZW07bGluZS1oZWlnaHQ6M2VtO3dpZHRoOmF1dG87bWluLXdpZHRoOjRlbX0uemphcHAgLnZqcy1uby1mbGV4IC52anMtc2Vlay10by1saXZlLWNvbnRyb2x7ZGlzcGxheTp0YWJsZS1jZWxsO3dpZHRoOmF1dG87dGV4dC1hbGlnbjpsZWZ0fS56amFwcCAudmlkZW8tanMudmpzLWxpdmU6bm90KC52anMtbGl2ZXVpKSAudmpzLXNlZWstdG8tbGl2ZS1jb250cm9sLC56amFwcCAudmlkZW8tanM6bm90KC52anMtbGl2ZSkgLnZqcy1zZWVrLXRvLWxpdmUtY29udHJvbHtkaXNwbGF5Om5vbmV9LnpqYXBwIC52anMtc2Vlay10by1saXZlLWNvbnRyb2wudmpzLWNvbnRyb2wudmpzLWF0LWxpdmUtZWRnZXtjdXJzb3I6YXV0b30uemphcHAgLnZqcy1zZWVrLXRvLWxpdmUtY29udHJvbCAudmpzLWljb24tcGxhY2Vob2xkZXJ7bWFyZ2luLXJpZ2h0Oi41ZW07Y29sb3I6Izg4OH0uemphcHAgLnZqcy1zZWVrLXRvLWxpdmUtY29udHJvbC52anMtY29udHJvbC52anMtYXQtbGl2ZS1lZGdlIC52anMtaWNvbi1wbGFjZWhvbGRlcntjb2xvcjpyZWR9LnpqYXBwIC52aWRlby1qcyAudmpzLXRpbWUtY29udHJvbHtmbGV4Om5vbmU7Zm9udC1zaXplOjFlbTtsaW5lLWhlaWdodDozZW07bWluLXdpZHRoOjJlbTt3aWR0aDphdXRvO3BhZGRpbmctbGVmdDoxZW07cGFkZGluZy1yaWdodDoxZW19LnpqYXBwIC52aWRlby1qcyAudmpzLWN1cnJlbnQtdGltZSwuemphcHAgLnZpZGVvLWpzIC52anMtZHVyYXRpb24sLnpqYXBwIC52anMtbGl2ZSAudmpzLXRpbWUtY29udHJvbCwuemphcHAgLnZqcy1uby1mbGV4IC52anMtY3VycmVudC10aW1lLC56amFwcCAudmpzLW5vLWZsZXggLnZqcy1kdXJhdGlvbntkaXNwbGF5Om5vbmV9LnpqYXBwIC52anMtdGltZS1kaXZpZGVye2Rpc3BsYXk6bm9uZTtsaW5lLWhlaWdodDozZW19LnpqYXBwIC52anMtbGl2ZSAudmpzLXRpbWUtZGl2aWRlcntkaXNwbGF5Om5vbmV9LnpqYXBwIC52aWRlby1qcyAudmpzLXBsYXktY29udHJvbHtjdXJzb3I6cG9pbnRlcn0uemphcHAgLnZpZGVvLWpzIC52anMtcGxheS1jb250cm9sIC52anMtaWNvbi1wbGFjZWhvbGRlcntmbGV4Om5vbmV9LnpqYXBwIC52anMtdGV4dC10cmFjay1kaXNwbGF5e3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTozZW07bGVmdDowO3JpZ2h0OjA7dG9wOjA7cG9pbnRlci1ldmVudHM6bm9uZX0uemphcHAgLnZpZGVvLWpzLnZqcy11c2VyLWluYWN0aXZlLnZqcy1wbGF5aW5nIC52anMtdGV4dC10cmFjay1kaXNwbGF5e2JvdHRvbToxZW19LnpqYXBwIC52aWRlby1qcyAudmpzLXRleHQtdHJhY2t7Zm9udC1zaXplOjEuNGVtO3RleHQtYWxpZ246Y2VudGVyO21hcmdpbi1ib3R0b206LjFlbX0uemphcHAgLnZqcy1zdWJ0aXRsZXN7Y29sb3I6I2ZmZn0uemphcHAgLnZqcy1jYXB0aW9uc3tjb2xvcjojZmM2fS56amFwcCAudmpzLXR0LWN1ZXtkaXNwbGF5OmJsb2NrfS56amFwcCB2aWRlbzo6LXdlYmtpdC1tZWRpYS10ZXh0LXRyYWNrLWRpc3BsYXl7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTNlbSl9LnpqYXBwIC52aWRlby1qcy52anMtdXNlci1pbmFjdGl2ZS52anMtcGxheWluZyB2aWRlbzo6LXdlYmtpdC1tZWRpYS10ZXh0LXRyYWNrLWRpc3BsYXl7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEuNWVtKX0uemphcHAgLnZpZGVvLWpzIC52anMtZnVsbHNjcmVlbi1jb250cm9sLC56amFwcCAudmlkZW8tanMgLnZqcy1waWN0dXJlLWluLXBpY3R1cmUtY29udHJvbHtjdXJzb3I6cG9pbnRlcjtmbGV4Om5vbmV9LnpqYXBwIC52anMtcGxheWJhY2stcmF0ZSAudmpzLXBsYXliYWNrLXJhdGUtdmFsdWUsLnpqYXBwIC52anMtcGxheWJhY2stcmF0ZT4udmpzLW1lbnUtYnV0dG9ue3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS56amFwcCAudmpzLXBsYXliYWNrLXJhdGUgLnZqcy1wbGF5YmFjay1yYXRlLXZhbHVle3BvaW50ZXItZXZlbnRzOm5vbmU7Zm9udC1zaXplOjEuNWVtO2xpbmUtaGVpZ2h0OjI7dGV4dC1hbGlnbjpjZW50ZXJ9LnpqYXBwIC52anMtcGxheWJhY2stcmF0ZSAudmpzLW1lbnV7d2lkdGg6NGVtO2xlZnQ6MH0uemphcHAgLnZqcy1lcnJvciAudmpzLWVycm9yLWRpc3BsYXkgLnZqcy1tb2RhbC1kaWFsb2ctY29udGVudHtmb250LXNpemU6MS40ZW07dGV4dC1hbGlnbjpjZW50ZXJ9LnpqYXBwIC52anMtZXJyb3IgLnZqcy1lcnJvci1kaXNwbGF5OmJlZm9yZXtjb2xvcjojZmZmO2NvbnRlbnQ6XFxcIlhcXFwiO2ZvbnQtZmFtaWx5OkFyaWFsLEhlbHZldGljYSxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTo0ZW07bGVmdDowO2xpbmUtaGVpZ2h0OjE7bWFyZ2luLXRvcDotLjVlbTtwb3NpdGlvbjphYnNvbHV0ZTt0ZXh0LXNoYWRvdzouMDVlbSAuMDVlbSAuMWVtICMwMDA7dGV4dC1hbGlnbjpjZW50ZXI7dG9wOjUwJTt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7d2lkdGg6MTAwJX0uemphcHAgLnZqcy1sb2FkaW5nLXNwaW5uZXJ7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bGVmdDo1MCU7bWFyZ2luOi0yNXB4IDAgMCAtMjVweDtvcGFjaXR5Oi44NTt0ZXh0LWFsaWduOmxlZnQ7Ym9yZGVyOjZweCBzb2xpZCByZ2JhKDQzLDUxLDYzLC43KTtib3gtc2l6aW5nOmJvcmRlci1ib3g7YmFja2dyb3VuZC1jbGlwOnBhZGRpbmctYm94O3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7Ym9yZGVyLXJhZGl1czoyNXB4O3Zpc2liaWxpdHk6aGlkZGVufS56amFwcCAudmpzLXNlZWtpbmcgLnZqcy1sb2FkaW5nLXNwaW5uZXIsLnpqYXBwIC52anMtd2FpdGluZyAudmpzLWxvYWRpbmctc3Bpbm5lcntkaXNwbGF5OmJsb2NrOy13ZWJraXQtYW5pbWF0aW9uOnZqcy1zcGlubmVyLXNob3cgMHMgbGluZWFyIC4zcyBmb3J3YXJkczthbmltYXRpb246dmpzLXNwaW5uZXItc2hvdyAwcyBsaW5lYXIgLjNzIGZvcndhcmRzfS56amFwcCAudmpzLWxvYWRpbmctc3Bpbm5lcjphZnRlciwuemphcHAgLnZqcy1sb2FkaW5nLXNwaW5uZXI6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7bWFyZ2luOi02cHg7Ym94LXNpemluZzppbmhlcml0O3dpZHRoOmluaGVyaXQ7aGVpZ2h0OmluaGVyaXQ7Ym9yZGVyLXJhZGl1czppbmhlcml0O29wYWNpdHk6MTtib3JkZXI6aW5oZXJpdDtib3JkZXItY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyLXRvcC1jb2xvcjojZmZmfS56amFwcCAudmpzLXNlZWtpbmcgLnZqcy1sb2FkaW5nLXNwaW5uZXI6YWZ0ZXIsLnpqYXBwIC52anMtc2Vla2luZyAudmpzLWxvYWRpbmctc3Bpbm5lcjpiZWZvcmUsLnpqYXBwIC52anMtd2FpdGluZyAudmpzLWxvYWRpbmctc3Bpbm5lcjphZnRlciwuemphcHAgLnZqcy13YWl0aW5nIC52anMtbG9hZGluZy1zcGlubmVyOmJlZm9yZXstd2Via2l0LWFuaW1hdGlvbjp2anMtc3Bpbm5lci1zcGluIDEuMXMgY3ViaWMtYmV6aWVyKC42LC4yLDAsLjgpIGluZmluaXRlLHZqcy1zcGlubmVyLWZhZGUgMS4xcyBsaW5lYXIgaW5maW5pdGU7YW5pbWF0aW9uOnZqcy1zcGlubmVyLXNwaW4gMS4xcyBjdWJpYy1iZXppZXIoLjYsLjIsMCwuOCkgaW5maW5pdGUsdmpzLXNwaW5uZXItZmFkZSAxLjFzIGxpbmVhciBpbmZpbml0ZX0uemphcHAgLnZqcy1zZWVraW5nIC52anMtbG9hZGluZy1zcGlubmVyOmJlZm9yZSwuemphcHAgLnZqcy13YWl0aW5nIC52anMtbG9hZGluZy1zcGlubmVyOmJlZm9yZXtib3JkZXItdG9wLWNvbG9yOiNmZmZ9LnpqYXBwIC52anMtc2Vla2luZyAudmpzLWxvYWRpbmctc3Bpbm5lcjphZnRlciwuemphcHAgLnZqcy13YWl0aW5nIC52anMtbG9hZGluZy1zcGlubmVyOmFmdGVye2JvcmRlci10b3AtY29sb3I6I2ZmZjstd2Via2l0LWFuaW1hdGlvbi1kZWxheTouNDRzO2FuaW1hdGlvbi1kZWxheTouNDRzfUBrZXlmcmFtZXMgdmpzLXNwaW5uZXItc2hvd3t0b3t2aXNpYmlsaXR5OnZpc2libGV9fUAtd2Via2l0LWtleWZyYW1lcyB2anMtc3Bpbm5lci1zaG93e3Rve3Zpc2liaWxpdHk6dmlzaWJsZX19QGtleWZyYW1lcyB2anMtc3Bpbm5lci1zcGlue3Rve3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1ALXdlYmtpdC1rZXlmcmFtZXMgdmpzLXNwaW5uZXItc3Bpbnt0b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1Aa2V5ZnJhbWVzIHZqcy1zcGlubmVyLWZhZGV7MCV7Ym9yZGVyLXRvcC1jb2xvcjojNzM4NTlmfTIwJXtib3JkZXItdG9wLWNvbG9yOiM3Mzg1OWZ9MzUle2JvcmRlci10b3AtY29sb3I6I2ZmZn02MCV7Ym9yZGVyLXRvcC1jb2xvcjojNzM4NTlmfXRve2JvcmRlci10b3AtY29sb3I6IzczODU5Zn19QC13ZWJraXQta2V5ZnJhbWVzIHZqcy1zcGlubmVyLWZhZGV7MCV7Ym9yZGVyLXRvcC1jb2xvcjojNzM4NTlmfTIwJXtib3JkZXItdG9wLWNvbG9yOiM3Mzg1OWZ9MzUle2JvcmRlci10b3AtY29sb3I6I2ZmZn02MCV7Ym9yZGVyLXRvcC1jb2xvcjojNzM4NTlmfXRve2JvcmRlci10b3AtY29sb3I6IzczODU5Zn19LnpqYXBwIC52anMtY2hhcHRlcnMtYnV0dG9uIC52anMtbWVudSB1bHt3aWR0aDoyNGVtfS56amFwcCAudmlkZW8tanMgLnZqcy1zdWJzLWNhcHMtYnV0dG9uKy52anMtbWVudSAudmpzLWNhcHRpb25zLW1lbnUtaXRlbSAudmpzLW1lbnUtaXRlbS10ZXh0IC52anMtaWNvbi1wbGFjZWhvbGRlcnt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWJvdHRvbTotLjFlbX0uemphcHAgLnZpZGVvLWpzIC52anMtc3Vicy1jYXBzLWJ1dHRvbisudmpzLW1lbnUgLnZqcy1jYXB0aW9ucy1tZW51LWl0ZW0gLnZqcy1tZW51LWl0ZW0tdGV4dCAudmpzLWljb24tcGxhY2Vob2xkZXI6YmVmb3Jle2ZvbnQtZmFtaWx5OlZpZGVvSlM7Y29udGVudDpcXFwiXFxcXEYxMERcXFwiO2ZvbnQtc2l6ZToxLjVlbTtsaW5lLWhlaWdodDppbmhlcml0fS56amFwcCAudmlkZW8tanMgLnZqcy1hdWRpby1idXR0b24rLnZqcy1tZW51IC52anMtbWFpbi1kZXNjLW1lbnUtaXRlbSAudmpzLW1lbnUtaXRlbS10ZXh0IC52anMtaWNvbi1wbGFjZWhvbGRlcnt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWJvdHRvbTotLjFlbX0uemphcHAgLnZpZGVvLWpzIC52anMtYXVkaW8tYnV0dG9uKy52anMtbWVudSAudmpzLW1haW4tZGVzYy1tZW51LWl0ZW0gLnZqcy1tZW51LWl0ZW0tdGV4dCAudmpzLWljb24tcGxhY2Vob2xkZXI6YmVmb3Jle2ZvbnQtZmFtaWx5OlZpZGVvSlM7Y29udGVudDpcXFwiIFxcXFxGMTFEXFxcIjtmb250LXNpemU6MS41ZW07bGluZS1oZWlnaHQ6aW5oZXJpdH0uemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQtc21hbGwgLnZqcy1hdWRpby1idXR0b24sLnpqYXBwIC52aWRlby1qczpub3QoLnZqcy1mdWxsc2NyZWVuKS52anMtbGF5b3V0LXNtYWxsIC52anMtY2FwdGlvbnMtYnV0dG9uLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC1zbWFsbCAudmpzLWNoYXB0ZXJzLWJ1dHRvbiwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQtc21hbGwgLnZqcy1jdXJyZW50LXRpbWUsLnpqYXBwIC52aWRlby1qczpub3QoLnZqcy1mdWxsc2NyZWVuKS52anMtbGF5b3V0LXNtYWxsIC52anMtZGVzY3JpcHRpb25zLWJ1dHRvbiwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQtc21hbGwgLnZqcy1kdXJhdGlvbiwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQtc21hbGwgLnZqcy1wbGF5YmFjay1yYXRlLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC1zbWFsbCAudmpzLXJlbWFpbmluZy10aW1lLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC1zbWFsbCAudmpzLXN1YnRpdGxlcy1idXR0b24sLnpqYXBwIC52aWRlby1qczpub3QoLnZqcy1mdWxsc2NyZWVuKS52anMtbGF5b3V0LXNtYWxsIC52anMtdGltZS1kaXZpZGVyLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC1zbWFsbCAudmpzLXZvbHVtZS1jb250cm9sLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtYXVkaW8tYnV0dG9uLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtY2FwdGlvbnMtYnV0dG9uLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtY2hhcHRlcnMtYnV0dG9uLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtY3VycmVudC10aW1lLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtZGVzY3JpcHRpb25zLWJ1dHRvbiwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQtdGlueSAudmpzLWR1cmF0aW9uLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtcGxheWJhY2stcmF0ZSwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQtdGlueSAudmpzLXJlbWFpbmluZy10aW1lLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtc3VidGl0bGVzLWJ1dHRvbiwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQtdGlueSAudmpzLXRpbWUtZGl2aWRlciwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQtdGlueSAudmpzLXZvbHVtZS1jb250cm9sLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC14LXNtYWxsIC52anMtYXVkaW8tYnV0dG9uLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC14LXNtYWxsIC52anMtY2FwdGlvbnMtYnV0dG9uLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC14LXNtYWxsIC52anMtY2hhcHRlcnMtYnV0dG9uLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC14LXNtYWxsIC52anMtY3VycmVudC10aW1lLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC14LXNtYWxsIC52anMtZGVzY3JpcHRpb25zLWJ1dHRvbiwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQteC1zbWFsbCAudmpzLWR1cmF0aW9uLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC14LXNtYWxsIC52anMtcGxheWJhY2stcmF0ZSwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQteC1zbWFsbCAudmpzLXJlbWFpbmluZy10aW1lLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC14LXNtYWxsIC52anMtc3VidGl0bGVzLWJ1dHRvbiwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQteC1zbWFsbCAudmpzLXRpbWUtZGl2aWRlciwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQteC1zbWFsbCAudmpzLXZvbHVtZS1jb250cm9se2Rpc3BsYXk6bm9uZX0uemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQtc21hbGwgLnZqcy12b2x1bWUtcGFuZWwudmpzLXZvbHVtZS1wYW5lbC1ob3Jpem9udGFsLnZqcy1zbGlkZXItYWN0aXZlLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC1zbWFsbCAudmpzLXZvbHVtZS1wYW5lbC52anMtdm9sdW1lLXBhbmVsLWhvcml6b250YWw6YWN0aXZlLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC1zbWFsbCAudmpzLXZvbHVtZS1wYW5lbC52anMtdm9sdW1lLXBhbmVsLWhvcml6b250YWw6aG92ZXIsLnpqYXBwIC52aWRlby1qczpub3QoLnZqcy1mdWxsc2NyZWVuKS52anMtbGF5b3V0LXRpbnkgLnZqcy12b2x1bWUtcGFuZWwudmpzLXZvbHVtZS1wYW5lbC1ob3Jpem9udGFsLnZqcy1zbGlkZXItYWN0aXZlLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtdm9sdW1lLXBhbmVsLnZqcy12b2x1bWUtcGFuZWwtaG9yaXpvbnRhbDphY3RpdmUsLnpqYXBwIC52aWRlby1qczpub3QoLnZqcy1mdWxsc2NyZWVuKS52anMtbGF5b3V0LXRpbnkgLnZqcy12b2x1bWUtcGFuZWwudmpzLXZvbHVtZS1wYW5lbC1ob3Jpem9udGFsOmhvdmVyLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC14LXNtYWxsIC52anMtdm9sdW1lLXBhbmVsLnZqcy12b2x1bWUtcGFuZWwtaG9yaXpvbnRhbC52anMtc2xpZGVyLWFjdGl2ZSwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQteC1zbWFsbCAudmpzLXZvbHVtZS1wYW5lbC52anMtdm9sdW1lLXBhbmVsLWhvcml6b250YWw6YWN0aXZlLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC14LXNtYWxsIC52anMtdm9sdW1lLXBhbmVsLnZqcy12b2x1bWUtcGFuZWwtaG9yaXpvbnRhbDpob3Zlcnt3aWR0aDphdXRvfS56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtc3Vicy1jYXBzLWJ1dHRvbiwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQteC1zbWFsbDpub3QoLnZqcy1saXZlKSAudmpzLXN1YnMtY2Fwcy1idXR0b24sLnpqYXBwIC52aWRlby1qczpub3QoLnZqcy1mdWxsc2NyZWVuKS52anMtbGF5b3V0LXgtc21hbGw6bm90KC52anMtbGl2ZXVpKSAudmpzLXN1YnMtY2Fwcy1idXR0b257ZGlzcGxheTpub25lfS56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtY3VzdG9tLWNvbnRyb2wtc3BhY2VyLC56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC14LXNtYWxsLnZqcy1saXZldWkgLnZqcy1jdXN0b20tY29udHJvbC1zcGFjZXJ7ZmxleDphdXRvO2Rpc3BsYXk6YmxvY2t9LnpqYXBwIC52aWRlby1qczpub3QoLnZqcy1mdWxsc2NyZWVuKS52anMtbGF5b3V0LXRpbnkudmpzLW5vLWZsZXggLnZqcy1jdXN0b20tY29udHJvbC1zcGFjZXIsLnpqYXBwIC52aWRlby1qczpub3QoLnZqcy1mdWxsc2NyZWVuKS52anMtbGF5b3V0LXgtc21hbGwudmpzLWxpdmV1aS52anMtbm8tZmxleCAudmpzLWN1c3RvbS1jb250cm9sLXNwYWNlcnt3aWR0aDphdXRvfS56amFwcCAudmlkZW8tanM6bm90KC52anMtZnVsbHNjcmVlbikudmpzLWxheW91dC10aW55IC52anMtcHJvZ3Jlc3MtY29udHJvbCwuemphcHAgLnZpZGVvLWpzOm5vdCgudmpzLWZ1bGxzY3JlZW4pLnZqcy1sYXlvdXQteC1zbWFsbC52anMtbGl2ZXVpIC52anMtcHJvZ3Jlc3MtY29udHJvbHtkaXNwbGF5Om5vbmV9LnpqYXBwIC52anMtbW9kYWwtZGlhbG9nLnZqcy10ZXh0LXRyYWNrLXNldHRpbmdze2JhY2tncm91bmQtY29sb3I6IzJiMzMzZjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNDMsNTEsNjMsLjc1KTtjb2xvcjojZmZmO2hlaWdodDo3MCV9LnpqYXBwIC52anMtdGV4dC10cmFjay1zZXR0aW5ncyAudmpzLW1vZGFsLWRpYWxvZy1jb250ZW50e2Rpc3BsYXk6dGFibGV9LnpqYXBwIC52anMtdGV4dC10cmFjay1zZXR0aW5ncyAudmpzLXRyYWNrLXNldHRpbmdzLWNvbG9ycywuemphcHAgLnZqcy10ZXh0LXRyYWNrLXNldHRpbmdzIC52anMtdHJhY2stc2V0dGluZ3MtY29udHJvbHMsLnpqYXBwIC52anMtdGV4dC10cmFjay1zZXR0aW5ncyAudmpzLXRyYWNrLXNldHRpbmdzLWZvbnR7ZGlzcGxheTp0YWJsZS1jZWxsfS56amFwcCAudmpzLXRleHQtdHJhY2stc2V0dGluZ3MgLnZqcy10cmFjay1zZXR0aW5ncy1jb250cm9sc3t0ZXh0LWFsaWduOnJpZ2h0O3ZlcnRpY2FsLWFsaWduOmJvdHRvbX1Ac3VwcG9ydHMgKGRpc3BsYXk6Z3JpZCl7LnpqYXBwIC52anMtdGV4dC10cmFjay1zZXR0aW5ncyAudmpzLW1vZGFsLWRpYWxvZy1jb250ZW50e2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6MWZyIDFmcjtncmlkLXRlbXBsYXRlLXJvd3M6MWZyO3BhZGRpbmc6MjBweCAyNHB4IDAgMjRweH0uemphcHAgLnZqcy10cmFjay1zZXR0aW5ncy1jb250cm9scyAudmpzLWRlZmF1bHQtYnV0dG9ue21hcmdpbi1ib3R0b206MjBweH0uemphcHAgLnZqcy10ZXh0LXRyYWNrLXNldHRpbmdzIC52anMtdHJhY2stc2V0dGluZ3MtY29udHJvbHN7Z3JpZC1jb2x1bW46MS8tMX0uemphcHAgLnZqcy1sYXlvdXQtc21hbGwgLnZqcy10ZXh0LXRyYWNrLXNldHRpbmdzIC52anMtbW9kYWwtZGlhbG9nLWNvbnRlbnQsLnpqYXBwIC52anMtbGF5b3V0LXRpbnkgLnZqcy10ZXh0LXRyYWNrLXNldHRpbmdzIC52anMtbW9kYWwtZGlhbG9nLWNvbnRlbnQsLnpqYXBwIC52anMtbGF5b3V0LXgtc21hbGwgLnZqcy10ZXh0LXRyYWNrLXNldHRpbmdzIC52anMtbW9kYWwtZGlhbG9nLWNvbnRlbnR7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjFmcn19LnpqYXBwIC52anMtdHJhY2stc2V0dGluZz5zZWxlY3R7bWFyZ2luLXJpZ2h0OjFlbTttYXJnaW4tYm90dG9tOi41ZW19LnpqYXBwIC52anMtdGV4dC10cmFjay1zZXR0aW5ncyBmaWVsZHNldHttYXJnaW46NXB4O3BhZGRpbmc6M3B4O2JvcmRlcjpub25lfS56amFwcCAudmpzLXRleHQtdHJhY2stc2V0dGluZ3MgZmllbGRzZXQgc3BhbntkaXNwbGF5OmlubGluZS1ibG9ja30uemphcHAgLnZqcy10ZXh0LXRyYWNrLXNldHRpbmdzIGZpZWxkc2V0IHNwYW4+c2VsZWN0e21heC13aWR0aDo3LjNlbX0uemphcHAgLnZqcy10ZXh0LXRyYWNrLXNldHRpbmdzIGxlZ2VuZHtjb2xvcjojZmZmO21hcmdpbjowIDAgNXB4IDB9LnpqYXBwIC52anMtdGV4dC10cmFjay1zZXR0aW5ncyAudmpzLWxhYmVse3Bvc2l0aW9uOmFic29sdXRlO2NsaXA6cmVjdCgxcHggMXB4IDFweCAxcHgpO2NsaXA6cmVjdCgxcHgsMXB4LDFweCwxcHgpO2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjAgMCA1cHggMDtwYWRkaW5nOjA7Ym9yZGVyOjA7aGVpZ2h0OjFweDt3aWR0aDoxcHg7b3ZlcmZsb3c6aGlkZGVufS56amFwcCAudmpzLXRyYWNrLXNldHRpbmdzLWNvbnRyb2xzIGJ1dHRvbjphY3RpdmUsLnpqYXBwIC52anMtdHJhY2stc2V0dGluZ3MtY29udHJvbHMgYnV0dG9uOmZvY3Vze291dGxpbmUtc3R5bGU6c29saWQ7b3V0bGluZS13aWR0aDptZWRpdW07YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQoMGRlZywjZmZmIDg4JSwjNzM4NTlmKX0uemphcHAgLnZqcy10cmFjay1zZXR0aW5ncy1jb250cm9scyBidXR0b246aG92ZXJ7Y29sb3I6cmdiYSg0Myw1MSw2MywuNzUpfS56amFwcCAudmpzLXRyYWNrLXNldHRpbmdzLWNvbnRyb2xzIGJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQoLTE4MGRlZywjZmZmIDg4JSwjNzM4NTlmKTtjb2xvcjojMmIzMzNmO2N1cnNvcjpwb2ludGVyO2JvcmRlci1yYWRpdXM6MnB4fS56amFwcCAudmpzLXRyYWNrLXNldHRpbmdzLWNvbnRyb2xzIC52anMtZGVmYXVsdC1idXR0b257bWFyZ2luLXJpZ2h0OjFlbX1AbWVkaWEgcHJpbnR7LnpqYXBwIC52aWRlby1qcz46bm90KC52anMtdGVjaCk6bm90KC52anMtcG9zdGVyKXt2aXNpYmlsaXR5OmhpZGRlbn19LnpqYXBwIC52anMtcmVzaXplLW1hbmFnZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Ym9yZGVyOm5vbmU7ei1pbmRleDotMTAwMH0uemphcHAgLmpzLWZvY3VzLXZpc2libGUgLnZpZGVvLWpzIDpmb2N1czpub3QoLmZvY3VzLXZpc2libGUpLC56amFwcCAudmlkZW8tanMgLnZqcy1tZW51IDpmb2N1czpub3QoOmZvY3VzLXZpc2libGUpLC56amFwcCAudmlkZW8tanMgOmZvY3VzOm5vdCg6Zm9jdXMtdmlzaWJsZSl7b3V0bGluZTpub25lO2JhY2tncm91bmQ6bm9uZX1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvLyBTb3VyY2U6IGh0dHA6Ly9qc2ZpZGRsZS5uZXQvdld4OFYvXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU2MDMxOTUvZnVsbC1saXN0LW9mLWphdmFzY3JpcHQta2V5Y29kZXNcblxuLyoqXG4gKiBDb25lbmllbmNlIG1ldGhvZCByZXR1cm5zIGNvcnJlc3BvbmRpbmcgdmFsdWUgZm9yIGdpdmVuIGtleU5hbWUgb3Iga2V5Q29kZS5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBrZXlDb2RlIHtOdW1iZXJ9IG9yIGtleU5hbWUge1N0cmluZ31cbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBrZXlDb2RlKHNlYXJjaElucHV0KSB7XG4gIC8vIEtleWJvYXJkIEV2ZW50c1xuICBpZiAoc2VhcmNoSW5wdXQgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBzZWFyY2hJbnB1dCkge1xuICAgIHZhciBoYXNLZXlDb2RlID0gc2VhcmNoSW5wdXQud2hpY2ggfHwgc2VhcmNoSW5wdXQua2V5Q29kZSB8fCBzZWFyY2hJbnB1dC5jaGFyQ29kZVxuICAgIGlmIChoYXNLZXlDb2RlKSBzZWFyY2hJbnB1dCA9IGhhc0tleUNvZGVcbiAgfVxuXG4gIC8vIE51bWJlcnNcbiAgaWYgKCdudW1iZXInID09PSB0eXBlb2Ygc2VhcmNoSW5wdXQpIHJldHVybiBuYW1lc1tzZWFyY2hJbnB1dF1cblxuICAvLyBFdmVyeXRoaW5nIGVsc2UgKGNhc3QgdG8gc3RyaW5nKVxuICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaElucHV0KVxuXG4gIC8vIGNoZWNrIGNvZGVzXG4gIHZhciBmb3VuZE5hbWVkS2V5ID0gY29kZXNbc2VhcmNoLnRvTG93ZXJDYXNlKCldXG4gIGlmIChmb3VuZE5hbWVkS2V5KSByZXR1cm4gZm91bmROYW1lZEtleVxuXG4gIC8vIGNoZWNrIGFsaWFzZXNcbiAgdmFyIGZvdW5kTmFtZWRLZXkgPSBhbGlhc2VzW3NlYXJjaC50b0xvd2VyQ2FzZSgpXVxuICBpZiAoZm91bmROYW1lZEtleSkgcmV0dXJuIGZvdW5kTmFtZWRLZXlcblxuICAvLyB3ZWlyZCBjaGFyYWN0ZXI/XG4gIGlmIChzZWFyY2gubGVuZ3RoID09PSAxKSByZXR1cm4gc2VhcmNoLmNoYXJDb2RlQXQoMClcblxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbi8qKlxuICogQ29tcGFyZXMgYSBrZXlib2FyZCBldmVudCB3aXRoIGEgZ2l2ZW4ga2V5Q29kZSBvciBrZXlOYW1lLlxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEtleWJvYXJkIGV2ZW50IHRoYXQgc2hvdWxkIGJlIHRlc3RlZFxuICogQHBhcmFtIHtNaXhlZH0ga2V5Q29kZSB7TnVtYmVyfSBvciBrZXlOYW1lIHtTdHJpbmd9XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xua2V5Q29kZS5pc0V2ZW50S2V5ID0gZnVuY3Rpb24gaXNFdmVudEtleShldmVudCwgbmFtZU9yQ29kZSkge1xuICBpZiAoZXZlbnQgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBldmVudCkge1xuICAgIHZhciBrZXlDb2RlID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZSB8fCBldmVudC5jaGFyQ29kZVxuICAgIGlmIChrZXlDb2RlID09PSBudWxsIHx8IGtleUNvZGUgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAodHlwZW9mIG5hbWVPckNvZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBjaGVjayBjb2Rlc1xuICAgICAgdmFyIGZvdW5kTmFtZWRLZXkgPSBjb2Rlc1tuYW1lT3JDb2RlLnRvTG93ZXJDYXNlKCldXG4gICAgICBpZiAoZm91bmROYW1lZEtleSkgeyByZXR1cm4gZm91bmROYW1lZEtleSA9PT0ga2V5Q29kZTsgfVxuICAgIFxuICAgICAgLy8gY2hlY2sgYWxpYXNlc1xuICAgICAgdmFyIGZvdW5kTmFtZWRLZXkgPSBhbGlhc2VzW25hbWVPckNvZGUudG9Mb3dlckNhc2UoKV1cbiAgICAgIGlmIChmb3VuZE5hbWVkS2V5KSB7IHJldHVybiBmb3VuZE5hbWVkS2V5ID09PSBrZXlDb2RlOyB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZU9yQ29kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBuYW1lT3JDb2RlID09PSBrZXlDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ga2V5Q29kZTtcblxuLyoqXG4gKiBHZXQgYnkgbmFtZVxuICpcbiAqICAgZXhwb3J0cy5jb2RlWydlbnRlciddIC8vID0+IDEzXG4gKi9cblxudmFyIGNvZGVzID0gZXhwb3J0cy5jb2RlID0gZXhwb3J0cy5jb2RlcyA9IHtcbiAgJ2JhY2tzcGFjZSc6IDgsXG4gICd0YWInOiA5LFxuICAnZW50ZXInOiAxMyxcbiAgJ3NoaWZ0JzogMTYsXG4gICdjdHJsJzogMTcsXG4gICdhbHQnOiAxOCxcbiAgJ3BhdXNlL2JyZWFrJzogMTksXG4gICdjYXBzIGxvY2snOiAyMCxcbiAgJ2VzYyc6IDI3LFxuICAnc3BhY2UnOiAzMixcbiAgJ3BhZ2UgdXAnOiAzMyxcbiAgJ3BhZ2UgZG93bic6IDM0LFxuICAnZW5kJzogMzUsXG4gICdob21lJzogMzYsXG4gICdsZWZ0JzogMzcsXG4gICd1cCc6IDM4LFxuICAncmlnaHQnOiAzOSxcbiAgJ2Rvd24nOiA0MCxcbiAgJ2luc2VydCc6IDQ1LFxuICAnZGVsZXRlJzogNDYsXG4gICdjb21tYW5kJzogOTEsXG4gICdsZWZ0IGNvbW1hbmQnOiA5MSxcbiAgJ3JpZ2h0IGNvbW1hbmQnOiA5MyxcbiAgJ251bXBhZCAqJzogMTA2LFxuICAnbnVtcGFkICsnOiAxMDcsXG4gICdudW1wYWQgLSc6IDEwOSxcbiAgJ251bXBhZCAuJzogMTEwLFxuICAnbnVtcGFkIC8nOiAxMTEsXG4gICdudW0gbG9jayc6IDE0NCxcbiAgJ3Njcm9sbCBsb2NrJzogMTQ1LFxuICAnbXkgY29tcHV0ZXInOiAxODIsXG4gICdteSBjYWxjdWxhdG9yJzogMTgzLFxuICAnOyc6IDE4NixcbiAgJz0nOiAxODcsXG4gICcsJzogMTg4LFxuICAnLSc6IDE4OSxcbiAgJy4nOiAxOTAsXG4gICcvJzogMTkxLFxuICAnYCc6IDE5MixcbiAgJ1snOiAyMTksXG4gICdcXFxcJzogMjIwLFxuICAnXSc6IDIyMSxcbiAgXCInXCI6IDIyMlxufVxuXG4vLyBIZWxwZXIgYWxpYXNlc1xuXG52YXIgYWxpYXNlcyA9IGV4cG9ydHMuYWxpYXNlcyA9IHtcbiAgJ3dpbmRvd3MnOiA5MSxcbiAgJ+KHpyc6IDE2LFxuICAn4oylJzogMTgsXG4gICfijIMnOiAxNyxcbiAgJ+KMmCc6IDkxLFxuICAnY3RsJzogMTcsXG4gICdjb250cm9sJzogMTcsXG4gICdvcHRpb24nOiAxOCxcbiAgJ3BhdXNlJzogMTksXG4gICdicmVhayc6IDE5LFxuICAnY2Fwcyc6IDIwLFxuICAncmV0dXJuJzogMTMsXG4gICdlc2NhcGUnOiAyNyxcbiAgJ3NwYyc6IDMyLFxuICAnc3BhY2ViYXInOiAzMixcbiAgJ3BndXAnOiAzMyxcbiAgJ3BnZG4nOiAzNCxcbiAgJ2lucyc6IDQ1LFxuICAnZGVsJzogNDYsXG4gICdjbWQnOiA5MVxufVxuXG4vKiFcbiAqIFByb2dyYW1hdGljYWxseSBhZGQgdGhlIGZvbGxvd2luZ1xuICovXG5cbi8vIGxvd2VyIGNhc2UgY2hhcnNcbmZvciAoaSA9IDk3OyBpIDwgMTIzOyBpKyspIGNvZGVzW1N0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaSAtIDMyXG5cbi8vIG51bWJlcnNcbmZvciAodmFyIGkgPSA0ODsgaSA8IDU4OyBpKyspIGNvZGVzW2kgLSA0OF0gPSBpXG5cbi8vIGZ1bmN0aW9uIGtleXNcbmZvciAoaSA9IDE7IGkgPCAxMzsgaSsrKSBjb2Rlc1snZicraV0gPSBpICsgMTExXG5cbi8vIG51bXBhZCBrZXlzXG5mb3IgKGkgPSAwOyBpIDwgMTA7IGkrKykgY29kZXNbJ251bXBhZCAnK2ldID0gaSArIDk2XG5cbi8qKlxuICogR2V0IGJ5IGNvZGVcbiAqXG4gKiAgIGV4cG9ydHMubmFtZVsxM10gLy8gPT4gJ0VudGVyJ1xuICovXG5cbnZhciBuYW1lcyA9IGV4cG9ydHMubmFtZXMgPSBleHBvcnRzLnRpdGxlID0ge30gLy8gdGl0bGUgZm9yIGJhY2t3YXJkIGNvbXBhdFxuXG4vLyBDcmVhdGUgcmV2ZXJzZSBtYXBwaW5nXG5mb3IgKGkgaW4gY29kZXMpIG5hbWVzW2NvZGVzW2ldXSA9IGlcblxuLy8gQWRkIGFsaWFzZXNcbmZvciAodmFyIGFsaWFzIGluIGFsaWFzZXMpIHtcbiAgY29kZXNbYWxpYXNdID0gYWxpYXNlc1thbGlhc11cbn1cbiIsIi8qXG4gKiBET00gTGV2ZWwgMlxuICogT2JqZWN0IERPTUV4Y2VwdGlvblxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtRE9NLUxldmVsLTEvZWNtYS1zY3JpcHQtbGFuZ3VhZ2UtYmluZGluZy5odG1sXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDAvUkVDLURPTS1MZXZlbC0yLUNvcmUtMjAwMDExMTMvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG4gKi9cblxuZnVuY3Rpb24gY29weShzcmMsZGVzdCl7XG5cdGZvcih2YXIgcCBpbiBzcmMpe1xuXHRcdGRlc3RbcF0gPSBzcmNbcF07XG5cdH1cbn1cbi8qKlxuXlxcdytcXC5wcm90b3R5cGVcXC4oW19cXHddKylcXHMqPVxccyooKD86LipcXHtcXHMqP1tcXHJcXG5dW1xcc1xcU10qP159KXxcXFMuKj8oPz1bO1xcclxcbl0pKTs/XG5eXFx3K1xcLnByb3RvdHlwZVxcLihbX1xcd10rKVxccyo9XFxzKihcXFMuKj8oPz1bO1xcclxcbl0pKTs/XG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKENsYXNzLFN1cGVyKXtcblx0dmFyIHB0ID0gQ2xhc3MucHJvdG90eXBlO1xuXHRpZihPYmplY3QuY3JlYXRlKXtcblx0XHR2YXIgcHB0ID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpXG5cdFx0cHQuX19wcm90b19fID0gcHB0O1xuXHR9XG5cdGlmKCEocHQgaW5zdGFuY2VvZiBTdXBlcikpe1xuXHRcdGZ1bmN0aW9uIHQoKXt9O1xuXHRcdHQucHJvdG90eXBlID0gU3VwZXIucHJvdG90eXBlO1xuXHRcdHQgPSBuZXcgdCgpO1xuXHRcdGNvcHkocHQsdCk7XG5cdFx0Q2xhc3MucHJvdG90eXBlID0gcHQgPSB0O1xuXHR9XG5cdGlmKHB0LmNvbnN0cnVjdG9yICE9IENsYXNzKXtcblx0XHRpZih0eXBlb2YgQ2xhc3MgIT0gJ2Z1bmN0aW9uJyl7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwidW5rbm93IENsYXNzOlwiK0NsYXNzKVxuXHRcdH1cblx0XHRwdC5jb25zdHJ1Y3RvciA9IENsYXNzXG5cdH1cbn1cbnZhciBodG1sbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcgO1xuLy8gTm9kZSBUeXBlc1xudmFyIE5vZGVUeXBlID0ge31cbnZhciBFTEVNRU5UX05PREUgICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5FTEVNRU5UX05PREUgICAgICAgICAgICAgICAgPSAxO1xudmFyIEFUVFJJQlVURV9OT0RFICAgICAgICAgICAgICA9IE5vZGVUeXBlLkFUVFJJQlVURV9OT0RFICAgICAgICAgICAgICA9IDI7XG52YXIgVEVYVF9OT0RFICAgICAgICAgICAgICAgICAgID0gTm9kZVR5cGUuVEVYVF9OT0RFICAgICAgICAgICAgICAgICAgID0gMztcbnZhciBDREFUQV9TRUNUSU9OX05PREUgICAgICAgICAgPSBOb2RlVHlwZS5DREFUQV9TRUNUSU9OX05PREUgICAgICAgICAgPSA0O1xudmFyIEVOVElUWV9SRUZFUkVOQ0VfTk9ERSAgICAgICA9IE5vZGVUeXBlLkVOVElUWV9SRUZFUkVOQ0VfTk9ERSAgICAgICA9IDU7XG52YXIgRU5USVRZX05PREUgICAgICAgICAgICAgICAgID0gTm9kZVR5cGUuRU5USVRZX05PREUgICAgICAgICAgICAgICAgID0gNjtcbnZhciBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgPSBOb2RlVHlwZS5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgPSA3O1xudmFyIENPTU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IE5vZGVUeXBlLkNPTU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IDg7XG52YXIgRE9DVU1FTlRfTk9ERSAgICAgICAgICAgICAgID0gTm9kZVR5cGUuRE9DVU1FTlRfTk9ERSAgICAgICAgICAgICAgID0gOTtcbnZhciBET0NVTUVOVF9UWVBFX05PREUgICAgICAgICAgPSBOb2RlVHlwZS5ET0NVTUVOVF9UWVBFX05PREUgICAgICAgICAgPSAxMDtcbnZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFICAgICAgPSBOb2RlVHlwZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFICAgICAgPSAxMTtcbnZhciBOT1RBVElPTl9OT0RFICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5OT1RBVElPTl9OT0RFICAgICAgICAgICAgICAgPSAxMjtcblxuLy8gRXhjZXB0aW9uQ29kZVxudmFyIEV4Y2VwdGlvbkNvZGUgPSB7fVxudmFyIEV4Y2VwdGlvbk1lc3NhZ2UgPSB7fTtcbnZhciBJTkRFWF9TSVpFX0VSUiAgICAgICAgICAgICAgPSBFeGNlcHRpb25Db2RlLklOREVYX1NJWkVfRVJSICAgICAgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVsxXT1cIkluZGV4IHNpemUgZXJyb3JcIiksMSk7XG52YXIgRE9NU1RSSU5HX1NJWkVfRVJSICAgICAgICAgID0gRXhjZXB0aW9uQ29kZS5ET01TVFJJTkdfU0laRV9FUlIgICAgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMl09XCJET01TdHJpbmcgc2l6ZSBlcnJvclwiKSwyKTtcbnZhciBISUVSQVJDSFlfUkVRVUVTVF9FUlIgICAgICAgPSBFeGNlcHRpb25Db2RlLkhJRVJBUkNIWV9SRVFVRVNUX0VSUiAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVszXT1cIkhpZXJhcmNoeSByZXF1ZXN0IGVycm9yXCIpLDMpO1xudmFyIFdST05HX0RPQ1VNRU5UX0VSUiAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuV1JPTkdfRE9DVU1FTlRfRVJSICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzRdPVwiV3JvbmcgZG9jdW1lbnRcIiksNCk7XG52YXIgSU5WQUxJRF9DSEFSQUNURVJfRVJSICAgICAgID0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX0NIQVJBQ1RFUl9FUlIgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbNV09XCJJbnZhbGlkIGNoYXJhY3RlclwiKSw1KTtcbnZhciBOT19EQVRBX0FMTE9XRURfRVJSICAgICAgICAgPSBFeGNlcHRpb25Db2RlLk5PX0RBVEFfQUxMT1dFRF9FUlIgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVs2XT1cIk5vIGRhdGEgYWxsb3dlZFwiKSw2KTtcbnZhciBOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlIgPSBFeGNlcHRpb25Db2RlLk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiA9ICgoRXhjZXB0aW9uTWVzc2FnZVs3XT1cIk5vIG1vZGlmaWNhdGlvbiBhbGxvd2VkXCIpLDcpO1xudmFyIE5PVF9GT1VORF9FUlIgICAgICAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuTk9UX0ZPVU5EX0VSUiAgICAgICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzhdPVwiTm90IGZvdW5kXCIpLDgpO1xudmFyIE5PVF9TVVBQT1JURURfRVJSICAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuTk9UX1NVUFBPUlRFRF9FUlIgICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzldPVwiTm90IHN1cHBvcnRlZFwiKSw5KTtcbnZhciBJTlVTRV9BVFRSSUJVVEVfRVJSICAgICAgICAgPSBFeGNlcHRpb25Db2RlLklOVVNFX0FUVFJJQlVURV9FUlIgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVsxMF09XCJBdHRyaWJ1dGUgaW4gdXNlXCIpLDEwKTtcbi8vbGV2ZWwyXG52YXIgSU5WQUxJRF9TVEFURV9FUlIgICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLklOVkFMSURfU1RBVEVfRVJSICAgICAgICBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzExXT1cIkludmFsaWQgc3RhdGVcIiksMTEpO1xudmFyIFNZTlRBWF9FUlIgICAgICAgICAgICAgICBcdD0gRXhjZXB0aW9uQ29kZS5TWU5UQVhfRVJSICAgICAgICAgICAgICAgXHQ9ICgoRXhjZXB0aW9uTWVzc2FnZVsxMl09XCJTeW50YXggZXJyb3JcIiksMTIpO1xudmFyIElOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUiBcdD0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX01PRElGSUNBVElPTl9FUlIgXHQ9ICgoRXhjZXB0aW9uTWVzc2FnZVsxM109XCJJbnZhbGlkIG1vZGlmaWNhdGlvblwiKSwxMyk7XG52YXIgTkFNRVNQQUNFX0VSUiAgICAgICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLk5BTUVTUEFDRV9FUlIgICAgICAgICAgIFx0PSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMTRdPVwiSW52YWxpZCBuYW1lc3BhY2VcIiksMTQpO1xudmFyIElOVkFMSURfQUNDRVNTX0VSUiAgICAgICBcdD0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX0FDQ0VTU19FUlIgICAgICBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzE1XT1cIkludmFsaWQgYWNjZXNzXCIpLDE1KTtcblxuXG5mdW5jdGlvbiBET01FeGNlcHRpb24oY29kZSwgbWVzc2FnZSkge1xuXHRpZihtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3Ipe1xuXHRcdHZhciBlcnJvciA9IG1lc3NhZ2U7XG5cdH1lbHNle1xuXHRcdGVycm9yID0gdGhpcztcblx0XHRFcnJvci5jYWxsKHRoaXMsIEV4Y2VwdGlvbk1lc3NhZ2VbY29kZV0pO1xuXHRcdHRoaXMubWVzc2FnZSA9IEV4Y2VwdGlvbk1lc3NhZ2VbY29kZV07XG5cdFx0aWYoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIERPTUV4Y2VwdGlvbik7XG5cdH1cblx0ZXJyb3IuY29kZSA9IGNvZGU7XG5cdGlmKG1lc3NhZ2UpIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSArIFwiOiBcIiArIG1lc3NhZ2U7XG5cdHJldHVybiBlcnJvcjtcbn07XG5ET01FeGNlcHRpb24ucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuY29weShFeGNlcHRpb25Db2RlLERPTUV4Y2VwdGlvbilcbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAwL1JFQy1ET00tTGV2ZWwtMi1Db3JlLTIwMDAxMTEzL2NvcmUuaHRtbCNJRC01MzYyOTcxNzdcbiAqIFRoZSBOb2RlTGlzdCBpbnRlcmZhY2UgcHJvdmlkZXMgdGhlIGFic3RyYWN0aW9uIG9mIGFuIG9yZGVyZWQgY29sbGVjdGlvbiBvZiBub2Rlcywgd2l0aG91dCBkZWZpbmluZyBvciBjb25zdHJhaW5pbmcgaG93IHRoaXMgY29sbGVjdGlvbiBpcyBpbXBsZW1lbnRlZC4gTm9kZUxpc3Qgb2JqZWN0cyBpbiB0aGUgRE9NIGFyZSBsaXZlLlxuICogVGhlIGl0ZW1zIGluIHRoZSBOb2RlTGlzdCBhcmUgYWNjZXNzaWJsZSB2aWEgYW4gaW50ZWdyYWwgaW5kZXgsIHN0YXJ0aW5nIGZyb20gMC5cbiAqL1xuZnVuY3Rpb24gTm9kZUxpc3QoKSB7XG59O1xuTm9kZUxpc3QucHJvdG90eXBlID0ge1xuXHQvKipcblx0ICogVGhlIG51bWJlciBvZiBub2RlcyBpbiB0aGUgbGlzdC4gVGhlIHJhbmdlIG9mIHZhbGlkIGNoaWxkIG5vZGUgaW5kaWNlcyBpcyAwIHRvIGxlbmd0aC0xIGluY2x1c2l2ZS5cblx0ICogQHN0YW5kYXJkIGxldmVsMVxuXHQgKi9cblx0bGVuZ3RoOjAsIFxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaW5kZXh0aCBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLiBJZiBpbmRleCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG51bWJlciBvZiBub2RlcyBpbiB0aGUgbGlzdCwgdGhpcyByZXR1cm5zIG51bGwuXG5cdCAqIEBzdGFuZGFyZCBsZXZlbDFcblx0ICogQHBhcmFtIGluZGV4ICB1bnNpZ25lZCBsb25nIFxuXHQgKiAgIEluZGV4IGludG8gdGhlIGNvbGxlY3Rpb24uXG5cdCAqIEByZXR1cm4gTm9kZVxuXHQgKiBcdFRoZSBub2RlIGF0IHRoZSBpbmRleHRoIHBvc2l0aW9uIGluIHRoZSBOb2RlTGlzdCwgb3IgbnVsbCBpZiB0aGF0IGlzIG5vdCBhIHZhbGlkIGluZGV4LiBcblx0ICovXG5cdGl0ZW06IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXNbaW5kZXhdIHx8IG51bGw7XG5cdH0sXG5cdHRvU3RyaW5nOmZ1bmN0aW9uKGlzSFRNTCxub2RlRmlsdGVyKXtcblx0XHRmb3IodmFyIGJ1ZiA9IFtdLCBpID0gMDtpPHRoaXMubGVuZ3RoO2krKyl7XG5cdFx0XHRzZXJpYWxpemVUb1N0cmluZyh0aGlzW2ldLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcik7XG5cdFx0fVxuXHRcdHJldHVybiBidWYuam9pbignJyk7XG5cdH1cbn07XG5mdW5jdGlvbiBMaXZlTm9kZUxpc3Qobm9kZSxyZWZyZXNoKXtcblx0dGhpcy5fbm9kZSA9IG5vZGU7XG5cdHRoaXMuX3JlZnJlc2ggPSByZWZyZXNoXG5cdF91cGRhdGVMaXZlTGlzdCh0aGlzKTtcbn1cbmZ1bmN0aW9uIF91cGRhdGVMaXZlTGlzdChsaXN0KXtcblx0dmFyIGluYyA9IGxpc3QuX25vZGUuX2luYyB8fCBsaXN0Ll9ub2RlLm93bmVyRG9jdW1lbnQuX2luYztcblx0aWYobGlzdC5faW5jICE9IGluYyl7XG5cdFx0dmFyIGxzID0gbGlzdC5fcmVmcmVzaChsaXN0Ll9ub2RlKTtcblx0XHQvL2NvbnNvbGUubG9nKGxzLmxlbmd0aClcblx0XHRfX3NldF9fKGxpc3QsJ2xlbmd0aCcsbHMubGVuZ3RoKTtcblx0XHRjb3B5KGxzLGxpc3QpO1xuXHRcdGxpc3QuX2luYyA9IGluYztcblx0fVxufVxuTGl2ZU5vZGVMaXN0LnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaSl7XG5cdF91cGRhdGVMaXZlTGlzdCh0aGlzKTtcblx0cmV0dXJuIHRoaXNbaV07XG59XG5cbl9leHRlbmRzKExpdmVOb2RlTGlzdCxOb2RlTGlzdCk7XG4vKipcbiAqIFxuICogT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhlIE5hbWVkTm9kZU1hcCBpbnRlcmZhY2UgYXJlIHVzZWQgdG8gcmVwcmVzZW50IGNvbGxlY3Rpb25zIG9mIG5vZGVzIHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGJ5IG5hbWUuIE5vdGUgdGhhdCBOYW1lZE5vZGVNYXAgZG9lcyBub3QgaW5oZXJpdCBmcm9tIE5vZGVMaXN0OyBOYW1lZE5vZGVNYXBzIGFyZSBub3QgbWFpbnRhaW5lZCBpbiBhbnkgcGFydGljdWxhciBvcmRlci4gT2JqZWN0cyBjb250YWluZWQgaW4gYW4gb2JqZWN0IGltcGxlbWVudGluZyBOYW1lZE5vZGVNYXAgbWF5IGFsc28gYmUgYWNjZXNzZWQgYnkgYW4gb3JkaW5hbCBpbmRleCwgYnV0IHRoaXMgaXMgc2ltcGx5IHRvIGFsbG93IGNvbnZlbmllbnQgZW51bWVyYXRpb24gb2YgdGhlIGNvbnRlbnRzIG9mIGEgTmFtZWROb2RlTWFwLCBhbmQgZG9lcyBub3QgaW1wbHkgdGhhdCB0aGUgRE9NIHNwZWNpZmllcyBhbiBvcmRlciB0byB0aGVzZSBOb2Rlcy5cbiAqIE5hbWVkTm9kZU1hcCBvYmplY3RzIGluIHRoZSBET00gYXJlIGxpdmUuXG4gKiB1c2VkIGZvciBhdHRyaWJ1dGVzIG9yIERvY3VtZW50VHlwZSBlbnRpdGllcyBcbiAqL1xuZnVuY3Rpb24gTmFtZWROb2RlTWFwKCkge1xufTtcblxuZnVuY3Rpb24gX2ZpbmROb2RlSW5kZXgobGlzdCxub2RlKXtcblx0dmFyIGkgPSBsaXN0Lmxlbmd0aDtcblx0d2hpbGUoaS0tKXtcblx0XHRpZihsaXN0W2ldID09PSBub2RlKXtyZXR1cm4gaX1cblx0fVxufVxuXG5mdW5jdGlvbiBfYWRkTmFtZWROb2RlKGVsLGxpc3QsbmV3QXR0cixvbGRBdHRyKXtcblx0aWYob2xkQXR0cil7XG5cdFx0bGlzdFtfZmluZE5vZGVJbmRleChsaXN0LG9sZEF0dHIpXSA9IG5ld0F0dHI7XG5cdH1lbHNle1xuXHRcdGxpc3RbbGlzdC5sZW5ndGgrK10gPSBuZXdBdHRyO1xuXHR9XG5cdGlmKGVsKXtcblx0XHRuZXdBdHRyLm93bmVyRWxlbWVudCA9IGVsO1xuXHRcdHZhciBkb2MgPSBlbC5vd25lckRvY3VtZW50O1xuXHRcdGlmKGRvYyl7XG5cdFx0XHRvbGRBdHRyICYmIF9vblJlbW92ZUF0dHJpYnV0ZShkb2MsZWwsb2xkQXR0cik7XG5cdFx0XHRfb25BZGRBdHRyaWJ1dGUoZG9jLGVsLG5ld0F0dHIpO1xuXHRcdH1cblx0fVxufVxuZnVuY3Rpb24gX3JlbW92ZU5hbWVkTm9kZShlbCxsaXN0LGF0dHIpe1xuXHQvL2NvbnNvbGUubG9nKCdyZW1vdmUgYXR0cjonK2F0dHIpXG5cdHZhciBpID0gX2ZpbmROb2RlSW5kZXgobGlzdCxhdHRyKTtcblx0aWYoaT49MCl7XG5cdFx0dmFyIGxhc3RJbmRleCA9IGxpc3QubGVuZ3RoLTFcblx0XHR3aGlsZShpPGxhc3RJbmRleCl7XG5cdFx0XHRsaXN0W2ldID0gbGlzdFsrK2ldXG5cdFx0fVxuXHRcdGxpc3QubGVuZ3RoID0gbGFzdEluZGV4O1xuXHRcdGlmKGVsKXtcblx0XHRcdHZhciBkb2MgPSBlbC5vd25lckRvY3VtZW50O1xuXHRcdFx0aWYoZG9jKXtcblx0XHRcdFx0X29uUmVtb3ZlQXR0cmlidXRlKGRvYyxlbCxhdHRyKTtcblx0XHRcdFx0YXR0ci5vd25lckVsZW1lbnQgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fWVsc2V7XG5cdFx0dGhyb3cgRE9NRXhjZXB0aW9uKE5PVF9GT1VORF9FUlIsbmV3IEVycm9yKGVsLnRhZ05hbWUrJ0AnK2F0dHIpKVxuXHR9XG59XG5OYW1lZE5vZGVNYXAucHJvdG90eXBlID0ge1xuXHRsZW5ndGg6MCxcblx0aXRlbTpOb2RlTGlzdC5wcm90b3R5cGUuaXRlbSxcblx0Z2V0TmFtZWRJdGVtOiBmdW5jdGlvbihrZXkpIHtcbi8vXHRcdGlmKGtleS5pbmRleE9mKCc6Jyk+MCB8fCBrZXkgPT0gJ3htbG5zJyl7XG4vL1x0XHRcdHJldHVybiBudWxsO1xuLy9cdFx0fVxuXHRcdC8vY29uc29sZS5sb2coKVxuXHRcdHZhciBpID0gdGhpcy5sZW5ndGg7XG5cdFx0d2hpbGUoaS0tKXtcblx0XHRcdHZhciBhdHRyID0gdGhpc1tpXTtcblx0XHRcdC8vY29uc29sZS5sb2coYXR0ci5ub2RlTmFtZSxrZXkpXG5cdFx0XHRpZihhdHRyLm5vZGVOYW1lID09IGtleSl7XG5cdFx0XHRcdHJldHVybiBhdHRyO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0c2V0TmFtZWRJdGVtOiBmdW5jdGlvbihhdHRyKSB7XG5cdFx0dmFyIGVsID0gYXR0ci5vd25lckVsZW1lbnQ7XG5cdFx0aWYoZWwgJiYgZWwhPXRoaXMuX293bmVyRWxlbWVudCl7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKElOVVNFX0FUVFJJQlVURV9FUlIpO1xuXHRcdH1cblx0XHR2YXIgb2xkQXR0ciA9IHRoaXMuZ2V0TmFtZWRJdGVtKGF0dHIubm9kZU5hbWUpO1xuXHRcdF9hZGROYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cixvbGRBdHRyKTtcblx0XHRyZXR1cm4gb2xkQXR0cjtcblx0fSxcblx0LyogcmV0dXJucyBOb2RlICovXG5cdHNldE5hbWVkSXRlbU5TOiBmdW5jdGlvbihhdHRyKSB7Ly8gcmFpc2VzOiBXUk9OR19ET0NVTUVOVF9FUlIsTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSLElOVVNFX0FUVFJJQlVURV9FUlJcblx0XHR2YXIgZWwgPSBhdHRyLm93bmVyRWxlbWVudCwgb2xkQXR0cjtcblx0XHRpZihlbCAmJiBlbCE9dGhpcy5fb3duZXJFbGVtZW50KXtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSU5VU0VfQVRUUklCVVRFX0VSUik7XG5cdFx0fVxuXHRcdG9sZEF0dHIgPSB0aGlzLmdldE5hbWVkSXRlbU5TKGF0dHIubmFtZXNwYWNlVVJJLGF0dHIubG9jYWxOYW1lKTtcblx0XHRfYWRkTmFtZWROb2RlKHRoaXMuX293bmVyRWxlbWVudCx0aGlzLGF0dHIsb2xkQXR0cik7XG5cdFx0cmV0dXJuIG9sZEF0dHI7XG5cdH0sXG5cblx0LyogcmV0dXJucyBOb2RlICovXG5cdHJlbW92ZU5hbWVkSXRlbTogZnVuY3Rpb24oa2V5KSB7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldE5hbWVkSXRlbShrZXkpO1xuXHRcdF9yZW1vdmVOYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cik7XG5cdFx0cmV0dXJuIGF0dHI7XG5cdFx0XG5cdFx0XG5cdH0sLy8gcmFpc2VzOiBOT1RfRk9VTkRfRVJSLE5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUlxuXHRcblx0Ly9mb3IgbGV2ZWwyXG5cdHJlbW92ZU5hbWVkSXRlbU5TOmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSxsb2NhbE5hbWUpe1xuXHRcdHZhciBhdHRyID0gdGhpcy5nZXROYW1lZEl0ZW1OUyhuYW1lc3BhY2VVUkksbG9jYWxOYW1lKTtcblx0XHRfcmVtb3ZlTmFtZWROb2RlKHRoaXMuX293bmVyRWxlbWVudCx0aGlzLGF0dHIpO1xuXHRcdHJldHVybiBhdHRyO1xuXHR9LFxuXHRnZXROYW1lZEl0ZW1OUzogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcblx0XHR2YXIgaSA9IHRoaXMubGVuZ3RoO1xuXHRcdHdoaWxlKGktLSl7XG5cdFx0XHR2YXIgbm9kZSA9IHRoaXNbaV07XG5cdFx0XHRpZihub2RlLmxvY2FsTmFtZSA9PSBsb2NhbE5hbWUgJiYgbm9kZS5uYW1lc3BhY2VVUkkgPT0gbmFtZXNwYWNlVVJJKXtcblx0XHRcdFx0cmV0dXJuIG5vZGU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG59O1xuLyoqXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1ET00tTGV2ZWwtMS9sZXZlbC1vbmUtY29yZS5odG1sI0lELTEwMjE2MTQ5MFxuICovXG5mdW5jdGlvbiBET01JbXBsZW1lbnRhdGlvbigvKiBPYmplY3QgKi8gZmVhdHVyZXMpIHtcblx0dGhpcy5fZmVhdHVyZXMgPSB7fTtcblx0aWYgKGZlYXR1cmVzKSB7XG5cdFx0Zm9yICh2YXIgZmVhdHVyZSBpbiBmZWF0dXJlcykge1xuXHRcdFx0IHRoaXMuX2ZlYXR1cmVzID0gZmVhdHVyZXNbZmVhdHVyZV07XG5cdFx0fVxuXHR9XG59O1xuXG5ET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUgPSB7XG5cdGhhc0ZlYXR1cmU6IGZ1bmN0aW9uKC8qIHN0cmluZyAqLyBmZWF0dXJlLCAvKiBzdHJpbmcgKi8gdmVyc2lvbikge1xuXHRcdHZhciB2ZXJzaW9ucyA9IHRoaXMuX2ZlYXR1cmVzW2ZlYXR1cmUudG9Mb3dlckNhc2UoKV07XG5cdFx0aWYgKHZlcnNpb25zICYmICghdmVyc2lvbiB8fCB2ZXJzaW9uIGluIHZlcnNpb25zKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH0sXG5cdC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG5cdGNyZWF0ZURvY3VtZW50OmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgIHF1YWxpZmllZE5hbWUsIGRvY3R5cGUpey8vIHJhaXNlczpJTlZBTElEX0NIQVJBQ1RFUl9FUlIsTkFNRVNQQUNFX0VSUixXUk9OR19ET0NVTUVOVF9FUlJcblx0XHR2YXIgZG9jID0gbmV3IERvY3VtZW50KCk7XG5cdFx0ZG9jLmltcGxlbWVudGF0aW9uID0gdGhpcztcblx0XHRkb2MuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHRcdGRvYy5kb2N0eXBlID0gZG9jdHlwZTtcblx0XHRpZihkb2N0eXBlKXtcblx0XHRcdGRvYy5hcHBlbmRDaGlsZChkb2N0eXBlKTtcblx0XHR9XG5cdFx0aWYocXVhbGlmaWVkTmFtZSl7XG5cdFx0XHR2YXIgcm9vdCA9IGRvYy5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLHF1YWxpZmllZE5hbWUpO1xuXHRcdFx0ZG9jLmFwcGVuZENoaWxkKHJvb3QpO1xuXHRcdH1cblx0XHRyZXR1cm4gZG9jO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRjcmVhdGVEb2N1bWVudFR5cGU6ZnVuY3Rpb24ocXVhbGlmaWVkTmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKXsvLyByYWlzZXM6SU5WQUxJRF9DSEFSQUNURVJfRVJSLE5BTUVTUEFDRV9FUlJcblx0XHR2YXIgbm9kZSA9IG5ldyBEb2N1bWVudFR5cGUoKTtcblx0XHRub2RlLm5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubm9kZU5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUucHVibGljSWQgPSBwdWJsaWNJZDtcblx0XHRub2RlLnN5c3RlbUlkID0gc3lzdGVtSWQ7XG5cdFx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0XHQvL3JlYWRvbmx5IGF0dHJpYnV0ZSBET01TdHJpbmcgICAgICAgIGludGVybmFsU3Vic2V0O1xuXHRcdFxuXHRcdC8vVE9ETzouLlxuXHRcdC8vICByZWFkb25seSBhdHRyaWJ1dGUgTmFtZWROb2RlTWFwICAgICBlbnRpdGllcztcblx0XHQvLyAgcmVhZG9ubHkgYXR0cmlidXRlIE5hbWVkTm9kZU1hcCAgICAgbm90YXRpb25zO1xuXHRcdHJldHVybiBub2RlO1xuXHR9XG59O1xuXG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAwL1JFQy1ET00tTGV2ZWwtMi1Db3JlLTIwMDAxMTEzL2NvcmUuaHRtbCNJRC0xOTUwNjQxMjQ3XG4gKi9cblxuZnVuY3Rpb24gTm9kZSgpIHtcbn07XG5cbk5vZGUucHJvdG90eXBlID0ge1xuXHRmaXJzdENoaWxkIDogbnVsbCxcblx0bGFzdENoaWxkIDogbnVsbCxcblx0cHJldmlvdXNTaWJsaW5nIDogbnVsbCxcblx0bmV4dFNpYmxpbmcgOiBudWxsLFxuXHRhdHRyaWJ1dGVzIDogbnVsbCxcblx0cGFyZW50Tm9kZSA6IG51bGwsXG5cdGNoaWxkTm9kZXMgOiBudWxsLFxuXHRvd25lckRvY3VtZW50IDogbnVsbCxcblx0bm9kZVZhbHVlIDogbnVsbCxcblx0bmFtZXNwYWNlVVJJIDogbnVsbCxcblx0cHJlZml4IDogbnVsbCxcblx0bG9jYWxOYW1lIDogbnVsbCxcblx0Ly8gTW9kaWZpZWQgaW4gRE9NIExldmVsIDI6XG5cdGluc2VydEJlZm9yZTpmdW5jdGlvbihuZXdDaGlsZCwgcmVmQ2hpbGQpey8vcmFpc2VzIFxuXHRcdHJldHVybiBfaW5zZXJ0QmVmb3JlKHRoaXMsbmV3Q2hpbGQscmVmQ2hpbGQpO1xuXHR9LFxuXHRyZXBsYWNlQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQsIG9sZENoaWxkKXsvL3JhaXNlcyBcblx0XHR0aGlzLmluc2VydEJlZm9yZShuZXdDaGlsZCxvbGRDaGlsZCk7XG5cdFx0aWYob2xkQ2hpbGQpe1xuXHRcdFx0dGhpcy5yZW1vdmVDaGlsZChvbGRDaGlsZCk7XG5cdFx0fVxuXHR9LFxuXHRyZW1vdmVDaGlsZDpmdW5jdGlvbihvbGRDaGlsZCl7XG5cdFx0cmV0dXJuIF9yZW1vdmVDaGlsZCh0aGlzLG9sZENoaWxkKTtcblx0fSxcblx0YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQpe1xuXHRcdHJldHVybiB0aGlzLmluc2VydEJlZm9yZShuZXdDaGlsZCxudWxsKTtcblx0fSxcblx0aGFzQ2hpbGROb2RlczpmdW5jdGlvbigpe1xuXHRcdHJldHVybiB0aGlzLmZpcnN0Q2hpbGQgIT0gbnVsbDtcblx0fSxcblx0Y2xvbmVOb2RlOmZ1bmN0aW9uKGRlZXApe1xuXHRcdHJldHVybiBjbG9uZU5vZGUodGhpcy5vd25lckRvY3VtZW50fHx0aGlzLHRoaXMsZGVlcCk7XG5cdH0sXG5cdC8vIE1vZGlmaWVkIGluIERPTSBMZXZlbCAyOlxuXHRub3JtYWxpemU6ZnVuY3Rpb24oKXtcblx0XHR2YXIgY2hpbGQgPSB0aGlzLmZpcnN0Q2hpbGQ7XG5cdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0dmFyIG5leHQgPSBjaGlsZC5uZXh0U2libGluZztcblx0XHRcdGlmKG5leHQgJiYgbmV4dC5ub2RlVHlwZSA9PSBURVhUX05PREUgJiYgY2hpbGQubm9kZVR5cGUgPT0gVEVYVF9OT0RFKXtcblx0XHRcdFx0dGhpcy5yZW1vdmVDaGlsZChuZXh0KTtcblx0XHRcdFx0Y2hpbGQuYXBwZW5kRGF0YShuZXh0LmRhdGEpO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdGNoaWxkLm5vcm1hbGl6ZSgpO1xuXHRcdFx0XHRjaGlsZCA9IG5leHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuICBcdC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG5cdGlzU3VwcG9ydGVkOmZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pe1xuXHRcdHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShmZWF0dXJlLHZlcnNpb24pO1xuXHR9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG4gICAgaGFzQXR0cmlidXRlczpmdW5jdGlvbigpe1xuICAgIFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5sZW5ndGg+MDtcbiAgICB9LFxuICAgIGxvb2t1cFByZWZpeDpmdW5jdGlvbihuYW1lc3BhY2VVUkkpe1xuICAgIFx0dmFyIGVsID0gdGhpcztcbiAgICBcdHdoaWxlKGVsKXtcbiAgICBcdFx0dmFyIG1hcCA9IGVsLl9uc01hcDtcbiAgICBcdFx0Ly9jb25zb2xlLmRpcihtYXApXG4gICAgXHRcdGlmKG1hcCl7XG4gICAgXHRcdFx0Zm9yKHZhciBuIGluIG1hcCl7XG4gICAgXHRcdFx0XHRpZihtYXBbbl0gPT0gbmFtZXNwYWNlVVJJKXtcbiAgICBcdFx0XHRcdFx0cmV0dXJuIG47XG4gICAgXHRcdFx0XHR9XG4gICAgXHRcdFx0fVxuICAgIFx0XHR9XG4gICAgXHRcdGVsID0gZWwubm9kZVR5cGUgPT0gQVRUUklCVVRFX05PREU/ZWwub3duZXJEb2N1bWVudCA6IGVsLnBhcmVudE5vZGU7XG4gICAgXHR9XG4gICAgXHRyZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDM6XG4gICAgbG9va3VwTmFtZXNwYWNlVVJJOmZ1bmN0aW9uKHByZWZpeCl7XG4gICAgXHR2YXIgZWwgPSB0aGlzO1xuICAgIFx0d2hpbGUoZWwpe1xuICAgIFx0XHR2YXIgbWFwID0gZWwuX25zTWFwO1xuICAgIFx0XHQvL2NvbnNvbGUuZGlyKG1hcClcbiAgICBcdFx0aWYobWFwKXtcbiAgICBcdFx0XHRpZihwcmVmaXggaW4gbWFwKXtcbiAgICBcdFx0XHRcdHJldHVybiBtYXBbcHJlZml4XSA7XG4gICAgXHRcdFx0fVxuICAgIFx0XHR9XG4gICAgXHRcdGVsID0gZWwubm9kZVR5cGUgPT0gQVRUUklCVVRFX05PREU/ZWwub3duZXJEb2N1bWVudCA6IGVsLnBhcmVudE5vZGU7XG4gICAgXHR9XG4gICAgXHRyZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDM6XG4gICAgaXNEZWZhdWx0TmFtZXNwYWNlOmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSl7XG4gICAgXHR2YXIgcHJlZml4ID0gdGhpcy5sb29rdXBQcmVmaXgobmFtZXNwYWNlVVJJKTtcbiAgICBcdHJldHVybiBwcmVmaXggPT0gbnVsbDtcbiAgICB9XG59O1xuXG5cbmZ1bmN0aW9uIF94bWxFbmNvZGVyKGMpe1xuXHRyZXR1cm4gYyA9PSAnPCcgJiYgJyZsdDsnIHx8XG4gICAgICAgICBjID09ICc+JyAmJiAnJmd0OycgfHxcbiAgICAgICAgIGMgPT0gJyYnICYmICcmYW1wOycgfHxcbiAgICAgICAgIGMgPT0gJ1wiJyAmJiAnJnF1b3Q7JyB8fFxuICAgICAgICAgJyYjJytjLmNoYXJDb2RlQXQoKSsnOydcbn1cblxuXG5jb3B5KE5vZGVUeXBlLE5vZGUpO1xuY29weShOb2RlVHlwZSxOb2RlLnByb3RvdHlwZSk7XG5cbi8qKlxuICogQHBhcmFtIGNhbGxiYWNrIHJldHVybiB0cnVlIGZvciBjb250aW51ZSxmYWxzZSBmb3IgYnJlYWtcbiAqIEByZXR1cm4gYm9vbGVhbiB0cnVlOiBicmVhayB2aXNpdDtcbiAqL1xuZnVuY3Rpb24gX3Zpc2l0Tm9kZShub2RlLGNhbGxiYWNrKXtcblx0aWYoY2FsbGJhY2sobm9kZSkpe1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmKG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQpe1xuXHRcdGRve1xuXHRcdFx0aWYoX3Zpc2l0Tm9kZShub2RlLGNhbGxiYWNrKSl7cmV0dXJuIHRydWV9XG4gICAgICAgIH13aGlsZShub2RlPW5vZGUubmV4dFNpYmxpbmcpXG4gICAgfVxufVxuXG5cblxuZnVuY3Rpb24gRG9jdW1lbnQoKXtcbn1cbmZ1bmN0aW9uIF9vbkFkZEF0dHJpYnV0ZShkb2MsZWwsbmV3QXR0cil7XG5cdGRvYyAmJiBkb2MuX2luYysrO1xuXHR2YXIgbnMgPSBuZXdBdHRyLm5hbWVzcGFjZVVSSSA7XG5cdGlmKG5zID09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLycpe1xuXHRcdC8vdXBkYXRlIG5hbWVzcGFjZVxuXHRcdGVsLl9uc01hcFtuZXdBdHRyLnByZWZpeD9uZXdBdHRyLmxvY2FsTmFtZTonJ10gPSBuZXdBdHRyLnZhbHVlXG5cdH1cbn1cbmZ1bmN0aW9uIF9vblJlbW92ZUF0dHJpYnV0ZShkb2MsZWwsbmV3QXR0cixyZW1vdmUpe1xuXHRkb2MgJiYgZG9jLl9pbmMrKztcblx0dmFyIG5zID0gbmV3QXR0ci5uYW1lc3BhY2VVUkkgO1xuXHRpZihucyA9PSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8nKXtcblx0XHQvL3VwZGF0ZSBuYW1lc3BhY2Vcblx0XHRkZWxldGUgZWwuX25zTWFwW25ld0F0dHIucHJlZml4P25ld0F0dHIubG9jYWxOYW1lOicnXVxuXHR9XG59XG5mdW5jdGlvbiBfb25VcGRhdGVDaGlsZChkb2MsZWwsbmV3Q2hpbGQpe1xuXHRpZihkb2MgJiYgZG9jLl9pbmMpe1xuXHRcdGRvYy5faW5jKys7XG5cdFx0Ly91cGRhdGUgY2hpbGROb2Rlc1xuXHRcdHZhciBjcyA9IGVsLmNoaWxkTm9kZXM7XG5cdFx0aWYobmV3Q2hpbGQpe1xuXHRcdFx0Y3NbY3MubGVuZ3RoKytdID0gbmV3Q2hpbGQ7XG5cdFx0fWVsc2V7XG5cdFx0XHQvL2NvbnNvbGUubG9nKDEpXG5cdFx0XHR2YXIgY2hpbGQgPSBlbC5maXJzdENoaWxkO1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0XHRjc1tpKytdID0gY2hpbGQ7XG5cdFx0XHRcdGNoaWxkID1jaGlsZC5uZXh0U2libGluZztcblx0XHRcdH1cblx0XHRcdGNzLmxlbmd0aCA9IGk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogYXR0cmlidXRlcztcbiAqIGNoaWxkcmVuO1xuICogXG4gKiB3cml0ZWFibGUgcHJvcGVydGllczpcbiAqIG5vZGVWYWx1ZSxBdHRyOnZhbHVlLENoYXJhY3RlckRhdGE6ZGF0YVxuICogcHJlZml4XG4gKi9cbmZ1bmN0aW9uIF9yZW1vdmVDaGlsZChwYXJlbnROb2RlLGNoaWxkKXtcblx0dmFyIHByZXZpb3VzID0gY2hpbGQucHJldmlvdXNTaWJsaW5nO1xuXHR2YXIgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRpZihwcmV2aW91cyl7XG5cdFx0cHJldmlvdXMubmV4dFNpYmxpbmcgPSBuZXh0O1xuXHR9ZWxzZXtcblx0XHRwYXJlbnROb2RlLmZpcnN0Q2hpbGQgPSBuZXh0XG5cdH1cblx0aWYobmV4dCl7XG5cdFx0bmV4dC5wcmV2aW91c1NpYmxpbmcgPSBwcmV2aW91cztcblx0fWVsc2V7XG5cdFx0cGFyZW50Tm9kZS5sYXN0Q2hpbGQgPSBwcmV2aW91cztcblx0fVxuXHRfb25VcGRhdGVDaGlsZChwYXJlbnROb2RlLm93bmVyRG9jdW1lbnQscGFyZW50Tm9kZSk7XG5cdHJldHVybiBjaGlsZDtcbn1cbi8qKlxuICogcHJlZm9ybWFuY2Uga2V5KHJlZkNoaWxkID09IG51bGwpXG4gKi9cbmZ1bmN0aW9uIF9pbnNlcnRCZWZvcmUocGFyZW50Tm9kZSxuZXdDaGlsZCxuZXh0Q2hpbGQpe1xuXHR2YXIgY3AgPSBuZXdDaGlsZC5wYXJlbnROb2RlO1xuXHRpZihjcCl7XG5cdFx0Y3AucmVtb3ZlQ2hpbGQobmV3Q2hpbGQpOy8vcmVtb3ZlIGFuZCB1cGRhdGVcblx0fVxuXHRpZihuZXdDaGlsZC5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSl7XG5cdFx0dmFyIG5ld0ZpcnN0ID0gbmV3Q2hpbGQuZmlyc3RDaGlsZDtcblx0XHRpZiAobmV3Rmlyc3QgPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIG5ld0NoaWxkO1xuXHRcdH1cblx0XHR2YXIgbmV3TGFzdCA9IG5ld0NoaWxkLmxhc3RDaGlsZDtcblx0fWVsc2V7XG5cdFx0bmV3Rmlyc3QgPSBuZXdMYXN0ID0gbmV3Q2hpbGQ7XG5cdH1cblx0dmFyIHByZSA9IG5leHRDaGlsZCA/IG5leHRDaGlsZC5wcmV2aW91c1NpYmxpbmcgOiBwYXJlbnROb2RlLmxhc3RDaGlsZDtcblxuXHRuZXdGaXJzdC5wcmV2aW91c1NpYmxpbmcgPSBwcmU7XG5cdG5ld0xhc3QubmV4dFNpYmxpbmcgPSBuZXh0Q2hpbGQ7XG5cdFxuXHRcblx0aWYocHJlKXtcblx0XHRwcmUubmV4dFNpYmxpbmcgPSBuZXdGaXJzdDtcblx0fWVsc2V7XG5cdFx0cGFyZW50Tm9kZS5maXJzdENoaWxkID0gbmV3Rmlyc3Q7XG5cdH1cblx0aWYobmV4dENoaWxkID09IG51bGwpe1xuXHRcdHBhcmVudE5vZGUubGFzdENoaWxkID0gbmV3TGFzdDtcblx0fWVsc2V7XG5cdFx0bmV4dENoaWxkLnByZXZpb3VzU2libGluZyA9IG5ld0xhc3Q7XG5cdH1cblx0ZG97XG5cdFx0bmV3Rmlyc3QucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG5cdH13aGlsZShuZXdGaXJzdCAhPT0gbmV3TGFzdCAmJiAobmV3Rmlyc3Q9IG5ld0ZpcnN0Lm5leHRTaWJsaW5nKSlcblx0X29uVXBkYXRlQ2hpbGQocGFyZW50Tm9kZS5vd25lckRvY3VtZW50fHxwYXJlbnROb2RlLHBhcmVudE5vZGUpO1xuXHQvL2NvbnNvbGUubG9nKHBhcmVudE5vZGUubGFzdENoaWxkLm5leHRTaWJsaW5nID09IG51bGwpXG5cdGlmIChuZXdDaGlsZC5ub2RlVHlwZSA9PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG5cdFx0bmV3Q2hpbGQuZmlyc3RDaGlsZCA9IG5ld0NoaWxkLmxhc3RDaGlsZCA9IG51bGw7XG5cdH1cblx0cmV0dXJuIG5ld0NoaWxkO1xufVxuZnVuY3Rpb24gX2FwcGVuZFNpbmdsZUNoaWxkKHBhcmVudE5vZGUsbmV3Q2hpbGQpe1xuXHR2YXIgY3AgPSBuZXdDaGlsZC5wYXJlbnROb2RlO1xuXHRpZihjcCl7XG5cdFx0dmFyIHByZSA9IHBhcmVudE5vZGUubGFzdENoaWxkO1xuXHRcdGNwLnJlbW92ZUNoaWxkKG5ld0NoaWxkKTsvL3JlbW92ZSBhbmQgdXBkYXRlXG5cdFx0dmFyIHByZSA9IHBhcmVudE5vZGUubGFzdENoaWxkO1xuXHR9XG5cdHZhciBwcmUgPSBwYXJlbnROb2RlLmxhc3RDaGlsZDtcblx0bmV3Q2hpbGQucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG5cdG5ld0NoaWxkLnByZXZpb3VzU2libGluZyA9IHByZTtcblx0bmV3Q2hpbGQubmV4dFNpYmxpbmcgPSBudWxsO1xuXHRpZihwcmUpe1xuXHRcdHByZS5uZXh0U2libGluZyA9IG5ld0NoaWxkO1xuXHR9ZWxzZXtcblx0XHRwYXJlbnROb2RlLmZpcnN0Q2hpbGQgPSBuZXdDaGlsZDtcblx0fVxuXHRwYXJlbnROb2RlLmxhc3RDaGlsZCA9IG5ld0NoaWxkO1xuXHRfb25VcGRhdGVDaGlsZChwYXJlbnROb2RlLm93bmVyRG9jdW1lbnQscGFyZW50Tm9kZSxuZXdDaGlsZCk7XG5cdHJldHVybiBuZXdDaGlsZDtcblx0Ly9jb25zb2xlLmxvZyhcIl9fYWFcIixwYXJlbnROb2RlLmxhc3RDaGlsZC5uZXh0U2libGluZyA9PSBudWxsKVxufVxuRG9jdW1lbnQucHJvdG90eXBlID0ge1xuXHQvL2ltcGxlbWVudGF0aW9uIDogbnVsbCxcblx0bm9kZU5hbWUgOiAgJyNkb2N1bWVudCcsXG5cdG5vZGVUeXBlIDogIERPQ1VNRU5UX05PREUsXG5cdGRvY3R5cGUgOiAgbnVsbCxcblx0ZG9jdW1lbnRFbGVtZW50IDogIG51bGwsXG5cdF9pbmMgOiAxLFxuXHRcblx0aW5zZXJ0QmVmb3JlIDogIGZ1bmN0aW9uKG5ld0NoaWxkLCByZWZDaGlsZCl7Ly9yYWlzZXMgXG5cdFx0aWYobmV3Q2hpbGQubm9kZVR5cGUgPT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSl7XG5cdFx0XHR2YXIgY2hpbGQgPSBuZXdDaGlsZC5maXJzdENoaWxkO1xuXHRcdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0XHR2YXIgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR0aGlzLmluc2VydEJlZm9yZShjaGlsZCxyZWZDaGlsZCk7XG5cdFx0XHRcdGNoaWxkID0gbmV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuZXdDaGlsZDtcblx0XHR9XG5cdFx0aWYodGhpcy5kb2N1bWVudEVsZW1lbnQgPT0gbnVsbCAmJiBuZXdDaGlsZC5ub2RlVHlwZSA9PSBFTEVNRU5UX05PREUpe1xuXHRcdFx0dGhpcy5kb2N1bWVudEVsZW1lbnQgPSBuZXdDaGlsZDtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIF9pbnNlcnRCZWZvcmUodGhpcyxuZXdDaGlsZCxyZWZDaGlsZCksKG5ld0NoaWxkLm93bmVyRG9jdW1lbnQgPSB0aGlzKSxuZXdDaGlsZDtcblx0fSxcblx0cmVtb3ZlQ2hpbGQgOiAgZnVuY3Rpb24ob2xkQ2hpbGQpe1xuXHRcdGlmKHRoaXMuZG9jdW1lbnRFbGVtZW50ID09IG9sZENoaWxkKXtcblx0XHRcdHRoaXMuZG9jdW1lbnRFbGVtZW50ID0gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIF9yZW1vdmVDaGlsZCh0aGlzLG9sZENoaWxkKTtcblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0aW1wb3J0Tm9kZSA6IGZ1bmN0aW9uKGltcG9ydGVkTm9kZSxkZWVwKXtcblx0XHRyZXR1cm4gaW1wb3J0Tm9kZSh0aGlzLGltcG9ydGVkTm9kZSxkZWVwKTtcblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0Z2V0RWxlbWVudEJ5SWQgOlx0ZnVuY3Rpb24oaWQpe1xuXHRcdHZhciBydHYgPSBudWxsO1xuXHRcdF92aXNpdE5vZGUodGhpcy5kb2N1bWVudEVsZW1lbnQsZnVuY3Rpb24obm9kZSl7XG5cdFx0XHRpZihub2RlLm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSl7XG5cdFx0XHRcdGlmKG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpID09IGlkKXtcblx0XHRcdFx0XHRydHYgPSBub2RlO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSlcblx0XHRyZXR1cm4gcnR2O1xuXHR9LFxuXHRcblx0Ly9kb2N1bWVudCBmYWN0b3J5IG1ldGhvZDpcblx0Y3JlYXRlRWxlbWVudCA6XHRmdW5jdGlvbih0YWdOYW1lKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBFbGVtZW50KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLm5vZGVOYW1lID0gdGFnTmFtZTtcblx0XHRub2RlLnRhZ05hbWUgPSB0YWdOYW1lO1xuXHRcdG5vZGUuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHRcdHZhciBhdHRyc1x0PSBub2RlLmF0dHJpYnV0ZXMgPSBuZXcgTmFtZWROb2RlTWFwKCk7XG5cdFx0YXR0cnMuX293bmVyRWxlbWVudCA9IG5vZGU7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZURvY3VtZW50RnJhZ21lbnQgOlx0ZnVuY3Rpb24oKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBEb2N1bWVudEZyYWdtZW50KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlVGV4dE5vZGUgOlx0ZnVuY3Rpb24oZGF0YSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgVGV4dCgpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS5hcHBlbmREYXRhKGRhdGEpXG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZUNvbW1lbnQgOlx0ZnVuY3Rpb24oZGF0YSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgQ29tbWVudCgpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS5hcHBlbmREYXRhKGRhdGEpXG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZUNEQVRBU2VjdGlvbiA6XHRmdW5jdGlvbihkYXRhKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBDREFUQVNlY3Rpb24oKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUuYXBwZW5kRGF0YShkYXRhKVxuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gOlx0ZnVuY3Rpb24odGFyZ2V0LGRhdGEpe1xuXHRcdHZhciBub2RlID0gbmV3IFByb2Nlc3NpbmdJbnN0cnVjdGlvbigpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS50YWdOYW1lID0gbm9kZS50YXJnZXQgPSB0YXJnZXQ7XG5cdFx0bm9kZS5ub2RlVmFsdWU9IG5vZGUuZGF0YSA9IGRhdGE7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZUF0dHJpYnV0ZSA6XHRmdW5jdGlvbihuYW1lKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBBdHRyKCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50XHQ9IHRoaXM7XG5cdFx0bm9kZS5uYW1lID0gbmFtZTtcblx0XHRub2RlLm5vZGVOYW1lXHQ9IG5hbWU7XG5cdFx0bm9kZS5sb2NhbE5hbWUgPSBuYW1lO1xuXHRcdG5vZGUuc3BlY2lmaWVkID0gdHJ1ZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlRW50aXR5UmVmZXJlbmNlIDpcdGZ1bmN0aW9uKG5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEVudGl0eVJlZmVyZW5jZSgpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudFx0PSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWVcdD0gbmFtZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0Y3JlYXRlRWxlbWVudE5TIDpcdGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSxxdWFsaWZpZWROYW1lKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBFbGVtZW50KCk7XG5cdFx0dmFyIHBsID0gcXVhbGlmaWVkTmFtZS5zcGxpdCgnOicpO1xuXHRcdHZhciBhdHRyc1x0PSBub2RlLmF0dHJpYnV0ZXMgPSBuZXcgTmFtZWROb2RlTWFwKCk7XG5cdFx0bm9kZS5jaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLm5vZGVOYW1lID0gcXVhbGlmaWVkTmFtZTtcblx0XHRub2RlLnRhZ05hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubmFtZXNwYWNlVVJJID0gbmFtZXNwYWNlVVJJO1xuXHRcdGlmKHBsLmxlbmd0aCA9PSAyKXtcblx0XHRcdG5vZGUucHJlZml4ID0gcGxbMF07XG5cdFx0XHRub2RlLmxvY2FsTmFtZSA9IHBsWzFdO1xuXHRcdH1lbHNle1xuXHRcdFx0Ly9lbC5wcmVmaXggPSBudWxsO1xuXHRcdFx0bm9kZS5sb2NhbE5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdH1cblx0XHRhdHRycy5fb3duZXJFbGVtZW50ID0gbm9kZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0Y3JlYXRlQXR0cmlidXRlTlMgOlx0ZnVuY3Rpb24obmFtZXNwYWNlVVJJLHF1YWxpZmllZE5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEF0dHIoKTtcblx0XHR2YXIgcGwgPSBxdWFsaWZpZWROYW1lLnNwbGl0KCc6Jyk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLm5vZGVOYW1lID0gcXVhbGlmaWVkTmFtZTtcblx0XHRub2RlLm5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubmFtZXNwYWNlVVJJID0gbmFtZXNwYWNlVVJJO1xuXHRcdG5vZGUuc3BlY2lmaWVkID0gdHJ1ZTtcblx0XHRpZihwbC5sZW5ndGggPT0gMil7XG5cdFx0XHRub2RlLnByZWZpeCA9IHBsWzBdO1xuXHRcdFx0bm9kZS5sb2NhbE5hbWUgPSBwbFsxXTtcblx0XHR9ZWxzZXtcblx0XHRcdC8vZWwucHJlZml4ID0gbnVsbDtcblx0XHRcdG5vZGUubG9jYWxOYW1lID0gcXVhbGlmaWVkTmFtZTtcblx0XHR9XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH1cbn07XG5fZXh0ZW5kcyhEb2N1bWVudCxOb2RlKTtcblxuXG5mdW5jdGlvbiBFbGVtZW50KCkge1xuXHR0aGlzLl9uc01hcCA9IHt9O1xufTtcbkVsZW1lbnQucHJvdG90eXBlID0ge1xuXHRub2RlVHlwZSA6IEVMRU1FTlRfTk9ERSxcblx0aGFzQXR0cmlidXRlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKSE9bnVsbDtcblx0fSxcblx0Z2V0QXR0cmlidXRlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUobmFtZSk7XG5cdFx0cmV0dXJuIGF0dHIgJiYgYXR0ci52YWx1ZSB8fCAnJztcblx0fSxcblx0Z2V0QXR0cmlidXRlTm9kZSA6IGZ1bmN0aW9uKG5hbWUpe1xuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKG5hbWUpO1xuXHR9LFxuXHRzZXRBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKG5hbWUpO1xuXHRcdGF0dHIudmFsdWUgPSBhdHRyLm5vZGVWYWx1ZSA9IFwiXCIgKyB2YWx1ZTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZU5vZGUoYXR0cilcblx0fSxcblx0cmVtb3ZlQXR0cmlidXRlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUobmFtZSlcblx0XHRhdHRyICYmIHRoaXMucmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyKTtcblx0fSxcblx0XG5cdC8vZm91ciByZWFsIG9wZWFydGlvbiBtZXRob2Rcblx0YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQpe1xuXHRcdGlmKG5ld0NoaWxkLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKXtcblx0XHRcdHJldHVybiB0aGlzLmluc2VydEJlZm9yZShuZXdDaGlsZCxudWxsKTtcblx0XHR9ZWxzZXtcblx0XHRcdHJldHVybiBfYXBwZW5kU2luZ2xlQ2hpbGQodGhpcyxuZXdDaGlsZCk7XG5cdFx0fVxuXHR9LFxuXHRzZXRBdHRyaWJ1dGVOb2RlIDogZnVuY3Rpb24obmV3QXR0cil7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5zZXROYW1lZEl0ZW0obmV3QXR0cik7XG5cdH0sXG5cdHNldEF0dHJpYnV0ZU5vZGVOUyA6IGZ1bmN0aW9uKG5ld0F0dHIpe1xuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuc2V0TmFtZWRJdGVtTlMobmV3QXR0cik7XG5cdH0sXG5cdHJlbW92ZUF0dHJpYnV0ZU5vZGUgOiBmdW5jdGlvbihvbGRBdHRyKXtcblx0XHQvL2NvbnNvbGUubG9nKHRoaXMgPT0gb2xkQXR0ci5vd25lckVsZW1lbnQpXG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5yZW1vdmVOYW1lZEl0ZW0ob2xkQXR0ci5ub2RlTmFtZSk7XG5cdH0sXG5cdC8vZ2V0IHJlYWwgYXR0cmlidXRlIG5hbWUsYW5kIHJlbW92ZSBpdCBieSByZW1vdmVBdHRyaWJ1dGVOb2RlXG5cdHJlbW92ZUF0dHJpYnV0ZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpe1xuXHRcdHZhciBvbGQgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSk7XG5cdFx0b2xkICYmIHRoaXMucmVtb3ZlQXR0cmlidXRlTm9kZShvbGQpO1xuXHR9LFxuXHRcblx0aGFzQXR0cmlidXRlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSE9bnVsbDtcblx0fSxcblx0Z2V0QXR0cmlidXRlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSk7XG5cdFx0cmV0dXJuIGF0dHIgJiYgYXR0ci52YWx1ZSB8fCAnJztcblx0fSxcblx0c2V0QXR0cmlidXRlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUsIHZhbHVlKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUpO1xuXHRcdGF0dHIudmFsdWUgPSBhdHRyLm5vZGVWYWx1ZSA9IFwiXCIgKyB2YWx1ZTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZU5vZGUoYXR0cilcblx0fSxcblx0Z2V0QXR0cmlidXRlTm9kZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpe1xuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtTlMobmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpO1xuXHR9LFxuXHRcblx0Z2V0RWxlbWVudHNCeVRhZ05hbWUgOiBmdW5jdGlvbih0YWdOYW1lKXtcblx0XHRyZXR1cm4gbmV3IExpdmVOb2RlTGlzdCh0aGlzLGZ1bmN0aW9uKGJhc2Upe1xuXHRcdFx0dmFyIGxzID0gW107XG5cdFx0XHRfdmlzaXROb2RlKGJhc2UsZnVuY3Rpb24obm9kZSl7XG5cdFx0XHRcdGlmKG5vZGUgIT09IGJhc2UgJiYgbm9kZS5ub2RlVHlwZSA9PSBFTEVNRU5UX05PREUgJiYgKHRhZ05hbWUgPT09ICcqJyB8fCBub2RlLnRhZ05hbWUgPT0gdGFnTmFtZSkpe1xuXHRcdFx0XHRcdGxzLnB1c2gobm9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGxzO1xuXHRcdH0pO1xuXHR9LFxuXHRnZXRFbGVtZW50c0J5VGFnTmFtZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpe1xuXHRcdHJldHVybiBuZXcgTGl2ZU5vZGVMaXN0KHRoaXMsZnVuY3Rpb24oYmFzZSl7XG5cdFx0XHR2YXIgbHMgPSBbXTtcblx0XHRcdF92aXNpdE5vZGUoYmFzZSxmdW5jdGlvbihub2RlKXtcblx0XHRcdFx0aWYobm9kZSAhPT0gYmFzZSAmJiBub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiYgKG5hbWVzcGFjZVVSSSA9PT0gJyonIHx8IG5vZGUubmFtZXNwYWNlVVJJID09PSBuYW1lc3BhY2VVUkkpICYmIChsb2NhbE5hbWUgPT09ICcqJyB8fCBub2RlLmxvY2FsTmFtZSA9PSBsb2NhbE5hbWUpKXtcblx0XHRcdFx0XHRscy5wdXNoKG5vZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBscztcblx0XHRcdFxuXHRcdH0pO1xuXHR9XG59O1xuRG9jdW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID0gRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU7XG5Eb2N1bWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyA9IEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlM7XG5cblxuX2V4dGVuZHMoRWxlbWVudCxOb2RlKTtcbmZ1bmN0aW9uIEF0dHIoKSB7XG59O1xuQXR0ci5wcm90b3R5cGUubm9kZVR5cGUgPSBBVFRSSUJVVEVfTk9ERTtcbl9leHRlbmRzKEF0dHIsTm9kZSk7XG5cblxuZnVuY3Rpb24gQ2hhcmFjdGVyRGF0YSgpIHtcbn07XG5DaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSA9IHtcblx0ZGF0YSA6ICcnLFxuXHRzdWJzdHJpbmdEYXRhIDogZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCkge1xuXHRcdHJldHVybiB0aGlzLmRhdGEuc3Vic3RyaW5nKG9mZnNldCwgb2Zmc2V0K2NvdW50KTtcblx0fSxcblx0YXBwZW5kRGF0YTogZnVuY3Rpb24odGV4dCkge1xuXHRcdHRleHQgPSB0aGlzLmRhdGErdGV4dDtcblx0XHR0aGlzLm5vZGVWYWx1ZSA9IHRoaXMuZGF0YSA9IHRleHQ7XG5cdFx0dGhpcy5sZW5ndGggPSB0ZXh0Lmxlbmd0aDtcblx0fSxcblx0aW5zZXJ0RGF0YTogZnVuY3Rpb24ob2Zmc2V0LHRleHQpIHtcblx0XHR0aGlzLnJlcGxhY2VEYXRhKG9mZnNldCwwLHRleHQpO1xuXHRcblx0fSxcblx0YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQpe1xuXHRcdHRocm93IG5ldyBFcnJvcihFeGNlcHRpb25NZXNzYWdlW0hJRVJBUkNIWV9SRVFVRVNUX0VSUl0pXG5cdH0sXG5cdGRlbGV0ZURhdGE6IGZ1bmN0aW9uKG9mZnNldCwgY291bnQpIHtcblx0XHR0aGlzLnJlcGxhY2VEYXRhKG9mZnNldCxjb3VudCxcIlwiKTtcblx0fSxcblx0cmVwbGFjZURhdGE6IGZ1bmN0aW9uKG9mZnNldCwgY291bnQsIHRleHQpIHtcblx0XHR2YXIgc3RhcnQgPSB0aGlzLmRhdGEuc3Vic3RyaW5nKDAsb2Zmc2V0KTtcblx0XHR2YXIgZW5kID0gdGhpcy5kYXRhLnN1YnN0cmluZyhvZmZzZXQrY291bnQpO1xuXHRcdHRleHQgPSBzdGFydCArIHRleHQgKyBlbmQ7XG5cdFx0dGhpcy5ub2RlVmFsdWUgPSB0aGlzLmRhdGEgPSB0ZXh0O1xuXHRcdHRoaXMubGVuZ3RoID0gdGV4dC5sZW5ndGg7XG5cdH1cbn1cbl9leHRlbmRzKENoYXJhY3RlckRhdGEsTm9kZSk7XG5mdW5jdGlvbiBUZXh0KCkge1xufTtcblRleHQucHJvdG90eXBlID0ge1xuXHRub2RlTmFtZSA6IFwiI3RleHRcIixcblx0bm9kZVR5cGUgOiBURVhUX05PREUsXG5cdHNwbGl0VGV4dCA6IGZ1bmN0aW9uKG9mZnNldCkge1xuXHRcdHZhciB0ZXh0ID0gdGhpcy5kYXRhO1xuXHRcdHZhciBuZXdUZXh0ID0gdGV4dC5zdWJzdHJpbmcob2Zmc2V0KTtcblx0XHR0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgb2Zmc2V0KTtcblx0XHR0aGlzLmRhdGEgPSB0aGlzLm5vZGVWYWx1ZSA9IHRleHQ7XG5cdFx0dGhpcy5sZW5ndGggPSB0ZXh0Lmxlbmd0aDtcblx0XHR2YXIgbmV3Tm9kZSA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXdUZXh0KTtcblx0XHRpZih0aGlzLnBhcmVudE5vZGUpe1xuXHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCB0aGlzLm5leHRTaWJsaW5nKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ld05vZGU7XG5cdH1cbn1cbl9leHRlbmRzKFRleHQsQ2hhcmFjdGVyRGF0YSk7XG5mdW5jdGlvbiBDb21tZW50KCkge1xufTtcbkNvbW1lbnQucHJvdG90eXBlID0ge1xuXHRub2RlTmFtZSA6IFwiI2NvbW1lbnRcIixcblx0bm9kZVR5cGUgOiBDT01NRU5UX05PREVcbn1cbl9leHRlbmRzKENvbW1lbnQsQ2hhcmFjdGVyRGF0YSk7XG5cbmZ1bmN0aW9uIENEQVRBU2VjdGlvbigpIHtcbn07XG5DREFUQVNlY3Rpb24ucHJvdG90eXBlID0ge1xuXHRub2RlTmFtZSA6IFwiI2NkYXRhLXNlY3Rpb25cIixcblx0bm9kZVR5cGUgOiBDREFUQV9TRUNUSU9OX05PREVcbn1cbl9leHRlbmRzKENEQVRBU2VjdGlvbixDaGFyYWN0ZXJEYXRhKTtcblxuXG5mdW5jdGlvbiBEb2N1bWVudFR5cGUoKSB7XG59O1xuRG9jdW1lbnRUeXBlLnByb3RvdHlwZS5ub2RlVHlwZSA9IERPQ1VNRU5UX1RZUEVfTk9ERTtcbl9leHRlbmRzKERvY3VtZW50VHlwZSxOb2RlKTtcblxuZnVuY3Rpb24gTm90YXRpb24oKSB7XG59O1xuTm90YXRpb24ucHJvdG90eXBlLm5vZGVUeXBlID0gTk9UQVRJT05fTk9ERTtcbl9leHRlbmRzKE5vdGF0aW9uLE5vZGUpO1xuXG5mdW5jdGlvbiBFbnRpdHkoKSB7XG59O1xuRW50aXR5LnByb3RvdHlwZS5ub2RlVHlwZSA9IEVOVElUWV9OT0RFO1xuX2V4dGVuZHMoRW50aXR5LE5vZGUpO1xuXG5mdW5jdGlvbiBFbnRpdHlSZWZlcmVuY2UoKSB7XG59O1xuRW50aXR5UmVmZXJlbmNlLnByb3RvdHlwZS5ub2RlVHlwZSA9IEVOVElUWV9SRUZFUkVOQ0VfTk9ERTtcbl9leHRlbmRzKEVudGl0eVJlZmVyZW5jZSxOb2RlKTtcblxuZnVuY3Rpb24gRG9jdW1lbnRGcmFnbWVudCgpIHtcbn07XG5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5ub2RlTmFtZSA9XHRcIiNkb2N1bWVudC1mcmFnbWVudFwiO1xuRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUubm9kZVR5cGUgPVx0RE9DVU1FTlRfRlJBR01FTlRfTk9ERTtcbl9leHRlbmRzKERvY3VtZW50RnJhZ21lbnQsTm9kZSk7XG5cblxuZnVuY3Rpb24gUHJvY2Vzc2luZ0luc3RydWN0aW9uKCkge1xufVxuUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS5ub2RlVHlwZSA9IFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERTtcbl9leHRlbmRzKFByb2Nlc3NpbmdJbnN0cnVjdGlvbixOb2RlKTtcbmZ1bmN0aW9uIFhNTFNlcmlhbGl6ZXIoKXt9XG5YTUxTZXJpYWxpemVyLnByb3RvdHlwZS5zZXJpYWxpemVUb1N0cmluZyA9IGZ1bmN0aW9uKG5vZGUsaXNIdG1sLG5vZGVGaWx0ZXIpe1xuXHRyZXR1cm4gbm9kZVNlcmlhbGl6ZVRvU3RyaW5nLmNhbGwobm9kZSxpc0h0bWwsbm9kZUZpbHRlcik7XG59XG5Ob2RlLnByb3RvdHlwZS50b1N0cmluZyA9IG5vZGVTZXJpYWxpemVUb1N0cmluZztcbmZ1bmN0aW9uIG5vZGVTZXJpYWxpemVUb1N0cmluZyhpc0h0bWwsbm9kZUZpbHRlcil7XG5cdHZhciBidWYgPSBbXTtcblx0dmFyIHJlZk5vZGUgPSB0aGlzLm5vZGVUeXBlID09IDk/dGhpcy5kb2N1bWVudEVsZW1lbnQ6dGhpcztcblx0dmFyIHByZWZpeCA9IHJlZk5vZGUucHJlZml4O1xuXHR2YXIgdXJpID0gcmVmTm9kZS5uYW1lc3BhY2VVUkk7XG5cdFxuXHRpZih1cmkgJiYgcHJlZml4ID09IG51bGwpe1xuXHRcdC8vY29uc29sZS5sb2cocHJlZml4KVxuXHRcdHZhciBwcmVmaXggPSByZWZOb2RlLmxvb2t1cFByZWZpeCh1cmkpO1xuXHRcdGlmKHByZWZpeCA9PSBudWxsKXtcblx0XHRcdC8vaXNIVE1MID0gdHJ1ZTtcblx0XHRcdHZhciB2aXNpYmxlTmFtZXNwYWNlcz1bXG5cdFx0XHR7bmFtZXNwYWNlOnVyaSxwcmVmaXg6bnVsbH1cblx0XHRcdC8ve25hbWVzcGFjZTp1cmkscHJlZml4OicnfVxuXHRcdFx0XVxuXHRcdH1cblx0fVxuXHRzZXJpYWxpemVUb1N0cmluZyh0aGlzLGJ1Zixpc0h0bWwsbm9kZUZpbHRlcix2aXNpYmxlTmFtZXNwYWNlcyk7XG5cdC8vY29uc29sZS5sb2coJyMjIycsdGhpcy5ub2RlVHlwZSx1cmkscHJlZml4LGJ1Zi5qb2luKCcnKSlcblx0cmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn1cbmZ1bmN0aW9uIG5lZWROYW1lc3BhY2VEZWZpbmUobm9kZSxpc0hUTUwsIHZpc2libGVOYW1lc3BhY2VzKSB7XG5cdHZhciBwcmVmaXggPSBub2RlLnByZWZpeHx8Jyc7XG5cdHZhciB1cmkgPSBub2RlLm5hbWVzcGFjZVVSSTtcblx0aWYgKCFwcmVmaXggJiYgIXVyaSl7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmIChwcmVmaXggPT09IFwieG1sXCIgJiYgdXJpID09PSBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiIFxuXHRcdHx8IHVyaSA9PSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8nKXtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdHZhciBpID0gdmlzaWJsZU5hbWVzcGFjZXMubGVuZ3RoIFxuXHQvL2NvbnNvbGUubG9nKCdAQEBAJyxub2RlLnRhZ05hbWUscHJlZml4LHVyaSx2aXNpYmxlTmFtZXNwYWNlcylcblx0d2hpbGUgKGktLSkge1xuXHRcdHZhciBucyA9IHZpc2libGVOYW1lc3BhY2VzW2ldO1xuXHRcdC8vIGdldCBuYW1lc3BhY2UgcHJlZml4XG5cdFx0Ly9jb25zb2xlLmxvZyhub2RlLm5vZGVUeXBlLG5vZGUudGFnTmFtZSxucy5wcmVmaXgscHJlZml4KVxuXHRcdGlmIChucy5wcmVmaXggPT0gcHJlZml4KXtcblx0XHRcdHJldHVybiBucy5uYW1lc3BhY2UgIT0gdXJpO1xuXHRcdH1cblx0fVxuXHQvL2NvbnNvbGUubG9nKGlzSFRNTCx1cmkscHJlZml4PT0nJylcblx0Ly9pZihpc0hUTUwgJiYgcHJlZml4ID09bnVsbCAmJiB1cmkgPT0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnKXtcblx0Ly9cdHJldHVybiBmYWxzZTtcblx0Ly99XG5cdC8vbm9kZS5mbGFnID0gJzExMTExJ1xuXHQvL2NvbnNvbGUuZXJyb3IoMyx0cnVlLG5vZGUuZmxhZyxub2RlLnByZWZpeCxub2RlLm5hbWVzcGFjZVVSSSlcblx0cmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVUb1N0cmluZyhub2RlLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcix2aXNpYmxlTmFtZXNwYWNlcyl7XG5cdGlmKG5vZGVGaWx0ZXIpe1xuXHRcdG5vZGUgPSBub2RlRmlsdGVyKG5vZGUpO1xuXHRcdGlmKG5vZGUpe1xuXHRcdFx0aWYodHlwZW9mIG5vZGUgPT0gJ3N0cmluZycpe1xuXHRcdFx0XHRidWYucHVzaChub2RlKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1lbHNle1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHQvL2J1Zi5zb3J0LmFwcGx5KGF0dHJzLCBhdHRyaWJ1dGVTb3J0ZXIpO1xuXHR9XG5cdHN3aXRjaChub2RlLm5vZGVUeXBlKXtcblx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0aWYgKCF2aXNpYmxlTmFtZXNwYWNlcykgdmlzaWJsZU5hbWVzcGFjZXMgPSBbXTtcblx0XHR2YXIgc3RhcnRWaXNpYmxlTmFtZXNwYWNlcyA9IHZpc2libGVOYW1lc3BhY2VzLmxlbmd0aDtcblx0XHR2YXIgYXR0cnMgPSBub2RlLmF0dHJpYnV0ZXM7XG5cdFx0dmFyIGxlbiA9IGF0dHJzLmxlbmd0aDtcblx0XHR2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG5cdFx0dmFyIG5vZGVOYW1lID0gbm9kZS50YWdOYW1lO1xuXHRcdFxuXHRcdGlzSFRNTCA9ICAoaHRtbG5zID09PSBub2RlLm5hbWVzcGFjZVVSSSkgfHxpc0hUTUwgXG5cdFx0YnVmLnB1c2goJzwnLG5vZGVOYW1lKTtcblx0XHRcblx0XHRcblx0XHRcblx0XHRmb3IodmFyIGk9MDtpPGxlbjtpKyspe1xuXHRcdFx0Ly8gYWRkIG5hbWVzcGFjZXMgZm9yIGF0dHJpYnV0ZXNcblx0XHRcdHZhciBhdHRyID0gYXR0cnMuaXRlbShpKTtcblx0XHRcdGlmIChhdHRyLnByZWZpeCA9PSAneG1sbnMnKSB7XG5cdFx0XHRcdHZpc2libGVOYW1lc3BhY2VzLnB1c2goeyBwcmVmaXg6IGF0dHIubG9jYWxOYW1lLCBuYW1lc3BhY2U6IGF0dHIudmFsdWUgfSk7XG5cdFx0XHR9ZWxzZSBpZihhdHRyLm5vZGVOYW1lID09ICd4bWxucycpe1xuXHRcdFx0XHR2aXNpYmxlTmFtZXNwYWNlcy5wdXNoKHsgcHJlZml4OiAnJywgbmFtZXNwYWNlOiBhdHRyLnZhbHVlIH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRmb3IodmFyIGk9MDtpPGxlbjtpKyspe1xuXHRcdFx0dmFyIGF0dHIgPSBhdHRycy5pdGVtKGkpO1xuXHRcdFx0aWYgKG5lZWROYW1lc3BhY2VEZWZpbmUoYXR0cixpc0hUTUwsIHZpc2libGVOYW1lc3BhY2VzKSkge1xuXHRcdFx0XHR2YXIgcHJlZml4ID0gYXR0ci5wcmVmaXh8fCcnO1xuXHRcdFx0XHR2YXIgdXJpID0gYXR0ci5uYW1lc3BhY2VVUkk7XG5cdFx0XHRcdHZhciBucyA9IHByZWZpeCA/ICcgeG1sbnM6JyArIHByZWZpeCA6IFwiIHhtbG5zXCI7XG5cdFx0XHRcdGJ1Zi5wdXNoKG5zLCAnPVwiJyAsIHVyaSAsICdcIicpO1xuXHRcdFx0XHR2aXNpYmxlTmFtZXNwYWNlcy5wdXNoKHsgcHJlZml4OiBwcmVmaXgsIG5hbWVzcGFjZTp1cmkgfSk7XG5cdFx0XHR9XG5cdFx0XHRzZXJpYWxpemVUb1N0cmluZyhhdHRyLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcix2aXNpYmxlTmFtZXNwYWNlcyk7XG5cdFx0fVxuXHRcdC8vIGFkZCBuYW1lc3BhY2UgZm9yIGN1cnJlbnQgbm9kZVx0XHRcblx0XHRpZiAobmVlZE5hbWVzcGFjZURlZmluZShub2RlLGlzSFRNTCwgdmlzaWJsZU5hbWVzcGFjZXMpKSB7XG5cdFx0XHR2YXIgcHJlZml4ID0gbm9kZS5wcmVmaXh8fCcnO1xuXHRcdFx0dmFyIHVyaSA9IG5vZGUubmFtZXNwYWNlVVJJO1xuXHRcdFx0dmFyIG5zID0gcHJlZml4ID8gJyB4bWxuczonICsgcHJlZml4IDogXCIgeG1sbnNcIjtcblx0XHRcdGJ1Zi5wdXNoKG5zLCAnPVwiJyAsIHVyaSAsICdcIicpO1xuXHRcdFx0dmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7IHByZWZpeDogcHJlZml4LCBuYW1lc3BhY2U6dXJpIH0pO1xuXHRcdH1cblx0XHRcblx0XHRpZihjaGlsZCB8fCBpc0hUTUwgJiYgIS9eKD86bWV0YXxsaW5rfGltZ3xicnxocnxpbnB1dCkkL2kudGVzdChub2RlTmFtZSkpe1xuXHRcdFx0YnVmLnB1c2goJz4nKTtcblx0XHRcdC8vaWYgaXMgY2RhdGEgY2hpbGQgbm9kZVxuXHRcdFx0aWYoaXNIVE1MICYmIC9ec2NyaXB0JC9pLnRlc3Qobm9kZU5hbWUpKXtcblx0XHRcdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0XHRcdGlmKGNoaWxkLmRhdGEpe1xuXHRcdFx0XHRcdFx0YnVmLnB1c2goY2hpbGQuZGF0YSk7XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRzZXJpYWxpemVUb1N0cmluZyhjaGlsZCxidWYsaXNIVE1MLG5vZGVGaWx0ZXIsdmlzaWJsZU5hbWVzcGFjZXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRcdFx0c2VyaWFsaXplVG9TdHJpbmcoY2hpbGQsYnVmLGlzSFRNTCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKTtcblx0XHRcdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRidWYucHVzaCgnPC8nLG5vZGVOYW1lLCc+Jyk7XG5cdFx0fWVsc2V7XG5cdFx0XHRidWYucHVzaCgnLz4nKTtcblx0XHR9XG5cdFx0Ly8gcmVtb3ZlIGFkZGVkIHZpc2libGUgbmFtZXNwYWNlc1xuXHRcdC8vdmlzaWJsZU5hbWVzcGFjZXMubGVuZ3RoID0gc3RhcnRWaXNpYmxlTmFtZXNwYWNlcztcblx0XHRyZXR1cm47XG5cdGNhc2UgRE9DVU1FTlRfTk9ERTpcblx0Y2FzZSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuXHRcdHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRzZXJpYWxpemVUb1N0cmluZyhjaGlsZCxidWYsaXNIVE1MLG5vZGVGaWx0ZXIsdmlzaWJsZU5hbWVzcGFjZXMpO1xuXHRcdFx0Y2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHRjYXNlIEFUVFJJQlVURV9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCgnICcsbm9kZS5uYW1lLCc9XCInLG5vZGUudmFsdWUucmVwbGFjZSgvWzwmXCJdL2csX3htbEVuY29kZXIpLCdcIicpO1xuXHRjYXNlIFRFWFRfTk9ERTpcblx0XHRyZXR1cm4gYnVmLnB1c2gobm9kZS5kYXRhLnJlcGxhY2UoL1s8Jl0vZyxfeG1sRW5jb2RlcikpO1xuXHRjYXNlIENEQVRBX1NFQ1RJT05fTk9ERTpcblx0XHRyZXR1cm4gYnVmLnB1c2goICc8IVtDREFUQVsnLG5vZGUuZGF0YSwnXV0+Jyk7XG5cdGNhc2UgQ09NTUVOVF9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggXCI8IS0tXCIsbm9kZS5kYXRhLFwiLS0+XCIpO1xuXHRjYXNlIERPQ1VNRU5UX1RZUEVfTk9ERTpcblx0XHR2YXIgcHViaWQgPSBub2RlLnB1YmxpY0lkO1xuXHRcdHZhciBzeXNpZCA9IG5vZGUuc3lzdGVtSWQ7XG5cdFx0YnVmLnB1c2goJzwhRE9DVFlQRSAnLG5vZGUubmFtZSk7XG5cdFx0aWYocHViaWQpe1xuXHRcdFx0YnVmLnB1c2goJyBQVUJMSUMgXCInLHB1YmlkKTtcblx0XHRcdGlmIChzeXNpZCAmJiBzeXNpZCE9Jy4nKSB7XG5cdFx0XHRcdGJ1Zi5wdXNoKCAnXCIgXCInLHN5c2lkKTtcblx0XHRcdH1cblx0XHRcdGJ1Zi5wdXNoKCdcIj4nKTtcblx0XHR9ZWxzZSBpZihzeXNpZCAmJiBzeXNpZCE9Jy4nKXtcblx0XHRcdGJ1Zi5wdXNoKCcgU1lTVEVNIFwiJyxzeXNpZCwnXCI+Jyk7XG5cdFx0fWVsc2V7XG5cdFx0XHR2YXIgc3ViID0gbm9kZS5pbnRlcm5hbFN1YnNldDtcblx0XHRcdGlmKHN1Yil7XG5cdFx0XHRcdGJ1Zi5wdXNoKFwiIFtcIixzdWIsXCJdXCIpO1xuXHRcdFx0fVxuXHRcdFx0YnVmLnB1c2goXCI+XCIpO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdGNhc2UgUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggXCI8P1wiLG5vZGUudGFyZ2V0LFwiIFwiLG5vZGUuZGF0YSxcIj8+XCIpO1xuXHRjYXNlIEVOVElUWV9SRUZFUkVOQ0VfTk9ERTpcblx0XHRyZXR1cm4gYnVmLnB1c2goICcmJyxub2RlLm5vZGVOYW1lLCc7Jyk7XG5cdC8vY2FzZSBFTlRJVFlfTk9ERTpcblx0Ly9jYXNlIE5PVEFUSU9OX05PREU6XG5cdGRlZmF1bHQ6XG5cdFx0YnVmLnB1c2goJz8/Jyxub2RlLm5vZGVOYW1lKTtcblx0fVxufVxuZnVuY3Rpb24gaW1wb3J0Tm9kZShkb2Msbm9kZSxkZWVwKXtcblx0dmFyIG5vZGUyO1xuXHRzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcblx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0bm9kZTIgPSBub2RlLmNsb25lTm9kZShmYWxzZSk7XG5cdFx0bm9kZTIub3duZXJEb2N1bWVudCA9IGRvYztcblx0XHQvL3ZhciBhdHRycyA9IG5vZGUyLmF0dHJpYnV0ZXM7XG5cdFx0Ly92YXIgbGVuID0gYXR0cnMubGVuZ3RoO1xuXHRcdC8vZm9yKHZhciBpPTA7aTxsZW47aSsrKXtcblx0XHRcdC8vbm9kZTIuc2V0QXR0cmlidXRlTm9kZU5TKGltcG9ydE5vZGUoZG9jLGF0dHJzLml0ZW0oaSksZGVlcCkpO1xuXHRcdC8vfVxuXHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0YnJlYWs7XG5cdGNhc2UgQVRUUklCVVRFX05PREU6XG5cdFx0ZGVlcCA9IHRydWU7XG5cdFx0YnJlYWs7XG5cdC8vY2FzZSBFTlRJVFlfUkVGRVJFTkNFX05PREU6XG5cdC8vY2FzZSBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU6XG5cdC8vLy9jYXNlIFRFWFRfTk9ERTpcblx0Ly9jYXNlIENEQVRBX1NFQ1RJT05fTk9ERTpcblx0Ly9jYXNlIENPTU1FTlRfTk9ERTpcblx0Ly9cdGRlZXAgPSBmYWxzZTtcblx0Ly9cdGJyZWFrO1xuXHQvL2Nhc2UgRE9DVU1FTlRfTk9ERTpcblx0Ly9jYXNlIERPQ1VNRU5UX1RZUEVfTk9ERTpcblx0Ly9jYW5ub3QgYmUgaW1wb3J0ZWQuXG5cdC8vY2FzZSBFTlRJVFlfTk9ERTpcblx0Ly9jYXNlIE5PVEFUSU9OX05PREXvvJpcblx0Ly9jYW4gbm90IGhpdCBpbiBsZXZlbDNcblx0Ly9kZWZhdWx0OnRocm93IGU7XG5cdH1cblx0aWYoIW5vZGUyKXtcblx0XHRub2RlMiA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTsvL2ZhbHNlXG5cdH1cblx0bm9kZTIub3duZXJEb2N1bWVudCA9IGRvYztcblx0bm9kZTIucGFyZW50Tm9kZSA9IG51bGw7XG5cdGlmKGRlZXApe1xuXHRcdHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRub2RlMi5hcHBlbmRDaGlsZChpbXBvcnROb2RlKGRvYyxjaGlsZCxkZWVwKSk7XG5cdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbm9kZTI7XG59XG4vL1xuLy92YXIgX3JlbGF0aW9uTWFwID0ge2ZpcnN0Q2hpbGQ6MSxsYXN0Q2hpbGQ6MSxwcmV2aW91c1NpYmxpbmc6MSxuZXh0U2libGluZzoxLFxuLy9cdFx0XHRcdFx0YXR0cmlidXRlczoxLGNoaWxkTm9kZXM6MSxwYXJlbnROb2RlOjEsZG9jdW1lbnRFbGVtZW50OjEsZG9jdHlwZSx9O1xuZnVuY3Rpb24gY2xvbmVOb2RlKGRvYyxub2RlLGRlZXApe1xuXHR2YXIgbm9kZTIgPSBuZXcgbm9kZS5jb25zdHJ1Y3RvcigpO1xuXHRmb3IodmFyIG4gaW4gbm9kZSl7XG5cdFx0dmFyIHYgPSBub2RlW25dO1xuXHRcdGlmKHR5cGVvZiB2ICE9ICdvYmplY3QnICl7XG5cdFx0XHRpZih2ICE9IG5vZGUyW25dKXtcblx0XHRcdFx0bm9kZTJbbl0gPSB2O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZihub2RlLmNoaWxkTm9kZXMpe1xuXHRcdG5vZGUyLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0fVxuXHRub2RlMi5vd25lckRvY3VtZW50ID0gZG9jO1xuXHRzd2l0Y2ggKG5vZGUyLm5vZGVUeXBlKSB7XG5cdGNhc2UgRUxFTUVOVF9OT0RFOlxuXHRcdHZhciBhdHRyc1x0PSBub2RlLmF0dHJpYnV0ZXM7XG5cdFx0dmFyIGF0dHJzMlx0PSBub2RlMi5hdHRyaWJ1dGVzID0gbmV3IE5hbWVkTm9kZU1hcCgpO1xuXHRcdHZhciBsZW4gPSBhdHRycy5sZW5ndGhcblx0XHRhdHRyczIuX293bmVyRWxlbWVudCA9IG5vZGUyO1xuXHRcdGZvcih2YXIgaT0wO2k8bGVuO2krKyl7XG5cdFx0XHRub2RlMi5zZXRBdHRyaWJ1dGVOb2RlKGNsb25lTm9kZShkb2MsYXR0cnMuaXRlbShpKSx0cnVlKSk7XG5cdFx0fVxuXHRcdGJyZWFrOztcblx0Y2FzZSBBVFRSSUJVVEVfTk9ERTpcblx0XHRkZWVwID0gdHJ1ZTtcblx0fVxuXHRpZihkZWVwKXtcblx0XHR2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG5cdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0bm9kZTIuYXBwZW5kQ2hpbGQoY2xvbmVOb2RlKGRvYyxjaGlsZCxkZWVwKSk7XG5cdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbm9kZTI7XG59XG5cbmZ1bmN0aW9uIF9fc2V0X18ob2JqZWN0LGtleSx2YWx1ZSl7XG5cdG9iamVjdFtrZXldID0gdmFsdWVcbn1cbi8vZG8gZHluYW1pY1xudHJ5e1xuXHRpZihPYmplY3QuZGVmaW5lUHJvcGVydHkpe1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMaXZlTm9kZUxpc3QucHJvdG90eXBlLCdsZW5ndGgnLHtcblx0XHRcdGdldDpmdW5jdGlvbigpe1xuXHRcdFx0XHRfdXBkYXRlTGl2ZUxpc3QodGhpcyk7XG5cdFx0XHRcdHJldHVybiB0aGlzLiQkbGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwndGV4dENvbnRlbnQnLHtcblx0XHRcdGdldDpmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXR1cm4gZ2V0VGV4dENvbnRlbnQodGhpcyk7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OmZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRzd2l0Y2godGhpcy5ub2RlVHlwZSl7XG5cdFx0XHRcdGNhc2UgRUxFTUVOVF9OT0RFOlxuXHRcdFx0XHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0XHRcdFx0d2hpbGUodGhpcy5maXJzdENoaWxkKXtcblx0XHRcdFx0XHRcdHRoaXMucmVtb3ZlQ2hpbGQodGhpcy5maXJzdENoaWxkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoZGF0YSB8fCBTdHJpbmcoZGF0YSkpe1xuXHRcdFx0XHRcdFx0dGhpcy5hcHBlbmRDaGlsZCh0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHQvL1RPRE86XG5cdFx0XHRcdFx0dGhpcy5kYXRhID0gZGF0YTtcblx0XHRcdFx0XHR0aGlzLnZhbHVlID0gZGF0YTtcblx0XHRcdFx0XHR0aGlzLm5vZGVWYWx1ZSA9IGRhdGE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGdldFRleHRDb250ZW50KG5vZGUpe1xuXHRcdFx0c3dpdGNoKG5vZGUubm9kZVR5cGUpe1xuXHRcdFx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0XHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0XHRcdHZhciBidWYgPSBbXTtcblx0XHRcdFx0bm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHRcdFx0d2hpbGUobm9kZSl7XG5cdFx0XHRcdFx0aWYobm9kZS5ub2RlVHlwZSE9PTcgJiYgbm9kZS5ub2RlVHlwZSAhPT04KXtcblx0XHRcdFx0XHRcdGJ1Zi5wdXNoKGdldFRleHRDb250ZW50KG5vZGUpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGJ1Zi5qb2luKCcnKTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBub2RlLm5vZGVWYWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0X19zZXRfXyA9IGZ1bmN0aW9uKG9iamVjdCxrZXksdmFsdWUpe1xuXHRcdFx0Ly9jb25zb2xlLmxvZyh2YWx1ZSlcblx0XHRcdG9iamVjdFsnJCQnK2tleV0gPSB2YWx1ZVxuXHRcdH1cblx0fVxufWNhdGNoKGUpey8vaWU4XG59XG5cbi8vaWYodHlwZW9mIHJlcXVpcmUgPT0gJ2Z1bmN0aW9uJyl7XG5cdGV4cG9ydHMuRE9NSW1wbGVtZW50YXRpb24gPSBET01JbXBsZW1lbnRhdGlvbjtcblx0ZXhwb3J0cy5YTUxTZXJpYWxpemVyID0gWE1MU2VyaWFsaXplcjtcbi8vfVxuIiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9fY3NzLWxvYWRlckAxLjAuMUBjc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTYtb25lT2YtMy0xIS4uLy4uL19wb3N0Y3NzLWxvYWRlckAzLjAuMEBwb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNi1vbmVPZi0zLTIhLi4vLi4vX3Bvc3Rjc3MtbG9hZGVyQDMuMC4wQHBvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS02LW9uZU9mLTMtMyEuL3ZpZGVvLWpzLmNzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9fdnVlLXN0eWxlLWxvYWRlckA0LjEuMkB2dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjZlMDk0MjY3XCIsIGNvbnRlbnQsIHRydWUsIHtcInNvdXJjZU1hcFwiOmZhbHNlLFwic2hhZG93TW9kZVwiOmZhbHNlfSk7IiwiLyoqXG4gKiBtdXguanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBVdGlsaXRpZXMgdG8gZGV0ZWN0IGJhc2ljIHByb3BlcnRpZXMgYW5kIG1ldGFkYXRhIGFib3V0IE1QNHMuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHRvVW5zaWduZWQgPSByZXF1aXJlKCcuLi91dGlscy9iaW4nKS50b1Vuc2lnbmVkO1xudmFyIHRvSGV4U3RyaW5nID0gcmVxdWlyZSgnLi4vdXRpbHMvYmluJykudG9IZXhTdHJpbmc7XG52YXIgZmluZEJveCA9IHJlcXVpcmUoJy4uL21wNC9maW5kLWJveC5qcycpO1xudmFyIHBhcnNlVHlwZSA9IHJlcXVpcmUoJy4uL21wNC9wYXJzZS10eXBlLmpzJyk7XG52YXIgcGFyc2VUZmhkID0gcmVxdWlyZSgnLi4vdG9vbHMvcGFyc2UtdGZoZC5qcycpO1xudmFyIHBhcnNlVHJ1biA9IHJlcXVpcmUoJy4uL3Rvb2xzL3BhcnNlLXRydW4uanMnKTtcbnZhciBwYXJzZVRmZHQgPSByZXF1aXJlKCcuLi90b29scy9wYXJzZS10ZmR0LmpzJyk7XG52YXIgdGltZXNjYWxlLCBzdGFydFRpbWUsIGNvbXBvc2l0aW9uU3RhcnRUaW1lLCBnZXRWaWRlb1RyYWNrSWRzLCBnZXRUcmFja3MsXG4gIGdldFRpbWVzY2FsZUZyb21NZWRpYUhlYWRlcjtcblxuLyoqXG4gKiBQYXJzZXMgYW4gTVA0IGluaXRpYWxpemF0aW9uIHNlZ21lbnQgYW5kIGV4dHJhY3RzIHRoZSB0aW1lc2NhbGVcbiAqIHZhbHVlcyBmb3IgYW55IGRlY2xhcmVkIHRyYWNrcy4gVGltZXNjYWxlIHZhbHVlcyBpbmRpY2F0ZSB0aGVcbiAqIG51bWJlciBvZiBjbG9jayB0aWNrcyBwZXIgc2Vjb25kIHRvIGFzc3VtZSBmb3IgdGltZS1iYXNlZCB2YWx1ZXNcbiAqIGVsc2V3aGVyZSBpbiB0aGUgTVA0LlxuICpcbiAqIFRvIGRldGVybWluZSB0aGUgc3RhcnQgdGltZSBvZiBhbiBNUDQsIHlvdSBuZWVkIHR3byBwaWVjZXMgb2ZcbiAqIGluZm9ybWF0aW9uOiB0aGUgdGltZXNjYWxlIHVuaXQgYW5kIHRoZSBlYXJsaWVzdCBiYXNlIG1lZGlhIGRlY29kZVxuICogdGltZS4gTXVsdGlwbGUgdGltZXNjYWxlcyBjYW4gYmUgc3BlY2lmaWVkIHdpdGhpbiBhbiBNUDQgYnV0IHRoZVxuICogYmFzZSBtZWRpYSBkZWNvZGUgdGltZSBpcyBhbHdheXMgZXhwcmVzc2VkIGluIHRoZSB0aW1lc2NhbGUgZnJvbVxuICogdGhlIG1lZGlhIGhlYWRlciBib3ggZm9yIHRoZSB0cmFjazpcbiAqIGBgYFxuICogbW9vdiA+IHRyYWsgPiBtZGlhID4gbWRoZC50aW1lc2NhbGVcbiAqIGBgYFxuICogQHBhcmFtIGluaXQge1VpbnQ4QXJyYXl9IHRoZSBieXRlcyBvZiB0aGUgaW5pdCBzZWdtZW50XG4gKiBAcmV0dXJuIHtvYmplY3R9IGEgaGFzaCBvZiB0cmFjayBpZHMgdG8gdGltZXNjYWxlIHZhbHVlcyBvciBudWxsIGlmXG4gKiB0aGUgaW5pdCBzZWdtZW50IGlzIG1hbGZvcm1lZC5cbiAqL1xudGltZXNjYWxlID0gZnVuY3Rpb24oaW5pdCkge1xuICB2YXJcbiAgICByZXN1bHQgPSB7fSxcbiAgICB0cmFrcyA9IGZpbmRCb3goaW5pdCwgWydtb292JywgJ3RyYWsnXSk7XG5cbiAgLy8gbWRoZCB0aW1lc2NhbGVcbiAgcmV0dXJuIHRyYWtzLnJlZHVjZShmdW5jdGlvbihyZXN1bHQsIHRyYWspIHtcbiAgICB2YXIgdGtoZCwgdmVyc2lvbiwgaW5kZXgsIGlkLCBtZGhkO1xuXG4gICAgdGtoZCA9IGZpbmRCb3godHJhaywgWyd0a2hkJ10pWzBdO1xuICAgIGlmICghdGtoZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZlcnNpb24gPSB0a2hkWzBdO1xuICAgIGluZGV4ID0gdmVyc2lvbiA9PT0gMCA/IDEyIDogMjA7XG4gICAgaWQgPSB0b1Vuc2lnbmVkKHRraGRbaW5kZXhdICAgICA8PCAyNCB8XG4gICAgICAgICAgICAgICAgICAgIHRraGRbaW5kZXggKyAxXSA8PCAxNiB8XG4gICAgICAgICAgICAgICAgICAgIHRraGRbaW5kZXggKyAyXSA8PCAgOCB8XG4gICAgICAgICAgICAgICAgICAgIHRraGRbaW5kZXggKyAzXSk7XG5cbiAgICBtZGhkID0gZmluZEJveCh0cmFrLCBbJ21kaWEnLCAnbWRoZCddKVswXTtcbiAgICBpZiAoIW1kaGQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2ZXJzaW9uID0gbWRoZFswXTtcbiAgICBpbmRleCA9IHZlcnNpb24gPT09IDAgPyAxMiA6IDIwO1xuICAgIHJlc3VsdFtpZF0gPSB0b1Vuc2lnbmVkKG1kaGRbaW5kZXhdICAgICA8PCAyNCB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWRoZFtpbmRleCArIDFdIDw8IDE2IHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZGhkW2luZGV4ICsgMl0gPDwgIDggfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kaGRbaW5kZXggKyAzXSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgcmVzdWx0KTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBiYXNlIG1lZGlhIGRlY29kZSBzdGFydCB0aW1lLCBpbiBzZWNvbmRzLCBmb3IgYW4gTVA0XG4gKiBmcmFnbWVudC4gSWYgbXVsdGlwbGUgZnJhZ21lbnRzIGFyZSBzcGVjaWZpZWQsIHRoZSBlYXJsaWVzdCB0aW1lIGlzXG4gKiByZXR1cm5lZC5cbiAqXG4gKiBUaGUgYmFzZSBtZWRpYSBkZWNvZGUgdGltZSBjYW4gYmUgcGFyc2VkIGZyb20gdHJhY2sgZnJhZ21lbnRcbiAqIG1ldGFkYXRhOlxuICogYGBgXG4gKiBtb29mID4gdHJhZiA+IHRmZHQuYmFzZU1lZGlhRGVjb2RlVGltZVxuICogYGBgXG4gKiBJdCByZXF1aXJlcyB0aGUgdGltZXNjYWxlIHZhbHVlIGZyb20gdGhlIG1kaGQgdG8gaW50ZXJwcmV0LlxuICpcbiAqIEBwYXJhbSB0aW1lc2NhbGUge29iamVjdH0gYSBoYXNoIG9mIHRyYWNrIGlkcyB0byB0aW1lc2NhbGUgdmFsdWVzLlxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgZWFybGllc3QgYmFzZSBtZWRpYSBkZWNvZGUgc3RhcnQgdGltZSBmb3IgdGhlXG4gKiBmcmFnbWVudCwgaW4gc2Vjb25kc1xuICovXG5zdGFydFRpbWUgPSBmdW5jdGlvbih0aW1lc2NhbGUsIGZyYWdtZW50KSB7XG4gIHZhciB0cmFmcywgYmFzZVRpbWVzLCByZXN1bHQ7XG5cbiAgLy8gd2UgbmVlZCBpbmZvIGZyb20gdHdvIGNoaWxkcmVuZCBvZiBlYWNoIHRyYWNrIGZyYWdtZW50IGJveFxuICB0cmFmcyA9IGZpbmRCb3goZnJhZ21lbnQsIFsnbW9vZicsICd0cmFmJ10pO1xuXG4gIC8vIGRldGVybWluZSB0aGUgc3RhcnQgdGltZXMgZm9yIGVhY2ggdHJhY2tcbiAgYmFzZVRpbWVzID0gW10uY29uY2F0LmFwcGx5KFtdLCB0cmFmcy5tYXAoZnVuY3Rpb24odHJhZikge1xuICAgIHJldHVybiBmaW5kQm94KHRyYWYsIFsndGZoZCddKS5tYXAoZnVuY3Rpb24odGZoZCkge1xuICAgICAgdmFyIGlkLCBzY2FsZSwgYmFzZVRpbWU7XG5cbiAgICAgIC8vIGdldCB0aGUgdHJhY2sgaWQgZnJvbSB0aGUgdGZoZFxuICAgICAgaWQgPSB0b1Vuc2lnbmVkKHRmaGRbNF0gPDwgMjQgfFxuICAgICAgICAgICAgICAgICAgICAgIHRmaGRbNV0gPDwgMTYgfFxuICAgICAgICAgICAgICAgICAgICAgIHRmaGRbNl0gPDwgIDggfFxuICAgICAgICAgICAgICAgICAgICAgIHRmaGRbN10pO1xuICAgICAgLy8gYXNzdW1lIGEgOTBrSHogY2xvY2sgaWYgbm8gdGltZXNjYWxlIHdhcyBzcGVjaWZpZWRcbiAgICAgIHNjYWxlID0gdGltZXNjYWxlW2lkXSB8fCA5MGUzO1xuXG4gICAgICAvLyBnZXQgdGhlIGJhc2UgbWVkaWEgZGVjb2RlIHRpbWUgZnJvbSB0aGUgdGZkdFxuICAgICAgYmFzZVRpbWUgPSBmaW5kQm94KHRyYWYsIFsndGZkdCddKS5tYXAoZnVuY3Rpb24odGZkdCkge1xuICAgICAgICB2YXIgdmVyc2lvbiwgcmVzdWx0O1xuXG4gICAgICAgIHZlcnNpb24gPSB0ZmR0WzBdO1xuICAgICAgICByZXN1bHQgPSB0b1Vuc2lnbmVkKHRmZHRbNF0gPDwgMjQgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmZHRbNV0gPDwgMTYgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmZHRbNl0gPDwgIDggfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmZHRbN10pO1xuICAgICAgICBpZiAodmVyc2lvbiA9PT0gIDEpIHtcbiAgICAgICAgICByZXN1bHQgKj0gTWF0aC5wb3coMiwgMzIpO1xuICAgICAgICAgIHJlc3VsdCArPSB0b1Vuc2lnbmVkKHRmZHRbOF0gIDw8IDI0IHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZmR0WzldICA8PCAxNiB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGZkdFsxMF0gPDwgIDggfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRmZHRbMTFdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSlbMF07XG4gICAgICBiYXNlVGltZSA9IGJhc2VUaW1lIHx8IEluZmluaXR5O1xuXG4gICAgICAvLyBjb252ZXJ0IGJhc2UgdGltZSB0byBzZWNvbmRzXG4gICAgICByZXR1cm4gYmFzZVRpbWUgLyBzY2FsZTtcbiAgICB9KTtcbiAgfSkpO1xuXG4gIC8vIHJldHVybiB0aGUgbWluaW11bVxuICByZXN1bHQgPSBNYXRoLm1pbi5hcHBseShudWxsLCBiYXNlVGltZXMpO1xuICByZXR1cm4gaXNGaW5pdGUocmVzdWx0KSA/IHJlc3VsdCA6IDA7XG59O1xuXG4vKipcbiAqIERldGVybWluZSB0aGUgY29tcG9zaXRpb24gc3RhcnQsIGluIHNlY29uZHMsIGZvciBhbiBNUDRcbiAqIGZyYWdtZW50LlxuICpcbiAqIFRoZSBjb21wb3NpdGlvbiBzdGFydCB0aW1lIG9mIGEgZnJhZ21lbnQgY2FuIGJlIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIGJhc2VcbiAqIG1lZGlhIGRlY29kZSB0aW1lLCBjb21wb3NpdGlvbiB0aW1lIG9mZnNldCwgYW5kIHRpbWVzY2FsZSwgYXMgZm9sbG93czpcbiAqXG4gKiBjb21wb3NpdGlvblN0YXJ0VGltZSA9IChiYXNlTWVkaWFEZWNvZGVUaW1lICsgY29tcG9zaXRpb25UaW1lT2Zmc2V0KSAvIHRpbWVzY2FsZVxuICpcbiAqIEFsbCBvZiB0aGUgYWZvcmVtZW50aW9uZWQgaW5mb3JtYXRpb24gaXMgY29udGFpbmVkIHdpdGhpbiBhIG1lZGlhIGZyYWdtZW50J3NcbiAqIGB0cmFmYCBib3gsIGV4Y2VwdCBmb3IgdGltZXNjYWxlIGluZm8sIHdoaWNoIGNvbWVzIGZyb20gdGhlIGluaXRpYWxpemF0aW9uXG4gKiBzZWdtZW50LCBzbyBhIHRyYWNrIGlkIChhbHNvIGNvbnRhaW5lZCB3aXRoaW4gYSBgdHJhZmApIGlzIGFsc28gbmVjZXNzYXJ5IHRvXG4gKiBhc3NvY2lhdGUgaXQgd2l0aCBhIHRpbWVzY2FsZVxuICpcbiAqXG4gKiBAcGFyYW0gdGltZXNjYWxlcyB7b2JqZWN0fSAtIGEgaGFzaCBvZiB0cmFjayBpZHMgdG8gdGltZXNjYWxlIHZhbHVlcy5cbiAqIEBwYXJhbSBmcmFnbWVudCB7VW5pdDhBcnJheX0gLSB0aGUgYnl0ZXMgb2YgYSBtZWRpYSBzZWdtZW50XG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBjb21wb3NpdGlvbiBzdGFydCB0aW1lIGZvciB0aGUgZnJhZ21lbnQsIGluIHNlY29uZHNcbiAqKi9cbmNvbXBvc2l0aW9uU3RhcnRUaW1lID0gZnVuY3Rpb24odGltZXNjYWxlcywgZnJhZ21lbnQpIHtcbiAgdmFyIHRyYWZCb3hlcyA9IGZpbmRCb3goZnJhZ21lbnQsIFsnbW9vZicsICd0cmFmJ10pO1xuICB2YXIgYmFzZU1lZGlhRGVjb2RlVGltZSA9IDA7XG4gIHZhciBjb21wb3NpdGlvblRpbWVPZmZzZXQgPSAwO1xuICB2YXIgdHJhY2tJZDtcblxuICBpZiAodHJhZkJveGVzICYmIHRyYWZCb3hlcy5sZW5ndGgpIHtcbiAgICAvLyBUaGUgc3BlYyBzdGF0ZXMgdGhhdCB0cmFjayBydW4gc2FtcGxlcyBjb250YWluZWQgd2l0aGluIGEgYHRyYWZgIGJveCBhcmUgY29udGlndW91cywgYnV0XG4gICAgLy8gaXQgZG9lcyBub3QgZXhwbGljaXRseSBzdGF0ZSB3aGV0aGVyIHRoZSBgdHJhZmAgYm94ZXMgdGhlbXNlbHZlcyBhcmUgY29udGlndW91cy5cbiAgICAvLyBXZSB3aWxsIGFzc3VtZSB0aGF0IHRoZXkgYXJlLCBzbyB3ZSBvbmx5IG5lZWQgdGhlIGZpcnN0IHRvIGNhbGN1bGF0ZSBzdGFydCB0aW1lLlxuICAgIHZhciB0ZmhkID0gZmluZEJveCh0cmFmQm94ZXNbMF0sIFsndGZoZCddKVswXTtcbiAgICB2YXIgdHJ1biA9IGZpbmRCb3godHJhZkJveGVzWzBdLCBbJ3RydW4nXSlbMF07XG4gICAgdmFyIHRmZHQgPSBmaW5kQm94KHRyYWZCb3hlc1swXSwgWyd0ZmR0J10pWzBdO1xuXG4gICAgaWYgKHRmaGQpIHtcbiAgICAgIHZhciBwYXJzZWRUZmhkID0gcGFyc2VUZmhkKHRmaGQpO1xuXG4gICAgICB0cmFja0lkID0gcGFyc2VkVGZoZC50cmFja0lkO1xuICAgIH1cblxuICAgIGlmICh0ZmR0KSB7XG4gICAgICB2YXIgcGFyc2VkVGZkdCA9IHBhcnNlVGZkdCh0ZmR0KTtcblxuICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZSA9IHBhcnNlZFRmZHQuYmFzZU1lZGlhRGVjb2RlVGltZTtcbiAgICB9XG5cbiAgICBpZiAodHJ1bikge1xuICAgICAgdmFyIHBhcnNlZFRydW4gPSBwYXJzZVRydW4odHJ1bik7XG5cbiAgICAgIGlmIChwYXJzZWRUcnVuLnNhbXBsZXMgJiYgcGFyc2VkVHJ1bi5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICBjb21wb3NpdGlvblRpbWVPZmZzZXQgPSBwYXJzZWRUcnVuLnNhbXBsZXNbMF0uY29tcG9zaXRpb25UaW1lT2Zmc2V0IHx8IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IHRpbWVzY2FsZSBmb3IgdGhpcyBzcGVjaWZpYyB0cmFjay4gQXNzdW1lIGEgOTBrSHogY2xvY2sgaWYgbm8gdGltZXNjYWxlIHdhc1xuICAvLyBzcGVjaWZpZWQuXG4gIHZhciB0aW1lc2NhbGUgPSB0aW1lc2NhbGVzW3RyYWNrSWRdIHx8IDkwZTM7XG5cbiAgLy8gcmV0dXJuIHRoZSBjb21wb3NpdGlvbiBzdGFydCB0aW1lLCBpbiBzZWNvbmRzXG4gIHJldHVybiAoYmFzZU1lZGlhRGVjb2RlVGltZSArIGNvbXBvc2l0aW9uVGltZU9mZnNldCkgLyB0aW1lc2NhbGU7XG59O1xuXG4vKipcbiAgKiBGaW5kIHRoZSB0cmFja0lkcyBvZiB0aGUgdmlkZW8gdHJhY2tzIGluIHRoaXMgc291cmNlLlxuICAqIEZvdW5kIGJ5IHBhcnNpbmcgdGhlIEhhbmRsZXIgUmVmZXJlbmNlIGFuZCBUcmFjayBIZWFkZXIgQm94ZXM6XG4gICogICBtb292ID4gdHJhayA+IG1kaWEgPiBoZGxyXG4gICogICBtb292ID4gdHJhayA+IHRraGRcbiAgKlxuICAqIEBwYXJhbSB7VWludDhBcnJheX0gaW5pdCAtIFRoZSBieXRlcyBvZiB0aGUgaW5pdCBzZWdtZW50IGZvciB0aGlzIHNvdXJjZVxuICAqIEByZXR1cm4ge051bWJlcltdfSBBIGxpc3Qgb2YgdHJhY2tJZHNcbiAgKlxuICAqIEBzZWUgSVNPLUJNRkYtMTIvMjAxNSwgU2VjdGlvbiA4LjQuM1xuICoqL1xuZ2V0VmlkZW9UcmFja0lkcyA9IGZ1bmN0aW9uKGluaXQpIHtcbiAgdmFyIHRyYWtzID0gZmluZEJveChpbml0LCBbJ21vb3YnLCAndHJhayddKTtcbiAgdmFyIHZpZGVvVHJhY2tJZHMgPSBbXTtcblxuICB0cmFrcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWspIHtcbiAgICB2YXIgaGRscnMgPSBmaW5kQm94KHRyYWssIFsnbWRpYScsICdoZGxyJ10pO1xuICAgIHZhciB0a2hkcyA9IGZpbmRCb3godHJhaywgWyd0a2hkJ10pO1xuXG4gICAgaGRscnMuZm9yRWFjaChmdW5jdGlvbihoZGxyLCBpbmRleCkge1xuICAgICAgdmFyIGhhbmRsZXJUeXBlID0gcGFyc2VUeXBlKGhkbHIuc3ViYXJyYXkoOCwgMTIpKTtcbiAgICAgIHZhciB0a2hkID0gdGtoZHNbaW5kZXhdO1xuICAgICAgdmFyIHZpZXc7XG4gICAgICB2YXIgdmVyc2lvbjtcbiAgICAgIHZhciB0cmFja0lkO1xuXG4gICAgICBpZiAoaGFuZGxlclR5cGUgPT09ICd2aWRlJykge1xuICAgICAgICB2aWV3ID0gbmV3IERhdGFWaWV3KHRraGQuYnVmZmVyLCB0a2hkLmJ5dGVPZmZzZXQsIHRraGQuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHZlcnNpb24gPSB2aWV3LmdldFVpbnQ4KDApO1xuICAgICAgICB0cmFja0lkID0gKHZlcnNpb24gPT09IDApID8gdmlldy5nZXRVaW50MzIoMTIpIDogdmlldy5nZXRVaW50MzIoMjApO1xuXG4gICAgICAgIHZpZGVvVHJhY2tJZHMucHVzaCh0cmFja0lkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHZpZGVvVHJhY2tJZHM7XG59O1xuXG5nZXRUaW1lc2NhbGVGcm9tTWVkaWFIZWFkZXIgPSBmdW5jdGlvbihtZGhkKSB7XG4gIC8vIG1kaGQgaXMgYSBGdWxsQm94LCBtZWFuaW5nIGl0IHdpbGwgaGF2ZSBpdHMgb3duIHZlcnNpb24gYXMgdGhlIGZpcnN0IGJ5dGVcbiAgdmFyIHZlcnNpb24gPSBtZGhkWzBdO1xuICB2YXIgaW5kZXggPSB2ZXJzaW9uID09PSAwID8gMTIgOiAyMDtcblxuICByZXR1cm4gdG9VbnNpZ25lZChcbiAgICBtZGhkW2luZGV4XSAgICAgPDwgMjQgfFxuICAgIG1kaGRbaW5kZXggKyAxXSA8PCAxNiB8XG4gICAgbWRoZFtpbmRleCArIDJdIDw8ICA4IHxcbiAgICBtZGhkW2luZGV4ICsgM11cbiAgKTtcbn07XG5cbi8qKlxuICogR2V0IGFsbCB0aGUgdmlkZW8sIGF1ZGlvLCBhbmQgaGludCB0cmFja3MgZnJvbSBhIG5vbiBmcmFnbWVudGVkXG4gKiBtcDQgc2VnbWVudFxuICovXG5nZXRUcmFja3MgPSBmdW5jdGlvbihpbml0KSB7XG4gIHZhciB0cmFrcyA9IGZpbmRCb3goaW5pdCwgWydtb292JywgJ3RyYWsnXSk7XG4gIHZhciB0cmFja3MgPSBbXTtcblxuICB0cmFrcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWspIHtcbiAgICB2YXIgdHJhY2sgPSB7fTtcbiAgICB2YXIgdGtoZCA9IGZpbmRCb3godHJhaywgWyd0a2hkJ10pWzBdO1xuICAgIHZhciB2aWV3LCB0a2hkVmVyc2lvbjtcblxuICAgIC8vIGlkXG4gICAgaWYgKHRraGQpIHtcbiAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcodGtoZC5idWZmZXIsIHRraGQuYnl0ZU9mZnNldCwgdGtoZC5ieXRlTGVuZ3RoKTtcbiAgICAgIHRraGRWZXJzaW9uID0gdmlldy5nZXRVaW50OCgwKTtcblxuICAgICAgdHJhY2suaWQgPSAodGtoZFZlcnNpb24gPT09IDApID8gdmlldy5nZXRVaW50MzIoMTIpIDogdmlldy5nZXRVaW50MzIoMjApO1xuICAgIH1cblxuICAgIHZhciBoZGxyID0gZmluZEJveCh0cmFrLCBbJ21kaWEnLCAnaGRsciddKVswXTtcblxuICAgIC8vIHR5cGVcbiAgICBpZiAoaGRscikge1xuICAgICAgdmFyIHR5cGUgPSBwYXJzZVR5cGUoaGRsci5zdWJhcnJheSg4LCAxMikpO1xuXG4gICAgICBpZiAodHlwZSA9PT0gJ3ZpZGUnKSB7XG4gICAgICAgIHRyYWNrLnR5cGUgPSAndmlkZW8nO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnc291bicpIHtcbiAgICAgICAgdHJhY2sudHlwZSA9ICdhdWRpbyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFjay50eXBlID0gdHlwZTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIGNvZGVjXG4gICAgdmFyIHN0c2QgPSBmaW5kQm94KHRyYWssIFsnbWRpYScsICdtaW5mJywgJ3N0YmwnLCAnc3RzZCddKVswXTtcblxuICAgIGlmIChzdHNkKSB7XG4gICAgICB2YXIgc2FtcGxlRGVzY3JpcHRpb25zID0gc3RzZC5zdWJhcnJheSg4KTtcbiAgICAgIC8vIGdpdmVzIHRoZSBjb2RlYyB0eXBlIHN0cmluZ1xuICAgICAgdHJhY2suY29kZWMgPSBwYXJzZVR5cGUoc2FtcGxlRGVzY3JpcHRpb25zLnN1YmFycmF5KDQsIDgpKTtcblxuICAgICAgdmFyIGNvZGVjQm94ID0gZmluZEJveChzYW1wbGVEZXNjcmlwdGlvbnMsIFt0cmFjay5jb2RlY10pWzBdO1xuICAgICAgdmFyIGNvZGVjQ29uZmlnLCBjb2RlY0NvbmZpZ1R5cGU7XG5cbiAgICAgIGlmIChjb2RlY0JveCkge1xuICAgICAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjM4MSNzZWN0aW9uLTMuM1xuICAgICAgICBpZiAoKC9eW2Etel12Y1sxLTldJC9pKS50ZXN0KHRyYWNrLmNvZGVjKSkge1xuICAgICAgICAgIC8vIHdlIGRvbid0IG5lZWQgYW55dGhpbmcgYnV0IHRoZSBcImNvbmZpZ1wiIHBhcmFtZXRlciBvZiB0aGVcbiAgICAgICAgICAvLyBhdmMxIGNvZGVjQm94XG4gICAgICAgICAgY29kZWNDb25maWcgPSBjb2RlY0JveC5zdWJhcnJheSg3OCk7XG4gICAgICAgICAgY29kZWNDb25maWdUeXBlID0gcGFyc2VUeXBlKGNvZGVjQ29uZmlnLnN1YmFycmF5KDQsIDgpKTtcblxuICAgICAgICAgIGlmIChjb2RlY0NvbmZpZ1R5cGUgPT09ICdhdmNDJyAmJiBjb2RlY0NvbmZpZy5sZW5ndGggPiAxMSkge1xuICAgICAgICAgICAgdHJhY2suY29kZWMgKz0gJy4nO1xuXG4gICAgICAgICAgICAvLyBsZWZ0IHBhZGRlZCB3aXRoIHplcm9lcyBmb3Igc2luZ2xlIGRpZ2l0IGhleFxuICAgICAgICAgICAgLy8gcHJvZmlsZSBpZGNcbiAgICAgICAgICAgIHRyYWNrLmNvZGVjICs9ICB0b0hleFN0cmluZyhjb2RlY0NvbmZpZ1s5XSk7XG4gICAgICAgICAgICAvLyB0aGUgYnl0ZSBjb250YWluaW5nIHRoZSBjb25zdHJhaW50X3NldCBmbGFnc1xuICAgICAgICAgICAgdHJhY2suY29kZWMgKz0gdG9IZXhTdHJpbmcoY29kZWNDb25maWdbMTBdKTtcbiAgICAgICAgICAgIC8vIGxldmVsIGlkY1xuICAgICAgICAgICAgdHJhY2suY29kZWMgKz0gdG9IZXhTdHJpbmcoY29kZWNDb25maWdbMTFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVE9ETzogc2hvdyBhIHdhcm5pbmcgdGhhdCB3ZSBjb3VsZG4ndCBwYXJzZSB0aGUgY29kZWNcbiAgICAgICAgICAgIC8vIGFuZCBhcmUgdXNpbmcgdGhlIGRlZmF1bHRcbiAgICAgICAgICAgIHRyYWNrLmNvZGVjID0gJ2F2YzEuNGQ0MDBkJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoKC9ebXA0W2Esdl0kL2kpLnRlc3QodHJhY2suY29kZWMpKSB7XG4gICAgICAgICAgLy8gd2UgZG8gbm90IG5lZWQgYW55dGhpbmcgYnV0IHRoZSBzdHJlYW1EZXNjcmlwdG9yIG9mIHRoZSBtcDRhIGNvZGVjQm94XG4gICAgICAgICAgY29kZWNDb25maWcgPSBjb2RlY0JveC5zdWJhcnJheSgyOCk7XG4gICAgICAgICAgY29kZWNDb25maWdUeXBlID0gcGFyc2VUeXBlKGNvZGVjQ29uZmlnLnN1YmFycmF5KDQsIDgpKTtcblxuICAgICAgICAgIGlmIChjb2RlY0NvbmZpZ1R5cGUgPT09ICdlc2RzJyAmJiBjb2RlY0NvbmZpZy5sZW5ndGggPiAyMCAmJiBjb2RlY0NvbmZpZ1sxOV0gIT09IDApIHtcbiAgICAgICAgICAgIHRyYWNrLmNvZGVjICs9ICcuJyArIHRvSGV4U3RyaW5nKGNvZGVjQ29uZmlnWzE5XSk7XG4gICAgICAgICAgICAvLyB0aGlzIHZhbHVlIGlzIG9ubHkgYSBzaW5nbGUgZGlnaXRcbiAgICAgICAgICAgIHRyYWNrLmNvZGVjICs9ICcuJyArIHRvSGV4U3RyaW5nKChjb2RlY0NvbmZpZ1syMF0gPj4+IDIpICYgMHgzZikucmVwbGFjZSgvXjAvLCAnJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHNob3cgYSB3YXJuaW5nIHRoYXQgd2UgY291bGRuJ3QgcGFyc2UgdGhlIGNvZGVjXG4gICAgICAgICAgICAvLyBhbmQgYXJlIHVzaW5nIHRoZSBkZWZhdWx0XG4gICAgICAgICAgICB0cmFjay5jb2RlYyA9ICdtcDRhLjQwLjInO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUT0RPOiBzaG93IGEgd2FybmluZz8gZm9yIHVua25vd24gY29kZWMgdHlwZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1kaGQgPSBmaW5kQm94KHRyYWssIFsnbWRpYScsICdtZGhkJ10pWzBdO1xuXG4gICAgaWYgKG1kaGQpIHtcbiAgICAgIHRyYWNrLnRpbWVzY2FsZSA9IGdldFRpbWVzY2FsZUZyb21NZWRpYUhlYWRlcihtZGhkKTtcbiAgICB9XG5cbiAgICB0cmFja3MucHVzaCh0cmFjayk7XG4gIH0pO1xuXG4gIHJldHVybiB0cmFja3M7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gZXhwb3J0IG1wNCBpbnNwZWN0b3IncyBmaW5kQm94IGFuZCBwYXJzZVR5cGUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIGZpbmRCb3g6IGZpbmRCb3gsXG4gIHBhcnNlVHlwZTogcGFyc2VUeXBlLFxuICB0aW1lc2NhbGU6IHRpbWVzY2FsZSxcbiAgc3RhcnRUaW1lOiBzdGFydFRpbWUsXG4gIGNvbXBvc2l0aW9uU3RhcnRUaW1lOiBjb21wb3NpdGlvblN0YXJ0VGltZSxcbiAgdmlkZW9UcmFja0lkczogZ2V0VmlkZW9UcmFja0lkcyxcbiAgdHJhY2tzOiBnZXRUcmFja3MsXG4gIGdldFRpbWVzY2FsZUZyb21NZWRpYUhlYWRlcjogZ2V0VGltZXNjYWxlRnJvbU1lZGlhSGVhZGVyXG59O1xuIiwiLyoqXG4gKiBtdXguanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xudmFyXG4gIE9ORV9TRUNPTkRfSU5fVFMgPSA5MDAwMCwgLy8gOTBrSHogY2xvY2tcbiAgc2Vjb25kc1RvVmlkZW9UcyxcbiAgc2Vjb25kc1RvQXVkaW9UcyxcbiAgdmlkZW9Uc1RvU2Vjb25kcyxcbiAgYXVkaW9Uc1RvU2Vjb25kcyxcbiAgYXVkaW9Uc1RvVmlkZW9UcyxcbiAgdmlkZW9Uc1RvQXVkaW9UcyxcbiAgbWV0YWRhdGFUc1RvU2Vjb25kcztcblxuc2Vjb25kc1RvVmlkZW9UcyA9IGZ1bmN0aW9uKHNlY29uZHMpIHtcbiAgcmV0dXJuIHNlY29uZHMgKiBPTkVfU0VDT05EX0lOX1RTO1xufTtcblxuc2Vjb25kc1RvQXVkaW9UcyA9IGZ1bmN0aW9uKHNlY29uZHMsIHNhbXBsZVJhdGUpIHtcbiAgcmV0dXJuIHNlY29uZHMgKiBzYW1wbGVSYXRlO1xufTtcblxudmlkZW9Uc1RvU2Vjb25kcyA9IGZ1bmN0aW9uKHRpbWVzdGFtcCkge1xuICByZXR1cm4gdGltZXN0YW1wIC8gT05FX1NFQ09ORF9JTl9UUztcbn07XG5cbmF1ZGlvVHNUb1NlY29uZHMgPSBmdW5jdGlvbih0aW1lc3RhbXAsIHNhbXBsZVJhdGUpIHtcbiAgcmV0dXJuIHRpbWVzdGFtcCAvIHNhbXBsZVJhdGU7XG59O1xuXG5hdWRpb1RzVG9WaWRlb1RzID0gZnVuY3Rpb24odGltZXN0YW1wLCBzYW1wbGVSYXRlKSB7XG4gIHJldHVybiBzZWNvbmRzVG9WaWRlb1RzKGF1ZGlvVHNUb1NlY29uZHModGltZXN0YW1wLCBzYW1wbGVSYXRlKSk7XG59O1xuXG52aWRlb1RzVG9BdWRpb1RzID0gZnVuY3Rpb24odGltZXN0YW1wLCBzYW1wbGVSYXRlKSB7XG4gIHJldHVybiBzZWNvbmRzVG9BdWRpb1RzKHZpZGVvVHNUb1NlY29uZHModGltZXN0YW1wKSwgc2FtcGxlUmF0ZSk7XG59O1xuXG4vKipcbiAqIEFkanVzdCBJRDMgdGFnIG9yIGNhcHRpb24gdGltaW5nIGluZm9ybWF0aW9uIGJ5IHRoZSB0aW1lbGluZSBwdHMgdmFsdWVzXG4gKiAoaWYga2VlcE9yaWdpbmFsVGltZXN0YW1wcyBpcyBmYWxzZSkgYW5kIGNvbnZlcnQgdG8gc2Vjb25kc1xuICovXG5tZXRhZGF0YVRzVG9TZWNvbmRzID0gZnVuY3Rpb24odGltZXN0YW1wLCB0aW1lbGluZVN0YXJ0UHRzLCBrZWVwT3JpZ2luYWxUaW1lc3RhbXBzKSB7XG4gIHJldHVybiB2aWRlb1RzVG9TZWNvbmRzKGtlZXBPcmlnaW5hbFRpbWVzdGFtcHMgPyB0aW1lc3RhbXAgOiB0aW1lc3RhbXAgLSB0aW1lbGluZVN0YXJ0UHRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBPTkVfU0VDT05EX0lOX1RTOiBPTkVfU0VDT05EX0lOX1RTLFxuICBzZWNvbmRzVG9WaWRlb1RzOiBzZWNvbmRzVG9WaWRlb1RzLFxuICBzZWNvbmRzVG9BdWRpb1RzOiBzZWNvbmRzVG9BdWRpb1RzLFxuICB2aWRlb1RzVG9TZWNvbmRzOiB2aWRlb1RzVG9TZWNvbmRzLFxuICBhdWRpb1RzVG9TZWNvbmRzOiBhdWRpb1RzVG9TZWNvbmRzLFxuICBhdWRpb1RzVG9WaWRlb1RzOiBhdWRpb1RzVG9WaWRlb1RzLFxuICB2aWRlb1RzVG9BdWRpb1RzOiB2aWRlb1RzVG9BdWRpb1RzLFxuICBtZXRhZGF0YVRzVG9TZWNvbmRzOiBtZXRhZGF0YVRzVG9TZWNvbmRzXG59O1xuIiwidmFyIHdpbjtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW4gPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW4gPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICB3aW4gPSBzZWxmO1xufSBlbHNlIHtcbiAgICB3aW4gPSB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aW47XG4iLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwidmFyIHBhcnNlU2FtcGxlRmxhZ3MgPSBmdW5jdGlvbihmbGFncykge1xuICByZXR1cm4ge1xuICAgIGlzTGVhZGluZzogKGZsYWdzWzBdICYgMHgwYykgPj4+IDIsXG4gICAgZGVwZW5kc09uOiBmbGFnc1swXSAmIDB4MDMsXG4gICAgaXNEZXBlbmRlZE9uOiAoZmxhZ3NbMV0gJiAweGMwKSA+Pj4gNixcbiAgICBoYXNSZWR1bmRhbmN5OiAoZmxhZ3NbMV0gJiAweDMwKSA+Pj4gNCxcbiAgICBwYWRkaW5nVmFsdWU6IChmbGFnc1sxXSAmIDB4MGUpID4+PiAxLFxuICAgIGlzTm9uU3luY1NhbXBsZTogZmxhZ3NbMV0gJiAweDAxLFxuICAgIGRlZ3JhZGF0aW9uUHJpb3JpdHk6IChmbGFnc1syXSA8PCA4KSB8IGZsYWdzWzNdXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlU2FtcGxlRmxhZ3M7XG4iLCIvKiEgQG5hbWUgQHZpZGVvanMvdmhzLXV0aWxzIEB2ZXJzaW9uIDIuMi4xIEBsaWNlbnNlIE1JVCAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgd2luZG93ID0gcmVxdWlyZSgnZ2xvYmFsL3dpbmRvdycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHRMZWdhY3kgKGUpIHsgcmV0dXJuIGUgJiYgdHlwZW9mIGUgPT09ICdvYmplY3QnICYmICdkZWZhdWx0JyBpbiBlID8gZSA6IHsgJ2RlZmF1bHQnOiBlIH07IH1cblxudmFyIHdpbmRvd19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3kod2luZG93KTtcblxudmFyIHJlZ2V4cyA9IHtcbiAgLy8gdG8gZGV0ZXJtaW5lIG1pbWUgdHlwZXNcbiAgbXA0OiAvXihhdjA/MXxhdmMwP1sxMjM0XXx2cDA/OXxmbGFjfG9wdXN8bXAzfG1wNGF8bXA0dikvLFxuICB3ZWJtOiAvXih2cDA/Wzg5XXxhdjA/MXxvcHVzfHZvcmJpcykvLFxuICBvZ2c6IC9eKHZwMD9bODldfHRoZW9yYXxmbGFjfG9wdXN8dm9yYmlzKS8sXG4gIC8vIHRvIGRldGVybWluZSBpZiBhIGNvZGVjIGlzIGF1ZGlvIG9yIHZpZGVvXG4gIHZpZGVvOiAvXihhdjA/MXxhdmMwP1sxMjM0XXx2cDA/Wzg5XXxodmMxfGhldjF8dGhlb3JhfG1wNHYpLyxcbiAgYXVkaW86IC9eKG1wNGF8ZmxhY3x2b3JiaXN8b3B1c3xhYy1bMzRdfGVjLTN8YWxhY3xtcDMpLyxcbiAgLy8gbXV4LmpzIHN1cHBvcnQgcmVnZXhcbiAgbXV4ZXJWaWRlbzogL14oYXZjMD8xKS8sXG4gIG11eGVyQXVkaW86IC9eKG1wNGEpL1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgb2xkIGFwcGxlLXN0eWxlIGBhdmMxLjxkZD4uPGRkPmAgY29kZWMgc3RyaW5nIHdpdGggdGhlIHN0YW5kYXJkXG4gKiBgYXZjMS48aGhoaGhoPmBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29kZWNcbiAqICAgICAgICBDb2RlYyBzdHJpbmcgdG8gdHJhbnNsYXRlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgIFRoZSB0cmFuc2xhdGVkIGNvZGVjIHN0cmluZ1xuICovXG5cbnZhciB0cmFuc2xhdGVMZWdhY3lDb2RlYyA9IGZ1bmN0aW9uIHRyYW5zbGF0ZUxlZ2FjeUNvZGVjKGNvZGVjKSB7XG4gIGlmICghY29kZWMpIHtcbiAgICByZXR1cm4gY29kZWM7XG4gIH1cblxuICByZXR1cm4gY29kZWMucmVwbGFjZSgvYXZjMVxcLihcXGQrKVxcLihcXGQrKS9pLCBmdW5jdGlvbiAob3JpZywgcHJvZmlsZSwgYXZjTGV2ZWwpIHtcbiAgICB2YXIgcHJvZmlsZUhleCA9ICgnMDAnICsgTnVtYmVyKHByb2ZpbGUpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgIHZhciBhdmNMZXZlbEhleCA9ICgnMDAnICsgTnVtYmVyKGF2Y0xldmVsKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICByZXR1cm4gJ2F2YzEuJyArIHByb2ZpbGVIZXggKyAnMDAnICsgYXZjTGV2ZWxIZXg7XG4gIH0pO1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgb2xkIGFwcGxlLXN0eWxlIGBhdmMxLjxkZD4uPGRkPmAgY29kZWMgc3RyaW5ncyB3aXRoIHRoZSBzdGFuZGFyZFxuICogYGF2YzEuPGhoaGhoaD5gXG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gY29kZWNzXG4gKiAgICAgICAgQW4gYXJyYXkgb2YgY29kZWMgc3RyaW5ncyB0byB0cmFuc2xhdGVcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICogICAgICAgICBUaGUgdHJhbnNsYXRlZCBhcnJheSBvZiBjb2RlYyBzdHJpbmdzXG4gKi9cblxudmFyIHRyYW5zbGF0ZUxlZ2FjeUNvZGVjcyA9IGZ1bmN0aW9uIHRyYW5zbGF0ZUxlZ2FjeUNvZGVjcyhjb2RlY3MpIHtcbiAgcmV0dXJuIGNvZGVjcy5tYXAodHJhbnNsYXRlTGVnYWN5Q29kZWMpO1xufTtcbi8qKlxuICogUmVwbGFjZSBjb2RlY3MgaW4gdGhlIGNvZGVjIHN0cmluZyB3aXRoIHRoZSBvbGQgYXBwbGUtc3R5bGUgYGF2YzEuPGRkPi48ZGQ+YCB0byB0aGVcbiAqIHN0YW5kYXJkIGBhdmMxLjxoaGhoaGg+YC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29kZWNTdHJpbmdcbiAqICAgICAgICBUaGUgY29kZWMgc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgIFRoZSBjb2RlYyBzdHJpbmcgd2l0aCBvbGQgYXBwbGUtc3R5bGUgY29kZWNzIHJlcGxhY2VkXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgbWFwTGVnYWN5QXZjQ29kZWNzID0gZnVuY3Rpb24gbWFwTGVnYWN5QXZjQ29kZWNzKGNvZGVjU3RyaW5nKSB7XG4gIHJldHVybiBjb2RlY1N0cmluZy5yZXBsYWNlKC9hdmMxXFwuKFxcZCspXFwuKFxcZCspL2ksIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiB0cmFuc2xhdGVMZWdhY3lDb2RlY3MoW21hdGNoXSlbMF07XG4gIH0pO1xufTtcbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUGFyc2VkQ29kZWNJbmZvXG4gKiBAcHJvcGVydHkge251bWJlcn0gY29kZWNDb3VudFxuICogICAgICAgICAgIE51bWJlciBvZiBjb2RlY3MgcGFyc2VkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3ZpZGVvQ29kZWNdXG4gKiAgICAgICAgICAgUGFyc2VkIHZpZGVvIGNvZGVjIChpZiBmb3VuZClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdmlkZW9PYmplY3RUeXBlSW5kaWNhdG9yXVxuICogICAgICAgICAgIFZpZGVvIG9iamVjdCB0eXBlIGluZGljYXRvciAoaWYgZm91bmQpXG4gKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBhdWRpb1Byb2ZpbGVcbiAqICAgICAgICAgICBBdWRpbyBwcm9maWxlXG4gKi9cblxuLyoqXG4gKiBQYXJzZXMgYSBjb2RlYyBzdHJpbmcgdG8gcmV0cmlldmUgdGhlIG51bWJlciBvZiBjb2RlY3Mgc3BlY2lmaWVkLCB0aGUgdmlkZW8gY29kZWMgYW5kXG4gKiBvYmplY3QgdHlwZSBpbmRpY2F0b3IsIGFuZCB0aGUgYXVkaW8gcHJvZmlsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVjU3RyaW5nXVxuICogICAgICAgIFRoZSBjb2RlYyBzdHJpbmcgdG8gcGFyc2VcbiAqIEByZXR1cm4ge1BhcnNlZENvZGVjSW5mb31cbiAqICAgICAgICAgUGFyc2VkIGNvZGVjIGluZm9cbiAqL1xuXG52YXIgcGFyc2VDb2RlY3MgPSBmdW5jdGlvbiBwYXJzZUNvZGVjcyhjb2RlY1N0cmluZykge1xuICBpZiAoY29kZWNTdHJpbmcgPT09IHZvaWQgMCkge1xuICAgIGNvZGVjU3RyaW5nID0gJyc7XG4gIH1cblxuICB2YXIgY29kZWNzID0gY29kZWNTdHJpbmcuc3BsaXQoJywnKTtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBjb2RlY3MuZm9yRWFjaChmdW5jdGlvbiAoY29kZWMpIHtcbiAgICBjb2RlYyA9IGNvZGVjLnRyaW0oKTtcbiAgICBbJ3ZpZGVvJywgJ2F1ZGlvJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIG1hdGNoID0gcmVnZXhzW25hbWVdLmV4ZWMoY29kZWMudG9Mb3dlckNhc2UoKSk7XG5cbiAgICAgIGlmICghbWF0Y2ggfHwgbWF0Y2gubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBtYWludGFpbiBjb2RlYyBjYXNlXG5cblxuICAgICAgdmFyIHR5cGUgPSBjb2RlYy5zdWJzdHJpbmcoMCwgbWF0Y2hbMV0ubGVuZ3RoKTtcbiAgICAgIHZhciBkZXRhaWxzID0gY29kZWMucmVwbGFjZSh0eXBlLCAnJyk7XG4gICAgICByZXN1bHRbbmFtZV0gPSB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGRldGFpbHM6IGRldGFpbHNcbiAgICAgIH07XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbi8qKlxuICogUmV0dXJucyBhIFBhcnNlZENvZGVjSW5mbyBvYmplY3QgZm9yIHRoZSBkZWZhdWx0IGFsdGVybmF0ZSBhdWRpbyBwbGF5bGlzdCBpZiB0aGVyZSBpc1xuICogYSBkZWZhdWx0IGFsdGVybmF0ZSBhdWRpbyBwbGF5bGlzdCBmb3IgdGhlIHByb3ZpZGVkIGF1ZGlvIGdyb3VwLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXN0ZXJcbiAqICAgICAgICBUaGUgbWFzdGVyIHBsYXlsaXN0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXVkaW9Hcm91cElkXG4gKiAgICAgICAgSUQgb2YgdGhlIGF1ZGlvIGdyb3VwIGZvciB3aGljaCB0byBmaW5kIHRoZSBkZWZhdWx0IGNvZGVjIGluZm9cbiAqIEByZXR1cm4ge1BhcnNlZENvZGVjSW5mb31cbiAqICAgICAgICAgUGFyc2VkIGNvZGVjIGluZm9cbiAqL1xuXG52YXIgY29kZWNzRnJvbURlZmF1bHQgPSBmdW5jdGlvbiBjb2RlY3NGcm9tRGVmYXVsdChtYXN0ZXIsIGF1ZGlvR3JvdXBJZCkge1xuICBpZiAoIW1hc3Rlci5tZWRpYUdyb3Vwcy5BVURJTyB8fCAhYXVkaW9Hcm91cElkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYXVkaW9Hcm91cCA9IG1hc3Rlci5tZWRpYUdyb3Vwcy5BVURJT1thdWRpb0dyb3VwSWRdO1xuXG4gIGlmICghYXVkaW9Hcm91cCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBhdWRpb0dyb3VwKSB7XG4gICAgdmFyIGF1ZGlvVHlwZSA9IGF1ZGlvR3JvdXBbbmFtZV07XG5cbiAgICBpZiAoYXVkaW9UeXBlLmRlZmF1bHQgJiYgYXVkaW9UeXBlLnBsYXlsaXN0cykge1xuICAgICAgLy8gY29kZWMgc2hvdWxkIGJlIHRoZSBzYW1lIGZvciBhbGwgcGxheWxpc3RzIHdpdGhpbiB0aGUgYXVkaW8gdHlwZVxuICAgICAgcmV0dXJuIHBhcnNlQ29kZWNzKGF1ZGlvVHlwZS5wbGF5bGlzdHNbMF0uYXR0cmlidXRlcy5DT0RFQ1MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbnZhciBpc1ZpZGVvQ29kZWMgPSBmdW5jdGlvbiBpc1ZpZGVvQ29kZWMoY29kZWMpIHtcbiAgaWYgKGNvZGVjID09PSB2b2lkIDApIHtcbiAgICBjb2RlYyA9ICcnO1xuICB9XG5cbiAgcmV0dXJuIHJlZ2V4cy52aWRlby50ZXN0KGNvZGVjLnRyaW0oKS50b0xvd2VyQ2FzZSgpKTtcbn07XG52YXIgaXNBdWRpb0NvZGVjID0gZnVuY3Rpb24gaXNBdWRpb0NvZGVjKGNvZGVjKSB7XG4gIGlmIChjb2RlYyA9PT0gdm9pZCAwKSB7XG4gICAgY29kZWMgPSAnJztcbiAgfVxuXG4gIHJldHVybiByZWdleHMuYXVkaW8udGVzdChjb2RlYy50cmltKCkudG9Mb3dlckNhc2UoKSk7XG59O1xudmFyIGdldE1pbWVGb3JDb2RlYyA9IGZ1bmN0aW9uIGdldE1pbWVGb3JDb2RlYyhjb2RlY1N0cmluZykge1xuICBpZiAoIWNvZGVjU3RyaW5nIHx8IHR5cGVvZiBjb2RlY1N0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY29kZWNzID0gY29kZWNTdHJpbmcudG9Mb3dlckNhc2UoKS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiB0cmFuc2xhdGVMZWdhY3lDb2RlYyhjLnRyaW0oKSk7XG4gIH0pOyAvLyBkZWZhdWx0IHRvIHZpZGVvIHR5cGVcblxuICB2YXIgdHlwZSA9ICd2aWRlbyc7IC8vIG9ubHkgY2hhbmdlIHRvIGF1ZGlvIHR5cGUgaWYgdGhlIG9ubHkgY29kZWMgd2UgaGF2ZSBpc1xuICAvLyBhdWRpb1xuXG4gIGlmIChjb2RlY3MubGVuZ3RoID09PSAxICYmIGlzQXVkaW9Db2RlYyhjb2RlY3NbMF0pKSB7XG4gICAgdHlwZSA9ICdhdWRpbyc7XG4gIH0gLy8gZGVmYXVsdCB0aGUgY29udGFpbmVyIHRvIG1wNFxuXG5cbiAgdmFyIGNvbnRhaW5lciA9ICdtcDQnOyAvLyBldmVyeSBjb2RlYyBtdXN0IGJlIGFibGUgdG8gZ28gaW50byB0aGUgY29udGFpbmVyXG4gIC8vIGZvciB0aGF0IGNvbnRhaW5lciB0byBiZSB0aGUgY29ycmVjdCBvbmVcblxuICBpZiAoY29kZWNzLmV2ZXJ5KGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIHJlZ2V4cy5tcDQudGVzdChjKTtcbiAgfSkpIHtcbiAgICBjb250YWluZXIgPSAnbXA0JztcbiAgfSBlbHNlIGlmIChjb2RlY3MuZXZlcnkoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gcmVnZXhzLndlYm0udGVzdChjKTtcbiAgfSkpIHtcbiAgICBjb250YWluZXIgPSAnd2VibSc7XG4gIH0gZWxzZSBpZiAoY29kZWNzLmV2ZXJ5KGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIHJlZ2V4cy5vZ2cudGVzdChjKTtcbiAgfSkpIHtcbiAgICBjb250YWluZXIgPSAnb2dnJztcbiAgfVxuXG4gIHJldHVybiB0eXBlICsgXCIvXCIgKyBjb250YWluZXIgKyBcIjtjb2RlY3M9XFxcIlwiICsgY29kZWNTdHJpbmcgKyBcIlxcXCJcIjtcbn07XG52YXIgYnJvd3NlclN1cHBvcnRzQ29kZWMgPSBmdW5jdGlvbiBicm93c2VyU3VwcG9ydHNDb2RlYyhjb2RlY1N0cmluZykge1xuICBpZiAoY29kZWNTdHJpbmcgPT09IHZvaWQgMCkge1xuICAgIGNvZGVjU3RyaW5nID0gJyc7XG4gIH1cblxuICByZXR1cm4gd2luZG93X19kZWZhdWx0WydkZWZhdWx0J10uTWVkaWFTb3VyY2UgJiYgd2luZG93X19kZWZhdWx0WydkZWZhdWx0J10uTWVkaWFTb3VyY2UuaXNUeXBlU3VwcG9ydGVkICYmIHdpbmRvd19fZGVmYXVsdFsnZGVmYXVsdCddLk1lZGlhU291cmNlLmlzVHlwZVN1cHBvcnRlZChnZXRNaW1lRm9yQ29kZWMoY29kZWNTdHJpbmcpKSB8fCBmYWxzZTtcbn07XG52YXIgbXV4ZXJTdXBwb3J0c0NvZGVjID0gZnVuY3Rpb24gbXV4ZXJTdXBwb3J0c0NvZGVjKGNvZGVjU3RyaW5nKSB7XG4gIGlmIChjb2RlY1N0cmluZyA9PT0gdm9pZCAwKSB7XG4gICAgY29kZWNTdHJpbmcgPSAnJztcbiAgfVxuXG4gIHJldHVybiBjb2RlY1N0cmluZy50b0xvd2VyQ2FzZSgpLnNwbGl0KCcsJykuZXZlcnkoZnVuY3Rpb24gKGNvZGVjKSB7XG4gICAgY29kZWMgPSBjb2RlYy50cmltKCk7XG4gICAgcmV0dXJuIHJlZ2V4cy5tdXhlclZpZGVvLnRlc3QoY29kZWMpIHx8IHJlZ2V4cy5tdXhlckF1ZGlvLnRlc3QoY29kZWMpO1xuICB9KTtcbn07XG52YXIgREVGQVVMVF9BVURJT19DT0RFQyA9ICdtcDRhLjQwLjInO1xudmFyIERFRkFVTFRfVklERU9fQ09ERUMgPSAnYXZjMS40ZDQwMGQnO1xuXG5leHBvcnRzLkRFRkFVTFRfQVVESU9fQ09ERUMgPSBERUZBVUxUX0FVRElPX0NPREVDO1xuZXhwb3J0cy5ERUZBVUxUX1ZJREVPX0NPREVDID0gREVGQVVMVF9WSURFT19DT0RFQztcbmV4cG9ydHMuYnJvd3NlclN1cHBvcnRzQ29kZWMgPSBicm93c2VyU3VwcG9ydHNDb2RlYztcbmV4cG9ydHMuY29kZWNzRnJvbURlZmF1bHQgPSBjb2RlY3NGcm9tRGVmYXVsdDtcbmV4cG9ydHMuZ2V0TWltZUZvckNvZGVjID0gZ2V0TWltZUZvckNvZGVjO1xuZXhwb3J0cy5pc0F1ZGlvQ29kZWMgPSBpc0F1ZGlvQ29kZWM7XG5leHBvcnRzLmlzVmlkZW9Db2RlYyA9IGlzVmlkZW9Db2RlYztcbmV4cG9ydHMubWFwTGVnYWN5QXZjQ29kZWNzID0gbWFwTGVnYWN5QXZjQ29kZWNzO1xuZXhwb3J0cy5tdXhlclN1cHBvcnRzQ29kZWMgPSBtdXhlclN1cHBvcnRzQ29kZWM7XG5leHBvcnRzLnBhcnNlQ29kZWNzID0gcGFyc2VDb2RlY3M7XG5leHBvcnRzLnRyYW5zbGF0ZUxlZ2FjeUNvZGVjID0gdHJhbnNsYXRlTGVnYWN5Q29kZWM7XG5leHBvcnRzLnRyYW5zbGF0ZUxlZ2FjeUNvZGVjcyA9IHRyYW5zbGF0ZUxlZ2FjeUNvZGVjcztcbiIsInZhciBwYXJzZVR5cGUgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbMF0pO1xuICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbMV0pO1xuICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbMl0pO1xuICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbM10pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlVHlwZTtcbiIsIi8qISBAbmFtZSBAdmlkZW9qcy92aHMtdXRpbHMgQHZlcnNpb24gMi4yLjEgQGxpY2Vuc2UgTUlUICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB3aW5kb3cgPSByZXF1aXJlKCdnbG9iYWwvd2luZG93Jyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdExlZ2FjeSAoZSkgeyByZXR1cm4gZSAmJiB0eXBlb2YgZSA9PT0gJ29iamVjdCcgJiYgJ2RlZmF1bHQnIGluIGUgPyBlIDogeyAnZGVmYXVsdCc6IGUgfTsgfVxuXG52YXIgd2luZG93X19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeSh3aW5kb3cpO1xuXG52YXIgYXRvYiA9IGZ1bmN0aW9uIGF0b2Iocykge1xuICByZXR1cm4gd2luZG93X19kZWZhdWx0WydkZWZhdWx0J10uYXRvYiA/IHdpbmRvd19fZGVmYXVsdFsnZGVmYXVsdCddLmF0b2IocykgOiBCdWZmZXIuZnJvbShzLCAnYmFzZTY0JykudG9TdHJpbmcoJ2JpbmFyeScpO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQjY0VG9VaW50OEFycmF5KGI2NFRleHQpIHtcbiAgdmFyIGRlY29kZWRTdHJpbmcgPSBhdG9iKGI2NFRleHQpO1xuICB2YXIgYXJyYXkgPSBuZXcgVWludDhBcnJheShkZWNvZGVkU3RyaW5nLmxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWNvZGVkU3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyYXlbaV0gPSBkZWNvZGVkU3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVjb2RlQjY0VG9VaW50OEFycmF5O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyB2dHQuanMgQ29udHJpYnV0b3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBEZWZhdWx0IGV4cG9ydHMgZm9yIE5vZGUuIEV4cG9ydCB0aGUgZXh0ZW5kZWQgdmVyc2lvbnMgb2YgVlRUQ3VlIGFuZFxuLy8gVlRUUmVnaW9uIGluIE5vZGUgc2luY2Ugd2UgbGlrZWx5IHdhbnQgdGhlIGNhcGFiaWxpdHkgdG8gY29udmVydCBiYWNrIGFuZFxuLy8gZm9ydGggYmV0d2VlbiBKU09OLiBJZiB3ZSBkb24ndCB0aGVuIGl0J3Mgbm90IHRoYXQgYmlnIG9mIGEgZGVhbCBzaW5jZSB3ZSdyZVxuLy8gb2ZmIGJyb3dzZXIuXG5cbnZhciB3aW5kb3cgPSByZXF1aXJlKCdnbG9iYWwvd2luZG93Jyk7XG5cbnZhciB2dHRqcyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBXZWJWVFQ6IHJlcXVpcmUoXCIuL3Z0dC5qc1wiKSxcbiAgVlRUQ3VlOiByZXF1aXJlKFwiLi92dHRjdWUuanNcIiksXG4gIFZUVFJlZ2lvbjogcmVxdWlyZShcIi4vdnR0cmVnaW9uLmpzXCIpXG59O1xuXG53aW5kb3cudnR0anMgPSB2dHRqcztcbndpbmRvdy5XZWJWVFQgPSB2dHRqcy5XZWJWVFQ7XG5cbnZhciBjdWVTaGltID0gdnR0anMuVlRUQ3VlO1xudmFyIHJlZ2lvblNoaW0gPSB2dHRqcy5WVFRSZWdpb247XG52YXIgbmF0aXZlVlRUQ3VlID0gd2luZG93LlZUVEN1ZTtcbnZhciBuYXRpdmVWVFRSZWdpb24gPSB3aW5kb3cuVlRUUmVnaW9uO1xuXG52dHRqcy5zaGltID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5WVFRDdWUgPSBjdWVTaGltO1xuICB3aW5kb3cuVlRUUmVnaW9uID0gcmVnaW9uU2hpbTtcbn07XG5cbnZ0dGpzLnJlc3RvcmUgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LlZUVEN1ZSA9IG5hdGl2ZVZUVEN1ZTtcbiAgd2luZG93LlZUVFJlZ2lvbiA9IG5hdGl2ZVZUVFJlZ2lvbjtcbn07XG5cbmlmICghd2luZG93LlZUVEN1ZSkge1xuICB2dHRqcy5zaGltKCk7XG59XG4iLCIvKipcbiAqIG11eC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICogTGljZW5zZWQgQXBhY2hlLTIuMCBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy9tdXguanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG52YXIgdG9VbnNpZ25lZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA+Pj4gMDtcbn07XG5cbnZhciB0b0hleFN0cmluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiAoJzAwJyArIHZhbHVlLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRvVW5zaWduZWQ6IHRvVW5zaWduZWQsXG4gIHRvSGV4U3RyaW5nOiB0b0hleFN0cmluZ1xufTtcbiIsInZhciBwYXJzZVNhbXBsZUZsYWdzID0gcmVxdWlyZSgnLi9wYXJzZS1zYW1wbGUtZmxhZ3MuanMnKTtcblxudmFyIHRydW4gPSBmdW5jdGlvbihkYXRhKSB7XG4gIHZhclxuICByZXN1bHQgPSB7XG4gICAgdmVyc2lvbjogZGF0YVswXSxcbiAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgc2FtcGxlczogW11cbiAgfSxcbiAgICB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCksXG4gICAgLy8gRmxhZyBpbnRlcnByZXRhdGlvblxuICAgIGRhdGFPZmZzZXRQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzJdICYgMHgwMSwgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4MVxuICAgIGZpcnN0U2FtcGxlRmxhZ3NQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzJdICYgMHgwNCwgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4NFxuICAgIHNhbXBsZUR1cmF0aW9uUHJlc2VudCA9IHJlc3VsdC5mbGFnc1sxXSAmIDB4MDEsIC8vIGNvbXBhcmUgd2l0aCAybmQgYnl0ZSBvZiAweDEwMFxuICAgIHNhbXBsZVNpemVQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzFdICYgMHgwMiwgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4MjAwXG4gICAgc2FtcGxlRmxhZ3NQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzFdICYgMHgwNCwgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4NDAwXG4gICAgc2FtcGxlQ29tcG9zaXRpb25UaW1lT2Zmc2V0UHJlc2VudCA9IHJlc3VsdC5mbGFnc1sxXSAmIDB4MDgsIC8vIGNvbXBhcmUgd2l0aCAybmQgYnl0ZSBvZiAweDgwMFxuICAgIHNhbXBsZUNvdW50ID0gdmlldy5nZXRVaW50MzIoNCksXG4gICAgb2Zmc2V0ID0gOCxcbiAgICBzYW1wbGU7XG5cbiAgaWYgKGRhdGFPZmZzZXRQcmVzZW50KSB7XG4gICAgLy8gMzIgYml0IHNpZ25lZCBpbnRlZ2VyXG4gICAgcmVzdWx0LmRhdGFPZmZzZXQgPSB2aWV3LmdldEludDMyKG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gIH1cblxuICAvLyBPdmVycmlkZXMgdGhlIGZsYWdzIGZvciB0aGUgZmlyc3Qgc2FtcGxlIG9ubHkuIFRoZSBvcmRlciBvZlxuICAvLyBvcHRpb25hbCB2YWx1ZXMgd2lsbCBiZTogZHVyYXRpb24sIHNpemUsIGNvbXBvc2l0aW9uVGltZU9mZnNldFxuICBpZiAoZmlyc3RTYW1wbGVGbGFnc1ByZXNlbnQgJiYgc2FtcGxlQ291bnQpIHtcbiAgICBzYW1wbGUgPSB7XG4gICAgICBmbGFnczogcGFyc2VTYW1wbGVGbGFncyhkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgNCkpXG4gICAgfTtcbiAgICBvZmZzZXQgKz0gNDtcbiAgICBpZiAoc2FtcGxlRHVyYXRpb25QcmVzZW50KSB7XG4gICAgICBzYW1wbGUuZHVyYXRpb24gPSB2aWV3LmdldFVpbnQzMihvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgfVxuICAgIGlmIChzYW1wbGVTaXplUHJlc2VudCkge1xuICAgICAgc2FtcGxlLnNpemUgPSB2aWV3LmdldFVpbnQzMihvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgfVxuICAgIGlmIChzYW1wbGVDb21wb3NpdGlvblRpbWVPZmZzZXRQcmVzZW50KSB7XG4gICAgICBpZiAocmVzdWx0LnZlcnNpb24gPT09IDEpIHtcbiAgICAgICAgc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldCA9IHZpZXcuZ2V0SW50MzIob2Zmc2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNhbXBsZS5jb21wb3NpdGlvblRpbWVPZmZzZXQgPSB2aWV3LmdldFVpbnQzMihvZmZzZXQpO1xuICAgICAgfVxuICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgfVxuICAgIHJlc3VsdC5zYW1wbGVzLnB1c2goc2FtcGxlKTtcbiAgICBzYW1wbGVDb3VudC0tO1xuICB9XG5cbiAgd2hpbGUgKHNhbXBsZUNvdW50LS0pIHtcbiAgICBzYW1wbGUgPSB7fTtcbiAgICBpZiAoc2FtcGxlRHVyYXRpb25QcmVzZW50KSB7XG4gICAgICBzYW1wbGUuZHVyYXRpb24gPSB2aWV3LmdldFVpbnQzMihvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgfVxuICAgIGlmIChzYW1wbGVTaXplUHJlc2VudCkge1xuICAgICAgc2FtcGxlLnNpemUgPSB2aWV3LmdldFVpbnQzMihvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgfVxuICAgIGlmIChzYW1wbGVGbGFnc1ByZXNlbnQpIHtcbiAgICAgIHNhbXBsZS5mbGFncyA9IHBhcnNlU2FtcGxlRmxhZ3MoZGF0YS5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIDQpKTtcbiAgICAgIG9mZnNldCArPSA0O1xuICAgIH1cbiAgICBpZiAoc2FtcGxlQ29tcG9zaXRpb25UaW1lT2Zmc2V0UHJlc2VudCkge1xuICAgICAgaWYgKHJlc3VsdC52ZXJzaW9uID09PSAxKSB7XG4gICAgICAgIHNhbXBsZS5jb21wb3NpdGlvblRpbWVPZmZzZXQgPSB2aWV3LmdldEludDMyKG9mZnNldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzYW1wbGUuY29tcG9zaXRpb25UaW1lT2Zmc2V0ID0gdmlldy5nZXRVaW50MzIob2Zmc2V0KTtcbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSA0O1xuICAgIH1cbiAgICByZXN1bHQuc2FtcGxlcy5wdXNoKHNhbXBsZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdHJ1bjtcbiIsImZ1bmN0aW9uIERPTVBhcnNlcihvcHRpb25zKXtcclxuXHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8e2xvY2F0b3I6e319O1xyXG5cdFxyXG59XHJcbkRPTVBhcnNlci5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24oc291cmNlLG1pbWVUeXBlKXtcclxuXHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcclxuXHR2YXIgc2F4ID0gIG5ldyBYTUxSZWFkZXIoKTtcclxuXHR2YXIgZG9tQnVpbGRlciA9IG9wdGlvbnMuZG9tQnVpbGRlciB8fCBuZXcgRE9NSGFuZGxlcigpOy8vY29udGVudEhhbmRsZXIgYW5kIExleGljYWxIYW5kbGVyXHJcblx0dmFyIGVycm9ySGFuZGxlciA9IG9wdGlvbnMuZXJyb3JIYW5kbGVyO1xyXG5cdHZhciBsb2NhdG9yID0gb3B0aW9ucy5sb2NhdG9yO1xyXG5cdHZhciBkZWZhdWx0TlNNYXAgPSBvcHRpb25zLnhtbG5zfHx7fTtcclxuXHR2YXIgZW50aXR5TWFwID0geydsdCc6JzwnLCdndCc6Jz4nLCdhbXAnOicmJywncXVvdCc6J1wiJywnYXBvcyc6XCInXCJ9XHJcblx0aWYobG9jYXRvcil7XHJcblx0XHRkb21CdWlsZGVyLnNldERvY3VtZW50TG9jYXRvcihsb2NhdG9yKVxyXG5cdH1cclxuXHRcclxuXHRzYXguZXJyb3JIYW5kbGVyID0gYnVpbGRFcnJvckhhbmRsZXIoZXJyb3JIYW5kbGVyLGRvbUJ1aWxkZXIsbG9jYXRvcik7XHJcblx0c2F4LmRvbUJ1aWxkZXIgPSBvcHRpb25zLmRvbUJ1aWxkZXIgfHwgZG9tQnVpbGRlcjtcclxuXHRpZigvXFwveD9odG1sPyQvLnRlc3QobWltZVR5cGUpKXtcclxuXHRcdGVudGl0eU1hcC5uYnNwID0gJ1xceGEwJztcclxuXHRcdGVudGl0eU1hcC5jb3B5ID0gJ1xceGE5JztcclxuXHRcdGRlZmF1bHROU01hcFsnJ109ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJztcclxuXHR9XHJcblx0ZGVmYXVsdE5TTWFwLnhtbCA9IGRlZmF1bHROU01hcC54bWwgfHwgJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSc7XHJcblx0aWYoc291cmNlKXtcclxuXHRcdHNheC5wYXJzZShzb3VyY2UsZGVmYXVsdE5TTWFwLGVudGl0eU1hcCk7XHJcblx0fWVsc2V7XHJcblx0XHRzYXguZXJyb3JIYW5kbGVyLmVycm9yKFwiaW52YWxpZCBkb2Mgc291cmNlXCIpO1xyXG5cdH1cclxuXHRyZXR1cm4gZG9tQnVpbGRlci5kb2M7XHJcbn1cclxuZnVuY3Rpb24gYnVpbGRFcnJvckhhbmRsZXIoZXJyb3JJbXBsLGRvbUJ1aWxkZXIsbG9jYXRvcil7XHJcblx0aWYoIWVycm9ySW1wbCl7XHJcblx0XHRpZihkb21CdWlsZGVyIGluc3RhbmNlb2YgRE9NSGFuZGxlcil7XHJcblx0XHRcdHJldHVybiBkb21CdWlsZGVyO1xyXG5cdFx0fVxyXG5cdFx0ZXJyb3JJbXBsID0gZG9tQnVpbGRlciA7XHJcblx0fVxyXG5cdHZhciBlcnJvckhhbmRsZXIgPSB7fVxyXG5cdHZhciBpc0NhbGxiYWNrID0gZXJyb3JJbXBsIGluc3RhbmNlb2YgRnVuY3Rpb247XHJcblx0bG9jYXRvciA9IGxvY2F0b3J8fHt9XHJcblx0ZnVuY3Rpb24gYnVpbGQoa2V5KXtcclxuXHRcdHZhciBmbiA9IGVycm9ySW1wbFtrZXldO1xyXG5cdFx0aWYoIWZuICYmIGlzQ2FsbGJhY2spe1xyXG5cdFx0XHRmbiA9IGVycm9ySW1wbC5sZW5ndGggPT0gMj9mdW5jdGlvbihtc2cpe2Vycm9ySW1wbChrZXksbXNnKX06ZXJyb3JJbXBsO1xyXG5cdFx0fVxyXG5cdFx0ZXJyb3JIYW5kbGVyW2tleV0gPSBmbiAmJiBmdW5jdGlvbihtc2cpe1xyXG5cdFx0XHRmbignW3htbGRvbSAnK2tleSsnXVxcdCcrbXNnK19sb2NhdG9yKGxvY2F0b3IpKTtcclxuXHRcdH18fGZ1bmN0aW9uKCl7fTtcclxuXHR9XHJcblx0YnVpbGQoJ3dhcm5pbmcnKTtcclxuXHRidWlsZCgnZXJyb3InKTtcclxuXHRidWlsZCgnZmF0YWxFcnJvcicpO1xyXG5cdHJldHVybiBlcnJvckhhbmRsZXI7XHJcbn1cclxuXHJcbi8vY29uc29sZS5sb2coJyNcXG5cXG5cXG5cXG5cXG5cXG5cXG4jIyMjJylcclxuLyoqXHJcbiAqICtDb250ZW50SGFuZGxlcitFcnJvckhhbmRsZXJcclxuICogK0xleGljYWxIYW5kbGVyK0VudGl0eVJlc29sdmVyMlxyXG4gKiAtRGVjbEhhbmRsZXItRFRESGFuZGxlciBcclxuICogXHJcbiAqIERlZmF1bHRIYW5kbGVyOkVudGl0eVJlc29sdmVyLCBEVERIYW5kbGVyLCBDb250ZW50SGFuZGxlciwgRXJyb3JIYW5kbGVyXHJcbiAqIERlZmF1bHRIYW5kbGVyMjpEZWZhdWx0SGFuZGxlcixMZXhpY2FsSGFuZGxlciwgRGVjbEhhbmRsZXIsIEVudGl0eVJlc29sdmVyMlxyXG4gKiBAbGluayBodHRwOi8vd3d3LnNheHByb2plY3Qub3JnL2FwaWRvYy9vcmcveG1sL3NheC9oZWxwZXJzL0RlZmF1bHRIYW5kbGVyLmh0bWxcclxuICovXHJcbmZ1bmN0aW9uIERPTUhhbmRsZXIoKSB7XHJcbiAgICB0aGlzLmNkYXRhID0gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gcG9zaXRpb24obG9jYXRvcixub2RlKXtcclxuXHRub2RlLmxpbmVOdW1iZXIgPSBsb2NhdG9yLmxpbmVOdW1iZXI7XHJcblx0bm9kZS5jb2x1bW5OdW1iZXIgPSBsb2NhdG9yLmNvbHVtbk51bWJlcjtcclxufVxyXG4vKipcclxuICogQHNlZSBvcmcueG1sLnNheC5Db250ZW50SGFuZGxlciNzdGFydERvY3VtZW50XHJcbiAqIEBsaW5rIGh0dHA6Ly93d3cuc2F4cHJvamVjdC5vcmcvYXBpZG9jL29yZy94bWwvc2F4L0NvbnRlbnRIYW5kbGVyLmh0bWxcclxuICovIFxyXG5ET01IYW5kbGVyLnByb3RvdHlwZSA9IHtcclxuXHRzdGFydERvY3VtZW50IDogZnVuY3Rpb24oKSB7XHJcbiAgICBcdHRoaXMuZG9jID0gbmV3IERPTUltcGxlbWVudGF0aW9uKCkuY3JlYXRlRG9jdW1lbnQobnVsbCwgbnVsbCwgbnVsbCk7XHJcbiAgICBcdGlmICh0aGlzLmxvY2F0b3IpIHtcclxuICAgICAgICBcdHRoaXMuZG9jLmRvY3VtZW50VVJJID0gdGhpcy5sb2NhdG9yLnN5c3RlbUlkO1xyXG4gICAgXHR9XHJcblx0fSxcclxuXHRzdGFydEVsZW1lbnQ6ZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUsIHFOYW1lLCBhdHRycykge1xyXG5cdFx0dmFyIGRvYyA9IHRoaXMuZG9jO1xyXG5cdCAgICB2YXIgZWwgPSBkb2MuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgcU5hbWV8fGxvY2FsTmFtZSk7XHJcblx0ICAgIHZhciBsZW4gPSBhdHRycy5sZW5ndGg7XHJcblx0ICAgIGFwcGVuZEVsZW1lbnQodGhpcywgZWwpO1xyXG5cdCAgICB0aGlzLmN1cnJlbnRFbGVtZW50ID0gZWw7XHJcblx0ICAgIFxyXG5cdFx0dGhpcy5sb2NhdG9yICYmIHBvc2l0aW9uKHRoaXMubG9jYXRvcixlbClcclxuXHQgICAgZm9yICh2YXIgaSA9IDAgOyBpIDwgbGVuOyBpKyspIHtcclxuXHQgICAgICAgIHZhciBuYW1lc3BhY2VVUkkgPSBhdHRycy5nZXRVUkkoaSk7XHJcblx0ICAgICAgICB2YXIgdmFsdWUgPSBhdHRycy5nZXRWYWx1ZShpKTtcclxuXHQgICAgICAgIHZhciBxTmFtZSA9IGF0dHJzLmdldFFOYW1lKGkpO1xyXG5cdFx0XHR2YXIgYXR0ciA9IGRvYy5jcmVhdGVBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkksIHFOYW1lKTtcclxuXHRcdFx0dGhpcy5sb2NhdG9yICYmcG9zaXRpb24oYXR0cnMuZ2V0TG9jYXRvcihpKSxhdHRyKTtcclxuXHRcdFx0YXR0ci52YWx1ZSA9IGF0dHIubm9kZVZhbHVlID0gdmFsdWU7XHJcblx0XHRcdGVsLnNldEF0dHJpYnV0ZU5vZGUoYXR0cilcclxuXHQgICAgfVxyXG5cdH0sXHJcblx0ZW5kRWxlbWVudDpmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSwgcU5hbWUpIHtcclxuXHRcdHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50RWxlbWVudFxyXG5cdFx0dmFyIHRhZ05hbWUgPSBjdXJyZW50LnRhZ05hbWU7XHJcblx0XHR0aGlzLmN1cnJlbnRFbGVtZW50ID0gY3VycmVudC5wYXJlbnROb2RlO1xyXG5cdH0sXHJcblx0c3RhcnRQcmVmaXhNYXBwaW5nOmZ1bmN0aW9uKHByZWZpeCwgdXJpKSB7XHJcblx0fSxcclxuXHRlbmRQcmVmaXhNYXBwaW5nOmZ1bmN0aW9uKHByZWZpeCkge1xyXG5cdH0sXHJcblx0cHJvY2Vzc2luZ0luc3RydWN0aW9uOmZ1bmN0aW9uKHRhcmdldCwgZGF0YSkge1xyXG5cdCAgICB2YXIgaW5zID0gdGhpcy5kb2MuY3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uKHRhcmdldCwgZGF0YSk7XHJcblx0ICAgIHRoaXMubG9jYXRvciAmJiBwb3NpdGlvbih0aGlzLmxvY2F0b3IsaW5zKVxyXG5cdCAgICBhcHBlbmRFbGVtZW50KHRoaXMsIGlucyk7XHJcblx0fSxcclxuXHRpZ25vcmFibGVXaGl0ZXNwYWNlOmZ1bmN0aW9uKGNoLCBzdGFydCwgbGVuZ3RoKSB7XHJcblx0fSxcclxuXHRjaGFyYWN0ZXJzOmZ1bmN0aW9uKGNoYXJzLCBzdGFydCwgbGVuZ3RoKSB7XHJcblx0XHRjaGFycyA9IF90b1N0cmluZy5hcHBseSh0aGlzLGFyZ3VtZW50cylcclxuXHRcdC8vY29uc29sZS5sb2coY2hhcnMpXHJcblx0XHRpZihjaGFycyl7XHJcblx0XHRcdGlmICh0aGlzLmNkYXRhKSB7XHJcblx0XHRcdFx0dmFyIGNoYXJOb2RlID0gdGhpcy5kb2MuY3JlYXRlQ0RBVEFTZWN0aW9uKGNoYXJzKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YXIgY2hhck5vZGUgPSB0aGlzLmRvYy5jcmVhdGVUZXh0Tm9kZShjaGFycyk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYodGhpcy5jdXJyZW50RWxlbWVudCl7XHJcblx0XHRcdFx0dGhpcy5jdXJyZW50RWxlbWVudC5hcHBlbmRDaGlsZChjaGFyTm9kZSk7XHJcblx0XHRcdH1lbHNlIGlmKC9eXFxzKiQvLnRlc3QoY2hhcnMpKXtcclxuXHRcdFx0XHR0aGlzLmRvYy5hcHBlbmRDaGlsZChjaGFyTm9kZSk7XHJcblx0XHRcdFx0Ly9wcm9jZXNzIHhtbFxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMubG9jYXRvciAmJiBwb3NpdGlvbih0aGlzLmxvY2F0b3IsY2hhck5vZGUpXHJcblx0XHR9XHJcblx0fSxcclxuXHRza2lwcGVkRW50aXR5OmZ1bmN0aW9uKG5hbWUpIHtcclxuXHR9LFxyXG5cdGVuZERvY3VtZW50OmZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy5kb2Mubm9ybWFsaXplKCk7XHJcblx0fSxcclxuXHRzZXREb2N1bWVudExvY2F0b3I6ZnVuY3Rpb24gKGxvY2F0b3IpIHtcclxuXHQgICAgaWYodGhpcy5sb2NhdG9yID0gbG9jYXRvcil7Ly8gJiYgISgnbGluZU51bWJlcicgaW4gbG9jYXRvcikpe1xyXG5cdCAgICBcdGxvY2F0b3IubGluZU51bWJlciA9IDA7XHJcblx0ICAgIH1cclxuXHR9LFxyXG5cdC8vTGV4aWNhbEhhbmRsZXJcclxuXHRjb21tZW50OmZ1bmN0aW9uKGNoYXJzLCBzdGFydCwgbGVuZ3RoKSB7XHJcblx0XHRjaGFycyA9IF90b1N0cmluZy5hcHBseSh0aGlzLGFyZ3VtZW50cylcclxuXHQgICAgdmFyIGNvbW0gPSB0aGlzLmRvYy5jcmVhdGVDb21tZW50KGNoYXJzKTtcclxuXHQgICAgdGhpcy5sb2NhdG9yICYmIHBvc2l0aW9uKHRoaXMubG9jYXRvcixjb21tKVxyXG5cdCAgICBhcHBlbmRFbGVtZW50KHRoaXMsIGNvbW0pO1xyXG5cdH0sXHJcblx0XHJcblx0c3RhcnRDREFUQTpmdW5jdGlvbigpIHtcclxuXHQgICAgLy91c2VkIGluIGNoYXJhY3RlcnMoKSBtZXRob2RzXHJcblx0ICAgIHRoaXMuY2RhdGEgPSB0cnVlO1xyXG5cdH0sXHJcblx0ZW5kQ0RBVEE6ZnVuY3Rpb24oKSB7XHJcblx0ICAgIHRoaXMuY2RhdGEgPSBmYWxzZTtcclxuXHR9LFxyXG5cdFxyXG5cdHN0YXJ0RFREOmZ1bmN0aW9uKG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCkge1xyXG5cdFx0dmFyIGltcGwgPSB0aGlzLmRvYy5pbXBsZW1lbnRhdGlvbjtcclxuXHQgICAgaWYgKGltcGwgJiYgaW1wbC5jcmVhdGVEb2N1bWVudFR5cGUpIHtcclxuXHQgICAgICAgIHZhciBkdCA9IGltcGwuY3JlYXRlRG9jdW1lbnRUeXBlKG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCk7XHJcblx0ICAgICAgICB0aGlzLmxvY2F0b3IgJiYgcG9zaXRpb24odGhpcy5sb2NhdG9yLGR0KVxyXG5cdCAgICAgICAgYXBwZW5kRWxlbWVudCh0aGlzLCBkdCk7XHJcblx0ICAgIH1cclxuXHR9LFxyXG5cdC8qKlxyXG5cdCAqIEBzZWUgb3JnLnhtbC5zYXguRXJyb3JIYW5kbGVyXHJcblx0ICogQGxpbmsgaHR0cDovL3d3dy5zYXhwcm9qZWN0Lm9yZy9hcGlkb2Mvb3JnL3htbC9zYXgvRXJyb3JIYW5kbGVyLmh0bWxcclxuXHQgKi9cclxuXHR3YXJuaW5nOmZ1bmN0aW9uKGVycm9yKSB7XHJcblx0XHRjb25zb2xlLndhcm4oJ1t4bWxkb20gd2FybmluZ11cXHQnK2Vycm9yLF9sb2NhdG9yKHRoaXMubG9jYXRvcikpO1xyXG5cdH0sXHJcblx0ZXJyb3I6ZnVuY3Rpb24oZXJyb3IpIHtcclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1t4bWxkb20gZXJyb3JdXFx0JytlcnJvcixfbG9jYXRvcih0aGlzLmxvY2F0b3IpKTtcclxuXHR9LFxyXG5cdGZhdGFsRXJyb3I6ZnVuY3Rpb24oZXJyb3IpIHtcclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1t4bWxkb20gZmF0YWxFcnJvcl1cXHQnK2Vycm9yLF9sb2NhdG9yKHRoaXMubG9jYXRvcikpO1xyXG5cdCAgICB0aHJvdyBlcnJvcjtcclxuXHR9XHJcbn1cclxuZnVuY3Rpb24gX2xvY2F0b3IobCl7XHJcblx0aWYobCl7XHJcblx0XHRyZXR1cm4gJ1xcbkAnKyhsLnN5c3RlbUlkIHx8JycpKycjW2xpbmU6JytsLmxpbmVOdW1iZXIrJyxjb2w6JytsLmNvbHVtbk51bWJlcisnXSdcclxuXHR9XHJcbn1cclxuZnVuY3Rpb24gX3RvU3RyaW5nKGNoYXJzLHN0YXJ0LGxlbmd0aCl7XHJcblx0aWYodHlwZW9mIGNoYXJzID09ICdzdHJpbmcnKXtcclxuXHRcdHJldHVybiBjaGFycy5zdWJzdHIoc3RhcnQsbGVuZ3RoKVxyXG5cdH1lbHNley8vamF2YSBzYXggY29ubmVjdCB3aWR0aCB4bWxkb20gb24gcmhpbm8od2hhdCBhYm91dDogXCI/ICYmICEoY2hhcnMgaW5zdGFuY2VvZiBTdHJpbmcpXCIpXHJcblx0XHRpZihjaGFycy5sZW5ndGggPj0gc3RhcnQrbGVuZ3RoIHx8IHN0YXJ0KXtcclxuXHRcdFx0cmV0dXJuIG5ldyBqYXZhLmxhbmcuU3RyaW5nKGNoYXJzLHN0YXJ0LGxlbmd0aCkrJyc7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY2hhcnM7XHJcblx0fVxyXG59XHJcblxyXG4vKlxyXG4gKiBAbGluayBodHRwOi8vd3d3LnNheHByb2plY3Qub3JnL2FwaWRvYy9vcmcveG1sL3NheC9leHQvTGV4aWNhbEhhbmRsZXIuaHRtbFxyXG4gKiB1c2VkIG1ldGhvZCBvZiBvcmcueG1sLnNheC5leHQuTGV4aWNhbEhhbmRsZXI6XHJcbiAqICAjY29tbWVudChjaGFycywgc3RhcnQsIGxlbmd0aClcclxuICogICNzdGFydENEQVRBKClcclxuICogICNlbmRDREFUQSgpXHJcbiAqICAjc3RhcnREVEQobmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKVxyXG4gKlxyXG4gKlxyXG4gKiBJR05PUkVEIG1ldGhvZCBvZiBvcmcueG1sLnNheC5leHQuTGV4aWNhbEhhbmRsZXI6XHJcbiAqICAjZW5kRFREKClcclxuICogICNzdGFydEVudGl0eShuYW1lKVxyXG4gKiAgI2VuZEVudGl0eShuYW1lKVxyXG4gKlxyXG4gKlxyXG4gKiBAbGluayBodHRwOi8vd3d3LnNheHByb2plY3Qub3JnL2FwaWRvYy9vcmcveG1sL3NheC9leHQvRGVjbEhhbmRsZXIuaHRtbFxyXG4gKiBJR05PUkVEIG1ldGhvZCBvZiBvcmcueG1sLnNheC5leHQuRGVjbEhhbmRsZXJcclxuICogXHQjYXR0cmlidXRlRGVjbChlTmFtZSwgYU5hbWUsIHR5cGUsIG1vZGUsIHZhbHVlKVxyXG4gKiAgI2VsZW1lbnREZWNsKG5hbWUsIG1vZGVsKVxyXG4gKiAgI2V4dGVybmFsRW50aXR5RGVjbChuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpXHJcbiAqICAjaW50ZXJuYWxFbnRpdHlEZWNsKG5hbWUsIHZhbHVlKVxyXG4gKiBAbGluayBodHRwOi8vd3d3LnNheHByb2plY3Qub3JnL2FwaWRvYy9vcmcveG1sL3NheC9leHQvRW50aXR5UmVzb2x2ZXIyLmh0bWxcclxuICogSUdOT1JFRCBtZXRob2Qgb2Ygb3JnLnhtbC5zYXguRW50aXR5UmVzb2x2ZXIyXHJcbiAqICAjcmVzb2x2ZUVudGl0eShTdHJpbmcgbmFtZSxTdHJpbmcgcHVibGljSWQsU3RyaW5nIGJhc2VVUkksU3RyaW5nIHN5c3RlbUlkKVxyXG4gKiAgI3Jlc29sdmVFbnRpdHkocHVibGljSWQsIHN5c3RlbUlkKVxyXG4gKiAgI2dldEV4dGVybmFsU3Vic2V0KG5hbWUsIGJhc2VVUkkpXHJcbiAqIEBsaW5rIGh0dHA6Ly93d3cuc2F4cHJvamVjdC5vcmcvYXBpZG9jL29yZy94bWwvc2F4L0RUREhhbmRsZXIuaHRtbFxyXG4gKiBJR05PUkVEIG1ldGhvZCBvZiBvcmcueG1sLnNheC5EVERIYW5kbGVyXHJcbiAqICAjbm90YXRpb25EZWNsKG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCkge307XHJcbiAqICAjdW5wYXJzZWRFbnRpdHlEZWNsKG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCwgbm90YXRpb25OYW1lKSB7fTtcclxuICovXHJcblwiZW5kRFRELHN0YXJ0RW50aXR5LGVuZEVudGl0eSxhdHRyaWJ1dGVEZWNsLGVsZW1lbnREZWNsLGV4dGVybmFsRW50aXR5RGVjbCxpbnRlcm5hbEVudGl0eURlY2wscmVzb2x2ZUVudGl0eSxnZXRFeHRlcm5hbFN1YnNldCxub3RhdGlvbkRlY2wsdW5wYXJzZWRFbnRpdHlEZWNsXCIucmVwbGFjZSgvXFx3Ky9nLGZ1bmN0aW9uKGtleSl7XHJcblx0RE9NSGFuZGxlci5wcm90b3R5cGVba2V5XSA9IGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9XHJcbn0pXHJcblxyXG4vKiBQcml2YXRlIHN0YXRpYyBoZWxwZXJzIHRyZWF0ZWQgYmVsb3cgYXMgcHJpdmF0ZSBpbnN0YW5jZSBtZXRob2RzLCBzbyBkb24ndCBuZWVkIHRvIGFkZCB0aGVzZSB0byB0aGUgcHVibGljIEFQSTsgd2UgbWlnaHQgdXNlIGEgUmVsYXRvciB0byBhbHNvIGdldCByaWQgb2Ygbm9uLXN0YW5kYXJkIHB1YmxpYyBwcm9wZXJ0aWVzICovXHJcbmZ1bmN0aW9uIGFwcGVuZEVsZW1lbnQgKGhhbmRlcixub2RlKSB7XHJcbiAgICBpZiAoIWhhbmRlci5jdXJyZW50RWxlbWVudCkge1xyXG4gICAgICAgIGhhbmRlci5kb2MuYXBwZW5kQ2hpbGQobm9kZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGhhbmRlci5jdXJyZW50RWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTtcclxuICAgIH1cclxufS8vYXBwZW5kQ2hpbGQgYW5kIHNldEF0dHJpYnV0ZU5TIGFyZSBwcmVmb3JtYW5jZSBrZXlcclxuXHJcbi8vaWYodHlwZW9mIHJlcXVpcmUgPT0gJ2Z1bmN0aW9uJyl7XHJcblx0dmFyIFhNTFJlYWRlciA9IHJlcXVpcmUoJy4vc2F4JykuWE1MUmVhZGVyO1xyXG5cdHZhciBET01JbXBsZW1lbnRhdGlvbiA9IGV4cG9ydHMuRE9NSW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2RvbScpLkRPTUltcGxlbWVudGF0aW9uO1xyXG5cdGV4cG9ydHMuWE1MU2VyaWFsaXplciA9IHJlcXVpcmUoJy4vZG9tJykuWE1MU2VyaWFsaXplciA7XHJcblx0ZXhwb3J0cy5ET01QYXJzZXIgPSBET01QYXJzZXI7XHJcbi8vfVxyXG4iLCJ2YXIgdG9VbnNpZ25lZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2JpbicpLnRvVW5zaWduZWQ7XG52YXIgcGFyc2VUeXBlID0gcmVxdWlyZSgnLi9wYXJzZS10eXBlLmpzJyk7XG5cbnZhciBmaW5kQm94ID0gZnVuY3Rpb24oZGF0YSwgcGF0aCkge1xuICB2YXIgcmVzdWx0cyA9IFtdLFxuICAgIGksIHNpemUsIHR5cGUsIGVuZCwgc3VicmVzdWx0cztcblxuICBpZiAoIXBhdGgubGVuZ3RoKSB7XG4gICAgLy8gc2hvcnQtY2lyY3VpdCB0aGUgc2VhcmNoIGZvciBlbXB0eSBwYXRoc1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGRhdGEuYnl0ZUxlbmd0aDspIHtcbiAgICBzaXplID0gdG9VbnNpZ25lZChkYXRhW2ldICAgICA8PCAyNCB8XG4gICAgICBkYXRhW2kgKyAxXSA8PCAxNiB8XG4gICAgICBkYXRhW2kgKyAyXSA8PCAgOCB8XG4gICAgICBkYXRhW2kgKyAzXSk7XG5cbiAgICB0eXBlID0gcGFyc2VUeXBlKGRhdGEuc3ViYXJyYXkoaSArIDQsIGkgKyA4KSk7XG5cbiAgICBlbmQgPSBzaXplID4gMSA/IGkgKyBzaXplIDogZGF0YS5ieXRlTGVuZ3RoO1xuXG4gICAgaWYgKHR5cGUgPT09IHBhdGhbMF0pIHtcbiAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBlbmQgb2YgdGhlIHBhdGggYW5kIHdlJ3ZlIGZvdW5kIHRoZSBib3ggd2Ugd2VyZVxuICAgICAgICAvLyBsb29raW5nIGZvclxuICAgICAgICByZXN1bHRzLnB1c2goZGF0YS5zdWJhcnJheShpICsgOCwgZW5kKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHRoZSBuZXh0IGJveCBhbG9uZyB0aGUgcGF0aFxuICAgICAgICBzdWJyZXN1bHRzID0gZmluZEJveChkYXRhLnN1YmFycmF5KGkgKyA4LCBlbmQpLCBwYXRoLnNsaWNlKDEpKTtcbiAgICAgICAgaWYgKHN1YnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KHN1YnJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGkgPSBlbmQ7XG4gIH1cblxuICAvLyB3ZSd2ZSBmaW5pc2hlZCBzZWFyY2hpbmcgYWxsIG9mIGRhdGFcbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRCb3g7XG5cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgdnR0LmpzIENvbnRyaWJ1dG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogLSotIE1vZGU6IEphdmE7IHRhYi13aWR0aDogMjsgaW5kZW50LXRhYnMtbW9kZTogbmlsOyBjLWJhc2ljLW9mZnNldDogMiAtKi0gKi9cbi8qIHZpbTogc2V0IHNoaWZ0d2lkdGg9MiB0YWJzdG9wPTIgYXV0b2luZGVudCBjaW5kZW50IGV4cGFuZHRhYjogKi9cbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJ2dsb2JhbC9kb2N1bWVudCcpO1xuXG52YXIgX29iakNyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBGKCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKG8pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QuY3JlYXRlIHNoaW0gb25seSBhY2NlcHRzIG9uZSBwYXJhbWV0ZXIuJyk7XG4gICAgfVxuICAgIEYucHJvdG90eXBlID0gbztcbiAgICByZXR1cm4gbmV3IEYoKTtcbiAgfTtcbn0pKCk7XG5cbi8vIENyZWF0ZXMgYSBuZXcgUGFyc2VyRXJyb3Igb2JqZWN0IGZyb20gYW4gZXJyb3JEYXRhIG9iamVjdC4gVGhlIGVycm9yRGF0YVxuLy8gb2JqZWN0IHNob3VsZCBoYXZlIGRlZmF1bHQgY29kZSBhbmQgbWVzc2FnZSBwcm9wZXJ0aWVzLiBUaGUgZGVmYXVsdCBtZXNzYWdlXG4vLyBwcm9wZXJ0eSBjYW4gYmUgb3ZlcnJpZGVuIGJ5IHBhc3NpbmcgaW4gYSBtZXNzYWdlIHBhcmFtZXRlci5cbi8vIFNlZSBQYXJzaW5nRXJyb3IuRXJyb3JzIGJlbG93IGZvciBhY2NlcHRhYmxlIGVycm9ycy5cbmZ1bmN0aW9uIFBhcnNpbmdFcnJvcihlcnJvckRhdGEsIG1lc3NhZ2UpIHtcbiAgdGhpcy5uYW1lID0gXCJQYXJzaW5nRXJyb3JcIjtcbiAgdGhpcy5jb2RlID0gZXJyb3JEYXRhLmNvZGU7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UgfHwgZXJyb3JEYXRhLm1lc3NhZ2U7XG59XG5QYXJzaW5nRXJyb3IucHJvdG90eXBlID0gX29iakNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuUGFyc2luZ0Vycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBhcnNpbmdFcnJvcjtcblxuLy8gUGFyc2luZ0Vycm9yIG1ldGFkYXRhIGZvciBhY2NlcHRhYmxlIFBhcnNpbmdFcnJvcnMuXG5QYXJzaW5nRXJyb3IuRXJyb3JzID0ge1xuICBCYWRTaWduYXR1cmU6IHtcbiAgICBjb2RlOiAwLFxuICAgIG1lc3NhZ2U6IFwiTWFsZm9ybWVkIFdlYlZUVCBzaWduYXR1cmUuXCJcbiAgfSxcbiAgQmFkVGltZVN0YW1wOiB7XG4gICAgY29kZTogMSxcbiAgICBtZXNzYWdlOiBcIk1hbGZvcm1lZCB0aW1lIHN0YW1wLlwiXG4gIH1cbn07XG5cbi8vIFRyeSB0byBwYXJzZSBpbnB1dCBhcyBhIHRpbWUgc3RhbXAuXG5mdW5jdGlvbiBwYXJzZVRpbWVTdGFtcChpbnB1dCkge1xuXG4gIGZ1bmN0aW9uIGNvbXB1dGVTZWNvbmRzKGgsIG0sIHMsIGYpIHtcbiAgICByZXR1cm4gKGggfCAwKSAqIDM2MDAgKyAobSB8IDApICogNjAgKyAocyB8IDApICsgKGYgfCAwKSAvIDEwMDA7XG4gIH1cblxuICB2YXIgbSA9IGlucHV0Lm1hdGNoKC9eKFxcZCspOihcXGR7MSwyfSkoOlxcZHsxLDJ9KT9cXC4oXFxkezN9KS8pO1xuICBpZiAoIW0pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChtWzNdKSB7XG4gICAgLy8gVGltZXN0YW1wIHRha2VzIHRoZSBmb3JtIG9mIFtob3Vyc106W21pbnV0ZXNdOltzZWNvbmRzXS5bbWlsbGlzZWNvbmRzXVxuICAgIHJldHVybiBjb21wdXRlU2Vjb25kcyhtWzFdLCBtWzJdLCBtWzNdLnJlcGxhY2UoXCI6XCIsIFwiXCIpLCBtWzRdKTtcbiAgfSBlbHNlIGlmIChtWzFdID4gNTkpIHtcbiAgICAvLyBUaW1lc3RhbXAgdGFrZXMgdGhlIGZvcm0gb2YgW2hvdXJzXTpbbWludXRlc10uW21pbGxpc2Vjb25kc11cbiAgICAvLyBGaXJzdCBwb3NpdGlvbiBpcyBob3VycyBhcyBpdCdzIG92ZXIgNTkuXG4gICAgcmV0dXJuIGNvbXB1dGVTZWNvbmRzKG1bMV0sIG1bMl0sIDAsICBtWzRdKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaW1lc3RhbXAgdGFrZXMgdGhlIGZvcm0gb2YgW21pbnV0ZXNdOltzZWNvbmRzXS5bbWlsbGlzZWNvbmRzXVxuICAgIHJldHVybiBjb21wdXRlU2Vjb25kcygwLCBtWzFdLCBtWzJdLCBtWzRdKTtcbiAgfVxufVxuXG4vLyBBIHNldHRpbmdzIG9iamVjdCBob2xkcyBrZXkvdmFsdWUgcGFpcnMgYW5kIHdpbGwgaWdub3JlIGFueXRoaW5nIGJ1dCB0aGUgZmlyc3Rcbi8vIGFzc2lnbm1lbnQgdG8gYSBzcGVjaWZpYyBrZXkuXG5mdW5jdGlvbiBTZXR0aW5ncygpIHtcbiAgdGhpcy52YWx1ZXMgPSBfb2JqQ3JlYXRlKG51bGwpO1xufVxuXG5TZXR0aW5ncy5wcm90b3R5cGUgPSB7XG4gIC8vIE9ubHkgYWNjZXB0IHRoZSBmaXJzdCBhc3NpZ25tZW50IHRvIGFueSBrZXkuXG4gIHNldDogZnVuY3Rpb24oaywgdikge1xuICAgIGlmICghdGhpcy5nZXQoaykgJiYgdiAhPT0gXCJcIikge1xuICAgICAgdGhpcy52YWx1ZXNba10gPSB2O1xuICAgIH1cbiAgfSxcbiAgLy8gUmV0dXJuIHRoZSB2YWx1ZSBmb3IgYSBrZXksIG9yIGEgZGVmYXVsdCB2YWx1ZS5cbiAgLy8gSWYgJ2RlZmF1bHRLZXknIGlzIHBhc3NlZCB0aGVuICdkZmx0JyBpcyBhc3N1bWVkIHRvIGJlIGFuIG9iamVjdCB3aXRoXG4gIC8vIGEgbnVtYmVyIG9mIHBvc3NpYmxlIGRlZmF1bHQgdmFsdWVzIGFzIHByb3BlcnRpZXMgd2hlcmUgJ2RlZmF1bHRLZXknIGlzXG4gIC8vIHRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRoYXQgd2lsbCBiZSBjaG9zZW47IG90aGVyd2lzZSBpdCdzIGFzc3VtZWQgdG8gYmVcbiAgLy8gYSBzaW5nbGUgdmFsdWUuXG4gIGdldDogZnVuY3Rpb24oaywgZGZsdCwgZGVmYXVsdEtleSkge1xuICAgIGlmIChkZWZhdWx0S2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXMoaykgPyB0aGlzLnZhbHVlc1trXSA6IGRmbHRbZGVmYXVsdEtleV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmhhcyhrKSA/IHRoaXMudmFsdWVzW2tdIDogZGZsdDtcbiAgfSxcbiAgLy8gQ2hlY2sgd2hldGhlciB3ZSBoYXZlIGEgdmFsdWUgZm9yIGEga2V5LlxuICBoYXM6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gayBpbiB0aGlzLnZhbHVlcztcbiAgfSxcbiAgLy8gQWNjZXB0IGEgc2V0dGluZyBpZiBpdHMgb25lIG9mIHRoZSBnaXZlbiBhbHRlcm5hdGl2ZXMuXG4gIGFsdDogZnVuY3Rpb24oaywgdiwgYSkge1xuICAgIGZvciAodmFyIG4gPSAwOyBuIDwgYS5sZW5ndGg7ICsrbikge1xuICAgICAgaWYgKHYgPT09IGFbbl0pIHtcbiAgICAgICAgdGhpcy5zZXQoaywgdik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgLy8gQWNjZXB0IGEgc2V0dGluZyBpZiBpdHMgYSB2YWxpZCAoc2lnbmVkKSBpbnRlZ2VyLlxuICBpbnRlZ2VyOiBmdW5jdGlvbihrLCB2KSB7XG4gICAgaWYgKC9eLT9cXGQrJC8udGVzdCh2KSkgeyAvLyBpbnRlZ2VyXG4gICAgICB0aGlzLnNldChrLCBwYXJzZUludCh2LCAxMCkpO1xuICAgIH1cbiAgfSxcbiAgLy8gQWNjZXB0IGEgc2V0dGluZyBpZiBpdHMgYSB2YWxpZCBwZXJjZW50YWdlLlxuICBwZXJjZW50OiBmdW5jdGlvbihrLCB2KSB7XG4gICAgdmFyIG07XG4gICAgaWYgKChtID0gdi5tYXRjaCgvXihbXFxkXXsxLDN9KShcXC5bXFxkXSopPyUkLykpKSB7XG4gICAgICB2ID0gcGFyc2VGbG9hdCh2KTtcbiAgICAgIGlmICh2ID49IDAgJiYgdiA8PSAxMDApIHtcbiAgICAgICAgdGhpcy5zZXQoaywgdik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBwYXJzZSBpbnB1dCBpbnRvIGdyb3VwcyBzZXBhcmF0ZWQgYnkgJ2dyb3VwRGVsaW0nLCBhbmRcbi8vIGludGVycHJldGUgZWFjaCBncm91cCBhcyBhIGtleS92YWx1ZSBwYWlyIHNlcGFyYXRlZCBieSAna2V5VmFsdWVEZWxpbScuXG5mdW5jdGlvbiBwYXJzZU9wdGlvbnMoaW5wdXQsIGNhbGxiYWNrLCBrZXlWYWx1ZURlbGltLCBncm91cERlbGltKSB7XG4gIHZhciBncm91cHMgPSBncm91cERlbGltID8gaW5wdXQuc3BsaXQoZ3JvdXBEZWxpbSkgOiBbaW5wdXRdO1xuICBmb3IgKHZhciBpIGluIGdyb3Vwcykge1xuICAgIGlmICh0eXBlb2YgZ3JvdXBzW2ldICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIGt2ID0gZ3JvdXBzW2ldLnNwbGl0KGtleVZhbHVlRGVsaW0pO1xuICAgIGlmIChrdi5sZW5ndGggIT09IDIpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgayA9IGt2WzBdO1xuICAgIHZhciB2ID0ga3ZbMV07XG4gICAgY2FsbGJhY2soaywgdik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VDdWUoaW5wdXQsIGN1ZSwgcmVnaW9uTGlzdCkge1xuICAvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgaW5wdXQgaWYgd2UgbmVlZCB0byB0aHJvdyBhbiBlcnJvci5cbiAgdmFyIG9JbnB1dCA9IGlucHV0O1xuICAvLyA0LjEgV2ViVlRUIHRpbWVzdGFtcFxuICBmdW5jdGlvbiBjb25zdW1lVGltZVN0YW1wKCkge1xuICAgIHZhciB0cyA9IHBhcnNlVGltZVN0YW1wKGlucHV0KTtcbiAgICBpZiAodHMgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBQYXJzaW5nRXJyb3IoUGFyc2luZ0Vycm9yLkVycm9ycy5CYWRUaW1lU3RhbXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJNYWxmb3JtZWQgdGltZXN0YW1wOiBcIiArIG9JbnB1dCk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSB0aW1lIHN0YW1wIGZyb20gaW5wdXQuXG4gICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9eW15cXHNhLXpBLVotXSsvLCBcIlwiKTtcbiAgICByZXR1cm4gdHM7XG4gIH1cblxuICAvLyA0LjQuMiBXZWJWVFQgY3VlIHNldHRpbmdzXG4gIGZ1bmN0aW9uIGNvbnN1bWVDdWVTZXR0aW5ncyhpbnB1dCwgY3VlKSB7XG4gICAgdmFyIHNldHRpbmdzID0gbmV3IFNldHRpbmdzKCk7XG5cbiAgICBwYXJzZU9wdGlvbnMoaW5wdXQsIGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgICBzd2l0Y2ggKGspIHtcbiAgICAgIGNhc2UgXCJyZWdpb25cIjpcbiAgICAgICAgLy8gRmluZCB0aGUgbGFzdCByZWdpb24gd2UgcGFyc2VkIHdpdGggdGhlIHNhbWUgcmVnaW9uIGlkLlxuICAgICAgICBmb3IgKHZhciBpID0gcmVnaW9uTGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChyZWdpb25MaXN0W2ldLmlkID09PSB2KSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5zZXQoaywgcmVnaW9uTGlzdFtpXS5yZWdpb24pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInZlcnRpY2FsXCI6XG4gICAgICAgIHNldHRpbmdzLmFsdChrLCB2LCBbXCJybFwiLCBcImxyXCJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibGluZVwiOlxuICAgICAgICB2YXIgdmFscyA9IHYuc3BsaXQoXCIsXCIpLFxuICAgICAgICAgICAgdmFsczAgPSB2YWxzWzBdO1xuICAgICAgICBzZXR0aW5ncy5pbnRlZ2VyKGssIHZhbHMwKTtcbiAgICAgICAgc2V0dGluZ3MucGVyY2VudChrLCB2YWxzMCkgPyBzZXR0aW5ncy5zZXQoXCJzbmFwVG9MaW5lc1wiLCBmYWxzZSkgOiBudWxsO1xuICAgICAgICBzZXR0aW5ncy5hbHQoaywgdmFsczAsIFtcImF1dG9cIl0pO1xuICAgICAgICBpZiAodmFscy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICBzZXR0aW5ncy5hbHQoXCJsaW5lQWxpZ25cIiwgdmFsc1sxXSwgW1wic3RhcnRcIiwgXCJjZW50ZXJcIiwgXCJlbmRcIl0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInBvc2l0aW9uXCI6XG4gICAgICAgIHZhbHMgPSB2LnNwbGl0KFwiLFwiKTtcbiAgICAgICAgc2V0dGluZ3MucGVyY2VudChrLCB2YWxzWzBdKTtcbiAgICAgICAgaWYgKHZhbHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgc2V0dGluZ3MuYWx0KFwicG9zaXRpb25BbGlnblwiLCB2YWxzWzFdLCBbXCJzdGFydFwiLCBcImNlbnRlclwiLCBcImVuZFwiXSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2l6ZVwiOlxuICAgICAgICBzZXR0aW5ncy5wZXJjZW50KGssIHYpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJhbGlnblwiOlxuICAgICAgICBzZXR0aW5ncy5hbHQoaywgdiwgW1wic3RhcnRcIiwgXCJjZW50ZXJcIiwgXCJlbmRcIiwgXCJsZWZ0XCIsIFwicmlnaHRcIl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9LCAvOi8sIC9cXHMvKTtcblxuICAgIC8vIEFwcGx5IGRlZmF1bHQgdmFsdWVzIGZvciBhbnkgbWlzc2luZyBmaWVsZHMuXG4gICAgY3VlLnJlZ2lvbiA9IHNldHRpbmdzLmdldChcInJlZ2lvblwiLCBudWxsKTtcbiAgICBjdWUudmVydGljYWwgPSBzZXR0aW5ncy5nZXQoXCJ2ZXJ0aWNhbFwiLCBcIlwiKTtcbiAgICB0cnkge1xuICAgICAgY3VlLmxpbmUgPSBzZXR0aW5ncy5nZXQoXCJsaW5lXCIsIFwiYXV0b1wiKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIGN1ZS5saW5lQWxpZ24gPSBzZXR0aW5ncy5nZXQoXCJsaW5lQWxpZ25cIiwgXCJzdGFydFwiKTtcbiAgICBjdWUuc25hcFRvTGluZXMgPSBzZXR0aW5ncy5nZXQoXCJzbmFwVG9MaW5lc1wiLCB0cnVlKTtcbiAgICBjdWUuc2l6ZSA9IHNldHRpbmdzLmdldChcInNpemVcIiwgMTAwKTtcbiAgICAvLyBTYWZhcmkgc3RpbGwgdXNlcyB0aGUgb2xkIG1pZGRsZSB2YWx1ZSBhbmQgd29uJ3QgYWNjZXB0IGNlbnRlclxuICAgIHRyeSB7XG4gICAgICBjdWUuYWxpZ24gPSBzZXR0aW5ncy5nZXQoXCJhbGlnblwiLCBcImNlbnRlclwiKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjdWUuYWxpZ24gPSBzZXR0aW5ncy5nZXQoXCJhbGlnblwiLCBcIm1pZGRsZVwiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGN1ZS5wb3NpdGlvbiA9IHNldHRpbmdzLmdldChcInBvc2l0aW9uXCIsIFwiYXV0b1wiKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjdWUucG9zaXRpb24gPSBzZXR0aW5ncy5nZXQoXCJwb3NpdGlvblwiLCB7XG4gICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBjZW50ZXI6IDUwLFxuICAgICAgICBtaWRkbGU6IDUwLFxuICAgICAgICBlbmQ6IDEwMCxcbiAgICAgICAgcmlnaHQ6IDEwMFxuICAgICAgfSwgY3VlLmFsaWduKTtcbiAgICB9XG5cblxuICAgIGN1ZS5wb3NpdGlvbkFsaWduID0gc2V0dGluZ3MuZ2V0KFwicG9zaXRpb25BbGlnblwiLCB7XG4gICAgICBzdGFydDogXCJzdGFydFwiLFxuICAgICAgbGVmdDogXCJzdGFydFwiLFxuICAgICAgY2VudGVyOiBcImNlbnRlclwiLFxuICAgICAgbWlkZGxlOiBcImNlbnRlclwiLFxuICAgICAgZW5kOiBcImVuZFwiLFxuICAgICAgcmlnaHQ6IFwiZW5kXCJcbiAgICB9LCBjdWUuYWxpZ24pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2tpcFdoaXRlc3BhY2UoKSB7XG4gICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9eXFxzKy8sIFwiXCIpO1xuICB9XG5cbiAgLy8gNC4xIFdlYlZUVCBjdWUgdGltaW5ncy5cbiAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgY3VlLnN0YXJ0VGltZSA9IGNvbnN1bWVUaW1lU3RhbXAoKTsgICAvLyAoMSkgY29sbGVjdCBjdWUgc3RhcnQgdGltZVxuICBza2lwV2hpdGVzcGFjZSgpO1xuICBpZiAoaW5wdXQuc3Vic3RyKDAsIDMpICE9PSBcIi0tPlwiKSB7ICAgICAvLyAoMykgbmV4dCBjaGFyYWN0ZXJzIG11c3QgbWF0Y2ggXCItLT5cIlxuICAgIHRocm93IG5ldyBQYXJzaW5nRXJyb3IoUGFyc2luZ0Vycm9yLkVycm9ycy5CYWRUaW1lU3RhbXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcIk1hbGZvcm1lZCB0aW1lIHN0YW1wICh0aW1lIHN0YW1wcyBtdXN0IGJlIHNlcGFyYXRlZCBieSAnLS0+Jyk6IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9JbnB1dCk7XG4gIH1cbiAgaW5wdXQgPSBpbnB1dC5zdWJzdHIoMyk7XG4gIHNraXBXaGl0ZXNwYWNlKCk7XG4gIGN1ZS5lbmRUaW1lID0gY29uc3VtZVRpbWVTdGFtcCgpOyAgICAgLy8gKDUpIGNvbGxlY3QgY3VlIGVuZCB0aW1lXG5cbiAgLy8gNC4xIFdlYlZUVCBjdWUgc2V0dGluZ3MgbGlzdC5cbiAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgY29uc3VtZUN1ZVNldHRpbmdzKGlucHV0LCBjdWUpO1xufVxuXG52YXIgVEVYVEFSRUFfRUxFTUVOVCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcblxudmFyIFRBR19OQU1FID0ge1xuICBjOiBcInNwYW5cIixcbiAgaTogXCJpXCIsXG4gIGI6IFwiYlwiLFxuICB1OiBcInVcIixcbiAgcnVieTogXCJydWJ5XCIsXG4gIHJ0OiBcInJ0XCIsXG4gIHY6IFwic3BhblwiLFxuICBsYW5nOiBcInNwYW5cIlxufTtcblxuLy8gNS4xIGRlZmF1bHQgdGV4dCBjb2xvclxuLy8gNS4yIGRlZmF1bHQgdGV4dCBiYWNrZ3JvdW5kIGNvbG9yIGlzIGVxdWl2YWxlbnQgdG8gdGV4dCBjb2xvciB3aXRoIGJnXyBwcmVmaXhcbnZhciBERUZBVUxUX0NPTE9SX0NMQVNTID0ge1xuICB3aGl0ZTogJ3JnYmEoMjU1LDI1NSwyNTUsMSknLFxuICBsaW1lOiAncmdiYSgwLDI1NSwwLDEpJyxcbiAgY3lhbjogJ3JnYmEoMCwyNTUsMjU1LDEpJyxcbiAgcmVkOiAncmdiYSgyNTUsMCwwLDEpJyxcbiAgeWVsbG93OiAncmdiYSgyNTUsMjU1LDAsMSknLFxuICBtYWdlbnRhOiAncmdiYSgyNTUsMCwyNTUsMSknLFxuICBibHVlOiAncmdiYSgwLDAsMjU1LDEpJyxcbiAgYmxhY2s6ICdyZ2JhKDAsMCwwLDEpJ1xufTtcblxudmFyIFRBR19BTk5PVEFUSU9OID0ge1xuICB2OiBcInRpdGxlXCIsXG4gIGxhbmc6IFwibGFuZ1wiXG59O1xuXG52YXIgTkVFRFNfUEFSRU5UID0ge1xuICBydDogXCJydWJ5XCJcbn07XG5cbi8vIFBhcnNlIGNvbnRlbnQgaW50byBhIGRvY3VtZW50IGZyYWdtZW50LlxuZnVuY3Rpb24gcGFyc2VDb250ZW50KHdpbmRvdywgaW5wdXQpIHtcbiAgZnVuY3Rpb24gbmV4dFRva2VuKCkge1xuICAgIC8vIENoZWNrIGZvciBlbmQtb2Ytc3RyaW5nLlxuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIENvbnN1bWUgJ24nIGNoYXJhY3RlcnMgZnJvbSB0aGUgaW5wdXQuXG4gICAgZnVuY3Rpb24gY29uc3VtZShyZXN1bHQpIHtcbiAgICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyKHJlc3VsdC5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgbSA9IGlucHV0Lm1hdGNoKC9eKFtePF0qKSg8W14+XSo+Pyk/Lyk7XG4gICAgLy8gSWYgdGhlcmUgaXMgc29tZSB0ZXh0IGJlZm9yZSB0aGUgbmV4dCB0YWcsIHJldHVybiBpdCwgb3RoZXJ3aXNlIHJldHVyblxuICAgIC8vIHRoZSB0YWcuXG4gICAgcmV0dXJuIGNvbnN1bWUobVsxXSA/IG1bMV0gOiBtWzJdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuZXNjYXBlKHMpIHtcbiAgICBURVhUQVJFQV9FTEVNRU5ULmlubmVySFRNTCA9IHM7XG4gICAgcyA9IFRFWFRBUkVBX0VMRU1FTlQudGV4dENvbnRlbnQ7XG4gICAgVEVYVEFSRUFfRUxFTUVOVC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRBZGQoY3VycmVudCwgZWxlbWVudCkge1xuICAgIHJldHVybiAhTkVFRFNfUEFSRU5UW2VsZW1lbnQubG9jYWxOYW1lXSB8fFxuICAgICAgICAgICBORUVEU19QQVJFTlRbZWxlbWVudC5sb2NhbE5hbWVdID09PSBjdXJyZW50LmxvY2FsTmFtZTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBhbiBlbGVtZW50IGZvciB0aGlzIHRhZy5cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0eXBlLCBhbm5vdGF0aW9uKSB7XG4gICAgdmFyIHRhZ05hbWUgPSBUQUdfTkFNRVt0eXBlXTtcbiAgICBpZiAoIXRhZ05hbWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICAgIHZhciBuYW1lID0gVEFHX0FOTk9UQVRJT05bdHlwZV07XG4gICAgaWYgKG5hbWUgJiYgYW5ub3RhdGlvbikge1xuICAgICAgZWxlbWVudFtuYW1lXSA9IGFubm90YXRpb24udHJpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHZhciByb290RGl2ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICBjdXJyZW50ID0gcm9vdERpdixcbiAgICAgIHQsXG4gICAgICB0YWdTdGFjayA9IFtdO1xuXG4gIHdoaWxlICgodCA9IG5leHRUb2tlbigpKSAhPT0gbnVsbCkge1xuICAgIGlmICh0WzBdID09PSAnPCcpIHtcbiAgICAgIGlmICh0WzFdID09PSBcIi9cIikge1xuICAgICAgICAvLyBJZiB0aGUgY2xvc2luZyB0YWcgbWF0Y2hlcywgbW92ZSBiYWNrIHVwIHRvIHRoZSBwYXJlbnQgbm9kZS5cbiAgICAgICAgaWYgKHRhZ1N0YWNrLmxlbmd0aCAmJlxuICAgICAgICAgICAgdGFnU3RhY2tbdGFnU3RhY2subGVuZ3RoIC0gMV0gPT09IHQuc3Vic3RyKDIpLnJlcGxhY2UoXCI+XCIsIFwiXCIpKSB7XG4gICAgICAgICAgdGFnU3RhY2sucG9wKCk7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UganVzdCBpZ25vcmUgdGhlIGVuZCB0YWcuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHRzID0gcGFyc2VUaW1lU3RhbXAodC5zdWJzdHIoMSwgdC5sZW5ndGggLSAyKSk7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIGlmICh0cykge1xuICAgICAgICAvLyBUaW1lc3RhbXBzIGFyZSBsZWFkIG5vZGVzIGFzIHdlbGwuXG4gICAgICAgIG5vZGUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uKFwidGltZXN0YW1wXCIsIHRzKTtcbiAgICAgICAgY3VycmVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgbSA9IHQubWF0Y2goL148KFteLlxccy8wLTk+XSspKFxcLlteXFxzXFxcXD5dKyk/KFtePlxcXFxdKyk/KFxcXFw/KT4/JC8pO1xuICAgICAgLy8gSWYgd2UgY2FuJ3QgcGFyc2UgdGhlIHRhZywgc2tpcCB0byB0aGUgbmV4dCB0YWcuXG4gICAgICBpZiAoIW0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyBUcnkgdG8gY29uc3RydWN0IGFuIGVsZW1lbnQsIGFuZCBpZ25vcmUgdGhlIHRhZyBpZiB3ZSBjb3VsZG4ndC5cbiAgICAgIG5vZGUgPSBjcmVhdGVFbGVtZW50KG1bMV0sIG1bM10pO1xuICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSB0YWcgc2hvdWxkIGJlIGFkZGVkIGJhc2VkIG9uIHRoZSBjb250ZXh0IG9mIHdoZXJlIGl0XG4gICAgICAvLyBpcyBwbGFjZWQgaW4gdGhlIGN1ZXRleHQuXG4gICAgICBpZiAoIXNob3VsZEFkZChjdXJyZW50LCBub2RlKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIFNldCB0aGUgY2xhc3MgbGlzdCAoYXMgYSBsaXN0IG9mIGNsYXNzZXMsIHNlcGFyYXRlZCBieSBzcGFjZSkuXG4gICAgICBpZiAobVsyXSkge1xuICAgICAgICB2YXIgY2xhc3NlcyA9IG1bMl0uc3BsaXQoJy4nKTtcblxuICAgICAgICBjbGFzc2VzLmZvckVhY2goZnVuY3Rpb24oY2wpIHtcbiAgICAgICAgICB2YXIgYmdDb2xvciA9IC9eYmdfLy50ZXN0KGNsKTtcbiAgICAgICAgICAvLyBzbGljZSBvdXQgYGJnX2AgaWYgaXQncyBhIGJhY2tncm91bmQgY29sb3JcbiAgICAgICAgICB2YXIgY29sb3JOYW1lID0gYmdDb2xvciA/IGNsLnNsaWNlKDMpIDogY2w7XG5cbiAgICAgICAgICBpZiAoREVGQVVMVF9DT0xPUl9DTEFTUy5oYXNPd25Qcm9wZXJ0eShjb2xvck5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBiZ0NvbG9yID8gJ2JhY2tncm91bmQtY29sb3InIDogJ2NvbG9yJztcbiAgICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBERUZBVUxUX0NPTE9SX0NMQVNTW2NvbG9yTmFtZV07XG5cbiAgICAgICAgICAgIG5vZGUuc3R5bGVbcHJvcE5hbWVdID0gcHJvcFZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oJyAnKTtcbiAgICAgIH1cbiAgICAgIC8vIEFwcGVuZCB0aGUgbm9kZSB0byB0aGUgY3VycmVudCBub2RlLCBhbmQgZW50ZXIgdGhlIHNjb3BlIG9mIHRoZSBuZXdcbiAgICAgIC8vIG5vZGUuXG4gICAgICB0YWdTdGFjay5wdXNoKG1bMV0pO1xuICAgICAgY3VycmVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIGN1cnJlbnQgPSBub2RlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gVGV4dCBub2RlcyBhcmUgbGVhZiBub2Rlcy5cbiAgICBjdXJyZW50LmFwcGVuZENoaWxkKHdpbmRvdy5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh1bmVzY2FwZSh0KSkpO1xuICB9XG5cbiAgcmV0dXJuIHJvb3REaXY7XG59XG5cbi8vIFRoaXMgaXMgYSBsaXN0IG9mIGFsbCB0aGUgVW5pY29kZSBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSBhIHN0cm9uZ1xuLy8gcmlnaHQtdG8tbGVmdCBjYXRlZ29yeS4gV2hhdCB0aGlzIG1lYW5zIGlzIHRoYXQgdGhlc2UgY2hhcmFjdGVycyBhcmVcbi8vIHdyaXR0ZW4gcmlnaHQtdG8tbGVmdCBmb3Igc3VyZS4gSXQgd2FzIGdlbmVyYXRlZCBieSBwdWxsaW5nIGFsbCB0aGUgc3Ryb25nXG4vLyByaWdodC10by1sZWZ0IGNoYXJhY3RlcnMgb3V0IG9mIHRoZSBVbmljb2RlIGRhdGEgdGFibGUuIFRoYXQgdGFibGUgY2FuXG4vLyBmb3VuZCBhdDogaHR0cDovL3d3dy51bmljb2RlLm9yZy9QdWJsaWMvVU5JREFUQS9Vbmljb2RlRGF0YS50eHRcbnZhciBzdHJvbmdSVExSYW5nZXMgPSBbWzB4NWJlLCAweDViZV0sIFsweDVjMCwgMHg1YzBdLCBbMHg1YzMsIDB4NWMzXSwgWzB4NWM2LCAweDVjNl0sXG4gWzB4NWQwLCAweDVlYV0sIFsweDVmMCwgMHg1ZjRdLCBbMHg2MDgsIDB4NjA4XSwgWzB4NjBiLCAweDYwYl0sIFsweDYwZCwgMHg2MGRdLFxuIFsweDYxYiwgMHg2MWJdLCBbMHg2MWUsIDB4NjRhXSwgWzB4NjZkLCAweDY2Zl0sIFsweDY3MSwgMHg2ZDVdLCBbMHg2ZTUsIDB4NmU2XSxcbiBbMHg2ZWUsIDB4NmVmXSwgWzB4NmZhLCAweDcwZF0sIFsweDcwZiwgMHg3MTBdLCBbMHg3MTIsIDB4NzJmXSwgWzB4NzRkLCAweDdhNV0sXG4gWzB4N2IxLCAweDdiMV0sIFsweDdjMCwgMHg3ZWFdLCBbMHg3ZjQsIDB4N2Y1XSwgWzB4N2ZhLCAweDdmYV0sIFsweDgwMCwgMHg4MTVdLFxuIFsweDgxYSwgMHg4MWFdLCBbMHg4MjQsIDB4ODI0XSwgWzB4ODI4LCAweDgyOF0sIFsweDgzMCwgMHg4M2VdLCBbMHg4NDAsIDB4ODU4XSxcbiBbMHg4NWUsIDB4ODVlXSwgWzB4OGEwLCAweDhhMF0sIFsweDhhMiwgMHg4YWNdLCBbMHgyMDBmLCAweDIwMGZdLFxuIFsweGZiMWQsIDB4ZmIxZF0sIFsweGZiMWYsIDB4ZmIyOF0sIFsweGZiMmEsIDB4ZmIzNl0sIFsweGZiMzgsIDB4ZmIzY10sXG4gWzB4ZmIzZSwgMHhmYjNlXSwgWzB4ZmI0MCwgMHhmYjQxXSwgWzB4ZmI0MywgMHhmYjQ0XSwgWzB4ZmI0NiwgMHhmYmMxXSxcbiBbMHhmYmQzLCAweGZkM2RdLCBbMHhmZDUwLCAweGZkOGZdLCBbMHhmZDkyLCAweGZkYzddLCBbMHhmZGYwLCAweGZkZmNdLFxuIFsweGZlNzAsIDB4ZmU3NF0sIFsweGZlNzYsIDB4ZmVmY10sIFsweDEwODAwLCAweDEwODA1XSwgWzB4MTA4MDgsIDB4MTA4MDhdLFxuIFsweDEwODBhLCAweDEwODM1XSwgWzB4MTA4MzcsIDB4MTA4MzhdLCBbMHgxMDgzYywgMHgxMDgzY10sIFsweDEwODNmLCAweDEwODU1XSxcbiBbMHgxMDg1NywgMHgxMDg1Zl0sIFsweDEwOTAwLCAweDEwOTFiXSwgWzB4MTA5MjAsIDB4MTA5MzldLCBbMHgxMDkzZiwgMHgxMDkzZl0sXG4gWzB4MTA5ODAsIDB4MTA5YjddLCBbMHgxMDliZSwgMHgxMDliZl0sIFsweDEwYTAwLCAweDEwYTAwXSwgWzB4MTBhMTAsIDB4MTBhMTNdLFxuIFsweDEwYTE1LCAweDEwYTE3XSwgWzB4MTBhMTksIDB4MTBhMzNdLCBbMHgxMGE0MCwgMHgxMGE0N10sIFsweDEwYTUwLCAweDEwYTU4XSxcbiBbMHgxMGE2MCwgMHgxMGE3Zl0sIFsweDEwYjAwLCAweDEwYjM1XSwgWzB4MTBiNDAsIDB4MTBiNTVdLCBbMHgxMGI1OCwgMHgxMGI3Ml0sXG4gWzB4MTBiNzgsIDB4MTBiN2ZdLCBbMHgxMGMwMCwgMHgxMGM0OF0sIFsweDFlZTAwLCAweDFlZTAzXSwgWzB4MWVlMDUsIDB4MWVlMWZdLFxuIFsweDFlZTIxLCAweDFlZTIyXSwgWzB4MWVlMjQsIDB4MWVlMjRdLCBbMHgxZWUyNywgMHgxZWUyN10sIFsweDFlZTI5LCAweDFlZTMyXSxcbiBbMHgxZWUzNCwgMHgxZWUzN10sIFsweDFlZTM5LCAweDFlZTM5XSwgWzB4MWVlM2IsIDB4MWVlM2JdLCBbMHgxZWU0MiwgMHgxZWU0Ml0sXG4gWzB4MWVlNDcsIDB4MWVlNDddLCBbMHgxZWU0OSwgMHgxZWU0OV0sIFsweDFlZTRiLCAweDFlZTRiXSwgWzB4MWVlNGQsIDB4MWVlNGZdLFxuIFsweDFlZTUxLCAweDFlZTUyXSwgWzB4MWVlNTQsIDB4MWVlNTRdLCBbMHgxZWU1NywgMHgxZWU1N10sIFsweDFlZTU5LCAweDFlZTU5XSxcbiBbMHgxZWU1YiwgMHgxZWU1Yl0sIFsweDFlZTVkLCAweDFlZTVkXSwgWzB4MWVlNWYsIDB4MWVlNWZdLCBbMHgxZWU2MSwgMHgxZWU2Ml0sXG4gWzB4MWVlNjQsIDB4MWVlNjRdLCBbMHgxZWU2NywgMHgxZWU2YV0sIFsweDFlZTZjLCAweDFlZTcyXSwgWzB4MWVlNzQsIDB4MWVlNzddLFxuIFsweDFlZTc5LCAweDFlZTdjXSwgWzB4MWVlN2UsIDB4MWVlN2VdLCBbMHgxZWU4MCwgMHgxZWU4OV0sIFsweDFlZThiLCAweDFlZTliXSxcbiBbMHgxZWVhMSwgMHgxZWVhM10sIFsweDFlZWE1LCAweDFlZWE5XSwgWzB4MWVlYWIsIDB4MWVlYmJdLCBbMHgxMGZmZmQsIDB4MTBmZmZkXV07XG5cbmZ1bmN0aW9uIGlzU3Ryb25nUlRMQ2hhcihjaGFyQ29kZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cm9uZ1JUTFJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjdXJyZW50UmFuZ2UgPSBzdHJvbmdSVExSYW5nZXNbaV07XG4gICAgaWYgKGNoYXJDb2RlID49IGN1cnJlbnRSYW5nZVswXSAmJiBjaGFyQ29kZSA8PSBjdXJyZW50UmFuZ2VbMV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5lQmlkaShjdWVEaXYpIHtcbiAgdmFyIG5vZGVTdGFjayA9IFtdLFxuICAgICAgdGV4dCA9IFwiXCIsXG4gICAgICBjaGFyQ29kZTtcblxuICBpZiAoIWN1ZURpdiB8fCAhY3VlRGl2LmNoaWxkTm9kZXMpIHtcbiAgICByZXR1cm4gXCJsdHJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hOb2Rlcyhub2RlU3RhY2ssIG5vZGUpIHtcbiAgICBmb3IgKHZhciBpID0gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBub2RlU3RhY2sucHVzaChub2RlLmNoaWxkTm9kZXNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHRUZXh0Tm9kZShub2RlU3RhY2spIHtcbiAgICBpZiAoIW5vZGVTdGFjayB8fCAhbm9kZVN0YWNrLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG5vZGUgPSBub2RlU3RhY2sucG9wKCksXG4gICAgICAgIHRleHQgPSBub2RlLnRleHRDb250ZW50IHx8IG5vZGUuaW5uZXJUZXh0O1xuICAgIGlmICh0ZXh0KSB7XG4gICAgICAvLyBUT0RPOiBUaGlzIHNob3VsZCBtYXRjaCBhbGwgdW5pY29kZSB0eXBlIEIgY2hhcmFjdGVycyAocGFyYWdyYXBoXG4gICAgICAvLyBzZXBhcmF0b3IgY2hhcmFjdGVycykuIFNlZSBpc3N1ZSAjMTE1LlxuICAgICAgdmFyIG0gPSB0ZXh0Lm1hdGNoKC9eLiooXFxufFxccikvKTtcbiAgICAgIGlmIChtKSB7XG4gICAgICAgIG5vZGVTdGFjay5sZW5ndGggPSAwO1xuICAgICAgICByZXR1cm4gbVswXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBpZiAobm9kZS50YWdOYW1lID09PSBcInJ1YnlcIikge1xuICAgICAgcmV0dXJuIG5leHRUZXh0Tm9kZShub2RlU3RhY2spO1xuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZE5vZGVzKSB7XG4gICAgICBwdXNoTm9kZXMobm9kZVN0YWNrLCBub2RlKTtcbiAgICAgIHJldHVybiBuZXh0VGV4dE5vZGUobm9kZVN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBwdXNoTm9kZXMobm9kZVN0YWNrLCBjdWVEaXYpO1xuICB3aGlsZSAoKHRleHQgPSBuZXh0VGV4dE5vZGUobm9kZVN0YWNrKSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJDb2RlID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgICAgaWYgKGlzU3Ryb25nUlRMQ2hhcihjaGFyQ29kZSkpIHtcbiAgICAgICAgcmV0dXJuIFwicnRsXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBcImx0clwiO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlTGluZVBvcyhjdWUpIHtcbiAgaWYgKHR5cGVvZiBjdWUubGluZSA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgKGN1ZS5zbmFwVG9MaW5lcyB8fCAoY3VlLmxpbmUgPj0gMCAmJiBjdWUubGluZSA8PSAxMDApKSkge1xuICAgIHJldHVybiBjdWUubGluZTtcbiAgfVxuICBpZiAoIWN1ZS50cmFjayB8fCAhY3VlLnRyYWNrLnRleHRUcmFja0xpc3QgfHxcbiAgICAgICFjdWUudHJhY2sudGV4dFRyYWNrTGlzdC5tZWRpYUVsZW1lbnQpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgdmFyIHRyYWNrID0gY3VlLnRyYWNrLFxuICAgICAgdHJhY2tMaXN0ID0gdHJhY2sudGV4dFRyYWNrTGlzdCxcbiAgICAgIGNvdW50ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja0xpc3QubGVuZ3RoICYmIHRyYWNrTGlzdFtpXSAhPT0gdHJhY2s7IGkrKykge1xuICAgIGlmICh0cmFja0xpc3RbaV0ubW9kZSA9PT0gXCJzaG93aW5nXCIpIHtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuICB9XG4gIHJldHVybiArK2NvdW50ICogLTE7XG59XG5cbmZ1bmN0aW9uIFN0eWxlQm94KCkge1xufVxuXG4vLyBBcHBseSBzdHlsZXMgdG8gYSBkaXYuIElmIHRoZXJlIGlzIG5vIGRpdiBwYXNzZWQgdGhlbiBpdCBkZWZhdWx0cyB0byB0aGVcbi8vIGRpdiBvbiAndGhpcycuXG5TdHlsZUJveC5wcm90b3R5cGUuYXBwbHlTdHlsZXMgPSBmdW5jdGlvbihzdHlsZXMsIGRpdikge1xuICBkaXYgPSBkaXYgfHwgdGhpcy5kaXY7XG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGVzKSB7XG4gICAgaWYgKHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgZGl2LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdO1xuICAgIH1cbiAgfVxufTtcblxuU3R5bGVCb3gucHJvdG90eXBlLmZvcm1hdFN0eWxlID0gZnVuY3Rpb24odmFsLCB1bml0KSB7XG4gIHJldHVybiB2YWwgPT09IDAgPyAwIDogdmFsICsgdW5pdDtcbn07XG5cbi8vIENvbnN0cnVjdHMgdGhlIGNvbXB1dGVkIGRpc3BsYXkgc3RhdGUgb2YgdGhlIGN1ZSAoYSBkaXYpLiBQbGFjZXMgdGhlIGRpdlxuLy8gaW50byB0aGUgb3ZlcmxheSB3aGljaCBzaG91bGQgYmUgYSBibG9jayBsZXZlbCBlbGVtZW50ICh1c3VhbGx5IGEgZGl2KS5cbmZ1bmN0aW9uIEN1ZVN0eWxlQm94KHdpbmRvdywgY3VlLCBzdHlsZU9wdGlvbnMpIHtcbiAgU3R5bGVCb3guY2FsbCh0aGlzKTtcbiAgdGhpcy5jdWUgPSBjdWU7XG5cbiAgLy8gUGFyc2Ugb3VyIGN1ZSdzIHRleHQgaW50byBhIERPTSB0cmVlIHJvb3RlZCBhdCAnY3VlRGl2Jy4gVGhpcyBkaXYgd2lsbFxuICAvLyBoYXZlIGlubGluZSBwb3NpdGlvbmluZyBhbmQgd2lsbCBmdW5jdGlvbiBhcyB0aGUgY3VlIGJhY2tncm91bmQgYm94LlxuICB0aGlzLmN1ZURpdiA9IHBhcnNlQ29udGVudCh3aW5kb3csIGN1ZS50ZXh0KTtcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBjb2xvcjogXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpXCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiAgXCJyZ2JhKDAsIDAsIDAsIDAuOClcIixcbiAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBkaXNwbGF5OiBcImlubGluZVwiLFxuICAgIHdyaXRpbmdNb2RlOiBjdWUudmVydGljYWwgPT09IFwiXCIgPyBcImhvcml6b250YWwtdGJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY3VlLnZlcnRpY2FsID09PSBcImxyXCIgPyBcInZlcnRpY2FsLWxyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwidmVydGljYWwtcmxcIixcbiAgICB1bmljb2RlQmlkaTogXCJwbGFpbnRleHRcIlxuICB9O1xuXG4gIHRoaXMuYXBwbHlTdHlsZXMoc3R5bGVzLCB0aGlzLmN1ZURpdik7XG5cbiAgLy8gQ3JlYXRlIGFuIGFic29sdXRlbHkgcG9zaXRpb25lZCBkaXYgdGhhdCB3aWxsIGJlIHVzZWQgdG8gcG9zaXRpb24gdGhlIGN1ZVxuICAvLyBkaXYuIE5vdGUsIGFsbCBXZWJWVFQgY3VlLXNldHRpbmcgYWxpZ25tZW50cyBhcmUgZXF1aXZhbGVudCB0byB0aGUgQ1NTXG4gIC8vIG1pcnJvcnMgb2YgdGhlbSBleGNlcHQgbWlkZGxlIGluc3RlYWQgb2YgY2VudGVyIG9uIFNhZmFyaS5cbiAgdGhpcy5kaXYgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgc3R5bGVzID0ge1xuICAgIGRpcmVjdGlvbjogZGV0ZXJtaW5lQmlkaSh0aGlzLmN1ZURpdiksXG4gICAgd3JpdGluZ01vZGU6IGN1ZS52ZXJ0aWNhbCA9PT0gXCJcIiA/IFwiaG9yaXpvbnRhbC10YlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdWUudmVydGljYWwgPT09IFwibHJcIiA/IFwidmVydGljYWwtbHJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJ2ZXJ0aWNhbC1ybFwiLFxuICAgIHVuaWNvZGVCaWRpOiBcInBsYWludGV4dFwiLFxuICAgIHRleHRBbGlnbjogY3VlLmFsaWduID09PSBcIm1pZGRsZVwiID8gXCJjZW50ZXJcIiA6IGN1ZS5hbGlnbixcbiAgICBmb250OiBzdHlsZU9wdGlvbnMuZm9udCxcbiAgICB3aGl0ZVNwYWNlOiBcInByZS1saW5lXCIsXG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIlxuICB9O1xuXG4gIHRoaXMuYXBwbHlTdHlsZXMoc3R5bGVzKTtcbiAgdGhpcy5kaXYuYXBwZW5kQ2hpbGQodGhpcy5jdWVEaXYpO1xuXG4gIC8vIENhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgcmVmZXJlbmNlIGVkZ2Ugb2YgdGhlIHZpZXdwb3J0IHRvIHRoZSB0ZXh0XG4gIC8vIHBvc2l0aW9uIG9mIHRoZSBjdWUgYm94LiBUaGUgcmVmZXJlbmNlIGVkZ2Ugd2lsbCBiZSByZXNvbHZlZCBsYXRlciB3aGVuXG4gIC8vIHRoZSBib3ggb3JpZW50YXRpb24gc3R5bGVzIGFyZSBhcHBsaWVkLlxuICB2YXIgdGV4dFBvcyA9IDA7XG4gIHN3aXRjaCAoY3VlLnBvc2l0aW9uQWxpZ24pIHtcbiAgY2FzZSBcInN0YXJ0XCI6XG4gICAgdGV4dFBvcyA9IGN1ZS5wb3NpdGlvbjtcbiAgICBicmVhaztcbiAgY2FzZSBcImNlbnRlclwiOlxuICAgIHRleHRQb3MgPSBjdWUucG9zaXRpb24gLSAoY3VlLnNpemUgLyAyKTtcbiAgICBicmVhaztcbiAgY2FzZSBcImVuZFwiOlxuICAgIHRleHRQb3MgPSBjdWUucG9zaXRpb24gLSBjdWUuc2l6ZTtcbiAgICBicmVhaztcbiAgfVxuXG4gIC8vIEhvcml6b250YWwgYm94IG9yaWVudGF0aW9uOyB0ZXh0UG9zIGlzIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlXG4gIC8vIGFyZWEgdG8gdGhlIGxlZnQgZWRnZSBvZiB0aGUgYm94IGFuZCBjdWUuc2l6ZSBpcyB0aGUgZGlzdGFuY2UgZXh0ZW5kaW5nIHRvXG4gIC8vIHRoZSByaWdodCBmcm9tIHRoZXJlLlxuICBpZiAoY3VlLnZlcnRpY2FsID09PSBcIlwiKSB7XG4gICAgdGhpcy5hcHBseVN0eWxlcyh7XG4gICAgICBsZWZ0OiAgdGhpcy5mb3JtYXRTdHlsZSh0ZXh0UG9zLCBcIiVcIiksXG4gICAgICB3aWR0aDogdGhpcy5mb3JtYXRTdHlsZShjdWUuc2l6ZSwgXCIlXCIpXG4gICAgfSk7XG4gIC8vIFZlcnRpY2FsIGJveCBvcmllbnRhdGlvbjsgdGV4dFBvcyBpcyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgdG9wIGVkZ2Ugb2YgdGhlXG4gIC8vIGFyZWEgdG8gdGhlIHRvcCBlZGdlIG9mIHRoZSBib3ggYW5kIGN1ZS5zaXplIGlzIHRoZSBoZWlnaHQgZXh0ZW5kaW5nXG4gIC8vIGRvd253YXJkcyBmcm9tIHRoZXJlLlxuICB9IGVsc2Uge1xuICAgIHRoaXMuYXBwbHlTdHlsZXMoe1xuICAgICAgdG9wOiB0aGlzLmZvcm1hdFN0eWxlKHRleHRQb3MsIFwiJVwiKSxcbiAgICAgIGhlaWdodDogdGhpcy5mb3JtYXRTdHlsZShjdWUuc2l6ZSwgXCIlXCIpXG4gICAgfSk7XG4gIH1cblxuICB0aGlzLm1vdmUgPSBmdW5jdGlvbihib3gpIHtcbiAgICB0aGlzLmFwcGx5U3R5bGVzKHtcbiAgICAgIHRvcDogdGhpcy5mb3JtYXRTdHlsZShib3gudG9wLCBcInB4XCIpLFxuICAgICAgYm90dG9tOiB0aGlzLmZvcm1hdFN0eWxlKGJveC5ib3R0b20sIFwicHhcIiksXG4gICAgICBsZWZ0OiB0aGlzLmZvcm1hdFN0eWxlKGJveC5sZWZ0LCBcInB4XCIpLFxuICAgICAgcmlnaHQ6IHRoaXMuZm9ybWF0U3R5bGUoYm94LnJpZ2h0LCBcInB4XCIpLFxuICAgICAgaGVpZ2h0OiB0aGlzLmZvcm1hdFN0eWxlKGJveC5oZWlnaHQsIFwicHhcIiksXG4gICAgICB3aWR0aDogdGhpcy5mb3JtYXRTdHlsZShib3gud2lkdGgsIFwicHhcIilcbiAgICB9KTtcbiAgfTtcbn1cbkN1ZVN0eWxlQm94LnByb3RvdHlwZSA9IF9vYmpDcmVhdGUoU3R5bGVCb3gucHJvdG90eXBlKTtcbkN1ZVN0eWxlQm94LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1ZVN0eWxlQm94O1xuXG4vLyBSZXByZXNlbnRzIHRoZSBjby1vcmRpbmF0ZXMgb2YgYW4gRWxlbWVudCBpbiBhIHdheSB0aGF0IHdlIGNhbiBlYXNpbHlcbi8vIGNvbXB1dGUgdGhpbmdzIHdpdGggc3VjaCBhcyBpZiBpdCBvdmVybGFwcyBvciBpbnRlcnNlY3RzIHdpdGggYW5vdGhlciBFbGVtZW50LlxuLy8gQ2FuIGluaXRpYWxpemUgaXQgd2l0aCBlaXRoZXIgYSBTdHlsZUJveCBvciBhbm90aGVyIEJveFBvc2l0aW9uLlxuZnVuY3Rpb24gQm94UG9zaXRpb24ob2JqKSB7XG4gIC8vIEVpdGhlciBhIEJveFBvc2l0aW9uIHdhcyBwYXNzZWQgaW4gYW5kIHdlIG5lZWQgdG8gY29weSBpdCwgb3IgYSBTdHlsZUJveFxuICAvLyB3YXMgcGFzc2VkIGluIGFuZCB3ZSBuZWVkIHRvIGNvcHkgdGhlIHJlc3VsdHMgb2YgJ2dldEJvdW5kaW5nQ2xpZW50UmVjdCdcbiAgLy8gYXMgdGhlIG9iamVjdCByZXR1cm5lZCBpcyByZWFkb25seS4gQWxsIGNvLW9yZGluYXRlIHZhbHVlcyBhcmUgaW4gcmVmZXJlbmNlXG4gIC8vIHRvIHRoZSB2aWV3cG9ydCBvcmlnaW4gKHRvcCBsZWZ0KS5cbiAgdmFyIGxoLCBoZWlnaHQsIHdpZHRoLCB0b3A7XG4gIGlmIChvYmouZGl2KSB7XG4gICAgaGVpZ2h0ID0gb2JqLmRpdi5vZmZzZXRIZWlnaHQ7XG4gICAgd2lkdGggPSBvYmouZGl2Lm9mZnNldFdpZHRoO1xuICAgIHRvcCA9IG9iai5kaXYub2Zmc2V0VG9wO1xuXG4gICAgdmFyIHJlY3RzID0gKHJlY3RzID0gb2JqLmRpdi5jaGlsZE5vZGVzKSAmJiAocmVjdHMgPSByZWN0c1swXSkgJiZcbiAgICAgICAgICAgICAgICByZWN0cy5nZXRDbGllbnRSZWN0cyAmJiByZWN0cy5nZXRDbGllbnRSZWN0cygpO1xuICAgIG9iaiA9IG9iai5kaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgLy8gSW4gY2VydGFpbiBjYXNlcyB0aGUgb3V0dGVyIGRpdiB3aWxsIGJlIHNsaWdodGx5IGxhcmdlciB0aGVuIHRoZSBzdW0gb2ZcbiAgICAvLyB0aGUgaW5uZXIgZGl2J3MgbGluZXMuIFRoaXMgY291bGQgYmUgZHVlIHRvIGJvbGQgdGV4dCwgZXRjLCBvbiBzb21lIHBsYXRmb3Jtcy5cbiAgICAvLyBJbiB0aGlzIGNhc2Ugd2Ugc2hvdWxkIGdldCB0aGUgYXZlcmFnZSBsaW5lIGhlaWdodCBhbmQgdXNlIHRoYXQuIFRoaXMgd2lsbFxuICAgIC8vIHJlc3VsdCBpbiB0aGUgZGVzaXJlZCBiZWhhdmlvdXIuXG4gICAgbGggPSByZWN0cyA/IE1hdGgubWF4KChyZWN0c1swXSAmJiByZWN0c1swXS5oZWlnaHQpIHx8IDAsIG9iai5oZWlnaHQgLyByZWN0cy5sZW5ndGgpXG4gICAgICAgICAgICAgICA6IDA7XG5cbiAgfVxuICB0aGlzLmxlZnQgPSBvYmoubGVmdDtcbiAgdGhpcy5yaWdodCA9IG9iai5yaWdodDtcbiAgdGhpcy50b3AgPSBvYmoudG9wIHx8IHRvcDtcbiAgdGhpcy5oZWlnaHQgPSBvYmouaGVpZ2h0IHx8IGhlaWdodDtcbiAgdGhpcy5ib3R0b20gPSBvYmouYm90dG9tIHx8ICh0b3AgKyAob2JqLmhlaWdodCB8fCBoZWlnaHQpKTtcbiAgdGhpcy53aWR0aCA9IG9iai53aWR0aCB8fCB3aWR0aDtcbiAgdGhpcy5saW5lSGVpZ2h0ID0gbGggIT09IHVuZGVmaW5lZCA/IGxoIDogb2JqLmxpbmVIZWlnaHQ7XG59XG5cbi8vIE1vdmUgdGhlIGJveCBhbG9uZyBhIHBhcnRpY3VsYXIgYXhpcy4gT3B0aW9uYWxseSBwYXNzIGluIGFuIGFtb3VudCB0byBtb3ZlXG4vLyB0aGUgYm94LiBJZiBubyBhbW91bnQgaXMgcGFzc2VkIHRoZW4gdGhlIGRlZmF1bHQgaXMgdGhlIGxpbmUgaGVpZ2h0IG9mIHRoZVxuLy8gYm94LlxuQm94UG9zaXRpb24ucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbihheGlzLCB0b01vdmUpIHtcbiAgdG9Nb3ZlID0gdG9Nb3ZlICE9PSB1bmRlZmluZWQgPyB0b01vdmUgOiB0aGlzLmxpbmVIZWlnaHQ7XG4gIHN3aXRjaCAoYXhpcykge1xuICBjYXNlIFwiK3hcIjpcbiAgICB0aGlzLmxlZnQgKz0gdG9Nb3ZlO1xuICAgIHRoaXMucmlnaHQgKz0gdG9Nb3ZlO1xuICAgIGJyZWFrO1xuICBjYXNlIFwiLXhcIjpcbiAgICB0aGlzLmxlZnQgLT0gdG9Nb3ZlO1xuICAgIHRoaXMucmlnaHQgLT0gdG9Nb3ZlO1xuICAgIGJyZWFrO1xuICBjYXNlIFwiK3lcIjpcbiAgICB0aGlzLnRvcCArPSB0b01vdmU7XG4gICAgdGhpcy5ib3R0b20gKz0gdG9Nb3ZlO1xuICAgIGJyZWFrO1xuICBjYXNlIFwiLXlcIjpcbiAgICB0aGlzLnRvcCAtPSB0b01vdmU7XG4gICAgdGhpcy5ib3R0b20gLT0gdG9Nb3ZlO1xuICAgIGJyZWFrO1xuICB9XG59O1xuXG4vLyBDaGVjayBpZiB0aGlzIGJveCBvdmVybGFwcyBhbm90aGVyIGJveCwgYjIuXG5Cb3hQb3NpdGlvbi5wcm90b3R5cGUub3ZlcmxhcHMgPSBmdW5jdGlvbihiMikge1xuICByZXR1cm4gdGhpcy5sZWZ0IDwgYjIucmlnaHQgJiZcbiAgICAgICAgIHRoaXMucmlnaHQgPiBiMi5sZWZ0ICYmXG4gICAgICAgICB0aGlzLnRvcCA8IGIyLmJvdHRvbSAmJlxuICAgICAgICAgdGhpcy5ib3R0b20gPiBiMi50b3A7XG59O1xuXG4vLyBDaGVjayBpZiB0aGlzIGJveCBvdmVybGFwcyBhbnkgb3RoZXIgYm94ZXMgaW4gYm94ZXMuXG5Cb3hQb3NpdGlvbi5wcm90b3R5cGUub3ZlcmxhcHNBbnkgPSBmdW5jdGlvbihib3hlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJveGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRoaXMub3ZlcmxhcHMoYm94ZXNbaV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLy8gQ2hlY2sgaWYgdGhpcyBib3ggaXMgd2l0aGluIGFub3RoZXIgYm94LlxuQm94UG9zaXRpb24ucHJvdG90eXBlLndpdGhpbiA9IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICByZXR1cm4gdGhpcy50b3AgPj0gY29udGFpbmVyLnRvcCAmJlxuICAgICAgICAgdGhpcy5ib3R0b20gPD0gY29udGFpbmVyLmJvdHRvbSAmJlxuICAgICAgICAgdGhpcy5sZWZ0ID49IGNvbnRhaW5lci5sZWZ0ICYmXG4gICAgICAgICB0aGlzLnJpZ2h0IDw9IGNvbnRhaW5lci5yaWdodDtcbn07XG5cbi8vIENoZWNrIGlmIHRoaXMgYm94IGlzIGVudGlyZWx5IHdpdGhpbiB0aGUgY29udGFpbmVyIG9yIGl0IGlzIG92ZXJsYXBwaW5nXG4vLyBvbiB0aGUgZWRnZSBvcHBvc2l0ZSBvZiB0aGUgYXhpcyBkaXJlY3Rpb24gcGFzc2VkLiBGb3IgZXhhbXBsZSwgaWYgXCIreFwiIGlzXG4vLyBwYXNzZWQgYW5kIHRoZSBib3ggaXMgb3ZlcmxhcHBpbmcgb24gdGhlIGxlZnQgZWRnZSBvZiB0aGUgY29udGFpbmVyLCB0aGVuXG4vLyByZXR1cm4gdHJ1ZS5cbkJveFBvc2l0aW9uLnByb3RvdHlwZS5vdmVybGFwc09wcG9zaXRlQXhpcyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgYXhpcykge1xuICBzd2l0Y2ggKGF4aXMpIHtcbiAgY2FzZSBcIit4XCI6XG4gICAgcmV0dXJuIHRoaXMubGVmdCA8IGNvbnRhaW5lci5sZWZ0O1xuICBjYXNlIFwiLXhcIjpcbiAgICByZXR1cm4gdGhpcy5yaWdodCA+IGNvbnRhaW5lci5yaWdodDtcbiAgY2FzZSBcIit5XCI6XG4gICAgcmV0dXJuIHRoaXMudG9wIDwgY29udGFpbmVyLnRvcDtcbiAgY2FzZSBcIi15XCI6XG4gICAgcmV0dXJuIHRoaXMuYm90dG9tID4gY29udGFpbmVyLmJvdHRvbTtcbiAgfVxufTtcblxuLy8gRmluZCB0aGUgcGVyY2VudGFnZSBvZiB0aGUgYXJlYSB0aGF0IHRoaXMgYm94IGlzIG92ZXJsYXBwaW5nIHdpdGggYW5vdGhlclxuLy8gYm94LlxuQm94UG9zaXRpb24ucHJvdG90eXBlLmludGVyc2VjdFBlcmNlbnRhZ2UgPSBmdW5jdGlvbihiMikge1xuICB2YXIgeCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMucmlnaHQsIGIyLnJpZ2h0KSAtIE1hdGgubWF4KHRoaXMubGVmdCwgYjIubGVmdCkpLFxuICAgICAgeSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMuYm90dG9tLCBiMi5ib3R0b20pIC0gTWF0aC5tYXgodGhpcy50b3AsIGIyLnRvcCkpLFxuICAgICAgaW50ZXJzZWN0QXJlYSA9IHggKiB5O1xuICByZXR1cm4gaW50ZXJzZWN0QXJlYSAvICh0aGlzLmhlaWdodCAqIHRoaXMud2lkdGgpO1xufTtcblxuLy8gQ29udmVydCB0aGUgcG9zaXRpb25zIGZyb20gdGhpcyBib3ggdG8gQ1NTIGNvbXBhdGlibGUgcG9zaXRpb25zIHVzaW5nXG4vLyB0aGUgcmVmZXJlbmNlIGNvbnRhaW5lcidzIHBvc2l0aW9ucy4gVGhpcyBoYXMgdG8gYmUgZG9uZSBiZWNhdXNlIHRoaXNcbi8vIGJveCdzIHBvc2l0aW9ucyBhcmUgaW4gcmVmZXJlbmNlIHRvIHRoZSB2aWV3cG9ydCBvcmlnaW4sIHdoZXJlYXMsIENTU1xuLy8gdmFsdWVzIGFyZSBpbiByZWZlcmVjbmUgdG8gdGhlaXIgcmVzcGVjdGl2ZSBlZGdlcy5cbkJveFBvc2l0aW9uLnByb3RvdHlwZS50b0NTU0NvbXBhdFZhbHVlcyA9IGZ1bmN0aW9uKHJlZmVyZW5jZSkge1xuICByZXR1cm4ge1xuICAgIHRvcDogdGhpcy50b3AgLSByZWZlcmVuY2UudG9wLFxuICAgIGJvdHRvbTogcmVmZXJlbmNlLmJvdHRvbSAtIHRoaXMuYm90dG9tLFxuICAgIGxlZnQ6IHRoaXMubGVmdCAtIHJlZmVyZW5jZS5sZWZ0LFxuICAgIHJpZ2h0OiByZWZlcmVuY2UucmlnaHQgLSB0aGlzLnJpZ2h0LFxuICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgd2lkdGg6IHRoaXMud2lkdGhcbiAgfTtcbn07XG5cbi8vIEdldCBhbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBib3gncyBwb3NpdGlvbiB3aXRob3V0IGFueXRoaW5nIGV4dHJhLlxuLy8gQ2FuIHBhc3MgYSBTdHlsZUJveCwgSFRNTEVsZW1lbnQsIG9yIGFub3RoZXIgQm94UG9zaXRvbi5cbkJveFBvc2l0aW9uLmdldFNpbXBsZUJveFBvc2l0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciBoZWlnaHQgPSBvYmouZGl2ID8gb2JqLmRpdi5vZmZzZXRIZWlnaHQgOiBvYmoudGFnTmFtZSA/IG9iai5vZmZzZXRIZWlnaHQgOiAwO1xuICB2YXIgd2lkdGggPSBvYmouZGl2ID8gb2JqLmRpdi5vZmZzZXRXaWR0aCA6IG9iai50YWdOYW1lID8gb2JqLm9mZnNldFdpZHRoIDogMDtcbiAgdmFyIHRvcCA9IG9iai5kaXYgPyBvYmouZGl2Lm9mZnNldFRvcCA6IG9iai50YWdOYW1lID8gb2JqLm9mZnNldFRvcCA6IDA7XG5cbiAgb2JqID0gb2JqLmRpdiA/IG9iai5kaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOlxuICAgICAgICAgICAgICAgIG9iai50YWdOYW1lID8gb2JqLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogb2JqO1xuICB2YXIgcmV0ID0ge1xuICAgIGxlZnQ6IG9iai5sZWZ0LFxuICAgIHJpZ2h0OiBvYmoucmlnaHQsXG4gICAgdG9wOiBvYmoudG9wIHx8IHRvcCxcbiAgICBoZWlnaHQ6IG9iai5oZWlnaHQgfHwgaGVpZ2h0LFxuICAgIGJvdHRvbTogb2JqLmJvdHRvbSB8fCAodG9wICsgKG9iai5oZWlnaHQgfHwgaGVpZ2h0KSksXG4gICAgd2lkdGg6IG9iai53aWR0aCB8fCB3aWR0aFxuICB9O1xuICByZXR1cm4gcmV0O1xufTtcblxuLy8gTW92ZSBhIFN0eWxlQm94IHRvIGl0cyBzcGVjaWZpZWQsIG9yIG5leHQgYmVzdCwgcG9zaXRpb24uIFRoZSBjb250YWluZXJCb3hcbi8vIGlzIHRoZSBib3ggdGhhdCBjb250YWlucyB0aGUgU3R5bGVCb3gsIHN1Y2ggYXMgYSBkaXYuIGJveFBvc2l0aW9ucyBhcmVcbi8vIGEgbGlzdCBvZiBvdGhlciBib3hlcyB0aGF0IHRoZSBzdHlsZUJveCBjYW4ndCBvdmVybGFwIHdpdGguXG5mdW5jdGlvbiBtb3ZlQm94VG9MaW5lUG9zaXRpb24od2luZG93LCBzdHlsZUJveCwgY29udGFpbmVyQm94LCBib3hQb3NpdGlvbnMpIHtcblxuICAvLyBGaW5kIHRoZSBiZXN0IHBvc2l0aW9uIGZvciBhIGN1ZSBib3gsIGIsIG9uIHRoZSB2aWRlby4gVGhlIGF4aXMgcGFyYW1ldGVyXG4gIC8vIGlzIGEgbGlzdCBvZiBheGlzLCB0aGUgb3JkZXIgb2Ygd2hpY2gsIGl0IHdpbGwgbW92ZSB0aGUgYm94IGFsb25nLiBGb3IgZXhhbXBsZTpcbiAgLy8gUGFzc2luZyBbXCIreFwiLCBcIi14XCJdIHdpbGwgbW92ZSB0aGUgYm94IGZpcnN0IGFsb25nIHRoZSB4IGF4aXMgaW4gdGhlIHBvc2l0aXZlXG4gIC8vIGRpcmVjdGlvbi4gSWYgaXQgZG9lc24ndCBmaW5kIGEgZ29vZCBwb3NpdGlvbiBmb3IgaXQgdGhlcmUgaXQgd2lsbCB0aGVuIG1vdmVcbiAgLy8gaXQgYWxvbmcgdGhlIHggYXhpcyBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uLlxuICBmdW5jdGlvbiBmaW5kQmVzdFBvc2l0aW9uKGIsIGF4aXMpIHtcbiAgICB2YXIgYmVzdFBvc2l0aW9uLFxuICAgICAgICBzcGVjaWZpZWRQb3NpdGlvbiA9IG5ldyBCb3hQb3NpdGlvbihiKSxcbiAgICAgICAgcGVyY2VudGFnZSA9IDE7IC8vIEhpZ2hlc3QgcG9zc2libGUgc28gdGhlIGZpcnN0IHRoaW5nIHdlIGdldCBpcyBiZXR0ZXIuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF4aXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHdoaWxlIChiLm92ZXJsYXBzT3Bwb3NpdGVBeGlzKGNvbnRhaW5lckJveCwgYXhpc1tpXSkgfHxcbiAgICAgICAgICAgICAoYi53aXRoaW4oY29udGFpbmVyQm94KSAmJiBiLm92ZXJsYXBzQW55KGJveFBvc2l0aW9ucykpKSB7XG4gICAgICAgIGIubW92ZShheGlzW2ldKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGZvdW5kIGEgc3BvdCB3aGVyZSB3ZSBhcmVuJ3Qgb3ZlcmxhcHBpbmcgYW55dGhpbmcuIFRoaXMgaXMgb3VyXG4gICAgICAvLyBiZXN0IHBvc2l0aW9uLlxuICAgICAgaWYgKGIud2l0aGluKGNvbnRhaW5lckJveCkpIHtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgICB9XG4gICAgICB2YXIgcCA9IGIuaW50ZXJzZWN0UGVyY2VudGFnZShjb250YWluZXJCb3gpO1xuICAgICAgLy8gSWYgd2UncmUgb3V0c2lkZSB0aGUgY29udGFpbmVyIGJveCBsZXNzIHRoZW4gd2Ugd2VyZSBvbiBvdXIgbGFzdCB0cnlcbiAgICAgIC8vIHRoZW4gcmVtZW1iZXIgdGhpcyBwb3NpdGlvbiBhcyB0aGUgYmVzdCBwb3NpdGlvbi5cbiAgICAgIGlmIChwZXJjZW50YWdlID4gcCkge1xuICAgICAgICBiZXN0UG9zaXRpb24gPSBuZXcgQm94UG9zaXRpb24oYik7XG4gICAgICAgIHBlcmNlbnRhZ2UgPSBwO1xuICAgICAgfVxuICAgICAgLy8gUmVzZXQgdGhlIGJveCBwb3NpdGlvbiB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuICAgICAgYiA9IG5ldyBCb3hQb3NpdGlvbihzcGVjaWZpZWRQb3NpdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBiZXN0UG9zaXRpb24gfHwgc3BlY2lmaWVkUG9zaXRpb247XG4gIH1cblxuICB2YXIgYm94UG9zaXRpb24gPSBuZXcgQm94UG9zaXRpb24oc3R5bGVCb3gpLFxuICAgICAgY3VlID0gc3R5bGVCb3guY3VlLFxuICAgICAgbGluZVBvcyA9IGNvbXB1dGVMaW5lUG9zKGN1ZSksXG4gICAgICBheGlzID0gW107XG5cbiAgLy8gSWYgd2UgaGF2ZSBhIGxpbmUgbnVtYmVyIHRvIGFsaWduIHRoZSBjdWUgdG8uXG4gIGlmIChjdWUuc25hcFRvTGluZXMpIHtcbiAgICB2YXIgc2l6ZTtcbiAgICBzd2l0Y2ggKGN1ZS52ZXJ0aWNhbCkge1xuICAgIGNhc2UgXCJcIjpcbiAgICAgIGF4aXMgPSBbIFwiK3lcIiwgXCIteVwiIF07XG4gICAgICBzaXplID0gXCJoZWlnaHRcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJybFwiOlxuICAgICAgYXhpcyA9IFsgXCIreFwiLCBcIi14XCIgXTtcbiAgICAgIHNpemUgPSBcIndpZHRoXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibHJcIjpcbiAgICAgIGF4aXMgPSBbIFwiLXhcIiwgXCIreFwiIF07XG4gICAgICBzaXplID0gXCJ3aWR0aFwiO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIHN0ZXAgPSBib3hQb3NpdGlvbi5saW5lSGVpZ2h0LFxuICAgICAgICBwb3NpdGlvbiA9IHN0ZXAgKiBNYXRoLnJvdW5kKGxpbmVQb3MpLFxuICAgICAgICBtYXhQb3NpdGlvbiA9IGNvbnRhaW5lckJveFtzaXplXSArIHN0ZXAsXG4gICAgICAgIGluaXRpYWxBeGlzID0gYXhpc1swXTtcblxuICAgIC8vIElmIHRoZSBzcGVjaWZpZWQgaW50aWFsIHBvc2l0aW9uIGlzIGdyZWF0ZXIgdGhlbiB0aGUgbWF4IHBvc2l0aW9uIHRoZW5cbiAgICAvLyBjbGFtcCB0aGUgYm94IHRvIHRoZSBhbW91bnQgb2Ygc3RlcHMgaXQgd291bGQgdGFrZSBmb3IgdGhlIGJveCB0b1xuICAgIC8vIHJlYWNoIHRoZSBtYXggcG9zaXRpb24uXG4gICAgaWYgKE1hdGguYWJzKHBvc2l0aW9uKSA+IG1heFBvc2l0aW9uKSB7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uIDwgMCA/IC0xIDogMTtcbiAgICAgIHBvc2l0aW9uICo9IE1hdGguY2VpbChtYXhQb3NpdGlvbiAvIHN0ZXApICogc3RlcDtcbiAgICB9XG5cbiAgICAvLyBJZiBjb21wdXRlZCBsaW5lIHBvc2l0aW9uIHJldHVybnMgbmVnYXRpdmUgdGhlbiBsaW5lIG51bWJlcnMgYXJlXG4gICAgLy8gcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdmlkZW8gaW5zdGVhZCBvZiB0aGUgdG9wLiBUaGVyZWZvcmUsIHdlXG4gICAgLy8gbmVlZCB0byBpbmNyZWFzZSBvdXIgaW5pdGlhbCBwb3NpdGlvbiBieSB0aGUgbGVuZ3RoIG9yIHdpZHRoIG9mIHRoZVxuICAgIC8vIHZpZGVvLCBkZXBlbmRpbmcgb24gdGhlIHdyaXRpbmcgZGlyZWN0aW9uLCBhbmQgcmV2ZXJzZSBvdXIgYXhpcyBkaXJlY3Rpb25zLlxuICAgIGlmIChsaW5lUG9zIDwgMCkge1xuICAgICAgcG9zaXRpb24gKz0gY3VlLnZlcnRpY2FsID09PSBcIlwiID8gY29udGFpbmVyQm94LmhlaWdodCA6IGNvbnRhaW5lckJveC53aWR0aDtcbiAgICAgIGF4aXMgPSBheGlzLnJldmVyc2UoKTtcbiAgICB9XG5cbiAgICAvLyBNb3ZlIHRoZSBib3ggdG8gdGhlIHNwZWNpZmllZCBwb3NpdGlvbi4gVGhpcyBtYXkgbm90IGJlIGl0cyBiZXN0XG4gICAgLy8gcG9zaXRpb24uXG4gICAgYm94UG9zaXRpb24ubW92ZShpbml0aWFsQXhpcywgcG9zaXRpb24pO1xuXG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBhIHBlcmNlbnRhZ2UgbGluZSB2YWx1ZSBmb3IgdGhlIGN1ZS5cbiAgICB2YXIgY2FsY3VsYXRlZFBlcmNlbnRhZ2UgPSAoYm94UG9zaXRpb24ubGluZUhlaWdodCAvIGNvbnRhaW5lckJveC5oZWlnaHQpICogMTAwO1xuXG4gICAgc3dpdGNoIChjdWUubGluZUFsaWduKSB7XG4gICAgY2FzZSBcImNlbnRlclwiOlxuICAgICAgbGluZVBvcyAtPSAoY2FsY3VsYXRlZFBlcmNlbnRhZ2UgLyAyKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgIGxpbmVQb3MgLT0gY2FsY3VsYXRlZFBlcmNlbnRhZ2U7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBBcHBseSBpbml0aWFsIGxpbmUgcG9zaXRpb24gdG8gdGhlIGN1ZSBib3guXG4gICAgc3dpdGNoIChjdWUudmVydGljYWwpIHtcbiAgICBjYXNlIFwiXCI6XG4gICAgICBzdHlsZUJveC5hcHBseVN0eWxlcyh7XG4gICAgICAgIHRvcDogc3R5bGVCb3guZm9ybWF0U3R5bGUobGluZVBvcywgXCIlXCIpXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJybFwiOlxuICAgICAgc3R5bGVCb3guYXBwbHlTdHlsZXMoe1xuICAgICAgICBsZWZ0OiBzdHlsZUJveC5mb3JtYXRTdHlsZShsaW5lUG9zLCBcIiVcIilcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImxyXCI6XG4gICAgICBzdHlsZUJveC5hcHBseVN0eWxlcyh7XG4gICAgICAgIHJpZ2h0OiBzdHlsZUJveC5mb3JtYXRTdHlsZShsaW5lUG9zLCBcIiVcIilcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgYXhpcyA9IFsgXCIreVwiLCBcIi14XCIsIFwiK3hcIiwgXCIteVwiIF07XG5cbiAgICAvLyBHZXQgdGhlIGJveCBwb3NpdGlvbiBhZ2FpbiBhZnRlciB3ZSd2ZSBhcHBsaWVkIHRoZSBzcGVjaWZpZWQgcG9zaXRpb25pbmdcbiAgICAvLyB0byBpdC5cbiAgICBib3hQb3NpdGlvbiA9IG5ldyBCb3hQb3NpdGlvbihzdHlsZUJveCk7XG4gIH1cblxuICB2YXIgYmVzdFBvc2l0aW9uID0gZmluZEJlc3RQb3NpdGlvbihib3hQb3NpdGlvbiwgYXhpcyk7XG4gIHN0eWxlQm94Lm1vdmUoYmVzdFBvc2l0aW9uLnRvQ1NTQ29tcGF0VmFsdWVzKGNvbnRhaW5lckJveCkpO1xufVxuXG5mdW5jdGlvbiBXZWJWVFQoKSB7XG4gIC8vIE5vdGhpbmdcbn1cblxuLy8gSGVscGVyIHRvIGFsbG93IHN0cmluZ3MgdG8gYmUgZGVjb2RlZCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGJpbmFyeSB1dGY4IGRhdGEuXG5XZWJWVFQuU3RyaW5nRGVjb2RlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGRlY29kZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIC0gZXhwZWN0ZWQgc3RyaW5nIGRhdGEuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlbmNvZGVVUklDb21wb25lbnQoZGF0YSkpO1xuICAgIH1cbiAgfTtcbn07XG5cbldlYlZUVC5jb252ZXJ0Q3VlVG9ET01UcmVlID0gZnVuY3Rpb24od2luZG93LCBjdWV0ZXh0KSB7XG4gIGlmICghd2luZG93IHx8ICFjdWV0ZXh0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHBhcnNlQ29udGVudCh3aW5kb3csIGN1ZXRleHQpO1xufTtcblxudmFyIEZPTlRfU0laRV9QRVJDRU5UID0gMC4wNTtcbnZhciBGT05UX1NUWUxFID0gXCJzYW5zLXNlcmlmXCI7XG52YXIgQ1VFX0JBQ0tHUk9VTkRfUEFERElORyA9IFwiMS41JVwiO1xuXG4vLyBSdW5zIHRoZSBwcm9jZXNzaW5nIG1vZGVsIG92ZXIgdGhlIGN1ZXMgYW5kIHJlZ2lvbnMgcGFzc2VkIHRvIGl0LlxuLy8gQHBhcmFtIG92ZXJsYXkgQSBibG9jayBsZXZlbCBlbGVtZW50ICh1c3VhbGx5IGEgZGl2KSB0aGF0IHRoZSBjb21wdXRlZCBjdWVzXG4vLyAgICAgICAgICAgICAgICBhbmQgcmVnaW9ucyB3aWxsIGJlIHBsYWNlZCBpbnRvLlxuV2ViVlRULnByb2Nlc3NDdWVzID0gZnVuY3Rpb24od2luZG93LCBjdWVzLCBvdmVybGF5KSB7XG4gIGlmICghd2luZG93IHx8ICFjdWVzIHx8ICFvdmVybGF5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIHByZXZpb3VzIGNoaWxkcmVuLlxuICB3aGlsZSAob3ZlcmxheS5maXJzdENoaWxkKSB7XG4gICAgb3ZlcmxheS5yZW1vdmVDaGlsZChvdmVybGF5LmZpcnN0Q2hpbGQpO1xuICB9XG5cbiAgdmFyIHBhZGRlZE92ZXJsYXkgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgcGFkZGVkT3ZlcmxheS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgcGFkZGVkT3ZlcmxheS5zdHlsZS5sZWZ0ID0gXCIwXCI7XG4gIHBhZGRlZE92ZXJsYXkuc3R5bGUucmlnaHQgPSBcIjBcIjtcbiAgcGFkZGVkT3ZlcmxheS5zdHlsZS50b3AgPSBcIjBcIjtcbiAgcGFkZGVkT3ZlcmxheS5zdHlsZS5ib3R0b20gPSBcIjBcIjtcbiAgcGFkZGVkT3ZlcmxheS5zdHlsZS5tYXJnaW4gPSBDVUVfQkFDS0dST1VORF9QQURESU5HO1xuICBvdmVybGF5LmFwcGVuZENoaWxkKHBhZGRlZE92ZXJsYXkpO1xuXG4gIC8vIERldGVybWluZSBpZiB3ZSBuZWVkIHRvIGNvbXB1dGUgdGhlIGRpc3BsYXkgc3RhdGVzIG9mIHRoZSBjdWVzLiBUaGlzIGNvdWxkXG4gIC8vIGJlIHRoZSBjYXNlIGlmIGEgY3VlJ3Mgc3RhdGUgaGFzIGJlZW4gY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBjb21wdXRhdGlvbiBvclxuICAvLyBpZiBpdCBoYXMgbm90IGJlZW4gY29tcHV0ZWQgeWV0LlxuICBmdW5jdGlvbiBzaG91bGRDb21wdXRlKGN1ZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjdWVzW2ldLmhhc0JlZW5SZXNldCB8fCAhY3Vlc1tpXS5kaXNwbGF5U3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFdlIGRvbid0IG5lZWQgdG8gcmVjb21wdXRlIHRoZSBjdWVzJyBkaXNwbGF5IHN0YXRlcy4gSnVzdCByZXVzZSB0aGVtLlxuICBpZiAoIXNob3VsZENvbXB1dGUoY3VlcykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhZGRlZE92ZXJsYXkuYXBwZW5kQ2hpbGQoY3Vlc1tpXS5kaXNwbGF5U3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYm94UG9zaXRpb25zID0gW10sXG4gICAgICBjb250YWluZXJCb3ggPSBCb3hQb3NpdGlvbi5nZXRTaW1wbGVCb3hQb3NpdGlvbihwYWRkZWRPdmVybGF5KSxcbiAgICAgIGZvbnRTaXplID0gTWF0aC5yb3VuZChjb250YWluZXJCb3guaGVpZ2h0ICogRk9OVF9TSVpFX1BFUkNFTlQgKiAxMDApIC8gMTAwO1xuICB2YXIgc3R5bGVPcHRpb25zID0ge1xuICAgIGZvbnQ6IGZvbnRTaXplICsgXCJweCBcIiArIEZPTlRfU1RZTEVcbiAgfTtcblxuICAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0eWxlQm94LCBjdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1ZSA9IGN1ZXNbaV07XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIGludGlhbCBwb3NpdGlvbiBhbmQgc3R5bGVzIG9mIHRoZSBjdWUgZGl2LlxuICAgICAgc3R5bGVCb3ggPSBuZXcgQ3VlU3R5bGVCb3god2luZG93LCBjdWUsIHN0eWxlT3B0aW9ucyk7XG4gICAgICBwYWRkZWRPdmVybGF5LmFwcGVuZENoaWxkKHN0eWxlQm94LmRpdik7XG5cbiAgICAgIC8vIE1vdmUgdGhlIGN1ZSBkaXYgdG8gaXQncyBjb3JyZWN0IGxpbmUgcG9zaXRpb24uXG4gICAgICBtb3ZlQm94VG9MaW5lUG9zaXRpb24od2luZG93LCBzdHlsZUJveCwgY29udGFpbmVyQm94LCBib3hQb3NpdGlvbnMpO1xuXG4gICAgICAvLyBSZW1lbWJlciB0aGUgY29tcHV0ZWQgZGl2IHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0byByZWNvbXB1dGUgaXQgbGF0ZXJcbiAgICAgIC8vIGlmIHdlIGRvbid0IGhhdmUgdG9vLlxuICAgICAgY3VlLmRpc3BsYXlTdGF0ZSA9IHN0eWxlQm94LmRpdjtcblxuICAgICAgYm94UG9zaXRpb25zLnB1c2goQm94UG9zaXRpb24uZ2V0U2ltcGxlQm94UG9zaXRpb24oc3R5bGVCb3gpKTtcbiAgICB9XG4gIH0pKCk7XG59O1xuXG5XZWJWVFQuUGFyc2VyID0gZnVuY3Rpb24od2luZG93LCB2dHRqcywgZGVjb2Rlcikge1xuICBpZiAoIWRlY29kZXIpIHtcbiAgICBkZWNvZGVyID0gdnR0anM7XG4gICAgdnR0anMgPSB7fTtcbiAgfVxuICBpZiAoIXZ0dGpzKSB7XG4gICAgdnR0anMgPSB7fTtcbiAgfVxuXG4gIHRoaXMud2luZG93ID0gd2luZG93O1xuICB0aGlzLnZ0dGpzID0gdnR0anM7XG4gIHRoaXMuc3RhdGUgPSBcIklOSVRJQUxcIjtcbiAgdGhpcy5idWZmZXIgPSBcIlwiO1xuICB0aGlzLmRlY29kZXIgPSBkZWNvZGVyIHx8IG5ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik7XG4gIHRoaXMucmVnaW9uTGlzdCA9IFtdO1xufTtcblxuV2ViVlRULlBhcnNlci5wcm90b3R5cGUgPSB7XG4gIC8vIElmIHRoZSBlcnJvciBpcyBhIFBhcnNpbmdFcnJvciB0aGVuIHJlcG9ydCBpdCB0byB0aGUgY29uc3VtZXIgaWZcbiAgLy8gcG9zc2libGUuIElmIGl0J3Mgbm90IGEgUGFyc2luZ0Vycm9yIHRoZW4gdGhyb3cgaXQgbGlrZSBub3JtYWwuXG4gIHJlcG9ydE9yVGhyb3dFcnJvcjogZnVuY3Rpb24oZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgUGFyc2luZ0Vycm9yKSB7XG4gICAgICB0aGlzLm9ucGFyc2luZ2Vycm9yICYmIHRoaXMub25wYXJzaW5nZXJyb3IoZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9LFxuICBwYXJzZTogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyBkYXRhIHRoZW4gd2Ugd29uJ3QgZGVjb2RlIGl0LCBidXQgd2lsbCBqdXN0IHRyeSB0byBwYXJzZVxuICAgIC8vIHdoYXRldmVyIGlzIGluIGJ1ZmZlciBhbHJlYWR5LiBUaGlzIG1heSBvY2N1ciBpbiBjaXJjdW1zdGFuY2VzLCBmb3JcbiAgICAvLyBleGFtcGxlIHdoZW4gZmx1c2goKSBpcyBjYWxsZWQuXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIC8vIFRyeSB0byBkZWNvZGUgdGhlIGRhdGEgdGhhdCB3ZSByZWNlaXZlZC5cbiAgICAgIHNlbGYuYnVmZmVyICs9IHNlbGYuZGVjb2Rlci5kZWNvZGUoZGF0YSwge3N0cmVhbTogdHJ1ZX0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbGxlY3ROZXh0TGluZSgpIHtcbiAgICAgIHZhciBidWZmZXIgPSBzZWxmLmJ1ZmZlcjtcbiAgICAgIHZhciBwb3MgPSAwO1xuICAgICAgd2hpbGUgKHBvcyA8IGJ1ZmZlci5sZW5ndGggJiYgYnVmZmVyW3Bvc10gIT09ICdcXHInICYmIGJ1ZmZlcltwb3NdICE9PSAnXFxuJykge1xuICAgICAgICArK3BvcztcbiAgICAgIH1cbiAgICAgIHZhciBsaW5lID0gYnVmZmVyLnN1YnN0cigwLCBwb3MpO1xuICAgICAgLy8gQWR2YW5jZSB0aGUgYnVmZmVyIGVhcmx5IGluIGNhc2Ugd2UgZmFpbCBiZWxvdy5cbiAgICAgIGlmIChidWZmZXJbcG9zXSA9PT0gJ1xccicpIHtcbiAgICAgICAgKytwb3M7XG4gICAgICB9XG4gICAgICBpZiAoYnVmZmVyW3Bvc10gPT09ICdcXG4nKSB7XG4gICAgICAgICsrcG9zO1xuICAgICAgfVxuICAgICAgc2VsZi5idWZmZXIgPSBidWZmZXIuc3Vic3RyKHBvcyk7XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9XG5cbiAgICAvLyAzLjQgV2ViVlRUIHJlZ2lvbiBhbmQgV2ViVlRUIHJlZ2lvbiBzZXR0aW5ncyBzeW50YXhcbiAgICBmdW5jdGlvbiBwYXJzZVJlZ2lvbihpbnB1dCkge1xuICAgICAgdmFyIHNldHRpbmdzID0gbmV3IFNldHRpbmdzKCk7XG5cbiAgICAgIHBhcnNlT3B0aW9ucyhpbnB1dCwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgc3dpdGNoIChrKSB7XG4gICAgICAgIGNhc2UgXCJpZFwiOlxuICAgICAgICAgIHNldHRpbmdzLnNldChrLCB2KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIndpZHRoXCI6XG4gICAgICAgICAgc2V0dGluZ3MucGVyY2VudChrLCB2KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImxpbmVzXCI6XG4gICAgICAgICAgc2V0dGluZ3MuaW50ZWdlcihrLCB2KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInJlZ2lvbmFuY2hvclwiOlxuICAgICAgICBjYXNlIFwidmlld3BvcnRhbmNob3JcIjpcbiAgICAgICAgICB2YXIgeHkgPSB2LnNwbGl0KCcsJyk7XG4gICAgICAgICAgaWYgKHh5Lmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFdlIGhhdmUgdG8gbWFrZSBzdXJlIGJvdGggeCBhbmQgeSBwYXJzZSwgc28gdXNlIGEgdGVtcG9yYXJ5XG4gICAgICAgICAgLy8gc2V0dGluZ3Mgb2JqZWN0IGhlcmUuXG4gICAgICAgICAgdmFyIGFuY2hvciA9IG5ldyBTZXR0aW5ncygpO1xuICAgICAgICAgIGFuY2hvci5wZXJjZW50KFwieFwiLCB4eVswXSk7XG4gICAgICAgICAgYW5jaG9yLnBlcmNlbnQoXCJ5XCIsIHh5WzFdKTtcbiAgICAgICAgICBpZiAoIWFuY2hvci5oYXMoXCJ4XCIpIHx8ICFhbmNob3IuaGFzKFwieVwiKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldHRpbmdzLnNldChrICsgXCJYXCIsIGFuY2hvci5nZXQoXCJ4XCIpKTtcbiAgICAgICAgICBzZXR0aW5ncy5zZXQoayArIFwiWVwiLCBhbmNob3IuZ2V0KFwieVwiKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzY3JvbGxcIjpcbiAgICAgICAgICBzZXR0aW5ncy5hbHQoaywgdiwgW1widXBcIl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9LCAvPS8sIC9cXHMvKTtcblxuICAgICAgLy8gQ3JlYXRlIHRoZSByZWdpb24sIHVzaW5nIGRlZmF1bHQgdmFsdWVzIGZvciBhbnkgdmFsdWVzIHRoYXQgd2VyZSBub3RcbiAgICAgIC8vIHNwZWNpZmllZC5cbiAgICAgIGlmIChzZXR0aW5ncy5oYXMoXCJpZFwiKSkge1xuICAgICAgICB2YXIgcmVnaW9uID0gbmV3IChzZWxmLnZ0dGpzLlZUVFJlZ2lvbiB8fCBzZWxmLndpbmRvdy5WVFRSZWdpb24pKCk7XG4gICAgICAgIHJlZ2lvbi53aWR0aCA9IHNldHRpbmdzLmdldChcIndpZHRoXCIsIDEwMCk7XG4gICAgICAgIHJlZ2lvbi5saW5lcyA9IHNldHRpbmdzLmdldChcImxpbmVzXCIsIDMpO1xuICAgICAgICByZWdpb24ucmVnaW9uQW5jaG9yWCA9IHNldHRpbmdzLmdldChcInJlZ2lvbmFuY2hvclhcIiwgMCk7XG4gICAgICAgIHJlZ2lvbi5yZWdpb25BbmNob3JZID0gc2V0dGluZ3MuZ2V0KFwicmVnaW9uYW5jaG9yWVwiLCAxMDApO1xuICAgICAgICByZWdpb24udmlld3BvcnRBbmNob3JYID0gc2V0dGluZ3MuZ2V0KFwidmlld3BvcnRhbmNob3JYXCIsIDApO1xuICAgICAgICByZWdpb24udmlld3BvcnRBbmNob3JZID0gc2V0dGluZ3MuZ2V0KFwidmlld3BvcnRhbmNob3JZXCIsIDEwMCk7XG4gICAgICAgIHJlZ2lvbi5zY3JvbGwgPSBzZXR0aW5ncy5nZXQoXCJzY3JvbGxcIiwgXCJcIik7XG4gICAgICAgIC8vIFJlZ2lzdGVyIHRoZSByZWdpb24uXG4gICAgICAgIHNlbGYub25yZWdpb24gJiYgc2VsZi5vbnJlZ2lvbihyZWdpb24pO1xuICAgICAgICAvLyBSZW1lbWJlciB0aGUgVlRUUmVnaW9uIGZvciBsYXRlciBpbiBjYXNlIHdlIHBhcnNlIGFueSBWVFRDdWVzIHRoYXRcbiAgICAgICAgLy8gcmVmZXJlbmNlIGl0LlxuICAgICAgICBzZWxmLnJlZ2lvbkxpc3QucHVzaCh7XG4gICAgICAgICAgaWQ6IHNldHRpbmdzLmdldChcImlkXCIpLFxuICAgICAgICAgIHJlZ2lvbjogcmVnaW9uXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRyYWZ0LXBhbnRvcy1odHRwLWxpdmUtc3RyZWFtaW5nLTIwXG4gICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LXBhbnRvcy1odHRwLWxpdmUtc3RyZWFtaW5nLTIwI3NlY3Rpb24tMy41XG4gICAgLy8gMy41IFdlYlZUVFxuICAgIGZ1bmN0aW9uIHBhcnNlVGltZXN0YW1wTWFwKGlucHV0KSB7XG4gICAgICB2YXIgc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3MoKTtcblxuICAgICAgcGFyc2VPcHRpb25zKGlucHV0LCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgIHN3aXRjaChrKSB7XG4gICAgICAgIGNhc2UgXCJNUEVHVFwiOlxuICAgICAgICAgIHNldHRpbmdzLmludGVnZXIoayArICdTJywgdik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJMT0NBXCI6XG4gICAgICAgICAgc2V0dGluZ3Muc2V0KGsgKyAnTCcsIHBhcnNlVGltZVN0YW1wKHYpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSwgL1teXFxkXTovLCAvLC8pO1xuXG4gICAgICBzZWxmLm9udGltZXN0YW1wbWFwICYmIHNlbGYub250aW1lc3RhbXBtYXAoe1xuICAgICAgICBcIk1QRUdUU1wiOiBzZXR0aW5ncy5nZXQoXCJNUEVHVFNcIiksXG4gICAgICAgIFwiTE9DQUxcIjogc2V0dGluZ3MuZ2V0KFwiTE9DQUxcIilcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIDMuMiBXZWJWVFQgbWV0YWRhdGEgaGVhZGVyIHN5bnRheFxuICAgIGZ1bmN0aW9uIHBhcnNlSGVhZGVyKGlucHV0KSB7XG4gICAgICBpZiAoaW5wdXQubWF0Y2goL1gtVElNRVNUQU1QLU1BUC8pKSB7XG4gICAgICAgIC8vIFRoaXMgbGluZSBjb250YWlucyBITFMgWC1USU1FU1RBTVAtTUFQIG1ldGFkYXRhXG4gICAgICAgIHBhcnNlT3B0aW9ucyhpbnB1dCwgZnVuY3Rpb24oaywgdikge1xuICAgICAgICAgIHN3aXRjaChrKSB7XG4gICAgICAgICAgY2FzZSBcIlgtVElNRVNUQU1QLU1BUFwiOlxuICAgICAgICAgICAgcGFyc2VUaW1lc3RhbXBNYXAodik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0sIC89Lyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZU9wdGlvbnMoaW5wdXQsIGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgICAgICAgc3dpdGNoIChrKSB7XG4gICAgICAgICAgY2FzZSBcIlJlZ2lvblwiOlxuICAgICAgICAgICAgLy8gMy4zIFdlYlZUVCByZWdpb24gbWV0YWRhdGEgaGVhZGVyIHN5bnRheFxuICAgICAgICAgICAgcGFyc2VSZWdpb24odik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0sIC86Lyk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyA1LjEgV2ViVlRUIGZpbGUgcGFyc2luZy5cbiAgICB0cnkge1xuICAgICAgdmFyIGxpbmU7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gXCJJTklUSUFMXCIpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3Qgc3RhcnQgcGFyc2luZyB1bnRpbCB3ZSBoYXZlIHRoZSBmaXJzdCBsaW5lLlxuICAgICAgICBpZiAoIS9cXHJcXG58XFxuLy50ZXN0KHNlbGYuYnVmZmVyKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgbGluZSA9IGNvbGxlY3ROZXh0TGluZSgpO1xuXG4gICAgICAgIHZhciBtID0gbGluZS5tYXRjaCgvXldFQlZUVChbIFxcdF0uKik/JC8pO1xuICAgICAgICBpZiAoIW0gfHwgIW1bMF0pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUGFyc2luZ0Vycm9yKFBhcnNpbmdFcnJvci5FcnJvcnMuQmFkU2lnbmF0dXJlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuc3RhdGUgPSBcIkhFQURFUlwiO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWxyZWFkeUNvbGxlY3RlZExpbmUgPSBmYWxzZTtcbiAgICAgIHdoaWxlIChzZWxmLmJ1ZmZlcikge1xuICAgICAgICAvLyBXZSBjYW4ndCBwYXJzZSBhIGxpbmUgdW50aWwgd2UgaGF2ZSB0aGUgZnVsbCBsaW5lLlxuICAgICAgICBpZiAoIS9cXHJcXG58XFxuLy50ZXN0KHNlbGYuYnVmZmVyKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhbHJlYWR5Q29sbGVjdGVkTGluZSkge1xuICAgICAgICAgIGxpbmUgPSBjb2xsZWN0TmV4dExpbmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbHJlYWR5Q29sbGVjdGVkTGluZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChzZWxmLnN0YXRlKSB7XG4gICAgICAgIGNhc2UgXCJIRUFERVJcIjpcbiAgICAgICAgICAvLyAxMy0xOCAtIEFsbG93IGEgaGVhZGVyIChtZXRhZGF0YSkgdW5kZXIgdGhlIFdFQlZUVCBsaW5lLlxuICAgICAgICAgIGlmICgvOi8udGVzdChsaW5lKSkge1xuICAgICAgICAgICAgcGFyc2VIZWFkZXIobGluZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICghbGluZSkge1xuICAgICAgICAgICAgLy8gQW4gZW1wdHkgbGluZSB0ZXJtaW5hdGVzIHRoZSBoZWFkZXIgYW5kIHN0YXJ0cyB0aGUgYm9keSAoY3VlcykuXG4gICAgICAgICAgICBzZWxmLnN0YXRlID0gXCJJRFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBcIk5PVEVcIjpcbiAgICAgICAgICAvLyBJZ25vcmUgTk9URSBibG9ja3MuXG4gICAgICAgICAgaWYgKCFsaW5lKSB7XG4gICAgICAgICAgICBzZWxmLnN0YXRlID0gXCJJRFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBcIklEXCI6XG4gICAgICAgICAgLy8gQ2hlY2sgZm9yIHRoZSBzdGFydCBvZiBOT1RFIGJsb2Nrcy5cbiAgICAgICAgICBpZiAoL15OT1RFKCR8WyBcXHRdKS8udGVzdChsaW5lKSkge1xuICAgICAgICAgICAgc2VsZi5zdGF0ZSA9IFwiTk9URVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIDE5LTI5IC0gQWxsb3cgYW55IG51bWJlciBvZiBsaW5lIHRlcm1pbmF0b3JzLCB0aGVuIGluaXRpYWxpemUgbmV3IGN1ZSB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCFsaW5lKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi5jdWUgPSBuZXcgKHNlbGYudnR0anMuVlRUQ3VlIHx8IHNlbGYud2luZG93LlZUVEN1ZSkoMCwgMCwgXCJcIik7XG4gICAgICAgICAgLy8gU2FmYXJpIHN0aWxsIHVzZXMgdGhlIG9sZCBtaWRkbGUgdmFsdWUgYW5kIHdvbid0IGFjY2VwdCBjZW50ZXJcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VsZi5jdWUuYWxpZ24gPSBcImNlbnRlclwiO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHNlbGYuY3VlLmFsaWduID0gXCJtaWRkbGVcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi5zdGF0ZSA9IFwiQ1VFXCI7XG4gICAgICAgICAgLy8gMzAtMzkgLSBDaGVjayBpZiBzZWxmIGxpbmUgY29udGFpbnMgYW4gb3B0aW9uYWwgaWRlbnRpZmllciBvciB0aW1pbmcgZGF0YS5cbiAgICAgICAgICBpZiAobGluZS5pbmRleE9mKFwiLS0+XCIpID09PSAtMSkge1xuICAgICAgICAgICAgc2VsZi5jdWUuaWQgPSBsaW5lO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFByb2Nlc3MgbGluZSBhcyBzdGFydCBvZiBhIGN1ZS5cbiAgICAgICAgICAvKmZhbGxzIHRocm91Z2gqL1xuICAgICAgICBjYXNlIFwiQ1VFXCI6XG4gICAgICAgICAgLy8gNDAgLSBDb2xsZWN0IGN1ZSB0aW1pbmdzIGFuZCBzZXR0aW5ncy5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGFyc2VDdWUobGluZSwgc2VsZi5jdWUsIHNlbGYucmVnaW9uTGlzdCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgc2VsZi5yZXBvcnRPclRocm93RXJyb3IoZSk7XG4gICAgICAgICAgICAvLyBJbiBjYXNlIG9mIGFuIGVycm9yIGlnbm9yZSByZXN0IG9mIHRoZSBjdWUuXG4gICAgICAgICAgICBzZWxmLmN1ZSA9IG51bGw7XG4gICAgICAgICAgICBzZWxmLnN0YXRlID0gXCJCQURDVUVcIjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLnN0YXRlID0gXCJDVUVURVhUXCI7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgXCJDVUVURVhUXCI6XG4gICAgICAgICAgdmFyIGhhc1N1YnN0cmluZyA9IGxpbmUuaW5kZXhPZihcIi0tPlwiKSAhPT0gLTE7XG4gICAgICAgICAgLy8gMzQgLSBJZiB3ZSBoYXZlIGFuIGVtcHR5IGxpbmUgdGhlbiByZXBvcnQgdGhlIGN1ZS5cbiAgICAgICAgICAvLyAzNSAtIElmIHdlIGhhdmUgdGhlIHNwZWNpYWwgc3Vic3RyaW5nICctLT4nIHRoZW4gcmVwb3J0IHRoZSBjdWUsXG4gICAgICAgICAgLy8gYnV0IGRvIG5vdCBjb2xsZWN0IHRoZSBsaW5lIGFzIHdlIG5lZWQgdG8gcHJvY2VzcyB0aGUgY3VycmVudFxuICAgICAgICAgIC8vIG9uZSBhcyBhIG5ldyBjdWUuXG4gICAgICAgICAgaWYgKCFsaW5lIHx8IGhhc1N1YnN0cmluZyAmJiAoYWxyZWFkeUNvbGxlY3RlZExpbmUgPSB0cnVlKSkge1xuICAgICAgICAgICAgLy8gV2UgYXJlIGRvbmUgcGFyc2luZyBzZWxmIGN1ZS5cbiAgICAgICAgICAgIHNlbGYub25jdWUgJiYgc2VsZi5vbmN1ZShzZWxmLmN1ZSk7XG4gICAgICAgICAgICBzZWxmLmN1ZSA9IG51bGw7XG4gICAgICAgICAgICBzZWxmLnN0YXRlID0gXCJJRFwiO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWxmLmN1ZS50ZXh0KSB7XG4gICAgICAgICAgICBzZWxmLmN1ZS50ZXh0ICs9IFwiXFxuXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYuY3VlLnRleHQgKz0gbGluZS5yZXBsYWNlKC9cXHUyMDI4L2csICdcXG4nKS5yZXBsYWNlKC91MjAyOS9nLCAnXFxuJyk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgXCJCQURDVUVcIjogLy8gQkFEQ1VFXG4gICAgICAgICAgLy8gNTQtNjIgLSBDb2xsZWN0IGFuZCBkaXNjYXJkIHRoZSByZW1haW5pbmcgY3VlLlxuICAgICAgICAgIGlmICghbGluZSkge1xuICAgICAgICAgICAgc2VsZi5zdGF0ZSA9IFwiSURcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBzZWxmLnJlcG9ydE9yVGhyb3dFcnJvcihlKTtcblxuICAgICAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBwYXJzaW5nIGEgY3VlLCByZXBvcnQgd2hhdCB3ZSBoYXZlLlxuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFwiQ1VFVEVYVFwiICYmIHNlbGYuY3VlICYmIHNlbGYub25jdWUpIHtcbiAgICAgICAgc2VsZi5vbmN1ZShzZWxmLmN1ZSk7XG4gICAgICB9XG4gICAgICBzZWxmLmN1ZSA9IG51bGw7XG4gICAgICAvLyBFbnRlciBCQURXRUJWVFQgc3RhdGUgaWYgaGVhZGVyIHdhcyBub3QgcGFyc2VkIGNvcnJlY3RseSBvdGhlcndpc2VcbiAgICAgIC8vIGFub3RoZXIgZXhjZXB0aW9uIG9jY3VycmVkIHNvIGVudGVyIEJBRENVRSBzdGF0ZS5cbiAgICAgIHNlbGYuc3RhdGUgPSBzZWxmLnN0YXRlID09PSBcIklOSVRJQUxcIiA/IFwiQkFEV0VCVlRUXCIgOiBcIkJBRENVRVwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZmx1c2g6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEZpbmlzaCBkZWNvZGluZyB0aGUgc3RyZWFtLlxuICAgICAgc2VsZi5idWZmZXIgKz0gc2VsZi5kZWNvZGVyLmRlY29kZSgpO1xuICAgICAgLy8gU3ludGhlc2l6ZSB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGN1ZSBvciByZWdpb24uXG4gICAgICBpZiAoc2VsZi5jdWUgfHwgc2VsZi5zdGF0ZSA9PT0gXCJIRUFERVJcIikge1xuICAgICAgICBzZWxmLmJ1ZmZlciArPSBcIlxcblxcblwiO1xuICAgICAgICBzZWxmLnBhcnNlKCk7XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSd2ZSBmbHVzaGVkLCBwYXJzZWQsIGFuZCB3ZSdyZSBzdGlsbCBvbiB0aGUgSU5JVElBTCBzdGF0ZSB0aGVuXG4gICAgICAvLyB0aGF0IG1lYW5zIHdlIGRvbid0IGhhdmUgZW5vdWdoIG9mIHRoZSBzdHJlYW0gdG8gcGFyc2UgdGhlIGZpcnN0XG4gICAgICAvLyBsaW5lLlxuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFwiSU5JVElBTFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzaW5nRXJyb3IoUGFyc2luZ0Vycm9yLkVycm9ycy5CYWRTaWduYXR1cmUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgc2VsZi5yZXBvcnRPclRocm93RXJyb3IoZSk7XG4gICAgfVxuICAgIHNlbGYub25mbHVzaCAmJiBzZWxmLm9uZmx1c2goKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJWVFQ7XG4iLCIvKiEgQG5hbWUgQHZpZGVvanMvdmhzLXV0aWxzIEB2ZXJzaW9uIDIuMi4xIEBsaWNlbnNlIE1JVCAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgTVBFR1VSTF9SRUdFWCA9IC9eKGF1ZGlvfHZpZGVvfGFwcGxpY2F0aW9uKVxcLyh4LXx2bmRcXC5hcHBsZVxcLik/bXBlZ3VybC9pO1xudmFyIERBU0hfUkVHRVggPSAvXmFwcGxpY2F0aW9uXFwvZGFzaFxcK3htbC9pO1xuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgZGVzY3JpYmVzIHRoZSB0eXBlIG9mIHNvdXJjZSBiYXNlZCBvbiBhIHZpZGVvIHNvdXJjZSBvYmplY3Qnc1xuICogbWVkaWEgdHlwZS5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL2Rldi53My5vcmcvaHRtbDUvcGYtc3VtbWFyeS92aWRlby5odG1sI2RvbS1zb3VyY2UtdHlwZXxTb3VyY2UgVHlwZX1cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogICAgICAgIFZpZGVvIHNvdXJjZSBvYmplY3QgbWVkaWEgdHlwZVxuICogQHJldHVybiB7KCdobHMnfCdkYXNoJ3wndmhzLWpzb24nfG51bGwpfVxuICogICAgICAgICBWSFMgc291cmNlIHR5cGUgc3RyaW5nXG4gKi9cblxudmFyIHNpbXBsZVR5cGVGcm9tU291cmNlVHlwZSA9IGZ1bmN0aW9uIHNpbXBsZVR5cGVGcm9tU291cmNlVHlwZSh0eXBlKSB7XG4gIGlmIChNUEVHVVJMX1JFR0VYLnRlc3QodHlwZSkpIHtcbiAgICByZXR1cm4gJ2hscyc7XG4gIH1cblxuICBpZiAoREFTSF9SRUdFWC50ZXN0KHR5cGUpKSB7XG4gICAgcmV0dXJuICdkYXNoJztcbiAgfSAvLyBEZW5vdGVzIHRoZSBzcGVjaWFsIGNhc2Ugb2YgYSBtYW5pZmVzdCBvYmplY3QgcGFzc2VkIHRvIGh0dHAtc3RyZWFtaW5nIGluc3RlYWQgb2YgYVxuICAvLyBzb3VyY2UgVVJMLlxuICAvL1xuICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVkaWFfdHlwZSBmb3IgZGV0YWlscyBvbiBzcGVjaWZ5aW5nIG1lZGlhIHR5cGVzLlxuICAvL1xuICAvLyBJbiB0aGlzIGNhc2UsIHZuZCBzdGFuZHMgZm9yIHZlbmRvciwgdmlkZW8uanMgZm9yIHRoZSBvcmdhbml6YXRpb24sIFZIUyBmb3IgdGhpc1xuICAvLyBwcm9qZWN0LCBhbmQgdGhlICtqc29uIHN1ZmZpeCBpZGVudGlmaWVzIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIG1lZGlhIHR5cGUuXG5cblxuICBpZiAodHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3ZuZC52aWRlb2pzLnZocytqc29uJykge1xuICAgIHJldHVybiAndmhzLWpzb24nO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnRzLnNpbXBsZVR5cGVGcm9tU291cmNlVHlwZSA9IHNpbXBsZVR5cGVGcm9tU291cmNlVHlwZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgdnR0LmpzIENvbnRyaWJ1dG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIHNjcm9sbFNldHRpbmcgPSB7XG4gIFwiXCI6IHRydWUsXG4gIFwidXBcIjogdHJ1ZVxufTtcblxuZnVuY3Rpb24gZmluZFNjcm9sbFNldHRpbmcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgc2Nyb2xsID0gc2Nyb2xsU2V0dGluZ1t2YWx1ZS50b0xvd2VyQ2FzZSgpXTtcbiAgcmV0dXJuIHNjcm9sbCA/IHZhbHVlLnRvTG93ZXJDYXNlKCkgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZFBlcmNlbnRWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmICh2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDEwMCk7XG59XG5cbi8vIFZUVFJlZ2lvbiBzaGltIGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3dlYnZ0dC8jdnR0cmVnaW9uLWludGVyZmFjZVxuZnVuY3Rpb24gVlRUUmVnaW9uKCkge1xuICB2YXIgX3dpZHRoID0gMTAwO1xuICB2YXIgX2xpbmVzID0gMztcbiAgdmFyIF9yZWdpb25BbmNob3JYID0gMDtcbiAgdmFyIF9yZWdpb25BbmNob3JZID0gMTAwO1xuICB2YXIgX3ZpZXdwb3J0QW5jaG9yWCA9IDA7XG4gIHZhciBfdmlld3BvcnRBbmNob3JZID0gMTAwO1xuICB2YXIgX3Njcm9sbCA9IFwiXCI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgIFwid2lkdGhcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfd2lkdGg7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoIWlzVmFsaWRQZXJjZW50VmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2lkdGggbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX3dpZHRoID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBcImxpbmVzXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2xpbmVzO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJMaW5lcyBtdXN0IGJlIHNldCB0byBhIG51bWJlci5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX2xpbmVzID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBcInJlZ2lvbkFuY2hvcllcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfcmVnaW9uQW5jaG9yWTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNWYWxpZFBlcmNlbnRWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWdpb25BbmNob3JYIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9yZWdpb25BbmNob3JZID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBcInJlZ2lvbkFuY2hvclhcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfcmVnaW9uQW5jaG9yWDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmKCFpc1ZhbGlkUGVyY2VudFZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZ2lvbkFuY2hvclkgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX3JlZ2lvbkFuY2hvclggPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFwidmlld3BvcnRBbmNob3JZXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3ZpZXdwb3J0QW5jaG9yWTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNWYWxpZFBlcmNlbnRWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWaWV3cG9ydEFuY2hvclkgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX3ZpZXdwb3J0QW5jaG9yWSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJ2aWV3cG9ydEFuY2hvclhcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdmlld3BvcnRBbmNob3JYO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkUGVyY2VudFZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZpZXdwb3J0QW5jaG9yWCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTAwLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBfdmlld3BvcnRBbmNob3JYID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBcInNjcm9sbFwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zY3JvbGw7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgc2V0dGluZyA9IGZpbmRTY3JvbGxTZXR0aW5nKHZhbHVlKTtcbiAgICAgICAgLy8gSGF2ZSB0byBjaGVjayBmb3IgZmFsc2UgYXMgYW4gZW1wdHkgc3RyaW5nIGlzIGEgbGVnYWwgdmFsdWUuXG4gICAgICAgIGlmIChzZXR0aW5nID09PSBmYWxzZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlNjcm9sbDogYW4gaW52YWxpZCBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkLlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfc2Nyb2xsID0gc2V0dGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVlRUUmVnaW9uO1xuIiwiLyohIEBuYW1lIEB2aWRlb2pzL3Zocy11dGlscyBAdmVyc2lvbiAyLjIuMSBAbGljZW5zZSBNSVQgKi9cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRvVWludDggPSBmdW5jdGlvbiB0b1VpbnQ4KGJ5dGVzKSB7XG4gIHJldHVybiBieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBieXRlcyA6IG5ldyBVaW50OEFycmF5KGJ5dGVzICYmIGJ5dGVzLmJ1ZmZlciB8fCBieXRlcywgYnl0ZXMgJiYgYnl0ZXMuYnl0ZU9mZnNldCB8fCAwLCBieXRlcyAmJiBieXRlcy5ieXRlTGVuZ3RoIHx8IDApO1xufTtcbnZhciBieXRlc1RvU3RyaW5nID0gZnVuY3Rpb24gYnl0ZXNUb1N0cmluZyhieXRlcykge1xuICBpZiAoIWJ5dGVzKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgYnl0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChieXRlcyk7XG4gIHZhciBzdHJpbmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHRvVWludDgoYnl0ZXMpKTtcblxuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHN0cmluZykpO1xuICB9IGNhdGNoIChlKSB7Ly8gaWYgZGVjb2RlVVJJQ29tcG9uZW50L2VzY2FwZSBmYWlscywgd2UgYXJlIGRlYWxpbmcgd2l0aCBwYXJ0aWFsXG4gICAgLy8gb3IgZnVsbCBub24gc3RyaW5nIGRhdGEuIEp1c3QgcmV0dXJuIHRoZSBwb3RlbnRpYWxseSBnYXJibGVkIHN0cmluZy5cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG52YXIgaWQzU2l6ZSA9IGZ1bmN0aW9uIGlkM1NpemUoYnl0ZXMsIG9mZnNldCkge1xuICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHtcbiAgICBvZmZzZXQgPSAwO1xuICB9XG5cbiAgYnl0ZXMgPSB0b1VpbnQ4KGJ5dGVzKTtcbiAgdmFyIHJldHVyblNpemUgPSBieXRlc1tvZmZzZXQgKyA2XSA8PCAyMSB8IGJ5dGVzW29mZnNldCArIDddIDw8IDE0IHwgYnl0ZXNbb2Zmc2V0ICsgOF0gPDwgNyB8IGJ5dGVzW29mZnNldCArIDldO1xuICB2YXIgZmxhZ3MgPSBieXRlc1tvZmZzZXQgKyA1XTtcbiAgdmFyIGZvb3RlclByZXNlbnQgPSAoZmxhZ3MgJiAxNikgPj4gNDtcblxuICBpZiAoZm9vdGVyUHJlc2VudCkge1xuICAgIHJldHVybiByZXR1cm5TaXplICsgMjA7XG4gIH1cblxuICByZXR1cm4gcmV0dXJuU2l6ZSArIDEwO1xufTtcbnZhciBnZXRJZDNPZmZzZXQgPSBmdW5jdGlvbiBnZXRJZDNPZmZzZXQoYnl0ZXMsIG9mZnNldCkge1xuICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHtcbiAgICBvZmZzZXQgPSAwO1xuICB9XG5cbiAgYnl0ZXMgPSB0b1VpbnQ4KGJ5dGVzKTtcblxuICBpZiAoYnl0ZXMubGVuZ3RoIC0gb2Zmc2V0IDwgMTAgfHwgYnl0ZXNUb1N0cmluZyhieXRlcy5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIDMpKSAhPT0gJ0lEMycpIHtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgb2Zmc2V0ICs9IGlkM1NpemUoYnl0ZXMsIG9mZnNldCk7IC8vIHJlY3Vyc2l2ZSBjaGVjayBmb3IgaWQzIHRhZ3MgYXMgc29tZSBmaWxlc1xuICAvLyBoYXZlIG11bHRpcGxlIElEMyB0YWcgc2VjdGlvbnMgZXZlbiB0aG91Z2hcbiAgLy8gdGhleSBzaG91bGQgbm90LlxuXG4gIHJldHVybiBnZXRJZDNPZmZzZXQoYnl0ZXMsIG9mZnNldCk7XG59O1xudmFyIGlzTGlrZWx5ID0ge1xuICBhYWM6IGZ1bmN0aW9uIGFhYyhieXRlcykge1xuICAgIHZhciBvZmZzZXQgPSBnZXRJZDNPZmZzZXQoYnl0ZXMpO1xuICAgIHJldHVybiBieXRlcy5sZW5ndGggPj0gb2Zmc2V0ICsgMiAmJiAoYnl0ZXNbb2Zmc2V0XSAmIDB4RkYpID09PSAweEZGICYmIChieXRlc1tvZmZzZXQgKyAxXSAmIDB4RTApID09PSAweEUwICYmIChieXRlc1tvZmZzZXQgKyAxXSAmIDB4MTYpID09PSAweDEwO1xuICB9LFxuICBtcDM6IGZ1bmN0aW9uIG1wMyhieXRlcykge1xuICAgIHZhciBvZmZzZXQgPSBnZXRJZDNPZmZzZXQoYnl0ZXMpO1xuICAgIHJldHVybiBieXRlcy5sZW5ndGggPj0gb2Zmc2V0ICsgMiAmJiAoYnl0ZXNbb2Zmc2V0XSAmIDB4RkYpID09PSAweEZGICYmIChieXRlc1tvZmZzZXQgKyAxXSAmIDB4RTApID09PSAweEUwICYmIChieXRlc1tvZmZzZXQgKyAxXSAmIDB4MDYpID09PSAweDAyO1xuICB9LFxuICB3ZWJtOiBmdW5jdGlvbiB3ZWJtKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGJ5dGVzLmxlbmd0aCA+PSA0ICYmIChieXRlc1swXSAmIDB4RkYpID09PSAweDFBICYmIChieXRlc1sxXSAmIDB4RkYpID09PSAweDQ1ICYmIChieXRlc1syXSAmIDB4RkYpID09PSAweERGICYmIChieXRlc1szXSAmIDB4RkYpID09PSAweEEzO1xuICB9LFxuICBtcDQ6IGZ1bmN0aW9uIG1wNChieXRlcykge1xuICAgIHJldHVybiBieXRlcy5sZW5ndGggPj0gOCAmJiAvXihmfHMpdHlwJC8udGVzdChieXRlc1RvU3RyaW5nKGJ5dGVzLnN1YmFycmF5KDQsIDgpKSkgJiYgLy8gbm90IDNncCBkYXRhXG4gICAgIS9eZnR5cDNnJC8udGVzdChieXRlc1RvU3RyaW5nKGJ5dGVzLnN1YmFycmF5KDQsIDEwKSkpO1xuICB9LFxuICAnM2dwJzogZnVuY3Rpb24gZ3AoYnl0ZXMpIHtcbiAgICByZXR1cm4gYnl0ZXMubGVuZ3RoID49IDEwICYmIC9eZnR5cDNnJC8udGVzdChieXRlc1RvU3RyaW5nKGJ5dGVzLnN1YmFycmF5KDQsIDEwKSkpO1xuICB9LFxuICB0czogZnVuY3Rpb24gdHMoYnl0ZXMpIHtcbiAgICBpZiAoYnl0ZXMubGVuZ3RoIDwgMTg5ICYmIGJ5dGVzLmxlbmd0aCA+PSAxKSB7XG4gICAgICByZXR1cm4gYnl0ZXNbMF0gPT09IDB4NDc7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAwOyAvLyBjaGVjayB0aGUgZmlyc3QgMzc2IGJ5dGVzIGZvciB0d28gbWF0Y2hpbmcgc3luYyBieXRlc1xuXG4gICAgd2hpbGUgKGkgKyAxODggPCBieXRlcy5sZW5ndGggJiYgaSA8IDE4OCkge1xuICAgICAgaWYgKGJ5dGVzW2ldID09PSAweDQ3ICYmIGJ5dGVzW2kgKyAxODhdID09PSAweDQ3KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBmbGFjOiBmdW5jdGlvbiBmbGFjKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGJ5dGVzLmxlbmd0aCA+PSA0ICYmIC9eZkxhQyQvLnRlc3QoYnl0ZXNUb1N0cmluZyhieXRlcy5zdWJhcnJheSgwLCA0KSkpO1xuICB9LFxuICBvZ2c6IGZ1bmN0aW9uIG9nZyhieXRlcykge1xuICAgIHJldHVybiBieXRlcy5sZW5ndGggPj0gNCAmJiAvXk9nZ1MkLy50ZXN0KGJ5dGVzVG9TdHJpbmcoYnl0ZXMuc3ViYXJyYXkoMCwgNCkpKTtcbiAgfVxufTsgLy8gZ2V0IGFsbCB0aGUgaXNMaWtlbHkgZnVuY3Rpb25zXG4vLyBidXQgbWFrZSBzdXJlICd0cycgaXMgYXQgdGhlIGJvdHRvbVxuLy8gYXMgaXQgaXMgdGhlIGxlYXN0IHNwZWNpZmljXG5cbnZhciBpc0xpa2VseVR5cGVzID0gT2JqZWN0LmtleXMoaXNMaWtlbHkpIC8vIHJlbW92ZSB0c1xuLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICByZXR1cm4gdCAhPT0gJ3RzJztcbn0pIC8vIGFkZCBpdCBiYWNrIHRvIHRoZSBib3R0b21cbi5jb25jYXQoJ3RzJyk7IC8vIG1ha2Ugc3VyZSB3ZSBhcmUgZGVhbGluZyB3aXRoIHVpbnQ4IGRhdGEuXG5cbmlzTGlrZWx5VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICB2YXIgaXNMaWtlbHlGbiA9IGlzTGlrZWx5W3R5cGVdO1xuXG4gIGlzTGlrZWx5W3R5cGVdID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGlzTGlrZWx5Rm4odG9VaW50OChieXRlcykpO1xuICB9O1xufSk7IC8vIEEgdXNlZnVsIGxpc3Qgb2YgZmlsZSBzaWduYXR1cmVzIGNhbiBiZSBmb3VuZCBoZXJlXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX2ZpbGVfc2lnbmF0dXJlc1xuXG52YXIgZGV0ZWN0Q29udGFpbmVyRm9yQnl0ZXMgPSBmdW5jdGlvbiBkZXRlY3RDb250YWluZXJGb3JCeXRlcyhieXRlcykge1xuICBieXRlcyA9IHRvVWludDgoYnl0ZXMpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaXNMaWtlbHlUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0eXBlID0gaXNMaWtlbHlUeXBlc1tpXTtcblxuICAgIGlmIChpc0xpa2VseVt0eXBlXShieXRlcykpIHtcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn07IC8vIGZtcDQgaXMgbm90IGEgY29udGFpbmVyXG5cbnZhciBpc0xpa2VseUZtcDRNZWRpYVNlZ21lbnQgPSBmdW5jdGlvbiBpc0xpa2VseUZtcDRNZWRpYVNlZ21lbnQoYnl0ZXMpIHtcbiAgYnl0ZXMgPSB0b1VpbnQ4KGJ5dGVzKTtcbiAgdmFyIGkgPSAwO1xuXG4gIHdoaWxlIChpIDwgYnl0ZXMubGVuZ3RoKSB7XG4gICAgdmFyIHNpemUgPSAoYnl0ZXNbaV0gPDwgMjQgfCBieXRlc1tpICsgMV0gPDwgMTYgfCBieXRlc1tpICsgMl0gPDwgOCB8IGJ5dGVzW2kgKyAzXSkgPj4+IDA7XG4gICAgdmFyIHR5cGUgPSBieXRlc1RvU3RyaW5nKGJ5dGVzLnN1YmFycmF5KGkgKyA0LCBpICsgOCkpO1xuXG4gICAgaWYgKHR5cGUgPT09ICdtb29mJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHNpemUgPT09IDAgfHwgc2l6ZSArIGkgPiBieXRlcy5sZW5ndGgpIHtcbiAgICAgIGkgPSBieXRlcy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGkgKz0gc2l6ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnRzLmRldGVjdENvbnRhaW5lckZvckJ5dGVzID0gZGV0ZWN0Q29udGFpbmVyRm9yQnl0ZXM7XG5leHBvcnRzLmdldElkM09mZnNldCA9IGdldElkM09mZnNldDtcbmV4cG9ydHMuaWQzU2l6ZSA9IGlkM1NpemU7XG5leHBvcnRzLmlzTGlrZWx5ID0gaXNMaWtlbHk7XG5leHBvcnRzLmlzTGlrZWx5Rm1wNE1lZGlhU2VnbWVudCA9IGlzTGlrZWx5Rm1wNE1lZGlhU2VnbWVudDtcbiIsInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzOyIsIi8qKlxuICogbXV4LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogVXRpbGl0aWVzIHRvIGRldGVjdCBiYXNpYyBwcm9wZXJ0aWVzIGFuZCBtZXRhZGF0YSBhYm91dCBBYWMgZGF0YS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQURUU19TQU1QTElOR19GUkVRVUVOQ0lFUyA9IFtcbiAgOTYwMDAsXG4gIDg4MjAwLFxuICA2NDAwMCxcbiAgNDgwMDAsXG4gIDQ0MTAwLFxuICAzMjAwMCxcbiAgMjQwMDAsXG4gIDIyMDUwLFxuICAxNjAwMCxcbiAgMTIwMDAsXG4gIDExMDI1LFxuICA4MDAwLFxuICA3MzUwXG5dO1xuXG52YXIgcGFyc2VJZDNUYWdTaXplID0gZnVuY3Rpb24oaGVhZGVyLCBieXRlSW5kZXgpIHtcbiAgdmFyXG4gICAgcmV0dXJuU2l6ZSA9IChoZWFkZXJbYnl0ZUluZGV4ICsgNl0gPDwgMjEpIHxcbiAgICAgICAgICAgICAgICAgKGhlYWRlcltieXRlSW5kZXggKyA3XSA8PCAxNCkgfFxuICAgICAgICAgICAgICAgICAoaGVhZGVyW2J5dGVJbmRleCArIDhdIDw8IDcpIHxcbiAgICAgICAgICAgICAgICAgKGhlYWRlcltieXRlSW5kZXggKyA5XSksXG4gICAgZmxhZ3MgPSBoZWFkZXJbYnl0ZUluZGV4ICsgNV0sXG4gICAgZm9vdGVyUHJlc2VudCA9IChmbGFncyAmIDE2KSA+PiA0O1xuXG4gIC8vIGlmIHdlIGdldCBhIG5lZ2F0aXZlIHJldHVyblNpemUgY2xhbXAgaXQgdG8gMFxuICByZXR1cm5TaXplID0gcmV0dXJuU2l6ZSA+PSAwID8gcmV0dXJuU2l6ZSA6IDA7XG5cbiAgaWYgKGZvb3RlclByZXNlbnQpIHtcbiAgICByZXR1cm4gcmV0dXJuU2l6ZSArIDIwO1xuICB9XG4gIHJldHVybiByZXR1cm5TaXplICsgMTA7XG59O1xuXG52YXIgZ2V0SWQzT2Zmc2V0ID0gZnVuY3Rpb24oZGF0YSwgb2Zmc2V0KSB7XG4gIGlmIChkYXRhLmxlbmd0aCAtIG9mZnNldCA8IDEwIHx8XG4gICAgICBkYXRhW29mZnNldF0gIT09ICdJJy5jaGFyQ29kZUF0KDApIHx8XG4gICAgICBkYXRhW29mZnNldCArIDFdICE9PSAnRCcuY2hhckNvZGVBdCgwKSB8fFxuICAgICAgZGF0YVtvZmZzZXQgKyAyXSAhPT0gJzMnLmNoYXJDb2RlQXQoMCkpIHtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgb2Zmc2V0ICs9IHBhcnNlSWQzVGFnU2l6ZShkYXRhLCBvZmZzZXQpO1xuXG4gIHJldHVybiBnZXRJZDNPZmZzZXQoZGF0YSwgb2Zmc2V0KTtcbn07XG5cblxuLy8gVE9ETzogdXNlIHZocy11dGlsc1xudmFyIGlzTGlrZWx5QWFjRGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdmFyIG9mZnNldCA9IGdldElkM09mZnNldChkYXRhLCAwKTtcblxuICByZXR1cm4gZGF0YS5sZW5ndGggPj0gb2Zmc2V0ICsgMiAmJlxuICAgIChkYXRhW29mZnNldF0gJiAweEZGKSA9PT0gMHhGRiAmJlxuICAgIChkYXRhW29mZnNldCArIDFdICYgMHhGMCkgPT09IDB4RjAgJiZcbiAgICAvLyB2ZXJpZnkgdGhhdCB0aGUgMiBsYXllciBiaXRzIGFyZSAwLCBha2EgdGhpc1xuICAgIC8vIGlzIG5vdCBtcDMgZGF0YSBidXQgYWFjIGRhdGEuXG4gICAgKGRhdGFbb2Zmc2V0ICsgMV0gJiAweDE2KSA9PT0gMHgxMDtcbn07XG5cbnZhciBwYXJzZVN5bmNTYWZlSW50ZWdlciA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgcmV0dXJuIChkYXRhWzBdIDw8IDIxKSB8XG4gICAgICAgICAgKGRhdGFbMV0gPDwgMTQpIHxcbiAgICAgICAgICAoZGF0YVsyXSA8PCA3KSB8XG4gICAgICAgICAgKGRhdGFbM10pO1xufTtcblxuLy8gcmV0dXJuIGEgcGVyY2VudC1lbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzcGVjaWZpZWQgYnl0ZSByYW5nZVxuLy8gQHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BlcmNlbnQtZW5jb2RpbmdcbnZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24oYnl0ZXMsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGksIHJlc3VsdCA9ICcnO1xuICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgcmVzdWx0ICs9ICclJyArICgnMDAnICsgYnl0ZXNbaV0udG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIHJldHVybiB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzcGVjaWZpZWQgYnl0ZSByYW5nZSxcbi8vIGludGVycHJldGVkIGFzIElTTy04ODU5LTEuXG52YXIgcGFyc2VJc284ODU5MSA9IGZ1bmN0aW9uKGJ5dGVzLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiB1bmVzY2FwZShwZXJjZW50RW5jb2RlKGJ5dGVzLCBzdGFydCwgZW5kKSk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxufTtcblxudmFyIHBhcnNlQWR0c1NpemUgPSBmdW5jdGlvbihoZWFkZXIsIGJ5dGVJbmRleCkge1xuICB2YXJcbiAgICBsb3dUaHJlZSA9IChoZWFkZXJbYnl0ZUluZGV4ICsgNV0gJiAweEUwKSA+PiA1LFxuICAgIG1pZGRsZSA9IGhlYWRlcltieXRlSW5kZXggKyA0XSA8PCAzLFxuICAgIGhpZ2hUd28gPSBoZWFkZXJbYnl0ZUluZGV4ICsgM10gJiAweDMgPDwgMTE7XG5cbiAgcmV0dXJuIChoaWdoVHdvIHwgbWlkZGxlKSB8IGxvd1RocmVlO1xufTtcblxudmFyIHBhcnNlVHlwZSA9IGZ1bmN0aW9uKGhlYWRlciwgYnl0ZUluZGV4KSB7XG4gIGlmICgoaGVhZGVyW2J5dGVJbmRleF0gPT09ICdJJy5jaGFyQ29kZUF0KDApKSAmJlxuICAgICAgKGhlYWRlcltieXRlSW5kZXggKyAxXSA9PT0gJ0QnLmNoYXJDb2RlQXQoMCkpICYmXG4gICAgICAoaGVhZGVyW2J5dGVJbmRleCArIDJdID09PSAnMycuY2hhckNvZGVBdCgwKSkpIHtcbiAgICByZXR1cm4gJ3RpbWVkLW1ldGFkYXRhJztcbiAgfSBlbHNlIGlmICgoaGVhZGVyW2J5dGVJbmRleF0gJiAweGZmID09PSAweGZmKSAmJlxuICAgICAgICAgICAgICgoaGVhZGVyW2J5dGVJbmRleCArIDFdICYgMHhmMCkgPT09IDB4ZjApKSB7XG4gICAgcmV0dXJuICdhdWRpbyc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgcGFyc2VTYW1wbGVSYXRlID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBpID0gMDtcblxuICB3aGlsZSAoaSArIDUgPCBwYWNrZXQubGVuZ3RoKSB7XG4gICAgaWYgKHBhY2tldFtpXSAhPT0gMHhGRiB8fCAocGFja2V0W2kgKyAxXSAmIDB4RjYpICE9PSAweEYwKSB7XG4gICAgICAvLyBJZiBhIHZhbGlkIGhlYWRlciB3YXMgbm90IGZvdW5kLCAganVtcCBvbmUgZm9yd2FyZCBhbmQgYXR0ZW1wdCB0b1xuICAgICAgLy8gZmluZCBhIHZhbGlkIEFEVFMgaGVhZGVyIHN0YXJ0aW5nIGF0IHRoZSBuZXh0IGJ5dGVcbiAgICAgIGkrKztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXR1cm4gQURUU19TQU1QTElOR19GUkVRVUVOQ0lFU1socGFja2V0W2kgKyAyXSAmIDB4M2MpID4+PiAyXTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIHBhcnNlQWFjVGltZXN0YW1wID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBmcmFtZVN0YXJ0LCBmcmFtZVNpemUsIGZyYW1lLCBmcmFtZUhlYWRlcjtcblxuICAvLyBmaW5kIHRoZSBzdGFydCBvZiB0aGUgZmlyc3QgZnJhbWUgYW5kIHRoZSBlbmQgb2YgdGhlIHRhZ1xuICBmcmFtZVN0YXJ0ID0gMTA7XG4gIGlmIChwYWNrZXRbNV0gJiAweDQwKSB7XG4gICAgLy8gYWR2YW5jZSB0aGUgZnJhbWUgc3RhcnQgcGFzdCB0aGUgZXh0ZW5kZWQgaGVhZGVyXG4gICAgZnJhbWVTdGFydCArPSA0OyAvLyBoZWFkZXIgc2l6ZSBmaWVsZFxuICAgIGZyYW1lU3RhcnQgKz0gcGFyc2VTeW5jU2FmZUludGVnZXIocGFja2V0LnN1YmFycmF5KDEwLCAxNCkpO1xuICB9XG5cbiAgLy8gcGFyc2Ugb25lIG9yIG1vcmUgSUQzIGZyYW1lc1xuICAvLyBodHRwOi8vaWQzLm9yZy9pZDN2Mi4zLjAjSUQzdjJfZnJhbWVfb3ZlcnZpZXdcbiAgZG8ge1xuICAgIC8vIGRldGVybWluZSB0aGUgbnVtYmVyIG9mIGJ5dGVzIGluIHRoaXMgZnJhbWVcbiAgICBmcmFtZVNpemUgPSBwYXJzZVN5bmNTYWZlSW50ZWdlcihwYWNrZXQuc3ViYXJyYXkoZnJhbWVTdGFydCArIDQsIGZyYW1lU3RhcnQgKyA4KSk7XG4gICAgaWYgKGZyYW1lU2l6ZSA8IDEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmcmFtZUhlYWRlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFja2V0W2ZyYW1lU3RhcnRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZXRbZnJhbWVTdGFydCArIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZXRbZnJhbWVTdGFydCArIDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZXRbZnJhbWVTdGFydCArIDNdKTtcblxuICAgIGlmIChmcmFtZUhlYWRlciA9PT0gJ1BSSVYnKSB7XG4gICAgICBmcmFtZSA9IHBhY2tldC5zdWJhcnJheShmcmFtZVN0YXJ0ICsgMTAsIGZyYW1lU3RhcnQgKyBmcmFtZVNpemUgKyAxMCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJhbWUuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmcmFtZVtpXSA9PT0gMCkge1xuICAgICAgICAgIHZhciBvd25lciA9IHBhcnNlSXNvODg1OTEoZnJhbWUsIDAsIGkpO1xuICAgICAgICAgIGlmIChvd25lciA9PT0gJ2NvbS5hcHBsZS5zdHJlYW1pbmcudHJhbnNwb3J0U3RyZWFtVGltZXN0YW1wJykge1xuICAgICAgICAgICAgdmFyIGQgPSBmcmFtZS5zdWJhcnJheShpICsgMSk7XG4gICAgICAgICAgICB2YXIgc2l6ZSA9ICgoZFszXSAmIDB4MDEpICA8PCAzMCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAoZFs0XSAgPDwgMjIpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgKGRbNV0gPDwgMTQpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgKGRbNl0gPDwgNikgfFxuICAgICAgICAgICAgICAgICAgICAgICAoZFs3XSA+Pj4gMik7XG4gICAgICAgICAgICBzaXplICo9IDQ7XG4gICAgICAgICAgICBzaXplICs9IGRbN10gJiAweDAzO1xuXG4gICAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcmFtZVN0YXJ0ICs9IDEwOyAvLyBhZHZhbmNlIHBhc3QgdGhlIGZyYW1lIGhlYWRlclxuICAgIGZyYW1lU3RhcnQgKz0gZnJhbWVTaXplOyAvLyBhZHZhbmNlIHBhc3QgdGhlIGZyYW1lIGJvZHlcbiAgfSB3aGlsZSAoZnJhbWVTdGFydCA8IHBhY2tldC5ieXRlTGVuZ3RoKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNMaWtlbHlBYWNEYXRhOiBpc0xpa2VseUFhY0RhdGEsXG4gIHBhcnNlSWQzVGFnU2l6ZTogcGFyc2VJZDNUYWdTaXplLFxuICBwYXJzZUFkdHNTaXplOiBwYXJzZUFkdHNTaXplLFxuICBwYXJzZVR5cGU6IHBhcnNlVHlwZSxcbiAgcGFyc2VTYW1wbGVSYXRlOiBwYXJzZVNhbXBsZVJhdGUsXG4gIHBhcnNlQWFjVGltZXN0YW1wOiBwYXJzZUFhY1RpbWVzdGFtcFxufTtcbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCIvL1s0XSAgIFx0TmFtZVN0YXJ0Q2hhclx0ICAgOjo9ICAgXHRcIjpcIiB8IFtBLVpdIHwgXCJfXCIgfCBbYS16XSB8IFsjeEMwLSN4RDZdIHwgWyN4RDgtI3hGNl0gfCBbI3hGOC0jeDJGRl0gfCBbI3gzNzAtI3gzN0RdIHwgWyN4MzdGLSN4MUZGRl0gfCBbI3gyMDBDLSN4MjAwRF0gfCBbI3gyMDcwLSN4MjE4Rl0gfCBbI3gyQzAwLSN4MkZFRl0gfCBbI3gzMDAxLSN4RDdGRl0gfCBbI3hGOTAwLSN4RkRDRl0gfCBbI3hGREYwLSN4RkZGRF0gfCBbI3gxMDAwMC0jeEVGRkZGXVxyXG4vL1s0YV0gICBcdE5hbWVDaGFyXHQgICA6Oj0gICBcdE5hbWVTdGFydENoYXIgfCBcIi1cIiB8IFwiLlwiIHwgWzAtOV0gfCAjeEI3IHwgWyN4MDMwMC0jeDAzNkZdIHwgWyN4MjAzRi0jeDIwNDBdXHJcbi8vWzVdICAgXHROYW1lXHQgICA6Oj0gICBcdE5hbWVTdGFydENoYXIgKE5hbWVDaGFyKSpcclxudmFyIG5hbWVTdGFydENoYXIgPSAvW0EtWl9hLXpcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXS8vL1xcdTEwMDAwLVxcdUVGRkZGXHJcbnZhciBuYW1lQ2hhciA9IG5ldyBSZWdFeHAoXCJbXFxcXC1cXFxcLjAtOVwiK25hbWVTdGFydENoYXIuc291cmNlLnNsaWNlKDEsLTEpK1wiXFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDBdXCIpO1xyXG52YXIgdGFnTmFtZVBhdHRlcm4gPSBuZXcgUmVnRXhwKCdeJytuYW1lU3RhcnRDaGFyLnNvdXJjZStuYW1lQ2hhci5zb3VyY2UrJyooPzpcXDonK25hbWVTdGFydENoYXIuc291cmNlK25hbWVDaGFyLnNvdXJjZSsnKik/JCcpO1xyXG4vL3ZhciB0YWdOYW1lUGF0dGVybiA9IC9eW2EtekEtWl9dW1xcd1xcLVxcLl0qKD86XFw6W2EtekEtWl9dW1xcd1xcLVxcLl0qKT8kL1xyXG4vL3ZhciBoYW5kbGVycyA9ICdyZXNvbHZlRW50aXR5LGdldEV4dGVybmFsU3Vic2V0LGNoYXJhY3RlcnMsZW5kRG9jdW1lbnQsZW5kRWxlbWVudCxlbmRQcmVmaXhNYXBwaW5nLGlnbm9yYWJsZVdoaXRlc3BhY2UscHJvY2Vzc2luZ0luc3RydWN0aW9uLHNldERvY3VtZW50TG9jYXRvcixza2lwcGVkRW50aXR5LHN0YXJ0RG9jdW1lbnQsc3RhcnRFbGVtZW50LHN0YXJ0UHJlZml4TWFwcGluZyxub3RhdGlvbkRlY2wsdW5wYXJzZWRFbnRpdHlEZWNsLGVycm9yLGZhdGFsRXJyb3Isd2FybmluZyxhdHRyaWJ1dGVEZWNsLGVsZW1lbnREZWNsLGV4dGVybmFsRW50aXR5RGVjbCxpbnRlcm5hbEVudGl0eURlY2wsY29tbWVudCxlbmRDREFUQSxlbmREVEQsZW5kRW50aXR5LHN0YXJ0Q0RBVEEsc3RhcnREVEQsc3RhcnRFbnRpdHknLnNwbGl0KCcsJylcclxuXHJcbi8vU19UQUcsXHRTX0FUVFIsXHRTX0VRLFx0U19BVFRSX05PUVVPVF9WQUxVRVxyXG4vL1NfQVRUUl9TUEFDRSxcdFNfQVRUUl9FTkQsXHRTX1RBR19TUEFDRSwgU19UQUdfQ0xPU0VcclxudmFyIFNfVEFHID0gMDsvL3RhZyBuYW1lIG9mZmVycmluZ1xyXG52YXIgU19BVFRSID0gMTsvL2F0dHIgbmFtZSBvZmZlcnJpbmcgXHJcbnZhciBTX0FUVFJfU1BBQ0U9MjsvL2F0dHIgbmFtZSBlbmQgYW5kIHNwYWNlIG9mZmVyXHJcbnZhciBTX0VRID0gMzsvLz1zcGFjZT9cclxudmFyIFNfQVRUUl9OT1FVT1RfVkFMVUUgPSA0Oy8vYXR0ciB2YWx1ZShubyBxdW90IHZhbHVlIG9ubHkpXHJcbnZhciBTX0FUVFJfRU5EID0gNTsvL2F0dHIgdmFsdWUgZW5kIGFuZCBubyBzcGFjZShxdW90IGVuZClcclxudmFyIFNfVEFHX1NQQUNFID0gNjsvLyhhdHRyIHZhbHVlIGVuZCB8fCB0YWcgZW5kICkgJiYgKHNwYWNlIG9mZmVyKVxyXG52YXIgU19UQUdfQ0xPU0UgPSA3Oy8vY2xvc2VkIGVsPGVsIC8+XHJcblxyXG5mdW5jdGlvbiBYTUxSZWFkZXIoKXtcclxuXHRcclxufVxyXG5cclxuWE1MUmVhZGVyLnByb3RvdHlwZSA9IHtcclxuXHRwYXJzZTpmdW5jdGlvbihzb3VyY2UsZGVmYXVsdE5TTWFwLGVudGl0eU1hcCl7XHJcblx0XHR2YXIgZG9tQnVpbGRlciA9IHRoaXMuZG9tQnVpbGRlcjtcclxuXHRcdGRvbUJ1aWxkZXIuc3RhcnREb2N1bWVudCgpO1xyXG5cdFx0X2NvcHkoZGVmYXVsdE5TTWFwICxkZWZhdWx0TlNNYXAgPSB7fSlcclxuXHRcdHBhcnNlKHNvdXJjZSxkZWZhdWx0TlNNYXAsZW50aXR5TWFwLFxyXG5cdFx0XHRcdGRvbUJ1aWxkZXIsdGhpcy5lcnJvckhhbmRsZXIpO1xyXG5cdFx0ZG9tQnVpbGRlci5lbmREb2N1bWVudCgpO1xyXG5cdH1cclxufVxyXG5mdW5jdGlvbiBwYXJzZShzb3VyY2UsZGVmYXVsdE5TTWFwQ29weSxlbnRpdHlNYXAsZG9tQnVpbGRlcixlcnJvckhhbmRsZXIpe1xyXG5cdGZ1bmN0aW9uIGZpeGVkRnJvbUNoYXJDb2RlKGNvZGUpIHtcclxuXHRcdC8vIFN0cmluZy5wcm90b3R5cGUuZnJvbUNoYXJDb2RlIGRvZXMgbm90IHN1cHBvcnRzXHJcblx0XHQvLyA+IDIgYnl0ZXMgdW5pY29kZSBjaGFycyBkaXJlY3RseVxyXG5cdFx0aWYgKGNvZGUgPiAweGZmZmYpIHtcclxuXHRcdFx0Y29kZSAtPSAweDEwMDAwO1xyXG5cdFx0XHR2YXIgc3Vycm9nYXRlMSA9IDB4ZDgwMCArIChjb2RlID4+IDEwKVxyXG5cdFx0XHRcdCwgc3Vycm9nYXRlMiA9IDB4ZGMwMCArIChjb2RlICYgMHgzZmYpO1xyXG5cclxuXHRcdFx0cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoc3Vycm9nYXRlMSwgc3Vycm9nYXRlMik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcclxuXHRcdH1cclxuXHR9XHJcblx0ZnVuY3Rpb24gZW50aXR5UmVwbGFjZXIoYSl7XHJcblx0XHR2YXIgayA9IGEuc2xpY2UoMSwtMSk7XHJcblx0XHRpZihrIGluIGVudGl0eU1hcCl7XHJcblx0XHRcdHJldHVybiBlbnRpdHlNYXBba107IFxyXG5cdFx0fWVsc2UgaWYoay5jaGFyQXQoMCkgPT09ICcjJyl7XHJcblx0XHRcdHJldHVybiBmaXhlZEZyb21DaGFyQ29kZShwYXJzZUludChrLnN1YnN0cigxKS5yZXBsYWNlKCd4JywnMHgnKSkpXHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0ZXJyb3JIYW5kbGVyLmVycm9yKCdlbnRpdHkgbm90IGZvdW5kOicrYSk7XHJcblx0XHRcdHJldHVybiBhO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRmdW5jdGlvbiBhcHBlbmRUZXh0KGVuZCl7Ly9oYXMgc29tZSBidWdzXHJcblx0XHRpZihlbmQ+c3RhcnQpe1xyXG5cdFx0XHR2YXIgeHQgPSBzb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0LGVuZCkucmVwbGFjZSgvJiM/XFx3KzsvZyxlbnRpdHlSZXBsYWNlcik7XHJcblx0XHRcdGxvY2F0b3ImJnBvc2l0aW9uKHN0YXJ0KTtcclxuXHRcdFx0ZG9tQnVpbGRlci5jaGFyYWN0ZXJzKHh0LDAsZW5kLXN0YXJ0KTtcclxuXHRcdFx0c3RhcnQgPSBlbmRcclxuXHRcdH1cclxuXHR9XHJcblx0ZnVuY3Rpb24gcG9zaXRpb24ocCxtKXtcclxuXHRcdHdoaWxlKHA+PWxpbmVFbmQgJiYgKG0gPSBsaW5lUGF0dGVybi5leGVjKHNvdXJjZSkpKXtcclxuXHRcdFx0bGluZVN0YXJ0ID0gbS5pbmRleDtcclxuXHRcdFx0bGluZUVuZCA9IGxpbmVTdGFydCArIG1bMF0ubGVuZ3RoO1xyXG5cdFx0XHRsb2NhdG9yLmxpbmVOdW1iZXIrKztcclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnbGluZSsrOicsbG9jYXRvcixzdGFydFBvcyxlbmRQb3MpXHJcblx0XHR9XHJcblx0XHRsb2NhdG9yLmNvbHVtbk51bWJlciA9IHAtbGluZVN0YXJ0KzE7XHJcblx0fVxyXG5cdHZhciBsaW5lU3RhcnQgPSAwO1xyXG5cdHZhciBsaW5lRW5kID0gMDtcclxuXHR2YXIgbGluZVBhdHRlcm4gPSAvLiooPzpcXHJcXG4/fFxcbil8LiokL2dcclxuXHR2YXIgbG9jYXRvciA9IGRvbUJ1aWxkZXIubG9jYXRvcjtcclxuXHRcclxuXHR2YXIgcGFyc2VTdGFjayA9IFt7Y3VycmVudE5TTWFwOmRlZmF1bHROU01hcENvcHl9XVxyXG5cdHZhciBjbG9zZU1hcCA9IHt9O1xyXG5cdHZhciBzdGFydCA9IDA7XHJcblx0d2hpbGUodHJ1ZSl7XHJcblx0XHR0cnl7XHJcblx0XHRcdHZhciB0YWdTdGFydCA9IHNvdXJjZS5pbmRleE9mKCc8JyxzdGFydCk7XHJcblx0XHRcdGlmKHRhZ1N0YXJ0PDApe1xyXG5cdFx0XHRcdGlmKCFzb3VyY2Uuc3Vic3RyKHN0YXJ0KS5tYXRjaCgvXlxccyokLykpe1xyXG5cdFx0XHRcdFx0dmFyIGRvYyA9IGRvbUJ1aWxkZXIuZG9jO1xyXG5cdCAgICBcdFx0XHR2YXIgdGV4dCA9IGRvYy5jcmVhdGVUZXh0Tm9kZShzb3VyY2Uuc3Vic3RyKHN0YXJ0KSk7XHJcblx0ICAgIFx0XHRcdGRvYy5hcHBlbmRDaGlsZCh0ZXh0KTtcclxuXHQgICAgXHRcdFx0ZG9tQnVpbGRlci5jdXJyZW50RWxlbWVudCA9IHRleHQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZih0YWdTdGFydD5zdGFydCl7XHJcblx0XHRcdFx0YXBwZW5kVGV4dCh0YWdTdGFydCk7XHJcblx0XHRcdH1cclxuXHRcdFx0c3dpdGNoKHNvdXJjZS5jaGFyQXQodGFnU3RhcnQrMSkpe1xyXG5cdFx0XHRjYXNlICcvJzpcclxuXHRcdFx0XHR2YXIgZW5kID0gc291cmNlLmluZGV4T2YoJz4nLHRhZ1N0YXJ0KzMpO1xyXG5cdFx0XHRcdHZhciB0YWdOYW1lID0gc291cmNlLnN1YnN0cmluZyh0YWdTdGFydCsyLGVuZCk7XHJcblx0XHRcdFx0dmFyIGNvbmZpZyA9IHBhcnNlU3RhY2sucG9wKCk7XHJcblx0XHRcdFx0aWYoZW5kPDApe1xyXG5cdFx0XHRcdFx0XHJcblx0ICAgICAgICBcdFx0dGFnTmFtZSA9IHNvdXJjZS5zdWJzdHJpbmcodGFnU3RhcnQrMikucmVwbGFjZSgvW1xcczxdLiovLCcnKTtcclxuXHQgICAgICAgIFx0XHQvL2NvbnNvbGUuZXJyb3IoJyNAQEBAQEAnK3RhZ05hbWUpXHJcblx0ICAgICAgICBcdFx0ZXJyb3JIYW5kbGVyLmVycm9yKFwiZW5kIHRhZyBuYW1lOiBcIit0YWdOYW1lKycgaXMgbm90IGNvbXBsZXRlOicrY29uZmlnLnRhZ05hbWUpO1xyXG5cdCAgICAgICAgXHRcdGVuZCA9IHRhZ1N0YXJ0KzErdGFnTmFtZS5sZW5ndGg7XHJcblx0ICAgICAgICBcdH1lbHNlIGlmKHRhZ05hbWUubWF0Y2goL1xcczwvKSl7XHJcblx0ICAgICAgICBcdFx0dGFnTmFtZSA9IHRhZ05hbWUucmVwbGFjZSgvW1xcczxdLiovLCcnKTtcclxuXHQgICAgICAgIFx0XHRlcnJvckhhbmRsZXIuZXJyb3IoXCJlbmQgdGFnIG5hbWU6IFwiK3RhZ05hbWUrJyBtYXliZSBub3QgY29tcGxldGUnKTtcclxuXHQgICAgICAgIFx0XHRlbmQgPSB0YWdTdGFydCsxK3RhZ05hbWUubGVuZ3RoO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvL2NvbnNvbGUuZXJyb3IocGFyc2VTdGFjay5sZW5ndGgscGFyc2VTdGFjaylcclxuXHRcdFx0XHQvL2NvbnNvbGUuZXJyb3IoY29uZmlnKTtcclxuXHRcdFx0XHR2YXIgbG9jYWxOU01hcCA9IGNvbmZpZy5sb2NhbE5TTWFwO1xyXG5cdFx0XHRcdHZhciBlbmRNYXRjaCA9IGNvbmZpZy50YWdOYW1lID09IHRhZ05hbWU7XHJcblx0XHRcdFx0dmFyIGVuZElnbm9yZUNhc2VNYWNoID0gZW5kTWF0Y2ggfHwgY29uZmlnLnRhZ05hbWUmJmNvbmZpZy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpXHJcblx0XHQgICAgICAgIGlmKGVuZElnbm9yZUNhc2VNYWNoKXtcclxuXHRcdCAgICAgICAgXHRkb21CdWlsZGVyLmVuZEVsZW1lbnQoY29uZmlnLnVyaSxjb25maWcubG9jYWxOYW1lLHRhZ05hbWUpO1xyXG5cdFx0XHRcdFx0aWYobG9jYWxOU01hcCl7XHJcblx0XHRcdFx0XHRcdGZvcih2YXIgcHJlZml4IGluIGxvY2FsTlNNYXApe1xyXG5cdFx0XHRcdFx0XHRcdGRvbUJ1aWxkZXIuZW5kUHJlZml4TWFwcGluZyhwcmVmaXgpIDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYoIWVuZE1hdGNoKXtcclxuXHRcdCAgICAgICAgICAgIFx0ZXJyb3JIYW5kbGVyLmZhdGFsRXJyb3IoXCJlbmQgdGFnIG5hbWU6IFwiK3RhZ05hbWUrJyBpcyBub3QgbWF0Y2ggdGhlIGN1cnJlbnQgc3RhcnQgdGFnTmFtZTonK2NvbmZpZy50YWdOYW1lICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHQgICAgICAgIH1lbHNle1xyXG5cdFx0ICAgICAgICBcdHBhcnNlU3RhY2sucHVzaChjb25maWcpXHJcblx0XHQgICAgICAgIH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRlbmQrKztcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHQvLyBlbmQgZWxtZW50XHJcblx0XHRcdGNhc2UgJz8nOi8vIDw/Li4uPz5cclxuXHRcdFx0XHRsb2NhdG9yJiZwb3NpdGlvbih0YWdTdGFydCk7XHJcblx0XHRcdFx0ZW5kID0gcGFyc2VJbnN0cnVjdGlvbihzb3VyY2UsdGFnU3RhcnQsZG9tQnVpbGRlcik7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgJyEnOi8vIDwhZG9jdHlwZSw8IVtDREFUQSw8IS0tXHJcblx0XHRcdFx0bG9jYXRvciYmcG9zaXRpb24odGFnU3RhcnQpO1xyXG5cdFx0XHRcdGVuZCA9IHBhcnNlRENDKHNvdXJjZSx0YWdTdGFydCxkb21CdWlsZGVyLGVycm9ySGFuZGxlcik7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0bG9jYXRvciYmcG9zaXRpb24odGFnU3RhcnQpO1xyXG5cdFx0XHRcdHZhciBlbCA9IG5ldyBFbGVtZW50QXR0cmlidXRlcygpO1xyXG5cdFx0XHRcdHZhciBjdXJyZW50TlNNYXAgPSBwYXJzZVN0YWNrW3BhcnNlU3RhY2subGVuZ3RoLTFdLmN1cnJlbnROU01hcDtcclxuXHRcdFx0XHQvL2VsU3RhcnRFbmRcclxuXHRcdFx0XHR2YXIgZW5kID0gcGFyc2VFbGVtZW50U3RhcnRQYXJ0KHNvdXJjZSx0YWdTdGFydCxlbCxjdXJyZW50TlNNYXAsZW50aXR5UmVwbGFjZXIsZXJyb3JIYW5kbGVyKTtcclxuXHRcdFx0XHR2YXIgbGVuID0gZWwubGVuZ3RoO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKCFlbC5jbG9zZWQgJiYgZml4U2VsZkNsb3NlZChzb3VyY2UsZW5kLGVsLnRhZ05hbWUsY2xvc2VNYXApKXtcclxuXHRcdFx0XHRcdGVsLmNsb3NlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRpZighZW50aXR5TWFwLm5ic3Ape1xyXG5cdFx0XHRcdFx0XHRlcnJvckhhbmRsZXIud2FybmluZygndW5jbG9zZWQgeG1sIGF0dHJpYnV0ZScpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihsb2NhdG9yICYmIGxlbil7XHJcblx0XHRcdFx0XHR2YXIgbG9jYXRvcjIgPSBjb3B5TG9jYXRvcihsb2NhdG9yLHt9KTtcclxuXHRcdFx0XHRcdC8vdHJ5ey8vYXR0cmlidXRlIHBvc2l0aW9uIGZpeGVkXHJcblx0XHRcdFx0XHRmb3IodmFyIGkgPSAwO2k8bGVuO2krKyl7XHJcblx0XHRcdFx0XHRcdHZhciBhID0gZWxbaV07XHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uKGEub2Zmc2V0KTtcclxuXHRcdFx0XHRcdFx0YS5sb2NhdG9yID0gY29weUxvY2F0b3IobG9jYXRvcix7fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvL31jYXRjaChlKXtjb25zb2xlLmVycm9yKCdAQEBAQCcrZSl9XHJcblx0XHRcdFx0XHRkb21CdWlsZGVyLmxvY2F0b3IgPSBsb2NhdG9yMlxyXG5cdFx0XHRcdFx0aWYoYXBwZW5kRWxlbWVudChlbCxkb21CdWlsZGVyLGN1cnJlbnROU01hcCkpe1xyXG5cdFx0XHRcdFx0XHRwYXJzZVN0YWNrLnB1c2goZWwpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRkb21CdWlsZGVyLmxvY2F0b3IgPSBsb2NhdG9yO1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0aWYoYXBwZW5kRWxlbWVudChlbCxkb21CdWlsZGVyLGN1cnJlbnROU01hcCkpe1xyXG5cdFx0XHRcdFx0XHRwYXJzZVN0YWNrLnB1c2goZWwpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKGVsLnVyaSA9PT0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnICYmICFlbC5jbG9zZWQpe1xyXG5cdFx0XHRcdFx0ZW5kID0gcGFyc2VIdG1sU3BlY2lhbENvbnRlbnQoc291cmNlLGVuZCxlbC50YWdOYW1lLGVudGl0eVJlcGxhY2VyLGRvbUJ1aWxkZXIpXHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRlbmQrKztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1jYXRjaChlKXtcclxuXHRcdFx0ZXJyb3JIYW5kbGVyLmVycm9yKCdlbGVtZW50IHBhcnNlIGVycm9yOiAnK2UpXHJcblx0XHRcdC8vZXJyb3JIYW5kbGVyLmVycm9yKCdlbGVtZW50IHBhcnNlIGVycm9yOiAnK2UpO1xyXG5cdFx0XHRlbmQgPSAtMTtcclxuXHRcdFx0Ly90aHJvdyBlO1xyXG5cdFx0fVxyXG5cdFx0aWYoZW5kPnN0YXJ0KXtcclxuXHRcdFx0c3RhcnQgPSBlbmQ7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0Ly9UT0RPOiDov5nph4zmnInlj6/og71zYXjlm57pgIDvvIzmnInkvY3nva7plJnor6/po47pmalcclxuXHRcdFx0YXBwZW5kVGV4dChNYXRoLm1heCh0YWdTdGFydCxzdGFydCkrMSk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbmZ1bmN0aW9uIGNvcHlMb2NhdG9yKGYsdCl7XHJcblx0dC5saW5lTnVtYmVyID0gZi5saW5lTnVtYmVyO1xyXG5cdHQuY29sdW1uTnVtYmVyID0gZi5jb2x1bW5OdW1iZXI7XHJcblx0cmV0dXJuIHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAc2VlICNhcHBlbmRFbGVtZW50KHNvdXJjZSxlbFN0YXJ0RW5kLGVsLHNlbGZDbG9zZWQsZW50aXR5UmVwbGFjZXIsZG9tQnVpbGRlcixwYXJzZVN0YWNrKTtcclxuICogQHJldHVybiBlbmQgb2YgdGhlIGVsZW1lbnRTdGFydFBhcnQoZW5kIG9mIGVsZW1lbnRFbmRQYXJ0IGZvciBzZWxmQ2xvc2VkIGVsKVxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VFbGVtZW50U3RhcnRQYXJ0KHNvdXJjZSxzdGFydCxlbCxjdXJyZW50TlNNYXAsZW50aXR5UmVwbGFjZXIsZXJyb3JIYW5kbGVyKXtcclxuXHR2YXIgYXR0ck5hbWU7XHJcblx0dmFyIHZhbHVlO1xyXG5cdHZhciBwID0gKytzdGFydDtcclxuXHR2YXIgcyA9IFNfVEFHOy8vc3RhdHVzXHJcblx0d2hpbGUodHJ1ZSl7XHJcblx0XHR2YXIgYyA9IHNvdXJjZS5jaGFyQXQocCk7XHJcblx0XHRzd2l0Y2goYyl7XHJcblx0XHRjYXNlICc9JzpcclxuXHRcdFx0aWYocyA9PT0gU19BVFRSKXsvL2F0dHJOYW1lXHJcblx0XHRcdFx0YXR0ck5hbWUgPSBzb3VyY2Uuc2xpY2Uoc3RhcnQscCk7XHJcblx0XHRcdFx0cyA9IFNfRVE7XHJcblx0XHRcdH1lbHNlIGlmKHMgPT09IFNfQVRUUl9TUEFDRSl7XHJcblx0XHRcdFx0cyA9IFNfRVE7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdC8vZmF0YWxFcnJvcjogZXF1YWwgbXVzdCBhZnRlciBhdHRyTmFtZSBvciBzcGFjZSBhZnRlciBhdHRyTmFtZVxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignYXR0cmlidXRlIGVxdWFsIG11c3QgYWZ0ZXIgYXR0ck5hbWUnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ1xcJyc6XHJcblx0XHRjYXNlICdcIic6XHJcblx0XHRcdGlmKHMgPT09IFNfRVEgfHwgcyA9PT0gU19BVFRSIC8vfHwgcyA9PSBTX0FUVFJfU1BBQ0VcclxuXHRcdFx0XHQpey8vZXF1YWxcclxuXHRcdFx0XHRpZihzID09PSBTX0FUVFIpe1xyXG5cdFx0XHRcdFx0ZXJyb3JIYW5kbGVyLndhcm5pbmcoJ2F0dHJpYnV0ZSB2YWx1ZSBtdXN0IGFmdGVyIFwiPVwiJylcclxuXHRcdFx0XHRcdGF0dHJOYW1lID0gc291cmNlLnNsaWNlKHN0YXJ0LHApXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHN0YXJ0ID0gcCsxO1xyXG5cdFx0XHRcdHAgPSBzb3VyY2UuaW5kZXhPZihjLHN0YXJ0KVxyXG5cdFx0XHRcdGlmKHA+MCl7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IHNvdXJjZS5zbGljZShzdGFydCxwKS5yZXBsYWNlKC8mIz9cXHcrOy9nLGVudGl0eVJlcGxhY2VyKTtcclxuXHRcdFx0XHRcdGVsLmFkZChhdHRyTmFtZSx2YWx1ZSxzdGFydC0xKTtcclxuXHRcdFx0XHRcdHMgPSBTX0FUVFJfRU5EO1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0Ly9mYXRhbEVycm9yOiBubyBlbmQgcXVvdCBtYXRjaFxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdhdHRyaWJ1dGUgdmFsdWUgbm8gZW5kIFxcJycrYysnXFwnIG1hdGNoJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ZWxzZSBpZihzID09IFNfQVRUUl9OT1FVT1RfVkFMVUUpe1xyXG5cdFx0XHRcdHZhbHVlID0gc291cmNlLnNsaWNlKHN0YXJ0LHApLnJlcGxhY2UoLyYjP1xcdys7L2csZW50aXR5UmVwbGFjZXIpO1xyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coYXR0ck5hbWUsdmFsdWUsc3RhcnQscClcclxuXHRcdFx0XHRlbC5hZGQoYXR0ck5hbWUsdmFsdWUsc3RhcnQpO1xyXG5cdFx0XHRcdC8vY29uc29sZS5kaXIoZWwpXHJcblx0XHRcdFx0ZXJyb3JIYW5kbGVyLndhcm5pbmcoJ2F0dHJpYnV0ZSBcIicrYXR0ck5hbWUrJ1wiIG1pc3NlZCBzdGFydCBxdW90KCcrYysnKSEhJyk7XHJcblx0XHRcdFx0c3RhcnQgPSBwKzE7XHJcblx0XHRcdFx0cyA9IFNfQVRUUl9FTkRcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0Ly9mYXRhbEVycm9yOiBubyBlcXVhbCBiZWZvcmVcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2F0dHJpYnV0ZSB2YWx1ZSBtdXN0IGFmdGVyIFwiPVwiJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICcvJzpcclxuXHRcdFx0c3dpdGNoKHMpe1xyXG5cdFx0XHRjYXNlIFNfVEFHOlxyXG5cdFx0XHRcdGVsLnNldFRhZ05hbWUoc291cmNlLnNsaWNlKHN0YXJ0LHApKTtcclxuXHRcdFx0Y2FzZSBTX0FUVFJfRU5EOlxyXG5cdFx0XHRjYXNlIFNfVEFHX1NQQUNFOlxyXG5cdFx0XHRjYXNlIFNfVEFHX0NMT1NFOlxyXG5cdFx0XHRcdHMgPVNfVEFHX0NMT1NFO1xyXG5cdFx0XHRcdGVsLmNsb3NlZCA9IHRydWU7XHJcblx0XHRcdGNhc2UgU19BVFRSX05PUVVPVF9WQUxVRTpcclxuXHRcdFx0Y2FzZSBTX0FUVFI6XHJcblx0XHRcdGNhc2UgU19BVFRSX1NQQUNFOlxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHQvL2Nhc2UgU19FUTpcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhdHRyaWJ1dGUgaW52YWxpZCBjbG9zZSBjaGFyKCcvJylcIilcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJyc6Ly9lbmQgZG9jdW1lbnRcclxuXHRcdFx0Ly90aHJvdyBuZXcgRXJyb3IoJ3VuZXhwZWN0ZWQgZW5kIG9mIGlucHV0JylcclxuXHRcdFx0ZXJyb3JIYW5kbGVyLmVycm9yKCd1bmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcpO1xyXG5cdFx0XHRpZihzID09IFNfVEFHKXtcclxuXHRcdFx0XHRlbC5zZXRUYWdOYW1lKHNvdXJjZS5zbGljZShzdGFydCxwKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHA7XHJcblx0XHRjYXNlICc+JzpcclxuXHRcdFx0c3dpdGNoKHMpe1xyXG5cdFx0XHRjYXNlIFNfVEFHOlxyXG5cdFx0XHRcdGVsLnNldFRhZ05hbWUoc291cmNlLnNsaWNlKHN0YXJ0LHApKTtcclxuXHRcdFx0Y2FzZSBTX0FUVFJfRU5EOlxyXG5cdFx0XHRjYXNlIFNfVEFHX1NQQUNFOlxyXG5cdFx0XHRjYXNlIFNfVEFHX0NMT1NFOlxyXG5cdFx0XHRcdGJyZWFrOy8vbm9ybWFsXHJcblx0XHRcdGNhc2UgU19BVFRSX05PUVVPVF9WQUxVRTovL0NvbXBhdGlibGUgc3RhdGVcclxuXHRcdFx0Y2FzZSBTX0FUVFI6XHJcblx0XHRcdFx0dmFsdWUgPSBzb3VyY2Uuc2xpY2Uoc3RhcnQscCk7XHJcblx0XHRcdFx0aWYodmFsdWUuc2xpY2UoLTEpID09PSAnLycpe1xyXG5cdFx0XHRcdFx0ZWwuY2xvc2VkICA9IHRydWU7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsLTEpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRjYXNlIFNfQVRUUl9TUEFDRTpcclxuXHRcdFx0XHRpZihzID09PSBTX0FUVFJfU1BBQ0Upe1xyXG5cdFx0XHRcdFx0dmFsdWUgPSBhdHRyTmFtZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYocyA9PSBTX0FUVFJfTk9RVU9UX1ZBTFVFKXtcclxuXHRcdFx0XHRcdGVycm9ySGFuZGxlci53YXJuaW5nKCdhdHRyaWJ1dGUgXCInK3ZhbHVlKydcIiBtaXNzZWQgcXVvdChcIikhIScpO1xyXG5cdFx0XHRcdFx0ZWwuYWRkKGF0dHJOYW1lLHZhbHVlLnJlcGxhY2UoLyYjP1xcdys7L2csZW50aXR5UmVwbGFjZXIpLHN0YXJ0KVxyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0aWYoY3VycmVudE5TTWFwWycnXSAhPT0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnIHx8ICF2YWx1ZS5tYXRjaCgvXig/OmRpc2FibGVkfGNoZWNrZWR8c2VsZWN0ZWQpJC9pKSl7XHJcblx0XHRcdFx0XHRcdGVycm9ySGFuZGxlci53YXJuaW5nKCdhdHRyaWJ1dGUgXCInK3ZhbHVlKydcIiBtaXNzZWQgdmFsdWUhISBcIicrdmFsdWUrJ1wiIGluc3RlYWQhIScpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbC5hZGQodmFsdWUsdmFsdWUsc3RhcnQpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIFNfRVE6XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdhdHRyaWJ1dGUgdmFsdWUgbWlzc2VkISEnKTtcclxuXHRcdFx0fVxyXG4vL1x0XHRcdGNvbnNvbGUubG9nKHRhZ05hbWUsdGFnTmFtZVBhdHRlcm4sdGFnTmFtZVBhdHRlcm4udGVzdCh0YWdOYW1lKSlcclxuXHRcdFx0cmV0dXJuIHA7XHJcblx0XHQvKnhtbCBzcGFjZSAnXFx4MjAnIHwgI3g5IHwgI3hEIHwgI3hBOyAqL1xyXG5cdFx0Y2FzZSAnXFx1MDA4MCc6XHJcblx0XHRcdGMgPSAnICc7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRpZihjPD0gJyAnKXsvL3NwYWNlXHJcblx0XHRcdFx0c3dpdGNoKHMpe1xyXG5cdFx0XHRcdGNhc2UgU19UQUc6XHJcblx0XHRcdFx0XHRlbC5zZXRUYWdOYW1lKHNvdXJjZS5zbGljZShzdGFydCxwKSk7Ly90YWdOYW1lXHJcblx0XHRcdFx0XHRzID0gU19UQUdfU1BBQ0U7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFNfQVRUUjpcclxuXHRcdFx0XHRcdGF0dHJOYW1lID0gc291cmNlLnNsaWNlKHN0YXJ0LHApXHJcblx0XHRcdFx0XHRzID0gU19BVFRSX1NQQUNFO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBTX0FUVFJfTk9RVU9UX1ZBTFVFOlxyXG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gc291cmNlLnNsaWNlKHN0YXJ0LHApLnJlcGxhY2UoLyYjP1xcdys7L2csZW50aXR5UmVwbGFjZXIpO1xyXG5cdFx0XHRcdFx0ZXJyb3JIYW5kbGVyLndhcm5pbmcoJ2F0dHJpYnV0ZSBcIicrdmFsdWUrJ1wiIG1pc3NlZCBxdW90KFwiKSEhJyk7XHJcblx0XHRcdFx0XHRlbC5hZGQoYXR0ck5hbWUsdmFsdWUsc3RhcnQpXHJcblx0XHRcdFx0Y2FzZSBTX0FUVFJfRU5EOlxyXG5cdFx0XHRcdFx0cyA9IFNfVEFHX1NQQUNFO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Ly9jYXNlIFNfVEFHX1NQQUNFOlxyXG5cdFx0XHRcdC8vY2FzZSBTX0VROlxyXG5cdFx0XHRcdC8vY2FzZSBTX0FUVFJfU1BBQ0U6XHJcblx0XHRcdFx0Ly9cdHZvaWQoKTticmVhaztcclxuXHRcdFx0XHQvL2Nhc2UgU19UQUdfQ0xPU0U6XHJcblx0XHRcdFx0XHQvL2lnbm9yZSB3YXJuaW5nXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ZWxzZXsvL25vdCBzcGFjZVxyXG4vL1NfVEFHLFx0U19BVFRSLFx0U19FUSxcdFNfQVRUUl9OT1FVT1RfVkFMVUVcclxuLy9TX0FUVFJfU1BBQ0UsXHRTX0FUVFJfRU5ELFx0U19UQUdfU1BBQ0UsIFNfVEFHX0NMT1NFXHJcblx0XHRcdFx0c3dpdGNoKHMpe1xyXG5cdFx0XHRcdC8vY2FzZSBTX1RBRzp2b2lkKCk7YnJlYWs7XHJcblx0XHRcdFx0Ly9jYXNlIFNfQVRUUjp2b2lkKCk7YnJlYWs7XHJcblx0XHRcdFx0Ly9jYXNlIFNfQVRUUl9OT1FVT1RfVkFMVUU6dm9pZCgpO2JyZWFrO1xyXG5cdFx0XHRcdGNhc2UgU19BVFRSX1NQQUNFOlxyXG5cdFx0XHRcdFx0dmFyIHRhZ05hbWUgPSAgZWwudGFnTmFtZTtcclxuXHRcdFx0XHRcdGlmKGN1cnJlbnROU01hcFsnJ10gIT09ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJyB8fCAhYXR0ck5hbWUubWF0Y2goL14oPzpkaXNhYmxlZHxjaGVja2VkfHNlbGVjdGVkKSQvaSkpe1xyXG5cdFx0XHRcdFx0XHRlcnJvckhhbmRsZXIud2FybmluZygnYXR0cmlidXRlIFwiJythdHRyTmFtZSsnXCIgbWlzc2VkIHZhbHVlISEgXCInK2F0dHJOYW1lKydcIiBpbnN0ZWFkMiEhJylcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsLmFkZChhdHRyTmFtZSxhdHRyTmFtZSxzdGFydCk7XHJcblx0XHRcdFx0XHRzdGFydCA9IHA7XHJcblx0XHRcdFx0XHRzID0gU19BVFRSO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBTX0FUVFJfRU5EOlxyXG5cdFx0XHRcdFx0ZXJyb3JIYW5kbGVyLndhcm5pbmcoJ2F0dHJpYnV0ZSBzcGFjZSBpcyByZXF1aXJlZFwiJythdHRyTmFtZSsnXCIhIScpXHJcblx0XHRcdFx0Y2FzZSBTX1RBR19TUEFDRTpcclxuXHRcdFx0XHRcdHMgPSBTX0FUVFI7XHJcblx0XHRcdFx0XHRzdGFydCA9IHA7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFNfRVE6XHJcblx0XHRcdFx0XHRzID0gU19BVFRSX05PUVVPVF9WQUxVRTtcclxuXHRcdFx0XHRcdHN0YXJ0ID0gcDtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgU19UQUdfQ0xPU0U6XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJlbGVtZW50cyBjbG9zZWQgY2hhcmFjdGVyICcvJyBhbmQgJz4nIG11c3QgYmUgY29ubmVjdGVkIHRvXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fS8vZW5kIG91dGVyIHN3aXRjaFxyXG5cdFx0Ly9jb25zb2xlLmxvZygncCsrJyxwKVxyXG5cdFx0cCsrO1xyXG5cdH1cclxufVxyXG4vKipcclxuICogQHJldHVybiB0cnVlIGlmIGhhcyBuZXcgbmFtZXNwYWNlIGRlZmluZVxyXG4gKi9cclxuZnVuY3Rpb24gYXBwZW5kRWxlbWVudChlbCxkb21CdWlsZGVyLGN1cnJlbnROU01hcCl7XHJcblx0dmFyIHRhZ05hbWUgPSBlbC50YWdOYW1lO1xyXG5cdHZhciBsb2NhbE5TTWFwID0gbnVsbDtcclxuXHQvL3ZhciBjdXJyZW50TlNNYXAgPSBwYXJzZVN0YWNrW3BhcnNlU3RhY2subGVuZ3RoLTFdLmN1cnJlbnROU01hcDtcclxuXHR2YXIgaSA9IGVsLmxlbmd0aDtcclxuXHR3aGlsZShpLS0pe1xyXG5cdFx0dmFyIGEgPSBlbFtpXTtcclxuXHRcdHZhciBxTmFtZSA9IGEucU5hbWU7XHJcblx0XHR2YXIgdmFsdWUgPSBhLnZhbHVlO1xyXG5cdFx0dmFyIG5zcCA9IHFOYW1lLmluZGV4T2YoJzonKTtcclxuXHRcdGlmKG5zcD4wKXtcclxuXHRcdFx0dmFyIHByZWZpeCA9IGEucHJlZml4ID0gcU5hbWUuc2xpY2UoMCxuc3ApO1xyXG5cdFx0XHR2YXIgbG9jYWxOYW1lID0gcU5hbWUuc2xpY2UobnNwKzEpO1xyXG5cdFx0XHR2YXIgbnNQcmVmaXggPSBwcmVmaXggPT09ICd4bWxucycgJiYgbG9jYWxOYW1lXHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0bG9jYWxOYW1lID0gcU5hbWU7XHJcblx0XHRcdHByZWZpeCA9IG51bGxcclxuXHRcdFx0bnNQcmVmaXggPSBxTmFtZSA9PT0gJ3htbG5zJyAmJiAnJ1xyXG5cdFx0fVxyXG5cdFx0Ly9jYW4gbm90IHNldCBwcmVmaXgsYmVjYXVzZSBwcmVmaXggIT09ICcnXHJcblx0XHRhLmxvY2FsTmFtZSA9IGxvY2FsTmFtZSA7XHJcblx0XHQvL3ByZWZpeCA9PSBudWxsIGZvciBubyBucyBwcmVmaXggYXR0cmlidXRlIFxyXG5cdFx0aWYobnNQcmVmaXggIT09IGZhbHNlKXsvL2hhY2shIVxyXG5cdFx0XHRpZihsb2NhbE5TTWFwID09IG51bGwpe1xyXG5cdFx0XHRcdGxvY2FsTlNNYXAgPSB7fVxyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coY3VycmVudE5TTWFwLDApXHJcblx0XHRcdFx0X2NvcHkoY3VycmVudE5TTWFwLGN1cnJlbnROU01hcD17fSlcclxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKGN1cnJlbnROU01hcCwxKVxyXG5cdFx0XHR9XHJcblx0XHRcdGN1cnJlbnROU01hcFtuc1ByZWZpeF0gPSBsb2NhbE5TTWFwW25zUHJlZml4XSA9IHZhbHVlO1xyXG5cdFx0XHRhLnVyaSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLydcclxuXHRcdFx0ZG9tQnVpbGRlci5zdGFydFByZWZpeE1hcHBpbmcobnNQcmVmaXgsIHZhbHVlKSBcclxuXHRcdH1cclxuXHR9XHJcblx0dmFyIGkgPSBlbC5sZW5ndGg7XHJcblx0d2hpbGUoaS0tKXtcclxuXHRcdGEgPSBlbFtpXTtcclxuXHRcdHZhciBwcmVmaXggPSBhLnByZWZpeDtcclxuXHRcdGlmKHByZWZpeCl7Ly9ubyBwcmVmaXggYXR0cmlidXRlIGhhcyBubyBuYW1lc3BhY2VcclxuXHRcdFx0aWYocHJlZml4ID09PSAneG1sJyl7XHJcblx0XHRcdFx0YS51cmkgPSAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJztcclxuXHRcdFx0fWlmKHByZWZpeCAhPT0gJ3htbG5zJyl7XHJcblx0XHRcdFx0YS51cmkgPSBjdXJyZW50TlNNYXBbcHJlZml4IHx8ICcnXVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdC8ve2NvbnNvbGUubG9nKCcjIyMnK2EucU5hbWUsZG9tQnVpbGRlci5sb2NhdG9yLnN5c3RlbUlkKycnLGN1cnJlbnROU01hcCxhLnVyaSl9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0dmFyIG5zcCA9IHRhZ05hbWUuaW5kZXhPZignOicpO1xyXG5cdGlmKG5zcD4wKXtcclxuXHRcdHByZWZpeCA9IGVsLnByZWZpeCA9IHRhZ05hbWUuc2xpY2UoMCxuc3ApO1xyXG5cdFx0bG9jYWxOYW1lID0gZWwubG9jYWxOYW1lID0gdGFnTmFtZS5zbGljZShuc3ArMSk7XHJcblx0fWVsc2V7XHJcblx0XHRwcmVmaXggPSBudWxsOy8vaW1wb3J0YW50ISFcclxuXHRcdGxvY2FsTmFtZSA9IGVsLmxvY2FsTmFtZSA9IHRhZ05hbWU7XHJcblx0fVxyXG5cdC8vbm8gcHJlZml4IGVsZW1lbnQgaGFzIGRlZmF1bHQgbmFtZXNwYWNlXHJcblx0dmFyIG5zID0gZWwudXJpID0gY3VycmVudE5TTWFwW3ByZWZpeCB8fCAnJ107XHJcblx0ZG9tQnVpbGRlci5zdGFydEVsZW1lbnQobnMsbG9jYWxOYW1lLHRhZ05hbWUsZWwpO1xyXG5cdC8vZW5kUHJlZml4TWFwcGluZyBhbmQgc3RhcnRQcmVmaXhNYXBwaW5nIGhhdmUgbm90IGFueSBoZWxwIGZvciBkb20gYnVpbGRlclxyXG5cdC8vbG9jYWxOU01hcCA9IG51bGxcclxuXHRpZihlbC5jbG9zZWQpe1xyXG5cdFx0ZG9tQnVpbGRlci5lbmRFbGVtZW50KG5zLGxvY2FsTmFtZSx0YWdOYW1lKTtcclxuXHRcdGlmKGxvY2FsTlNNYXApe1xyXG5cdFx0XHRmb3IocHJlZml4IGluIGxvY2FsTlNNYXApe1xyXG5cdFx0XHRcdGRvbUJ1aWxkZXIuZW5kUHJlZml4TWFwcGluZyhwcmVmaXgpIFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fWVsc2V7XHJcblx0XHRlbC5jdXJyZW50TlNNYXAgPSBjdXJyZW50TlNNYXA7XHJcblx0XHRlbC5sb2NhbE5TTWFwID0gbG9jYWxOU01hcDtcclxuXHRcdC8vcGFyc2VTdGFjay5wdXNoKGVsKTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxufVxyXG5mdW5jdGlvbiBwYXJzZUh0bWxTcGVjaWFsQ29udGVudChzb3VyY2UsZWxTdGFydEVuZCx0YWdOYW1lLGVudGl0eVJlcGxhY2VyLGRvbUJ1aWxkZXIpe1xyXG5cdGlmKC9eKD86c2NyaXB0fHRleHRhcmVhKSQvaS50ZXN0KHRhZ05hbWUpKXtcclxuXHRcdHZhciBlbEVuZFN0YXJ0ID0gIHNvdXJjZS5pbmRleE9mKCc8LycrdGFnTmFtZSsnPicsZWxTdGFydEVuZCk7XHJcblx0XHR2YXIgdGV4dCA9IHNvdXJjZS5zdWJzdHJpbmcoZWxTdGFydEVuZCsxLGVsRW5kU3RhcnQpO1xyXG5cdFx0aWYoL1smPF0vLnRlc3QodGV4dCkpe1xyXG5cdFx0XHRpZigvXnNjcmlwdCQvaS50ZXN0KHRhZ05hbWUpKXtcclxuXHRcdFx0XHQvL2lmKCEvXFxdXFxdPi8udGVzdCh0ZXh0KSl7XHJcblx0XHRcdFx0XHQvL2xleEhhbmRsZXIuc3RhcnRDREFUQSgpO1xyXG5cdFx0XHRcdFx0ZG9tQnVpbGRlci5jaGFyYWN0ZXJzKHRleHQsMCx0ZXh0Lmxlbmd0aCk7XHJcblx0XHRcdFx0XHQvL2xleEhhbmRsZXIuZW5kQ0RBVEEoKTtcclxuXHRcdFx0XHRcdHJldHVybiBlbEVuZFN0YXJ0O1xyXG5cdFx0XHRcdC8vfVxyXG5cdFx0XHR9Ly99ZWxzZXsvL3RleHQgYXJlYVxyXG5cdFx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoLyYjP1xcdys7L2csZW50aXR5UmVwbGFjZXIpO1xyXG5cdFx0XHRcdGRvbUJ1aWxkZXIuY2hhcmFjdGVycyh0ZXh0LDAsdGV4dC5sZW5ndGgpO1xyXG5cdFx0XHRcdHJldHVybiBlbEVuZFN0YXJ0O1xyXG5cdFx0XHQvL31cclxuXHRcdFx0XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBlbFN0YXJ0RW5kKzE7XHJcbn1cclxuZnVuY3Rpb24gZml4U2VsZkNsb3NlZChzb3VyY2UsZWxTdGFydEVuZCx0YWdOYW1lLGNsb3NlTWFwKXtcclxuXHQvL2lmKHRhZ05hbWUgaW4gY2xvc2VNYXApe1xyXG5cdHZhciBwb3MgPSBjbG9zZU1hcFt0YWdOYW1lXTtcclxuXHRpZihwb3MgPT0gbnVsbCl7XHJcblx0XHQvL2NvbnNvbGUubG9nKHRhZ05hbWUpXHJcblx0XHRwb3MgPSAgc291cmNlLmxhc3RJbmRleE9mKCc8LycrdGFnTmFtZSsnPicpXHJcblx0XHRpZihwb3M8ZWxTdGFydEVuZCl7Ly/lv5jorrDpl63lkIhcclxuXHRcdFx0cG9zID0gc291cmNlLmxhc3RJbmRleE9mKCc8LycrdGFnTmFtZSlcclxuXHRcdH1cclxuXHRcdGNsb3NlTWFwW3RhZ05hbWVdID1wb3NcclxuXHR9XHJcblx0cmV0dXJuIHBvczxlbFN0YXJ0RW5kO1xyXG5cdC8vfSBcclxufVxyXG5mdW5jdGlvbiBfY29weShzb3VyY2UsdGFyZ2V0KXtcclxuXHRmb3IodmFyIG4gaW4gc291cmNlKXt0YXJnZXRbbl0gPSBzb3VyY2Vbbl19XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VEQ0Moc291cmNlLHN0YXJ0LGRvbUJ1aWxkZXIsZXJyb3JIYW5kbGVyKXsvL3N1cmUgc3RhcnQgd2l0aCAnPCEnXHJcblx0dmFyIG5leHQ9IHNvdXJjZS5jaGFyQXQoc3RhcnQrMilcclxuXHRzd2l0Y2gobmV4dCl7XHJcblx0Y2FzZSAnLSc6XHJcblx0XHRpZihzb3VyY2UuY2hhckF0KHN0YXJ0ICsgMykgPT09ICctJyl7XHJcblx0XHRcdHZhciBlbmQgPSBzb3VyY2UuaW5kZXhPZignLS0+JyxzdGFydCs0KTtcclxuXHRcdFx0Ly9hcHBlbmQgY29tbWVudCBzb3VyY2Uuc3Vic3RyaW5nKDQsZW5kKS8vPCEtLVxyXG5cdFx0XHRpZihlbmQ+c3RhcnQpe1xyXG5cdFx0XHRcdGRvbUJ1aWxkZXIuY29tbWVudChzb3VyY2Usc3RhcnQrNCxlbmQtc3RhcnQtNCk7XHJcblx0XHRcdFx0cmV0dXJuIGVuZCszO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRlcnJvckhhbmRsZXIuZXJyb3IoXCJVbmNsb3NlZCBjb21tZW50XCIpO1xyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdC8vZXJyb3JcclxuXHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0fVxyXG5cdGRlZmF1bHQ6XHJcblx0XHRpZihzb3VyY2Uuc3Vic3RyKHN0YXJ0KzMsNikgPT0gJ0NEQVRBWycpe1xyXG5cdFx0XHR2YXIgZW5kID0gc291cmNlLmluZGV4T2YoJ11dPicsc3RhcnQrOSk7XHJcblx0XHRcdGRvbUJ1aWxkZXIuc3RhcnRDREFUQSgpO1xyXG5cdFx0XHRkb21CdWlsZGVyLmNoYXJhY3RlcnMoc291cmNlLHN0YXJ0KzksZW5kLXN0YXJ0LTkpO1xyXG5cdFx0XHRkb21CdWlsZGVyLmVuZENEQVRBKCkgXHJcblx0XHRcdHJldHVybiBlbmQrMztcclxuXHRcdH1cclxuXHRcdC8vPCFET0NUWVBFXHJcblx0XHQvL3N0YXJ0RFREKGphdmEubGFuZy5TdHJpbmcgbmFtZSwgamF2YS5sYW5nLlN0cmluZyBwdWJsaWNJZCwgamF2YS5sYW5nLlN0cmluZyBzeXN0ZW1JZCkgXHJcblx0XHR2YXIgbWF0Y2hzID0gc3BsaXQoc291cmNlLHN0YXJ0KTtcclxuXHRcdHZhciBsZW4gPSBtYXRjaHMubGVuZ3RoO1xyXG5cdFx0aWYobGVuPjEgJiYgLyFkb2N0eXBlL2kudGVzdChtYXRjaHNbMF1bMF0pKXtcclxuXHRcdFx0dmFyIG5hbWUgPSBtYXRjaHNbMV1bMF07XHJcblx0XHRcdHZhciBwdWJpZCA9IGxlbj4zICYmIC9ecHVibGljJC9pLnRlc3QobWF0Y2hzWzJdWzBdKSAmJiBtYXRjaHNbM11bMF1cclxuXHRcdFx0dmFyIHN5c2lkID0gbGVuPjQgJiYgbWF0Y2hzWzRdWzBdO1xyXG5cdFx0XHR2YXIgbGFzdE1hdGNoID0gbWF0Y2hzW2xlbi0xXVxyXG5cdFx0XHRkb21CdWlsZGVyLnN0YXJ0RFREKG5hbWUscHViaWQgJiYgcHViaWQucmVwbGFjZSgvXihbJ1wiXSkoLio/KVxcMSQvLCckMicpLFxyXG5cdFx0XHRcdFx0c3lzaWQgJiYgc3lzaWQucmVwbGFjZSgvXihbJ1wiXSkoLio/KVxcMSQvLCckMicpKTtcclxuXHRcdFx0ZG9tQnVpbGRlci5lbmREVEQoKTtcclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiBsYXN0TWF0Y2guaW5kZXgrbGFzdE1hdGNoWzBdLmxlbmd0aFxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gLTE7XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gcGFyc2VJbnN0cnVjdGlvbihzb3VyY2Usc3RhcnQsZG9tQnVpbGRlcil7XHJcblx0dmFyIGVuZCA9IHNvdXJjZS5pbmRleE9mKCc/Picsc3RhcnQpO1xyXG5cdGlmKGVuZCl7XHJcblx0XHR2YXIgbWF0Y2ggPSBzb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0LGVuZCkubWF0Y2goL148XFw/KFxcUyopXFxzKihbXFxzXFxTXSo/KVxccyokLyk7XHJcblx0XHRpZihtYXRjaCl7XHJcblx0XHRcdHZhciBsZW4gPSBtYXRjaFswXS5sZW5ndGg7XHJcblx0XHRcdGRvbUJ1aWxkZXIucHJvY2Vzc2luZ0luc3RydWN0aW9uKG1hdGNoWzFdLCBtYXRjaFsyXSkgO1xyXG5cdFx0XHRyZXR1cm4gZW5kKzI7XHJcblx0XHR9ZWxzZXsvL2Vycm9yXHJcblx0XHRcdHJldHVybiAtMTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIC0xO1xyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtIHNvdXJjZVxyXG4gKi9cclxuZnVuY3Rpb24gRWxlbWVudEF0dHJpYnV0ZXMoc291cmNlKXtcclxuXHRcclxufVxyXG5FbGVtZW50QXR0cmlidXRlcy5wcm90b3R5cGUgPSB7XHJcblx0c2V0VGFnTmFtZTpmdW5jdGlvbih0YWdOYW1lKXtcclxuXHRcdGlmKCF0YWdOYW1lUGF0dGVybi50ZXN0KHRhZ05hbWUpKXtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHRhZ05hbWU6Jyt0YWdOYW1lKVxyXG5cdFx0fVxyXG5cdFx0dGhpcy50YWdOYW1lID0gdGFnTmFtZVxyXG5cdH0sXHJcblx0YWRkOmZ1bmN0aW9uKHFOYW1lLHZhbHVlLG9mZnNldCl7XHJcblx0XHRpZighdGFnTmFtZVBhdHRlcm4udGVzdChxTmFtZSkpe1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYXR0cmlidXRlOicrcU5hbWUpXHJcblx0XHR9XHJcblx0XHR0aGlzW3RoaXMubGVuZ3RoKytdID0ge3FOYW1lOnFOYW1lLHZhbHVlOnZhbHVlLG9mZnNldDpvZmZzZXR9XHJcblx0fSxcclxuXHRsZW5ndGg6MCxcclxuXHRnZXRMb2NhbE5hbWU6ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXNbaV0ubG9jYWxOYW1lfSxcclxuXHRnZXRMb2NhdG9yOmZ1bmN0aW9uKGkpe3JldHVybiB0aGlzW2ldLmxvY2F0b3J9LFxyXG5cdGdldFFOYW1lOmZ1bmN0aW9uKGkpe3JldHVybiB0aGlzW2ldLnFOYW1lfSxcclxuXHRnZXRVUkk6ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXNbaV0udXJpfSxcclxuXHRnZXRWYWx1ZTpmdW5jdGlvbihpKXtyZXR1cm4gdGhpc1tpXS52YWx1ZX1cclxuLy9cdCxnZXRJbmRleDpmdW5jdGlvbih1cmksIGxvY2FsTmFtZSkpe1xyXG4vL1x0XHRpZihsb2NhbE5hbWUpe1xyXG4vL1x0XHRcdFxyXG4vL1x0XHR9ZWxzZXtcclxuLy9cdFx0XHR2YXIgcU5hbWUgPSB1cmlcclxuLy9cdFx0fVxyXG4vL1x0fSxcclxuLy9cdGdldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0VmFsdWUodGhpcy5nZXRJbmRleC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxcclxuLy9cdGdldFR5cGU6ZnVuY3Rpb24odXJpLGxvY2FsTmFtZSl7fVxyXG4vL1x0Z2V0VHlwZTpmdW5jdGlvbihpKXt9LFxyXG59XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBfc2V0X3Byb3RvXyh0aGl6LHBhcmVudCl7XHJcblx0dGhpei5fX3Byb3RvX18gPSBwYXJlbnQ7XHJcblx0cmV0dXJuIHRoaXo7XHJcbn1cclxuaWYoIShfc2V0X3Byb3RvXyh7fSxfc2V0X3Byb3RvXy5wcm90b3R5cGUpIGluc3RhbmNlb2YgX3NldF9wcm90b18pKXtcclxuXHRfc2V0X3Byb3RvXyA9IGZ1bmN0aW9uKHRoaXoscGFyZW50KXtcclxuXHRcdGZ1bmN0aW9uIHAoKXt9O1xyXG5cdFx0cC5wcm90b3R5cGUgPSBwYXJlbnQ7XHJcblx0XHRwID0gbmV3IHAoKTtcclxuXHRcdGZvcihwYXJlbnQgaW4gdGhpeil7XHJcblx0XHRcdHBbcGFyZW50XSA9IHRoaXpbcGFyZW50XTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBwO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gc3BsaXQoc291cmNlLHN0YXJ0KXtcclxuXHR2YXIgbWF0Y2g7XHJcblx0dmFyIGJ1ZiA9IFtdO1xyXG5cdHZhciByZWcgPSAvJ1teJ10rJ3xcIlteXCJdK1wifFteXFxzPD5cXC89XSs9P3woXFwvP1xccyo+fDwpL2c7XHJcblx0cmVnLmxhc3RJbmRleCA9IHN0YXJ0O1xyXG5cdHJlZy5leGVjKHNvdXJjZSk7Ly9za2lwIDxcclxuXHR3aGlsZShtYXRjaCA9IHJlZy5leGVjKHNvdXJjZSkpe1xyXG5cdFx0YnVmLnB1c2gobWF0Y2gpO1xyXG5cdFx0aWYobWF0Y2hbMV0pcmV0dXJuIGJ1ZjtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydHMuWE1MUmVhZGVyID0gWE1MUmVhZGVyO1xyXG5cclxuIiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbnZhciBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSByZXF1aXJlKFwiLi9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3RcIik7XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBpZiAoQ2xhc3MpIHNldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jb25zdHJ1Y3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyB2dHQuanMgQ29udHJpYnV0b3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgYXV0b0tleXdvcmQgPSBcImF1dG9cIjtcbnZhciBkaXJlY3Rpb25TZXR0aW5nID0ge1xuICBcIlwiOiAxLFxuICBcImxyXCI6IDEsXG4gIFwicmxcIjogMVxufTtcbnZhciBhbGlnblNldHRpbmcgPSB7XG4gIFwic3RhcnRcIjogMSxcbiAgXCJjZW50ZXJcIjogMSxcbiAgXCJlbmRcIjogMSxcbiAgXCJsZWZ0XCI6IDEsXG4gIFwicmlnaHRcIjogMSxcbiAgXCJhdXRvXCI6IDEsXG4gIFwibGluZS1sZWZ0XCI6IDEsXG4gIFwibGluZS1yaWdodFwiOiAxXG59O1xuXG5mdW5jdGlvbiBmaW5kRGlyZWN0aW9uU2V0dGluZyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBkaXIgPSBkaXJlY3Rpb25TZXR0aW5nW3ZhbHVlLnRvTG93ZXJDYXNlKCldO1xuICByZXR1cm4gZGlyID8gdmFsdWUudG9Mb3dlckNhc2UoKSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBmaW5kQWxpZ25TZXR0aW5nKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGFsaWduID0gYWxpZ25TZXR0aW5nW3ZhbHVlLnRvTG93ZXJDYXNlKCldO1xuICByZXR1cm4gYWxpZ24gPyB2YWx1ZS50b0xvd2VyQ2FzZSgpIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIFZUVEN1ZShzdGFydFRpbWUsIGVuZFRpbWUsIHRleHQpIHtcbiAgLyoqXG4gICAqIFNoaW0gaW1wbGVtZW50YXRpb24gc3BlY2lmaWMgcHJvcGVydGllcy4gVGhlc2UgcHJvcGVydGllcyBhcmUgbm90IGluXG4gICAqIHRoZSBzcGVjLlxuICAgKi9cblxuICAvLyBMZXRzIHVzIGtub3cgd2hlbiB0aGUgVlRUQ3VlJ3MgZGF0YSBoYXMgY2hhbmdlZCBpbiBzdWNoIGEgd2F5IHRoYXQgd2UgbmVlZFxuICAvLyB0byByZWNvbXB1dGUgaXRzIGRpc3BsYXkgc3RhdGUuIFRoaXMgbGV0cyB1cyBjb21wdXRlIGl0cyBkaXNwbGF5IHN0YXRlXG4gIC8vIGxhemlseS5cbiAgdGhpcy5oYXNCZWVuUmVzZXQgPSBmYWxzZTtcblxuICAvKipcbiAgICogVlRUQ3VlIGFuZCBUZXh0VHJhY2tDdWUgcHJvcGVydGllc1xuICAgKiBodHRwOi8vZGV2LnczLm9yZy9odG1sNS93ZWJ2dHQvI3Z0dGN1ZS1pbnRlcmZhY2VcbiAgICovXG5cbiAgdmFyIF9pZCA9IFwiXCI7XG4gIHZhciBfcGF1c2VPbkV4aXQgPSBmYWxzZTtcbiAgdmFyIF9zdGFydFRpbWUgPSBzdGFydFRpbWU7XG4gIHZhciBfZW5kVGltZSA9IGVuZFRpbWU7XG4gIHZhciBfdGV4dCA9IHRleHQ7XG4gIHZhciBfcmVnaW9uID0gbnVsbDtcbiAgdmFyIF92ZXJ0aWNhbCA9IFwiXCI7XG4gIHZhciBfc25hcFRvTGluZXMgPSB0cnVlO1xuICB2YXIgX2xpbmUgPSBcImF1dG9cIjtcbiAgdmFyIF9saW5lQWxpZ24gPSBcInN0YXJ0XCI7XG4gIHZhciBfcG9zaXRpb24gPSBcImF1dG9cIjtcbiAgdmFyIF9wb3NpdGlvbkFsaWduID0gXCJhdXRvXCI7XG4gIHZhciBfc2l6ZSA9IDEwMDtcbiAgdmFyIF9hbGlnbiA9IFwiY2VudGVyXCI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgIFwiaWRcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfaWQ7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBfaWQgPSBcIlwiICsgdmFsdWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwicGF1c2VPbkV4aXRcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfcGF1c2VPbkV4aXQ7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBfcGF1c2VPbkV4aXQgPSAhIXZhbHVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBcInN0YXJ0VGltZVwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zdGFydFRpbWU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN0YXJ0IHRpbWUgbXVzdCBiZSBzZXQgdG8gYSBudW1iZXIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9zdGFydFRpbWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImVuZFRpbWVcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfZW5kVGltZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRW5kIHRpbWUgbXVzdCBiZSBzZXQgdG8gYSBudW1iZXIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9lbmRUaW1lID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJ0ZXh0XCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RleHQ7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBfdGV4dCA9IFwiXCIgKyB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBcInJlZ2lvblwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9yZWdpb247XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBfcmVnaW9uID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJ2ZXJ0aWNhbFwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF92ZXJ0aWNhbDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBzZXR0aW5nID0gZmluZERpcmVjdGlvblNldHRpbmcodmFsdWUpO1xuICAgICAgICAvLyBIYXZlIHRvIGNoZWNrIGZvciBmYWxzZSBiZWNhdXNlIHRoZSBzZXR0aW5nIGFuIGJlIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgICAgaWYgKHNldHRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVmVydGljYWw6IGFuIGludmFsaWQgb3IgaWxsZWdhbCBkaXJlY3Rpb24gc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF92ZXJ0aWNhbCA9IHNldHRpbmc7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJzbmFwVG9MaW5lc1wiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zbmFwVG9MaW5lcztcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIF9zbmFwVG9MaW5lcyA9ICEhdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJsaW5lXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2xpbmU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiICYmIHZhbHVlICE9PSBhdXRvS2V5d29yZCkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkxpbmU6IGFuIGludmFsaWQgbnVtYmVyIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9saW5lID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJsaW5lQWxpZ25cIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfbGluZUFsaWduO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHNldHRpbmcgPSBmaW5kQWxpZ25TZXR0aW5nKHZhbHVlKTtcbiAgICAgICAgaWYgKCFzZXR0aW5nKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwibGluZUFsaWduOiBhbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9saW5lQWxpZ24gPSBzZXR0aW5nO1xuICAgICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcInBvc2l0aW9uXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3Bvc2l0aW9uO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+IDEwMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBvc2l0aW9uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9wb3NpdGlvbiA9IHZhbHVlO1xuICAgICAgICB0aGlzLmhhc0JlZW5SZXNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwicG9zaXRpb25BbGlnblwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9wb3NpdGlvbkFsaWduO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHNldHRpbmcgPSBmaW5kQWxpZ25TZXR0aW5nKHZhbHVlKTtcbiAgICAgICAgaWYgKCFzZXR0aW5nKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwicG9zaXRpb25BbGlnbjogYW4gaW52YWxpZCBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkLlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfcG9zaXRpb25BbGlnbiA9IHNldHRpbmc7XG4gICAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwic2l6ZVwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zaXplO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+IDEwMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpemUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX3NpemUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNCZWVuUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImFsaWduXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2FsaWduO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHNldHRpbmcgPSBmaW5kQWxpZ25TZXR0aW5nKHZhbHVlKTtcbiAgICAgICAgaWYgKCFzZXR0aW5nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiYWxpZ246IGFuIGludmFsaWQgb3IgaWxsZWdhbCBhbGlnbm1lbnQgc3RyaW5nIHdhcyBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9hbGlnbiA9IHNldHRpbmc7XG4gICAgICAgIHRoaXMuaGFzQmVlblJlc2V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBPdGhlciA8dHJhY2s+IHNwZWMgZGVmaW5lZCBwcm9wZXJ0aWVzXG4gICAqL1xuXG4gIC8vIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RoZS12aWRlby1lbGVtZW50Lmh0bWwjdGV4dC10cmFjay1jdWUtZGlzcGxheS1zdGF0ZVxuICB0aGlzLmRpc3BsYXlTdGF0ZSA9IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBWVFRDdWUgbWV0aG9kc1xuICovXG5cblZUVEN1ZS5wcm90b3R5cGUuZ2V0Q3VlQXNIVE1MID0gZnVuY3Rpb24oKSB7XG4gIC8vIEFzc3VtZSBXZWJWVFQuY29udmVydEN1ZVRvRE9NVHJlZSBpcyBvbiB0aGUgZ2xvYmFsLlxuICByZXR1cm4gV2ViVlRULmNvbnZlcnRDdWVUb0RPTVRyZWUod2luZG93LCB0aGlzLnRleHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBWVFRDdWU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb25cblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uIChmbikge1xuICBpZiAoIWZuKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIHN0cmluZyA9IHRvU3RyaW5nLmNhbGwoZm4pXG4gIHJldHVybiBzdHJpbmcgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScgfHxcbiAgICAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIHN0cmluZyAhPT0gJ1tvYmplY3QgUmVnRXhwXScpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgIC8vIElFOCBhbmQgYmVsb3dcbiAgICAgKGZuID09PSB3aW5kb3cuc2V0VGltZW91dCB8fFxuICAgICAgZm4gPT09IHdpbmRvdy5hbGVydCB8fFxuICAgICAgZm4gPT09IHdpbmRvdy5jb25maXJtIHx8XG4gICAgICBmbiA9PT0gd2luZG93LnByb21wdCkpXG59O1xuIiwiLyohIEBuYW1lIG0zdTgtcGFyc2VyIEB2ZXJzaW9uIDQuNS4wIEBsaWNlbnNlIEFwYWNoZS0yLjAgKi9cbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFN0cmVhbSBmcm9tICdAdmlkZW9qcy92aHMtdXRpbHMvZGlzdC9zdHJlYW0uanMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5pbXBvcnQgZGVjb2RlQjY0VG9VaW50OEFycmF5IGZyb20gJ0B2aWRlb2pzL3Zocy11dGlscy9kaXN0L2RlY29kZS1iNjQtdG8tdWludDgtYXJyYXkuanMnO1xuXG4vKipcbiAqIEEgc3RyZWFtIHRoYXQgYnVmZmVycyBzdHJpbmcgaW5wdXQgYW5kIGdlbmVyYXRlcyBhIGBkYXRhYCBldmVudCBmb3IgZWFjaFxuICogbGluZS5cbiAqXG4gKiBAY2xhc3MgTGluZVN0cmVhbVxuICogQGV4dGVuZHMgU3RyZWFtXG4gKi9cblxudmFyIExpbmVTdHJlYW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TdHJlYW0pIHtcbiAgX2luaGVyaXRzTG9vc2UoTGluZVN0cmVhbSwgX1N0cmVhbSk7XG5cbiAgZnVuY3Rpb24gTGluZVN0cmVhbSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdHJlYW0uY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmJ1ZmZlciA9ICcnO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkIG5ldyBkYXRhIHRvIGJlIHBhcnNlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgdGhlIHRleHQgdG8gcHJvY2Vzc1xuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBMaW5lU3RyZWFtLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucHVzaCA9IGZ1bmN0aW9uIHB1c2goZGF0YSkge1xuICAgIHZhciBuZXh0TmV3bGluZTtcbiAgICB0aGlzLmJ1ZmZlciArPSBkYXRhO1xuICAgIG5leHROZXdsaW5lID0gdGhpcy5idWZmZXIuaW5kZXhPZignXFxuJyk7XG5cbiAgICBmb3IgKDsgbmV4dE5ld2xpbmUgPiAtMTsgbmV4dE5ld2xpbmUgPSB0aGlzLmJ1ZmZlci5pbmRleE9mKCdcXG4nKSkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgdGhpcy5idWZmZXIuc3Vic3RyaW5nKDAsIG5leHROZXdsaW5lKSk7XG4gICAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLnN1YnN0cmluZyhuZXh0TmV3bGluZSArIDEpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gTGluZVN0cmVhbTtcbn0oU3RyZWFtKTtcblxuLyoqXG4gKiBcImZvcmdpdmluZ1wiIGF0dHJpYnV0ZSBsaXN0IHBzdWVkby1ncmFtbWFyOlxuICogYXR0cmlidXRlcyAtPiBrZXl2YWx1ZSAoJywnIGtleXZhbHVlKSpcbiAqIGtleXZhbHVlICAgLT4ga2V5ICc9JyB2YWx1ZVxuICoga2V5ICAgICAgICAtPiBbXj1dKlxuICogdmFsdWUgICAgICAtPiAnXCInIFteXCJdKiAnXCInIHwgW14sXSpcbiAqL1xuXG52YXIgYXR0cmlidXRlU2VwYXJhdG9yID0gZnVuY3Rpb24gYXR0cmlidXRlU2VwYXJhdG9yKCkge1xuICB2YXIga2V5ID0gJ1tePV0qJztcbiAgdmFyIHZhbHVlID0gJ1wiW15cIl0qXCJ8W14sXSonO1xuICB2YXIga2V5dmFsdWUgPSAnKD86JyArIGtleSArICcpPSg/OicgKyB2YWx1ZSArICcpJztcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJyg/Ol58LCkoJyArIGtleXZhbHVlICsgJyknKTtcbn07XG4vKipcbiAqIFBhcnNlIGF0dHJpYnV0ZXMgZnJvbSBhIGxpbmUgZ2l2ZW4gdGhlIHNlcGFyYXRvclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVzIHRoZSBhdHRyaWJ1dGUgbGluZSB0byBwYXJzZVxuICovXG5cblxudmFyIHBhcnNlQXR0cmlidXRlcyA9IGZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gIC8vIHNwbGl0IHRoZSBzdHJpbmcgdXNpbmcgYXR0cmlidXRlcyBhcyB0aGUgc2VwYXJhdG9yXG4gIHZhciBhdHRycyA9IGF0dHJpYnV0ZXMuc3BsaXQoYXR0cmlidXRlU2VwYXJhdG9yKCkpO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIHZhciBpID0gYXR0cnMubGVuZ3RoO1xuICB2YXIgYXR0cjtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgLy8gZmlsdGVyIG91dCB1bm1hdGNoZWQgcG9ydGlvbnMgb2YgdGhlIHN0cmluZ1xuICAgIGlmIChhdHRyc1tpXSA9PT0gJycpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8gc3BsaXQgdGhlIGtleSBhbmQgdmFsdWVcblxuXG4gICAgYXR0ciA9IC8oW149XSopPSguKikvLmV4ZWMoYXR0cnNbaV0pLnNsaWNlKDEpOyAvLyB0cmltIHdoaXRlc3BhY2UgYW5kIHJlbW92ZSBvcHRpb25hbCBxdW90ZXMgYXJvdW5kIHRoZSB2YWx1ZVxuXG4gICAgYXR0clswXSA9IGF0dHJbMF0ucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xuICAgIGF0dHJbMV0gPSBhdHRyWzFdLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbiAgICBhdHRyWzFdID0gYXR0clsxXS5yZXBsYWNlKC9eWydcIl0oLiopWydcIl0kL2csICckMScpO1xuICAgIHJlc3VsdFthdHRyWzBdXSA9IGF0dHJbMV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbi8qKlxuICogQSBsaW5lLWxldmVsIE0zVTggcGFyc2VyIGV2ZW50IHN0cmVhbS4gSXQgZXhwZWN0cyB0byByZWNlaXZlIGlucHV0IG9uZVxuICogbGluZSBhdCBhIHRpbWUgYW5kIHBlcmZvcm1zIGEgY29udGV4dC1mcmVlIHBhcnNlIG9mIGl0cyBjb250ZW50cy4gQSBzdHJlYW1cbiAqIGludGVycHJldGF0aW9uIG9mIGEgbWFuaWZlc3QgY2FuIGJlIHVzZWZ1bCBpZiB0aGUgbWFuaWZlc3QgaXMgZXhwZWN0ZWQgdG9cbiAqIGJlIHRvbyBsYXJnZSB0byBmaXQgY29tZm9ydGFibHkgaW50byBtZW1vcnkgb3IgdGhlIGVudGlyZXR5IG9mIHRoZSBpbnB1dFxuICogaXMgbm90IGltbWVkaWF0ZWx5IGF2YWlsYWJsZS4gT3RoZXJ3aXNlLCBpdCdzIHByb2JhYmx5IG11Y2ggZWFzaWVyIHRvIHdvcmtcbiAqIHdpdGggYSByZWd1bGFyIGBQYXJzZXJgIG9iamVjdC5cbiAqXG4gKiBQcm9kdWNlcyBgZGF0YWAgZXZlbnRzIHdpdGggYW4gb2JqZWN0IHRoYXQgY2FwdHVyZXMgdGhlIHBhcnNlcidzXG4gKiBpbnRlcnByZXRhdGlvbiBvZiB0aGUgaW5wdXQuIFRoYXQgb2JqZWN0IGhhcyBhIHByb3BlcnR5IGB0YWdgIHRoYXQgaXMgb25lXG4gKiBvZiBgdXJpYCwgYGNvbW1lbnRgLCBvciBgdGFnYC4gVVJJcyBvbmx5IGhhdmUgYSBzaW5nbGUgYWRkaXRpb25hbFxuICogcHJvcGVydHksIGBsaW5lYCwgd2hpY2ggY2FwdHVyZXMgdGhlIGVudGlyZXR5IG9mIHRoZSBpbnB1dCB3aXRob3V0XG4gKiBpbnRlcnByZXRhdGlvbi4gQ29tbWVudHMgc2ltaWxhcmx5IGhhdmUgYSBzaW5nbGUgYWRkaXRpb25hbCBwcm9wZXJ0eVxuICogYHRleHRgIHdoaWNoIGlzIHRoZSBpbnB1dCB3aXRob3V0IHRoZSBsZWFkaW5nIGAjYC5cbiAqXG4gKiBUYWdzIGFsd2F5cyBoYXZlIGEgcHJvcGVydHkgYHRhZ1R5cGVgIHdoaWNoIGlzIHRoZSBsb3dlci1jYXNlZCB2ZXJzaW9uIG9mXG4gKiB0aGUgTTNVOCBkaXJlY3RpdmUgd2l0aG91dCB0aGUgYCNFWFRgIG9yIGAjRVhULVgtYCBwcmVmaXguIEZvciBpbnN0YW5jZSxcbiAqIGAjRVhULVgtTUVESUEtU0VRVUVOQ0VgIGJlY29tZXMgYG1lZGlhLXNlcXVlbmNlYCB3aGVuIHBhcnNlZC4gVW5yZWNvZ25pemVkXG4gKiB0YWdzIGFyZSBnaXZlbiB0aGUgdGFnIHR5cGUgYHVua25vd25gIGFuZCBhIHNpbmdsZSBhZGRpdGlvbmFsIHByb3BlcnR5XG4gKiBgZGF0YWAgd2l0aCB0aGUgcmVtYWluZGVyIG9mIHRoZSBpbnB1dC5cbiAqXG4gKiBAY2xhc3MgUGFyc2VTdHJlYW1cbiAqIEBleHRlbmRzIFN0cmVhbVxuICovXG5cblxudmFyIFBhcnNlU3RyZWFtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfU3RyZWFtKSB7XG4gIF9pbmhlcml0c0xvb3NlKFBhcnNlU3RyZWFtLCBfU3RyZWFtKTtcblxuICBmdW5jdGlvbiBQYXJzZVN0cmVhbSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdHJlYW0uY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmN1c3RvbVBhcnNlcnMgPSBbXTtcbiAgICBfdGhpcy50YWdNYXBwZXJzID0gW107XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYW4gYWRkaXRpb25hbCBsaW5lIG9mIGlucHV0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGluZSBhIHNpbmdsZSBsaW5lIG9mIGFuIE0zVTggZmlsZSB0byBwYXJzZVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQYXJzZVN0cmVhbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGxpbmUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBtYXRjaDtcbiAgICB2YXIgZXZlbnQ7IC8vIHN0cmlwIHdoaXRlc3BhY2VcblxuICAgIGxpbmUgPSBsaW5lLnRyaW0oKTtcblxuICAgIGlmIChsaW5lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gaWdub3JlIGVtcHR5IGxpbmVzXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBVUklzXG5cblxuICAgIGlmIChsaW5lWzBdICE9PSAnIycpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIHtcbiAgICAgICAgdHlwZTogJ3VyaScsXG4gICAgICAgIHVyaTogbGluZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBtYXAgdGFnc1xuXG5cbiAgICB2YXIgbmV3TGluZXMgPSB0aGlzLnRhZ01hcHBlcnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG1hcHBlcikge1xuICAgICAgdmFyIG1hcHBlZExpbmUgPSBtYXBwZXIobGluZSk7IC8vIHNraXAgaWYgdW5jaGFuZ2VkXG5cbiAgICAgIGlmIChtYXBwZWRMaW5lID09PSBsaW5lKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2MuY29uY2F0KFttYXBwZWRMaW5lXSk7XG4gICAgfSwgW2xpbmVdKTtcbiAgICBuZXdMaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChuZXdMaW5lKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzMi5jdXN0b21QYXJzZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChfdGhpczIuY3VzdG9tUGFyc2Vyc1tpXS5jYWxsKF90aGlzMiwgbmV3TGluZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gLy8gQ29tbWVudHNcblxuXG4gICAgICBpZiAobmV3TGluZS5pbmRleE9mKCcjRVhUJykgIT09IDApIHtcbiAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ2RhdGEnLCB7XG4gICAgICAgICAgdHlwZTogJ2NvbW1lbnQnLFxuICAgICAgICAgIHRleHQ6IG5ld0xpbmUuc2xpY2UoMSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBzdHJpcCBvZmYgYW55IGNhcnJpYWdlIHJldHVybnMgaGVyZSBzbyB0aGUgcmVnZXggbWF0Y2hpbmdcbiAgICAgIC8vIGRvZXNuJ3QgaGF2ZSB0byBhY2NvdW50IGZvciB0aGVtLlxuXG5cbiAgICAgIG5ld0xpbmUgPSBuZXdMaW5lLnJlcGxhY2UoJ1xccicsICcnKTsgLy8gVGFnc1xuXG4gICAgICBtYXRjaCA9IC9eI0VYVE0zVS8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdtM3UnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFRJTkY6PyhbMC05XFwuXSopPyw/KC4qKT8kLy5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ2luZidcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC5kdXJhdGlvbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoWzJdKSB7XG4gICAgICAgICAgZXZlbnQudGl0bGUgPSBtYXRjaFsyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1UQVJHRVREVVJBVElPTjo/KFswLTkuXSopPy8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICd0YXJnZXRkdXJhdGlvbidcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC5kdXJhdGlvbiA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jWkVOLVRPVEFMLURVUkFUSU9OOj8oWzAtOS5dKik/Ly5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ3RvdGFsZHVyYXRpb24nXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQuZHVyYXRpb24gPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ2RhdGEnLCBldmVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtYXRjaCA9IC9eI0VYVC1YLVZFUlNJT046PyhbMC05Ll0qKT8vLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAndmVyc2lvbidcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC52ZXJzaW9uID0gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1NRURJQS1TRVFVRU5DRTo/KFxcLT9bMC05Ll0qKT8vLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAnbWVkaWEtc2VxdWVuY2UnXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQubnVtYmVyID0gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1ESVNDT05USU5VSVRZLVNFUVVFTkNFOj8oXFwtP1swLTkuXSopPy8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdkaXNjb250aW51aXR5LXNlcXVlbmNlJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgIGV2ZW50Lm51bWJlciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtUExBWUxJU1QtVFlQRTo/KC4qKT8kLy5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ3BsYXlsaXN0LXR5cGUnXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQucGxheWxpc3RUeXBlID0gbWF0Y2hbMV07XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtQllURVJBTkdFOj8oWzAtOS5dKik/QD8oWzAtOS5dKik/Ly5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ2J5dGVyYW5nZSdcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC5sZW5ndGggPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoWzJdKSB7XG4gICAgICAgICAgZXZlbnQub2Zmc2V0ID0gcGFyc2VJbnQobWF0Y2hbMl0sIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1BTExPVy1DQUNIRTo/KFlFU3xOTyk/Ly5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ2FsbG93LWNhY2hlJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgIGV2ZW50LmFsbG93ZWQgPSAhL05PLy50ZXN0KG1hdGNoWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1NQVA6PyguKikkLy5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ21hcCdcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhtYXRjaFsxXSk7XG5cbiAgICAgICAgICBpZiAoYXR0cmlidXRlcy5VUkkpIHtcbiAgICAgICAgICAgIGV2ZW50LnVyaSA9IGF0dHJpYnV0ZXMuVVJJO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLkJZVEVSQU5HRSkge1xuICAgICAgICAgICAgdmFyIF9hdHRyaWJ1dGVzJEJZVEVSQU5HRSA9IGF0dHJpYnV0ZXMuQllURVJBTkdFLnNwbGl0KCdAJyksXG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gX2F0dHJpYnV0ZXMkQllURVJBTkdFWzBdLFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IF9hdHRyaWJ1dGVzJEJZVEVSQU5HRVsxXTtcblxuICAgICAgICAgICAgZXZlbnQuYnl0ZXJhbmdlID0ge307XG5cbiAgICAgICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgICAgZXZlbnQuYnl0ZXJhbmdlLmxlbmd0aCA9IHBhcnNlSW50KGxlbmd0aCwgMTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgICAgIGV2ZW50LmJ5dGVyYW5nZS5vZmZzZXQgPSBwYXJzZUludChvZmZzZXQsIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtU1RSRUFNLUlORjo/KC4qKSQvLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAnc3RyZWFtLWluZidcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC5hdHRyaWJ1dGVzID0gcGFyc2VBdHRyaWJ1dGVzKG1hdGNoWzFdKTtcblxuICAgICAgICAgIGlmIChldmVudC5hdHRyaWJ1dGVzLlJFU09MVVRJT04pIHtcbiAgICAgICAgICAgIHZhciBzcGxpdCA9IGV2ZW50LmF0dHJpYnV0ZXMuUkVTT0xVVElPTi5zcGxpdCgneCcpO1xuICAgICAgICAgICAgdmFyIHJlc29sdXRpb24gPSB7fTtcblxuICAgICAgICAgICAgaWYgKHNwbGl0WzBdKSB7XG4gICAgICAgICAgICAgIHJlc29sdXRpb24ud2lkdGggPSBwYXJzZUludChzcGxpdFswXSwgMTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3BsaXRbMV0pIHtcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbi5oZWlnaHQgPSBwYXJzZUludChzcGxpdFsxXSwgMTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudC5hdHRyaWJ1dGVzLlJFU09MVVRJT04gPSByZXNvbHV0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChldmVudC5hdHRyaWJ1dGVzLkJBTkRXSURUSCkge1xuICAgICAgICAgICAgZXZlbnQuYXR0cmlidXRlcy5CQU5EV0lEVEggPSBwYXJzZUludChldmVudC5hdHRyaWJ1dGVzLkJBTkRXSURUSCwgMTApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChldmVudC5hdHRyaWJ1dGVzWydQUk9HUkFNLUlEJ10pIHtcbiAgICAgICAgICAgIGV2ZW50LmF0dHJpYnV0ZXNbJ1BST0dSQU0tSUQnXSA9IHBhcnNlSW50KGV2ZW50LmF0dHJpYnV0ZXNbJ1BST0dSQU0tSUQnXSwgMTApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1NRURJQTo/KC4qKSQvLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAnbWVkaWEnXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQuYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhtYXRjaFsxXSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtRU5ETElTVC8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdlbmRsaXN0J1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtRElTQ09OVElOVUlUWS8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdkaXNjb250aW51aXR5J1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtUFJPR1JBTS1EQVRFLVRJTUU6PyguKikkLy5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ3Byb2dyYW0tZGF0ZS10aW1lJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgIGV2ZW50LmRhdGVUaW1lU3RyaW5nID0gbWF0Y2hbMV07XG4gICAgICAgICAgZXZlbnQuZGF0ZVRpbWVPYmplY3QgPSBuZXcgRGF0ZShtYXRjaFsxXSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtS0VZOj8oLiopJC8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdrZXknXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQuYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhtYXRjaFsxXSk7IC8vIHBhcnNlIHRoZSBJViBzdHJpbmcgaW50byBhIFVpbnQzMkFycmF5XG5cbiAgICAgICAgICBpZiAoZXZlbnQuYXR0cmlidXRlcy5JVikge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmF0dHJpYnV0ZXMuSVYuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT09ICcweCcpIHtcbiAgICAgICAgICAgICAgZXZlbnQuYXR0cmlidXRlcy5JViA9IGV2ZW50LmF0dHJpYnV0ZXMuSVYuc3Vic3RyaW5nKDIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudC5hdHRyaWJ1dGVzLklWID0gZXZlbnQuYXR0cmlidXRlcy5JVi5tYXRjaCgvLns4fS9nKTtcbiAgICAgICAgICAgIGV2ZW50LmF0dHJpYnV0ZXMuSVZbMF0gPSBwYXJzZUludChldmVudC5hdHRyaWJ1dGVzLklWWzBdLCAxNik7XG4gICAgICAgICAgICBldmVudC5hdHRyaWJ1dGVzLklWWzFdID0gcGFyc2VJbnQoZXZlbnQuYXR0cmlidXRlcy5JVlsxXSwgMTYpO1xuICAgICAgICAgICAgZXZlbnQuYXR0cmlidXRlcy5JVlsyXSA9IHBhcnNlSW50KGV2ZW50LmF0dHJpYnV0ZXMuSVZbMl0sIDE2KTtcbiAgICAgICAgICAgIGV2ZW50LmF0dHJpYnV0ZXMuSVZbM10gPSBwYXJzZUludChldmVudC5hdHRyaWJ1dGVzLklWWzNdLCAxNik7XG4gICAgICAgICAgICBldmVudC5hdHRyaWJ1dGVzLklWID0gbmV3IFVpbnQzMkFycmF5KGV2ZW50LmF0dHJpYnV0ZXMuSVYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWF0Y2ggPSAvXiNFWFQtWC1TVEFSVDo/KC4qKSQvLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAnc3RhcnQnXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgZXZlbnQuYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhtYXRjaFsxXSk7XG4gICAgICAgICAgZXZlbnQuYXR0cmlidXRlc1snVElNRS1PRkZTRVQnXSA9IHBhcnNlRmxvYXQoZXZlbnQuYXR0cmlidXRlc1snVElNRS1PRkZTRVQnXSk7XG4gICAgICAgICAgZXZlbnQuYXR0cmlidXRlcy5QUkVDSVNFID0gL1lFUy8udGVzdChldmVudC5hdHRyaWJ1dGVzLlBSRUNJU0UpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ2RhdGEnLCBldmVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtYXRjaCA9IC9eI0VYVC1YLUNVRS1PVVQtQ09OVDo/KC4qKT8kLy5leGVjKG5ld0xpbmUpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgICAgdGFnVHlwZTogJ2N1ZS1vdXQtY29udCdcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICBldmVudC5kYXRhID0gbWF0Y2hbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXZlbnQuZGF0YSA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ2RhdGEnLCBldmVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtYXRjaCA9IC9eI0VYVC1YLUNVRS1PVVQ6PyguKik/JC8uZXhlYyhuZXdMaW5lKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgIHR5cGU6ICd0YWcnLFxuICAgICAgICAgIHRhZ1R5cGU6ICdjdWUtb3V0J1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgIGV2ZW50LmRhdGEgPSBtYXRjaFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudC5kYXRhID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1hdGNoID0gL14jRVhULVgtQ1VFLUlOOj8oLiopPyQvLmV4ZWMobmV3TGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFnJyxcbiAgICAgICAgICB0YWdUeXBlOiAnY3VlLWluJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgIGV2ZW50LmRhdGEgPSBtYXRjaFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudC5kYXRhID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHVua25vd24gdGFnIHR5cGVcblxuXG4gICAgICBfdGhpczIudHJpZ2dlcignZGF0YScsIHtcbiAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgIGRhdGE6IG5ld0xpbmUuc2xpY2UoNClcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBwYXJzZXIgZm9yIGN1c3RvbSBoZWFkZXJzXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAgIG9wdGlvbnMgICAgICAgICAgICAgIGEgbWFwIG9mIG9wdGlvbnMgZm9yIHRoZSBhZGRlZCBwYXJzZXJcbiAgICogQHBhcmFtIHtSZWdFeHB9ICAgb3B0aW9ucy5leHByZXNzaW9uICAgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggdGhlIGN1c3RvbSBoZWFkZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgb3B0aW9ucy5jdXN0b21UeXBlICAgdGhlIGN1c3RvbSB0eXBlIHRvIHJlZ2lzdGVyIHRvIHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuZGF0YVBhcnNlcl0gZnVuY3Rpb24gdG8gcGFyc2UgdGhlIGxpbmUgaW50byBhbiBvYmplY3RcbiAgICogQHBhcmFtIHtib29sZWFufSAgW29wdGlvbnMuc2VnbWVudF0gICAgc2hvdWxkIHRhZyBkYXRhIGJlIGF0dGFjaGVkIHRvIHRoZSBzZWdtZW50IG9iamVjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRQYXJzZXIgPSBmdW5jdGlvbiBhZGRQYXJzZXIoX3JlZikge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4cHJlc3Npb24gPSBfcmVmLmV4cHJlc3Npb24sXG4gICAgICAgIGN1c3RvbVR5cGUgPSBfcmVmLmN1c3RvbVR5cGUsXG4gICAgICAgIGRhdGFQYXJzZXIgPSBfcmVmLmRhdGFQYXJzZXIsXG4gICAgICAgIHNlZ21lbnQgPSBfcmVmLnNlZ21lbnQ7XG5cbiAgICBpZiAodHlwZW9mIGRhdGFQYXJzZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRhdGFQYXJzZXIgPSBmdW5jdGlvbiBkYXRhUGFyc2VyKGxpbmUpIHtcbiAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuY3VzdG9tUGFyc2Vycy5wdXNoKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBleHByZXNzaW9uLmV4ZWMobGluZSk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBfdGhpczMudHJpZ2dlcignZGF0YScsIHtcbiAgICAgICAgICB0eXBlOiAnY3VzdG9tJyxcbiAgICAgICAgICBkYXRhOiBkYXRhUGFyc2VyKGxpbmUpLFxuICAgICAgICAgIGN1c3RvbVR5cGU6IGN1c3RvbVR5cGUsXG4gICAgICAgICAgc2VnbWVudDogc2VnbWVudFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIGhlYWRlciBtYXBwZXJcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICAgb3B0aW9uc1xuICAgKiBAcGFyYW0ge1JlZ0V4cH0gICBvcHRpb25zLmV4cHJlc3Npb24gICBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCB0aGUgY3VzdG9tIGhlYWRlclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLm1hcCAgICAgICAgICBmdW5jdGlvbiB0byB0cmFuc2xhdGUgdGFnIGludG8gYSBkaWZmZXJlbnQgdGFnXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFRhZ01hcHBlciA9IGZ1bmN0aW9uIGFkZFRhZ01hcHBlcihfcmVmMikge1xuICAgIHZhciBleHByZXNzaW9uID0gX3JlZjIuZXhwcmVzc2lvbixcbiAgICAgICAgbWFwID0gX3JlZjIubWFwO1xuXG4gICAgdmFyIG1hcEZuID0gZnVuY3Rpb24gbWFwRm4obGluZSkge1xuICAgICAgaWYgKGV4cHJlc3Npb24udGVzdChsaW5lKSkge1xuICAgICAgICByZXR1cm4gbWFwKGxpbmUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuXG4gICAgdGhpcy50YWdNYXBwZXJzLnB1c2gobWFwRm4pO1xuICB9O1xuXG4gIHJldHVybiBQYXJzZVN0cmVhbTtcbn0oU3RyZWFtKTtcblxuLyoqXG4gKiBBIHBhcnNlciBmb3IgTTNVOCBmaWxlcy4gVGhlIGN1cnJlbnQgaW50ZXJwcmV0YXRpb24gb2YgdGhlIGlucHV0IGlzXG4gKiBleHBvc2VkIGFzIGEgcHJvcGVydHkgYG1hbmlmZXN0YCBvbiBwYXJzZXIgb2JqZWN0cy4gSXQncyBqdXN0IHR3byBsaW5lcyB0b1xuICogY3JlYXRlIGFuZCBwYXJzZSBhIG1hbmlmZXN0IG9uY2UgeW91IGhhdmUgdGhlIGNvbnRlbnRzIGF2YWlsYWJsZSBhcyBhIHN0cmluZzpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHBhcnNlciA9IG5ldyBtM3U4LlBhcnNlcigpO1xuICogcGFyc2VyLnB1c2goeGhyLnJlc3BvbnNlVGV4dCk7XG4gKiBgYGBcbiAqXG4gKiBOZXcgaW5wdXQgY2FuIGxhdGVyIGJlIGFwcGxpZWQgdG8gdXBkYXRlIHRoZSBtYW5pZmVzdCBvYmplY3QgYnkgY2FsbGluZ1xuICogYHB1c2hgIGFnYWluLlxuICpcbiAqIFRoZSBwYXJzZXIgYXR0ZW1wdHMgdG8gY3JlYXRlIGEgdXNhYmxlIG1hbmlmZXN0IG9iamVjdCBldmVuIGlmIHRoZVxuICogdW5kZXJseWluZyBpbnB1dCBpcyBzb21ld2hhdCBub25zZW5zaWNhbC4gSXQgZW1pdHMgYGluZm9gIGFuZCBgd2FybmluZ2BcbiAqIGV2ZW50cyBkdXJpbmcgdGhlIHBhcnNlIGlmIGl0IGVuY291bnRlcnMgaW5wdXQgdGhhdCBzZWVtcyBpbnZhbGlkIG9yXG4gKiByZXF1aXJlcyBzb21lIHByb3BlcnR5IG9mIHRoZSBtYW5pZmVzdCBvYmplY3QgdG8gYmUgZGVmYXVsdGVkLlxuICpcbiAqIEBjbGFzcyBQYXJzZXJcbiAqIEBleHRlbmRzIFN0cmVhbVxuICovXG5cbnZhciBQYXJzZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TdHJlYW0pIHtcbiAgX2luaGVyaXRzTG9vc2UoUGFyc2VyLCBfU3RyZWFtKTtcblxuICBmdW5jdGlvbiBQYXJzZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfU3RyZWFtLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICBfdGhpcy5saW5lU3RyZWFtID0gbmV3IExpbmVTdHJlYW0oKTtcbiAgICBfdGhpcy5wYXJzZVN0cmVhbSA9IG5ldyBQYXJzZVN0cmVhbSgpO1xuXG4gICAgX3RoaXMubGluZVN0cmVhbS5waXBlKF90aGlzLnBhcnNlU3RyZWFtKTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXRoaXMgKi9cblxuXG4gICAgdmFyIHNlbGYgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIGNvbnNpc3RlbnQtdGhpcyAqL1xuXG5cbiAgICB2YXIgdXJpcyA9IFtdO1xuICAgIHZhciBjdXJyZW50VXJpID0ge307IC8vIGlmIHNwZWNpZmllZCwgdGhlIGFjdGl2ZSBFWFQtWC1NQVAgZGVmaW5pdGlvblxuXG4gICAgdmFyIGN1cnJlbnRNYXA7IC8vIGlmIHNwZWNpZmllZCwgdGhlIGFjdGl2ZSBkZWNyeXB0aW9uIGtleVxuXG4gICAgdmFyIF9rZXk7XG5cbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuICAgIHZhciBkZWZhdWx0TWVkaWFHcm91cHMgPSB7XG4gICAgICAnQVVESU8nOiB7fSxcbiAgICAgICdWSURFTyc6IHt9LFxuICAgICAgJ0NMT1NFRC1DQVBUSU9OUyc6IHt9LFxuICAgICAgJ1NVQlRJVExFUyc6IHt9XG4gICAgfTsgLy8gVGhpcyBpcyB0aGUgV2lkZXZpbmUgVVVJRCBmcm9tIERBU0ggSUYgSU9QLiBUaGUgc2FtZSBleGFjdCBzdHJpbmcgaXNcbiAgICAvLyB1c2VkIGluIE1QRHMgd2l0aCBXaWRldmluZSBlbmNyeXB0ZWQgc3RyZWFtcy5cblxuICAgIHZhciB3aWRldmluZVV1aWQgPSAndXJuOnV1aWQ6ZWRlZjhiYTktNzlkNi00YWNlLWEzYzgtMjdkY2Q1MWQyMWVkJzsgLy8gZ3JvdXAgc2VnbWVudHMgaW50byBudW1iZXJlZCB0aW1lbGluZXMgZGVsaW5lYXRlZCBieSBkaXNjb250aW51aXRpZXNcblxuICAgIHZhciBjdXJyZW50VGltZWxpbmUgPSAwOyAvLyB0aGUgbWFuaWZlc3QgaXMgZW1wdHkgdW50aWwgdGhlIHBhcnNlIHN0cmVhbSBiZWdpbnMgZGVsaXZlcmluZyBkYXRhXG5cbiAgICBfdGhpcy5tYW5pZmVzdCA9IHtcbiAgICAgIGFsbG93Q2FjaGU6IHRydWUsXG4gICAgICBkaXNjb250aW51aXR5U3RhcnRzOiBbXSxcbiAgICAgIHNlZ21lbnRzOiBbXVxuICAgIH07IC8vIGtlZXAgdHJhY2sgb2YgdGhlIGxhc3Qgc2VlbiBzZWdtZW50J3MgYnl0ZSByYW5nZSBlbmQsIGFzIHNlZ21lbnRzIGFyZSBub3QgcmVxdWlyZWRcbiAgICAvLyB0byBwcm92aWRlIHRoZSBvZmZzZXQsIGluIHdoaWNoIGNhc2UgaXQgZGVmYXVsdHMgdG8gdGhlIG5leHQgYnl0ZSBhZnRlciB0aGVcbiAgICAvLyBwcmV2aW91cyBzZWdtZW50XG5cbiAgICB2YXIgbGFzdEJ5dGVyYW5nZUVuZCA9IDA7IC8vIHVwZGF0ZSB0aGUgbWFuaWZlc3Qgd2l0aCB0aGUgbTN1OCBlbnRyeSBmcm9tIHRoZSBwYXJzZSBzdHJlYW1cblxuICAgIF90aGlzLnBhcnNlU3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICB2YXIgbWVkaWFHcm91cDtcbiAgICAgIHZhciByZW5kaXRpb247XG4gICAgICAoe1xuICAgICAgICB0YWc6IGZ1bmN0aW9uIHRhZygpIHtcbiAgICAgICAgICAvLyBzd2l0Y2ggYmFzZWQgb24gdGhlIHRhZyB0eXBlXG4gICAgICAgICAgKCh7XG4gICAgICAgICAgICAnYWxsb3ctY2FjaGUnOiBmdW5jdGlvbiBhbGxvd0NhY2hlKCkge1xuICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LmFsbG93Q2FjaGUgPSBlbnRyeS5hbGxvd2VkO1xuXG4gICAgICAgICAgICAgIGlmICghKCdhbGxvd2VkJyBpbiBlbnRyeSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2luZm8nLCB7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnZGVmYXVsdGluZyBhbGxvd0NhY2hlIHRvIFlFUydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LmFsbG93Q2FjaGUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnl0ZXJhbmdlOiBmdW5jdGlvbiBieXRlcmFuZ2UoKSB7XG4gICAgICAgICAgICAgIHZhciBieXRlcmFuZ2UgPSB7fTtcblxuICAgICAgICAgICAgICBpZiAoJ2xlbmd0aCcgaW4gZW50cnkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VXJpLmJ5dGVyYW5nZSA9IGJ5dGVyYW5nZTtcbiAgICAgICAgICAgICAgICBieXRlcmFuZ2UubGVuZ3RoID0gZW50cnkubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgaWYgKCEoJ29mZnNldCcgaW4gZW50cnkpKSB7XG4gICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICogRnJvbSB0aGUgbGF0ZXN0IHNwZWMgKGFzIG9mIHRoaXMgd3JpdGluZyk6XG4gICAgICAgICAgICAgICAgICAgKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtcGFudG9zLWh0dHAtbGl2ZS1zdHJlYW1pbmctMjMjc2VjdGlvbi00LjMuMi4yXG4gICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICogU2FtZSB0ZXh0IHNpbmNlIEVYVC1YLUJZVEVSQU5HRSdzIGludHJvZHVjdGlvbiBpbiBkcmFmdCA3OlxuICAgICAgICAgICAgICAgICAgICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LXBhbnRvcy1odHRwLWxpdmUtc3RyZWFtaW5nLTA3I3NlY3Rpb24tMy4zLjEpXG4gICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICogXCJJZiBvIFtvZmZzZXRdIGlzIG5vdCBwcmVzZW50LCB0aGUgc3ViLXJhbmdlIGJlZ2lucyBhdCB0aGUgbmV4dCBieXRlXG4gICAgICAgICAgICAgICAgICAgKiBmb2xsb3dpbmcgdGhlIHN1Yi1yYW5nZSBvZiB0aGUgcHJldmlvdXMgbWVkaWEgc2VnbWVudC5cIlxuICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICBlbnRyeS5vZmZzZXQgPSBsYXN0Qnl0ZXJhbmdlRW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgnb2Zmc2V0JyBpbiBlbnRyeSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRVcmkuYnl0ZXJhbmdlID0gYnl0ZXJhbmdlO1xuICAgICAgICAgICAgICAgIGJ5dGVyYW5nZS5vZmZzZXQgPSBlbnRyeS5vZmZzZXQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBsYXN0Qnl0ZXJhbmdlRW5kID0gYnl0ZXJhbmdlLm9mZnNldCArIGJ5dGVyYW5nZS5sZW5ndGg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5kbGlzdDogZnVuY3Rpb24gZW5kbGlzdCgpIHtcbiAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5lbmRMaXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmY6IGZ1bmN0aW9uIGluZigpIHtcbiAgICAgICAgICAgICAgaWYgKCEoJ21lZGlhU2VxdWVuY2UnIGluIHRoaXMubWFuaWZlc3QpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5tZWRpYVNlcXVlbmNlID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2luZm8nLCB7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnZGVmYXVsdGluZyBtZWRpYSBzZXF1ZW5jZSB0byB6ZXJvJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCEoJ2Rpc2NvbnRpbnVpdHlTZXF1ZW5jZScgaW4gdGhpcy5tYW5pZmVzdCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LmRpc2NvbnRpbnVpdHlTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdpbmZvJywge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2RlZmF1bHRpbmcgZGlzY29udGludWl0eSBzZXF1ZW5jZSB0byB6ZXJvJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGVudHJ5LmR1cmF0aW9uID4gMCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRVcmkuZHVyYXRpb24gPSBlbnRyeS5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5kdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRVcmkuZHVyYXRpb24gPSAwLjAxO1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignaW5mbycsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICd1cGRhdGluZyB6ZXJvIHNlZ21lbnQgZHVyYXRpb24gdG8gYSBzbWFsbCB2YWx1ZSdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMubWFuaWZlc3Quc2VnbWVudHMgPSB1cmlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGtleTogZnVuY3Rpb24ga2V5KCkge1xuICAgICAgICAgICAgICBpZiAoIWVudHJ5LmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3dhcm4nLCB7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaWdub3Jpbmcga2V5IGRlY2xhcmF0aW9uIHdpdGhvdXQgYXR0cmlidXRlIGxpc3QnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IC8vIGNsZWFyIHRoZSBhY3RpdmUgZW5jcnlwdGlvbiBrZXlcblxuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5hdHRyaWJ1dGVzLk1FVEhPRCA9PT0gJ05PTkUnKSB7XG4gICAgICAgICAgICAgICAgX2tleSA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFlbnRyeS5hdHRyaWJ1dGVzLlVSSSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpZ25vcmluZyBrZXkgZGVjbGFyYXRpb24gd2l0aG91dCBVUkknXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IC8vIGNoZWNrIGlmIHRoZSBjb250ZW50IGlzIGVuY3J5cHRlZCBmb3IgV2lkZXZpbmVcbiAgICAgICAgICAgICAgLy8gV2lkZXZpbmUvSExTIHNwZWM6IGh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS93dmRvY3MvV2lkZXZpbmVfRFJNX0hMUy5wZGZcblxuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5hdHRyaWJ1dGVzLktFWUZPUk1BVCA9PT0gd2lkZXZpbmVVdWlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIFZBTElEX01FVEhPRFMgPSBbJ1NBTVBMRS1BRVMnLCAnU0FNUExFLUFFUy1DVFInLCAnU0FNUExFLUFFUy1DRU5DJ107XG5cbiAgICAgICAgICAgICAgICBpZiAoVkFMSURfTUVUSE9EUy5pbmRleE9mKGVudHJ5LmF0dHJpYnV0ZXMuTUVUSE9EKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2ludmFsaWQga2V5IG1ldGhvZCBwcm92aWRlZCBmb3IgV2lkZXZpbmUnXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuYXR0cmlidXRlcy5NRVRIT0QgPT09ICdTQU1QTEUtQUVTLUNFTkMnKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3dhcm4nLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTQU1QTEUtQUVTLUNFTkMgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBTQU1QTEUtQUVTLUNUUiBpbnN0ZWFkJ1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmF0dHJpYnV0ZXMuVVJJLnN1YnN0cmluZygwLCAyMykgIT09ICdkYXRhOnRleHQvcGxhaW47YmFzZTY0LCcpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2ludmFsaWQga2V5IFVSSSBwcm92aWRlZCBmb3IgV2lkZXZpbmUnXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIShlbnRyeS5hdHRyaWJ1dGVzLktFWUlEICYmIGVudHJ5LmF0dHJpYnV0ZXMuS0VZSUQuc3Vic3RyaW5nKDAsIDIpID09PSAnMHgnKSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd3YXJuJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW52YWxpZCBrZXkgSUQgcHJvdmlkZWQgZm9yIFdpZGV2aW5lJ1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSAvLyBpZiBXaWRldmluZSBrZXkgYXR0cmlidXRlcyBhcmUgdmFsaWQsIHN0b3JlIHRoZW0gYXMgYGNvbnRlbnRQcm90ZWN0aW9uYFxuICAgICAgICAgICAgICAgIC8vIG9uIHRoZSBtYW5pZmVzdCB0byBlbXVsYXRlIFdpZGV2aW5lIHRhZyBzdHJ1Y3R1cmUgaW4gYSBEQVNIIG1wZFxuXG5cbiAgICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LmNvbnRlbnRQcm90ZWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgJ2NvbS53aWRldmluZS5hbHBoYSc6IHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgIHNjaGVtZUlkVXJpOiBlbnRyeS5hdHRyaWJ1dGVzLktFWUZPUk1BVCxcbiAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgJzB4JyBmcm9tIHRoZSBrZXkgaWQgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAga2V5SWQ6IGVudHJ5LmF0dHJpYnV0ZXMuS0VZSUQuc3Vic3RyaW5nKDIpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlY29kZSB0aGUgYmFzZTY0LWVuY29kZWQgUFNTSCBib3hcbiAgICAgICAgICAgICAgICAgICAgcHNzaDogZGVjb2RlQjY0VG9VaW50OEFycmF5KGVudHJ5LmF0dHJpYnV0ZXMuVVJJLnNwbGl0KCcsJylbMV0pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIWVudHJ5LmF0dHJpYnV0ZXMuTUVUSE9EKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd3YXJuJywge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2RlZmF1bHRpbmcga2V5IG1ldGhvZCB0byBBRVMtMTI4J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IC8vIHNldHVwIGFuIGVuY3J5cHRpb24ga2V5IGZvciB1cGNvbWluZyBzZWdtZW50c1xuXG5cbiAgICAgICAgICAgICAgX2tleSA9IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGVudHJ5LmF0dHJpYnV0ZXMuTUVUSE9EIHx8ICdBRVMtMTI4JyxcbiAgICAgICAgICAgICAgICB1cmk6IGVudHJ5LmF0dHJpYnV0ZXMuVVJJXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbnRyeS5hdHRyaWJ1dGVzLklWICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIF9rZXkuaXYgPSBlbnRyeS5hdHRyaWJ1dGVzLklWO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ21lZGlhLXNlcXVlbmNlJzogZnVuY3Rpb24gbWVkaWFTZXF1ZW5jZSgpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShlbnRyeS5udW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd3YXJuJywge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2lnbm9yaW5nIGludmFsaWQgbWVkaWEgc2VxdWVuY2U6ICcgKyBlbnRyeS5udW1iZXJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0Lm1lZGlhU2VxdWVuY2UgPSBlbnRyeS5udW1iZXI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2Rpc2NvbnRpbnVpdHktc2VxdWVuY2UnOiBmdW5jdGlvbiBkaXNjb250aW51aXR5U2VxdWVuY2UoKSB7XG4gICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoZW50cnkubnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpZ25vcmluZyBpbnZhbGlkIGRpc2NvbnRpbnVpdHkgc2VxdWVuY2U6ICcgKyBlbnRyeS5udW1iZXJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LmRpc2NvbnRpbnVpdHlTZXF1ZW5jZSA9IGVudHJ5Lm51bWJlcjtcbiAgICAgICAgICAgICAgY3VycmVudFRpbWVsaW5lID0gZW50cnkubnVtYmVyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdwbGF5bGlzdC10eXBlJzogZnVuY3Rpb24gcGxheWxpc3RUeXBlKCkge1xuICAgICAgICAgICAgICBpZiAoIS9WT0R8RVZFTlQvLnRlc3QoZW50cnkucGxheWxpc3RUeXBlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpZ25vcmluZyB1bmtub3duIHBsYXlsaXN0IHR5cGU6ICcgKyBlbnRyeS5wbGF5bGlzdFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QucGxheWxpc3RUeXBlID0gZW50cnkucGxheWxpc3RUeXBlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hcDogZnVuY3Rpb24gbWFwKCkge1xuICAgICAgICAgICAgICBjdXJyZW50TWFwID0ge307XG5cbiAgICAgICAgICAgICAgaWYgKGVudHJ5LnVyaSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRNYXAudXJpID0gZW50cnkudXJpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGVudHJ5LmJ5dGVyYW5nZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRNYXAuYnl0ZXJhbmdlID0gZW50cnkuYnl0ZXJhbmdlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3N0cmVhbS1pbmYnOiBmdW5jdGlvbiBzdHJlYW1JbmYoKSB7XG4gICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QucGxheWxpc3RzID0gdXJpcztcbiAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5tZWRpYUdyb3VwcyA9IHRoaXMubWFuaWZlc3QubWVkaWFHcm91cHMgfHwgZGVmYXVsdE1lZGlhR3JvdXBzO1xuXG4gICAgICAgICAgICAgIGlmICghZW50cnkuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignd2FybicsIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpZ25vcmluZyBlbXB0eSBzdHJlYW0taW5mIGF0dHJpYnV0ZXMnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFjdXJyZW50VXJpLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VXJpLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIF9leHRlbmRzKGN1cnJlbnRVcmkuYXR0cmlidXRlcywgZW50cnkuYXR0cmlidXRlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWVkaWE6IGZ1bmN0aW9uIG1lZGlhKCkge1xuICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0Lm1lZGlhR3JvdXBzID0gdGhpcy5tYW5pZmVzdC5tZWRpYUdyb3VwcyB8fCBkZWZhdWx0TWVkaWFHcm91cHM7XG5cbiAgICAgICAgICAgICAgaWYgKCEoZW50cnkuYXR0cmlidXRlcyAmJiBlbnRyeS5hdHRyaWJ1dGVzLlRZUEUgJiYgZW50cnkuYXR0cmlidXRlc1snR1JPVVAtSUQnXSAmJiBlbnRyeS5hdHRyaWJ1dGVzLk5BTUUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd3YXJuJywge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2lnbm9yaW5nIGluY29tcGxldGUgb3IgbWlzc2luZyBtZWRpYSBncm91cCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH0gLy8gZmluZCB0aGUgbWVkaWEgZ3JvdXAsIGNyZWF0aW5nIGRlZmF1bHRzIGFzIG5lY2Vzc2FyeVxuXG5cbiAgICAgICAgICAgICAgdmFyIG1lZGlhR3JvdXBUeXBlID0gdGhpcy5tYW5pZmVzdC5tZWRpYUdyb3Vwc1tlbnRyeS5hdHRyaWJ1dGVzLlRZUEVdO1xuICAgICAgICAgICAgICBtZWRpYUdyb3VwVHlwZVtlbnRyeS5hdHRyaWJ1dGVzWydHUk9VUC1JRCddXSA9IG1lZGlhR3JvdXBUeXBlW2VudHJ5LmF0dHJpYnV0ZXNbJ0dST1VQLUlEJ11dIHx8IHt9O1xuICAgICAgICAgICAgICBtZWRpYUdyb3VwID0gbWVkaWFHcm91cFR5cGVbZW50cnkuYXR0cmlidXRlc1snR1JPVVAtSUQnXV07IC8vIGNvbGxlY3QgdGhlIHJlbmRpdGlvbiBtZXRhZGF0YVxuXG4gICAgICAgICAgICAgIHJlbmRpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAveWVzL2kudGVzdChlbnRyeS5hdHRyaWJ1dGVzLkRFRkFVTFQpXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgaWYgKHJlbmRpdGlvbi5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgcmVuZGl0aW9uLmF1dG9zZWxlY3QgPSB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbmRpdGlvbi5hdXRvc2VsZWN0ID0gL3llcy9pLnRlc3QoZW50cnkuYXR0cmlidXRlcy5BVVRPU0VMRUNUKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5hdHRyaWJ1dGVzLkxBTkdVQUdFKSB7XG4gICAgICAgICAgICAgICAgcmVuZGl0aW9uLmxhbmd1YWdlID0gZW50cnkuYXR0cmlidXRlcy5MQU5HVUFHRTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5hdHRyaWJ1dGVzLlVSSSkge1xuICAgICAgICAgICAgICAgIHJlbmRpdGlvbi51cmkgPSBlbnRyeS5hdHRyaWJ1dGVzLlVSSTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5hdHRyaWJ1dGVzWydJTlNUUkVBTS1JRCddKSB7XG4gICAgICAgICAgICAgICAgcmVuZGl0aW9uLmluc3RyZWFtSWQgPSBlbnRyeS5hdHRyaWJ1dGVzWydJTlNUUkVBTS1JRCddO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGVudHJ5LmF0dHJpYnV0ZXMuQ0hBUkFDVEVSSVNUSUNTKSB7XG4gICAgICAgICAgICAgICAgcmVuZGl0aW9uLmNoYXJhY3RlcmlzdGljcyA9IGVudHJ5LmF0dHJpYnV0ZXMuQ0hBUkFDVEVSSVNUSUNTO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGVudHJ5LmF0dHJpYnV0ZXMuRk9SQ0VEKSB7XG4gICAgICAgICAgICAgICAgcmVuZGl0aW9uLmZvcmNlZCA9IC95ZXMvaS50ZXN0KGVudHJ5LmF0dHJpYnV0ZXMuRk9SQ0VEKTtcbiAgICAgICAgICAgICAgfSAvLyBpbnNlcnQgdGhlIG5ldyByZW5kaXRpb25cblxuXG4gICAgICAgICAgICAgIG1lZGlhR3JvdXBbZW50cnkuYXR0cmlidXRlcy5OQU1FXSA9IHJlbmRpdGlvbjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNjb250aW51aXR5OiBmdW5jdGlvbiBkaXNjb250aW51aXR5KCkge1xuICAgICAgICAgICAgICBjdXJyZW50VGltZWxpbmUgKz0gMTtcbiAgICAgICAgICAgICAgY3VycmVudFVyaS5kaXNjb250aW51aXR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5kaXNjb250aW51aXR5U3RhcnRzLnB1c2godXJpcy5sZW5ndGgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdwcm9ncmFtLWRhdGUtdGltZSc6IGZ1bmN0aW9uIHByb2dyYW1EYXRlVGltZSgpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm1hbmlmZXN0LmRhdGVUaW1lU3RyaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIC8vIFBST0dSQU0tREFURS1USU1FIGlzIGEgbWVkaWEtc2VnbWVudCB0YWcsIGJ1dCBmb3IgYmFja3dhcmRzXG4gICAgICAgICAgICAgICAgLy8gY29tcGF0aWJpbGl0eSwgd2UgYWRkIHRoZSBmaXJzdCBvY2N1cmVuY2Ugb2YgdGhlIFBST0dSQU0tREFURS1USU1FIHRhZ1xuICAgICAgICAgICAgICAgIC8vIHRvIHRoZSBtYW5pZmVzdCBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBDb25zaWRlciByZW1vdmluZyB0aGlzIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5kYXRlVGltZVN0cmluZyA9IGVudHJ5LmRhdGVUaW1lU3RyaW5nO1xuICAgICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QuZGF0ZVRpbWVPYmplY3QgPSBlbnRyeS5kYXRlVGltZU9iamVjdDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGN1cnJlbnRVcmkuZGF0ZVRpbWVTdHJpbmcgPSBlbnRyeS5kYXRlVGltZVN0cmluZztcbiAgICAgICAgICAgICAgY3VycmVudFVyaS5kYXRlVGltZU9iamVjdCA9IGVudHJ5LmRhdGVUaW1lT2JqZWN0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhcmdldGR1cmF0aW9uOiBmdW5jdGlvbiB0YXJnZXRkdXJhdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShlbnRyeS5kdXJhdGlvbikgfHwgZW50cnkuZHVyYXRpb24gPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd3YXJuJywge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2lnbm9yaW5nIGludmFsaWQgdGFyZ2V0IGR1cmF0aW9uOiAnICsgZW50cnkuZHVyYXRpb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0LnRhcmdldER1cmF0aW9uID0gZW50cnkuZHVyYXRpb247XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG90YWxkdXJhdGlvbjogZnVuY3Rpb24gdG90YWxkdXJhdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShlbnRyeS5kdXJhdGlvbikgfHwgZW50cnkuZHVyYXRpb24gPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd3YXJuJywge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2lnbm9yaW5nIGludmFsaWQgdG90YWwgZHVyYXRpb246ICcgKyBlbnRyeS5kdXJhdGlvblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMubWFuaWZlc3QudG90YWxEdXJhdGlvbiA9IGVudHJ5LmR1cmF0aW9uO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgICAgICAgaWYgKCFlbnRyeS5hdHRyaWJ1dGVzIHx8IGlzTmFOKGVudHJ5LmF0dHJpYnV0ZXNbJ1RJTUUtT0ZGU0VUJ10pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd3YXJuJywge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2lnbm9yaW5nIHN0YXJ0IGRlY2xhcmF0aW9uIHdpdGhvdXQgYXBwcm9wcmlhdGUgYXR0cmlidXRlIGxpc3QnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5zdGFydCA9IHtcbiAgICAgICAgICAgICAgICB0aW1lT2Zmc2V0OiBlbnRyeS5hdHRyaWJ1dGVzWydUSU1FLU9GRlNFVCddLFxuICAgICAgICAgICAgICAgIHByZWNpc2U6IGVudHJ5LmF0dHJpYnV0ZXMuUFJFQ0lTRVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdjdWUtb3V0JzogZnVuY3Rpb24gY3VlT3V0KCkge1xuICAgICAgICAgICAgICBjdXJyZW50VXJpLmN1ZU91dCA9IGVudHJ5LmRhdGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2N1ZS1vdXQtY29udCc6IGZ1bmN0aW9uIGN1ZU91dENvbnQoKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRVcmkuY3VlT3V0Q29udCA9IGVudHJ5LmRhdGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2N1ZS1pbic6IGZ1bmN0aW9uIGN1ZUluKCkge1xuICAgICAgICAgICAgICBjdXJyZW50VXJpLmN1ZUluID0gZW50cnkuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVtlbnRyeS50YWdUeXBlXSB8fCBub29wKS5jYWxsKHNlbGYpO1xuICAgICAgICB9LFxuICAgICAgICB1cmk6IGZ1bmN0aW9uIHVyaSgpIHtcbiAgICAgICAgICBjdXJyZW50VXJpLnVyaSA9IGVudHJ5LnVyaTtcbiAgICAgICAgICB1cmlzLnB1c2goY3VycmVudFVyaSk7IC8vIGlmIG5vIGV4cGxpY2l0IGR1cmF0aW9uIHdhcyBkZWNsYXJlZCwgdXNlIHRoZSB0YXJnZXQgZHVyYXRpb25cblxuICAgICAgICAgIGlmICh0aGlzLm1hbmlmZXN0LnRhcmdldER1cmF0aW9uICYmICEoJ2R1cmF0aW9uJyBpbiBjdXJyZW50VXJpKSkge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd3YXJuJywge1xuICAgICAgICAgICAgICBtZXNzYWdlOiAnZGVmYXVsdGluZyBzZWdtZW50IGR1cmF0aW9uIHRvIHRoZSB0YXJnZXQgZHVyYXRpb24nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGN1cnJlbnRVcmkuZHVyYXRpb24gPSB0aGlzLm1hbmlmZXN0LnRhcmdldER1cmF0aW9uO1xuICAgICAgICAgIH0gLy8gYW5ub3RhdGUgd2l0aCBlbmNyeXB0aW9uIGluZm9ybWF0aW9uLCBpZiBuZWNlc3NhcnlcblxuXG4gICAgICAgICAgaWYgKF9rZXkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRVcmkua2V5ID0gX2tleTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50VXJpLnRpbWVsaW5lID0gY3VycmVudFRpbWVsaW5lOyAvLyBhbm5vdGF0ZSB3aXRoIGluaXRpYWxpemF0aW9uIHNlZ21lbnQgaW5mb3JtYXRpb24sIGlmIG5lY2Vzc2FyeVxuXG4gICAgICAgICAgaWYgKGN1cnJlbnRNYXApIHtcbiAgICAgICAgICAgIGN1cnJlbnRVcmkubWFwID0gY3VycmVudE1hcDtcbiAgICAgICAgICB9IC8vIHByZXBhcmUgZm9yIHRoZSBuZXh0IFVSSVxuXG5cbiAgICAgICAgICBjdXJyZW50VXJpID0ge307XG4gICAgICAgIH0sXG4gICAgICAgIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQoKSB7Ly8gY29tbWVudHMgYXJlIG5vdCBpbXBvcnRhbnQgZm9yIHBsYXliYWNrXG4gICAgICAgIH0sXG4gICAgICAgIGN1c3RvbTogZnVuY3Rpb24gY3VzdG9tKCkge1xuICAgICAgICAgIC8vIGlmIHRoaXMgaXMgc2VnbWVudC1sZXZlbCBkYXRhIGF0dGFjaCB0aGUgb3V0cHV0IHRvIHRoZSBzZWdtZW50XG4gICAgICAgICAgaWYgKGVudHJ5LnNlZ21lbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnRVcmkuY3VzdG9tID0gY3VycmVudFVyaS5jdXN0b20gfHwge307XG4gICAgICAgICAgICBjdXJyZW50VXJpLmN1c3RvbVtlbnRyeS5jdXN0b21UeXBlXSA9IGVudHJ5LmRhdGE7IC8vIGlmIHRoaXMgaXMgbWFuaWZlc3QtbGV2ZWwgZGF0YSBhdHRhY2ggdG8gdGhlIHRvcCBsZXZlbCBtYW5pZmVzdCBvYmplY3RcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYW5pZmVzdC5jdXN0b20gPSB0aGlzLm1hbmlmZXN0LmN1c3RvbSB8fCB7fTtcbiAgICAgICAgICAgIHRoaXMubWFuaWZlc3QuY3VzdG9tW2VudHJ5LmN1c3RvbVR5cGVdID0gZW50cnkuZGF0YTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pW2VudHJ5LnR5cGVdLmNhbGwoc2VsZik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSBpbnB1dCBzdHJpbmcgYW5kIHVwZGF0ZSB0aGUgbWFuaWZlc3Qgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2h1bmsgYSBwb3RlbnRpYWxseSBpbmNvbXBsZXRlIHBvcnRpb24gb2YgdGhlIG1hbmlmZXN0XG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFBhcnNlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGNodW5rKSB7XG4gICAgdGhpcy5saW5lU3RyZWFtLnB1c2goY2h1bmspO1xuICB9XG4gIC8qKlxuICAgKiBGbHVzaCBhbnkgcmVtYWluaW5nIGlucHV0LiBUaGlzIGNhbiBiZSBoYW5keSBpZiB0aGUgbGFzdCBsaW5lIG9mIGFuIE0zVThcbiAgICogbWFuaWZlc3QgZGlkIG5vdCBjb250YWluIGEgdHJhaWxpbmcgbmV3bGluZSBidXQgdGhlIGZpbGUgaGFzIGJlZW5cbiAgICogY29tcGxldGVseSByZWNlaXZlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW5kID0gZnVuY3Rpb24gZW5kKCkge1xuICAgIC8vIGZsdXNoIGFueSBidWZmZXJlZCBpbnB1dFxuICAgIHRoaXMubGluZVN0cmVhbS5wdXNoKCdcXG4nKTtcbiAgfVxuICAvKipcbiAgICogQWRkIGFuIGFkZGl0aW9uYWwgcGFyc2VyIGZvciBub24tc3RhbmRhcmQgdGFnc1xuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gICBvcHRpb25zICAgICAgICAgICAgICBhIG1hcCBvZiBvcHRpb25zIGZvciB0aGUgYWRkZWQgcGFyc2VyXG4gICAqIEBwYXJhbSB7UmVnRXhwfSAgIG9wdGlvbnMuZXhwcmVzc2lvbiAgIGEgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIHRoZSBjdXN0b20gaGVhZGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgIG9wdGlvbnMudHlwZSAgICAgICAgIHRoZSB0eXBlIHRvIHJlZ2lzdGVyIHRvIHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuZGF0YVBhcnNlcl0gZnVuY3Rpb24gdG8gcGFyc2UgdGhlIGxpbmUgaW50byBhbiBvYmplY3RcbiAgICogQHBhcmFtIHtib29sZWFufSAgW29wdGlvbnMuc2VnbWVudF0gICAgc2hvdWxkIHRhZyBkYXRhIGJlIGF0dGFjaGVkIHRvIHRoZSBzZWdtZW50IG9iamVjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRQYXJzZXIgPSBmdW5jdGlvbiBhZGRQYXJzZXIob3B0aW9ucykge1xuICAgIHRoaXMucGFyc2VTdHJlYW0uYWRkUGFyc2VyKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gaGVhZGVyIG1hcHBlclxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gICBvcHRpb25zXG4gICAqIEBwYXJhbSB7UmVnRXhwfSAgIG9wdGlvbnMuZXhwcmVzc2lvbiAgIGEgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIHRoZSBjdXN0b20gaGVhZGVyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMubWFwICAgICAgICAgIGZ1bmN0aW9uIHRvIHRyYW5zbGF0ZSB0YWcgaW50byBhIGRpZmZlcmVudCB0YWdcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkVGFnTWFwcGVyID0gZnVuY3Rpb24gYWRkVGFnTWFwcGVyKG9wdGlvbnMpIHtcbiAgICB0aGlzLnBhcnNlU3RyZWFtLmFkZFRhZ01hcHBlcihvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gUGFyc2VyO1xufShTdHJlYW0pO1xuXG5leHBvcnQgeyBMaW5lU3RyZWFtLCBQYXJzZVN0cmVhbSwgUGFyc2VyIH07XG4iLCIvKiEgQG5hbWUgbXBkLXBhcnNlciBAdmVyc2lvbiAwLjE0LjAgQGxpY2Vuc2UgQXBhY2hlLTIuMCAqL1xuaW1wb3J0IHJlc29sdmVVcmwgZnJvbSAnQHZpZGVvanMvdmhzLXV0aWxzL2Rpc3QvcmVzb2x2ZS11cmwnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICdnbG9iYWwvd2luZG93JztcbmltcG9ydCBkZWNvZGVCNjRUb1VpbnQ4QXJyYXkgZnJvbSAnQHZpZGVvanMvdmhzLXV0aWxzL2Rpc3QvZGVjb2RlLWI2NC10by11aW50OC1hcnJheSc7XG5pbXBvcnQgeyBET01QYXJzZXIgfSBmcm9tICd4bWxkb20nO1xuXG52YXIgdmVyc2lvbiA9IFwiMC4xNC4wXCI7XG5cbnZhciBpc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gISFvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCc7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG9iamVjdHMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgb2JqZWN0c1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3RzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBzb3VyY2UpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0W2tleV0pICYmIEFycmF5LmlzQXJyYXkoc291cmNlW2tleV0pKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gcmVzdWx0W2tleV0uY29uY2F0KHNvdXJjZVtrZXldKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocmVzdWx0W2tleV0pICYmIGlzT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuICAgICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCBzb3VyY2Vba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIHt9KTtcbn07XG52YXIgdmFsdWVzID0gZnVuY3Rpb24gdmFsdWVzKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG8pLm1hcChmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBvW2tdO1xuICB9KTtcbn07XG5cbnZhciByYW5nZSA9IGZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgcmVzdWx0LnB1c2goaSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBmbGF0dGVuID0gZnVuY3Rpb24gZmxhdHRlbihsaXN0cykge1xuICByZXR1cm4gbGlzdHMucmVkdWNlKGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgcmV0dXJuIHguY29uY2F0KHkpO1xuICB9LCBbXSk7XG59O1xudmFyIGZyb20gPSBmdW5jdGlvbiBmcm9tKGxpc3QpIHtcbiAgaWYgKCFsaXN0Lmxlbmd0aCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQucHVzaChsaXN0W2ldKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xudmFyIGZpbmRJbmRleGVzID0gZnVuY3Rpb24gZmluZEluZGV4ZXMobCwga2V5KSB7XG4gIHJldHVybiBsLnJlZHVjZShmdW5jdGlvbiAoYSwgZSwgaSkge1xuICAgIGlmIChlW2tleV0pIHtcbiAgICAgIGEucHVzaChpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfSwgW10pO1xufTtcblxudmFyIGVycm9ycyA9IHtcbiAgSU5WQUxJRF9OVU1CRVJfT0ZfUEVSSU9EOiAnSU5WQUxJRF9OVU1CRVJfT0ZfUEVSSU9EJyxcbiAgREFTSF9FTVBUWV9NQU5JRkVTVDogJ0RBU0hfRU1QVFlfTUFOSUZFU1QnLFxuICBEQVNIX0lOVkFMSURfWE1MOiAnREFTSF9JTlZBTElEX1hNTCcsXG4gIE5PX0JBU0VfVVJMOiAnTk9fQkFTRV9VUkwnLFxuICBNSVNTSU5HX1NFR01FTlRfSU5GT1JNQVRJT046ICdNSVNTSU5HX1NFR01FTlRfSU5GT1JNQVRJT04nLFxuICBTRUdNRU5UX1RJTUVfVU5TUEVDSUZJRUQ6ICdTRUdNRU5UX1RJTUVfVU5TUEVDSUZJRUQnLFxuICBVTlNVUFBPUlRFRF9VVENfVElNSU5HX1NDSEVNRTogJ1VOU1VQUE9SVEVEX1VUQ19USU1JTkdfU0NIRU1FJ1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaW5nbGVVcmlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1cmkgLSByZWxhdGl2ZSBsb2NhdGlvbiBvZiBzZWdtZW50XG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVzb2x2ZWRVcmkgLSByZXNvbHZlZCBsb2NhdGlvbiBvZiBzZWdtZW50XG4gKiBAcHJvcGVydHkge09iamVjdH0gYnl0ZXJhbmdlIC0gT2JqZWN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gb24gaG93IHRvIG1ha2UgYnl0ZSByYW5nZVxuICogICByZXF1ZXN0cyBmb2xsb3dpbmcgYnl0ZS1yYW5nZS1zcGVjIHBlciBSRkMyNjE2LlxuICogQHByb3BlcnR5IHtTdHJpbmd9IGJ5dGVyYW5nZS5sZW5ndGggLSBsZW5ndGggb2YgcmFuZ2UgcmVxdWVzdFxuICogQHByb3BlcnR5IHtTdHJpbmd9IGJ5dGVyYW5nZS5vZmZzZXQgLSBieXRlIG9mZnNldCBvZiByYW5nZSByZXF1ZXN0XG4gKlxuICogQHNlZSBodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMxNC5odG1sI3NlYzE0LjM1LjFcbiAqL1xuXG4vKipcbiAqIENvbnZlcnRzIGEgVVJMVHlwZSBub2RlICg1LjMuOS4yLjMgVGFibGUgMTMpIHRvIGEgc2VnbWVudCBvYmplY3RcbiAqIHRoYXQgY29uZm9ybXMgdG8gaG93IG0zdTgtcGFyc2VyIGlzIHN0cnVjdHVyZWRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL20zdTgtcGFyc2VyXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVcmwgLSBiYXNlVXJsIHByb3ZpZGVkIGJ5IDxCYXNlVXJsPiBub2Rlc1xuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSAtIHNvdXJjZSB1cmwgZm9yIHNlZ21lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSByYW5nZSAtIG9wdGlvbmFsIHJhbmdlIHVzZWQgZm9yIHJhbmdlIGNhbGxzLFxuICogICBmb2xsb3dzICBSRkMgMjYxNiwgQ2xhdXNlIDE0LjM1LjFcbiAqIEByZXR1cm4ge1NpbmdsZVVyaX0gZnVsbCBzZWdtZW50IGluZm9ybWF0aW9uIHRyYW5zZm9ybWVkIGludG8gYSBmb3JtYXQgc2ltaWxhclxuICogICB0byBtM3U4LXBhcnNlclxuICovXG5cbnZhciB1cmxUeXBlVG9TZWdtZW50ID0gZnVuY3Rpb24gdXJsVHlwZVRvU2VnbWVudChfcmVmKSB7XG4gIHZhciBfcmVmJGJhc2VVcmwgPSBfcmVmLmJhc2VVcmwsXG4gICAgICBiYXNlVXJsID0gX3JlZiRiYXNlVXJsID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkYmFzZVVybCxcbiAgICAgIF9yZWYkc291cmNlID0gX3JlZi5zb3VyY2UsXG4gICAgICBzb3VyY2UgPSBfcmVmJHNvdXJjZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmJHNvdXJjZSxcbiAgICAgIF9yZWYkcmFuZ2UgPSBfcmVmLnJhbmdlLFxuICAgICAgcmFuZ2UgPSBfcmVmJHJhbmdlID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkcmFuZ2UsXG4gICAgICBfcmVmJGluZGV4UmFuZ2UgPSBfcmVmLmluZGV4UmFuZ2UsXG4gICAgICBpbmRleFJhbmdlID0gX3JlZiRpbmRleFJhbmdlID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkaW5kZXhSYW5nZTtcbiAgdmFyIHNlZ21lbnQgPSB7XG4gICAgdXJpOiBzb3VyY2UsXG4gICAgcmVzb2x2ZWRVcmk6IHJlc29sdmVVcmwoYmFzZVVybCB8fCAnJywgc291cmNlKVxuICB9O1xuXG4gIGlmIChyYW5nZSB8fCBpbmRleFJhbmdlKSB7XG4gICAgdmFyIHJhbmdlU3RyID0gcmFuZ2UgPyByYW5nZSA6IGluZGV4UmFuZ2U7XG4gICAgdmFyIHJhbmdlcyA9IHJhbmdlU3RyLnNwbGl0KCctJyk7XG4gICAgdmFyIHN0YXJ0UmFuZ2UgPSBwYXJzZUludChyYW5nZXNbMF0sIDEwKTtcbiAgICB2YXIgZW5kUmFuZ2UgPSBwYXJzZUludChyYW5nZXNbMV0sIDEwKTsgLy8gYnl0ZXJhbmdlIHNob3VsZCBiZSBpbmNsdXNpdmUgYWNjb3JkaW5nIHRvXG4gICAgLy8gUkZDIDI2MTYsIENsYXVzZSAxNC4zNS4xXG5cbiAgICBzZWdtZW50LmJ5dGVyYW5nZSA9IHtcbiAgICAgIGxlbmd0aDogZW5kUmFuZ2UgLSBzdGFydFJhbmdlICsgMSxcbiAgICAgIG9mZnNldDogc3RhcnRSYW5nZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gc2VnbWVudDtcbn07XG52YXIgYnl0ZVJhbmdlVG9TdHJpbmcgPSBmdW5jdGlvbiBieXRlUmFuZ2VUb1N0cmluZyhieXRlcmFuZ2UpIHtcbiAgLy8gYGVuZFJhbmdlYCBpcyBvbmUgbGVzcyB0aGFuIGBvZmZzZXQgKyBsZW5ndGhgIGJlY2F1c2UgdGhlIEhUVFAgcmFuZ2VcbiAgLy8gaGVhZGVyIHVzZXMgaW5jbHVzaXZlIHJhbmdlc1xuICB2YXIgZW5kUmFuZ2UgPSBieXRlcmFuZ2Uub2Zmc2V0ICsgYnl0ZXJhbmdlLmxlbmd0aCAtIDE7XG4gIHJldHVybiBieXRlcmFuZ2Uub2Zmc2V0ICsgXCItXCIgKyBlbmRSYW5nZTtcbn07XG5cbi8qKlxuICogRnVuY3Rpb25zIGZvciBjYWxjdWxhdGluZyB0aGUgcmFuZ2Ugb2YgYXZhaWxhYmxlIHNlZ21lbnRzIGluIHN0YXRpYyBhbmQgZHluYW1pY1xuICogbWFuaWZlc3RzLlxuICovXG5cbnZhciBzZWdtZW50UmFuZ2UgPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlbnRpcmUgcmFuZ2Ugb2YgYXZhaWxhYmxlIHNlZ21lbnRzIGZvciBhIHN0YXRpYyBNUERcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXNcbiAgICogICAgICAgIEluaGVyaXRpZWQgTVBEIGF0dHJpYnV0ZXNcbiAgICogQHJldHVybiB7eyBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciB9fVxuICAgKiAgICAgICAgIFRoZSBzdGFydCBhbmQgZW5kIG51bWJlcnMgZm9yIGF2YWlsYWJsZSBzZWdtZW50c1xuICAgKi9cbiAgc3RhdGljOiBmdW5jdGlvbiBfc3RhdGljKGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBhdHRyaWJ1dGVzLmR1cmF0aW9uLFxuICAgICAgICBfYXR0cmlidXRlcyR0aW1lc2NhbGUgPSBhdHRyaWJ1dGVzLnRpbWVzY2FsZSxcbiAgICAgICAgdGltZXNjYWxlID0gX2F0dHJpYnV0ZXMkdGltZXNjYWxlID09PSB2b2lkIDAgPyAxIDogX2F0dHJpYnV0ZXMkdGltZXNjYWxlLFxuICAgICAgICBzb3VyY2VEdXJhdGlvbiA9IGF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb247XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgZW5kOiBNYXRoLmNlaWwoc291cmNlRHVyYXRpb24gLyAoZHVyYXRpb24gLyB0aW1lc2NhbGUpKVxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgbGl2ZSB3aW5kb3cgcmFuZ2Ugb2YgYXZhaWxhYmxlIHNlZ21lbnRzIGZvciBhIGR5bmFtaWMgTVBEXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzXG4gICAqICAgICAgICBJbmhlcml0aWVkIE1QRCBhdHRyaWJ1dGVzXG4gICAqIEByZXR1cm4ge3sgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIgfX1cbiAgICogICAgICAgICBUaGUgc3RhcnQgYW5kIGVuZCBudW1iZXJzIGZvciBhdmFpbGFibGUgc2VnbWVudHNcbiAgICovXG4gIGR5bmFtaWM6IGZ1bmN0aW9uIGR5bmFtaWMoYXR0cmlidXRlcykge1xuICAgIHZhciBOT1cgPSBhdHRyaWJ1dGVzLk5PVyxcbiAgICAgICAgY2xpZW50T2Zmc2V0ID0gYXR0cmlidXRlcy5jbGllbnRPZmZzZXQsXG4gICAgICAgIGF2YWlsYWJpbGl0eVN0YXJ0VGltZSA9IGF0dHJpYnV0ZXMuYXZhaWxhYmlsaXR5U3RhcnRUaW1lLFxuICAgICAgICBfYXR0cmlidXRlcyR0aW1lc2NhbGUyID0gYXR0cmlidXRlcy50aW1lc2NhbGUsXG4gICAgICAgIHRpbWVzY2FsZSA9IF9hdHRyaWJ1dGVzJHRpbWVzY2FsZTIgPT09IHZvaWQgMCA/IDEgOiBfYXR0cmlidXRlcyR0aW1lc2NhbGUyLFxuICAgICAgICBkdXJhdGlvbiA9IGF0dHJpYnV0ZXMuZHVyYXRpb24sXG4gICAgICAgIF9hdHRyaWJ1dGVzJHN0YXJ0ID0gYXR0cmlidXRlcy5zdGFydCxcbiAgICAgICAgc3RhcnQgPSBfYXR0cmlidXRlcyRzdGFydCA9PT0gdm9pZCAwID8gMCA6IF9hdHRyaWJ1dGVzJHN0YXJ0LFxuICAgICAgICBfYXR0cmlidXRlcyRtaW5pbXVtVXAgPSBhdHRyaWJ1dGVzLm1pbmltdW1VcGRhdGVQZXJpb2QsXG4gICAgICAgIG1pbmltdW1VcGRhdGVQZXJpb2QgPSBfYXR0cmlidXRlcyRtaW5pbXVtVXAgPT09IHZvaWQgMCA/IDAgOiBfYXR0cmlidXRlcyRtaW5pbXVtVXAsXG4gICAgICAgIF9hdHRyaWJ1dGVzJHRpbWVTaGlmdCA9IGF0dHJpYnV0ZXMudGltZVNoaWZ0QnVmZmVyRGVwdGgsXG4gICAgICAgIHRpbWVTaGlmdEJ1ZmZlckRlcHRoID0gX2F0dHJpYnV0ZXMkdGltZVNoaWZ0ID09PSB2b2lkIDAgPyBJbmZpbml0eSA6IF9hdHRyaWJ1dGVzJHRpbWVTaGlmdDtcbiAgICB2YXIgbm93ID0gKE5PVyArIGNsaWVudE9mZnNldCkgLyAxMDAwO1xuICAgIHZhciBwZXJpb2RTdGFydFdDID0gYXZhaWxhYmlsaXR5U3RhcnRUaW1lICsgc3RhcnQ7XG4gICAgdmFyIHBlcmlvZEVuZFdDID0gbm93ICsgbWluaW11bVVwZGF0ZVBlcmlvZDtcbiAgICB2YXIgcGVyaW9kRHVyYXRpb24gPSBwZXJpb2RFbmRXQyAtIHBlcmlvZFN0YXJ0V0M7XG4gICAgdmFyIHNlZ21lbnRDb3VudCA9IE1hdGguY2VpbChwZXJpb2REdXJhdGlvbiAqIHRpbWVzY2FsZSAvIGR1cmF0aW9uKTtcbiAgICB2YXIgYXZhaWxhYmxlU3RhcnQgPSBNYXRoLmZsb29yKChub3cgLSBwZXJpb2RTdGFydFdDIC0gdGltZVNoaWZ0QnVmZmVyRGVwdGgpICogdGltZXNjYWxlIC8gZHVyYXRpb24pO1xuICAgIHZhciBhdmFpbGFibGVFbmQgPSBNYXRoLmZsb29yKChub3cgLSBwZXJpb2RTdGFydFdDKSAqIHRpbWVzY2FsZSAvIGR1cmF0aW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IE1hdGgubWF4KDAsIGF2YWlsYWJsZVN0YXJ0KSxcbiAgICAgIGVuZDogTWF0aC5taW4oc2VnbWVudENvdW50LCBhdmFpbGFibGVFbmQpXG4gICAgfTtcbiAgfVxufTtcbi8qKlxuICogTWFwcyBhIHJhbmdlIG9mIG51bWJlcnMgdG8gb2JqZWN0cyB3aXRoIGluZm9ybWF0aW9uIG5lZWRlZCB0byBidWlsZCB0aGUgY29ycmVzcG9uZGluZ1xuICogc2VnbWVudCBsaXN0XG4gKlxuICogQG5hbWUgdG9TZWdtZW50c0NhbGxiYWNrXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcbiAqICAgICAgICBOdW1iZXIgb2YgdGhlIHNlZ21lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogICAgICAgIEluZGV4IG9mIHRoZSBudW1iZXIgaW4gdGhlIHJhbmdlIGxpc3RcbiAqIEByZXR1cm4ge3sgbnVtYmVyOiBOdW1iZXIsIGR1cmF0aW9uOiBOdW1iZXIsIHRpbWVsaW5lOiBOdW1iZXIsIHRpbWU6IE51bWJlciB9fVxuICogICAgICAgICBPYmplY3Qgd2l0aCBzZWdtZW50IHRpbWluZyBhbmQgZHVyYXRpb24gaW5mb1xuICovXG5cbi8qKlxuICogUmV0dXJucyBhIGNhbGxiYWNrIGZvciBBcnJheS5wcm90b3R5cGUubWFwIGZvciBtYXBwaW5nIGEgcmFuZ2Ugb2YgbnVtYmVycyB0b1xuICogaW5mb3JtYXRpb24gbmVlZGVkIHRvIGJ1aWxkIHRoZSBzZWdtZW50IGxpc3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXNcbiAqICAgICAgICBJbmhlcml0ZWQgTVBEIGF0dHJpYnV0ZXNcbiAqIEByZXR1cm4ge3RvU2VnbWVudHNDYWxsYmFja31cbiAqICAgICAgICAgQ2FsbGJhY2sgbWFwIGZ1bmN0aW9uXG4gKi9cblxudmFyIHRvU2VnbWVudHMgPSBmdW5jdGlvbiB0b1NlZ21lbnRzKGF0dHJpYnV0ZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChudW1iZXIsIGluZGV4KSB7XG4gICAgdmFyIGR1cmF0aW9uID0gYXR0cmlidXRlcy5kdXJhdGlvbixcbiAgICAgICAgX2F0dHJpYnV0ZXMkdGltZXNjYWxlMyA9IGF0dHJpYnV0ZXMudGltZXNjYWxlLFxuICAgICAgICB0aW1lc2NhbGUgPSBfYXR0cmlidXRlcyR0aW1lc2NhbGUzID09PSB2b2lkIDAgPyAxIDogX2F0dHJpYnV0ZXMkdGltZXNjYWxlMyxcbiAgICAgICAgcGVyaW9kSW5kZXggPSBhdHRyaWJ1dGVzLnBlcmlvZEluZGV4LFxuICAgICAgICBfYXR0cmlidXRlcyRzdGFydE51bWIgPSBhdHRyaWJ1dGVzLnN0YXJ0TnVtYmVyLFxuICAgICAgICBzdGFydE51bWJlciA9IF9hdHRyaWJ1dGVzJHN0YXJ0TnVtYiA9PT0gdm9pZCAwID8gMSA6IF9hdHRyaWJ1dGVzJHN0YXJ0TnVtYjtcbiAgICByZXR1cm4ge1xuICAgICAgbnVtYmVyOiBzdGFydE51bWJlciArIG51bWJlcixcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAvIHRpbWVzY2FsZSxcbiAgICAgIHRpbWVsaW5lOiBwZXJpb2RJbmRleCxcbiAgICAgIHRpbWU6IGluZGV4ICogZHVyYXRpb25cbiAgICB9O1xuICB9O1xufTtcbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2Ygb2JqZWN0cyBjb250YWluaW5nIHNlZ21lbnQgdGltaW5nIGFuZCBkdXJhdGlvbiBpbmZvIHVzZWQgZm9yXG4gKiBidWlsZGluZyB0aGUgbGlzdCBvZiBzZWdtZW50cy4gVGhpcyB1c2VzIHRoZSBAZHVyYXRpb24gYXR0cmlidXRlIHNwZWNpZmllZFxuICogaW4gdGhlIE1QRCBtYW5pZmVzdCB0byBkZXJpdmUgdGhlIHJhbmdlIG9mIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzXG4gKiAgICAgICAgSW5oZXJpdGVkIE1QRCBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJuIHt7bnVtYmVyOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIsIHRpbWU6IG51bWJlciwgdGltZWxpbmU6IG51bWJlcn1bXX1cbiAqICAgICAgICAgTGlzdCBvZiBPYmplY3RzIHdpdGggc2VnbWVudCB0aW1pbmcgYW5kIGR1cmF0aW9uIGluZm9cbiAqL1xuXG52YXIgcGFyc2VCeUR1cmF0aW9uID0gZnVuY3Rpb24gcGFyc2VCeUR1cmF0aW9uKGF0dHJpYnV0ZXMpIHtcbiAgdmFyIF9hdHRyaWJ1dGVzJHR5cGUgPSBhdHRyaWJ1dGVzLnR5cGUsXG4gICAgICB0eXBlID0gX2F0dHJpYnV0ZXMkdHlwZSA9PT0gdm9pZCAwID8gJ3N0YXRpYycgOiBfYXR0cmlidXRlcyR0eXBlLFxuICAgICAgZHVyYXRpb24gPSBhdHRyaWJ1dGVzLmR1cmF0aW9uLFxuICAgICAgX2F0dHJpYnV0ZXMkdGltZXNjYWxlNCA9IGF0dHJpYnV0ZXMudGltZXNjYWxlLFxuICAgICAgdGltZXNjYWxlID0gX2F0dHJpYnV0ZXMkdGltZXNjYWxlNCA9PT0gdm9pZCAwID8gMSA6IF9hdHRyaWJ1dGVzJHRpbWVzY2FsZTQsXG4gICAgICBzb3VyY2VEdXJhdGlvbiA9IGF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb247XG5cbiAgdmFyIF9zZWdtZW50UmFuZ2UkdHlwZSA9IHNlZ21lbnRSYW5nZVt0eXBlXShhdHRyaWJ1dGVzKSxcbiAgICAgIHN0YXJ0ID0gX3NlZ21lbnRSYW5nZSR0eXBlLnN0YXJ0LFxuICAgICAgZW5kID0gX3NlZ21lbnRSYW5nZSR0eXBlLmVuZDtcblxuICB2YXIgc2VnbWVudHMgPSByYW5nZShzdGFydCwgZW5kKS5tYXAodG9TZWdtZW50cyhhdHRyaWJ1dGVzKSk7XG5cbiAgaWYgKHR5cGUgPT09ICdzdGF0aWMnKSB7XG4gICAgdmFyIGluZGV4ID0gc2VnbWVudHMubGVuZ3RoIC0gMTsgLy8gZmluYWwgc2VnbWVudCBtYXkgYmUgbGVzcyB0aGFuIGZ1bGwgc2VnbWVudCBkdXJhdGlvblxuXG4gICAgc2VnbWVudHNbaW5kZXhdLmR1cmF0aW9uID0gc291cmNlRHVyYXRpb24gLSBkdXJhdGlvbiAvIHRpbWVzY2FsZSAqIGluZGV4O1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzO1xufTtcblxuLyoqXG4gKiBUcmFuc2xhdGVzIFNlZ21lbnRCYXNlIGludG8gYSBzZXQgb2Ygc2VnbWVudHMuXG4gKiAoREFTSCBTUEVDIFNlY3Rpb24gNS4zLjkuMy4yKSBjb250YWlucyBhIHNldCBvZiA8U2VnbWVudFVSTD4gbm9kZXMuICBFYWNoXG4gKiBub2RlIHNob3VsZCBiZSB0cmFuc2xhdGVkIGludG8gc2VnbWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlc1xuICogICBPYmplY3QgY29udGFpbmluZyBhbGwgaW5oZXJpdGVkIGF0dHJpYnV0ZXMgZnJvbSBwYXJlbnQgZWxlbWVudHMgd2l0aCBhdHRyaWJ1dGVcbiAqICAgbmFtZXMgYXMga2V5c1xuICogQHJldHVybiB7T2JqZWN0LjxBcnJheT59IGxpc3Qgb2Ygc2VnbWVudHNcbiAqL1xuXG52YXIgc2VnbWVudHNGcm9tQmFzZSA9IGZ1bmN0aW9uIHNlZ21lbnRzRnJvbUJhc2UoYXR0cmlidXRlcykge1xuICB2YXIgYmFzZVVybCA9IGF0dHJpYnV0ZXMuYmFzZVVybCxcbiAgICAgIF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9IGF0dHJpYnV0ZXMuaW5pdGlhbGl6YXRpb24sXG4gICAgICBpbml0aWFsaXphdGlvbiA9IF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9PT0gdm9pZCAwID8ge30gOiBfYXR0cmlidXRlcyRpbml0aWFsaXosXG4gICAgICBzb3VyY2VEdXJhdGlvbiA9IGF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb24sXG4gICAgICBfYXR0cmlidXRlcyRpbmRleFJhbmcgPSBhdHRyaWJ1dGVzLmluZGV4UmFuZ2UsXG4gICAgICBpbmRleFJhbmdlID0gX2F0dHJpYnV0ZXMkaW5kZXhSYW5nID09PSB2b2lkIDAgPyAnJyA6IF9hdHRyaWJ1dGVzJGluZGV4UmFuZyxcbiAgICAgIGR1cmF0aW9uID0gYXR0cmlidXRlcy5kdXJhdGlvbjsgLy8gYmFzZSB1cmwgaXMgcmVxdWlyZWQgZm9yIFNlZ21lbnRCYXNlIHRvIHdvcmssIHBlciBzcGVjIChTZWN0aW9uIDUuMy45LjIuMSlcblxuICBpZiAoIWJhc2VVcmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLk5PX0JBU0VfVVJMKTtcbiAgfVxuXG4gIHZhciBpbml0U2VnbWVudCA9IHVybFR5cGVUb1NlZ21lbnQoe1xuICAgIGJhc2VVcmw6IGJhc2VVcmwsXG4gICAgc291cmNlOiBpbml0aWFsaXphdGlvbi5zb3VyY2VVUkwsXG4gICAgcmFuZ2U6IGluaXRpYWxpemF0aW9uLnJhbmdlXG4gIH0pO1xuICB2YXIgc2VnbWVudCA9IHVybFR5cGVUb1NlZ21lbnQoe1xuICAgIGJhc2VVcmw6IGJhc2VVcmwsXG4gICAgc291cmNlOiBiYXNlVXJsLFxuICAgIGluZGV4UmFuZ2U6IGluZGV4UmFuZ2VcbiAgfSk7XG4gIHNlZ21lbnQubWFwID0gaW5pdFNlZ21lbnQ7IC8vIElmIHRoZXJlIGlzIGEgZHVyYXRpb24sIHVzZSBpdCwgb3RoZXJ3aXNlIHVzZSB0aGUgZ2l2ZW4gZHVyYXRpb24gb2YgdGhlIHNvdXJjZVxuICAvLyAoc2luY2UgU2VnbWVudEJhc2UgaXMgb25seSBmb3Igb25lIHRvdGFsIHNlZ21lbnQpXG5cbiAgaWYgKGR1cmF0aW9uKSB7XG4gICAgdmFyIHNlZ21lbnRUaW1lSW5mbyA9IHBhcnNlQnlEdXJhdGlvbihhdHRyaWJ1dGVzKTtcblxuICAgIGlmIChzZWdtZW50VGltZUluZm8ubGVuZ3RoKSB7XG4gICAgICBzZWdtZW50LmR1cmF0aW9uID0gc2VnbWVudFRpbWVJbmZvWzBdLmR1cmF0aW9uO1xuICAgICAgc2VnbWVudC50aW1lbGluZSA9IHNlZ21lbnRUaW1lSW5mb1swXS50aW1lbGluZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc291cmNlRHVyYXRpb24pIHtcbiAgICBzZWdtZW50LmR1cmF0aW9uID0gc291cmNlRHVyYXRpb247XG4gICAgc2VnbWVudC50aW1lbGluZSA9IDA7XG4gIH0gLy8gVGhpcyBpcyB1c2VkIGZvciBtZWRpYVNlcXVlbmNlXG5cblxuICBzZWdtZW50Lm51bWJlciA9IDA7XG4gIHJldHVybiBbc2VnbWVudF07XG59O1xuLyoqXG4gKiBHaXZlbiBhIHBsYXlsaXN0LCBhIHNpZHggYm94LCBhbmQgYSBiYXNlVXJsLCB1cGRhdGUgdGhlIHNlZ21lbnQgbGlzdCBvZiB0aGUgcGxheWxpc3RcbiAqIGFjY29yZGluZyB0byB0aGUgc2lkeCBpbmZvcm1hdGlvbiBnaXZlbi5cbiAqXG4gKiBwbGF5bGlzdC5zaWR4IGhhcyBtZXRhZGFkYXRhIGFib3V0IHRoZSBzaWR4IHdoZXJlLWFzIHRoZSBzaWR4IHBhcmFtXG4gKiBpcyB0aGUgcGFyc2VkIHNpZHggYm94IGl0c2VsZi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3QgdGhlIHBsYXlsaXN0IHRvIHVwZGF0ZSB0aGUgc2lkeCBpbmZvcm1hdGlvbiBmb3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBzaWR4IHRoZSBwYXJzZWQgc2lkeCBib3hcbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIHBsYXlsaXN0IG9iamVjdCB3aXRoIHRoZSB1cGRhdGVkIHNpZHggaW5mb3JtYXRpb25cbiAqL1xuXG52YXIgYWRkU2VnbWVudHNUb1BsYXlsaXN0ID0gZnVuY3Rpb24gYWRkU2VnbWVudHNUb1BsYXlsaXN0KHBsYXlsaXN0LCBzaWR4LCBiYXNlVXJsKSB7XG4gIC8vIFJldGFpbiBpbml0IHNlZ21lbnQgaW5mb3JtYXRpb25cbiAgdmFyIGluaXRTZWdtZW50ID0gcGxheWxpc3Quc2lkeC5tYXAgPyBwbGF5bGlzdC5zaWR4Lm1hcCA6IG51bGw7IC8vIFJldGFpbiBzb3VyY2UgZHVyYXRpb24gZnJvbSBpbml0aWFsIG1hc3RlciBtYW5pZmVzdCBwYXJzaW5nXG5cbiAgdmFyIHNvdXJjZUR1cmF0aW9uID0gcGxheWxpc3Quc2lkeC5kdXJhdGlvbjsgLy8gUmV0YWluIHNvdXJjZSB0aW1lbGluZVxuXG4gIHZhciB0aW1lbGluZSA9IHBsYXlsaXN0LnRpbWVsaW5lIHx8IDA7XG4gIHZhciBzaWR4Qnl0ZVJhbmdlID0gcGxheWxpc3Quc2lkeC5ieXRlcmFuZ2U7XG4gIHZhciBzaWR4RW5kID0gc2lkeEJ5dGVSYW5nZS5vZmZzZXQgKyBzaWR4Qnl0ZVJhbmdlLmxlbmd0aDsgLy8gUmV0YWluIHRpbWVzY2FsZSBvZiB0aGUgcGFyc2VkIHNpZHhcblxuICB2YXIgdGltZXNjYWxlID0gc2lkeC50aW1lc2NhbGU7IC8vIHJlZmVyZW5jZVR5cGUgMSByZWZlcnMgdG8gb3RoZXIgc2lkeCBib3hlc1xuXG4gIHZhciBtZWRpYVJlZmVyZW5jZXMgPSBzaWR4LnJlZmVyZW5jZXMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgcmV0dXJuIHIucmVmZXJlbmNlVHlwZSAhPT0gMTtcbiAgfSk7XG4gIHZhciBzZWdtZW50cyA9IFtdOyAvLyBmaXJzdE9mZnNldCBpcyB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiB0aGUgc2lkeCBib3hcblxuICB2YXIgc3RhcnRJbmRleCA9IHNpZHhFbmQgKyBzaWR4LmZpcnN0T2Zmc2V0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVkaWFSZWZlcmVuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJlZmVyZW5jZSA9IHNpZHgucmVmZXJlbmNlc1tpXTsgLy8gc2l6ZSBvZiB0aGUgcmVmZXJlbmNlZCAoc3ViKXNlZ21lbnRcblxuICAgIHZhciBzaXplID0gcmVmZXJlbmNlLnJlZmVyZW5jZWRTaXplOyAvLyBkdXJhdGlvbiBvZiB0aGUgcmVmZXJlbmNlZCAoc3ViKXNlZ21lbnQsIGluICB0aGUgIHRpbWVzY2FsZVxuICAgIC8vIHRoaXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gc2Vjb25kcyB3aGVuIGdlbmVyYXRpbmcgc2VnbWVudHNcblxuICAgIHZhciBkdXJhdGlvbiA9IHJlZmVyZW5jZS5zdWJzZWdtZW50RHVyYXRpb247IC8vIHNob3VsZCBiZSBhbiBpbmNsdXNpdmUgcmFuZ2VcblxuICAgIHZhciBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyBzaXplIC0gMTtcbiAgICB2YXIgaW5kZXhSYW5nZSA9IHN0YXJ0SW5kZXggKyBcIi1cIiArIGVuZEluZGV4O1xuICAgIHZhciBhdHRyaWJ1dGVzID0ge1xuICAgICAgYmFzZVVybDogYmFzZVVybCxcbiAgICAgIHRpbWVzY2FsZTogdGltZXNjYWxlLFxuICAgICAgdGltZWxpbmU6IHRpbWVsaW5lLFxuICAgICAgLy8gdGhpcyBpcyB1c2VkIGluIHBhcnNlQnlEdXJhdGlvblxuICAgICAgcGVyaW9kSW5kZXg6IHRpbWVsaW5lLFxuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgc291cmNlRHVyYXRpb246IHNvdXJjZUR1cmF0aW9uLFxuICAgICAgaW5kZXhSYW5nZTogaW5kZXhSYW5nZVxuICAgIH07XG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50c0Zyb21CYXNlKGF0dHJpYnV0ZXMpWzBdO1xuXG4gICAgaWYgKGluaXRTZWdtZW50KSB7XG4gICAgICBzZWdtZW50Lm1hcCA9IGluaXRTZWdtZW50O1xuICAgIH1cblxuICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgc3RhcnRJbmRleCArPSBzaXplO1xuICB9XG5cbiAgcGxheWxpc3Quc2VnbWVudHMgPSBzZWdtZW50cztcbiAgcmV0dXJuIHBsYXlsaXN0O1xufTtcblxudmFyIG1lcmdlRGlzY29udGlndW91c1BsYXlsaXN0cyA9IGZ1bmN0aW9uIG1lcmdlRGlzY29udGlndW91c1BsYXlsaXN0cyhwbGF5bGlzdHMpIHtcbiAgdmFyIG1lcmdlZFBsYXlsaXN0cyA9IHZhbHVlcyhwbGF5bGlzdHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYXlsaXN0KSB7XG4gICAgLy8gYXNzdW1pbmcgcGxheWxpc3QgSURzIGFyZSB0aGUgc2FtZSBhY3Jvc3MgcGVyaW9kc1xuICAgIC8vIFRPRE86IGhhbmRsZSBtdWx0aXBlcmlvZCB3aGVyZSByZXByZXNlbnRhdGlvbiBzZXRzIGFyZSBub3QgdGhlIHNhbWVcbiAgICAvLyBhY3Jvc3MgcGVyaW9kc1xuICAgIHZhciBuYW1lID0gcGxheWxpc3QuYXR0cmlidXRlcy5pZCArIChwbGF5bGlzdC5hdHRyaWJ1dGVzLmxhbmcgfHwgJycpOyAvLyBQZXJpb2RzIGFmdGVyIGZpcnN0XG5cbiAgICBpZiAoYWNjW25hbWVdKSB7XG4gICAgICB2YXIgX2FjYyRuYW1lJHNlZ21lbnRzO1xuXG4gICAgICAvLyBmaXJzdCBzZWdtZW50IG9mIHN1YnNlcXVlbnQgcGVyaW9kcyBzaWduYWwgYSBkaXNjb250aW51aXR5XG4gICAgICBpZiAocGxheWxpc3Quc2VnbWVudHNbMF0pIHtcbiAgICAgICAgcGxheWxpc3Quc2VnbWVudHNbMF0uZGlzY29udGludWl0eSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIChfYWNjJG5hbWUkc2VnbWVudHMgPSBhY2NbbmFtZV0uc2VnbWVudHMpLnB1c2guYXBwbHkoX2FjYyRuYW1lJHNlZ21lbnRzLCBwbGF5bGlzdC5zZWdtZW50cyk7IC8vIGJ1YmJsZSB1cCBjb250ZW50UHJvdGVjdGlvbiwgdGhpcyBhc3N1bWVzIGFsbCBEUk0gY29udGVudFxuICAgICAgLy8gaGFzIHRoZSBzYW1lIGNvbnRlbnRQcm90ZWN0aW9uXG5cblxuICAgICAgaWYgKHBsYXlsaXN0LmF0dHJpYnV0ZXMuY29udGVudFByb3RlY3Rpb24pIHtcbiAgICAgICAgYWNjW25hbWVdLmF0dHJpYnV0ZXMuY29udGVudFByb3RlY3Rpb24gPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLmNvbnRlbnRQcm90ZWN0aW9uO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmaXJzdCBQZXJpb2RcbiAgICAgIGFjY1tuYW1lXSA9IHBsYXlsaXN0O1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KSk7XG4gIHJldHVybiBtZXJnZWRQbGF5bGlzdHMubWFwKGZ1bmN0aW9uIChwbGF5bGlzdCkge1xuICAgIHBsYXlsaXN0LmRpc2NvbnRpbnVpdHlTdGFydHMgPSBmaW5kSW5kZXhlcyhwbGF5bGlzdC5zZWdtZW50cywgJ2Rpc2NvbnRpbnVpdHknKTtcbiAgICByZXR1cm4gcGxheWxpc3Q7XG4gIH0pO1xufTtcblxudmFyIGFkZFNlZ21lbnRJbmZvRnJvbVNpZHggPSBmdW5jdGlvbiBhZGRTZWdtZW50SW5mb0Zyb21TaWR4KHBsYXlsaXN0cywgc2lkeE1hcHBpbmcpIHtcbiAgaWYgKHNpZHhNYXBwaW5nID09PSB2b2lkIDApIHtcbiAgICBzaWR4TWFwcGluZyA9IHt9O1xuICB9XG5cbiAgaWYgKCFPYmplY3Qua2V5cyhzaWR4TWFwcGluZykubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHBsYXlsaXN0cztcbiAgfVxuXG4gIGZvciAodmFyIGkgaW4gcGxheWxpc3RzKSB7XG4gICAgdmFyIHBsYXlsaXN0ID0gcGxheWxpc3RzW2ldO1xuXG4gICAgaWYgKCFwbGF5bGlzdC5zaWR4KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgc2lkeEtleSA9IHBsYXlsaXN0LnNpZHgudXJpICsgJy0nICsgYnl0ZVJhbmdlVG9TdHJpbmcocGxheWxpc3Quc2lkeC5ieXRlcmFuZ2UpO1xuICAgIHZhciBzaWR4TWF0Y2ggPSBzaWR4TWFwcGluZ1tzaWR4S2V5XSAmJiBzaWR4TWFwcGluZ1tzaWR4S2V5XS5zaWR4O1xuXG4gICAgaWYgKHBsYXlsaXN0LnNpZHggJiYgc2lkeE1hdGNoKSB7XG4gICAgICBhZGRTZWdtZW50c1RvUGxheWxpc3QocGxheWxpc3QsIHNpZHhNYXRjaCwgcGxheWxpc3Quc2lkeC5yZXNvbHZlZFVyaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBsYXlsaXN0cztcbn07XG5cbnZhciBmb3JtYXRBdWRpb1BsYXlsaXN0ID0gZnVuY3Rpb24gZm9ybWF0QXVkaW9QbGF5bGlzdChfcmVmKSB7XG4gIHZhciBfYXR0cmlidXRlcztcblxuICB2YXIgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlcyxcbiAgICAgIHNlZ21lbnRzID0gX3JlZi5zZWdtZW50cyxcbiAgICAgIHNpZHggPSBfcmVmLnNpZHg7XG4gIHZhciBwbGF5bGlzdCA9IHtcbiAgICBhdHRyaWJ1dGVzOiAoX2F0dHJpYnV0ZXMgPSB7XG4gICAgICBOQU1FOiBhdHRyaWJ1dGVzLmlkLFxuICAgICAgQkFORFdJRFRIOiBhdHRyaWJ1dGVzLmJhbmR3aWR0aCxcbiAgICAgIENPREVDUzogYXR0cmlidXRlcy5jb2RlY3NcbiAgICB9LCBfYXR0cmlidXRlc1snUFJPR1JBTS1JRCddID0gMSwgX2F0dHJpYnV0ZXMpLFxuICAgIHVyaTogJycsXG4gICAgZW5kTGlzdDogKGF0dHJpYnV0ZXMudHlwZSB8fCAnc3RhdGljJykgPT09ICdzdGF0aWMnLFxuICAgIHRpbWVsaW5lOiBhdHRyaWJ1dGVzLnBlcmlvZEluZGV4LFxuICAgIHJlc29sdmVkVXJpOiAnJyxcbiAgICB0YXJnZXREdXJhdGlvbjogYXR0cmlidXRlcy5kdXJhdGlvbixcbiAgICBzZWdtZW50czogc2VnbWVudHMsXG4gICAgbWVkaWFTZXF1ZW5jZTogc2VnbWVudHMubGVuZ3RoID8gc2VnbWVudHNbMF0ubnVtYmVyIDogMVxuICB9O1xuXG4gIGlmIChhdHRyaWJ1dGVzLmNvbnRlbnRQcm90ZWN0aW9uKSB7XG4gICAgcGxheWxpc3QuY29udGVudFByb3RlY3Rpb24gPSBhdHRyaWJ1dGVzLmNvbnRlbnRQcm90ZWN0aW9uO1xuICB9XG5cbiAgaWYgKHNpZHgpIHtcbiAgICBwbGF5bGlzdC5zaWR4ID0gc2lkeDtcbiAgfVxuXG4gIHJldHVybiBwbGF5bGlzdDtcbn07XG52YXIgZm9ybWF0VnR0UGxheWxpc3QgPSBmdW5jdGlvbiBmb3JtYXRWdHRQbGF5bGlzdChfcmVmMikge1xuICB2YXIgX20zdThBdHRyaWJ1dGVzO1xuXG4gIHZhciBhdHRyaWJ1dGVzID0gX3JlZjIuYXR0cmlidXRlcyxcbiAgICAgIHNlZ21lbnRzID0gX3JlZjIuc2VnbWVudHM7XG5cbiAgaWYgKHR5cGVvZiBzZWdtZW50cyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyB2dHQgdHJhY2tzIG1heSB1c2Ugc2luZ2xlIGZpbGUgaW4gQmFzZVVSTFxuICAgIHNlZ21lbnRzID0gW3tcbiAgICAgIHVyaTogYXR0cmlidXRlcy5iYXNlVXJsLFxuICAgICAgdGltZWxpbmU6IGF0dHJpYnV0ZXMucGVyaW9kSW5kZXgsXG4gICAgICByZXNvbHZlZFVyaTogYXR0cmlidXRlcy5iYXNlVXJsIHx8ICcnLFxuICAgICAgZHVyYXRpb246IGF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb24sXG4gICAgICBudW1iZXI6IDBcbiAgICB9XTsgLy8gdGFyZ2V0RHVyYXRpb24gc2hvdWxkIGJlIHRoZSBzYW1lIGR1cmF0aW9uIGFzIHRoZSBvbmx5IHNlZ21lbnRcblxuICAgIGF0dHJpYnV0ZXMuZHVyYXRpb24gPSBhdHRyaWJ1dGVzLnNvdXJjZUR1cmF0aW9uO1xuICB9XG5cbiAgdmFyIG0zdThBdHRyaWJ1dGVzID0gKF9tM3U4QXR0cmlidXRlcyA9IHtcbiAgICBOQU1FOiBhdHRyaWJ1dGVzLmlkLFxuICAgIEJBTkRXSURUSDogYXR0cmlidXRlcy5iYW5kd2lkdGhcbiAgfSwgX20zdThBdHRyaWJ1dGVzWydQUk9HUkFNLUlEJ10gPSAxLCBfbTN1OEF0dHJpYnV0ZXMpO1xuXG4gIGlmIChhdHRyaWJ1dGVzLmNvZGVjcykge1xuICAgIG0zdThBdHRyaWJ1dGVzLkNPREVDUyA9IGF0dHJpYnV0ZXMuY29kZWNzO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhdHRyaWJ1dGVzOiBtM3U4QXR0cmlidXRlcyxcbiAgICB1cmk6ICcnLFxuICAgIGVuZExpc3Q6IChhdHRyaWJ1dGVzLnR5cGUgfHwgJ3N0YXRpYycpID09PSAnc3RhdGljJyxcbiAgICB0aW1lbGluZTogYXR0cmlidXRlcy5wZXJpb2RJbmRleCxcbiAgICByZXNvbHZlZFVyaTogYXR0cmlidXRlcy5iYXNlVXJsIHx8ICcnLFxuICAgIHRhcmdldER1cmF0aW9uOiBhdHRyaWJ1dGVzLmR1cmF0aW9uLFxuICAgIHNlZ21lbnRzOiBzZWdtZW50cyxcbiAgICBtZWRpYVNlcXVlbmNlOiBzZWdtZW50cy5sZW5ndGggPyBzZWdtZW50c1swXS5udW1iZXIgOiAxXG4gIH07XG59O1xudmFyIG9yZ2FuaXplQXVkaW9QbGF5bGlzdHMgPSBmdW5jdGlvbiBvcmdhbml6ZUF1ZGlvUGxheWxpc3RzKHBsYXlsaXN0cywgc2lkeE1hcHBpbmcpIHtcbiAgaWYgKHNpZHhNYXBwaW5nID09PSB2b2lkIDApIHtcbiAgICBzaWR4TWFwcGluZyA9IHt9O1xuICB9XG5cbiAgdmFyIG1haW5QbGF5bGlzdDtcbiAgdmFyIGZvcm1hdHRlZFBsYXlsaXN0cyA9IHBsYXlsaXN0cy5yZWR1Y2UoZnVuY3Rpb24gKGEsIHBsYXlsaXN0KSB7XG4gICAgdmFyIHJvbGUgPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLnJvbGUgJiYgcGxheWxpc3QuYXR0cmlidXRlcy5yb2xlLnZhbHVlIHx8ICcnO1xuICAgIHZhciBsYW5ndWFnZSA9IHBsYXlsaXN0LmF0dHJpYnV0ZXMubGFuZyB8fCAnJztcbiAgICB2YXIgbGFiZWwgPSAnbWFpbic7XG5cbiAgICBpZiAobGFuZ3VhZ2UpIHtcbiAgICAgIHZhciByb2xlTGFiZWwgPSByb2xlID8gXCIgKFwiICsgcm9sZSArIFwiKVwiIDogJyc7XG4gICAgICBsYWJlbCA9IFwiXCIgKyBwbGF5bGlzdC5hdHRyaWJ1dGVzLmxhbmcgKyByb2xlTGFiZWw7XG4gICAgfSAvLyBza2lwIGlmIHdlIGFscmVhZHkgaGF2ZSB0aGUgaGlnaGVzdCBxdWFsaXR5IGF1ZGlvIGZvciBhIGxhbmd1YWdlXG5cblxuICAgIGlmIChhW2xhYmVsXSAmJiBhW2xhYmVsXS5wbGF5bGlzdHNbMF0uYXR0cmlidXRlcy5CQU5EV0lEVEggPiBwbGF5bGlzdC5hdHRyaWJ1dGVzLmJhbmR3aWR0aCkge1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgYVtsYWJlbF0gPSB7XG4gICAgICBsYW5ndWFnZTogbGFuZ3VhZ2UsXG4gICAgICBhdXRvc2VsZWN0OiB0cnVlLFxuICAgICAgZGVmYXVsdDogcm9sZSA9PT0gJ21haW4nLFxuICAgICAgcGxheWxpc3RzOiBhZGRTZWdtZW50SW5mb0Zyb21TaWR4KFtmb3JtYXRBdWRpb1BsYXlsaXN0KHBsYXlsaXN0KV0sIHNpZHhNYXBwaW5nKSxcbiAgICAgIHVyaTogJydcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBtYWluUGxheWxpc3QgPT09ICd1bmRlZmluZWQnICYmIHJvbGUgPT09ICdtYWluJykge1xuICAgICAgbWFpblBsYXlsaXN0ID0gcGxheWxpc3Q7XG4gICAgICBtYWluUGxheWxpc3QuZGVmYXVsdCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0sIHt9KTsgLy8gaWYgbm8gcGxheWxpc3RzIGhhdmUgcm9sZSBcIm1haW5cIiwgbWFyayB0aGUgZmlyc3QgYXMgbWFpblxuXG4gIGlmICghbWFpblBsYXlsaXN0KSB7XG4gICAgdmFyIGZpcnN0TGFiZWwgPSBPYmplY3Qua2V5cyhmb3JtYXR0ZWRQbGF5bGlzdHMpWzBdO1xuICAgIGZvcm1hdHRlZFBsYXlsaXN0c1tmaXJzdExhYmVsXS5kZWZhdWx0ID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXR0ZWRQbGF5bGlzdHM7XG59O1xudmFyIG9yZ2FuaXplVnR0UGxheWxpc3RzID0gZnVuY3Rpb24gb3JnYW5pemVWdHRQbGF5bGlzdHMocGxheWxpc3RzLCBzaWR4TWFwcGluZykge1xuICBpZiAoc2lkeE1hcHBpbmcgPT09IHZvaWQgMCkge1xuICAgIHNpZHhNYXBwaW5nID0ge307XG4gIH1cblxuICByZXR1cm4gcGxheWxpc3RzLnJlZHVjZShmdW5jdGlvbiAoYSwgcGxheWxpc3QpIHtcbiAgICB2YXIgbGFiZWwgPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLmxhbmcgfHwgJ3RleHQnOyAvLyBza2lwIGlmIHdlIGFscmVhZHkgaGF2ZSBzdWJ0aXRsZXNcblxuICAgIGlmIChhW2xhYmVsXSkge1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgYVtsYWJlbF0gPSB7XG4gICAgICBsYW5ndWFnZTogbGFiZWwsXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIGF1dG9zZWxlY3Q6IGZhbHNlLFxuICAgICAgcGxheWxpc3RzOiBhZGRTZWdtZW50SW5mb0Zyb21TaWR4KFtmb3JtYXRWdHRQbGF5bGlzdChwbGF5bGlzdCldLCBzaWR4TWFwcGluZyksXG4gICAgICB1cmk6ICcnXG4gICAgfTtcbiAgICByZXR1cm4gYTtcbiAgfSwge30pO1xufTtcbnZhciBmb3JtYXRWaWRlb1BsYXlsaXN0ID0gZnVuY3Rpb24gZm9ybWF0VmlkZW9QbGF5bGlzdChfcmVmMykge1xuICB2YXIgX2F0dHJpYnV0ZXMyO1xuXG4gIHZhciBhdHRyaWJ1dGVzID0gX3JlZjMuYXR0cmlidXRlcyxcbiAgICAgIHNlZ21lbnRzID0gX3JlZjMuc2VnbWVudHMsXG4gICAgICBzaWR4ID0gX3JlZjMuc2lkeDtcbiAgdmFyIHBsYXlsaXN0ID0ge1xuICAgIGF0dHJpYnV0ZXM6IChfYXR0cmlidXRlczIgPSB7XG4gICAgICBOQU1FOiBhdHRyaWJ1dGVzLmlkLFxuICAgICAgQVVESU86ICdhdWRpbycsXG4gICAgICBTVUJUSVRMRVM6ICdzdWJzJyxcbiAgICAgIFJFU09MVVRJT046IHtcbiAgICAgICAgd2lkdGg6IGF0dHJpYnV0ZXMud2lkdGgsXG4gICAgICAgIGhlaWdodDogYXR0cmlidXRlcy5oZWlnaHRcbiAgICAgIH0sXG4gICAgICBDT0RFQ1M6IGF0dHJpYnV0ZXMuY29kZWNzLFxuICAgICAgQkFORFdJRFRIOiBhdHRyaWJ1dGVzLmJhbmR3aWR0aFxuICAgIH0sIF9hdHRyaWJ1dGVzMlsnUFJPR1JBTS1JRCddID0gMSwgX2F0dHJpYnV0ZXMyKSxcbiAgICB1cmk6ICcnLFxuICAgIGVuZExpc3Q6IChhdHRyaWJ1dGVzLnR5cGUgfHwgJ3N0YXRpYycpID09PSAnc3RhdGljJyxcbiAgICB0aW1lbGluZTogYXR0cmlidXRlcy5wZXJpb2RJbmRleCxcbiAgICByZXNvbHZlZFVyaTogJycsXG4gICAgdGFyZ2V0RHVyYXRpb246IGF0dHJpYnV0ZXMuZHVyYXRpb24sXG4gICAgc2VnbWVudHM6IHNlZ21lbnRzLFxuICAgIG1lZGlhU2VxdWVuY2U6IHNlZ21lbnRzLmxlbmd0aCA/IHNlZ21lbnRzWzBdLm51bWJlciA6IDFcbiAgfTtcblxuICBpZiAoYXR0cmlidXRlcy5jb250ZW50UHJvdGVjdGlvbikge1xuICAgIHBsYXlsaXN0LmNvbnRlbnRQcm90ZWN0aW9uID0gYXR0cmlidXRlcy5jb250ZW50UHJvdGVjdGlvbjtcbiAgfVxuXG4gIGlmIChzaWR4KSB7XG4gICAgcGxheWxpc3Quc2lkeCA9IHNpZHg7XG4gIH1cblxuICByZXR1cm4gcGxheWxpc3Q7XG59O1xudmFyIHRvTTN1OCA9IGZ1bmN0aW9uIHRvTTN1OChkYXNoUGxheWxpc3RzLCBsb2NhdGlvbnMsIHNpZHhNYXBwaW5nKSB7XG4gIHZhciBfbWVkaWFHcm91cHM7XG5cbiAgaWYgKHNpZHhNYXBwaW5nID09PSB2b2lkIDApIHtcbiAgICBzaWR4TWFwcGluZyA9IHt9O1xuICB9XG5cbiAgaWYgKCFkYXNoUGxheWxpc3RzLmxlbmd0aCkge1xuICAgIHJldHVybiB7fTtcbiAgfSAvLyBncmFiIGFsbCBtYXN0ZXIgYXR0cmlidXRlc1xuXG5cbiAgdmFyIF9kYXNoUGxheWxpc3RzJDAkYXR0ciA9IGRhc2hQbGF5bGlzdHNbMF0uYXR0cmlidXRlcyxcbiAgICAgIGR1cmF0aW9uID0gX2Rhc2hQbGF5bGlzdHMkMCRhdHRyLnNvdXJjZUR1cmF0aW9uLFxuICAgICAgX2Rhc2hQbGF5bGlzdHMkMCRhdHRyMiA9IF9kYXNoUGxheWxpc3RzJDAkYXR0ci50eXBlLFxuICAgICAgdHlwZSA9IF9kYXNoUGxheWxpc3RzJDAkYXR0cjIgPT09IHZvaWQgMCA/ICdzdGF0aWMnIDogX2Rhc2hQbGF5bGlzdHMkMCRhdHRyMixcbiAgICAgIHN1Z2dlc3RlZFByZXNlbnRhdGlvbkRlbGF5ID0gX2Rhc2hQbGF5bGlzdHMkMCRhdHRyLnN1Z2dlc3RlZFByZXNlbnRhdGlvbkRlbGF5LFxuICAgICAgbWluaW11bVVwZGF0ZVBlcmlvZCA9IF9kYXNoUGxheWxpc3RzJDAkYXR0ci5taW5pbXVtVXBkYXRlUGVyaW9kO1xuXG4gIHZhciB2aWRlb09ubHkgPSBmdW5jdGlvbiB2aWRlb09ubHkoX3JlZjQpIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9IF9yZWY0LmF0dHJpYnV0ZXM7XG4gICAgcmV0dXJuIGF0dHJpYnV0ZXMubWltZVR5cGUgPT09ICd2aWRlby9tcDQnIHx8IGF0dHJpYnV0ZXMuY29udGVudFR5cGUgPT09ICd2aWRlbyc7XG4gIH07XG5cbiAgdmFyIGF1ZGlvT25seSA9IGZ1bmN0aW9uIGF1ZGlvT25seShfcmVmNSkge1xuICAgIHZhciBhdHRyaWJ1dGVzID0gX3JlZjUuYXR0cmlidXRlcztcbiAgICByZXR1cm4gYXR0cmlidXRlcy5taW1lVHlwZSA9PT0gJ2F1ZGlvL21wNCcgfHwgYXR0cmlidXRlcy5jb250ZW50VHlwZSA9PT0gJ2F1ZGlvJztcbiAgfTtcblxuICB2YXIgdnR0T25seSA9IGZ1bmN0aW9uIHZ0dE9ubHkoX3JlZjYpIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9IF9yZWY2LmF0dHJpYnV0ZXM7XG4gICAgcmV0dXJuIGF0dHJpYnV0ZXMubWltZVR5cGUgPT09ICd0ZXh0L3Z0dCcgfHwgYXR0cmlidXRlcy5jb250ZW50VHlwZSA9PT0gJ3RleHQnO1xuICB9O1xuXG4gIHZhciB2aWRlb1BsYXlsaXN0cyA9IG1lcmdlRGlzY29udGlndW91c1BsYXlsaXN0cyhkYXNoUGxheWxpc3RzLmZpbHRlcih2aWRlb09ubHkpKS5tYXAoZm9ybWF0VmlkZW9QbGF5bGlzdCk7XG4gIHZhciBhdWRpb1BsYXlsaXN0cyA9IG1lcmdlRGlzY29udGlndW91c1BsYXlsaXN0cyhkYXNoUGxheWxpc3RzLmZpbHRlcihhdWRpb09ubHkpKTtcbiAgdmFyIHZ0dFBsYXlsaXN0cyA9IGRhc2hQbGF5bGlzdHMuZmlsdGVyKHZ0dE9ubHkpO1xuICB2YXIgbWFzdGVyID0ge1xuICAgIGFsbG93Q2FjaGU6IHRydWUsXG4gICAgZGlzY29udGludWl0eVN0YXJ0czogW10sXG4gICAgc2VnbWVudHM6IFtdLFxuICAgIGVuZExpc3Q6IHRydWUsXG4gICAgbWVkaWFHcm91cHM6IChfbWVkaWFHcm91cHMgPSB7XG4gICAgICBBVURJTzoge30sXG4gICAgICBWSURFTzoge31cbiAgICB9LCBfbWVkaWFHcm91cHNbJ0NMT1NFRC1DQVBUSU9OUyddID0ge30sIF9tZWRpYUdyb3Vwcy5TVUJUSVRMRVMgPSB7fSwgX21lZGlhR3JvdXBzKSxcbiAgICB1cmk6ICcnLFxuICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICBwbGF5bGlzdHM6IGFkZFNlZ21lbnRJbmZvRnJvbVNpZHgodmlkZW9QbGF5bGlzdHMsIHNpZHhNYXBwaW5nKVxuICB9O1xuXG4gIGlmIChtaW5pbXVtVXBkYXRlUGVyaW9kID49IDApIHtcbiAgICBtYXN0ZXIubWluaW11bVVwZGF0ZVBlcmlvZCA9IG1pbmltdW1VcGRhdGVQZXJpb2QgKiAxMDAwO1xuICB9XG5cbiAgaWYgKGxvY2F0aW9ucykge1xuICAgIG1hc3Rlci5sb2NhdGlvbnMgPSBsb2NhdGlvbnM7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ2R5bmFtaWMnKSB7XG4gICAgbWFzdGVyLnN1Z2dlc3RlZFByZXNlbnRhdGlvbkRlbGF5ID0gc3VnZ2VzdGVkUHJlc2VudGF0aW9uRGVsYXk7XG4gIH1cblxuICBpZiAoYXVkaW9QbGF5bGlzdHMubGVuZ3RoKSB7XG4gICAgbWFzdGVyLm1lZGlhR3JvdXBzLkFVRElPLmF1ZGlvID0gb3JnYW5pemVBdWRpb1BsYXlsaXN0cyhhdWRpb1BsYXlsaXN0cywgc2lkeE1hcHBpbmcpO1xuICB9XG5cbiAgaWYgKHZ0dFBsYXlsaXN0cy5sZW5ndGgpIHtcbiAgICBtYXN0ZXIubWVkaWFHcm91cHMuU1VCVElUTEVTLnN1YnMgPSBvcmdhbml6ZVZ0dFBsYXlsaXN0cyh2dHRQbGF5bGlzdHMsIHNpZHhNYXBwaW5nKTtcbiAgfVxuXG4gIHJldHVybiBtYXN0ZXI7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIFIgKHJlcGV0aXRpb24pIHZhbHVlIGZvciBhIGxpdmUgc3RyZWFtIChmb3IgdGhlIGZpbmFsIHNlZ21lbnRcbiAqIGluIGEgbWFuaWZlc3Qgd2hlcmUgdGhlIHIgdmFsdWUgaXMgbmVnYXRpdmUgMSlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIGFsbCBpbmhlcml0ZWQgYXR0cmlidXRlcyBmcm9tIHBhcmVudCBlbGVtZW50cyB3aXRoIGF0dHJpYnV0ZVxuICogICAgICAgIG5hbWVzIGFzIGtleXNcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gKiAgICAgICAgY3VycmVudCB0aW1lICh0eXBpY2FsbHkgdGhlIHRvdGFsIHRpbWUgdXAgdW50aWwgdGhlIGZpbmFsIHNlZ21lbnQpXG4gKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAqICAgICAgICBkdXJhdGlvbiBwcm9wZXJ0eSBmb3IgdGhlIGdpdmVuIDxTIC8+XG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgIFIgdmFsdWUgdG8gcmVhY2ggdGhlIGVuZCBvZiB0aGUgZ2l2ZW4gcGVyaW9kXG4gKi9cbnZhciBnZXRMaXZlUlZhbHVlID0gZnVuY3Rpb24gZ2V0TGl2ZVJWYWx1ZShhdHRyaWJ1dGVzLCB0aW1lLCBkdXJhdGlvbikge1xuICB2YXIgTk9XID0gYXR0cmlidXRlcy5OT1csXG4gICAgICBjbGllbnRPZmZzZXQgPSBhdHRyaWJ1dGVzLmNsaWVudE9mZnNldCxcbiAgICAgIGF2YWlsYWJpbGl0eVN0YXJ0VGltZSA9IGF0dHJpYnV0ZXMuYXZhaWxhYmlsaXR5U3RhcnRUaW1lLFxuICAgICAgX2F0dHJpYnV0ZXMkdGltZXNjYWxlID0gYXR0cmlidXRlcy50aW1lc2NhbGUsXG4gICAgICB0aW1lc2NhbGUgPSBfYXR0cmlidXRlcyR0aW1lc2NhbGUgPT09IHZvaWQgMCA/IDEgOiBfYXR0cmlidXRlcyR0aW1lc2NhbGUsXG4gICAgICBfYXR0cmlidXRlcyRzdGFydCA9IGF0dHJpYnV0ZXMuc3RhcnQsXG4gICAgICBzdGFydCA9IF9hdHRyaWJ1dGVzJHN0YXJ0ID09PSB2b2lkIDAgPyAwIDogX2F0dHJpYnV0ZXMkc3RhcnQsXG4gICAgICBfYXR0cmlidXRlcyRtaW5pbXVtVXAgPSBhdHRyaWJ1dGVzLm1pbmltdW1VcGRhdGVQZXJpb2QsXG4gICAgICBtaW5pbXVtVXBkYXRlUGVyaW9kID0gX2F0dHJpYnV0ZXMkbWluaW11bVVwID09PSB2b2lkIDAgPyAwIDogX2F0dHJpYnV0ZXMkbWluaW11bVVwO1xuICB2YXIgbm93ID0gKE5PVyArIGNsaWVudE9mZnNldCkgLyAxMDAwO1xuICB2YXIgcGVyaW9kU3RhcnRXQyA9IGF2YWlsYWJpbGl0eVN0YXJ0VGltZSArIHN0YXJ0O1xuICB2YXIgcGVyaW9kRW5kV0MgPSBub3cgKyBtaW5pbXVtVXBkYXRlUGVyaW9kO1xuICB2YXIgcGVyaW9kRHVyYXRpb24gPSBwZXJpb2RFbmRXQyAtIHBlcmlvZFN0YXJ0V0M7XG4gIHJldHVybiBNYXRoLmNlaWwoKHBlcmlvZER1cmF0aW9uICogdGltZXNjYWxlIC0gdGltZSkgLyBkdXJhdGlvbik7XG59O1xuLyoqXG4gKiBVc2VzIGluZm9ybWF0aW9uIHByb3ZpZGVkIGJ5IFNlZ21lbnRUZW1wbGF0ZS5TZWdtZW50VGltZWxpbmUgdG8gZGV0ZXJtaW5lIHNlZ21lbnRcbiAqIHRpbWluZyBhbmQgZHVyYXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIGFsbCBpbmhlcml0ZWQgYXR0cmlidXRlcyBmcm9tIHBhcmVudCBlbGVtZW50cyB3aXRoIGF0dHJpYnV0ZVxuICogICAgICAgIG5hbWVzIGFzIGtleXNcbiAqIEBwYXJhbSB7T2JqZWN0W119IHNlZ21lbnRUaW1lbGluZVxuICogICAgICAgIExpc3Qgb2Ygb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIGF0dHJpYnV0ZXMgb2YgZWFjaCBTIGVsZW1lbnQgY29udGFpbmVkIHdpdGhpblxuICpcbiAqIEByZXR1cm4ge3tudW1iZXI6IG51bWJlciwgZHVyYXRpb246IG51bWJlciwgdGltZTogbnVtYmVyLCB0aW1lbGluZTogbnVtYmVyfVtdfVxuICogICAgICAgICBMaXN0IG9mIE9iamVjdHMgd2l0aCBzZWdtZW50IHRpbWluZyBhbmQgZHVyYXRpb24gaW5mb1xuICovXG5cblxudmFyIHBhcnNlQnlUaW1lbGluZSA9IGZ1bmN0aW9uIHBhcnNlQnlUaW1lbGluZShhdHRyaWJ1dGVzLCBzZWdtZW50VGltZWxpbmUpIHtcbiAgdmFyIF9hdHRyaWJ1dGVzJHR5cGUgPSBhdHRyaWJ1dGVzLnR5cGUsXG4gICAgICB0eXBlID0gX2F0dHJpYnV0ZXMkdHlwZSA9PT0gdm9pZCAwID8gJ3N0YXRpYycgOiBfYXR0cmlidXRlcyR0eXBlLFxuICAgICAgX2F0dHJpYnV0ZXMkbWluaW11bVVwMiA9IGF0dHJpYnV0ZXMubWluaW11bVVwZGF0ZVBlcmlvZCxcbiAgICAgIG1pbmltdW1VcGRhdGVQZXJpb2QgPSBfYXR0cmlidXRlcyRtaW5pbXVtVXAyID09PSB2b2lkIDAgPyAwIDogX2F0dHJpYnV0ZXMkbWluaW11bVVwMixcbiAgICAgIF9hdHRyaWJ1dGVzJG1lZGlhID0gYXR0cmlidXRlcy5tZWRpYSxcbiAgICAgIG1lZGlhID0gX2F0dHJpYnV0ZXMkbWVkaWEgPT09IHZvaWQgMCA/ICcnIDogX2F0dHJpYnV0ZXMkbWVkaWEsXG4gICAgICBzb3VyY2VEdXJhdGlvbiA9IGF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb24sXG4gICAgICBfYXR0cmlidXRlcyR0aW1lc2NhbGUyID0gYXR0cmlidXRlcy50aW1lc2NhbGUsXG4gICAgICB0aW1lc2NhbGUgPSBfYXR0cmlidXRlcyR0aW1lc2NhbGUyID09PSB2b2lkIDAgPyAxIDogX2F0dHJpYnV0ZXMkdGltZXNjYWxlMixcbiAgICAgIF9hdHRyaWJ1dGVzJHN0YXJ0TnVtYiA9IGF0dHJpYnV0ZXMuc3RhcnROdW1iZXIsXG4gICAgICBzdGFydE51bWJlciA9IF9hdHRyaWJ1dGVzJHN0YXJ0TnVtYiA9PT0gdm9pZCAwID8gMSA6IF9hdHRyaWJ1dGVzJHN0YXJ0TnVtYixcbiAgICAgIHRpbWVsaW5lID0gYXR0cmlidXRlcy5wZXJpb2RJbmRleDtcbiAgdmFyIHNlZ21lbnRzID0gW107XG4gIHZhciB0aW1lID0gLTE7XG5cbiAgZm9yICh2YXIgc0luZGV4ID0gMDsgc0luZGV4IDwgc2VnbWVudFRpbWVsaW5lLmxlbmd0aDsgc0luZGV4KyspIHtcbiAgICB2YXIgUyA9IHNlZ21lbnRUaW1lbGluZVtzSW5kZXhdO1xuICAgIHZhciBkdXJhdGlvbiA9IFMuZDtcbiAgICB2YXIgcmVwZWF0ID0gUy5yIHx8IDA7XG4gICAgdmFyIHNlZ21lbnRUaW1lID0gUy50IHx8IDA7XG5cbiAgICBpZiAodGltZSA8IDApIHtcbiAgICAgIC8vIGZpcnN0IHNlZ21lbnRcbiAgICAgIHRpbWUgPSBzZWdtZW50VGltZTtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudFRpbWUgJiYgc2VnbWVudFRpbWUgPiB0aW1lKSB7XG4gICAgICAvLyBkaXNjb250aW51aXR5XG4gICAgICAvLyBUT0RPOiBIb3cgdG8gaGFuZGxlIHRoaXMgdHlwZSBvZiBkaXNjb250aW51aXR5XG4gICAgICAvLyB0aW1lbGluZSsrIGhlcmUgd291bGQgdHJlYXQgaXQgbGlrZSBITFMgZGlzY29udHVpdHkgYW5kIGNvbnRlbnQgd291bGRcbiAgICAgIC8vIGdldCBhcHBlbmRlZCB3aXRob3V0IGdhcFxuICAgICAgLy8gRS5HLlxuICAgICAgLy8gIDxTIHQ9XCIwXCIgZD1cIjFcIiAvPlxuICAgICAgLy8gIDxTIGQ9XCIxXCIgLz5cbiAgICAgIC8vICA8UyBkPVwiMVwiIC8+XG4gICAgICAvLyAgPFMgdD1cIjVcIiBkPVwiMVwiIC8+XG4gICAgICAvLyB3b3VsZCBoYXZlICRUaW1lJCB2YWx1ZXMgb2YgWzAsIDEsIDIsIDVdXG4gICAgICAvLyBzaG91bGQgdGhpcyBiZSBhcHBlbmVkIGF0IHRpbWUgcG9zaXRpb25zIFswLCAxLCAyLCAzXSwoI0VYVC1YLURJU0NPTlRJTlVJVFkpXG4gICAgICAvLyBvciBbMCwgMSwgMiwgZ2FwLCBnYXAsIDVdPyAoI0VYVC1YLUdBUClcbiAgICAgIC8vIGRvZXMgdGhlIHZhbHVlIG9mIHNvdXJjZUR1cmF0aW9uIGNvbnNpZGVyIHRoaXMgd2hlbiBjYWxjdWxhdGluZyBhcmJpdHJhcnlcbiAgICAgIC8vIG5lZ2F0aXZlIEByIHJlcGVhdCB2YWx1ZT9cbiAgICAgIC8vIEUuRy4gU2FtZSBlbGVtZW50cyBhcyBhYm92ZSB3aXRoIHRoaXMgYWRkZWQgYXQgdGhlIGVuZFxuICAgICAgLy8gIDxTIGQ9XCIxXCIgcj1cIi0xXCIgLz5cbiAgICAgIC8vICB3aXRoIGEgc291cmNlRHVyYXRpb24gb2YgMTBcbiAgICAgIC8vIFdvdWxkIHRoZSAyIGdhcHMgYmUgaW5jbHVkZWQgaW4gdGhlIHRpbWUgZHVyYXRpb24gY2FsY3VsYXRpb25zIHJlc3VsdGluZyBpblxuICAgICAgLy8gOCBzZWdtZW50cyB3aXRoICRUaW1lJCB2YWx1ZXMgb2YgWzAsIDEsIDIsIDUsIDYsIDcsIDgsIDldIG9yIDEwIHNlZ21lbnRzXG4gICAgICAvLyB3aXRoICRUaW1lJCB2YWx1ZXMgb2YgWzAsIDEsIDIsIDUsIDYsIDcsIDgsIDksIDEwLCAxMV0gP1xuICAgICAgdGltZSA9IHNlZ21lbnRUaW1lO1xuICAgIH1cblxuICAgIHZhciBjb3VudCA9IHZvaWQgMDtcblxuICAgIGlmIChyZXBlYXQgPCAwKSB7XG4gICAgICB2YXIgbmV4dFMgPSBzSW5kZXggKyAxO1xuXG4gICAgICBpZiAobmV4dFMgPT09IHNlZ21lbnRUaW1lbGluZS5sZW5ndGgpIHtcbiAgICAgICAgLy8gbGFzdCBzZWdtZW50XG4gICAgICAgIGlmICh0eXBlID09PSAnZHluYW1pYycgJiYgbWluaW11bVVwZGF0ZVBlcmlvZCA+IDAgJiYgbWVkaWEuaW5kZXhPZignJE51bWJlciQnKSA+IDApIHtcbiAgICAgICAgICBjb3VudCA9IGdldExpdmVSVmFsdWUoYXR0cmlidXRlcywgdGltZSwgZHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRPRE86IFRoaXMgbWF5IGJlIGluY29ycmVjdCBkZXBlbmRpbmcgb24gY29uY2x1c2lvbiBvZiBUT0RPIGFib3ZlXG4gICAgICAgICAgY291bnQgPSAoc291cmNlRHVyYXRpb24gKiB0aW1lc2NhbGUgLSB0aW1lKSAvIGR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3VudCA9IChzZWdtZW50VGltZWxpbmVbbmV4dFNdLnQgLSB0aW1lKSAvIGR1cmF0aW9uO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IHJlcGVhdCArIDE7XG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IHN0YXJ0TnVtYmVyICsgc2VnbWVudHMubGVuZ3RoICsgY291bnQ7XG4gICAgdmFyIG51bWJlciA9IHN0YXJ0TnVtYmVyICsgc2VnbWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKG51bWJlciA8IGVuZCkge1xuICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgIG51bWJlcjogbnVtYmVyLFxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLyB0aW1lc2NhbGUsXG4gICAgICAgIHRpbWU6IHRpbWUsXG4gICAgICAgIHRpbWVsaW5lOiB0aW1lbGluZVxuICAgICAgfSk7XG4gICAgICB0aW1lICs9IGR1cmF0aW9uO1xuICAgICAgbnVtYmVyKys7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzO1xufTtcblxudmFyIGlkZW50aWZpZXJQYXR0ZXJuID0gL1xcJChbQS16XSopKD86KCUwKShbMC05XSspZCk/XFwkL2c7XG4vKipcbiAqIFJlcGxhY2VzIHRlbXBsYXRlIGlkZW50aWZpZXJzIHdpdGggY29ycmVzcG9uZGluZyB2YWx1ZXMuIFRvIGJlIHVzZWQgYXMgdGhlIGNhbGxiYWNrXG4gKiBmb3IgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gKlxuICogQG5hbWUgcmVwbGFjZUNhbGxiYWNrXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaFxuICogICAgICAgIEVudGlyZSBtYXRjaCBvZiBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuICogICAgICAgIE5hbWUgb2YgbWF0Y2hlZCBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0XG4gKiAgICAgICAgRm9ybWF0IHRhZyBzdHJpbmcuIEl0cyBwcmVzZW5jZSBpbmRpY2F0ZXMgdGhhdCBwYWRkaW5nIGlzIGV4cGVjdGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gd2lkdGhcbiAqICAgICAgICBEZXNpcmVkIGxlbmd0aCBvZiB0aGUgcmVwbGFjZWQgdmFsdWUuIFZhbHVlcyBsZXNzIHRoYW4gdGhpcyB3aWR0aCBzaGFsbCBiZSBsZWZ0XG4gKiAgICAgICAgemVybyBwYWRkZWRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgUmVwbGFjZW1lbnQgZm9yIHRoZSBtYXRjaGVkIGlkZW50aWZpZXJcbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGFzIGEgY2FsbGJhY2sgZm9yIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSB0byByZXBsYWNlXG4gKiB0ZW1wbGF0ZSBpZGVudGlmaWVyc1xuICpcbiAqIEBwYXJhbSB7T2JlY3R9IHZhbHVlc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIHZhbHVlcyB0aGF0IHNoYWxsIGJlIHVzZWQgdG8gcmVwbGFjZSBrbm93biBpZGVudGlmaWVyc1xuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlcy5SZXByZXNlbnRhdGlvbklEXG4gKiAgICAgICAgVmFsdWUgb2YgdGhlIFJlcHJlc2VudGF0aW9uQGlkIGF0dHJpYnV0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlcy5OdW1iZXJcbiAqICAgICAgICBOdW1iZXIgb2YgdGhlIGNvcnJlc3BvbmRpbmcgc2VnbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlcy5CYW5kd2lkdGhcbiAqICAgICAgICBWYWx1ZSBvZiB0aGUgUmVwcmVzZW50YXRpb25AYmFuZHdpZHRoIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZXMuVGltZVxuICogICAgICAgIFRpbWVzdGFtcCB2YWx1ZSBvZiB0aGUgY29ycmVzcG9uZGluZyBzZWdtZW50XG4gKiBAcmV0dXJuIHtyZXBsYWNlQ2FsbGJhY2t9XG4gKiAgICAgICAgIENhbGxiYWNrIHRvIGJlIHVzZWQgd2l0aCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UgdG8gcmVwbGFjZSBpZGVudGlmaWVyc1xuICovXG5cbnZhciBpZGVudGlmaWVyUmVwbGFjZW1lbnQgPSBmdW5jdGlvbiBpZGVudGlmaWVyUmVwbGFjZW1lbnQodmFsdWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGlkZW50aWZpZXIsIGZvcm1hdCwgd2lkdGgpIHtcbiAgICBpZiAobWF0Y2ggPT09ICckJCcpIHtcbiAgICAgIC8vIGVzY2FwZSBzZXF1ZW5jZVxuICAgICAgcmV0dXJuICckJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlc1tpZGVudGlmaWVyXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSAnJyArIHZhbHVlc1tpZGVudGlmaWVyXTtcblxuICAgIGlmIChpZGVudGlmaWVyID09PSAnUmVwcmVzZW50YXRpb25JRCcpIHtcbiAgICAgIC8vIEZvcm1hdCB0YWcgc2hhbGwgbm90IGJlIHByZXNlbnQgd2l0aCBSZXByZXNlbnRhdGlvbklEXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgIHdpZHRoID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2lkdGggPSBwYXJzZUludCh3aWR0aCwgMTApO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5sZW5ndGggPj0gd2lkdGgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIiArIG5ldyBBcnJheSh3aWR0aCAtIHZhbHVlLmxlbmd0aCArIDEpLmpvaW4oJzAnKSArIHZhbHVlO1xuICB9O1xufTtcbi8qKlxuICogQ29uc3RydWN0cyBhIHNlZ21lbnQgdXJsIGZyb20gYSB0ZW1wbGF0ZSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiAgICAgICAgVGVtcGxhdGUgc3RyaW5nIHRvIGNvbnN0cnVjdCB1cmwgZnJvbVxuICogQHBhcmFtIHtPYmVjdH0gdmFsdWVzXG4gKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgdmFsdWVzIHRoYXQgc2hhbGwgYmUgdXNlZCB0byByZXBsYWNlIGtub3duIGlkZW50aWZpZXJzXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVzLlJlcHJlc2VudGF0aW9uSURcbiAqICAgICAgICBWYWx1ZSBvZiB0aGUgUmVwcmVzZW50YXRpb25AaWQgYXR0cmlidXRlXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVzLk51bWJlclxuICogICAgICAgIE51bWJlciBvZiB0aGUgY29ycmVzcG9uZGluZyBzZWdtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVzLkJhbmR3aWR0aFxuICogICAgICAgIFZhbHVlIG9mIHRoZSBSZXByZXNlbnRhdGlvbkBiYW5kd2lkdGggYXR0cmlidXRlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlcy5UaW1lXG4gKiAgICAgICAgVGltZXN0YW1wIHZhbHVlIG9mIHRoZSBjb3JyZXNwb25kaW5nIHNlZ21lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgU2VnbWVudCB1cmwgd2l0aCBpZGVudGlmaWVycyByZXBsYWNlZFxuICovXG5cbnZhciBjb25zdHJ1Y3RUZW1wbGF0ZVVybCA9IGZ1bmN0aW9uIGNvbnN0cnVjdFRlbXBsYXRlVXJsKHVybCwgdmFsdWVzKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZShpZGVudGlmaWVyUGF0dGVybiwgaWRlbnRpZmllclJlcGxhY2VtZW50KHZhbHVlcykpO1xufTtcbi8qKlxuICogR2VuZXJhdGVzIGEgbGlzdCBvZiBvYmplY3RzIGNvbnRhaW5pbmcgdGltaW5nIGFuZCBkdXJhdGlvbiBpbmZvcm1hdGlvbiBhYm91dCBlYWNoXG4gKiBzZWdtZW50IG5lZWRlZCB0byBnZW5lcmF0ZSBzZWdtZW50IHVyaXMgYW5kIHRoZSBjb21wbGV0ZSBzZWdtZW50IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzXG4gKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgYWxsIGluaGVyaXRlZCBhdHRyaWJ1dGVzIGZyb20gcGFyZW50IGVsZW1lbnRzIHdpdGggYXR0cmlidXRlXG4gKiAgICAgICAgbmFtZXMgYXMga2V5c1xuICogQHBhcmFtIHtPYmplY3RbXXx1bmRlZmluZWR9IHNlZ21lbnRUaW1lbGluZVxuICogICAgICAgIExpc3Qgb2Ygb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIGF0dHJpYnV0ZXMgb2YgZWFjaCBTIGVsZW1lbnQgY29udGFpbmVkIHdpdGhpblxuICogICAgICAgIHRoZSBTZWdtZW50VGltZWxpbmUgZWxlbWVudFxuICogQHJldHVybiB7e251bWJlcjogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyLCB0aW1lOiBudW1iZXIsIHRpbWVsaW5lOiBudW1iZXJ9W119XG4gKiAgICAgICAgIExpc3Qgb2YgT2JqZWN0cyB3aXRoIHNlZ21lbnQgdGltaW5nIGFuZCBkdXJhdGlvbiBpbmZvXG4gKi9cblxudmFyIHBhcnNlVGVtcGxhdGVJbmZvID0gZnVuY3Rpb24gcGFyc2VUZW1wbGF0ZUluZm8oYXR0cmlidXRlcywgc2VnbWVudFRpbWVsaW5lKSB7XG4gIGlmICghYXR0cmlidXRlcy5kdXJhdGlvbiAmJiAhc2VnbWVudFRpbWVsaW5lKSB7XG4gICAgLy8gaWYgbmVpdGhlciBAZHVyYXRpb24gb3IgU2VnbWVudFRpbWVsaW5lIGFyZSBwcmVzZW50LCB0aGVuIHRoZXJlIHNoYWxsIGJlIGV4YWN0bHlcbiAgICAvLyBvbmUgbWVkaWEgc2VnbWVudFxuICAgIHJldHVybiBbe1xuICAgICAgbnVtYmVyOiBhdHRyaWJ1dGVzLnN0YXJ0TnVtYmVyIHx8IDEsXG4gICAgICBkdXJhdGlvbjogYXR0cmlidXRlcy5zb3VyY2VEdXJhdGlvbixcbiAgICAgIHRpbWU6IDAsXG4gICAgICB0aW1lbGluZTogYXR0cmlidXRlcy5wZXJpb2RJbmRleFxuICAgIH1dO1xuICB9XG5cbiAgaWYgKGF0dHJpYnV0ZXMuZHVyYXRpb24pIHtcbiAgICByZXR1cm4gcGFyc2VCeUR1cmF0aW9uKGF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlQnlUaW1lbGluZShhdHRyaWJ1dGVzLCBzZWdtZW50VGltZWxpbmUpO1xufTtcbi8qKlxuICogR2VuZXJhdGVzIGEgbGlzdCBvZiBzZWdtZW50cyB1c2luZyBpbmZvcm1hdGlvbiBwcm92aWRlZCBieSB0aGUgU2VnbWVudFRlbXBsYXRlIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIGFsbCBpbmhlcml0ZWQgYXR0cmlidXRlcyBmcm9tIHBhcmVudCBlbGVtZW50cyB3aXRoIGF0dHJpYnV0ZVxuICogICAgICAgIG5hbWVzIGFzIGtleXNcbiAqIEBwYXJhbSB7T2JqZWN0W118dW5kZWZpbmVkfSBzZWdtZW50VGltZWxpbmVcbiAqICAgICAgICBMaXN0IG9mIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSBhdHRyaWJ1dGVzIG9mIGVhY2ggUyBlbGVtZW50IGNvbnRhaW5lZCB3aXRoaW5cbiAqICAgICAgICB0aGUgU2VnbWVudFRpbWVsaW5lIGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdFtdfVxuICogICAgICAgICBMaXN0IG9mIHNlZ21lbnQgb2JqZWN0c1xuICovXG5cbnZhciBzZWdtZW50c0Zyb21UZW1wbGF0ZSA9IGZ1bmN0aW9uIHNlZ21lbnRzRnJvbVRlbXBsYXRlKGF0dHJpYnV0ZXMsIHNlZ21lbnRUaW1lbGluZSkge1xuICB2YXIgdGVtcGxhdGVWYWx1ZXMgPSB7XG4gICAgUmVwcmVzZW50YXRpb25JRDogYXR0cmlidXRlcy5pZCxcbiAgICBCYW5kd2lkdGg6IGF0dHJpYnV0ZXMuYmFuZHdpZHRoIHx8IDBcbiAgfTtcbiAgdmFyIF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9IGF0dHJpYnV0ZXMuaW5pdGlhbGl6YXRpb24sXG4gICAgICBpbml0aWFsaXphdGlvbiA9IF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9PT0gdm9pZCAwID8ge1xuICAgIHNvdXJjZVVSTDogJycsXG4gICAgcmFuZ2U6ICcnXG4gIH0gOiBfYXR0cmlidXRlcyRpbml0aWFsaXo7XG4gIHZhciBtYXBTZWdtZW50ID0gdXJsVHlwZVRvU2VnbWVudCh7XG4gICAgYmFzZVVybDogYXR0cmlidXRlcy5iYXNlVXJsLFxuICAgIHNvdXJjZTogY29uc3RydWN0VGVtcGxhdGVVcmwoaW5pdGlhbGl6YXRpb24uc291cmNlVVJMLCB0ZW1wbGF0ZVZhbHVlcyksXG4gICAgcmFuZ2U6IGluaXRpYWxpemF0aW9uLnJhbmdlXG4gIH0pO1xuICB2YXIgc2VnbWVudHMgPSBwYXJzZVRlbXBsYXRlSW5mbyhhdHRyaWJ1dGVzLCBzZWdtZW50VGltZWxpbmUpO1xuICByZXR1cm4gc2VnbWVudHMubWFwKGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgdGVtcGxhdGVWYWx1ZXMuTnVtYmVyID0gc2VnbWVudC5udW1iZXI7XG4gICAgdGVtcGxhdGVWYWx1ZXMuVGltZSA9IHNlZ21lbnQudGltZTtcbiAgICB2YXIgdXJpID0gY29uc3RydWN0VGVtcGxhdGVVcmwoYXR0cmlidXRlcy5tZWRpYSB8fCAnJywgdGVtcGxhdGVWYWx1ZXMpO1xuICAgIHJldHVybiB7XG4gICAgICB1cmk6IHVyaSxcbiAgICAgIHRpbWVsaW5lOiBzZWdtZW50LnRpbWVsaW5lLFxuICAgICAgZHVyYXRpb246IHNlZ21lbnQuZHVyYXRpb24sXG4gICAgICByZXNvbHZlZFVyaTogcmVzb2x2ZVVybChhdHRyaWJ1dGVzLmJhc2VVcmwgfHwgJycsIHVyaSksXG4gICAgICBtYXA6IG1hcFNlZ21lbnQsXG4gICAgICBudW1iZXI6IHNlZ21lbnQubnVtYmVyXG4gICAgfTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgPFNlZ21lbnRVcmw+IChvZiB0eXBlIFVSTFR5cGUgZnJvbSB0aGUgREFTSCBzcGVjIDUuMy45LjIgVGFibGUgMTQpXG4gKiB0byBhbiBvYmplY3QgdGhhdCBtYXRjaGVzIHRoZSBvdXRwdXQgb2YgYSBzZWdtZW50IGluIHZpZGVvanMvbXBkLXBhcnNlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzXG4gKiAgIE9iamVjdCBjb250YWluaW5nIGFsbCBpbmhlcml0ZWQgYXR0cmlidXRlcyBmcm9tIHBhcmVudCBlbGVtZW50cyB3aXRoIGF0dHJpYnV0ZVxuICogICBuYW1lcyBhcyBrZXlzXG4gKiBAcGFyYW0ge09iamVjdH0gc2VnbWVudFVybFxuICogICA8U2VnbWVudFVSTD4gbm9kZSB0byB0cmFuc2xhdGUgaW50byBhIHNlZ21lbnQgb2JqZWN0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHRyYW5zbGF0ZWQgc2VnbWVudCBvYmplY3RcbiAqL1xuXG52YXIgU2VnbWVudFVSTFRvU2VnbWVudE9iamVjdCA9IGZ1bmN0aW9uIFNlZ21lbnRVUkxUb1NlZ21lbnRPYmplY3QoYXR0cmlidXRlcywgc2VnbWVudFVybCkge1xuICB2YXIgYmFzZVVybCA9IGF0dHJpYnV0ZXMuYmFzZVVybCxcbiAgICAgIF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9IGF0dHJpYnV0ZXMuaW5pdGlhbGl6YXRpb24sXG4gICAgICBpbml0aWFsaXphdGlvbiA9IF9hdHRyaWJ1dGVzJGluaXRpYWxpeiA9PT0gdm9pZCAwID8ge30gOiBfYXR0cmlidXRlcyRpbml0aWFsaXo7XG4gIHZhciBpbml0U2VnbWVudCA9IHVybFR5cGVUb1NlZ21lbnQoe1xuICAgIGJhc2VVcmw6IGJhc2VVcmwsXG4gICAgc291cmNlOiBpbml0aWFsaXphdGlvbi5zb3VyY2VVUkwsXG4gICAgcmFuZ2U6IGluaXRpYWxpemF0aW9uLnJhbmdlXG4gIH0pO1xuICB2YXIgc2VnbWVudCA9IHVybFR5cGVUb1NlZ21lbnQoe1xuICAgIGJhc2VVcmw6IGJhc2VVcmwsXG4gICAgc291cmNlOiBzZWdtZW50VXJsLm1lZGlhLFxuICAgIHJhbmdlOiBzZWdtZW50VXJsLm1lZGlhUmFuZ2VcbiAgfSk7XG4gIHNlZ21lbnQubWFwID0gaW5pdFNlZ21lbnQ7XG4gIHJldHVybiBzZWdtZW50O1xufTtcbi8qKlxuICogR2VuZXJhdGVzIGEgbGlzdCBvZiBzZWdtZW50cyB1c2luZyBpbmZvcm1hdGlvbiBwcm92aWRlZCBieSB0aGUgU2VnbWVudExpc3QgZWxlbWVudFxuICogU2VnbWVudExpc3QgKERBU0ggU1BFQyBTZWN0aW9uIDUuMy45LjMuMikgY29udGFpbnMgYSBzZXQgb2YgPFNlZ21lbnRVUkw+IG5vZGVzLiAgRWFjaFxuICogbm9kZSBzaG91bGQgYmUgdHJhbnNsYXRlZCBpbnRvIHNlZ21lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXNcbiAqICAgT2JqZWN0IGNvbnRhaW5pbmcgYWxsIGluaGVyaXRlZCBhdHRyaWJ1dGVzIGZyb20gcGFyZW50IGVsZW1lbnRzIHdpdGggYXR0cmlidXRlXG4gKiAgIG5hbWVzIGFzIGtleXNcbiAqIEBwYXJhbSB7T2JqZWN0W118dW5kZWZpbmVkfSBzZWdtZW50VGltZWxpbmVcbiAqICAgICAgICBMaXN0IG9mIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSBhdHRyaWJ1dGVzIG9mIGVhY2ggUyBlbGVtZW50IGNvbnRhaW5lZCB3aXRoaW5cbiAqICAgICAgICB0aGUgU2VnbWVudFRpbWVsaW5lIGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdC48QXJyYXk+fSBsaXN0IG9mIHNlZ21lbnRzXG4gKi9cblxuXG52YXIgc2VnbWVudHNGcm9tTGlzdCA9IGZ1bmN0aW9uIHNlZ21lbnRzRnJvbUxpc3QoYXR0cmlidXRlcywgc2VnbWVudFRpbWVsaW5lKSB7XG4gIHZhciBkdXJhdGlvbiA9IGF0dHJpYnV0ZXMuZHVyYXRpb24sXG4gICAgICBfYXR0cmlidXRlcyRzZWdtZW50VXIgPSBhdHRyaWJ1dGVzLnNlZ21lbnRVcmxzLFxuICAgICAgc2VnbWVudFVybHMgPSBfYXR0cmlidXRlcyRzZWdtZW50VXIgPT09IHZvaWQgMCA/IFtdIDogX2F0dHJpYnV0ZXMkc2VnbWVudFVyOyAvLyBQZXIgc3BlYyAoNS4zLjkuMi4xKSBubyB3YXkgdG8gZGV0ZXJtaW5lIHNlZ21lbnQgZHVyYXRpb24gT1JcbiAgLy8gaWYgYm90aCBTZWdtZW50VGltZWxpbmUgYW5kIEBkdXJhdGlvbiBhcmUgZGVmaW5lZCwgaXQgaXMgb3V0c2lkZSBvZiBzcGVjLlxuXG4gIGlmICghZHVyYXRpb24gJiYgIXNlZ21lbnRUaW1lbGluZSB8fCBkdXJhdGlvbiAmJiBzZWdtZW50VGltZWxpbmUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLlNFR01FTlRfVElNRV9VTlNQRUNJRklFRCk7XG4gIH1cblxuICB2YXIgc2VnbWVudFVybE1hcCA9IHNlZ21lbnRVcmxzLm1hcChmdW5jdGlvbiAoc2VnbWVudFVybE9iamVjdCkge1xuICAgIHJldHVybiBTZWdtZW50VVJMVG9TZWdtZW50T2JqZWN0KGF0dHJpYnV0ZXMsIHNlZ21lbnRVcmxPYmplY3QpO1xuICB9KTtcbiAgdmFyIHNlZ21lbnRUaW1lSW5mbztcblxuICBpZiAoZHVyYXRpb24pIHtcbiAgICBzZWdtZW50VGltZUluZm8gPSBwYXJzZUJ5RHVyYXRpb24oYXR0cmlidXRlcyk7XG4gIH1cblxuICBpZiAoc2VnbWVudFRpbWVsaW5lKSB7XG4gICAgc2VnbWVudFRpbWVJbmZvID0gcGFyc2VCeVRpbWVsaW5lKGF0dHJpYnV0ZXMsIHNlZ21lbnRUaW1lbGluZSk7XG4gIH1cblxuICB2YXIgc2VnbWVudHMgPSBzZWdtZW50VGltZUluZm8ubWFwKGZ1bmN0aW9uIChzZWdtZW50VGltZSwgaW5kZXgpIHtcbiAgICBpZiAoc2VnbWVudFVybE1hcFtpbmRleF0pIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudFVybE1hcFtpbmRleF07XG4gICAgICBzZWdtZW50LnRpbWVsaW5lID0gc2VnbWVudFRpbWUudGltZWxpbmU7XG4gICAgICBzZWdtZW50LmR1cmF0aW9uID0gc2VnbWVudFRpbWUuZHVyYXRpb247XG4gICAgICBzZWdtZW50Lm51bWJlciA9IHNlZ21lbnRUaW1lLm51bWJlcjtcbiAgICAgIHJldHVybiBzZWdtZW50O1xuICAgIH0gLy8gU2luY2Ugd2UncmUgbWFwcGluZyB3ZSBzaG91bGQgZ2V0IHJpZCBvZiBhbnkgYmxhbmsgc2VnbWVudHMgKGluIGNhc2VcbiAgICAvLyB0aGUgZ2l2ZW4gU2VnbWVudFRpbWVsaW5lIGlzIGhhbmRsaW5nIGZvciBtb3JlIGVsZW1lbnRzIHRoYW4gd2UgaGF2ZVxuICAgIC8vIFNlZ21lbnRVUkxzIGZvcikuXG5cbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgcmV0dXJuIHNlZ21lbnQ7XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHM7XG59O1xuXG52YXIgZ2VuZXJhdGVTZWdtZW50cyA9IGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudHMoX3JlZikge1xuICB2YXIgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlcyxcbiAgICAgIHNlZ21lbnRJbmZvID0gX3JlZi5zZWdtZW50SW5mbztcbiAgdmFyIHNlZ21lbnRBdHRyaWJ1dGVzO1xuICB2YXIgc2VnbWVudHNGbjtcblxuICBpZiAoc2VnbWVudEluZm8udGVtcGxhdGUpIHtcbiAgICBzZWdtZW50c0ZuID0gc2VnbWVudHNGcm9tVGVtcGxhdGU7XG4gICAgc2VnbWVudEF0dHJpYnV0ZXMgPSBtZXJnZShhdHRyaWJ1dGVzLCBzZWdtZW50SW5mby50ZW1wbGF0ZSk7XG4gIH0gZWxzZSBpZiAoc2VnbWVudEluZm8uYmFzZSkge1xuICAgIHNlZ21lbnRzRm4gPSBzZWdtZW50c0Zyb21CYXNlO1xuICAgIHNlZ21lbnRBdHRyaWJ1dGVzID0gbWVyZ2UoYXR0cmlidXRlcywgc2VnbWVudEluZm8uYmFzZSk7XG4gIH0gZWxzZSBpZiAoc2VnbWVudEluZm8ubGlzdCkge1xuICAgIHNlZ21lbnRzRm4gPSBzZWdtZW50c0Zyb21MaXN0O1xuICAgIHNlZ21lbnRBdHRyaWJ1dGVzID0gbWVyZ2UoYXR0cmlidXRlcywgc2VnbWVudEluZm8ubGlzdCk7XG4gIH1cblxuICB2YXIgc2VnbWVudHNJbmZvID0ge1xuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNcbiAgfTtcblxuICBpZiAoIXNlZ21lbnRzRm4pIHtcbiAgICByZXR1cm4gc2VnbWVudHNJbmZvO1xuICB9XG5cbiAgdmFyIHNlZ21lbnRzID0gc2VnbWVudHNGbihzZWdtZW50QXR0cmlidXRlcywgc2VnbWVudEluZm8udGltZWxpbmUpOyAvLyBUaGUgQGR1cmF0aW9uIGF0dHJpYnV0ZSB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW4gdGhlIHBsYXlsaXN0J3MgdGFyZ2V0RHVyYXRpb24gd2hpY2hcbiAgLy8gbXVzdCBiZSBpbiBzZWNvbmRzLiBTaW5jZSB3ZSd2ZSBnZW5lcmF0ZWQgdGhlIHNlZ21lbnQgbGlzdCwgd2Ugbm8gbG9uZ2VyIG5lZWRcbiAgLy8gQGR1cmF0aW9uIHRvIGJlIGluIEB0aW1lc2NhbGUgdW5pdHMsIHNvIHdlIGNhbiBjb252ZXJ0IGl0IGhlcmUuXG5cbiAgaWYgKHNlZ21lbnRBdHRyaWJ1dGVzLmR1cmF0aW9uKSB7XG4gICAgdmFyIF9zZWdtZW50QXR0cmlidXRlcyA9IHNlZ21lbnRBdHRyaWJ1dGVzLFxuICAgICAgICBkdXJhdGlvbiA9IF9zZWdtZW50QXR0cmlidXRlcy5kdXJhdGlvbixcbiAgICAgICAgX3NlZ21lbnRBdHRyaWJ1dGVzJHRpID0gX3NlZ21lbnRBdHRyaWJ1dGVzLnRpbWVzY2FsZSxcbiAgICAgICAgdGltZXNjYWxlID0gX3NlZ21lbnRBdHRyaWJ1dGVzJHRpID09PSB2b2lkIDAgPyAxIDogX3NlZ21lbnRBdHRyaWJ1dGVzJHRpO1xuICAgIHNlZ21lbnRBdHRyaWJ1dGVzLmR1cmF0aW9uID0gZHVyYXRpb24gLyB0aW1lc2NhbGU7XG4gIH0gZWxzZSBpZiAoc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgLy8gaWYgdGhlcmUgaXMgbm8gQGR1cmF0aW9uIGF0dHJpYnV0ZSwgdXNlIHRoZSBsYXJnZXN0IHNlZ21lbnQgZHVyYXRpb24gYXNcbiAgICAvLyBhcyB0YXJnZXQgZHVyYXRpb25cbiAgICBzZWdtZW50QXR0cmlidXRlcy5kdXJhdGlvbiA9IHNlZ21lbnRzLnJlZHVjZShmdW5jdGlvbiAobWF4LCBzZWdtZW50KSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgobWF4LCBNYXRoLmNlaWwoc2VnbWVudC5kdXJhdGlvbikpO1xuICAgIH0sIDApO1xuICB9IGVsc2Uge1xuICAgIHNlZ21lbnRBdHRyaWJ1dGVzLmR1cmF0aW9uID0gMDtcbiAgfVxuXG4gIHNlZ21lbnRzSW5mby5hdHRyaWJ1dGVzID0gc2VnbWVudEF0dHJpYnV0ZXM7XG4gIHNlZ21lbnRzSW5mby5zZWdtZW50cyA9IHNlZ21lbnRzOyAvLyBUaGlzIGlzIGEgc2lkeCBib3ggd2l0aG91dCBhY3R1YWwgc2VnbWVudCBpbmZvcm1hdGlvblxuXG4gIGlmIChzZWdtZW50SW5mby5iYXNlICYmIHNlZ21lbnRBdHRyaWJ1dGVzLmluZGV4UmFuZ2UpIHtcbiAgICBzZWdtZW50c0luZm8uc2lkeCA9IHNlZ21lbnRzWzBdO1xuICAgIHNlZ21lbnRzSW5mby5zZWdtZW50cyA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzSW5mbztcbn07XG52YXIgdG9QbGF5bGlzdHMgPSBmdW5jdGlvbiB0b1BsYXlsaXN0cyhyZXByZXNlbnRhdGlvbnMpIHtcbiAgcmV0dXJuIHJlcHJlc2VudGF0aW9ucy5tYXAoZ2VuZXJhdGVTZWdtZW50cyk7XG59O1xuXG52YXIgZmluZENoaWxkcmVuID0gZnVuY3Rpb24gZmluZENoaWxkcmVuKGVsZW1lbnQsIG5hbWUpIHtcbiAgcmV0dXJuIGZyb20oZWxlbWVudC5jaGlsZE5vZGVzKS5maWx0ZXIoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgdGFnTmFtZSA9IF9yZWYudGFnTmFtZTtcbiAgICByZXR1cm4gdGFnTmFtZSA9PT0gbmFtZTtcbiAgfSk7XG59O1xudmFyIGdldENvbnRlbnQgPSBmdW5jdGlvbiBnZXRDb250ZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudGV4dENvbnRlbnQudHJpbSgpO1xufTtcblxudmFyIHBhcnNlRHVyYXRpb24gPSBmdW5jdGlvbiBwYXJzZUR1cmF0aW9uKHN0cikge1xuICB2YXIgU0VDT05EU19JTl9ZRUFSID0gMzY1ICogMjQgKiA2MCAqIDYwO1xuICB2YXIgU0VDT05EU19JTl9NT05USCA9IDMwICogMjQgKiA2MCAqIDYwO1xuICB2YXIgU0VDT05EU19JTl9EQVkgPSAyNCAqIDYwICogNjA7XG4gIHZhciBTRUNPTkRTX0lOX0hPVVIgPSA2MCAqIDYwO1xuICB2YXIgU0VDT05EU19JTl9NSU4gPSA2MDsgLy8gUDEwWTEwTTEwRFQxMEgxME0xMC4xU1xuXG4gIHZhciBkdXJhdGlvblJlZ2V4ID0gL1AoPzooXFxkKilZKT8oPzooXFxkKilNKT8oPzooXFxkKilEKT8oPzpUKD86KFxcZCopSCk/KD86KFxcZCopTSk/KD86KFtcXGQuXSopUyk/KT8vO1xuICB2YXIgbWF0Y2ggPSBkdXJhdGlvblJlZ2V4LmV4ZWMoc3RyKTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgX21hdGNoJHNsaWNlID0gbWF0Y2guc2xpY2UoMSksXG4gICAgICB5ZWFyID0gX21hdGNoJHNsaWNlWzBdLFxuICAgICAgbW9udGggPSBfbWF0Y2gkc2xpY2VbMV0sXG4gICAgICBkYXkgPSBfbWF0Y2gkc2xpY2VbMl0sXG4gICAgICBob3VyID0gX21hdGNoJHNsaWNlWzNdLFxuICAgICAgbWludXRlID0gX21hdGNoJHNsaWNlWzRdLFxuICAgICAgc2Vjb25kID0gX21hdGNoJHNsaWNlWzVdO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHllYXIgfHwgMCkgKiBTRUNPTkRTX0lOX1lFQVIgKyBwYXJzZUZsb2F0KG1vbnRoIHx8IDApICogU0VDT05EU19JTl9NT05USCArIHBhcnNlRmxvYXQoZGF5IHx8IDApICogU0VDT05EU19JTl9EQVkgKyBwYXJzZUZsb2F0KGhvdXIgfHwgMCkgKiBTRUNPTkRTX0lOX0hPVVIgKyBwYXJzZUZsb2F0KG1pbnV0ZSB8fCAwKSAqIFNFQ09ORFNfSU5fTUlOICsgcGFyc2VGbG9hdChzZWNvbmQgfHwgMCk7XG59O1xudmFyIHBhcnNlRGF0ZSA9IGZ1bmN0aW9uIHBhcnNlRGF0ZShzdHIpIHtcbiAgLy8gRGF0ZSBmb3JtYXQgd2l0aG91dCB0aW1lem9uZSBhY2NvcmRpbmcgdG8gSVNPIDg2MDFcbiAgLy8gWVlZLU1NLUREVGhoOm1tOnNzLnNzc3Nzc1xuICB2YXIgZGF0ZVJlZ2V4ID0gL15cXGQrLVxcZCstXFxkK1RcXGQrOlxcZCs6XFxkKyhcXC5cXGQrKT8kLzsgLy8gSWYgdGhlIGRhdGUgc3RyaW5nIGRvZXMgbm90IHNwZWNpZml5IGEgdGltZXpvbmUsIHdlIG11c3Qgc3BlY2lmaXkgVVRDLiBUaGlzIGlzXG4gIC8vIGV4cHJlc3NlZCBieSBlbmRpbmcgd2l0aCAnWidcblxuICBpZiAoZGF0ZVJlZ2V4LnRlc3Qoc3RyKSkge1xuICAgIHN0ciArPSAnWic7XG4gIH1cblxuICByZXR1cm4gRGF0ZS5wYXJzZShzdHIpO1xufTtcblxudmFyIHBhcnNlcnMgPSB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGR1cmF0aW9uIG9mIHRoZSBlbnRpcmUgTWVkaWEgUHJlc2VudGF0aW9uLiBGb3JtYXQgaXMgYSBkdXJhdGlvbiBzdHJpbmdcbiAgICogYXMgc3BlY2lmaWVkIGluIElTTyA4NjAxXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiAgICAgICAgdmFsdWUgb2YgYXR0cmlidXRlIGFzIGEgc3RyaW5nXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgZHVyYXRpb24gaW4gc2Vjb25kc1xuICAgKi9cbiAgbWVkaWFQcmVzZW50YXRpb25EdXJhdGlvbjogZnVuY3Rpb24gbWVkaWFQcmVzZW50YXRpb25EdXJhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUR1cmF0aW9uKHZhbHVlKTtcbiAgfSxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBTZWdtZW50IGF2YWlsYWJpbGl0eSBzdGFydCB0aW1lIGZvciBhbGwgU2VnbWVudHMgcmVmZXJyZWQgdG8gaW4gdGhpc1xuICAgKiBNUEQuIEZvciBhIGR5bmFtaWMgbWFuaWZlc3QsIGl0IHNwZWNpZmllcyB0aGUgYW5jaG9yIGZvciB0aGUgZWFybGllc3QgYXZhaWxhYmlsaXR5XG4gICAqIHRpbWUuIEZvcm1hdCBpcyBhIGRhdGUgc3RyaW5nIGFzIHNwZWNpZmllZCBpbiBJU08gODYwMVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogICAgICAgIHZhbHVlIG9mIGF0dHJpYnV0ZSBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIGRhdGUgYXMgc2Vjb25kcyBmcm9tIHVuaXggZXBvY2hcbiAgICovXG4gIGF2YWlsYWJpbGl0eVN0YXJ0VGltZTogZnVuY3Rpb24gYXZhaWxhYmlsaXR5U3RhcnRUaW1lKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRGF0ZSh2YWx1ZSkgLyAxMDAwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIHNtYWxsZXN0IHBlcmlvZCBiZXR3ZWVuIHBvdGVudGlhbCBjaGFuZ2VzIHRvIHRoZSBNUEQuIEZvcm1hdCBpcyBhXG4gICAqIGR1cmF0aW9uIHN0cmluZyBhcyBzcGVjaWZpZWQgaW4gSVNPIDg2MDFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAqL1xuICBtaW5pbXVtVXBkYXRlUGVyaW9kOiBmdW5jdGlvbiBtaW5pbXVtVXBkYXRlUGVyaW9kKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRHVyYXRpb24odmFsdWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIHN1Z2dlc3RlZCBwcmVzZW50YXRpb24gZGVsYXkuIEZvcm1hdCBpcyBhXG4gICAqIGR1cmF0aW9uIHN0cmluZyBhcyBzcGVjaWZpZWQgaW4gSVNPIDg2MDFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAqL1xuICBzdWdnZXN0ZWRQcmVzZW50YXRpb25EZWxheTogZnVuY3Rpb24gc3VnZ2VzdGVkUHJlc2VudGF0aW9uRGVsYXkodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VEdXJhdGlvbih2YWx1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIHNwZWNpZmljZXMgdGhlIHR5cGUgb2YgbXBkLiBDYW4gYmUgZWl0aGVyIFwic3RhdGljXCIgb3IgXCJkeW5hbWljXCJcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSB0eXBlIGFzIGEgc3RyaW5nXG4gICAqL1xuICB0eXBlOiBmdW5jdGlvbiB0eXBlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGR1cmF0aW9uIG9mIHRoZSBzbWFsbGVzdCB0aW1lIHNoaWZ0aW5nIGJ1ZmZlciBmb3IgYW55IFJlcHJlc2VudGF0aW9uXG4gICAqIGluIHRoZSBNUEQuIEZvcm1hdCBpcyBhIGR1cmF0aW9uIHN0cmluZyBhcyBzcGVjaWZpZWQgaW4gSVNPIDg2MDFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAqL1xuICB0aW1lU2hpZnRCdWZmZXJEZXB0aDogZnVuY3Rpb24gdGltZVNoaWZ0QnVmZmVyRGVwdGgodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VEdXJhdGlvbih2YWx1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgUGVyaW9kU3RhcnQgdGltZSBvZiB0aGUgUGVyaW9kIHJlbGF0aXZlIHRvIHRoZSBhdmFpbGFiaWxpdHlTdGFydHRpbWUuXG4gICAqIEZvcm1hdCBpcyBhIGR1cmF0aW9uIHN0cmluZyBhcyBzcGVjaWZpZWQgaW4gSVNPIDg2MDFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAqL1xuICBzdGFydDogZnVuY3Rpb24gc3RhcnQodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VEdXJhdGlvbih2YWx1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgd2lkdGggb2YgdGhlIHZpc3VhbCBwcmVzZW50YXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBwYXJzZWQgd2lkdGhcbiAgICovXG4gIHdpZHRoOiBmdW5jdGlvbiB3aWR0aCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGhlaWdodCBvZiB0aGUgdmlzdWFsIHByZXNlbnRhdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogICAgICAgIHZhbHVlIG9mIGF0dHJpYnV0ZSBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIHBhcnNlZCBoZWlnaHRcbiAgICovXG4gIGhlaWdodDogZnVuY3Rpb24gaGVpZ2h0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgYml0cmF0ZSBvZiB0aGUgcmVwcmVzZW50YXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBwYXJzZWQgYmFuZHdpZHRoXG4gICAqL1xuICBiYW5kd2lkdGg6IGZ1bmN0aW9uIGJhbmR3aWR0aCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIG51bWJlciBvZiB0aGUgZmlyc3QgTWVkaWEgU2VnbWVudCBpbiB0aGlzIFJlcHJlc2VudGF0aW9uIGluIHRoZSBQZXJpb2RcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBwYXJzZWQgbnVtYmVyXG4gICAqL1xuICBzdGFydE51bWJlcjogZnVuY3Rpb24gc3RhcnROdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgfSxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSB0aW1lc2NhbGUgaW4gdW5pdHMgcGVyIHNlY29uZHNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICB2YWx1ZSBvZiBhdHRyaWJ1dGUgYXMgYSBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBhcHJzZWQgdGltZXNjYWxlXG4gICAqL1xuICB0aW1lc2NhbGU6IGZ1bmN0aW9uIHRpbWVzY2FsZSh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGNvbnN0YW50IGFwcHJveGltYXRlIFNlZ21lbnQgZHVyYXRpb25cbiAgICogTk9URTogVGhlIDxQZXJpb2Q+IGVsZW1lbnQgYWxzbyBjb250YWlucyBhbiBAZHVyYXRpb24gYXR0cmlidXRlLiBUaGlzIGR1cmF0aW9uXG4gICAqICAgICAgIHNwZWNpZmllcyB0aGUgZHVyYXRpb24gb2YgdGhlIFBlcmlvZC4gVGhpcyBhdHRyaWJ1dGUgaXMgY3VycmVudGx5IG5vdFxuICAgKiAgICAgICBzdXBwb3J0ZWQgYnkgdGhlIHJlc3Qgb2YgdGhlIHBhcnNlciwgaG93ZXZlciB3ZSBzdGlsbCBjaGVjayBmb3IgaXQgdG8gcHJldmVudFxuICAgKiAgICAgICBlcnJvcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiAgICAgICAgdmFsdWUgb2YgYXR0cmlidXRlIGFzIGEgc3RyaW5nXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgcGFyc2VkIGR1cmF0aW9uXG4gICAqL1xuICBkdXJhdGlvbjogZnVuY3Rpb24gZHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgcGFyc2VkVmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuXG4gICAgaWYgKGlzTmFOKHBhcnNlZFZhbHVlKSkge1xuICAgICAgcmV0dXJuIHBhcnNlRHVyYXRpb24odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZWRWYWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBTZWdtZW50IGR1cmF0aW9uLCBpbiB1bml0cyBvZiB0aGUgdmFsdWUgb2YgdGhlIEB0aW1lc2NhbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiAgICAgICAgdmFsdWUgb2YgYXR0cmlidXRlIGFzIGEgc3RyaW5nXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgcGFyc2VkIGR1cmF0aW9uXG4gICAqL1xuICBkOiBmdW5jdGlvbiBkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgTVBEIHN0YXJ0IHRpbWUsIGluIEB0aW1lc2NhbGUgdW5pdHMsIHRoZSBmaXJzdCBTZWdtZW50IGluIHRoZSBzZXJpZXNcbiAgICogc3RhcnRzIHJlbGF0aXZlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIFBlcmlvZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogICAgICAgIHZhbHVlIG9mIGF0dHJpYnV0ZSBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIHBhcnNlZCB0aW1lXG4gICAqL1xuICB0OiBmdW5jdGlvbiB0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgcmVwZWF0IGNvdW50IG9mIHRoZSBudW1iZXIgb2YgZm9sbG93aW5nIGNvbnRpZ3VvdXMgU2VnbWVudHMgd2l0aCB0aGVcbiAgICogc2FtZSBkdXJhdGlvbiBleHByZXNzZWQgYnkgdGhlIHZhbHVlIG9mIEBkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiAgICAgICAgdmFsdWUgb2YgYXR0cmlidXRlIGFzIGEgc3RyaW5nXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgcGFyc2VkIG51bWJlclxuICAgKi9cbiAgcjogZnVuY3Rpb24gcih2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHBhcnNlciBmb3IgYWxsIG90aGVyIGF0dHJpYnV0ZXMuIEFjdHMgYXMgYSBuby1vcCBhbmQganVzdCByZXR1cm5zIHRoZSB2YWx1ZVxuICAgKiBhcyBhIHN0cmluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogICAgICAgIHZhbHVlIG9mIGF0dHJpYnV0ZSBhcyBhIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVW5wYXJzZWQgdmFsdWVcbiAgICovXG4gIERFRkFVTFQ6IGZ1bmN0aW9uIERFRkFVTFQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn07XG4vKipcbiAqIEdldHMgYWxsIHRoZSBhdHRyaWJ1dGVzIGFuZCB2YWx1ZXMgb2YgdGhlIHByb3ZpZGVkIG5vZGUsIHBhcnNlcyBhdHRyaWJ1dGVzIHdpdGgga25vd25cbiAqIHR5cGVzLCBhbmQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhdHRyaWJ1dGUgbmFtZXMgbWFwcGVkIHRvIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IGVsXG4gKiAgICAgICAgVGhlIG5vZGUgdG8gcGFyc2UgYXR0cmlidXRlcyBmcm9tXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiAgICAgICAgIE9iamVjdCB3aXRoIGFsbCBhdHRyaWJ1dGVzIG9mIGVsIHBhcnNlZFxuICovXG5cbnZhciBwYXJzZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiBwYXJzZUF0dHJpYnV0ZXMoZWwpIHtcbiAgaWYgKCEoZWwgJiYgZWwuYXR0cmlidXRlcykpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICByZXR1cm4gZnJvbShlbC5hdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGUpIHtcbiAgICB2YXIgcGFyc2VGbiA9IHBhcnNlcnNbZS5uYW1lXSB8fCBwYXJzZXJzLkRFRkFVTFQ7XG4gICAgYVtlLm5hbWVdID0gcGFyc2VGbihlLnZhbHVlKTtcbiAgICByZXR1cm4gYTtcbiAgfSwge30pO1xufTtcblxudmFyIGtleVN5c3RlbXNNYXAgPSB7XG4gICd1cm46dXVpZDoxMDc3ZWZlYy1jMGIyLTRkMDItYWNlMy0zYzFlNTJlMmZiNGInOiAnb3JnLnczLmNsZWFya2V5JyxcbiAgJ3Vybjp1dWlkOmVkZWY4YmE5LTc5ZDYtNGFjZS1hM2M4LTI3ZGNkNTFkMjFlZCc6ICdjb20ud2lkZXZpbmUuYWxwaGEnLFxuICAndXJuOnV1aWQ6OWEwNGYwNzktOTg0MC00Mjg2LWFiOTItZTY1YmUwODg1Zjk1JzogJ2NvbS5taWNyb3NvZnQucGxheXJlYWR5JyxcbiAgJ3Vybjp1dWlkOmYyMzllNzY5LWVmYTMtNDg1MC05YzE2LWE5MDNjNjkzMmVmYic6ICdjb20uYWRvYmUucHJpbWV0aW1lJ1xufTtcbi8qKlxuICogQnVpbGRzIGEgbGlzdCBvZiB1cmxzIHRoYXQgaXMgdGhlIHByb2R1Y3Qgb2YgdGhlIHJlZmVyZW5jZSB1cmxzIGFuZCBCYXNlVVJMIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJlZmVyZW5jZVVybHNcbiAqICAgICAgICBMaXN0IG9mIHJlZmVyZW5jZSB1cmxzIHRvIHJlc29sdmUgdG9cbiAqIEBwYXJhbSB7Tm9kZVtdfSBiYXNlVXJsRWxlbWVudHNcbiAqICAgICAgICBMaXN0IG9mIEJhc2VVUkwgbm9kZXMgZnJvbSB0aGUgbXBkXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqICAgICAgICAgTGlzdCBvZiByZXNvbHZlZCB1cmxzXG4gKi9cblxudmFyIGJ1aWxkQmFzZVVybHMgPSBmdW5jdGlvbiBidWlsZEJhc2VVcmxzKHJlZmVyZW5jZVVybHMsIGJhc2VVcmxFbGVtZW50cykge1xuICBpZiAoIWJhc2VVcmxFbGVtZW50cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gcmVmZXJlbmNlVXJscztcbiAgfVxuXG4gIHJldHVybiBmbGF0dGVuKHJlZmVyZW5jZVVybHMubWFwKGZ1bmN0aW9uIChyZWZlcmVuY2UpIHtcbiAgICByZXR1cm4gYmFzZVVybEVsZW1lbnRzLm1hcChmdW5jdGlvbiAoYmFzZVVybEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiByZXNvbHZlVXJsKHJlZmVyZW5jZSwgZ2V0Q29udGVudChiYXNlVXJsRWxlbWVudCkpO1xuICAgIH0pO1xuICB9KSk7XG59O1xuLyoqXG4gKiBDb250YWlucyBhbGwgU2VnbWVudCBpbmZvcm1hdGlvbiBmb3IgaXRzIGNvbnRhaW5pbmcgQWRhcHRhdGlvblNldFxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNlZ21lbnRJbmZvcm1hdGlvblxuICogQHByb3BlcnR5IHtPYmplY3R8dW5kZWZpbmVkfSB0ZW1wbGF0ZVxuICogICAgICAgICAgIENvbnRhaW5zIHRoZSBhdHRyaWJ1dGVzIGZvciB0aGUgU2VnbWVudFRlbXBsYXRlIG5vZGVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0W118dW5kZWZpbmVkfSB0aW1lbGluZVxuICogICAgICAgICAgIENvbnRhaW5zIGEgbGlzdCBvZiBhdHJyaWJ1dGVzIGZvciBlYWNoIFMgbm9kZSB3aXRoaW4gdGhlIFNlZ21lbnRUaW1lbGluZSBub2RlXG4gKiBAcHJvcGVydHkge09iamVjdHx1bmRlZmluZWR9IGxpc3RcbiAqICAgICAgICAgICBDb250YWlucyB0aGUgYXR0cmlidXRlcyBmb3IgdGhlIFNlZ21lbnRMaXN0IG5vZGVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fHVuZGVmaW5lZH0gYmFzZVxuICogICAgICAgICAgIENvbnRhaW5zIHRoZSBhdHRyaWJ1dGVzIGZvciB0aGUgU2VnbWVudEJhc2Ugbm9kZVxuICovXG5cbi8qKlxuICogUmV0dXJucyBhbGwgYXZhaWxhYmxlIFNlZ21lbnQgaW5mb3JtYXRpb24gY29udGFpbmVkIHdpdGhpbiB0aGUgQWRhcHRhdGlvblNldCBub2RlXG4gKlxuICogQHBhcmFtIHtOb2RlfSBhZGFwdGF0aW9uU2V0XG4gKiAgICAgICAgVGhlIEFkYXB0YXRpb25TZXQgbm9kZSB0byBnZXQgU2VnbWVudCBpbmZvcm1hdGlvbiBmcm9tXG4gKiBAcmV0dXJuIHtTZWdtZW50SW5mb3JtYXRpb259XG4gKiAgICAgICAgIFRoZSBTZWdtZW50IGluZm9ybWF0aW9uIGNvbnRhaW5lZCB3aXRoaW4gdGhlIHByb3ZpZGVkIEFkYXB0YXRpb25TZXRcbiAqL1xuXG52YXIgZ2V0U2VnbWVudEluZm9ybWF0aW9uID0gZnVuY3Rpb24gZ2V0U2VnbWVudEluZm9ybWF0aW9uKGFkYXB0YXRpb25TZXQpIHtcbiAgdmFyIHNlZ21lbnRUZW1wbGF0ZSA9IGZpbmRDaGlsZHJlbihhZGFwdGF0aW9uU2V0LCAnU2VnbWVudFRlbXBsYXRlJylbMF07XG4gIHZhciBzZWdtZW50TGlzdCA9IGZpbmRDaGlsZHJlbihhZGFwdGF0aW9uU2V0LCAnU2VnbWVudExpc3QnKVswXTtcbiAgdmFyIHNlZ21lbnRVcmxzID0gc2VnbWVudExpc3QgJiYgZmluZENoaWxkcmVuKHNlZ21lbnRMaXN0LCAnU2VnbWVudFVSTCcpLm1hcChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBtZXJnZSh7XG4gICAgICB0YWc6ICdTZWdtZW50VVJMJ1xuICAgIH0sIHBhcnNlQXR0cmlidXRlcyhzKSk7XG4gIH0pO1xuICB2YXIgc2VnbWVudEJhc2UgPSBmaW5kQ2hpbGRyZW4oYWRhcHRhdGlvblNldCwgJ1NlZ21lbnRCYXNlJylbMF07XG4gIHZhciBzZWdtZW50VGltZWxpbmVQYXJlbnROb2RlID0gc2VnbWVudExpc3QgfHwgc2VnbWVudFRlbXBsYXRlO1xuICB2YXIgc2VnbWVudFRpbWVsaW5lID0gc2VnbWVudFRpbWVsaW5lUGFyZW50Tm9kZSAmJiBmaW5kQ2hpbGRyZW4oc2VnbWVudFRpbWVsaW5lUGFyZW50Tm9kZSwgJ1NlZ21lbnRUaW1lbGluZScpWzBdO1xuICB2YXIgc2VnbWVudEluaXRpYWxpemF0aW9uUGFyZW50Tm9kZSA9IHNlZ21lbnRMaXN0IHx8IHNlZ21lbnRCYXNlIHx8IHNlZ21lbnRUZW1wbGF0ZTtcbiAgdmFyIHNlZ21lbnRJbml0aWFsaXphdGlvbiA9IHNlZ21lbnRJbml0aWFsaXphdGlvblBhcmVudE5vZGUgJiYgZmluZENoaWxkcmVuKHNlZ21lbnRJbml0aWFsaXphdGlvblBhcmVudE5vZGUsICdJbml0aWFsaXphdGlvbicpWzBdOyAvLyBTZWdtZW50VGVtcGxhdGUgaXMgaGFuZGxlZCBzbGlnaHRseSBkaWZmZXJlbnRseSwgc2luY2UgaXQgY2FuIGhhdmUgYm90aFxuICAvLyBAaW5pdGlhbGl6YXRpb24gYW5kIGFuIDxJbml0aWFsaXphdGlvbj4gbm9kZS4gIEBpbml0aWFsaXphdGlvbiBjYW4gYmUgdGVtcGxhdGVkLFxuICAvLyB3aGlsZSB0aGUgbm9kZSBjYW4gaGF2ZSBhIHVybCBhbmQgcmFuZ2Ugc3BlY2lmaWVkLiAgSWYgdGhlIDxTZWdtZW50VGVtcGxhdGU+IGhhc1xuICAvLyBib3RoIEBpbml0aWFsaXphdGlvbiBhbmQgYW4gPEluaXRpYWxpemF0aW9uPiBzdWJlbGVtZW50IHdlIG9wdCB0byBvdmVycmlkZSB3aXRoXG4gIC8vIHRoZSBub2RlLCBhcyB0aGlzIGludGVyYWN0aW9uIGlzIG5vdCBkZWZpbmVkIGluIHRoZSBzcGVjLlxuXG4gIHZhciB0ZW1wbGF0ZSA9IHNlZ21lbnRUZW1wbGF0ZSAmJiBwYXJzZUF0dHJpYnV0ZXMoc2VnbWVudFRlbXBsYXRlKTtcblxuICBpZiAodGVtcGxhdGUgJiYgc2VnbWVudEluaXRpYWxpemF0aW9uKSB7XG4gICAgdGVtcGxhdGUuaW5pdGlhbGl6YXRpb24gPSBzZWdtZW50SW5pdGlhbGl6YXRpb24gJiYgcGFyc2VBdHRyaWJ1dGVzKHNlZ21lbnRJbml0aWFsaXphdGlvbik7XG4gIH0gZWxzZSBpZiAodGVtcGxhdGUgJiYgdGVtcGxhdGUuaW5pdGlhbGl6YXRpb24pIHtcbiAgICAvLyBJZiBpdCBpcyBAaW5pdGlhbGl6YXRpb24gd2UgY29udmVydCBpdCB0byBhbiBvYmplY3Qgc2luY2UgdGhpcyBpcyB0aGUgZm9ybWF0IHRoYXRcbiAgICAvLyBsYXRlciBmdW5jdGlvbnMgd2lsbCByZWx5IG9uIGZvciB0aGUgaW5pdGlhbGl6YXRpb24gc2VnbWVudC4gIFRoaXMgaXMgb25seSB2YWxpZFxuICAgIC8vIGZvciA8U2VnbWVudFRlbXBsYXRlPlxuICAgIHRlbXBsYXRlLmluaXRpYWxpemF0aW9uID0ge1xuICAgICAgc291cmNlVVJMOiB0ZW1wbGF0ZS5pbml0aWFsaXphdGlvblxuICAgIH07XG4gIH1cblxuICB2YXIgc2VnbWVudEluZm8gPSB7XG4gICAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICAgIHRpbWVsaW5lOiBzZWdtZW50VGltZWxpbmUgJiYgZmluZENoaWxkcmVuKHNlZ21lbnRUaW1lbGluZSwgJ1MnKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBwYXJzZUF0dHJpYnV0ZXMocyk7XG4gICAgfSksXG4gICAgbGlzdDogc2VnbWVudExpc3QgJiYgbWVyZ2UocGFyc2VBdHRyaWJ1dGVzKHNlZ21lbnRMaXN0KSwge1xuICAgICAgc2VnbWVudFVybHM6IHNlZ21lbnRVcmxzLFxuICAgICAgaW5pdGlhbGl6YXRpb246IHBhcnNlQXR0cmlidXRlcyhzZWdtZW50SW5pdGlhbGl6YXRpb24pXG4gICAgfSksXG4gICAgYmFzZTogc2VnbWVudEJhc2UgJiYgbWVyZ2UocGFyc2VBdHRyaWJ1dGVzKHNlZ21lbnRCYXNlKSwge1xuICAgICAgaW5pdGlhbGl6YXRpb246IHBhcnNlQXR0cmlidXRlcyhzZWdtZW50SW5pdGlhbGl6YXRpb24pXG4gICAgfSlcbiAgfTtcbiAgT2JqZWN0LmtleXMoc2VnbWVudEluZm8pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghc2VnbWVudEluZm9ba2V5XSkge1xuICAgICAgZGVsZXRlIHNlZ21lbnRJbmZvW2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlZ21lbnRJbmZvO1xufTtcbi8qKlxuICogQ29udGFpbnMgU2VnbWVudCBpbmZvcm1hdGlvbiBhbmQgYXR0cmlidXRlcyBuZWVkZWQgdG8gY29uc3RydWN0IGEgUGxheWxpc3Qgb2JqZWN0XG4gKiBmcm9tIGEgUmVwcmVzZW50YXRpb25cbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSZXByZXNlbnRhdGlvbkluZm9ybWF0aW9uXG4gKiBAcHJvcGVydHkge1NlZ21lbnRJbmZvcm1hdGlvbn0gc2VnbWVudEluZm9cbiAqICAgICAgICAgICBTZWdtZW50IGluZm9ybWF0aW9uIGZvciB0aGlzIFJlcHJlc2VudGF0aW9uXG4gKiBAcHJvcGVydHkge09iamVjdH0gYXR0cmlidXRlc1xuICogICAgICAgICAgIEluaGVyaXRlZCBhdHRyaWJ1dGVzIGZvciB0aGlzIFJlcHJlc2VudGF0aW9uXG4gKi9cblxuLyoqXG4gKiBNYXBzIGEgUmVwcmVzZW50YXRpb24gbm9kZSB0byBhbiBvYmplY3QgY29udGFpbmluZyBTZWdtZW50IGluZm9ybWF0aW9uIGFuZCBhdHRyaWJ1dGVzXG4gKlxuICogQG5hbWUgaW5oZXJpdEJhc2VVcmxzQ2FsbGJhY2tcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSByZXByZXNlbnRhdGlvblxuICogICAgICAgIFJlcHJlc2VudGF0aW9uIG5vZGUgZnJvbSB0aGUgbXBkXG4gKiBAcmV0dXJuIHtSZXByZXNlbnRhdGlvbkluZm9ybWF0aW9ufVxuICogICAgICAgICBSZXByZXNlbnRhdGlvbiBpbmZvcm1hdGlvbiBuZWVkZWQgdG8gY29uc3RydWN0IGEgUGxheWxpc3Qgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgY2FsbGJhY2sgZm9yIEFycmF5LnByb3RvdHlwZS5tYXAgZm9yIG1hcHBpbmcgUmVwcmVzZW50YXRpb24gbm9kZXMgdG9cbiAqIFNlZ21lbnQgaW5mb3JtYXRpb24gYW5kIGF0dHJpYnV0ZXMgdXNpbmcgaW5oZXJpdGVkIEJhc2VVUkwgbm9kZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFkYXB0YXRpb25TZXRBdHRyaWJ1dGVzXG4gKiAgICAgICAgQ29udGFpbnMgYXR0cmlidXRlcyBpbmhlcml0ZWQgYnkgdGhlIEFkYXB0YXRpb25TZXRcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFkYXB0YXRpb25TZXRCYXNlVXJsc1xuICogICAgICAgIENvbnRhaW5zIGxpc3Qgb2YgcmVzb2x2ZWQgYmFzZSB1cmxzIGluaGVyaXRlZCBieSB0aGUgQWRhcHRhdGlvblNldFxuICogQHBhcmFtIHtTZWdtZW50SW5mb3JtYXRpb259IGFkYXB0YXRpb25TZXRTZWdtZW50SW5mb1xuICogICAgICAgIENvbnRhaW5zIFNlZ21lbnQgaW5mb3JtYXRpb24gZm9yIHRoZSBBZGFwdGF0aW9uU2V0XG4gKiBAcmV0dXJuIHtpbmhlcml0QmFzZVVybHNDYWxsYmFja31cbiAqICAgICAgICAgQ2FsbGJhY2sgbWFwIGZ1bmN0aW9uXG4gKi9cblxudmFyIGluaGVyaXRCYXNlVXJscyA9IGZ1bmN0aW9uIGluaGVyaXRCYXNlVXJscyhhZGFwdGF0aW9uU2V0QXR0cmlidXRlcywgYWRhcHRhdGlvblNldEJhc2VVcmxzLCBhZGFwdGF0aW9uU2V0U2VnbWVudEluZm8pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXByZXNlbnRhdGlvbikge1xuICAgIHZhciByZXBCYXNlVXJsRWxlbWVudHMgPSBmaW5kQ2hpbGRyZW4ocmVwcmVzZW50YXRpb24sICdCYXNlVVJMJyk7XG4gICAgdmFyIHJlcEJhc2VVcmxzID0gYnVpbGRCYXNlVXJscyhhZGFwdGF0aW9uU2V0QmFzZVVybHMsIHJlcEJhc2VVcmxFbGVtZW50cyk7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBtZXJnZShhZGFwdGF0aW9uU2V0QXR0cmlidXRlcywgcGFyc2VBdHRyaWJ1dGVzKHJlcHJlc2VudGF0aW9uKSk7XG4gICAgdmFyIHJlcHJlc2VudGF0aW9uU2VnbWVudEluZm8gPSBnZXRTZWdtZW50SW5mb3JtYXRpb24ocmVwcmVzZW50YXRpb24pO1xuICAgIHJldHVybiByZXBCYXNlVXJscy5tYXAoZnVuY3Rpb24gKGJhc2VVcmwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNlZ21lbnRJbmZvOiBtZXJnZShhZGFwdGF0aW9uU2V0U2VnbWVudEluZm8sIHJlcHJlc2VudGF0aW9uU2VnbWVudEluZm8pLFxuICAgICAgICBhdHRyaWJ1dGVzOiBtZXJnZShhdHRyaWJ1dGVzLCB7XG4gICAgICAgICAgYmFzZVVybDogYmFzZVVybFxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcbn07XG4vKipcbiAqIFRyYW5mb3JtcyBhIHNlcmllcyBvZiBjb250ZW50IHByb3RlY3Rpb24gbm9kZXMgdG9cbiAqIGFuIG9iamVjdCBjb250YWluaW5nIHBzc2ggZGF0YSBieSBrZXkgc3lzdGVtXG4gKlxuICogQHBhcmFtIHtOb2RlW119IGNvbnRlbnRQcm90ZWN0aW9uTm9kZXNcbiAqICAgICAgICBDb250ZW50IHByb3RlY3Rpb24gbm9kZXNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICBPYmplY3QgY29udGFpbmluZyBwc3NoIGRhdGEgYnkga2V5IHN5c3RlbVxuICovXG5cbnZhciBnZW5lcmF0ZUtleVN5c3RlbUluZm9ybWF0aW9uID0gZnVuY3Rpb24gZ2VuZXJhdGVLZXlTeXN0ZW1JbmZvcm1hdGlvbihjb250ZW50UHJvdGVjdGlvbk5vZGVzKSB7XG4gIHJldHVybiBjb250ZW50UHJvdGVjdGlvbk5vZGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBub2RlKSB7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBwYXJzZUF0dHJpYnV0ZXMobm9kZSk7XG4gICAgdmFyIGtleVN5c3RlbSA9IGtleVN5c3RlbXNNYXBbYXR0cmlidXRlcy5zY2hlbWVJZFVyaV07XG5cbiAgICBpZiAoa2V5U3lzdGVtKSB7XG4gICAgICBhY2Nba2V5U3lzdGVtXSA9IHtcbiAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICAgICAgfTtcbiAgICAgIHZhciBwc3NoTm9kZSA9IGZpbmRDaGlsZHJlbihub2RlLCAnY2VuYzpwc3NoJylbMF07XG5cbiAgICAgIGlmIChwc3NoTm9kZSkge1xuICAgICAgICB2YXIgcHNzaCA9IGdldENvbnRlbnQocHNzaE5vZGUpO1xuICAgICAgICB2YXIgcHNzaEJ1ZmZlciA9IHBzc2ggJiYgZGVjb2RlQjY0VG9VaW50OEFycmF5KHBzc2gpO1xuICAgICAgICBhY2Nba2V5U3lzdGVtXS5wc3NoID0gcHNzaEJ1ZmZlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59O1xuLyoqXG4gKiBNYXBzIGFuIEFkYXB0YXRpb25TZXQgbm9kZSB0byBhIGxpc3Qgb2YgUmVwcmVzZW50YXRpb24gaW5mb3JtYXRpb24gb2JqZWN0c1xuICpcbiAqIEBuYW1lIHRvUmVwcmVzZW50YXRpb25zQ2FsbGJhY2tcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBhZGFwdGF0aW9uU2V0XG4gKiAgICAgICAgQWRhcHRhdGlvblNldCBub2RlIGZyb20gdGhlIG1wZFxuICogQHJldHVybiB7UmVwcmVzZW50YXRpb25JbmZvcm1hdGlvbltdfVxuICogICAgICAgICBMaXN0IG9mIG9iamVjdHMgY29udGFpbmluZyBSZXByZXNlbnRhaW9uIGluZm9ybWF0aW9uXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgY2FsbGJhY2sgZm9yIEFycmF5LnByb3RvdHlwZS5tYXAgZm9yIG1hcHBpbmcgQWRhcHRhdGlvblNldCBub2RlcyB0byBhIGxpc3Qgb2ZcbiAqIFJlcHJlc2VudGF0aW9uIGluZm9ybWF0aW9uIG9iamVjdHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGVyaW9kQXR0cmlidXRlc1xuICogICAgICAgIENvbnRhaW5zIGF0dHJpYnV0ZXMgaW5oZXJpdGVkIGJ5IHRoZSBQZXJpb2RcbiAqIEBwYXJhbSB7c3RyaW5nW119IHBlcmlvZEJhc2VVcmxzXG4gKiAgICAgICAgQ29udGFpbnMgbGlzdCBvZiByZXNvbHZlZCBiYXNlIHVybHMgaW5oZXJpdGVkIGJ5IHRoZSBQZXJpb2RcbiAqIEBwYXJhbSB7c3RyaW5nW119IHBlcmlvZFNlZ21lbnRJbmZvXG4gKiAgICAgICAgQ29udGFpbnMgU2VnbWVudCBJbmZvcm1hdGlvbiBhdCB0aGUgcGVyaW9kIGxldmVsXG4gKiBAcmV0dXJuIHt0b1JlcHJlc2VudGF0aW9uc0NhbGxiYWNrfVxuICogICAgICAgICBDYWxsYmFjayBtYXAgZnVuY3Rpb25cbiAqL1xuXG5cbnZhciB0b1JlcHJlc2VudGF0aW9ucyA9IGZ1bmN0aW9uIHRvUmVwcmVzZW50YXRpb25zKHBlcmlvZEF0dHJpYnV0ZXMsIHBlcmlvZEJhc2VVcmxzLCBwZXJpb2RTZWdtZW50SW5mbykge1xuICByZXR1cm4gZnVuY3Rpb24gKGFkYXB0YXRpb25TZXQpIHtcbiAgICB2YXIgYWRhcHRhdGlvblNldEF0dHJpYnV0ZXMgPSBwYXJzZUF0dHJpYnV0ZXMoYWRhcHRhdGlvblNldCk7XG4gICAgdmFyIGFkYXB0YXRpb25TZXRCYXNlVXJscyA9IGJ1aWxkQmFzZVVybHMocGVyaW9kQmFzZVVybHMsIGZpbmRDaGlsZHJlbihhZGFwdGF0aW9uU2V0LCAnQmFzZVVSTCcpKTtcbiAgICB2YXIgcm9sZSA9IGZpbmRDaGlsZHJlbihhZGFwdGF0aW9uU2V0LCAnUm9sZScpWzBdO1xuICAgIHZhciByb2xlQXR0cmlidXRlcyA9IHtcbiAgICAgIHJvbGU6IHBhcnNlQXR0cmlidXRlcyhyb2xlKVxuICAgIH07XG4gICAgdmFyIGF0dHJzID0gbWVyZ2UocGVyaW9kQXR0cmlidXRlcywgYWRhcHRhdGlvblNldEF0dHJpYnV0ZXMsIHJvbGVBdHRyaWJ1dGVzKTtcbiAgICB2YXIgY29udGVudFByb3RlY3Rpb24gPSBnZW5lcmF0ZUtleVN5c3RlbUluZm9ybWF0aW9uKGZpbmRDaGlsZHJlbihhZGFwdGF0aW9uU2V0LCAnQ29udGVudFByb3RlY3Rpb24nKSk7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoY29udGVudFByb3RlY3Rpb24pLmxlbmd0aCkge1xuICAgICAgYXR0cnMgPSBtZXJnZShhdHRycywge1xuICAgICAgICBjb250ZW50UHJvdGVjdGlvbjogY29udGVudFByb3RlY3Rpb25cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBzZWdtZW50SW5mbyA9IGdldFNlZ21lbnRJbmZvcm1hdGlvbihhZGFwdGF0aW9uU2V0KTtcbiAgICB2YXIgcmVwcmVzZW50YXRpb25zID0gZmluZENoaWxkcmVuKGFkYXB0YXRpb25TZXQsICdSZXByZXNlbnRhdGlvbicpO1xuICAgIHZhciBhZGFwdGF0aW9uU2V0U2VnbWVudEluZm8gPSBtZXJnZShwZXJpb2RTZWdtZW50SW5mbywgc2VnbWVudEluZm8pO1xuICAgIHJldHVybiBmbGF0dGVuKHJlcHJlc2VudGF0aW9ucy5tYXAoaW5oZXJpdEJhc2VVcmxzKGF0dHJzLCBhZGFwdGF0aW9uU2V0QmFzZVVybHMsIGFkYXB0YXRpb25TZXRTZWdtZW50SW5mbykpKTtcbiAgfTtcbn07XG4vKipcbiAqIE1hcHMgYW4gUGVyaW9kIG5vZGUgdG8gYSBsaXN0IG9mIFJlcHJlc2VudGF0aW9uIGluZm9yYW10aW9uIG9iamVjdHMgZm9yIGFsbFxuICogQWRhcHRhdGlvblNldCBub2RlcyBjb250YWluZWQgd2l0aGluIHRoZSBQZXJpb2RcbiAqXG4gKiBAbmFtZSB0b0FkYXB0YXRpb25TZXRzQ2FsbGJhY2tcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBwZXJpb2RcbiAqICAgICAgICBQZXJpb2Qgbm9kZSBmcm9tIHRoZSBtcGRcbiAqIEBwYXJhbSB7bnVtYmVyfSBwZXJpb2RJbmRleFxuICogICAgICAgIEluZGV4IG9mIHRoZSBQZXJpb2Qgd2l0aGluIHRoZSBtcGRcbiAqIEByZXR1cm4ge1JlcHJlc2VudGF0aW9uSW5mb3JtYXRpb25bXX1cbiAqICAgICAgICAgTGlzdCBvZiBvYmplY3RzIGNvbnRhaW5pbmcgUmVwcmVzZW50YWlvbiBpbmZvcm1hdGlvblxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIGNhbGxiYWNrIGZvciBBcnJheS5wcm90b3R5cGUubWFwIGZvciBtYXBwaW5nIFBlcmlvZCBub2RlcyB0byBhIGxpc3Qgb2ZcbiAqIFJlcHJlc2VudGF0aW9uIGluZm9ybWF0aW9uIG9iamVjdHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbXBkQXR0cmlidXRlc1xuICogICAgICAgIENvbnRhaW5zIGF0dHJpYnV0ZXMgaW5oZXJpdGVkIGJ5IHRoZSBtcGRcbiAqIEBwYXJhbSB7c3RyaW5nW119IG1wZEJhc2VVcmxzXG4gKiAgICAgICAgQ29udGFpbnMgbGlzdCBvZiByZXNvbHZlZCBiYXNlIHVybHMgaW5oZXJpdGVkIGJ5IHRoZSBtcGRcbiAqIEByZXR1cm4ge3RvQWRhcHRhdGlvblNldHNDYWxsYmFja31cbiAqICAgICAgICAgQ2FsbGJhY2sgbWFwIGZ1bmN0aW9uXG4gKi9cblxudmFyIHRvQWRhcHRhdGlvblNldHMgPSBmdW5jdGlvbiB0b0FkYXB0YXRpb25TZXRzKG1wZEF0dHJpYnV0ZXMsIG1wZEJhc2VVcmxzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocGVyaW9kLCBpbmRleCkge1xuICAgIHZhciBwZXJpb2RCYXNlVXJscyA9IGJ1aWxkQmFzZVVybHMobXBkQmFzZVVybHMsIGZpbmRDaGlsZHJlbihwZXJpb2QsICdCYXNlVVJMJykpO1xuICAgIHZhciBwZXJpb2RBdHQgPSBwYXJzZUF0dHJpYnV0ZXMocGVyaW9kKTtcbiAgICB2YXIgcGFyc2VkUGVyaW9kSWQgPSBwYXJzZUludChwZXJpb2RBdHQuaWQsIDEwKTsgLy8gZmFsbGJhY2sgdG8gbWFwcGluZyBpbmRleCBpZiBQZXJpb2RAaWQgaXMgbm90IGEgbnVtYmVyXG5cbiAgICB2YXIgcGVyaW9kSW5kZXggPSB3aW5kb3cuaXNOYU4ocGFyc2VkUGVyaW9kSWQpID8gaW5kZXggOiBwYXJzZWRQZXJpb2RJZDtcbiAgICB2YXIgcGVyaW9kQXR0cmlidXRlcyA9IG1lcmdlKG1wZEF0dHJpYnV0ZXMsIHtcbiAgICAgIHBlcmlvZEluZGV4OiBwZXJpb2RJbmRleFxuICAgIH0pO1xuICAgIHZhciBhZGFwdGF0aW9uU2V0cyA9IGZpbmRDaGlsZHJlbihwZXJpb2QsICdBZGFwdGF0aW9uU2V0Jyk7XG4gICAgdmFyIHBlcmlvZFNlZ21lbnRJbmZvID0gZ2V0U2VnbWVudEluZm9ybWF0aW9uKHBlcmlvZCk7XG4gICAgcmV0dXJuIGZsYXR0ZW4oYWRhcHRhdGlvblNldHMubWFwKHRvUmVwcmVzZW50YXRpb25zKHBlcmlvZEF0dHJpYnV0ZXMsIHBlcmlvZEJhc2VVcmxzLCBwZXJpb2RTZWdtZW50SW5mbykpKTtcbiAgfTtcbn07XG4vKipcbiAqIFRyYXZlcnNlcyB0aGUgbXBkIHhtbCB0cmVlIHRvIGdlbmVyYXRlIGEgbGlzdCBvZiBSZXByZXNlbnRhdGlvbiBpbmZvcm1hdGlvbiBvYmplY3RzXG4gKiB0aGF0IGhhdmUgaW5oZXJpdGVkIGF0dHJpYnV0ZXMgZnJvbSBwYXJlbnQgbm9kZXNcbiAqXG4gKiBAcGFyYW0ge05vZGV9IG1wZFxuICogICAgICAgIFRoZSByb290IG5vZGUgb2YgdGhlIG1wZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqICAgICAgICBBdmFpbGFibGUgb3B0aW9ucyBmb3IgaW5oZXJpdEF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm1hbmlmZXN0VXJpXG4gKiAgICAgICAgVGhlIHVyaSBzb3VyY2Ugb2YgdGhlIG1wZFxuICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMuTk9XXG4gKiAgICAgICAgQ3VycmVudCB0aW1lIHBlciBEQVNIIElPUC4gIERlZmF1bHQgaXMgY3VycmVudCB0aW1lIGluIG1zIHNpbmNlIGVwb2NoXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5jbGllbnRPZmZzZXRcbiAqICAgICAgICBDbGllbnQgdGltZSBkaWZmZXJlbmNlIGZyb20gTk9XIChpbiBtaWxsaXNlY29uZHMpXG4gKiBAcmV0dXJuIHtSZXByZXNlbnRhdGlvbkluZm9ybWF0aW9uW119XG4gKiAgICAgICAgIExpc3Qgb2Ygb2JqZWN0cyBjb250YWluaW5nIFJlcHJlc2VudGF0aW9uIGluZm9ybWF0aW9uXG4gKi9cblxudmFyIGluaGVyaXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gaW5oZXJpdEF0dHJpYnV0ZXMobXBkLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkbWFuaWZlc3RVcmkgPSBfb3B0aW9ucy5tYW5pZmVzdFVyaSxcbiAgICAgIG1hbmlmZXN0VXJpID0gX29wdGlvbnMkbWFuaWZlc3RVcmkgPT09IHZvaWQgMCA/ICcnIDogX29wdGlvbnMkbWFuaWZlc3RVcmksXG4gICAgICBfb3B0aW9ucyROT1cgPSBfb3B0aW9ucy5OT1csXG4gICAgICBOT1cgPSBfb3B0aW9ucyROT1cgPT09IHZvaWQgMCA/IERhdGUubm93KCkgOiBfb3B0aW9ucyROT1csXG4gICAgICBfb3B0aW9ucyRjbGllbnRPZmZzZXQgPSBfb3B0aW9ucy5jbGllbnRPZmZzZXQsXG4gICAgICBjbGllbnRPZmZzZXQgPSBfb3B0aW9ucyRjbGllbnRPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRjbGllbnRPZmZzZXQ7XG4gIHZhciBwZXJpb2RzID0gZmluZENoaWxkcmVuKG1wZCwgJ1BlcmlvZCcpO1xuXG4gIGlmICghcGVyaW9kcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLklOVkFMSURfTlVNQkVSX09GX1BFUklPRCk7XG4gIH1cblxuICB2YXIgbG9jYXRpb25zID0gZmluZENoaWxkcmVuKG1wZCwgJ0xvY2F0aW9uJyk7XG4gIHZhciBtcGRBdHRyaWJ1dGVzID0gcGFyc2VBdHRyaWJ1dGVzKG1wZCk7XG4gIHZhciBtcGRCYXNlVXJscyA9IGJ1aWxkQmFzZVVybHMoW21hbmlmZXN0VXJpXSwgZmluZENoaWxkcmVuKG1wZCwgJ0Jhc2VVUkwnKSk7XG4gIG1wZEF0dHJpYnV0ZXMuc291cmNlRHVyYXRpb24gPSBtcGRBdHRyaWJ1dGVzLm1lZGlhUHJlc2VudGF0aW9uRHVyYXRpb24gfHwgMDtcbiAgbXBkQXR0cmlidXRlcy5OT1cgPSBOT1c7XG4gIG1wZEF0dHJpYnV0ZXMuY2xpZW50T2Zmc2V0ID0gY2xpZW50T2Zmc2V0O1xuXG4gIGlmIChsb2NhdGlvbnMubGVuZ3RoKSB7XG4gICAgbXBkQXR0cmlidXRlcy5sb2NhdGlvbnMgPSBsb2NhdGlvbnMubWFwKGdldENvbnRlbnQpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsb2NhdGlvbnM6IG1wZEF0dHJpYnV0ZXMubG9jYXRpb25zLFxuICAgIHJlcHJlc2VudGF0aW9uSW5mbzogZmxhdHRlbihwZXJpb2RzLm1hcCh0b0FkYXB0YXRpb25TZXRzKG1wZEF0dHJpYnV0ZXMsIG1wZEJhc2VVcmxzKSkpXG4gIH07XG59O1xuXG52YXIgc3RyaW5nVG9NcGRYbWwgPSBmdW5jdGlvbiBzdHJpbmdUb01wZFhtbChtYW5pZmVzdFN0cmluZykge1xuICBpZiAobWFuaWZlc3RTdHJpbmcgPT09ICcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9ycy5EQVNIX0VNUFRZX01BTklGRVNUKTtcbiAgfVxuXG4gIHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gIHZhciB4bWwgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKG1hbmlmZXN0U3RyaW5nLCAnYXBwbGljYXRpb24veG1sJyk7XG4gIHZhciBtcGQgPSB4bWwgJiYgeG1sLmRvY3VtZW50RWxlbWVudC50YWdOYW1lID09PSAnTVBEJyA/IHhtbC5kb2N1bWVudEVsZW1lbnQgOiBudWxsO1xuXG4gIGlmICghbXBkIHx8IG1wZCAmJiBtcGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3BhcnNlcmVycm9yJykubGVuZ3RoID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMuREFTSF9JTlZBTElEX1hNTCk7XG4gIH1cblxuICByZXR1cm4gbXBkO1xufTtcblxuLyoqXG4gKiBQYXJzZXMgdGhlIG1hbmlmZXN0IGZvciBhIFVUQ1RpbWluZyBub2RlLCByZXR1cm5pbmcgdGhlIG5vZGVzIGF0dHJpYnV0ZXMgaWYgZm91bmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbXBkXG4gKiAgICAgICAgWE1MIHN0cmluZyBvZiB0aGUgTVBEIG1hbmlmZXN0XG4gKiBAcmV0dXJuIHtPYmplY3R8bnVsbH1cbiAqICAgICAgICAgQXR0cmlidXRlcyBvZiBVVENUaW1pbmcgbm9kZSBzcGVjaWZpZWQgaW4gdGhlIG1hbmlmZXN0LiBOdWxsIGlmIG5vbmUgZm91bmRcbiAqL1xuXG52YXIgcGFyc2VVVENUaW1pbmdTY2hlbWUgPSBmdW5jdGlvbiBwYXJzZVVUQ1RpbWluZ1NjaGVtZShtcGQpIHtcbiAgdmFyIFVUQ1RpbWluZ05vZGUgPSBmaW5kQ2hpbGRyZW4obXBkLCAnVVRDVGltaW5nJylbMF07XG5cbiAgaWYgKCFVVENUaW1pbmdOb2RlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhVVENUaW1pbmdOb2RlKTtcblxuICBzd2l0Y2ggKGF0dHJpYnV0ZXMuc2NoZW1lSWRVcmkpIHtcbiAgICBjYXNlICd1cm46bXBlZzpkYXNoOnV0YzpodHRwLWhlYWQ6MjAxNCc6XG4gICAgY2FzZSAndXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC1oZWFkOjIwMTInOlxuICAgICAgYXR0cmlidXRlcy5tZXRob2QgPSAnSEVBRCc7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3VybjptcGVnOmRhc2g6dXRjOmh0dHAteHNkYXRlOjIwMTQnOlxuICAgIGNhc2UgJ3VybjptcGVnOmRhc2g6dXRjOmh0dHAtaXNvOjIwMTQnOlxuICAgIGNhc2UgJ3VybjptcGVnOmRhc2g6dXRjOmh0dHAteHNkYXRlOjIwMTInOlxuICAgIGNhc2UgJ3VybjptcGVnOmRhc2g6dXRjOmh0dHAtaXNvOjIwMTInOlxuICAgICAgYXR0cmlidXRlcy5tZXRob2QgPSAnR0VUJztcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndXJuOm1wZWc6ZGFzaDp1dGM6ZGlyZWN0OjIwMTQnOlxuICAgIGNhc2UgJ3VybjptcGVnOmRhc2g6dXRjOmRpcmVjdDoyMDEyJzpcbiAgICAgIGF0dHJpYnV0ZXMubWV0aG9kID0gJ0RJUkVDVCc7XG4gICAgICBhdHRyaWJ1dGVzLnZhbHVlID0gRGF0ZS5wYXJzZShhdHRyaWJ1dGVzLnZhbHVlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC1udHA6MjAxNCc6XG4gICAgY2FzZSAndXJuOm1wZWc6ZGFzaDp1dGM6bnRwOjIwMTQnOlxuICAgIGNhc2UgJ3VybjptcGVnOmRhc2g6dXRjOnNudHA6MjAxNCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMuVU5TVVBQT1JURURfVVRDX1RJTUlOR19TQ0hFTUUpO1xuICB9XG5cbiAgcmV0dXJuIGF0dHJpYnV0ZXM7XG59O1xuXG52YXIgVkVSU0lPTiA9IHZlcnNpb247XG5cbnZhciBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKG1hbmlmZXN0U3RyaW5nLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcGFyc2VkTWFuaWZlc3RJbmZvID0gaW5oZXJpdEF0dHJpYnV0ZXMoc3RyaW5nVG9NcGRYbWwobWFuaWZlc3RTdHJpbmcpLCBvcHRpb25zKTtcbiAgdmFyIHBsYXlsaXN0cyA9IHRvUGxheWxpc3RzKHBhcnNlZE1hbmlmZXN0SW5mby5yZXByZXNlbnRhdGlvbkluZm8pO1xuICByZXR1cm4gdG9NM3U4KHBsYXlsaXN0cywgcGFyc2VkTWFuaWZlc3RJbmZvLmxvY2F0aW9ucywgb3B0aW9ucy5zaWR4TWFwcGluZyk7XG59O1xuLyoqXG4gKiBQYXJzZXMgdGhlIG1hbmlmZXN0IGZvciBhIFVUQ1RpbWluZyBub2RlLCByZXR1cm5pbmcgdGhlIG5vZGVzIGF0dHJpYnV0ZXMgaWYgZm91bmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RTdHJpbmdcbiAqICAgICAgICBYTUwgc3RyaW5nIG9mIHRoZSBNUEQgbWFuaWZlc3RcbiAqIEByZXR1cm4ge09iamVjdHxudWxsfVxuICogICAgICAgICBBdHRyaWJ1dGVzIG9mIFVUQ1RpbWluZyBub2RlIHNwZWNpZmllZCBpbiB0aGUgbWFuaWZlc3QuIE51bGwgaWYgbm9uZSBmb3VuZFxuICovXG5cblxudmFyIHBhcnNlVVRDVGltaW5nID0gZnVuY3Rpb24gcGFyc2VVVENUaW1pbmcobWFuaWZlc3RTdHJpbmcpIHtcbiAgcmV0dXJuIHBhcnNlVVRDVGltaW5nU2NoZW1lKHN0cmluZ1RvTXBkWG1sKG1hbmlmZXN0U3RyaW5nKSk7XG59O1xuXG5leHBvcnQgeyBWRVJTSU9OLCBpbmhlcml0QXR0cmlidXRlcywgcGFyc2UsIHBhcnNlVVRDVGltaW5nLCBzdHJpbmdUb01wZFhtbCwgdG9NM3U4LCB0b1BsYXlsaXN0cyB9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogVmlkZW8uanMgNy4xMC4yIDxodHRwOi8vdmlkZW9qcy5jb20vPlxuICogQ29weXJpZ2h0IEJyaWdodGNvdmUsIEluYy4gPGh0dHBzOi8vd3d3LmJyaWdodGNvdmUuY29tLz5cbiAqIEF2YWlsYWJsZSB1bmRlciBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMFxuICogPGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvLmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0U+XG4gKlxuICogSW5jbHVkZXMgdnR0LmpzIDxodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS92dHQuanM+XG4gKiBBdmFpbGFibGUgdW5kZXIgQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjBcbiAqIDxodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS92dHQuanMvYmxvYi9tYXN0ZXIvTElDRU5TRT5cbiAqL1xuXG5pbXBvcnQgd2luZG93JDEgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5pbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IHNhZmVQYXJzZVR1cGxlIGZyb20gJ3NhZmUtanNvbi1wYXJzZS90dXBsZSc7XG5pbXBvcnQga2V5Y29kZSBmcm9tICdrZXljb2RlJztcbmltcG9ydCBYSFIgZnJvbSAnQHZpZGVvanMveGhyJztcbmltcG9ydCB2dHQgZnJvbSAndmlkZW9qcy12dHQuanMnO1xuaW1wb3J0IF9jb25zdHJ1Y3QgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jb25zdHJ1Y3QnO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBfcmVzb2x2ZVVybCBmcm9tICdAdmlkZW9qcy92aHMtdXRpbHMvZGlzdC9yZXNvbHZlLXVybC5qcyc7XG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tICdtM3U4LXBhcnNlcic7XG5pbXBvcnQgeyBzaW1wbGVUeXBlRnJvbVNvdXJjZVR5cGUgfSBmcm9tICdAdmlkZW9qcy92aHMtdXRpbHMvZGlzdC9tZWRpYS10eXBlcy5qcyc7XG5pbXBvcnQgeyBwYXJzZVVUQ1RpbWluZywgcGFyc2UgfSBmcm9tICdtcGQtcGFyc2VyJztcbmltcG9ydCBwYXJzZVNpZHggZnJvbSAnbXV4LmpzL2xpYi90b29scy9wYXJzZS1zaWR4JztcbmltcG9ydCB7IGRldGVjdENvbnRhaW5lckZvckJ5dGVzLCBpc0xpa2VseUZtcDRNZWRpYVNlZ21lbnQsIGdldElkM09mZnNldCB9IGZyb20gJ0B2aWRlb2pzL3Zocy11dGlscy9kaXN0L2NvbnRhaW5lcnMnO1xuaW1wb3J0IHsgdG9VaW50OCwgY29uY2F0VHlwZWRBcnJheXMsIHN0cmluZ1RvQnl0ZXMgfSBmcm9tICdAdmlkZW9qcy92aHMtdXRpbHMvZGlzdC9ieXRlLWhlbHBlcnMnO1xuaW1wb3J0IHRzSW5zcGVjdG9yIGZyb20gJ211eC5qcy9saWIvdG9vbHMvdHMtaW5zcGVjdG9yLmpzJztcbmltcG9ydCB7IE9ORV9TRUNPTkRfSU5fVFMgfSBmcm9tICdtdXguanMvbGliL3V0aWxzL2Nsb2NrJztcbmltcG9ydCBtcDRwcm9iZSBmcm9tICdtdXguanMvbGliL21wNC9wcm9iZSc7XG5pbXBvcnQgeyBicm93c2VyU3VwcG9ydHNDb2RlYywgREVGQVVMVF9WSURFT19DT0RFQywgREVGQVVMVF9BVURJT19DT0RFQywgbXV4ZXJTdXBwb3J0c0NvZGVjLCBwYXJzZUNvZGVjcywgY29kZWNzRnJvbURlZmF1bHQsIHRyYW5zbGF0ZUxlZ2FjeUNvZGVjLCBnZXRNaW1lRm9yQ29kZWMsIGlzQXVkaW9Db2RlYywgaXNWaWRlb0NvZGVjIH0gZnJvbSAnQHZpZGVvanMvdmhzLXV0aWxzL2Rpc3QvY29kZWNzLmpzJztcblxudmFyIHZlcnNpb24gPSBcIjcuMTAuMlwiO1xuXG4vKipcbiAqIEBmaWxlIGNyZWF0ZS1sb2dnZXIuanNcbiAqIEBtb2R1bGUgY3JlYXRlLWxvZ2dlclxuICovXG5cbnZhciBoaXN0b3J5ID0gW107XG4vKipcbiAqIExvZyBtZXNzYWdlcyB0byB0aGUgY29uc29sZSBhbmQgaGlzdG9yeSBiYXNlZCBvbiB0aGUgdHlwZSBvZiBtZXNzYWdlXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge3N0cmluZ30gdHlwZVxuICogICAgICAgICBUaGUgbmFtZSBvZiB0aGUgY29uc29sZSBtZXRob2QgdG8gdXNlLlxuICpcbiAqIEBwYXJhbSAge0FycmF5fSBhcmdzXG4gKiAgICAgICAgIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIHRoZSBtYXRjaGluZyBjb25zb2xlIG1ldGhvZC5cbiAqL1xuXG52YXIgTG9nQnlUeXBlRmFjdG9yeSA9IGZ1bmN0aW9uIExvZ0J5VHlwZUZhY3RvcnkobmFtZSwgbG9nKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodHlwZSwgbGV2ZWwsIGFyZ3MpIHtcbiAgICB2YXIgbHZsID0gbG9nLmxldmVsc1tsZXZlbF07XG4gICAgdmFyIGx2bFJlZ0V4cCA9IG5ldyBSZWdFeHAoXCJeKFwiICsgbHZsICsgXCIpJFwiKTtcblxuICAgIGlmICh0eXBlICE9PSAnbG9nJykge1xuICAgICAgLy8gQWRkIHRoZSB0eXBlIHRvIHRoZSBmcm9udCBvZiB0aGUgbWVzc2FnZSB3aGVuIGl0J3Mgbm90IFwibG9nXCIuXG4gICAgICBhcmdzLnVuc2hpZnQodHlwZS50b1VwcGVyQ2FzZSgpICsgJzonKTtcbiAgICB9IC8vIEFkZCBjb25zb2xlIHByZWZpeCBhZnRlciBhZGRpbmcgdG8gaGlzdG9yeS5cblxuXG4gICAgYXJncy51bnNoaWZ0KG5hbWUgKyAnOicpOyAvLyBBZGQgYSBjbG9uZSBvZiB0aGUgYXJncyBhdCB0aGlzIHBvaW50IHRvIGhpc3RvcnkuXG5cbiAgICBpZiAoaGlzdG9yeSkge1xuICAgICAgaGlzdG9yeS5wdXNoKFtdLmNvbmNhdChhcmdzKSk7IC8vIG9ubHkgc3RvcmUgMTAwMCBoaXN0b3J5IGVudHJpZXNcblxuICAgICAgdmFyIHNwbGljZSA9IGhpc3RvcnkubGVuZ3RoIC0gMTAwMDtcbiAgICAgIGhpc3Rvcnkuc3BsaWNlKDAsIHNwbGljZSA+IDAgPyBzcGxpY2UgOiAwKTtcbiAgICB9IC8vIElmIHRoZXJlJ3Mgbm8gY29uc29sZSB0aGVuIGRvbid0IHRyeSB0byBvdXRwdXQgbWVzc2FnZXMsIGJ1dCB0aGV5IHdpbGxcbiAgICAvLyBzdGlsbCBiZSBzdG9yZWQgaW4gaGlzdG9yeS5cblxuXG4gICAgaWYgKCF3aW5kb3ckMS5jb25zb2xlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBXYXMgc2V0dGluZyB0aGVzZSBvbmNlIG91dHNpZGUgb2YgdGhpcyBmdW5jdGlvbiwgYnV0IGNvbnRhaW5pbmcgdGhlbVxuICAgIC8vIGluIHRoZSBmdW5jdGlvbiBtYWtlcyBpdCBlYXNpZXIgdG8gdGVzdCBjYXNlcyB3aGVyZSBjb25zb2xlIGRvZXNuJ3QgZXhpc3RcbiAgICAvLyB3aGVuIHRoZSBtb2R1bGUgaXMgZXhlY3V0ZWQuXG5cblxuICAgIHZhciBmbiA9IHdpbmRvdyQxLmNvbnNvbGVbdHlwZV07XG5cbiAgICBpZiAoIWZuICYmIHR5cGUgPT09ICdkZWJ1ZycpIHtcbiAgICAgIC8vIENlcnRhaW4gYnJvd3NlcnMgZG9uJ3QgaGF2ZSBzdXBwb3J0IGZvciBjb25zb2xlLmRlYnVnLiBGb3IgdGhvc2UsIHdlXG4gICAgICAvLyBzaG91bGQgZGVmYXVsdCB0byB0aGUgY2xvc2VzdCBjb21wYXJhYmxlIGxvZy5cbiAgICAgIGZuID0gd2luZG93JDEuY29uc29sZS5pbmZvIHx8IHdpbmRvdyQxLmNvbnNvbGUubG9nO1xuICAgIH0gLy8gQmFpbCBvdXQgaWYgdGhlcmUncyBubyBjb25zb2xlIG9yIGlmIHRoaXMgdHlwZSBpcyBub3QgYWxsb3dlZCBieSB0aGVcbiAgICAvLyBjdXJyZW50IGxvZ2dpbmcgbGV2ZWwuXG5cblxuICAgIGlmICghZm4gfHwgIWx2bCB8fCAhbHZsUmVnRXhwLnRlc3QodHlwZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmbltBcnJheS5pc0FycmF5KGFyZ3MpID8gJ2FwcGx5JyA6ICdjYWxsJ10od2luZG93JDEuY29uc29sZSwgYXJncyk7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMb2dnZXIobmFtZSkge1xuICAvLyBUaGlzIGlzIHRoZSBwcml2YXRlIHRyYWNraW5nIHZhcmlhYmxlIGZvciBsb2dnaW5nIGxldmVsLlxuICB2YXIgbGV2ZWwgPSAnaW5mbyc7IC8vIHRoZSBjdXJyaWVkIGxvZ0J5VHlwZSBib3VuZCB0byB0aGUgc3BlY2lmaWMgbG9nIGFuZCBoaXN0b3J5XG5cbiAgdmFyIGxvZ0J5VHlwZTtcbiAgLyoqXG4gICAqIExvZ3MgcGxhaW4gZGVidWcgbWVzc2FnZXMuIFNpbWlsYXIgdG8gYGNvbnNvbGUubG9nYC5cbiAgICpcbiAgICogRHVlIHRvIFtsaW1pdGF0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL2pzZG9jMy9qc2RvYy9pc3N1ZXMvOTU1I2lzc3VlY29tbWVudC0zMTM4MjkxNDkpXG4gICAqIG9mIG91ciBKU0RvYyB0ZW1wbGF0ZSwgd2UgY2Fubm90IHByb3Blcmx5IGRvY3VtZW50IHRoaXMgYXMgYm90aCBhIGZ1bmN0aW9uXG4gICAqIGFuZCBhIG5hbWVzcGFjZSwgc28gaXRzIGZ1bmN0aW9uIHNpZ25hdHVyZSBpcyBkb2N1bWVudGVkIGhlcmUuXG4gICAqXG4gICAqICMjIyMgQXJndW1lbnRzXG4gICAqICMjIyMjICphcmdzXG4gICAqIE1peGVkW11cbiAgICpcbiAgICogQW55IGNvbWJpbmF0aW9uIG9mIHZhbHVlcyB0aGF0IGNvdWxkIGJlIHBhc3NlZCB0byBgY29uc29sZS5sb2coKWAuXG4gICAqXG4gICAqICMjIyMgUmV0dXJuIFZhbHVlXG4gICAqXG4gICAqIGB1bmRlZmluZWRgXG4gICAqXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQHBhcmFtICAgIHtNaXhlZFtdfSBhcmdzXG4gICAqICAgICAgICAgICBPbmUgb3IgbW9yZSBtZXNzYWdlcyBvciBvYmplY3RzIHRoYXQgc2hvdWxkIGJlIGxvZ2dlZC5cbiAgICovXG5cbiAgdmFyIGxvZyA9IGZ1bmN0aW9uIGxvZygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbG9nQnlUeXBlKCdsb2cnLCBsZXZlbCwgYXJncyk7XG4gIH07IC8vIFRoaXMgaXMgdGhlIGxvZ0J5VHlwZSBoZWxwZXIgdGhhdCB0aGUgbG9nZ2luZyBtZXRob2RzIGJlbG93IHVzZVxuXG5cbiAgbG9nQnlUeXBlID0gTG9nQnlUeXBlRmFjdG9yeShuYW1lLCBsb2cpO1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHN1YmxvZ2dlciB3aGljaCBjaGFpbnMgdGhlIG9sZCBuYW1lIHRvIHRoZSBuZXcgbmFtZS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGRvaW5nIGB2aWRlb2pzLmxvZy5jcmVhdGVMb2dnZXIoJ3BsYXllcicpYCBhbmQgdGhlbiB1c2luZyB0aGF0IGxvZ2dlciB3aWxsIGxvZyB0aGUgZm9sbG93aW5nOlxuICAgKiBgYGBqc1xuICAgKiAgbXlsb2dnZXIoJ2ZvbycpO1xuICAgKiAgLy8gPiBWSURFT0pTOiBwbGF5ZXI6IGZvb1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogICAgICAgIFRoZSBuYW1lIHRvIGFkZCBjYWxsIHRoZSBuZXcgbG9nZ2VyXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG5cbiAgbG9nLmNyZWF0ZUxvZ2dlciA9IGZ1bmN0aW9uIChzdWJuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUxvZ2dlcihuYW1lICsgJzogJyArIHN1Ym5hbWUpO1xuICB9O1xuICAvKipcbiAgICogRW51bWVyYXRpb24gb2YgYXZhaWxhYmxlIGxvZ2dpbmcgbGV2ZWxzLCB3aGVyZSB0aGUga2V5cyBhcmUgdGhlIGxldmVsIG5hbWVzXG4gICAqIGFuZCB0aGUgdmFsdWVzIGFyZSBgfGAtc2VwYXJhdGVkIHN0cmluZ3MgY29udGFpbmluZyBsb2dnaW5nIG1ldGhvZHMgYWxsb3dlZFxuICAgKiBpbiB0aGF0IGxvZ2dpbmcgbGV2ZWwuIFRoZXNlIHN0cmluZ3MgYXJlIHVzZWQgdG8gY3JlYXRlIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqIG1hdGNoaW5nIHRoZSBmdW5jdGlvbiBuYW1lIGJlaW5nIGNhbGxlZC5cbiAgICpcbiAgICogTGV2ZWxzIHByb3ZpZGVkIGJ5IFZpZGVvLmpzIGFyZTpcbiAgICpcbiAgICogLSBgb2ZmYDogTWF0Y2hlcyBubyBjYWxscy4gQW55IHZhbHVlIHRoYXQgY2FuIGJlIGNhc3QgdG8gYGZhbHNlYCB3aWxsIGhhdmVcbiAgICogICB0aGlzIGVmZmVjdC4gVGhlIG1vc3QgcmVzdHJpY3RpdmUuXG4gICAqIC0gYGFsbGA6IE1hdGNoZXMgb25seSBWaWRlby5qcy1wcm92aWRlZCBmdW5jdGlvbnMgKGBkZWJ1Z2AsIGBsb2dgLFxuICAgKiAgIGBsb2cud2FybmAsIGFuZCBgbG9nLmVycm9yYCkuXG4gICAqIC0gYGRlYnVnYDogTWF0Y2hlcyBgbG9nLmRlYnVnYCwgYGxvZ2AsIGBsb2cud2FybmAsIGFuZCBgbG9nLmVycm9yYCBjYWxscy5cbiAgICogLSBgaW5mb2AgKGRlZmF1bHQpOiBNYXRjaGVzIGBsb2dgLCBgbG9nLndhcm5gLCBhbmQgYGxvZy5lcnJvcmAgY2FsbHMuXG4gICAqIC0gYHdhcm5gOiBNYXRjaGVzIGBsb2cud2FybmAgYW5kIGBsb2cuZXJyb3JgIGNhbGxzLlxuICAgKiAtIGBlcnJvcmA6IE1hdGNoZXMgb25seSBgbG9nLmVycm9yYCBjYWxscy5cbiAgICpcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG5cblxuICBsb2cubGV2ZWxzID0ge1xuICAgIGFsbDogJ2RlYnVnfGxvZ3x3YXJufGVycm9yJyxcbiAgICBvZmY6ICcnLFxuICAgIGRlYnVnOiAnZGVidWd8bG9nfHdhcm58ZXJyb3InLFxuICAgIGluZm86ICdsb2d8d2FybnxlcnJvcicsXG4gICAgd2FybjogJ3dhcm58ZXJyb3InLFxuICAgIGVycm9yOiAnZXJyb3InLFxuICAgIERFRkFVTFQ6IGxldmVsXG4gIH07XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHRoZSBjdXJyZW50IGxvZ2dpbmcgbGV2ZWwuXG4gICAqXG4gICAqIElmIGEgc3RyaW5nIG1hdGNoaW5nIGEga2V5IGZyb20ge0BsaW5rIG1vZHVsZTpsb2cubGV2ZWxzfSBpcyBwcm92aWRlZCwgYWN0c1xuICAgKiBhcyBhIHNldHRlci5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSBbbHZsXVxuICAgKiAgICAgICAgIFBhc3MgYSB2YWxpZCBsZXZlbCB0byBzZXQgYSBuZXcgbG9nZ2luZyBsZXZlbC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IGxvZ2dpbmcgbGV2ZWwuXG4gICAqL1xuXG4gIGxvZy5sZXZlbCA9IGZ1bmN0aW9uIChsdmwpIHtcbiAgICBpZiAodHlwZW9mIGx2bCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICghbG9nLmxldmVscy5oYXNPd25Qcm9wZXJ0eShsdmwpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlxcXCJcIiArIGx2bCArIFwiXFxcIiBpbiBub3QgYSB2YWxpZCBsb2cgbGV2ZWxcIik7XG4gICAgICB9XG5cbiAgICAgIGxldmVsID0gbHZsO1xuICAgIH1cblxuICAgIHJldHVybiBsZXZlbDtcbiAgfTtcbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyBldmVyeXRoaW5nIHRoYXQgaGFzIGJlZW4gbG9nZ2VkIHRvIHRoZSBoaXN0b3J5LlxuICAgKlxuICAgKiBUaGlzIGFycmF5IGlzIGEgc2hhbGxvdyBjbG9uZSBvZiB0aGUgaW50ZXJuYWwgaGlzdG9yeSByZWNvcmQuIEhvd2V2ZXIsIGl0c1xuICAgKiBjb250ZW50cyBhcmUgX25vdF8gY2xvbmVkOyBzbywgbXV0YXRpbmcgb2JqZWN0cyBpbnNpZGUgdGhpcyBhcnJheSB3aWxsXG4gICAqIG11dGF0ZSB0aGVtIGluIGhpc3RvcnkuXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cblxuXG4gIGxvZy5oaXN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBoaXN0b3J5ID8gW10uY29uY2F0KGhpc3RvcnkpIDogW107XG4gIH07XG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIGZpbHRlciB0aGUgaGlzdG9yeSBieSB0aGUgZ2l2ZW4gbG9nZ2VyIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZuYW1lXG4gICAqICAgICAgICBUaGUgbmFtZSB0byBmaWx0ZXIgYnlcbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqICAgICAgICAgVGhlIGZpbHRlcmVkIGxpc3QgdG8gcmV0dXJuXG4gICAqL1xuXG5cbiAgbG9nLmhpc3RvcnkuZmlsdGVyID0gZnVuY3Rpb24gKGZuYW1lKSB7XG4gICAgcmV0dXJuIChoaXN0b3J5IHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24gKGhpc3RvcnlJdGVtKSB7XG4gICAgICAvLyBpZiB0aGUgZmlyc3QgaXRlbSBpbiBlYWNoIGhpc3RvcnlJdGVtIGluY2x1ZGVzIGBmbmFtZWAsIHRoZW4gaXQncyBhIG1hdGNoXG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIi4qXCIgKyBmbmFtZSArIFwiLipcIikudGVzdChoaXN0b3J5SXRlbVswXSk7XG4gICAgfSk7XG4gIH07XG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIGludGVybmFsIGhpc3RvcnkgdHJhY2tpbmcsIGJ1dCBkb2VzIG5vdCBwcmV2ZW50IGZ1cnRoZXIgaGlzdG9yeVxuICAgKiB0cmFja2luZy5cbiAgICovXG5cblxuICBsb2cuaGlzdG9yeS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaGlzdG9yeSkge1xuICAgICAgaGlzdG9yeS5sZW5ndGggPSAwO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIERpc2FibGUgaGlzdG9yeSB0cmFja2luZyBpZiBpdCBpcyBjdXJyZW50bHkgZW5hYmxlZC5cbiAgICovXG5cblxuICBsb2cuaGlzdG9yeS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChoaXN0b3J5ICE9PSBudWxsKSB7XG4gICAgICBoaXN0b3J5Lmxlbmd0aCA9IDA7XG4gICAgICBoaXN0b3J5ID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBFbmFibGUgaGlzdG9yeSB0cmFja2luZyBpZiBpdCBpcyBjdXJyZW50bHkgZGlzYWJsZWQuXG4gICAqL1xuXG5cbiAgbG9nLmhpc3RvcnkuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChoaXN0b3J5ID09PSBudWxsKSB7XG4gICAgICBoaXN0b3J5ID0gW107XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogTG9ncyBlcnJvciBtZXNzYWdlcy4gU2ltaWxhciB0byBgY29uc29sZS5lcnJvcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7TWl4ZWRbXX0gYXJnc1xuICAgKiAgICAgICAgT25lIG9yIG1vcmUgbWVzc2FnZXMgb3Igb2JqZWN0cyB0aGF0IHNob3VsZCBiZSBsb2dnZWQgYXMgYW4gZXJyb3JcbiAgICovXG5cblxuICBsb2cuZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ0J5VHlwZSgnZXJyb3InLCBsZXZlbCwgYXJncyk7XG4gIH07XG4gIC8qKlxuICAgKiBMb2dzIHdhcm5pbmcgbWVzc2FnZXMuIFNpbWlsYXIgdG8gYGNvbnNvbGUud2FybmAuXG4gICAqXG4gICAqIEBwYXJhbSB7TWl4ZWRbXX0gYXJnc1xuICAgKiAgICAgICAgT25lIG9yIG1vcmUgbWVzc2FnZXMgb3Igb2JqZWN0cyB0aGF0IHNob3VsZCBiZSBsb2dnZWQgYXMgYSB3YXJuaW5nLlxuICAgKi9cblxuXG4gIGxvZy53YXJuID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIHJldHVybiBsb2dCeVR5cGUoJ3dhcm4nLCBsZXZlbCwgYXJncyk7XG4gIH07XG4gIC8qKlxuICAgKiBMb2dzIGRlYnVnIG1lc3NhZ2VzLiBTaW1pbGFyIHRvIGBjb25zb2xlLmRlYnVnYCwgYnV0IG1heSBhbHNvIGFjdCBhcyBhIGNvbXBhcmFibGVcbiAgICogbG9nIGlmIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYXZhaWxhYmxlXG4gICAqXG4gICAqIEBwYXJhbSB7TWl4ZWRbXX0gYXJnc1xuICAgKiAgICAgICAgT25lIG9yIG1vcmUgbWVzc2FnZXMgb3Igb2JqZWN0cyB0aGF0IHNob3VsZCBiZSBsb2dnZWQgYXMgZGVidWcuXG4gICAqL1xuXG5cbiAgbG9nLmRlYnVnID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgIH1cblxuICAgIHJldHVybiBsb2dCeVR5cGUoJ2RlYnVnJywgbGV2ZWwsIGFyZ3MpO1xuICB9O1xuXG4gIHJldHVybiBsb2c7XG59XG5cbi8qKlxuICogQGZpbGUgbG9nLmpzXG4gKiBAbW9kdWxlIGxvZ1xuICovXG52YXIgbG9nID0gY3JlYXRlTG9nZ2VyKCdWSURFT0pTJyk7XG52YXIgY3JlYXRlTG9nZ2VyJDEgPSBsb2cuY3JlYXRlTG9nZ2VyO1xuXG4vKipcbiAqIEBmaWxlIG9iai5qc1xuICogQG1vZHVsZSBvYmpcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvYmo6RWFjaENhbGxiYWNrXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAqICAgICAgICBUaGUgY3VycmVudCBrZXkgZm9yIHRoZSBvYmplY3QgdGhhdCBpcyBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqICAgICAgICBUaGUgY3VycmVudCBrZXktdmFsdWUgZm9yIG9iamVjdCB0aGF0IGlzIGJlaW5nIGl0ZXJhdGVkIG92ZXJcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvYmo6UmVkdWNlQ2FsbGJhY2tcbiAqXG4gKiBAcGFyYW0ge01peGVkfSBhY2N1bVxuICogICAgICAgIFRoZSB2YWx1ZSB0aGF0IGlzIGFjY3VtdWxhdGluZyBvdmVyIHRoZSByZWR1Y2UgbG9vcC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICogICAgICAgIFRoZSBjdXJyZW50IGtleSBmb3IgdGhlIG9iamVjdCB0aGF0IGlzIGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogICAgICAgIFRoZSBjdXJyZW50IGtleS12YWx1ZSBmb3Igb2JqZWN0IHRoYXQgaXMgYmVpbmcgaXRlcmF0ZWQgb3ZlclxuICpcbiAqIEByZXR1cm4ge01peGVkfVxuICogICAgICAgICBUaGUgbmV3IGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuLyoqXG4gKiBHZXQgdGhlIGtleXMgb2YgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9XG4gKiAgICAgICAgVGhlIE9iamVjdCB0byBnZXQgdGhlIGtleXMgZnJvbVxuICpcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICogICAgICAgICBBbiBhcnJheSBvZiB0aGUga2V5cyBmcm9tIHRoZSBvYmplY3QuIFJldHVybnMgYW4gZW1wdHkgYXJyYXkgaWYgdGhlXG4gKiAgICAgICAgIG9iamVjdCBwYXNzZWQgaW4gd2FzIGludmFsaWQgb3IgaGFkIG5vIGtleXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIga2V5cyA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc09iamVjdChvYmplY3QpID8gT2JqZWN0LmtleXMob2JqZWN0KSA6IFtdO1xufTtcbi8qKlxuICogQXJyYXktbGlrZSBpdGVyYXRpb24gZm9yIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogICAgICAgIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyXG4gKlxuICogQHBhcmFtIHtvYmo6RWFjaENhbGxiYWNrfSBmblxuICogICAgICAgIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCBpcyBjYWxsZWQgZm9yIGVhY2gga2V5IGluIHRoZSBvYmplY3QuXG4gKi9cblxuXG5mdW5jdGlvbiBlYWNoKG9iamVjdCwgZm4pIHtcbiAga2V5cyhvYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBmbihvYmplY3Rba2V5XSwga2V5KTtcbiAgfSk7XG59XG4vKipcbiAqIEFycmF5LWxpa2UgcmVkdWNlIGZvciBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqICAgICAgICBUaGUgT2JqZWN0IHRoYXQgeW91IHdhbnQgdG8gcmVkdWNlLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiAgICAgICAgIEEgY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGZvciBlYWNoIGtleSBpbiB0aGUgb2JqZWN0LiBJdFxuICogICAgICAgICByZWNlaXZlcyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUgYW5kIHRoZSBwZXItaXRlcmF0aW9uIHZhbHVlIGFuZCBrZXlcbiAqICAgICAgICAgYXMgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IFtpbml0aWFsID0gMF1cbiAqICAgICAgICBTdGFydGluZyB2YWx1ZVxuICpcbiAqIEByZXR1cm4ge01peGVkfVxuICogICAgICAgICBUaGUgZmluYWwgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKi9cblxuZnVuY3Rpb24gcmVkdWNlKG9iamVjdCwgZm4sIGluaXRpYWwpIHtcbiAgaWYgKGluaXRpYWwgPT09IHZvaWQgMCkge1xuICAgIGluaXRpYWwgPSAwO1xuICB9XG5cbiAgcmV0dXJuIGtleXMob2JqZWN0KS5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtLCBrZXkpIHtcbiAgICByZXR1cm4gZm4oYWNjdW0sIG9iamVjdFtrZXldLCBrZXkpO1xuICB9LCBpbml0aWFsKTtcbn1cbi8qKlxuICogT2JqZWN0LmFzc2lnbi1zdHlsZSBvYmplY3Qgc2hhbGxvdyBtZXJnZS9leHRlbmQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSAge09iamVjdH0gLi4uc291cmNlc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNvdXJjZXMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHNvdXJjZXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKE9iamVjdC5hc3NpZ24pIHtcbiAgICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodm9pZCAwLCBbdGFyZ2V0XS5jb25jYXQoc291cmNlcykpO1xuICB9XG5cbiAgc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVhY2goc291cmNlLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBhIHZhbHVlIGlzIGFuIG9iamVjdCBvZiBhbnkga2luZCAtIGluY2x1ZGluZyBET00gbm9kZXMsXG4gKiBhcnJheXMsIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGV0Yy4gTm90IGZ1bmN0aW9ucywgdGhvdWdoLlxuICpcbiAqIFRoaXMgYXZvaWRzIHRoZSBnb3RjaGEgd2hlcmUgdXNpbmcgYHR5cGVvZmAgb24gYSBgbnVsbGAgdmFsdWVcbiAqIHJlc3VsdHMgaW4gYCdvYmplY3QnYC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBhbiBvYmplY3QgYXBwZWFycyB0byBiZSBhIFwicGxhaW5cIiBvYmplY3QgLSB0aGF0IGlzLCBhXG4gKiBkaXJlY3QgaW5zdGFuY2Ugb2YgYE9iamVjdGAuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc1BsYWluKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5cbi8qKlxuICogQGZpbGUgY29tcHV0ZWQtc3R5bGUuanNcbiAqIEBtb2R1bGUgY29tcHV0ZWQtc3R5bGVcbiAqL1xuLyoqXG4gKiBBIHNhZmUgZ2V0Q29tcHV0ZWRTdHlsZS5cbiAqXG4gKiBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIGluIEZpcmVmb3gsIGlmIHRoZSBwbGF5ZXIgaXMgbG9hZGVkIGluIGFuIGlmcmFtZSB3aXRoXG4gKiBgZGlzcGxheTpub25lYCwgdGhlbiBgZ2V0Q29tcHV0ZWRTdHlsZWAgcmV0dXJucyBgbnVsbGAsIHNvLCB3ZSBkbyBhXG4gKiBudWxsLWNoZWNrIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBwbGF5ZXIgZG9lc24ndCBicmVhayBpbiB0aGVzZSBjYXNlcy5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSAgICB7RWxlbWVudH0gZWxcbiAqICAgICAgICAgICBUaGUgZWxlbWVudCB5b3Ugd2FudCB0aGUgY29tcHV0ZWQgc3R5bGUgb2ZcbiAqXG4gKiBAcGFyYW0gICAge3N0cmluZ30gcHJvcFxuICogICAgICAgICAgIFRoZSBwcm9wZXJ0eSBuYW1lIHlvdSB3YW50XG4gKlxuICogQHNlZSAgICAgIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICovXG5cbmZ1bmN0aW9uIGNvbXB1dGVkU3R5bGUoZWwsIHByb3ApIHtcbiAgaWYgKCFlbCB8fCAhcHJvcCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmICh0eXBlb2Ygd2luZG93JDEuZ2V0Q29tcHV0ZWRTdHlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBjb21wdXRlZFN0eWxlVmFsdWUgPSB3aW5kb3ckMS5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICByZXR1cm4gY29tcHV0ZWRTdHlsZVZhbHVlID8gY29tcHV0ZWRTdHlsZVZhbHVlLmdldFByb3BlcnR5VmFsdWUocHJvcCkgfHwgY29tcHV0ZWRTdHlsZVZhbHVlW3Byb3BdIDogJyc7XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogQGZpbGUgZG9tLmpzXG4gKiBAbW9kdWxlIGRvbVxuICovXG4vKipcbiAqIERldGVjdCBpZiBhIHZhbHVlIGlzIGEgc3RyaW5nIHdpdGggYW55IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiAgICAgICAgIFRoZSBzdHJpbmcgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBXaWxsIGJlIGB0cnVlYCBpZiB0aGUgc3RyaW5nIGlzIG5vbi1ibGFuaywgYGZhbHNlYCBvdGhlcndpc2UuXG4gKlxuICovXG5cbmZ1bmN0aW9uIGlzTm9uQmxhbmtTdHJpbmcoc3RyKSB7XG4gIC8vIHdlIHVzZSBzdHIudHJpbSBhcyBpdCB3aWxsIHRyaW0gYW55IHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuICAvLyBmcm9tIHRoZSBmcm9udCBvciBiYWNrIG9mIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMuIGFrYVxuICAvLyBBbnkgc3RyaW5nIHRoYXQgY29udGFpbnMgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyB3aWxsXG4gIC8vIHN0aWxsIGNvbnRhaW4gdGhlbSBhZnRlciBgdHJpbWAgYnV0IHdoaXRlc3BhY2Ugb25seSBzdHJpbmdzXG4gIC8vIHdpbGwgaGF2ZSBhIGxlbmd0aCBvZiAwLCBmYWlsaW5nIHRoaXMgY2hlY2suXG4gIHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyAmJiBCb29sZWFuKHN0ci50cmltKCkpO1xufVxuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHBhc3NlZCBzdHJpbmcgaGFzIHdoaXRlc3BhY2UuIFRoaXMgaXMgdXNlZCBieVxuICogY2xhc3MgbWV0aG9kcyB0byBiZSByZWxhdGl2ZWx5IGNvbnNpc3RlbnQgd2l0aCB0aGUgY2xhc3NMaXN0IEFQSS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqICAgICAgICAgVGhlIHN0cmluZyB0byBjaGVjayBmb3Igd2hpdGVzcGFjZS5cbiAqXG4gKiBAdGhyb3dzIHtFcnJvcn1cbiAqICAgICAgICAgVGhyb3dzIGFuIGVycm9yIGlmIHRoZXJlIGlzIHdoaXRlc3BhY2UgaW4gdGhlIHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRocm93SWZXaGl0ZXNwYWNlKHN0cikge1xuICAvLyBzdHIuaW5kZXhPZiBpbnN0ZWFkIG9mIHJlZ2V4IGJlY2F1c2Ugc3RyLmluZGV4T2YgaXMgZmFzdGVyIHBlcmZvcm1hbmNlIHdpc2UuXG4gIGlmIChzdHIuaW5kZXhPZignICcpID49IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsYXNzIGhhcyBpbGxlZ2FsIHdoaXRlc3BhY2UgY2hhcmFjdGVycycpO1xuICB9XG59XG4vKipcbiAqIFByb2R1Y2UgYSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIG1hdGNoaW5nIGEgY2xhc3NOYW1lIHdpdGhpbiBhbiBlbGVtZW50cyBjbGFzc05hbWUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge3N0cmluZ30gY2xhc3NOYW1lXG4gKiAgICAgICAgIFRoZSBjbGFzc05hbWUgdG8gZ2VuZXJhdGUgdGhlIFJlZ0V4cCBmb3IuXG4gKlxuICogQHJldHVybiB7UmVnRXhwfVxuICogICAgICAgICBUaGUgUmVnRXhwIHRoYXQgd2lsbCBjaGVjayBmb3IgYSBzcGVjaWZpYyBgY2xhc3NOYW1lYCBpbiBhbiBlbGVtZW50c1xuICogICAgICAgICBjbGFzc05hbWUuXG4gKi9cblxuXG5mdW5jdGlvbiBjbGFzc1JlZ0V4cChjbGFzc05hbWUpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBjbGFzc05hbWUgKyAnKCR8XFxcXHMpJyk7XG59XG4vKipcbiAqIFdoZXRoZXIgdGhlIGN1cnJlbnQgRE9NIGludGVyZmFjZSBhcHBlYXJzIHRvIGJlIHJlYWwgKGkuZS4gbm90IHNpbXVsYXRlZCkuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2lsbCBiZSBgdHJ1ZWAgaWYgdGhlIERPTSBhcHBlYXJzIHRvIGJlIHJlYWwsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5cblxuZnVuY3Rpb24gaXNSZWFsKCkge1xuICAvLyBCb3RoIGRvY3VtZW50IGFuZCB3aW5kb3cgd2lsbCBuZXZlciBiZSB1bmRlZmluZWQgdGhhbmtzIHRvIGBnbG9iYWxgLlxuICByZXR1cm4gZG9jdW1lbnQgPT09IHdpbmRvdyQxLmRvY3VtZW50O1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzLCB2aWEgZHVjayB0eXBpbmcsIHdoZXRoZXIgb3Igbm90IGEgdmFsdWUgaXMgYSBET00gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtNaXhlZH0gdmFsdWVcbiAqICAgICAgICAgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIFdpbGwgYmUgYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyBhIERPTSBlbGVtZW50LCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuXG5mdW5jdGlvbiBpc0VsKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDE7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGN1cnJlbnQgRE9NIGlzIGVtYmVkZGVkIGluIGFuIGlmcmFtZS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBXaWxsIGJlIGB0cnVlYCBpZiB0aGUgRE9NIGlzIGVtYmVkZGVkIGluIGFuIGlmcmFtZSwgYGZhbHNlYFxuICogICAgICAgICBvdGhlcndpc2UuXG4gKi9cblxuZnVuY3Rpb24gaXNJbkZyYW1lKCkge1xuICAvLyBXZSBuZWVkIGEgdHJ5L2NhdGNoIGhlcmUgYmVjYXVzZSBTYWZhcmkgd2lsbCB0aHJvdyBlcnJvcnMgd2hlbiBhdHRlbXB0aW5nXG4gIC8vIHRvIGdldCBlaXRoZXIgYHBhcmVudGAgb3IgYHNlbGZgXG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdyQxLnBhcmVudCAhPT0gd2luZG93JDEuc2VsZjtcbiAgfSBjYXRjaCAoeCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgZnVuY3Rpb25zIHRvIHF1ZXJ5IHRoZSBET00gdXNpbmcgYSBnaXZlbiBtZXRob2QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IG1ldGhvZFxuICogICAgICAgICAgVGhlIG1ldGhvZCB0byBjcmVhdGUgdGhlIHF1ZXJ5IHdpdGguXG4gKlxuICogQHJldHVybiAge0Z1bmN0aW9ufVxuICogICAgICAgICAgVGhlIHF1ZXJ5IG1ldGhvZFxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVF1ZXJpZXIobWV0aG9kKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoIWlzTm9uQmxhbmtTdHJpbmcoc2VsZWN0b3IpKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnRbbWV0aG9kXShudWxsKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOb25CbGFua1N0cmluZyhjb250ZXh0KSkge1xuICAgICAgY29udGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGV4dCk7XG4gICAgfVxuXG4gICAgdmFyIGN0eCA9IGlzRWwoY29udGV4dCkgPyBjb250ZXh0IDogZG9jdW1lbnQ7XG4gICAgcmV0dXJuIGN0eFttZXRob2RdICYmIGN0eFttZXRob2RdKHNlbGVjdG9yKTtcbiAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBlbGVtZW50IGFuZCBhcHBsaWVzIHByb3BlcnRpZXMsIGF0dHJpYnV0ZXMsIGFuZCBpbnNlcnRzIGNvbnRlbnQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBbdGFnTmFtZT0nZGl2J11cbiAqICAgICAgICAgTmFtZSBvZiB0YWcgdG8gYmUgY3JlYXRlZC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IFtwcm9wZXJ0aWVzPXt9XVxuICogICAgICAgICBFbGVtZW50IHByb3BlcnRpZXMgdG8gYmUgYXBwbGllZC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IFthdHRyaWJ1dGVzPXt9XVxuICogICAgICAgICBFbGVtZW50IGF0dHJpYnV0ZXMgdG8gYmUgYXBwbGllZC5cbiAqXG4gKiBAcGFyYW0ge21vZHVsZTpkb21+Q29udGVudERlc2NyaXB0b3J9IGNvbnRlbnRcbiAqICAgICAgICBBIGNvbnRlbnQgZGVzY3JpcHRvciBvYmplY3QuXG4gKlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsKHRhZ05hbWUsIHByb3BlcnRpZXMsIGF0dHJpYnV0ZXMsIGNvbnRlbnQpIHtcbiAgaWYgKHRhZ05hbWUgPT09IHZvaWQgMCkge1xuICAgIHRhZ05hbWUgPSAnZGl2JztcbiAgfVxuXG4gIGlmIChwcm9wZXJ0aWVzID09PSB2b2lkIDApIHtcbiAgICBwcm9wZXJ0aWVzID0ge307XG4gIH1cblxuICBpZiAoYXR0cmlidXRlcyA9PT0gdm9pZCAwKSB7XG4gICAgYXR0cmlidXRlcyA9IHt9O1xuICB9XG5cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICB2YXIgdmFsID0gcHJvcGVydGllc1twcm9wTmFtZV07IC8vIFNlZSAjMjE3NlxuICAgIC8vIFdlIG9yaWdpbmFsbHkgd2VyZSBhY2NlcHRpbmcgYm90aCBwcm9wZXJ0aWVzIGFuZCBhdHRyaWJ1dGVzIGluIHRoZVxuICAgIC8vIHNhbWUgb2JqZWN0LCBidXQgdGhhdCBkb2Vzbid0IHdvcmsgc28gd2VsbC5cblxuICAgIGlmIChwcm9wTmFtZS5pbmRleE9mKCdhcmlhLScpICE9PSAtMSB8fCBwcm9wTmFtZSA9PT0gJ3JvbGUnIHx8IHByb3BOYW1lID09PSAndHlwZScpIHtcbiAgICAgIGxvZy53YXJuKCdTZXR0aW5nIGF0dHJpYnV0ZXMgaW4gdGhlIHNlY29uZCBhcmd1bWVudCBvZiBjcmVhdGVFbCgpXFxuJyArICdoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgdGhlIHRoaXJkIGFyZ3VtZW50IGluc3RlYWQuXFxuJyArIChcImNyZWF0ZUVsKHR5cGUsIHByb3BlcnRpZXMsIGF0dHJpYnV0ZXMpLiBBdHRlbXB0aW5nIHRvIHNldCBcIiArIHByb3BOYW1lICsgXCIgdG8gXCIgKyB2YWwgKyBcIi5cIikpO1xuICAgICAgZWwuc2V0QXR0cmlidXRlKHByb3BOYW1lLCB2YWwpOyAvLyBIYW5kbGUgdGV4dENvbnRlbnQgc2luY2UgaXQncyBub3Qgc3VwcG9ydGVkIGV2ZXJ5d2hlcmUgYW5kIHdlIGhhdmUgYVxuICAgICAgLy8gbWV0aG9kIGZvciBpdC5cbiAgICB9IGVsc2UgaWYgKHByb3BOYW1lID09PSAndGV4dENvbnRlbnQnKSB7XG4gICAgICB0ZXh0Q29udGVudChlbCwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGVsW3Byb3BOYW1lXSAhPT0gdmFsKSB7XG4gICAgICBlbFtwcm9wTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0ck5hbWUpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJpYnV0ZXNbYXR0ck5hbWVdKTtcbiAgfSk7XG5cbiAgaWYgKGNvbnRlbnQpIHtcbiAgICBhcHBlbmRDb250ZW50KGVsLCBjb250ZW50KTtcbiAgfVxuXG4gIHJldHVybiBlbDtcbn1cbi8qKlxuICogSW5qZWN0cyB0ZXh0IGludG8gYW4gZWxlbWVudCwgcmVwbGFjaW5nIGFueSBleGlzdGluZyBjb250ZW50cyBlbnRpcmVseS5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbFxuICogICAgICAgICBUaGUgZWxlbWVudCB0byBhZGQgdGV4dCBjb250ZW50IGludG9cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRleHRcbiAqICAgICAgICAgVGhlIHRleHQgY29udGVudCB0byBhZGQuXG4gKlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqICAgICAgICAgVGhlIGVsZW1lbnQgd2l0aCBhZGRlZCB0ZXh0IGNvbnRlbnQuXG4gKi9cblxuZnVuY3Rpb24gdGV4dENvbnRlbnQoZWwsIHRleHQpIHtcbiAgaWYgKHR5cGVvZiBlbC50ZXh0Q29udGVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbC5pbm5lclRleHQgPSB0ZXh0O1xuICB9IGVsc2Uge1xuICAgIGVsLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfVxuXG4gIHJldHVybiBlbDtcbn1cbi8qKlxuICogSW5zZXJ0IGFuIGVsZW1lbnQgYXMgdGhlIGZpcnN0IGNoaWxkIG5vZGUgb2YgYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gY2hpbGRcbiAqICAgICAgICBFbGVtZW50IHRvIGluc2VydFxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gcGFyZW50XG4gKiAgICAgICAgRWxlbWVudCB0byBpbnNlcnQgY2hpbGQgaW50b1xuICovXG5cbmZ1bmN0aW9uIHByZXBlbmRUbyhjaGlsZCwgcGFyZW50KSB7XG4gIGlmIChwYXJlbnQuZmlyc3RDaGlsZCkge1xuICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHBhcmVudC5maXJzdENoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICB9XG59XG4vKipcbiAqIENoZWNrIGlmIGFuIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZS5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbGVtZW50XG4gKiAgICAgICAgIEVsZW1lbnQgdG8gY2hlY2tcbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGNsYXNzVG9DaGVja1xuICogICAgICAgICBDbGFzcyBuYW1lIHRvIGNoZWNrIGZvclxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIFdpbGwgYmUgYHRydWVgIGlmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqXG4gKiBAdGhyb3dzIHtFcnJvcn1cbiAqICAgICAgICAgVGhyb3dzIGFuIGVycm9yIGlmIGBjbGFzc1RvQ2hlY2tgIGhhcyB3aGl0ZSBzcGFjZS5cbiAqL1xuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc1RvQ2hlY2spIHtcbiAgdGhyb3dJZldoaXRlc3BhY2UoY2xhc3NUb0NoZWNrKTtcblxuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NUb0NoZWNrKTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc1JlZ0V4cChjbGFzc1RvQ2hlY2spLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpO1xufVxuLyoqXG4gKiBBZGQgYSBjbGFzcyBuYW1lIHRvIGFuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtICB7RWxlbWVudH0gZWxlbWVudFxuICogICAgICAgICBFbGVtZW50IHRvIGFkZCBjbGFzcyBuYW1lIHRvLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gY2xhc3NUb0FkZFxuICogICAgICAgICBDbGFzcyBuYW1lIHRvIGFkZC5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICogICAgICAgICBUaGUgRE9NIGVsZW1lbnQgd2l0aCB0aGUgYWRkZWQgY2xhc3MgbmFtZS5cbiAqL1xuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc1RvQWRkKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc1RvQWRkKTsgLy8gRG9uJ3QgbmVlZCB0byBgdGhyb3dJZldoaXRlc3BhY2VgIGhlcmUgYmVjYXVzZSBgaGFzRWxDbGFzc2Agd2lsbCBkbyBpdFxuICAgIC8vIGluIHRoZSBjYXNlIG9mIGNsYXNzTGlzdCBub3QgYmVpbmcgc3VwcG9ydGVkLlxuICB9IGVsc2UgaWYgKCFoYXNDbGFzcyhlbGVtZW50LCBjbGFzc1RvQWRkKSkge1xuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gKGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NUb0FkZCkudHJpbSgpO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG4vKipcbiAqIFJlbW92ZSBhIGNsYXNzIG5hbWUgZnJvbSBhbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR9IGVsZW1lbnRcbiAqICAgICAgICAgRWxlbWVudCB0byByZW1vdmUgYSBjbGFzcyBuYW1lIGZyb20uXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBjbGFzc1RvUmVtb3ZlXG4gKiAgICAgICAgIENsYXNzIG5hbWUgdG8gcmVtb3ZlXG4gKlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqICAgICAgICAgVGhlIERPTSBlbGVtZW50IHdpdGggY2xhc3MgbmFtZSByZW1vdmVkLlxuICovXG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzVG9SZW1vdmUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzVG9SZW1vdmUpO1xuICB9IGVsc2Uge1xuICAgIHRocm93SWZXaGl0ZXNwYWNlKGNsYXNzVG9SZW1vdmUpO1xuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUuc3BsaXQoL1xccysvKS5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjICE9PSBjbGFzc1RvUmVtb3ZlO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuLyoqXG4gKiBUaGUgY2FsbGJhY2sgZGVmaW5pdGlvbiBmb3IgdG9nZ2xlQ2xhc3MuXG4gKlxuICogQGNhbGxiYWNrIG1vZHVsZTpkb21+UHJlZGljYXRlQ2FsbGJhY2tcbiAqIEBwYXJhbSAgICB7RWxlbWVudH0gZWxlbWVudFxuICogICAgICAgICAgIFRoZSBET00gZWxlbWVudCBvZiB0aGUgQ29tcG9uZW50LlxuICpcbiAqIEBwYXJhbSAgICB7c3RyaW5nfSBjbGFzc1RvVG9nZ2xlXG4gKiAgICAgICAgICAgVGhlIGBjbGFzc05hbWVgIHRoYXQgd2FudHMgdG8gYmUgdG9nZ2xlZFxuICpcbiAqIEByZXR1cm4gICB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gKiAgICAgICAgICAgSWYgYHRydWVgIGlzIHJldHVybmVkLCB0aGUgYGNsYXNzVG9Ub2dnbGVgIHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4gKiAgICAgICAgICAgYGVsZW1lbnRgLiBJZiBgZmFsc2VgLCB0aGUgYGNsYXNzVG9Ub2dnbGVgIHdpbGwgYmUgcmVtb3ZlZCBmcm9tXG4gKiAgICAgICAgICAgdGhlIGBlbGVtZW50YC4gSWYgYHVuZGVmaW5lZGAsIHRoZSBjYWxsYmFjayB3aWxsIGJlIGlnbm9yZWQuXG4gKi9cblxuLyoqXG4gKiBBZGRzIG9yIHJlbW92ZXMgYSBjbGFzcyBuYW1lIHRvL2Zyb20gYW4gZWxlbWVudCBkZXBlbmRpbmcgb24gYW4gb3B0aW9uYWxcbiAqIGNvbmRpdGlvbiBvciB0aGUgcHJlc2VuY2UvYWJzZW5jZSBvZiB0aGUgY2xhc3MgbmFtZS5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbGVtZW50XG4gKiAgICAgICAgIFRoZSBlbGVtZW50IHRvIHRvZ2dsZSBhIGNsYXNzIG5hbWUgb24uXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBjbGFzc1RvVG9nZ2xlXG4gKiAgICAgICAgIFRoZSBjbGFzcyB0aGF0IHNob3VsZCBiZSB0b2dnbGVkLlxuICpcbiAqIEBwYXJhbSAge2Jvb2xlYW58bW9kdWxlOmRvbX5QcmVkaWNhdGVDYWxsYmFja30gW3ByZWRpY2F0ZV1cbiAqICAgICAgICAgU2VlIHRoZSByZXR1cm4gdmFsdWUgZm9yIHtAbGluayBtb2R1bGU6ZG9tflByZWRpY2F0ZUNhbGxiYWNrfVxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKiAgICAgICAgIFRoZSBlbGVtZW50IHdpdGggYSBjbGFzcyB0aGF0IGhhcyBiZWVuIHRvZ2dsZWQuXG4gKi9cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoZWxlbWVudCwgY2xhc3NUb1RvZ2dsZSwgcHJlZGljYXRlKSB7XG4gIC8vIFRoaXMgQ0FOTk9UIHVzZSBgY2xhc3NMaXN0YCBpbnRlcm5hbGx5IGJlY2F1c2UgSUUxMSBkb2VzIG5vdCBzdXBwb3J0IHRoZVxuICAvLyBzZWNvbmQgcGFyYW1ldGVyIHRvIHRoZSBgY2xhc3NMaXN0LnRvZ2dsZSgpYCBtZXRob2QhIFdoaWNoIGlzIGZpbmUgYmVjYXVzZVxuICAvLyBgY2xhc3NMaXN0YCB3aWxsIGJlIHVzZWQgYnkgdGhlIGFkZC9yZW1vdmUgZnVuY3Rpb25zLlxuICB2YXIgaGFzID0gaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NUb1RvZ2dsZSk7XG5cbiAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUoZWxlbWVudCwgY2xhc3NUb1RvZ2dsZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgcHJlZGljYXRlID0gIWhhcztcbiAgfSAvLyBJZiB0aGUgbmVjZXNzYXJ5IGNsYXNzIG9wZXJhdGlvbiBtYXRjaGVzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZVxuICAvLyBlbGVtZW50LCBubyBhY3Rpb24gaXMgcmVxdWlyZWQuXG5cblxuICBpZiAocHJlZGljYXRlID09PSBoYXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocHJlZGljYXRlKSB7XG4gICAgYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NUb1RvZ2dsZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NUb1RvZ2dsZSk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cbi8qKlxuICogQXBwbHkgYXR0cmlidXRlcyB0byBhbiBIVE1MIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogICAgICAgIEVsZW1lbnQgdG8gYWRkIGF0dHJpYnV0ZXMgdG8uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFthdHRyaWJ1dGVzXVxuICogICAgICAgIEF0dHJpYnV0ZXMgdG8gYmUgYXBwbGllZC5cbiAqL1xuXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGVsLCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJOYW1lKSB7XG4gICAgdmFyIGF0dHJWYWx1ZSA9IGF0dHJpYnV0ZXNbYXR0ck5hbWVdO1xuXG4gICAgaWYgKGF0dHJWYWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgYXR0clZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBhdHRyVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJWYWx1ZSA9PT0gdHJ1ZSA/ICcnIDogYXR0clZhbHVlKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBHZXQgYW4gZWxlbWVudCdzIGF0dHJpYnV0ZSB2YWx1ZXMsIGFzIGRlZmluZWQgb24gdGhlIEhUTUwgdGFnLlxuICpcbiAqIEF0dHJpYnV0ZXMgYXJlIG5vdCB0aGUgc2FtZSBhcyBwcm9wZXJ0aWVzLiBUaGV5J3JlIGRlZmluZWQgb24gdGhlIHRhZ1xuICogb3Igd2l0aCBzZXRBdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtICB7RWxlbWVudH0gdGFnXG4gKiAgICAgICAgIEVsZW1lbnQgZnJvbSB3aGljaCB0byBnZXQgdGFnIGF0dHJpYnV0ZXMuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogICAgICAgICBBbGwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudC4gQm9vbGVhbiBhdHRyaWJ1dGVzIHdpbGwgYmUgYHRydWVgIG9yXG4gKiAgICAgICAgIGBmYWxzZWAsIG90aGVycyB3aWxsIGJlIHN0cmluZ3MuXG4gKi9cblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlcyh0YWcpIHtcbiAgdmFyIG9iaiA9IHt9OyAvLyBrbm93biBib29sZWFuIGF0dHJpYnV0ZXNcbiAgLy8gd2UgY2FuIGNoZWNrIGZvciBtYXRjaGluZyBib29sZWFuIHByb3BlcnRpZXMsIGJ1dCBub3QgYWxsIGJyb3dzZXJzXG4gIC8vIGFuZCBub3QgYWxsIHRhZ3Mga25vdyBhYm91dCB0aGVzZSBhdHRyaWJ1dGVzLCBzbywgd2Ugc3RpbGwgd2FudCB0byBjaGVjayB0aGVtIG1hbnVhbGx5XG5cbiAgdmFyIGtub3duQm9vbGVhbnMgPSAnLCcgKyAnYXV0b3BsYXksY29udHJvbHMscGxheXNpbmxpbmUsbG9vcCxtdXRlZCxkZWZhdWx0LGRlZmF1bHRNdXRlZCcgKyAnLCc7XG5cbiAgaWYgKHRhZyAmJiB0YWcuYXR0cmlidXRlcyAmJiB0YWcuYXR0cmlidXRlcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGF0dHJzID0gdGFnLmF0dHJpYnV0ZXM7XG5cbiAgICBmb3IgKHZhciBpID0gYXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhdHRyTmFtZSA9IGF0dHJzW2ldLm5hbWU7XG4gICAgICB2YXIgYXR0clZhbCA9IGF0dHJzW2ldLnZhbHVlOyAvLyBjaGVjayBmb3Iga25vd24gYm9vbGVhbnNcbiAgICAgIC8vIHRoZSBtYXRjaGluZyBlbGVtZW50IHByb3BlcnR5IHdpbGwgcmV0dXJuIGEgdmFsdWUgZm9yIHR5cGVvZlxuXG4gICAgICBpZiAodHlwZW9mIHRhZ1thdHRyTmFtZV0gPT09ICdib29sZWFuJyB8fCBrbm93bkJvb2xlYW5zLmluZGV4T2YoJywnICsgYXR0ck5hbWUgKyAnLCcpICE9PSAtMSkge1xuICAgICAgICAvLyB0aGUgdmFsdWUgb2YgYW4gaW5jbHVkZWQgYm9vbGVhbiBhdHRyaWJ1dGUgaXMgdHlwaWNhbGx5IGFuIGVtcHR5XG4gICAgICAgIC8vIHN0cmluZyAoJycpIHdoaWNoIHdvdWxkIGVxdWFsIGZhbHNlIGlmIHdlIGp1c3QgY2hlY2sgZm9yIGEgZmFsc2UgdmFsdWUuXG4gICAgICAgIC8vIHdlIGFsc28gZG9uJ3Qgd2FudCBzdXBwb3J0IGJhZCBjb2RlIGxpa2UgYXV0b3BsYXk9J2ZhbHNlJ1xuICAgICAgICBhdHRyVmFsID0gYXR0clZhbCAhPT0gbnVsbCA/IHRydWUgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgb2JqW2F0dHJOYW1lXSA9IGF0dHJWYWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBhbiBlbGVtZW50J3MgYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqICAgICAgICBBIERPTSBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAqICAgICAgICBBdHRyaWJ1dGUgdG8gZ2V0IHRoZSB2YWx1ZSBvZi5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlLlxuICovXG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShlbCwgYXR0cmlidXRlKSB7XG4gIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbn1cbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBhbiBlbGVtZW50J3MgYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqICAgICAgICBBIERPTSBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAqICAgICAgICBBdHRyaWJ1dGUgdG8gc2V0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICAgICAgIFZhbHVlIHRvIHNldCB0aGUgYXR0cmlidXRlIHRvLlxuICovXG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShlbCwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICBlbC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG59XG4vKipcbiAqIFJlbW92ZSBhbiBlbGVtZW50J3MgYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqICAgICAgICBBIERPTSBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAqICAgICAgICBBdHRyaWJ1dGUgdG8gcmVtb3ZlLlxuICovXG5cbmZ1bmN0aW9uIHJlbW92ZUF0dHJpYnV0ZShlbCwgYXR0cmlidXRlKSB7XG4gIGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xufVxuLyoqXG4gKiBBdHRlbXB0IHRvIGJsb2NrIHRoZSBhYmlsaXR5IHRvIHNlbGVjdCB0ZXh0LlxuICovXG5cbmZ1bmN0aW9uIGJsb2NrVGV4dFNlbGVjdGlvbigpIHtcbiAgZG9jdW1lbnQuYm9keS5mb2N1cygpO1xuXG4gIGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufVxuLyoqXG4gKiBUdXJuIG9mZiB0ZXh0IHNlbGVjdGlvbiBibG9ja2luZy5cbiAqL1xuXG5mdW5jdGlvbiB1bmJsb2NrVGV4dFNlbGVjdGlvbigpIHtcbiAgZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbn1cbi8qKlxuICogSWRlbnRpY2FsIHRvIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgZnVuY3Rpb24sIGJ1dCBlbnN1cmVzIHRoYXRcbiAqIHRoZSBtZXRob2QgaXMgc3VwcG9ydGVkIGF0IGFsbCAoaXQgaXMgaW4gYWxsIGJyb3dzZXJzIHdlIGNsYWltIHRvIHN1cHBvcnQpXG4gKiBhbmQgdGhhdCB0aGUgZWxlbWVudCBpcyBpbiB0aGUgRE9NIGJlZm9yZSBjb250aW51aW5nLlxuICpcbiAqIFRoaXMgd3JhcHBlciBmdW5jdGlvbiBhbHNvIHNoaW1zIHByb3BlcnRpZXMgd2hpY2ggYXJlIG5vdCBwcm92aWRlZCBieSBzb21lXG4gKiBvbGRlciBicm93c2VycyAobmFtZWx5LCBJRTgpLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgc29tZSBicm93c2VycyBkbyBub3Qgc3VwcG9ydCBhZGRpbmcgcHJvcGVydGllcyB0byBhXG4gKiBgQ2xpZW50UmVjdGAvYERPTVJlY3RgIG9iamVjdDsgc28sIHdlIHNoYWxsb3ctY29weSBpdCB3aXRoIHRoZSBzdGFuZGFyZFxuICogcHJvcGVydGllcyAoZXhjZXB0IGB4YCBhbmQgYHlgIHdoaWNoIGFyZSBub3Qgd2lkZWx5IHN1cHBvcnRlZCkuIFRoaXMgaGVscHNcbiAqIGF2b2lkIGltcGxlbWVudGF0aW9ucyB3aGVyZSBrZXlzIGFyZSBub24tZW51bWVyYWJsZS5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbFxuICogICAgICAgICBFbGVtZW50IHdob3NlIGBDbGllbnRSZWN0YCB3ZSB3YW50IHRvIGNhbGN1bGF0ZS5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R8dW5kZWZpbmVkfVxuICogICAgICAgICBBbHdheXMgcmV0dXJucyBhIHBsYWluIG9iamVjdCAtIG9yIGB1bmRlZmluZWRgIGlmIGl0IGNhbm5vdC5cbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWwpIHtcbiAgaWYgKGVsICYmIGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgWydib3R0b20nLCAnaGVpZ2h0JywgJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ3dpZHRoJ10uZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgaWYgKHJlY3Rba10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHRba10gPSByZWN0W2tdO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXN1bHQuaGVpZ2h0KSB7XG4gICAgICByZXN1bHQuaGVpZ2h0ID0gcGFyc2VGbG9hdChjb21wdXRlZFN0eWxlKGVsLCAnaGVpZ2h0JykpO1xuICAgIH1cblxuICAgIGlmICghcmVzdWx0LndpZHRoKSB7XG4gICAgICByZXN1bHQud2lkdGggPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUoZWwsICd3aWR0aCcpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHBvc2l0aW9uIG9mIGEgRE9NIGVsZW1lbnQgb24gdGhlIHBhZ2UuXG4gKlxuICogQHR5cGVkZWYgIHtPYmplY3R9IG1vZHVsZTpkb21+UG9zaXRpb25cbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGVmdFxuICogICAgICAgICAgIFBpeGVscyB0byB0aGUgbGVmdC5cbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gdG9wXG4gKiAgICAgICAgICAgUGl4ZWxzIGZyb20gdGhlIHRvcC5cbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCBpbiB0aGUgRE9NLlxuICpcbiAqIFVzZXMgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgdGVjaG5pcXVlIGZyb20gSm9obiBSZXNpZy5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9lam9obi5vcmcvYmxvZy9nZXRib3VuZGluZ2NsaWVudHJlY3QtaXMtYXdlc29tZS9cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbFxuICogICAgICAgICBFbGVtZW50IGZyb20gd2hpY2ggdG8gZ2V0IG9mZnNldC5cbiAqXG4gKiBAcmV0dXJuIHttb2R1bGU6ZG9tflBvc2l0aW9ufVxuICogICAgICAgICBUaGUgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgdGhhdCB3YXMgcGFzc2VkIGluLlxuICovXG5cbmZ1bmN0aW9uIGZpbmRQb3NpdGlvbihlbCkge1xuICBpZiAoIWVsIHx8IGVsICYmICFlbC5vZmZzZXRQYXJlbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgfVxuXG4gIHZhciB3aWR0aCA9IGVsLm9mZnNldFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0O1xuICB2YXIgbGVmdCA9IDA7XG4gIHZhciB0b3AgPSAwO1xuXG4gIGRvIHtcbiAgICBsZWZ0ICs9IGVsLm9mZnNldExlZnQ7XG4gICAgdG9wICs9IGVsLm9mZnNldFRvcDtcbiAgICBlbCA9IGVsLm9mZnNldFBhcmVudDtcbiAgfSB3aGlsZSAoZWwpO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogbGVmdCxcbiAgICB0b3A6IHRvcCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn1cbi8qKlxuICogUmVwcmVzZW50cyB4IGFuZCB5IGNvb3JkaW5hdGVzIGZvciBhIERPTSBlbGVtZW50IG9yIG1vdXNlIHBvaW50ZXIuXG4gKlxuICogQHR5cGVkZWYgIHtPYmplY3R9IG1vZHVsZTpkb21+Q29vcmRpbmF0ZXNcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0geFxuICogICAgICAgICAgIHggY29vcmRpbmF0ZSBpbiBwaXhlbHNcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0geVxuICogICAgICAgICAgIHkgY29vcmRpbmF0ZSBpbiBwaXhlbHNcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgcG9pbnRlciBwb3NpdGlvbiB3aXRoaW4gYW4gZWxlbWVudC5cbiAqXG4gKiBUaGUgYmFzZSBvbiB0aGUgY29vcmRpbmF0ZXMgYXJlIHRoZSBib3R0b20gbGVmdCBvZiB0aGUgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbFxuICogICAgICAgICBFbGVtZW50IG9uIHdoaWNoIHRvIGdldCB0aGUgcG9pbnRlciBwb3NpdGlvbiBvbi5cbiAqXG4gKiBAcGFyYW0gIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAqICAgICAgICAgRXZlbnQgb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge21vZHVsZTpkb21+Q29vcmRpbmF0ZXN9XG4gKiAgICAgICAgIEEgY29vcmRpbmF0ZXMgb2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIG1vdXNlIHBvc2l0aW9uLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBnZXRQb2ludGVyUG9zaXRpb24oZWwsIGV2ZW50KSB7XG4gIHZhciBwb3NpdGlvbiA9IHt9O1xuICB2YXIgYm94VGFyZ2V0ID0gZmluZFBvc2l0aW9uKGV2ZW50LnRhcmdldCk7XG4gIHZhciBib3ggPSBmaW5kUG9zaXRpb24oZWwpO1xuICB2YXIgYm94VyA9IGJveC53aWR0aDtcbiAgdmFyIGJveEggPSBib3guaGVpZ2h0O1xuICB2YXIgb2Zmc2V0WSA9IGV2ZW50Lm9mZnNldFkgLSAoYm94LnRvcCAtIGJveFRhcmdldC50b3ApO1xuICB2YXIgb2Zmc2V0WCA9IGV2ZW50Lm9mZnNldFggLSAoYm94LmxlZnQgLSBib3hUYXJnZXQubGVmdCk7XG5cbiAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgb2Zmc2V0WCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIC0gYm94LmxlZnQ7XG4gICAgb2Zmc2V0WSA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZICsgYm94LnRvcDtcbiAgfVxuXG4gIHBvc2l0aW9uLnkgPSAxIC0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgb2Zmc2V0WSAvIGJveEgpKTtcbiAgcG9zaXRpb24ueCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIG9mZnNldFggLyBib3hXKSk7XG4gIHJldHVybiBwb3NpdGlvbjtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcywgdmlhIGR1Y2sgdHlwaW5nLCB3aGV0aGVyIG9yIG5vdCBhIHZhbHVlIGlzIGEgdGV4dCBub2RlLlxuICpcbiAqIEBwYXJhbSAge01peGVkfSB2YWx1ZVxuICogICAgICAgICBDaGVjayBpZiB0aGlzIHZhbHVlIGlzIGEgdGV4dCBub2RlLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIFdpbGwgYmUgYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyBhIHRleHQgbm9kZSwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAzO1xufVxuLyoqXG4gKiBFbXB0aWVzIHRoZSBjb250ZW50cyBvZiBhbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR9IGVsXG4gKiAgICAgICAgIFRoZSBlbGVtZW50IHRvIGVtcHR5IGNoaWxkcmVuIGZyb21cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICogICAgICAgICBUaGUgZWxlbWVudCB3aXRoIG5vIGNoaWxkcmVuXG4gKi9cblxuZnVuY3Rpb24gZW1wdHlFbChlbCkge1xuICB3aGlsZSAoZWwuZmlyc3RDaGlsZCkge1xuICAgIGVsLnJlbW92ZUNoaWxkKGVsLmZpcnN0Q2hpbGQpO1xuICB9XG5cbiAgcmV0dXJuIGVsO1xufVxuLyoqXG4gKiBUaGlzIGlzIGEgbWl4ZWQgdmFsdWUgdGhhdCBkZXNjcmliZXMgY29udGVudCB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBET01cbiAqIHZpYSBzb21lIG1ldGhvZC4gSXQgY2FuIGJlIG9mIHRoZSBmb2xsb3dpbmcgdHlwZXM6XG4gKlxuICogVHlwZSAgICAgICB8IERlc2NyaXB0aW9uXG4gKiAtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tXG4gKiBgc3RyaW5nYCAgIHwgVGhlIHZhbHVlIHdpbGwgYmUgbm9ybWFsaXplZCBpbnRvIGEgdGV4dCBub2RlLlxuICogYEVsZW1lbnRgICB8IFRoZSB2YWx1ZSB3aWxsIGJlIGFjY2VwdGVkIGFzLWlzLlxuICogYFRleHROb2RlYCB8IFRoZSB2YWx1ZSB3aWxsIGJlIGFjY2VwdGVkIGFzLWlzLlxuICogYEFycmF5YCAgICB8IEEgb25lLWRpbWVuc2lvbmFsIGFycmF5IG9mIHN0cmluZ3MsIGVsZW1lbnRzLCB0ZXh0IG5vZGVzLCBvciBmdW5jdGlvbnMuIFRoZXNlIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGEgc3RyaW5nLCBlbGVtZW50LCBvciB0ZXh0IG5vZGUgKGFueSBvdGhlciByZXR1cm4gdmFsdWUsIGxpa2UgYW4gYXJyYXksIHdpbGwgYmUgaWdub3JlZCkuXG4gKiBgRnVuY3Rpb25gIHwgQSBmdW5jdGlvbiwgd2hpY2ggaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgc3RyaW5nLCBlbGVtZW50LCB0ZXh0IG5vZGUsIG9yIGFycmF5IC0gYW55IG9mIHRoZSBvdGhlciBwb3NzaWJsZSB2YWx1ZXMgZGVzY3JpYmVkIGFib3ZlLiBUaGlzIG1lYW5zIHRoYXQgYSBjb250ZW50IGRlc2NyaXB0b3IgY291bGQgYmUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gYXJyYXkgb2YgZnVuY3Rpb25zLCBidXQgdGhvc2Ugc2Vjb25kLWxldmVsIGZ1bmN0aW9ucyBtdXN0IHJldHVybiBzdHJpbmdzLCBlbGVtZW50cywgb3IgdGV4dCBub2Rlcy5cbiAqXG4gKiBAdHlwZWRlZiB7c3RyaW5nfEVsZW1lbnR8VGV4dE5vZGV8QXJyYXl8RnVuY3Rpb259IG1vZHVsZTpkb21+Q29udGVudERlc2NyaXB0b3JcbiAqL1xuXG4vKipcbiAqIE5vcm1hbGl6ZXMgY29udGVudCBmb3IgZXZlbnR1YWwgaW5zZXJ0aW9uIGludG8gdGhlIERPTS5cbiAqXG4gKiBUaGlzIGFsbG93cyBhIHdpZGUgcmFuZ2Ugb2YgY29udGVudCBkZWZpbml0aW9uIG1ldGhvZHMsIGJ1dCBoZWxwcyBwcm90ZWN0XG4gKiBmcm9tIGZhbGxpbmcgaW50byB0aGUgdHJhcCBvZiBzaW1wbHkgd3JpdGluZyB0byBgaW5uZXJIVE1MYCwgd2hpY2ggY291bGRcbiAqIGJlIGFuIFhTUyBjb25jZXJuLlxuICpcbiAqIFRoZSBjb250ZW50IGZvciBhbiBlbGVtZW50IGNhbiBiZSBwYXNzZWQgaW4gbXVsdGlwbGUgdHlwZXMgYW5kXG4gKiBjb21iaW5hdGlvbnMsIHdob3NlIGJlaGF2aW9yIGlzIGFzIGZvbGxvd3M6XG4gKlxuICogQHBhcmFtIHttb2R1bGU6ZG9tfkNvbnRlbnREZXNjcmlwdG9yfSBjb250ZW50XG4gKiAgICAgICAgQSBjb250ZW50IGRlc2NyaXB0b3IgdmFsdWUuXG4gKlxuICogQHJldHVybiB7QXJyYXl9XG4gKiAgICAgICAgIEFsbCBvZiB0aGUgY29udGVudCB0aGF0IHdhcyBwYXNzZWQgaW4sIG5vcm1hbGl6ZWQgdG8gYW4gYXJyYXkgb2ZcbiAqICAgICAgICAgZWxlbWVudHMgb3IgdGV4dCBub2Rlcy5cbiAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVDb250ZW50KGNvbnRlbnQpIHtcbiAgLy8gRmlyc3QsIGludm9rZSBjb250ZW50IGlmIGl0IGlzIGEgZnVuY3Rpb24uIElmIGl0IHByb2R1Y2VzIGFuIGFycmF5LFxuICAvLyB0aGF0IG5lZWRzIHRvIGhhcHBlbiBiZWZvcmUgbm9ybWFsaXphdGlvbi5cbiAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQoKTtcbiAgfSAvLyBOZXh0IHVwLCBub3JtYWxpemUgdG8gYW4gYXJyYXksIHNvIG9uZSBvciBtYW55IGl0ZW1zIGNhbiBiZSBub3JtYWxpemVkLFxuICAvLyBmaWx0ZXJlZCwgYW5kIHJldHVybmVkLlxuXG5cbiAgcmV0dXJuIChBcnJheS5pc0FycmF5KGNvbnRlbnQpID8gY29udGVudCA6IFtjb250ZW50XSkubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIEZpcnN0LCBpbnZva2UgdmFsdWUgaWYgaXQgaXMgYSBmdW5jdGlvbiB0byBwcm9kdWNlIGEgbmV3IHZhbHVlLFxuICAgIC8vIHdoaWNoIHdpbGwgYmUgc3Vic2VxdWVudGx5IG5vcm1hbGl6ZWQgdG8gYSBOb2RlIG9mIHNvbWUga2luZC5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlKCk7XG4gICAgfVxuXG4gICAgaWYgKGlzRWwodmFsdWUpIHx8IGlzVGV4dE5vZGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgL1xcUy8udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSk7XG4gICAgfVxuICB9KS5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KTtcbn1cbi8qKlxuICogTm9ybWFsaXplcyBhbmQgYXBwZW5kcyBjb250ZW50IHRvIGFuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtICB7RWxlbWVudH0gZWxcbiAqICAgICAgICAgRWxlbWVudCB0byBhcHBlbmQgbm9ybWFsaXplZCBjb250ZW50IHRvLlxuICpcbiAqIEBwYXJhbSB7bW9kdWxlOmRvbX5Db250ZW50RGVzY3JpcHRvcn0gY29udGVudFxuICogICAgICAgIEEgY29udGVudCBkZXNjcmlwdG9yIHZhbHVlLlxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKiAgICAgICAgIFRoZSBlbGVtZW50IHdpdGggYXBwZW5kZWQgbm9ybWFsaXplZCBjb250ZW50LlxuICovXG5cbmZ1bmN0aW9uIGFwcGVuZENvbnRlbnQoZWwsIGNvbnRlbnQpIHtcbiAgbm9ybWFsaXplQ29udGVudChjb250ZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGVsLmFwcGVuZENoaWxkKG5vZGUpO1xuICB9KTtcbiAgcmV0dXJuIGVsO1xufVxuLyoqXG4gKiBOb3JtYWxpemVzIGFuZCBpbnNlcnRzIGNvbnRlbnQgaW50byBhbiBlbGVtZW50OyB0aGlzIGlzIGlkZW50aWNhbCB0b1xuICogYGFwcGVuZENvbnRlbnQoKWAsIGV4Y2VwdCBpdCBlbXB0aWVzIHRoZSBlbGVtZW50IGZpcnN0LlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqICAgICAgICBFbGVtZW50IHRvIGluc2VydCBub3JtYWxpemVkIGNvbnRlbnQgaW50by5cbiAqXG4gKiBAcGFyYW0ge21vZHVsZTpkb21+Q29udGVudERlc2NyaXB0b3J9IGNvbnRlbnRcbiAqICAgICAgICBBIGNvbnRlbnQgZGVzY3JpcHRvciB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICogICAgICAgICBUaGUgZWxlbWVudCB3aXRoIGluc2VydGVkIG5vcm1hbGl6ZWQgY29udGVudC5cbiAqL1xuXG5mdW5jdGlvbiBpbnNlcnRDb250ZW50KGVsLCBjb250ZW50KSB7XG4gIHJldHVybiBhcHBlbmRDb250ZW50KGVtcHR5RWwoZWwpLCBjb250ZW50KTtcbn1cbi8qKlxuICogQ2hlY2sgaWYgYW4gZXZlbnQgd2FzIGEgc2luZ2xlIGxlZnQgY2xpY2suXG4gKlxuICogQHBhcmFtICB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gKiAgICAgICAgIEV2ZW50IG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBXaWxsIGJlIGB0cnVlYCBpZiBhIHNpbmdsZSBsZWZ0IGNsaWNrLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuXG5mdW5jdGlvbiBpc1NpbmdsZUxlZnRDbGljayhldmVudCkge1xuICAvLyBOb3RlOiBpZiB5b3UgY3JlYXRlIHNvbWV0aGluZyBkcmFnZ2FibGUsIGJlIHN1cmUgdG9cbiAgLy8gY2FsbCBpdCBvbiBib3RoIGBtb3VzZWRvd25gIGFuZCBgbW91c2Vtb3ZlYCBldmVudCxcbiAgLy8gb3RoZXJ3aXNlIGBtb3VzZWRvd25gIHNob3VsZCBiZSBlbm91Z2ggZm9yIGEgYnV0dG9uXG4gIGlmIChldmVudC5idXR0b24gPT09IHVuZGVmaW5lZCAmJiBldmVudC5idXR0b25zID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBXaHkgZG8gd2UgbmVlZCBgYnV0dG9uc2AgP1xuICAgIC8vIEJlY2F1c2UsIG1pZGRsZSBtb3VzZSBzb21ldGltZXMgaGF2ZSB0aGlzOlxuICAgIC8vIGUuYnV0dG9uID09PSAwIGFuZCBlLmJ1dHRvbnMgPT09IDRcbiAgICAvLyBGdXJ0aGVybW9yZSwgd2Ugd2FudCB0byBwcmV2ZW50IGNvbWJpbmF0aW9uIGNsaWNrLCBzb21ldGhpbmcgbGlrZVxuICAgIC8vIEhPTEQgbWlkZGxlbW91c2UgdGhlbiBsZWZ0IGNsaWNrLCB0aGF0IHdvdWxkIGJlXG4gICAgLy8gZS5idXR0b24gPT09IDAsIGUuYnV0dG9ucyA9PT0gNVxuICAgIC8vIGp1c3QgYGJ1dHRvbmAgaXMgbm90IGdvbm5hIHdvcmtcbiAgICAvLyBBbHJpZ2h0LCB0aGVuIHdoYXQgdGhpcyBibG9jayBkb2VzID9cbiAgICAvLyB0aGlzIGlzIGZvciBjaHJvbWUgYHNpbXVsYXRlIG1vYmlsZSBkZXZpY2VzYFxuICAgIC8vIEkgd2FudCB0byBzdXBwb3J0IHRoaXMgYXMgd2VsbFxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiBldmVudC5idXR0b25zID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBUb3VjaCBzY3JlZW4sIHNvbWV0aW1lcyBvbiBzb21lIHNwZWNpZmljIGRldmljZSwgYGJ1dHRvbnNgXG4gICAgLy8gZG9lc24ndCBoYXZlIGFueXRoaW5nIChzYWZhcmkgb24gaW9zLCBibGFja2JlcnJ5Li4uKVxuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIGBtb3VzZXVwYCBldmVudCBvbiBhIHNpbmdsZSBsZWZ0IGNsaWNrIGhhc1xuICAvLyBgYnV0dG9uYCBhbmQgYGJ1dHRvbnNgIGVxdWFsIHRvIDBcblxuXG4gIGlmIChldmVudC50eXBlID09PSAnbW91c2V1cCcgJiYgZXZlbnQuYnV0dG9uID09PSAwICYmIGV2ZW50LmJ1dHRvbnMgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChldmVudC5idXR0b24gIT09IDAgfHwgZXZlbnQuYnV0dG9ucyAhPT0gMSkge1xuICAgIC8vIFRoaXMgaXMgdGhlIHJlYXNvbiB3ZSBoYXZlIHRob3NlIGlmIGVsc2UgYmxvY2sgYWJvdmVcbiAgICAvLyBpZiBhbnkgc3BlY2lhbCBjYXNlIHdlIGNhbiBjYXRjaCBhbmQgbGV0IGl0IHNsaWRlXG4gICAgLy8gd2UgZG8gaXQgYWJvdmUsIHdoZW4gZ2V0IHRvIGhlcmUsIHRoaXMgZGVmaW5pdGVseVxuICAgIC8vIGlzLW5vdC1sZWZ0LWNsaWNrXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIEZpbmRzIGEgc2luZ2xlIERPTSBlbGVtZW50IG1hdGNoaW5nIGBzZWxlY3RvcmAgd2l0aGluIHRoZSBvcHRpb25hbFxuICogYGNvbnRleHRgIG9mIGFub3RoZXIgRE9NIGVsZW1lbnQgKGRlZmF1bHRpbmcgdG8gYGRvY3VtZW50YCkuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzZWxlY3RvclxuICogICAgICAgICBBIHZhbGlkIENTUyBzZWxlY3Rvciwgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gYHF1ZXJ5U2VsZWN0b3JgLlxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR8U3RyaW5nfSBbY29udGV4dD1kb2N1bWVudF1cbiAqICAgICAgICAgQSBET00gZWxlbWVudCB3aXRoaW4gd2hpY2ggdG8gcXVlcnkuIENhbiBhbHNvIGJlIGEgc2VsZWN0b3JcbiAqICAgICAgICAgc3RyaW5nIGluIHdoaWNoIGNhc2UgdGhlIGZpcnN0IG1hdGNoaW5nIGVsZW1lbnQgd2lsbCBiZSB1c2VkXG4gKiAgICAgICAgIGFzIGNvbnRleHQuIElmIG1pc3NpbmcgKG9yIG5vIGVsZW1lbnQgbWF0Y2hlcyBzZWxlY3RvciksIGZhbGxzXG4gKiAgICAgICAgIGJhY2sgdG8gYGRvY3VtZW50YC5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fG51bGx9XG4gKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGZvdW5kIG9yIG51bGwuXG4gKi9cblxudmFyICQgPSBjcmVhdGVRdWVyaWVyKCdxdWVyeVNlbGVjdG9yJyk7XG4vKipcbiAqIEZpbmRzIGEgYWxsIERPTSBlbGVtZW50cyBtYXRjaGluZyBgc2VsZWN0b3JgIHdpdGhpbiB0aGUgb3B0aW9uYWxcbiAqIGBjb250ZXh0YCBvZiBhbm90aGVyIERPTSBlbGVtZW50IChkZWZhdWx0aW5nIHRvIGBkb2N1bWVudGApLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc2VsZWN0b3JcbiAqICAgICAgICAgQSB2YWxpZCBDU1Mgc2VsZWN0b3IsIHdoaWNoIHdpbGwgYmUgcGFzc2VkIHRvIGBxdWVyeVNlbGVjdG9yQWxsYC5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fFN0cmluZ30gW2NvbnRleHQ9ZG9jdW1lbnRdXG4gKiAgICAgICAgIEEgRE9NIGVsZW1lbnQgd2l0aGluIHdoaWNoIHRvIHF1ZXJ5LiBDYW4gYWxzbyBiZSBhIHNlbGVjdG9yXG4gKiAgICAgICAgIHN0cmluZyBpbiB3aGljaCBjYXNlIHRoZSBmaXJzdCBtYXRjaGluZyBlbGVtZW50IHdpbGwgYmUgdXNlZFxuICogICAgICAgICBhcyBjb250ZXh0LiBJZiBtaXNzaW5nIChvciBubyBlbGVtZW50IG1hdGNoZXMgc2VsZWN0b3IpLCBmYWxsc1xuICogICAgICAgICBiYWNrIHRvIGBkb2N1bWVudGAuXG4gKlxuICogQHJldHVybiB7Tm9kZUxpc3R9XG4gKiAgICAgICAgIEEgZWxlbWVudCBsaXN0IG9mIGVsZW1lbnRzIHRoYXQgd2VyZSBmb3VuZC4gV2lsbCBiZSBlbXB0eSBpZiBub25lXG4gKiAgICAgICAgIHdlcmUgZm91bmQuXG4gKlxuICovXG5cbnZhciAkJCA9IGNyZWF0ZVF1ZXJpZXIoJ3F1ZXJ5U2VsZWN0b3JBbGwnKTtcblxudmFyIERvbSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBpc1JlYWw6IGlzUmVhbCxcbiAgaXNFbDogaXNFbCxcbiAgaXNJbkZyYW1lOiBpc0luRnJhbWUsXG4gIGNyZWF0ZUVsOiBjcmVhdGVFbCxcbiAgdGV4dENvbnRlbnQ6IHRleHRDb250ZW50LFxuICBwcmVwZW5kVG86IHByZXBlbmRUbyxcbiAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxuICBhZGRDbGFzczogYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcyxcbiAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuICBzZXRBdHRyaWJ1dGVzOiBzZXRBdHRyaWJ1dGVzLFxuICBnZXRBdHRyaWJ1dGVzOiBnZXRBdHRyaWJ1dGVzLFxuICBnZXRBdHRyaWJ1dGU6IGdldEF0dHJpYnV0ZSxcbiAgc2V0QXR0cmlidXRlOiBzZXRBdHRyaWJ1dGUsXG4gIHJlbW92ZUF0dHJpYnV0ZTogcmVtb3ZlQXR0cmlidXRlLFxuICBibG9ja1RleHRTZWxlY3Rpb246IGJsb2NrVGV4dFNlbGVjdGlvbixcbiAgdW5ibG9ja1RleHRTZWxlY3Rpb246IHVuYmxvY2tUZXh0U2VsZWN0aW9uLFxuICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IGdldEJvdW5kaW5nQ2xpZW50UmVjdCxcbiAgZmluZFBvc2l0aW9uOiBmaW5kUG9zaXRpb24sXG4gIGdldFBvaW50ZXJQb3NpdGlvbjogZ2V0UG9pbnRlclBvc2l0aW9uLFxuICBpc1RleHROb2RlOiBpc1RleHROb2RlLFxuICBlbXB0eUVsOiBlbXB0eUVsLFxuICBub3JtYWxpemVDb250ZW50OiBub3JtYWxpemVDb250ZW50LFxuICBhcHBlbmRDb250ZW50OiBhcHBlbmRDb250ZW50LFxuICBpbnNlcnRDb250ZW50OiBpbnNlcnRDb250ZW50LFxuICBpc1NpbmdsZUxlZnRDbGljazogaXNTaW5nbGVMZWZ0Q2xpY2ssXG4gICQ6ICQsXG4gICQkOiAkJFxufSk7XG5cbi8qKlxuICogQGZpbGUgc2V0dXAuanMgLSBGdW5jdGlvbnMgZm9yIHNldHRpbmcgdXAgYSBwbGF5ZXIgd2l0aG91dFxuICogdXNlciBpbnRlcmFjdGlvbiBiYXNlZCBvbiB0aGUgZGF0YS1zZXR1cCBgYXR0cmlidXRlYCBvZiB0aGUgdmlkZW8gdGFnLlxuICpcbiAqIEBtb2R1bGUgc2V0dXBcbiAqL1xudmFyIF93aW5kb3dMb2FkZWQgPSBmYWxzZTtcbnZhciB2aWRlb2pzO1xuLyoqXG4gKiBTZXQgdXAgYW55IHRhZ3MgdGhhdCBoYXZlIGEgZGF0YS1zZXR1cCBgYXR0cmlidXRlYCB3aGVuIHRoZSBwbGF5ZXIgaXMgc3RhcnRlZC5cbiAqL1xuXG52YXIgYXV0b1NldHVwID0gZnVuY3Rpb24gYXV0b1NldHVwKCkge1xuICAvLyBQcm90ZWN0IGFnYWluc3QgYnJlYWthZ2UgaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGFuZCBjaGVjayBnbG9iYWwgYXV0b1NldHVwIG9wdGlvbi5cbiAgaWYgKCFpc1JlYWwoKSB8fCB2aWRlb2pzLm9wdGlvbnMuYXV0b1NldHVwID09PSBmYWxzZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB2aWRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3ZpZGVvJykpO1xuICB2YXIgYXVkaW9zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2F1ZGlvJykpO1xuICB2YXIgZGl2cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd2aWRlby1qcycpKTtcbiAgdmFyIG1lZGlhRWxzID0gdmlkcy5jb25jYXQoYXVkaW9zLCBkaXZzKTsgLy8gQ2hlY2sgaWYgYW55IG1lZGlhIGVsZW1lbnRzIGV4aXN0XG5cbiAgaWYgKG1lZGlhRWxzICYmIG1lZGlhRWxzLmxlbmd0aCA+IDApIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZSA9IG1lZGlhRWxzLmxlbmd0aDsgaSA8IGU7IGkrKykge1xuICAgICAgdmFyIG1lZGlhRWwgPSBtZWRpYUVsc1tpXTsgLy8gQ2hlY2sgaWYgZWxlbWVudCBleGlzdHMsIGhhcyBnZXRBdHRyaWJ1dGUgZnVuYy5cblxuICAgICAgaWYgKG1lZGlhRWwgJiYgbWVkaWFFbC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoaXMgcGxheWVyIGhhc24ndCBhbHJlYWR5IGJlZW4gc2V0IHVwLlxuICAgICAgICBpZiAobWVkaWFFbC5wbGF5ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBvcHRpb25zID0gbWVkaWFFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2V0dXAnKTsgLy8gQ2hlY2sgaWYgZGF0YS1zZXR1cCBhdHRyIGV4aXN0cy5cbiAgICAgICAgICAvLyBXZSBvbmx5IGF1dG8tc2V0dXAgaWYgdGhleSd2ZSBhZGRlZCB0aGUgZGF0YS1zZXR1cCBhdHRyLlxuXG4gICAgICAgICAgaWYgKG9wdGlvbnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgdmlkZW8uanMgaW5zdGFuY2UuXG4gICAgICAgICAgICB2aWRlb2pzKG1lZGlhRWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBJZiBnZXRBdHRyaWJ1dGUgaXNuJ3QgZGVmaW5lZCwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgRE9NLlxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdXRvU2V0dXBUaW1lb3V0KDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IC8vIE5vIHZpZGVvcyB3ZXJlIGZvdW5kLCBzbyBrZWVwIGxvb3BpbmcgdW5sZXNzIHBhZ2UgaXMgZmluaXNoZWQgbG9hZGluZy5cblxuICB9IGVsc2UgaWYgKCFfd2luZG93TG9hZGVkKSB7XG4gICAgYXV0b1NldHVwVGltZW91dCgxKTtcbiAgfVxufTtcbi8qKlxuICogV2FpdCB1bnRpbCB0aGUgcGFnZSBpcyBsb2FkZWQgYmVmb3JlIHJ1bm5pbmcgYXV0b1NldHVwLiBUaGlzIHdpbGwgYmUgY2FsbGVkIGluXG4gKiBhdXRvU2V0dXAgaWYgYGhhc0xvYWRlZGAgcmV0dXJucyBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gd2FpdFxuICogICAgICAgIEhvdyBsb25nIHRvIHdhaXQgaW4gbXNcbiAqXG4gKiBAcGFyYW0ge21vZHVsZTp2aWRlb2pzfSBbdmpzXVxuICogICAgICAgIFRoZSB2aWRlb2pzIGxpYnJhcnkgZnVuY3Rpb25cbiAqL1xuXG5cbmZ1bmN0aW9uIGF1dG9TZXR1cFRpbWVvdXQod2FpdCwgdmpzKSB7XG4gIGlmICh2anMpIHtcbiAgICB2aWRlb2pzID0gdmpzO1xuICB9XG5cbiAgd2luZG93JDEuc2V0VGltZW91dChhdXRvU2V0dXAsIHdhaXQpO1xufVxuLyoqXG4gKiBVc2VkIHRvIHNldCB0aGUgaW50ZXJuYWwgdHJhY2tpbmcgb2Ygd2luZG93IGxvYWRlZCBzdGF0ZSB0byB0cnVlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRXaW5kb3dMb2FkZWQoKSB7XG4gIF93aW5kb3dMb2FkZWQgPSB0cnVlO1xuICB3aW5kb3ckMS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgc2V0V2luZG93TG9hZGVkKTtcbn1cblxuaWYgKGlzUmVhbCgpKSB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgc2V0V2luZG93TG9hZGVkKCk7XG4gIH0gZWxzZSB7XG4gICAgLyoqXG4gICAgICogTGlzdGVuIGZvciB0aGUgbG9hZCBldmVudCBvbiB3aW5kb3csIGFuZCBzZXQgX3dpbmRvd0xvYWRlZCB0byB0cnVlLlxuICAgICAqXG4gICAgICogV2UgdXNlIGEgc3RhbmRhcmQgZXZlbnQgbGlzdGVuZXIgaGVyZSB0byBhdm9pZCBpbmNyZW1lbnRpbmcgdGhlIEdVSURcbiAgICAgKiBiZWZvcmUgYW55IHBsYXllcnMgYXJlIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAbGlzdGVucyBsb2FkXG4gICAgICovXG4gICAgd2luZG93JDEuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHNldFdpbmRvd0xvYWRlZCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAZmlsZSBzdHlsZXNoZWV0LmpzXG4gKiBAbW9kdWxlIHN0eWxlc2hlZXRcbiAqL1xuLyoqXG4gKiBDcmVhdGUgYSBET00gc3lsZSBlbGVtZW50IGdpdmVuIGEgY2xhc3NOYW1lIGZvciBpdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG4gKiAgICAgICAgVGhlIGNsYXNzTmFtZSB0byBhZGQgdG8gdGhlIGNyZWF0ZWQgc3R5bGUgZWxlbWVudC5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICovXG5cbnZhciBjcmVhdGVTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQoY2xhc3NOYW1lKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgcmV0dXJuIHN0eWxlO1xufTtcbi8qKlxuICogQWRkIHRleHQgdG8gYSBET00gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiAgICAgICAgVGhlIEVsZW1lbnQgdG8gYWRkIHRleHQgY29udGVudCB0by5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogICAgICAgIFRoZSB0ZXh0IHRvIGFkZCB0byB0aGUgZWxlbWVudC5cbiAqL1xuXG52YXIgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbiBzZXRUZXh0Q29udGVudChlbCwgY29udGVudCkge1xuICBpZiAoZWwuc3R5bGVTaGVldCkge1xuICAgIGVsLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNvbnRlbnQ7XG4gIH0gZWxzZSB7XG4gICAgZWwudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICB9XG59O1xuXG4vKipcbiAqIEBmaWxlIGd1aWQuanNcbiAqIEBtb2R1bGUgZ3VpZFxuICovXG4vLyBEZWZhdWx0IHZhbHVlIGZvciBHVUlEcy4gVGhpcyBhbGxvd3MgdXMgdG8gcmVzZXQgdGhlIEdVSUQgY291bnRlciBpbiB0ZXN0cy5cbi8vXG4vLyBUaGUgaW5pdGlhbCBHVUlEIGlzIDMgYmVjYXVzZSBzb21lIHVzZXJzIGhhdmUgY29tZSB0byByZWx5IG9uIHRoZSBmaXJzdFxuLy8gZGVmYXVsdCBwbGF5ZXIgSUQgZW5kaW5nIHVwIGFzIGB2anNfdmlkZW9fM2AuXG4vL1xuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy92aWRlby5qcy9wdWxsLzYyMTZcbnZhciBfaW5pdGlhbEd1aWQgPSAzO1xuLyoqXG4gKiBVbmlxdWUgSUQgZm9yIGFuIGVsZW1lbnQgb3IgZnVuY3Rpb25cbiAqXG4gKiBAdHlwZSB7TnVtYmVyfVxuICovXG5cbnZhciBfZ3VpZCA9IF9pbml0aWFsR3VpZDtcbi8qKlxuICogR2V0IGEgdW5pcXVlIGF1dG8taW5jcmVtZW50aW5nIElEIGJ5IG51bWJlciB0aGF0IGhhcyBub3QgYmVlbiByZXR1cm5lZCBiZWZvcmUuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBBIG5ldyB1bmlxdWUgSUQuXG4gKi9cblxuZnVuY3Rpb24gbmV3R1VJRCgpIHtcbiAgcmV0dXJuIF9ndWlkKys7XG59XG5cbi8qKlxuICogQGZpbGUgZG9tLWRhdGEuanNcbiAqIEBtb2R1bGUgZG9tLWRhdGFcbiAqL1xudmFyIEZha2VXZWFrTWFwO1xuXG5pZiAoIXdpbmRvdyQxLldlYWtNYXApIHtcbiAgRmFrZVdlYWtNYXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZha2VXZWFrTWFwKCkge1xuICAgICAgdGhpcy52ZGF0YSA9ICd2ZGF0YScgKyBNYXRoLmZsb29yKHdpbmRvdyQxLnBlcmZvcm1hbmNlICYmIHdpbmRvdyQxLnBlcmZvcm1hbmNlLm5vdygpIHx8IERhdGUubm93KCkpO1xuICAgICAgdGhpcy5kYXRhID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IEZha2VXZWFrTWFwLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5zZXQgPSBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGFjY2VzcyA9IGtleVt0aGlzLnZkYXRhXSB8fCBuZXdHVUlEKCk7XG5cbiAgICAgIGlmICgha2V5W3RoaXMudmRhdGFdKSB7XG4gICAgICAgIGtleVt0aGlzLnZkYXRhXSA9IGFjY2VzcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5kYXRhW2FjY2Vzc10gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgdmFyIGFjY2VzcyA9IGtleVt0aGlzLnZkYXRhXTsgLy8gd2UgaGF2ZSBkYXRhLCByZXR1cm4gaXRcblxuICAgICAgaWYgKGFjY2Vzcykge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW2FjY2Vzc107XG4gICAgICB9IC8vIHdlIGRvbid0IGhhdmUgZGF0YSwgcmV0dXJuIG5vdGhpbmcuXG4gICAgICAvLyByZXR1cm4gdW5kZWZpbmVkIGV4cGxpY2l0bHkgYXMgdGhhdCdzIHRoZSBjb250cmFjdCBmb3IgdGhpcyBtZXRob2RcblxuXG4gICAgICBsb2coJ1dlIGhhdmUgbm8gZGF0YSBmb3IgdGhpcyBlbGVtZW50Jywga2V5KTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIF9wcm90by5oYXMgPSBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICB2YXIgYWNjZXNzID0ga2V5W3RoaXMudmRhdGFdO1xuICAgICAgcmV0dXJuIGFjY2VzcyBpbiB0aGlzLmRhdGE7XG4gICAgfTtcblxuICAgIF9wcm90b1tcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uIF9kZWxldGUoa2V5KSB7XG4gICAgICB2YXIgYWNjZXNzID0ga2V5W3RoaXMudmRhdGFdO1xuXG4gICAgICBpZiAoYWNjZXNzKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmRhdGFbYWNjZXNzXTtcbiAgICAgICAgZGVsZXRlIGtleVt0aGlzLnZkYXRhXTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEZha2VXZWFrTWFwO1xuICB9KCk7XG59XG4vKipcbiAqIEVsZW1lbnQgRGF0YSBTdG9yZS5cbiAqXG4gKiBBbGxvd3MgZm9yIGJpbmRpbmcgZGF0YSB0byBhbiBlbGVtZW50IHdpdGhvdXQgcHV0dGluZyBpdCBkaXJlY3RseSBvbiB0aGVcbiAqIGVsZW1lbnQuIEV4LiBFdmVudCBsaXN0ZW5lcnMgYXJlIHN0b3JlZCBoZXJlLlxuICogKGFsc28gZnJvbSBqc25pbmphLmNvbSwgc2xpZ2h0bHkgbW9kaWZpZWQgYW5kIHVwZGF0ZWQgZm9yIGNsb3N1cmUgY29tcGlsZXIpXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgRG9tRGF0YSA9IHdpbmRvdyQxLldlYWtNYXAgPyBuZXcgV2Vha01hcCgpIDogbmV3IEZha2VXZWFrTWFwKCk7XG5cbi8qKlxuICogQGZpbGUgZXZlbnRzLmpzLiBBbiBFdmVudCBTeXN0ZW0gKEpvaG4gUmVzaWcgLSBTZWNyZXRzIG9mIGEgSlMgTmluamEgaHR0cDovL2pzbmluamEuY29tLylcbiAqIChPcmlnaW5hbCBib29rIHZlcnNpb24gd2Fzbid0IGNvbXBsZXRlbHkgdXNhYmxlLCBzbyBmaXhlZCBzb21lIHRoaW5ncyBhbmQgbWFkZSBDbG9zdXJlIENvbXBpbGVyIGNvbXBhdGlibGUpXG4gKiBUaGlzIHNob3VsZCB3b3JrIHZlcnkgc2ltaWxhcmx5IHRvIGpRdWVyeSdzIGV2ZW50cywgaG93ZXZlciBpdCdzIGJhc2VkIG9mZiB0aGUgYm9vayB2ZXJzaW9uIHdoaWNoIGlzbid0IGFzXG4gKiByb2J1c3QgYXMganF1ZXJ5J3MsIHNvIHRoZXJlJ3MgcHJvYmFibHkgc29tZSBkaWZmZXJlbmNlcy5cbiAqXG4gKiBAZmlsZSBldmVudHMuanNcbiAqIEBtb2R1bGUgZXZlbnRzXG4gKi9cbi8qKlxuICogQ2xlYW4gdXAgdGhlIGxpc3RlbmVyIGNhY2hlIGFuZCBkaXNwYXRjaGVyc1xuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW1cbiAqICAgICAgICBFbGVtZW50IHRvIGNsZWFuIHVwXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqICAgICAgICBUeXBlIG9mIGV2ZW50IHRvIGNsZWFuIHVwXG4gKi9cblxuZnVuY3Rpb24gX2NsZWFuVXBFdmVudHMoZWxlbSwgdHlwZSkge1xuICBpZiAoIURvbURhdGEuaGFzKGVsZW0pKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBEb21EYXRhLmdldChlbGVtKTsgLy8gUmVtb3ZlIHRoZSBldmVudHMgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaWYgdGhlcmUgYXJlIG5vbmUgbGVmdFxuXG4gIGlmIChkYXRhLmhhbmRsZXJzW3R5cGVdLmxlbmd0aCA9PT0gMCkge1xuICAgIGRlbGV0ZSBkYXRhLmhhbmRsZXJzW3R5cGVdOyAvLyBkYXRhLmhhbmRsZXJzW3R5cGVdID0gbnVsbDtcbiAgICAvLyBTZXR0aW5nIHRvIG51bGwgd2FzIGNhdXNpbmcgYW4gZXJyb3Igd2l0aCBkYXRhLmhhbmRsZXJzXG4gICAgLy8gUmVtb3ZlIHRoZSBtZXRhLWhhbmRsZXIgZnJvbSB0aGUgZWxlbWVudFxuXG4gICAgaWYgKGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGRhdGEuZGlzcGF0Y2hlciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZWxlbS5kZXRhY2hFdmVudCkge1xuICAgICAgZWxlbS5kZXRhY2hFdmVudCgnb24nICsgdHlwZSwgZGF0YS5kaXNwYXRjaGVyKTtcbiAgICB9XG4gIH0gLy8gUmVtb3ZlIHRoZSBldmVudHMgb2JqZWN0IGlmIHRoZXJlIGFyZSBubyB0eXBlcyBsZWZ0XG5cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGF0YS5oYW5kbGVycykubGVuZ3RoIDw9IDApIHtcbiAgICBkZWxldGUgZGF0YS5oYW5kbGVycztcbiAgICBkZWxldGUgZGF0YS5kaXNwYXRjaGVyO1xuICAgIGRlbGV0ZSBkYXRhLmRpc2FibGVkO1xuICB9IC8vIEZpbmFsbHkgcmVtb3ZlIHRoZSBlbGVtZW50IGRhdGEgaWYgdGhlcmUgaXMgbm8gZGF0YSBsZWZ0XG5cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGF0YSkubGVuZ3RoID09PSAwKSB7XG4gICAgRG9tRGF0YVtcImRlbGV0ZVwiXShlbGVtKTtcbiAgfVxufVxuLyoqXG4gKiBMb29wcyB0aHJvdWdoIGFuIGFycmF5IG9mIGV2ZW50IHR5cGVzIGFuZCBjYWxscyB0aGUgcmVxdWVzdGVkIG1ldGhvZCBmb3IgZWFjaCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiAgICAgICAgVGhlIGV2ZW50IG1ldGhvZCB3ZSB3YW50IHRvIHVzZS5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtXG4gKiAgICAgICAgRWxlbWVudCBvciBvYmplY3QgdG8gYmluZCBsaXN0ZW5lcnMgdG9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogICAgICAgIFR5cGUgb2YgZXZlbnQgdG8gYmluZCB0by5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50TGlzdGVuZXJ9IGNhbGxiYWNrXG4gKiAgICAgICAgRXZlbnQgbGlzdGVuZXIuXG4gKi9cblxuXG5mdW5jdGlvbiBfaGFuZGxlTXVsdGlwbGVFdmVudHMoZm4sIGVsZW0sIHR5cGVzLCBjYWxsYmFjaykge1xuICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgLy8gQ2FsbCB0aGUgZXZlbnQgbWV0aG9kIGZvciBlYWNoIG9uZSBvZiB0aGUgdHlwZXNcbiAgICBmbihlbGVtLCB0eXBlLCBjYWxsYmFjayk7XG4gIH0pO1xufVxuLyoqXG4gKiBGaXggYSBuYXRpdmUgZXZlbnQgdG8gaGF2ZSBzdGFuZGFyZCBwcm9wZXJ0eSB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAqICAgICAgICBFdmVudCBvYmplY3QgdG8gZml4LlxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgRml4ZWQgZXZlbnQgb2JqZWN0LlxuICovXG5cblxuZnVuY3Rpb24gZml4RXZlbnQoZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmZpeGVkXykge1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gVGVzdCBpZiBmaXhpbmcgdXAgaXMgbmVlZGVkXG4gIC8vIFVzZWQgdG8gY2hlY2sgaWYgIWV2ZW50LnN0b3BQcm9wYWdhdGlvbiBpbnN0ZWFkIG9mIGlzUHJvcGFnYXRpb25TdG9wcGVkXG4gIC8vIEJ1dCBuYXRpdmUgZXZlbnRzIHJldHVybiB0cnVlIGZvciBzdG9wUHJvcGFnYXRpb24sIGJ1dCBkb24ndCBoYXZlXG4gIC8vIG90aGVyIGV4cGVjdGVkIG1ldGhvZHMgbGlrZSBpc1Byb3BhZ2F0aW9uU3RvcHBlZC4gU2VlbXMgdG8gYmUgYSBwcm9ibGVtXG4gIC8vIHdpdGggdGhlIEphdmFzY3JpcHQgTmluamEgY29kZS4gU28gd2UncmUganVzdCBvdmVycmlkaW5nIGFsbCBldmVudHMgbm93LlxuXG5cbiAgaWYgKCFldmVudCB8fCAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQpIHtcbiAgICB2YXIgb2xkID0gZXZlbnQgfHwgd2luZG93JDEuZXZlbnQ7XG4gICAgZXZlbnQgPSB7fTsgLy8gQ2xvbmUgdGhlIG9sZCBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gbW9kaWZ5IHRoZSB2YWx1ZXMgZXZlbnQgPSB7fTtcbiAgICAvLyBJRTggRG9lc24ndCBsaWtlIHdoZW4geW91IG1lc3Mgd2l0aCBuYXRpdmUgZXZlbnQgcHJvcGVydGllc1xuICAgIC8vIEZpcmVmb3ggcmV0dXJucyBmYWxzZSBmb3IgZXZlbnQuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSBhbmQgb3RoZXIgcHJvcHNcbiAgICAvLyAgd2hpY2ggbWFrZXMgY29weWluZyBtb3JlIGRpZmZpY3VsdC5cbiAgICAvLyBUT0RPOiBQcm9iYWJseSBiZXN0IHRvIGNyZWF0ZSBhIHdoaXRlbGlzdCBvZiBldmVudCBwcm9wc1xuXG4gICAgZm9yICh2YXIga2V5IGluIG9sZCkge1xuICAgICAgLy8gU2FmYXJpIDYuMC4zIHdhcm5zIHlvdSBpZiB5b3UgdHJ5IHRvIGNvcHkgZGVwcmVjYXRlZCBsYXllclgvWVxuICAgICAgLy8gQ2hyb21lIHdhcm5zIHlvdSBpZiB5b3UgdHJ5IHRvIGNvcHkgZGVwcmVjYXRlZCBrZXlib2FyZEV2ZW50LmtleUxvY2F0aW9uXG4gICAgICAvLyBhbmQgd2Via2l0TW92ZW1lbnRYL1lcbiAgICAgIGlmIChrZXkgIT09ICdsYXllclgnICYmIGtleSAhPT0gJ2xheWVyWScgJiYga2V5ICE9PSAna2V5TG9jYXRpb24nICYmIGtleSAhPT0gJ3dlYmtpdE1vdmVtZW50WCcgJiYga2V5ICE9PSAnd2Via2l0TW92ZW1lbnRZJykge1xuICAgICAgICAvLyBDaHJvbWUgMzIrIHdhcm5zIGlmIHlvdSB0cnkgdG8gY29weSBkZXByZWNhdGVkIHJldHVyblZhbHVlLCBidXRcbiAgICAgICAgLy8gd2Ugc3RpbGwgd2FudCB0byBpZiBwcmV2ZW50RGVmYXVsdCBpc24ndCBzdXBwb3J0ZWQgKElFOCkuXG4gICAgICAgIGlmICghKGtleSA9PT0gJ3JldHVyblZhbHVlJyAmJiBvbGQucHJldmVudERlZmF1bHQpKSB7XG4gICAgICAgICAgZXZlbnRba2V5XSA9IG9sZFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBUaGUgZXZlbnQgb2NjdXJyZWQgb24gdGhpcyBlbGVtZW50XG5cblxuICAgIGlmICghZXZlbnQudGFyZ2V0KSB7XG4gICAgICBldmVudC50YXJnZXQgPSBldmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50O1xuICAgIH0gLy8gSGFuZGxlIHdoaWNoIG90aGVyIGVsZW1lbnQgdGhlIGV2ZW50IGlzIHJlbGF0ZWQgdG9cblxuXG4gICAgaWYgKCFldmVudC5yZWxhdGVkVGFyZ2V0KSB7XG4gICAgICBldmVudC5yZWxhdGVkVGFyZ2V0ID0gZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnRhcmdldCA/IGV2ZW50LnRvRWxlbWVudCA6IGV2ZW50LmZyb21FbGVtZW50O1xuICAgIH0gLy8gU3RvcCB0aGUgZGVmYXVsdCBicm93c2VyIGFjdGlvblxuXG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvbGQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgb2xkLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICBvbGQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7IC8vIFN0b3AgdGhlIGV2ZW50IGZyb20gYnViYmxpbmdcblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvbGQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgIG9sZC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgIG9sZC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuICAgIH07XG5cbiAgICBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVybkZhbHNlOyAvLyBTdG9wIHRoZSBldmVudCBmcm9tIGJ1YmJsaW5nIGFuZCBleGVjdXRpbmcgb3RoZXIgaGFuZGxlcnNcblxuICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvbGQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG4gICAgICAgIG9sZC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfTtcblxuICAgIGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuRmFsc2U7IC8vIEhhbmRsZSBtb3VzZSBwb3NpdGlvblxuXG4gICAgaWYgKGV2ZW50LmNsaWVudFggIT09IG51bGwgJiYgZXZlbnQuY2xpZW50WCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgZXZlbnQucGFnZVggPSBldmVudC5jbGllbnRYICsgKGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwKSAtIChkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCk7XG4gICAgICBldmVudC5wYWdlWSA9IGV2ZW50LmNsaWVudFkgKyAoZG9jICYmIGRvYy5zY3JvbGxUb3AgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCB8fCAwKSAtIChkb2MgJiYgZG9jLmNsaWVudFRvcCB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wIHx8IDApO1xuICAgIH0gLy8gSGFuZGxlIGtleSBwcmVzc2VzXG5cblxuICAgIGV2ZW50LndoaWNoID0gZXZlbnQuY2hhckNvZGUgfHwgZXZlbnQua2V5Q29kZTsgLy8gRml4IGJ1dHRvbiBmb3IgbW91c2UgY2xpY2tzOlxuICAgIC8vIDAgPT0gbGVmdDsgMSA9PSBtaWRkbGU7IDIgPT0gcmlnaHRcblxuICAgIGlmIChldmVudC5idXR0b24gIT09IG51bGwgJiYgZXZlbnQuYnV0dG9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFRoZSBmb2xsb3dpbmcgaXMgZGlzYWJsZWQgYmVjYXVzZSBpdCBkb2VzIG5vdCBwYXNzIHZpZGVvanMtc3RhbmRhcmRcbiAgICAgIC8vIGFuZC4uLiB5aWtlcy5cblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIGV2ZW50LmJ1dHRvbiA9IGV2ZW50LmJ1dHRvbiAmIDEgPyAwIDogZXZlbnQuYnV0dG9uICYgNCA/IDEgOiBldmVudC5idXR0b24gJiAyID8gMiA6IDA7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgfVxuICB9XG5cbiAgZXZlbnQuZml4ZWRfID0gdHJ1ZTsgLy8gUmV0dXJucyBmaXhlZC11cCBpbnN0YW5jZVxuXG4gIHJldHVybiBldmVudDtcbn1cbi8qKlxuICogV2hldGhlciBwYXNzaXZlIGV2ZW50IGxpc3RlbmVycyBhcmUgc3VwcG9ydGVkXG4gKi9cblxudmFyIF9zdXBwb3J0c1Bhc3NpdmU7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmdW5jdGlvbiBzdXBwb3J0c1Bhc3NpdmUoKSB7XG4gIGlmICh0eXBlb2YgX3N1cHBvcnRzUGFzc2l2ZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgX3N1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgX3N1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgd2luZG93JDEuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdHMpO1xuICAgICAgd2luZG93JDEucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdHMpO1xuICAgIH0gY2F0Y2ggKGUpIHsvLyBkaXNyZWdhcmRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX3N1cHBvcnRzUGFzc2l2ZTtcbn07XG4vKipcbiAqIFRvdWNoIGV2ZW50cyBDaHJvbWUgZXhwZWN0cyB0byBiZSBwYXNzaXZlXG4gKi9cblxuXG52YXIgcGFzc2l2ZUV2ZW50cyA9IFsndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnXTtcbi8qKlxuICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGVsZW1lbnRcbiAqIEl0IHN0b3JlcyB0aGUgaGFuZGxlciBmdW5jdGlvbiBpbiBhIHNlcGFyYXRlIGNhY2hlIG9iamVjdFxuICogYW5kIGFkZHMgYSBnZW5lcmljIGhhbmRsZXIgdG8gdGhlIGVsZW1lbnQncyBldmVudCxcbiAqIGFsb25nIHdpdGggYSB1bmlxdWUgaWQgKGd1aWQpIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW1cbiAqICAgICAgICBFbGVtZW50IG9yIG9iamVjdCB0byBiaW5kIGxpc3RlbmVycyB0b1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB0eXBlXG4gKiAgICAgICAgVHlwZSBvZiBldmVudCB0byBiaW5kIHRvLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnRMaXN0ZW5lcn0gZm5cbiAqICAgICAgICBFdmVudCBsaXN0ZW5lci5cbiAqL1xuXG5mdW5jdGlvbiBvbihlbGVtLCB0eXBlLCBmbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgIHJldHVybiBfaGFuZGxlTXVsdGlwbGVFdmVudHMob24sIGVsZW0sIHR5cGUsIGZuKTtcbiAgfVxuXG4gIGlmICghRG9tRGF0YS5oYXMoZWxlbSkpIHtcbiAgICBEb21EYXRhLnNldChlbGVtLCB7fSk7XG4gIH1cblxuICB2YXIgZGF0YSA9IERvbURhdGEuZ2V0KGVsZW0pOyAvLyBXZSBuZWVkIGEgcGxhY2UgdG8gc3RvcmUgYWxsIG91ciBoYW5kbGVyIGRhdGFcblxuICBpZiAoIWRhdGEuaGFuZGxlcnMpIHtcbiAgICBkYXRhLmhhbmRsZXJzID0ge307XG4gIH1cblxuICBpZiAoIWRhdGEuaGFuZGxlcnNbdHlwZV0pIHtcbiAgICBkYXRhLmhhbmRsZXJzW3R5cGVdID0gW107XG4gIH1cblxuICBpZiAoIWZuLmd1aWQpIHtcbiAgICBmbi5ndWlkID0gbmV3R1VJRCgpO1xuICB9XG5cbiAgZGF0YS5oYW5kbGVyc1t0eXBlXS5wdXNoKGZuKTtcblxuICBpZiAoIWRhdGEuZGlzcGF0Y2hlcikge1xuICAgIGRhdGEuZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIGRhdGEuZGlzcGF0Y2hlciA9IGZ1bmN0aW9uIChldmVudCwgaGFzaCkge1xuICAgICAgaWYgKGRhdGEuZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudCA9IGZpeEV2ZW50KGV2ZW50KTtcbiAgICAgIHZhciBoYW5kbGVycyA9IGRhdGEuaGFuZGxlcnNbZXZlbnQudHlwZV07XG5cbiAgICAgIGlmIChoYW5kbGVycykge1xuICAgICAgICAvLyBDb3B5IGhhbmRsZXJzIHNvIGlmIGhhbmRsZXJzIGFyZSBhZGRlZC9yZW1vdmVkIGR1cmluZyB0aGUgcHJvY2VzcyBpdCBkb2Vzbid0IHRocm93IGV2ZXJ5dGhpbmcgb2ZmLlxuICAgICAgICB2YXIgaGFuZGxlcnNDb3B5ID0gaGFuZGxlcnMuc2xpY2UoMCk7XG5cbiAgICAgICAgZm9yICh2YXIgbSA9IDAsIG4gPSBoYW5kbGVyc0NvcHkubGVuZ3RoOyBtIDwgbjsgbSsrKSB7XG4gICAgICAgICAgaWYgKGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBoYW5kbGVyc0NvcHlbbV0uY2FsbChlbGVtLCBldmVudCwgaGFzaCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKGRhdGEuaGFuZGxlcnNbdHlwZV0ubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKGVsZW0uYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdmFyIG9wdGlvbnMgPSBmYWxzZTtcblxuICAgICAgaWYgKHN1cHBvcnRzUGFzc2l2ZSgpICYmIHBhc3NpdmVFdmVudHMuaW5kZXhPZih0eXBlKSA+IC0xKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZGF0YS5kaXNwYXRjaGVyLCBvcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKGVsZW0uYXR0YWNoRXZlbnQpIHtcbiAgICAgIGVsZW0uYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGRhdGEuZGlzcGF0Y2hlcik7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGZyb20gYW4gZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW1cbiAqICAgICAgICBPYmplY3QgdG8gcmVtb3ZlIGxpc3RlbmVycyBmcm9tLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdHlwZV1cbiAqICAgICAgICBUeXBlIG9mIGxpc3RlbmVyIHRvIHJlbW92ZS4gRG9uJ3QgaW5jbHVkZSB0byByZW1vdmUgYWxsIGV2ZW50cyBmcm9tIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudExpc3RlbmVyfSBbZm5dXG4gKiAgICAgICAgU3BlY2lmaWMgbGlzdGVuZXIgdG8gcmVtb3ZlLiBEb24ndCBpbmNsdWRlIHRvIHJlbW92ZSBsaXN0ZW5lcnMgZm9yIGFuIGV2ZW50XG4gKiAgICAgICAgdHlwZS5cbiAqL1xuXG5mdW5jdGlvbiBvZmYoZWxlbSwgdHlwZSwgZm4pIHtcbiAgLy8gRG9uJ3Qgd2FudCB0byBhZGQgYSBjYWNoZSBvYmplY3QgdGhyb3VnaCBnZXRFbERhdGEgaWYgbm90IG5lZWRlZFxuICBpZiAoIURvbURhdGEuaGFzKGVsZW0pKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBEb21EYXRhLmdldChlbGVtKTsgLy8gSWYgbm8gZXZlbnRzIGV4aXN0LCBub3RoaW5nIHRvIHVuYmluZFxuXG4gIGlmICghZGF0YS5oYW5kbGVycykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgcmV0dXJuIF9oYW5kbGVNdWx0aXBsZUV2ZW50cyhvZmYsIGVsZW0sIHR5cGUsIGZuKTtcbiAgfSAvLyBVdGlsaXR5IGZ1bmN0aW9uXG5cblxuICB2YXIgcmVtb3ZlVHlwZSA9IGZ1bmN0aW9uIHJlbW92ZVR5cGUoZWwsIHQpIHtcbiAgICBkYXRhLmhhbmRsZXJzW3RdID0gW107XG5cbiAgICBfY2xlYW5VcEV2ZW50cyhlbCwgdCk7XG4gIH07IC8vIEFyZSB3ZSByZW1vdmluZyBhbGwgYm91bmQgZXZlbnRzP1xuXG5cbiAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAodmFyIHQgaW4gZGF0YS5oYW5kbGVycykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLmhhbmRsZXJzIHx8IHt9LCB0KSkge1xuICAgICAgICByZW1vdmVUeXBlKGVsZW0sIHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBoYW5kbGVycyA9IGRhdGEuaGFuZGxlcnNbdHlwZV07IC8vIElmIG5vIGhhbmRsZXJzIGV4aXN0LCBub3RoaW5nIHRvIHVuYmluZFxuXG4gIGlmICghaGFuZGxlcnMpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gSWYgbm8gbGlzdGVuZXIgd2FzIHByb3ZpZGVkLCByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdHlwZVxuXG5cbiAgaWYgKCFmbikge1xuICAgIHJlbW92ZVR5cGUoZWxlbSwgdHlwZSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFdlJ3JlIG9ubHkgcmVtb3ZpbmcgYSBzaW5nbGUgaGFuZGxlclxuXG5cbiAgaWYgKGZuLmd1aWQpIHtcbiAgICBmb3IgKHZhciBuID0gMDsgbiA8IGhhbmRsZXJzLmxlbmd0aDsgbisrKSB7XG4gICAgICBpZiAoaGFuZGxlcnNbbl0uZ3VpZCA9PT0gZm4uZ3VpZCkge1xuICAgICAgICBoYW5kbGVycy5zcGxpY2Uobi0tLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfY2xlYW5VcEV2ZW50cyhlbGVtLCB0eXBlKTtcbn1cbi8qKlxuICogVHJpZ2dlciBhbiBldmVudCBmb3IgYW4gZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW1cbiAqICAgICAgICBFbGVtZW50IHRvIHRyaWdnZXIgYW4gZXZlbnQgb25cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fHN0cmluZ30gZXZlbnRcbiAqICAgICAgICBBIHN0cmluZyAodGhlIHR5cGUpIG9yIGFuIGV2ZW50IG9iamVjdCB3aXRoIGEgdHlwZSBhdHRyaWJ1dGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW2hhc2hdXG4gKiAgICAgICAgZGF0YSBoYXNoIHRvIHBhc3MgYWxvbmcgd2l0aCB0aGUgZXZlbnRcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufHVuZGVmaW5lZH1cbiAqICAgICAgICAgUmV0dXJucyB0aGUgb3Bwb3NpdGUgb2YgYGRlZmF1bHRQcmV2ZW50ZWRgIGlmIGRlZmF1bHQgd2FzXG4gKiAgICAgICAgIHByZXZlbnRlZC4gT3RoZXJ3aXNlLCByZXR1cm5zIGB1bmRlZmluZWRgXG4gKi9cblxuZnVuY3Rpb24gdHJpZ2dlcihlbGVtLCBldmVudCwgaGFzaCkge1xuICAvLyBGZXRjaGVzIGVsZW1lbnQgZGF0YSBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIHBhcmVudCAoZm9yIGJ1YmJsaW5nKS5cbiAgLy8gRG9uJ3Qgd2FudCB0byBhZGQgYSBkYXRhIG9iamVjdCB0byBjYWNoZSBmb3IgZXZlcnkgcGFyZW50LFxuICAvLyBzbyBjaGVja2luZyBoYXNFbERhdGEgZmlyc3QuXG4gIHZhciBlbGVtRGF0YSA9IERvbURhdGEuaGFzKGVsZW0pID8gRG9tRGF0YS5nZXQoZWxlbSkgOiB7fTtcbiAgdmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSB8fCBlbGVtLm93bmVyRG9jdW1lbnQ7IC8vIHR5cGUgPSBldmVudC50eXBlIHx8IGV2ZW50LFxuICAvLyBoYW5kbGVyO1xuICAvLyBJZiBhbiBldmVudCBuYW1lIHdhcyBwYXNzZWQgYXMgYSBzdHJpbmcsIGNyZWF0ZXMgYW4gZXZlbnQgb3V0IG9mIGl0XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBldmVudCA9IHtcbiAgICAgIHR5cGU6IGV2ZW50LFxuICAgICAgdGFyZ2V0OiBlbGVtXG4gICAgfTtcbiAgfSBlbHNlIGlmICghZXZlbnQudGFyZ2V0KSB7XG4gICAgZXZlbnQudGFyZ2V0ID0gZWxlbTtcbiAgfSAvLyBOb3JtYWxpemVzIHRoZSBldmVudCBwcm9wZXJ0aWVzLlxuXG5cbiAgZXZlbnQgPSBmaXhFdmVudChldmVudCk7IC8vIElmIHRoZSBwYXNzZWQgZWxlbWVudCBoYXMgYSBkaXNwYXRjaGVyLCBleGVjdXRlcyB0aGUgZXN0YWJsaXNoZWQgaGFuZGxlcnMuXG5cbiAgaWYgKGVsZW1EYXRhLmRpc3BhdGNoZXIpIHtcbiAgICBlbGVtRGF0YS5kaXNwYXRjaGVyLmNhbGwoZWxlbSwgZXZlbnQsIGhhc2gpO1xuICB9IC8vIFVubGVzcyBleHBsaWNpdGx5IHN0b3BwZWQgb3IgdGhlIGV2ZW50IGRvZXMgbm90IGJ1YmJsZSAoZS5nLiBtZWRpYSBldmVudHMpXG4gIC8vIHJlY3Vyc2l2ZWx5IGNhbGxzIHRoaXMgZnVuY3Rpb24gdG8gYnViYmxlIHRoZSBldmVudCB1cCB0aGUgRE9NLlxuXG5cbiAgaWYgKHBhcmVudCAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSAmJiBldmVudC5idWJibGVzID09PSB0cnVlKSB7XG4gICAgdHJpZ2dlci5jYWxsKG51bGwsIHBhcmVudCwgZXZlbnQsIGhhc2gpOyAvLyBJZiBhdCB0aGUgdG9wIG9mIHRoZSBET00sIHRyaWdnZXJzIHRoZSBkZWZhdWx0IGFjdGlvbiB1bmxlc3MgZGlzYWJsZWQuXG4gIH0gZWxzZSBpZiAoIXBhcmVudCAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0W2V2ZW50LnR5cGVdKSB7XG4gICAgaWYgKCFEb21EYXRhLmhhcyhldmVudC50YXJnZXQpKSB7XG4gICAgICBEb21EYXRhLnNldChldmVudC50YXJnZXQsIHt9KTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0RGF0YSA9IERvbURhdGEuZ2V0KGV2ZW50LnRhcmdldCk7IC8vIENoZWNrcyBpZiB0aGUgdGFyZ2V0IGhhcyBhIGRlZmF1bHQgYWN0aW9uIGZvciB0aGlzIGV2ZW50LlxuXG4gICAgaWYgKGV2ZW50LnRhcmdldFtldmVudC50eXBlXSkge1xuICAgICAgLy8gVGVtcG9yYXJpbHkgZGlzYWJsZXMgZXZlbnQgZGlzcGF0Y2hpbmcgb24gdGhlIHRhcmdldCBhcyB3ZSBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgdGhlIGhhbmRsZXIuXG4gICAgICB0YXJnZXREYXRhLmRpc2FibGVkID0gdHJ1ZTsgLy8gRXhlY3V0ZXMgdGhlIGRlZmF1bHQgYWN0aW9uLlxuXG4gICAgICBpZiAodHlwZW9mIGV2ZW50LnRhcmdldFtldmVudC50eXBlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBldmVudC50YXJnZXRbZXZlbnQudHlwZV0oKTtcbiAgICAgIH0gLy8gUmUtZW5hYmxlcyBldmVudCBkaXNwYXRjaGluZy5cblxuXG4gICAgICB0YXJnZXREYXRhLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuICB9IC8vIEluZm9ybSB0aGUgdHJpZ2dlcmVyIGlmIHRoZSBkZWZhdWx0IHdhcyBwcmV2ZW50ZWQgYnkgcmV0dXJuaW5nIGZhbHNlXG5cblxuICByZXR1cm4gIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG59XG4vKipcbiAqIFRyaWdnZXIgYSBsaXN0ZW5lciBvbmx5IG9uY2UgZm9yIGFuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW1cbiAqICAgICAgICBFbGVtZW50IG9yIG9iamVjdCB0byBiaW5kIHRvLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB0eXBlXG4gKiAgICAgICAgTmFtZS90eXBlIG9mIGV2ZW50XG4gKlxuICogQHBhcmFtIHtFdmVudH5FdmVudExpc3RlbmVyfSBmblxuICogICAgICAgIEV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gb25lKGVsZW0sIHR5cGUsIGZuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgcmV0dXJuIF9oYW5kbGVNdWx0aXBsZUV2ZW50cyhvbmUsIGVsZW0sIHR5cGUsIGZuKTtcbiAgfVxuXG4gIHZhciBmdW5jID0gZnVuY3Rpb24gZnVuYygpIHtcbiAgICBvZmYoZWxlbSwgdHlwZSwgZnVuYyk7XG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTsgLy8gY29weSB0aGUgZ3VpZCB0byB0aGUgbmV3IGZ1bmN0aW9uIHNvIGl0IGNhbiByZW1vdmVkIHVzaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbidzIElEXG5cblxuICBmdW5jLmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBuZXdHVUlEKCk7XG4gIG9uKGVsZW0sIHR5cGUsIGZ1bmMpO1xufVxuLyoqXG4gKiBUcmlnZ2VyIGEgbGlzdGVuZXIgb25seSBvbmNlIGFuZCB0aGVuIHR1cm4gaWYgb2ZmIGZvciBhbGxcbiAqIGNvbmZpZ3VyZWQgZXZlbnRzXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbVxuICogICAgICAgIEVsZW1lbnQgb3Igb2JqZWN0IHRvIGJpbmQgdG8uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHR5cGVcbiAqICAgICAgICBOYW1lL3R5cGUgb2YgZXZlbnRcbiAqXG4gKiBAcGFyYW0ge0V2ZW50fkV2ZW50TGlzdGVuZXJ9IGZuXG4gKiAgICAgICAgRXZlbnQgbGlzdGVuZXIgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBhbnkoZWxlbSwgdHlwZSwgZm4pIHtcbiAgdmFyIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKCkge1xuICAgIG9mZihlbGVtLCB0eXBlLCBmdW5jKTtcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9OyAvLyBjb3B5IHRoZSBndWlkIHRvIHRoZSBuZXcgZnVuY3Rpb24gc28gaXQgY2FuIHJlbW92ZWQgdXNpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uJ3MgSURcblxuXG4gIGZ1bmMuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IG5ld0dVSUQoKTsgLy8gbXVsdGlwbGUgb25zLCBidXQgb25lIG9mZiBmb3IgZXZlcnl0aGluZ1xuXG4gIG9uKGVsZW0sIHR5cGUsIGZ1bmMpO1xufVxuXG52YXIgRXZlbnRzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGZpeEV2ZW50OiBmaXhFdmVudCxcbiAgb246IG9uLFxuICBvZmY6IG9mZixcbiAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgb25lOiBvbmUsXG4gIGFueTogYW55XG59KTtcblxuLyoqXG4gKiBAZmlsZSBmbi5qc1xuICogQG1vZHVsZSBmblxuICovXG52YXIgVVBEQVRFX1JFRlJFU0hfSU5URVJWQUwgPSAzMDtcbi8qKlxuICogQmluZCAoYS5rLmEgcHJveHkgb3IgY29udGV4dCkuIEEgc2ltcGxlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGNvbnRleHQgb2ZcbiAqIGEgZnVuY3Rpb24uXG4gKlxuICogSXQgYWxzbyBzdG9yZXMgYSB1bmlxdWUgaWQgb24gdGhlIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBlYXNpbHkgcmVtb3ZlZCBmcm9tXG4gKiBldmVudHMuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0gICAge01peGVkfSBjb250ZXh0XG4gKiAgICAgICAgICAgVGhlIG9iamVjdCB0byBiaW5kIGFzIHNjb3BlLlxuICpcbiAqIEBwYXJhbSAgICB7RnVuY3Rpb259IGZuXG4gKiAgICAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIGJlIGJvdW5kIHRvIGEgc2NvcGUuXG4gKlxuICogQHBhcmFtICAgIHtudW1iZXJ9IFt1aWRdXG4gKiAgICAgICAgICAgQW4gb3B0aW9uYWwgdW5pcXVlIElEIGZvciB0aGUgZnVuY3Rpb24gdG8gYmUgc2V0XG4gKlxuICogQHJldHVybiAgIHtGdW5jdGlvbn1cbiAqICAgICAgICAgICBUaGUgbmV3IGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBib3VuZCBpbnRvIHRoZSBjb250ZXh0IGdpdmVuXG4gKi9cblxudmFyIGJpbmQgPSBmdW5jdGlvbiBiaW5kKGNvbnRleHQsIGZuLCB1aWQpIHtcbiAgLy8gTWFrZSBzdXJlIHRoZSBmdW5jdGlvbiBoYXMgYSB1bmlxdWUgSURcbiAgaWYgKCFmbi5ndWlkKSB7XG4gICAgZm4uZ3VpZCA9IG5ld0dVSUQoKTtcbiAgfSAvLyBDcmVhdGUgdGhlIG5ldyBmdW5jdGlvbiB0aGF0IGNoYW5nZXMgdGhlIGNvbnRleHRcblxuXG4gIHZhciBib3VuZCA9IGZuLmJpbmQoY29udGV4dCk7IC8vIEFsbG93IGZvciB0aGUgYWJpbGl0eSB0byBpbmRpdmlkdWFsaXplIHRoaXMgZnVuY3Rpb25cbiAgLy8gTmVlZGVkIGluIHRoZSBjYXNlIHdoZXJlIG11bHRpcGxlIG9iamVjdHMgbWlnaHQgc2hhcmUgdGhlIHNhbWUgcHJvdG90eXBlXG4gIC8vIElGIGJvdGggaXRlbXMgYWRkIGFuIGV2ZW50IGxpc3RlbmVyIHdpdGggdGhlIHNhbWUgZnVuY3Rpb24sIHRoZW4geW91IHRyeSB0byByZW1vdmUganVzdCBvbmVcbiAgLy8gaXQgd2lsbCByZW1vdmUgYm90aCBiZWNhdXNlIHRoZXkgYm90aCBoYXZlIHRoZSBzYW1lIGd1aWQuXG4gIC8vIHdoZW4gdXNpbmcgdGhpcywgeW91IG5lZWQgdG8gdXNlIHRoZSBiaW5kIG1ldGhvZCB3aGVuIHlvdSByZW1vdmUgdGhlIGxpc3RlbmVyIGFzIHdlbGwuXG4gIC8vIGN1cnJlbnRseSB1c2VkIGluIHRleHQgdHJhY2tzXG5cbiAgYm91bmQuZ3VpZCA9IHVpZCA/IHVpZCArICdfJyArIGZuLmd1aWQgOiBmbi5ndWlkO1xuICByZXR1cm4gYm91bmQ7XG59O1xuLyoqXG4gKiBXcmFwcyB0aGUgZ2l2ZW4gZnVuY3Rpb24sIGBmbmAsIHdpdGggYSBuZXcgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZuYFxuICogYXQgbW9zdCBvbmNlIHBlciBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtICAgIHtGdW5jdGlvbn0gZm5cbiAqICAgICAgICAgICBUaGUgZnVuY3Rpb24gdG8gYmUgdGhyb3R0bGVkLlxuICpcbiAqIEBwYXJhbSAgICB7bnVtYmVyfSAgIHdhaXRcbiAqICAgICAgICAgICBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBieSB3aGljaCB0byB0aHJvdHRsZS5cbiAqXG4gKiBAcmV0dXJuICAge0Z1bmN0aW9ufVxuICovXG5cbnZhciB0aHJvdHRsZSA9IGZ1bmN0aW9uIHRocm90dGxlKGZuLCB3YWl0KSB7XG4gIHZhciBsYXN0ID0gd2luZG93JDEucGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgdmFyIHRocm90dGxlZCA9IGZ1bmN0aW9uIHRocm90dGxlZCgpIHtcbiAgICB2YXIgbm93ID0gd2luZG93JDEucGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICBpZiAobm93IC0gbGFzdCA+PSB3YWl0KSB7XG4gICAgICBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICBsYXN0ID0gbm93O1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhyb3R0bGVkO1xufTtcbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuXG4gKlxuICogSW5zcGlyZWQgYnkgbG9kYXNoIGFuZCB1bmRlcnNjb3JlIGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSAgICB7RnVuY3Rpb259IGZ1bmNcbiAqICAgICAgICAgICBUaGUgZnVuY3Rpb24gdG8gd3JhcCB3aXRoIGRlYm91bmNlIGJlaGF2aW9yLlxuICpcbiAqIEBwYXJhbSAgICB7bnVtYmVyfSB3YWl0XG4gKiAgICAgICAgICAgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBhZnRlciB0aGUgbGFzdCBpbnZvY2F0aW9uLlxuICpcbiAqIEBwYXJhbSAgICB7Ym9vbGVhbn0gW2ltbWVkaWF0ZV1cbiAqICAgICAgICAgICBXaGV0aGVyIG9yIG5vdCB0byBpbnZva2UgdGhlIGZ1bmN0aW9uIGltbWVkaWF0ZWx5IHVwb24gY3JlYXRpb24uXG4gKlxuICogQHBhcmFtICAgIHtPYmplY3R9IFtjb250ZXh0PXdpbmRvd11cbiAqICAgICAgICAgICBUaGUgXCJjb250ZXh0XCIgaW4gd2hpY2ggdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBzaG91bGQgZGVib3VuY2UuIEZvclxuICogICAgICAgICAgIGV4YW1wbGUsIGlmIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIHRpZWQgdG8gYSBWaWRlby5qcyBwbGF5ZXIsXG4gKiAgICAgICAgICAgdGhlIHBsYXllciBjYW4gYmUgcGFzc2VkIGhlcmUuIEFsdGVybmF0aXZlbHksIGRlZmF1bHRzIHRvIHRoZVxuICogICAgICAgICAgIGdsb2JhbCBgd2luZG93YCBvYmplY3QuXG4gKlxuICogQHJldHVybiAgIHtGdW5jdGlvbn1cbiAqICAgICAgICAgICBBIGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqL1xuXG52YXIgZGVib3VuY2UgPSBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUsIGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSB3aW5kb3ckMTtcbiAgfVxuXG4gIHZhciB0aW1lb3V0O1xuXG4gIHZhciBjYW5jZWwgPSBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgY29udGV4dC5jbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IG51bGw7XG4gIH07XG4gIC8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtdGhpcyAqL1xuXG5cbiAgdmFyIGRlYm91bmNlZCA9IGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgX2xhdGVyID0gZnVuY3Rpb24gbGF0ZXIoKSB7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIF9sYXRlciA9IG51bGw7XG5cbiAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgIGZ1bmMuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghdGltZW91dCAmJiBpbW1lZGlhdGUpIHtcbiAgICAgIGZ1bmMuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuXG4gICAgY29udGV4dC5jbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dChfbGF0ZXIsIHdhaXQpO1xuICB9O1xuICAvKiBlc2xpbnQtZW5hYmxlIGNvbnNpc3RlbnQtdGhpcyAqL1xuXG5cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn07XG5cbi8qKlxuICogQGZpbGUgc3JjL2pzL2V2ZW50LXRhcmdldC5qc1xuICovXG4vKipcbiAqIGBFdmVudFRhcmdldGAgaXMgYSBjbGFzcyB0aGF0IGNhbiBoYXZlIHRoZSBzYW1lIEFQSSBhcyB0aGUgRE9NIGBFdmVudFRhcmdldGAuIEl0XG4gKiBhZGRzIHNob3J0aGFuZCBmdW5jdGlvbnMgdGhhdCB3cmFwIGFyb3VuZCBsZW5ndGh5IGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gKiB0aGUgYG9uYCBmdW5jdGlvbiBpcyBhIHdyYXBwZXIgYXJvdW5kIGBhZGRFdmVudExpc3RlbmVyYC5cbiAqXG4gKiBAc2VlIFtFdmVudFRhcmdldCBTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItRXZlbnRzL2V2ZW50cy5odG1sI0V2ZW50cy1FdmVudFRhcmdldH1cbiAqIEBjbGFzcyBFdmVudFRhcmdldFxuICovXG5cbnZhciBFdmVudFRhcmdldCA9IGZ1bmN0aW9uIEV2ZW50VGFyZ2V0KCkge307XG4vKipcbiAqIEEgQ3VzdG9tIERPTSBldmVudC5cbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBFdmVudFRhcmdldH5FdmVudFxuICogQHNlZSBbUHJvcGVydGllc117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50fVxuICovXG5cbi8qKlxuICogQWxsIGV2ZW50IGxpc3RlbmVycyBzaG91bGQgZm9sbG93IHRoZSBmb2xsb3dpbmcgZm9ybWF0LlxuICpcbiAqIEBjYWxsYmFjayBFdmVudFRhcmdldH5FdmVudExpc3RlbmVyXG4gKiBAdGhpcyB7RXZlbnRUYXJnZXR9XG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAqICAgICAgICB0aGUgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbaGFzaF1cbiAqICAgICAgICBoYXNoIG9mIGRhdGEgc2VudCBkdXJpbmcgdGhlIGV2ZW50XG4gKi9cblxuLyoqXG4gKiBBbiBvYmplY3QgY29udGFpbmluZyBldmVudCBuYW1lcyBhcyBrZXlzIGFuZCBib29sZWFucyBhcyB2YWx1ZXMuXG4gKlxuICogPiBOT1RFOiBJZiBhbiBldmVudCBuYW1lIGlzIHNldCB0byBhIHRydWUgdmFsdWUgaGVyZSB7QGxpbmsgRXZlbnRUYXJnZXQjdHJpZ2dlcn1cbiAqICAgICAgICAgd2lsbCBoYXZlIGV4dHJhIGZ1bmN0aW9uYWxpdHkuIFNlZSB0aGF0IGZ1bmN0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwcm9wZXJ0eSBFdmVudFRhcmdldC5wcm90b3R5cGUuYWxsb3dlZEV2ZW50c19cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5FdmVudFRhcmdldC5wcm90b3R5cGUuYWxsb3dlZEV2ZW50c18gPSB7fTtcbi8qKlxuICogQWRkcyBhbiBgZXZlbnQgbGlzdGVuZXJgIHRvIGFuIGluc3RhbmNlIG9mIGFuIGBFdmVudFRhcmdldGAuIEFuIGBldmVudCBsaXN0ZW5lcmAgaXMgYVxuICogZnVuY3Rpb24gdGhhdCB3aWxsIGdldCBjYWxsZWQgd2hlbiBhbiBldmVudCB3aXRoIGEgY2VydGFpbiBuYW1lIGdldHMgdHJpZ2dlcmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB0eXBlXG4gKiAgICAgICAgQW4gZXZlbnQgbmFtZSBvciBhbiBhcnJheSBvZiBldmVudCBuYW1lcy5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50TGlzdGVuZXJ9IGZuXG4gKiAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2l0aCBgRXZlbnRUYXJnZXRgc1xuICovXG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAvLyBSZW1vdmUgdGhlIGFkZEV2ZW50TGlzdGVuZXIgYWxpYXMgYmVmb3JlIGNhbGxpbmcgRXZlbnRzLm9uXG4gIC8vIHNvIHdlIGRvbid0IGdldCBpbnRvIGFuIGluZmluaXRlIHR5cGUgbG9vcFxuICB2YXIgYWVsID0gdGhpcy5hZGRFdmVudExpc3RlbmVyO1xuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIG9uKHRoaXMsIHR5cGUsIGZuKTtcbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gYWVsO1xufTtcbi8qKlxuICogQW4gYWxpYXMgb2Yge0BsaW5rIEV2ZW50VGFyZ2V0I29ufS4gQWxsb3dzIGBFdmVudFRhcmdldGAgdG8gbWltaWNcbiAqIHRoZSBzdGFuZGFyZCBET00gQVBJLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHNlZSB7QGxpbmsgRXZlbnRUYXJnZXQjb259XG4gKi9cblxuXG5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5vbjtcbi8qKlxuICogUmVtb3ZlcyBhbiBgZXZlbnQgbGlzdGVuZXJgIGZvciBhIHNwZWNpZmljIGV2ZW50IGZyb20gYW4gaW5zdGFuY2Ugb2YgYEV2ZW50VGFyZ2V0YC5cbiAqIFRoaXMgbWFrZXMgaXQgc28gdGhhdCB0aGUgYGV2ZW50IGxpc3RlbmVyYCB3aWxsIG5vIGxvbmdlciBnZXQgY2FsbGVkIHdoZW4gdGhlXG4gKiBuYW1lZCBldmVudCBoYXBwZW5zLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB0eXBlXG4gKiAgICAgICAgQW4gZXZlbnQgbmFtZSBvciBhbiBhcnJheSBvZiBldmVudCBuYW1lcy5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50TGlzdGVuZXJ9IGZuXG4gKiAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIHJlbW92ZS5cbiAqL1xuXG5FdmVudFRhcmdldC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gIG9mZih0aGlzLCB0eXBlLCBmbik7XG59O1xuLyoqXG4gKiBBbiBhbGlhcyBvZiB7QGxpbmsgRXZlbnRUYXJnZXQjb2ZmfS4gQWxsb3dzIGBFdmVudFRhcmdldGAgdG8gbWltaWNcbiAqIHRoZSBzdGFuZGFyZCBET00gQVBJLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHNlZSB7QGxpbmsgRXZlbnRUYXJnZXQjb2ZmfVxuICovXG5cblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBFdmVudFRhcmdldC5wcm90b3R5cGUub2ZmO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYWRkIGFuIGBldmVudCBsaXN0ZW5lcmAgdGhhdCBnZXRzIHRyaWdnZXJlZCBvbmx5IG9uY2UuIEFmdGVyIHRoZVxuICogZmlyc3QgdHJpZ2dlciBpdCB3aWxsIGdldCByZW1vdmVkLiBUaGlzIGlzIGxpa2UgYWRkaW5nIGFuIGBldmVudCBsaXN0ZW5lcmBcbiAqIHdpdGgge0BsaW5rIEV2ZW50VGFyZ2V0I29ufSB0aGF0IGNhbGxzIHtAbGluayBFdmVudFRhcmdldCNvZmZ9IG9uIGl0c2VsZi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gdHlwZVxuICogICAgICAgIEFuIGV2ZW50IG5hbWUgb3IgYW4gYXJyYXkgb2YgZXZlbnQgbmFtZXMuXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudExpc3RlbmVyfSBmblxuICogICAgICAgIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb25jZSBmb3IgZWFjaCBldmVudCBuYW1lLlxuICovXG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5vbmUgPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgLy8gUmVtb3ZlIHRoZSBhZGRFdmVudExpc3RlbmVyIGFsaWFzaW5nIEV2ZW50cy5vblxuICAvLyBzbyB3ZSBkb24ndCBnZXQgaW50byBhbiBpbmZpbml0ZSB0eXBlIGxvb3BcbiAgdmFyIGFlbCA9IHRoaXMuYWRkRXZlbnRMaXN0ZW5lcjtcblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBvbmUodGhpcywgdHlwZSwgZm4pO1xuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgPSBhZWw7XG59O1xuXG5FdmVudFRhcmdldC5wcm90b3R5cGUuYW55ID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gIC8vIFJlbW92ZSB0aGUgYWRkRXZlbnRMaXN0ZW5lciBhbGlhc2luZyBFdmVudHMub25cbiAgLy8gc28gd2UgZG9uJ3QgZ2V0IGludG8gYW4gaW5maW5pdGUgdHlwZSBsb29wXG4gIHZhciBhZWwgPSB0aGlzLmFkZEV2ZW50TGlzdGVuZXI7XG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKCkge307XG5cbiAgYW55KHRoaXMsIHR5cGUsIGZuKTtcbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gYWVsO1xufTtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjYXVzZXMgYW4gZXZlbnQgdG8gaGFwcGVuLiBUaGlzIHdpbGwgdGhlbiBjYXVzZSBhbnkgYGV2ZW50IGxpc3RlbmVyc2BcbiAqIHRoYXQgYXJlIHdhaXRpbmcgZm9yIHRoYXQgZXZlbnQsIHRvIGdldCBjYWxsZWQuIElmIHRoZXJlIGFyZSBubyBgZXZlbnQgbGlzdGVuZXJzYFxuICogZm9yIGFuIGV2ZW50IHRoZW4gbm90aGluZyB3aWxsIGhhcHBlbi5cbiAqXG4gKiBJZiB0aGUgbmFtZSBvZiB0aGUgYEV2ZW50YCB0aGF0IGlzIGJlaW5nIHRyaWdnZXJlZCBpcyBpbiBgRXZlbnRUYXJnZXQuYWxsb3dlZEV2ZW50c19gLlxuICogVHJpZ2dlciB3aWxsIGFsc28gY2FsbCB0aGUgYG9uYCArIGB1cHBlcmNhc2VFdmVudE5hbWVgIGZ1bmN0aW9uLlxuICpcbiAqIEV4YW1wbGU6XG4gKiAnY2xpY2snIGlzIGluIGBFdmVudFRhcmdldC5hbGxvd2VkRXZlbnRzX2AsIHNvLCB0cmlnZ2VyIHdpbGwgYXR0ZW1wdCB0byBjYWxsXG4gKiBgb25DbGlja2AgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfEV2ZW50VGFyZ2V0fkV2ZW50fE9iamVjdH0gZXZlbnRcbiAqICAgICAgICBUaGUgbmFtZSBvZiB0aGUgZXZlbnQsIGFuIGBFdmVudGAsIG9yIGFuIG9iamVjdCB3aXRoIGEga2V5IG9mIHR5cGUgc2V0IHRvXG4gKiAgICAgICAgYW4gZXZlbnQgbmFtZS5cbiAqL1xuXG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHZhciB0eXBlID0gZXZlbnQudHlwZSB8fCBldmVudDsgLy8gZGVwcmVjYXRpb25cbiAgLy8gSW4gYSBmdXR1cmUgdmVyc2lvbiB3ZSBzaG91bGQgZGVmYXVsdCB0YXJnZXQgdG8gYHRoaXNgXG4gIC8vIHNpbWlsYXIgdG8gaG93IHdlIGRlZmF1bHQgdGhlIHRhcmdldCB0byBgZWxlbWAgaW5cbiAgLy8gYEV2ZW50cy50cmlnZ2VyYC4gUmlnaHQgbm93IHRoZSBkZWZhdWx0IGB0YXJnZXRgIHdpbGwgYmVcbiAgLy8gYGRvY3VtZW50YCBkdWUgdG8gdGhlIGBFdmVudC5maXhFdmVudGAgY2FsbC5cblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSAnc3RyaW5nJykge1xuICAgIGV2ZW50ID0ge1xuICAgICAgdHlwZTogdHlwZVxuICAgIH07XG4gIH1cblxuICBldmVudCA9IGZpeEV2ZW50KGV2ZW50KTtcblxuICBpZiAodGhpcy5hbGxvd2VkRXZlbnRzX1t0eXBlXSAmJiB0aGlzWydvbicgKyB0eXBlXSkge1xuICAgIHRoaXNbJ29uJyArIHR5cGVdKGV2ZW50KTtcbiAgfVxuXG4gIHRyaWdnZXIodGhpcywgZXZlbnQpO1xufTtcbi8qKlxuICogQW4gYWxpYXMgb2Yge0BsaW5rIEV2ZW50VGFyZ2V0I3RyaWdnZXJ9LiBBbGxvd3MgYEV2ZW50VGFyZ2V0YCB0byBtaW1pY1xuICogdGhlIHN0YW5kYXJkIERPTSBBUEkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAc2VlIHtAbGluayBFdmVudFRhcmdldCN0cmlnZ2VyfVxuICovXG5cblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBFdmVudFRhcmdldC5wcm90b3R5cGUudHJpZ2dlcjtcbnZhciBFVkVOVF9NQVA7XG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5xdWV1ZVRyaWdnZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICAvLyBvbmx5IHNldCB1cCBFVkVOVF9NQVAgaWYgaXQnbGwgYmUgdXNlZFxuICBpZiAoIUVWRU5UX01BUCkge1xuICAgIEVWRU5UX01BUCA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHZhciB0eXBlID0gZXZlbnQudHlwZSB8fCBldmVudDtcbiAgdmFyIG1hcCA9IEVWRU5UX01BUC5nZXQodGhpcyk7XG5cbiAgaWYgKCFtYXApIHtcbiAgICBtYXAgPSBuZXcgTWFwKCk7XG4gICAgRVZFTlRfTUFQLnNldCh0aGlzLCBtYXApO1xuICB9XG5cbiAgdmFyIG9sZFRpbWVvdXQgPSBtYXAuZ2V0KHR5cGUpO1xuICBtYXBbXCJkZWxldGVcIl0odHlwZSk7XG4gIHdpbmRvdyQxLmNsZWFyVGltZW91dChvbGRUaW1lb3V0KTtcbiAgdmFyIHRpbWVvdXQgPSB3aW5kb3ckMS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBpZiB3ZSBjbGVhcmVkIG91dCBhbGwgdGltZW91dHMgZm9yIHRoZSBjdXJyZW50IHRhcmdldCwgZGVsZXRlIGl0cyBtYXBcbiAgICBpZiAobWFwLnNpemUgPT09IDApIHtcbiAgICAgIG1hcCA9IG51bGw7XG4gICAgICBFVkVOVF9NQVBbXCJkZWxldGVcIl0oX3RoaXMpO1xuICAgIH1cblxuICAgIF90aGlzLnRyaWdnZXIoZXZlbnQpO1xuICB9LCAwKTtcbiAgbWFwLnNldCh0eXBlLCB0aW1lb3V0KTtcbn07XG5cbi8qKlxuICogQGZpbGUgbWl4aW5zL2V2ZW50ZWQuanNcbiAqIEBtb2R1bGUgZXZlbnRlZFxuICovXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgYW4gb2JqZWN0IGhhcyBoYWQgdGhlIGV2ZW50ZWQgbWl4aW4gYXBwbGllZC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdFxuICogICAgICAgICBBbiBvYmplY3QgdG8gdGVzdC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGFwcGVhcnMgdG8gYmUgZXZlbnRlZC5cbiAqL1xuXG52YXIgaXNFdmVudGVkID0gZnVuY3Rpb24gaXNFdmVudGVkKG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgRXZlbnRUYXJnZXQgfHwgISFvYmplY3QuZXZlbnRCdXNFbF8gJiYgWydvbicsICdvbmUnLCAnb2ZmJywgJ3RyaWdnZXInXS5ldmVyeShmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0W2tdID09PSAnZnVuY3Rpb24nO1xuICB9KTtcbn07XG4vKipcbiAqIEFkZHMgYSBjYWxsYmFjayB0byBydW4gYWZ0ZXIgdGhlIGV2ZW50ZWQgbWl4aW4gYXBwbGllZC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdFxuICogICAgICAgICBBbiBvYmplY3QgdG8gQWRkXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqICAgICAgICAgVGhlIGNhbGxiYWNrIHRvIHJ1bi5cbiAqL1xuXG5cbnZhciBhZGRFdmVudGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiBhZGRFdmVudGVkQ2FsbGJhY2sodGFyZ2V0LCBjYWxsYmFjaykge1xuICBpZiAoaXNFdmVudGVkKHRhcmdldCkpIHtcbiAgICBjYWxsYmFjaygpO1xuICB9IGVsc2Uge1xuICAgIGlmICghdGFyZ2V0LmV2ZW50ZWRDYWxsYmFja3MpIHtcbiAgICAgIHRhcmdldC5ldmVudGVkQ2FsbGJhY2tzID0gW107XG4gICAgfVxuXG4gICAgdGFyZ2V0LmV2ZW50ZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gIH1cbn07XG4vKipcbiAqIFdoZXRoZXIgYSB2YWx1ZSBpcyBhIHZhbGlkIGV2ZW50IHR5cGUgLSBub24tZW1wdHkgc3RyaW5nIG9yIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtzdHJpbmd8QXJyYXl9IHR5cGVcbiAqICAgICAgICAgVGhlIHR5cGUgdmFsdWUgdG8gdGVzdC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgdHlwZSBpcyBhIHZhbGlkIGV2ZW50IHR5cGUuXG4gKi9cblxuXG52YXIgaXNWYWxpZEV2ZW50VHlwZSA9IGZ1bmN0aW9uIGlzVmFsaWRFdmVudFR5cGUodHlwZSkge1xuICByZXR1cm4gKC8vIFRoZSByZWdleCBoZXJlIHZlcmlmaWVzIHRoYXQgdGhlIGB0eXBlYCBjb250YWlucyBhdCBsZWFzdCBvbmUgbm9uLVxuICAgIC8vIHdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICAgIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyAmJiAvXFxTLy50ZXN0KHR5cGUpIHx8IEFycmF5LmlzQXJyYXkodHlwZSkgJiYgISF0eXBlLmxlbmd0aFxuICApO1xufTtcbi8qKlxuICogVmFsaWRhdGVzIGEgdmFsdWUgdG8gZGV0ZXJtaW5lIGlmIGl0IGlzIGEgdmFsaWQgZXZlbnQgdGFyZ2V0LiBUaHJvd3MgaWYgbm90LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAdGhyb3dzIHtFcnJvcn1cbiAqICAgICAgICAgSWYgdGhlIHRhcmdldCBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgYSB2YWxpZCBldmVudCB0YXJnZXQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSB0YXJnZXRcbiAqICAgICAgICAgVGhlIG9iamVjdCB0byB0ZXN0LlxuICovXG5cblxudmFyIHZhbGlkYXRlVGFyZ2V0ID0gZnVuY3Rpb24gdmFsaWRhdGVUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICghdGFyZ2V0Lm5vZGVOYW1lICYmICFpc0V2ZW50ZWQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0YXJnZXQ7IG11c3QgYmUgYSBET00gbm9kZSBvciBldmVudGVkIG9iamVjdC4nKTtcbiAgfVxufTtcbi8qKlxuICogVmFsaWRhdGVzIGEgdmFsdWUgdG8gZGV0ZXJtaW5lIGlmIGl0IGlzIGEgdmFsaWQgZXZlbnQgdGFyZ2V0LiBUaHJvd3MgaWYgbm90LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAdGhyb3dzIHtFcnJvcn1cbiAqICAgICAgICAgSWYgdGhlIHR5cGUgZG9lcyBub3QgYXBwZWFyIHRvIGJlIGEgdmFsaWQgZXZlbnQgdHlwZS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd8QXJyYXl9IHR5cGVcbiAqICAgICAgICAgVGhlIHR5cGUgdG8gdGVzdC5cbiAqL1xuXG5cbnZhciB2YWxpZGF0ZUV2ZW50VHlwZSA9IGZ1bmN0aW9uIHZhbGlkYXRlRXZlbnRUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc1ZhbGlkRXZlbnRUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGV2ZW50IHR5cGU7IG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nIG9yIGFycmF5LicpO1xuICB9XG59O1xuLyoqXG4gKiBWYWxpZGF0ZXMgYSB2YWx1ZSB0byBkZXRlcm1pbmUgaWYgaXQgaXMgYSB2YWxpZCBsaXN0ZW5lci4gVGhyb3dzIGlmIG5vdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHRocm93cyB7RXJyb3J9XG4gKiAgICAgICAgIElmIHRoZSBsaXN0ZW5lciBpcyBub3QgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gbGlzdGVuZXJcbiAqICAgICAgICAgVGhlIGxpc3RlbmVyIHRvIHRlc3QuXG4gKi9cblxuXG52YXIgdmFsaWRhdGVMaXN0ZW5lciA9IGZ1bmN0aW9uIHZhbGlkYXRlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXN0ZW5lcjsgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG59O1xuLyoqXG4gKiBUYWtlcyBhbiBhcnJheSBvZiBhcmd1bWVudHMgZ2l2ZW4gdG8gYG9uKClgIG9yIGBvbmUoKWAsIHZhbGlkYXRlcyB0aGVtLCBhbmRcbiAqIG5vcm1hbGl6ZXMgdGhlbSBpbnRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7T2JqZWN0fSBzZWxmXG4gKiAgICAgICAgIFRoZSBldmVudGVkIG9iamVjdCBvbiB3aGljaCBgb24oKWAgb3IgYG9uZSgpYCB3YXMgY2FsbGVkLiBUaGlzXG4gKiAgICAgICAgIG9iamVjdCB3aWxsIGJlIGJvdW5kIGFzIHRoZSBgdGhpc2AgdmFsdWUgZm9yIHRoZSBsaXN0ZW5lci5cbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJnc1xuICogICAgICAgICBBbiBhcnJheSBvZiBhcmd1bWVudHMgcGFzc2VkIHRvIGBvbigpYCBvciBgb25lKClgLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdXNlZnVsIHZhbHVlcyBmb3IgYG9uKClgIG9yIGBvbmUoKWAgY2FsbHMuXG4gKi9cblxuXG52YXIgbm9ybWFsaXplTGlzdGVuQXJncyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUxpc3RlbkFyZ3Moc2VsZiwgYXJncykge1xuICAvLyBJZiB0aGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBpcyBsZXNzIHRoYW4gMywgdGhlIHRhcmdldCBpcyBhbHdheXMgdGhlXG4gIC8vIGV2ZW50ZWQgb2JqZWN0IGl0c2VsZi5cbiAgdmFyIGlzVGFyZ2V0aW5nU2VsZiA9IGFyZ3MubGVuZ3RoIDwgMyB8fCBhcmdzWzBdID09PSBzZWxmIHx8IGFyZ3NbMF0gPT09IHNlbGYuZXZlbnRCdXNFbF87XG4gIHZhciB0YXJnZXQ7XG4gIHZhciB0eXBlO1xuICB2YXIgbGlzdGVuZXI7XG5cbiAgaWYgKGlzVGFyZ2V0aW5nU2VsZikge1xuICAgIHRhcmdldCA9IHNlbGYuZXZlbnRCdXNFbF87IC8vIERlYWwgd2l0aCBjYXNlcyB3aGVyZSB3ZSBnb3QgMyBhcmd1bWVudHMsIGJ1dCB3ZSBhcmUgc3RpbGwgbGlzdGVuaW5nIHRvXG4gICAgLy8gdGhlIGV2ZW50ZWQgb2JqZWN0IGl0c2VsZi5cblxuICAgIGlmIChhcmdzLmxlbmd0aCA+PSAzKSB7XG4gICAgICBhcmdzLnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgdHlwZSA9IGFyZ3NbMF07XG4gICAgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IGFyZ3NbMF07XG4gICAgdHlwZSA9IGFyZ3NbMV07XG4gICAgbGlzdGVuZXIgPSBhcmdzWzJdO1xuICB9XG5cbiAgdmFsaWRhdGVUYXJnZXQodGFyZ2V0KTtcbiAgdmFsaWRhdGVFdmVudFR5cGUodHlwZSk7XG4gIHZhbGlkYXRlTGlzdGVuZXIobGlzdGVuZXIpO1xuICBsaXN0ZW5lciA9IGJpbmQoc2VsZiwgbGlzdGVuZXIpO1xuICByZXR1cm4ge1xuICAgIGlzVGFyZ2V0aW5nU2VsZjogaXNUYXJnZXRpbmdTZWxmLFxuICAgIHRhcmdldDogdGFyZ2V0LFxuICAgIHR5cGU6IHR5cGUsXG4gICAgbGlzdGVuZXI6IGxpc3RlbmVyXG4gIH07XG59O1xuLyoqXG4gKiBBZGRzIHRoZSBsaXN0ZW5lciB0byB0aGUgZXZlbnQgdHlwZShzKSBvbiB0aGUgdGFyZ2V0LCBub3JtYWxpemluZyBmb3JcbiAqIHRoZSB0eXBlIG9mIHRhcmdldC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7RWxlbWVudHxPYmplY3R9IHRhcmdldFxuICogICAgICAgICBBIERPTSBub2RlIG9yIGV2ZW50ZWQgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gbWV0aG9kXG4gKiAgICAgICAgIFRoZSBldmVudCBiaW5kaW5nIG1ldGhvZCB0byB1c2UgKFwib25cIiBvciBcIm9uZVwiKS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd8QXJyYXl9IHR5cGVcbiAqICAgICAgICAgT25lIG9yIG1vcmUgZXZlbnQgdHlwZShzKS5cbiAqXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gbGlzdGVuZXJcbiAqICAgICAgICAgQSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqL1xuXG5cbnZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4odGFyZ2V0LCBtZXRob2QsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhbGlkYXRlVGFyZ2V0KHRhcmdldCk7XG5cbiAgaWYgKHRhcmdldC5ub2RlTmFtZSkge1xuICAgIEV2ZW50c1ttZXRob2RdKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFttZXRob2RdKHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxufTtcbi8qKlxuICogQ29udGFpbnMgbWV0aG9kcyB0aGF0IHByb3ZpZGUgZXZlbnQgY2FwYWJpbGl0aWVzIHRvIGFuIG9iamVjdCB3aGljaCBpcyBwYXNzZWRcbiAqIHRvIHtAbGluayBtb2R1bGU6ZXZlbnRlZHxldmVudGVkfS5cbiAqXG4gKiBAbWl4aW4gRXZlbnRlZE1peGluXG4gKi9cblxuXG52YXIgRXZlbnRlZE1peGluID0ge1xuICAvKipcbiAgICogQWRkIGEgbGlzdGVuZXIgdG8gYW4gZXZlbnQgKG9yIGV2ZW50cykgb24gdGhpcyBvYmplY3Qgb3IgYW5vdGhlciBldmVudGVkXG4gICAqIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfEFycmF5fEVsZW1lbnR8T2JqZWN0fSB0YXJnZXRPclR5cGVcbiAgICogICAgICAgICBJZiB0aGlzIGlzIGEgc3RyaW5nIG9yIGFycmF5LCBpdCByZXByZXNlbnRzIHRoZSBldmVudCB0eXBlKHMpXG4gICAqICAgICAgICAgdGhhdCB3aWxsIHRyaWdnZXIgdGhlIGxpc3RlbmVyLlxuICAgKlxuICAgKiAgICAgICAgIEFub3RoZXIgZXZlbnRlZCBvYmplY3QgY2FuIGJlIHBhc3NlZCBoZXJlIGluc3RlYWQsIHdoaWNoIHdpbGxcbiAgICogICAgICAgICBjYXVzZSB0aGUgbGlzdGVuZXIgdG8gbGlzdGVuIGZvciBldmVudHMgb24gX3RoYXRfIG9iamVjdC5cbiAgICpcbiAgICogICAgICAgICBJbiBlaXRoZXIgY2FzZSwgdGhlIGxpc3RlbmVyJ3MgYHRoaXNgIHZhbHVlIHdpbGwgYmUgYm91bmQgdG9cbiAgICogICAgICAgICB0aGlzIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfEFycmF5fEZ1bmN0aW9ufSB0eXBlT3JMaXN0ZW5lclxuICAgKiAgICAgICAgIElmIHRoZSBmaXJzdCBhcmd1bWVudCB3YXMgYSBzdHJpbmcgb3IgYXJyYXksIHRoaXMgc2hvdWxkIGJlIHRoZVxuICAgKiAgICAgICAgIGxpc3RlbmVyIGZ1bmN0aW9uLiBPdGhlcndpc2UsIHRoaXMgaXMgYSBzdHJpbmcgb3IgYXJyYXkgb2YgZXZlbnRcbiAgICogICAgICAgICB0eXBlKHMpLlxuICAgKlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gW2xpc3RlbmVyXVxuICAgKiAgICAgICAgIElmIHRoZSBmaXJzdCBhcmd1bWVudCB3YXMgYW5vdGhlciBldmVudGVkIG9iamVjdCwgdGhpcyB3aWxsIGJlXG4gICAqICAgICAgICAgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICAgKi9cbiAgb246IGZ1bmN0aW9uIG9uKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIF9ub3JtYWxpemVMaXN0ZW5BcmdzID0gbm9ybWFsaXplTGlzdGVuQXJncyh0aGlzLCBhcmdzKSxcbiAgICAgICAgaXNUYXJnZXRpbmdTZWxmID0gX25vcm1hbGl6ZUxpc3RlbkFyZ3MuaXNUYXJnZXRpbmdTZWxmLFxuICAgICAgICB0YXJnZXQgPSBfbm9ybWFsaXplTGlzdGVuQXJncy50YXJnZXQsXG4gICAgICAgIHR5cGUgPSBfbm9ybWFsaXplTGlzdGVuQXJncy50eXBlLFxuICAgICAgICBsaXN0ZW5lciA9IF9ub3JtYWxpemVMaXN0ZW5BcmdzLmxpc3RlbmVyO1xuXG4gICAgbGlzdGVuKHRhcmdldCwgJ29uJywgdHlwZSwgbGlzdGVuZXIpOyAvLyBJZiB0aGlzIG9iamVjdCBpcyBsaXN0ZW5pbmcgdG8gYW5vdGhlciBldmVudGVkIG9iamVjdC5cblxuICAgIGlmICghaXNUYXJnZXRpbmdTZWxmKSB7XG4gICAgICAvLyBJZiB0aGlzIG9iamVjdCBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICAgIHZhciByZW1vdmVMaXN0ZW5lck9uRGlzcG9zZSA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyT25EaXNwb3NlKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMub2ZmKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgfTsgLy8gVXNlIHRoZSBzYW1lIGZ1bmN0aW9uIElEIGFzIHRoZSBsaXN0ZW5lciBzbyB3ZSBjYW4gcmVtb3ZlIGl0IGxhdGVyIGl0XG4gICAgICAvLyB1c2luZyB0aGUgSUQgb2YgdGhlIG9yaWdpbmFsIGxpc3RlbmVyLlxuXG5cbiAgICAgIHJlbW92ZUxpc3RlbmVyT25EaXNwb3NlLmd1aWQgPSBsaXN0ZW5lci5ndWlkOyAvLyBBZGQgYSBsaXN0ZW5lciB0byB0aGUgdGFyZ2V0J3MgZGlzcG9zZSBldmVudCBhcyB3ZWxsLiBUaGlzIGVuc3VyZXNcbiAgICAgIC8vIHRoYXQgaWYgdGhlIHRhcmdldCBpcyBkaXNwb3NlZCBCRUZPUkUgdGhpcyBvYmplY3QsIHdlIHJlbW92ZSB0aGVcbiAgICAgIC8vIHJlbW92YWwgbGlzdGVuZXIgdGhhdCB3YXMganVzdCBhZGRlZC4gT3RoZXJ3aXNlLCB3ZSBjcmVhdGUgYSBtZW1vcnkgbGVhay5cblxuICAgICAgdmFyIHJlbW92ZVJlbW92ZXJPblRhcmdldERpc3Bvc2UgPSBmdW5jdGlvbiByZW1vdmVSZW1vdmVyT25UYXJnZXREaXNwb3NlKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMub2ZmKCdkaXNwb3NlJywgcmVtb3ZlTGlzdGVuZXJPbkRpc3Bvc2UpO1xuICAgICAgfTsgLy8gVXNlIHRoZSBzYW1lIGZ1bmN0aW9uIElEIGFzIHRoZSBsaXN0ZW5lciBzbyB3ZSBjYW4gcmVtb3ZlIGl0IGxhdGVyXG4gICAgICAvLyBpdCB1c2luZyB0aGUgSUQgb2YgdGhlIG9yaWdpbmFsIGxpc3RlbmVyLlxuXG5cbiAgICAgIHJlbW92ZVJlbW92ZXJPblRhcmdldERpc3Bvc2UuZ3VpZCA9IGxpc3RlbmVyLmd1aWQ7XG4gICAgICBsaXN0ZW4odGhpcywgJ29uJywgJ2Rpc3Bvc2UnLCByZW1vdmVMaXN0ZW5lck9uRGlzcG9zZSk7XG4gICAgICBsaXN0ZW4odGFyZ2V0LCAnb24nLCAnZGlzcG9zZScsIHJlbW92ZVJlbW92ZXJPblRhcmdldERpc3Bvc2UpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgbGlzdGVuZXIgdG8gYW4gZXZlbnQgKG9yIGV2ZW50cykgb24gdGhpcyBvYmplY3Qgb3IgYW5vdGhlciBldmVudGVkXG4gICAqIG9iamVjdC4gVGhlIGxpc3RlbmVyIHdpbGwgYmUgY2FsbGVkIG9uY2UgcGVyIGV2ZW50IGFuZCB0aGVuIHJlbW92ZWQuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ3xBcnJheXxFbGVtZW50fE9iamVjdH0gdGFyZ2V0T3JUeXBlXG4gICAqICAgICAgICAgSWYgdGhpcyBpcyBhIHN0cmluZyBvciBhcnJheSwgaXQgcmVwcmVzZW50cyB0aGUgZXZlbnQgdHlwZShzKVxuICAgKiAgICAgICAgIHRoYXQgd2lsbCB0cmlnZ2VyIHRoZSBsaXN0ZW5lci5cbiAgICpcbiAgICogICAgICAgICBBbm90aGVyIGV2ZW50ZWQgb2JqZWN0IGNhbiBiZSBwYXNzZWQgaGVyZSBpbnN0ZWFkLCB3aGljaCB3aWxsXG4gICAqICAgICAgICAgY2F1c2UgdGhlIGxpc3RlbmVyIHRvIGxpc3RlbiBmb3IgZXZlbnRzIG9uIF90aGF0XyBvYmplY3QuXG4gICAqXG4gICAqICAgICAgICAgSW4gZWl0aGVyIGNhc2UsIHRoZSBsaXN0ZW5lcidzIGB0aGlzYCB2YWx1ZSB3aWxsIGJlIGJvdW5kIHRvXG4gICAqICAgICAgICAgdGhpcyBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ3xBcnJheXxGdW5jdGlvbn0gdHlwZU9yTGlzdGVuZXJcbiAgICogICAgICAgICBJZiB0aGUgZmlyc3QgYXJndW1lbnQgd2FzIGEgc3RyaW5nIG9yIGFycmF5LCB0aGlzIHNob3VsZCBiZSB0aGVcbiAgICogICAgICAgICBsaXN0ZW5lciBmdW5jdGlvbi4gT3RoZXJ3aXNlLCB0aGlzIGlzIGEgc3RyaW5nIG9yIGFycmF5IG9mIGV2ZW50XG4gICAqICAgICAgICAgdHlwZShzKS5cbiAgICpcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IFtsaXN0ZW5lcl1cbiAgICogICAgICAgICBJZiB0aGUgZmlyc3QgYXJndW1lbnQgd2FzIGFub3RoZXIgZXZlbnRlZCBvYmplY3QsIHRoaXMgd2lsbCBiZVxuICAgKiAgICAgICAgIHRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAgICovXG4gIG9uZTogZnVuY3Rpb24gb25lKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIF9ub3JtYWxpemVMaXN0ZW5BcmdzMiA9IG5vcm1hbGl6ZUxpc3RlbkFyZ3ModGhpcywgYXJncyksXG4gICAgICAgIGlzVGFyZ2V0aW5nU2VsZiA9IF9ub3JtYWxpemVMaXN0ZW5BcmdzMi5pc1RhcmdldGluZ1NlbGYsXG4gICAgICAgIHRhcmdldCA9IF9ub3JtYWxpemVMaXN0ZW5BcmdzMi50YXJnZXQsXG4gICAgICAgIHR5cGUgPSBfbm9ybWFsaXplTGlzdGVuQXJnczIudHlwZSxcbiAgICAgICAgbGlzdGVuZXIgPSBfbm9ybWFsaXplTGlzdGVuQXJnczIubGlzdGVuZXI7IC8vIFRhcmdldGluZyB0aGlzIGV2ZW50ZWQgb2JqZWN0LlxuXG5cbiAgICBpZiAoaXNUYXJnZXRpbmdTZWxmKSB7XG4gICAgICBsaXN0ZW4odGFyZ2V0LCAnb25lJywgdHlwZSwgbGlzdGVuZXIpOyAvLyBUYXJnZXRpbmcgYW5vdGhlciBldmVudGVkIG9iamVjdC5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVE9ETzogVGhpcyB3cmFwcGVyIGlzIGluY29ycmVjdCEgSXQgc2hvdWxkIG9ubHlcbiAgICAgIC8vICAgICAgIHJlbW92ZSB0aGUgd3JhcHBlciBmb3IgdGhlIGV2ZW50IHR5cGUgdGhhdCBjYWxsZWQgaXQuXG4gICAgICAvLyAgICAgICBJbnN0ZWFkIGFsbCBsaXN0bmVycyBhcmUgcmVtb3ZlZCBvbiB0aGUgZmlyc3QgdHJpZ2dlciFcbiAgICAgIC8vICAgICAgIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy92aWRlby5qcy9pc3N1ZXMvNTk2MlxuICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICBfdGhpczIub2ZmKHRhcmdldCwgdHlwZSwgd3JhcHBlcik7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBsYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICAgIGxhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0ZW5lci5hcHBseShudWxsLCBsYXJncyk7XG4gICAgICB9OyAvLyBVc2UgdGhlIHNhbWUgZnVuY3Rpb24gSUQgYXMgdGhlIGxpc3RlbmVyIHNvIHdlIGNhbiByZW1vdmUgaXQgbGF0ZXJcbiAgICAgIC8vIGl0IHVzaW5nIHRoZSBJRCBvZiB0aGUgb3JpZ2luYWwgbGlzdGVuZXIuXG5cblxuICAgICAgd3JhcHBlci5ndWlkID0gbGlzdGVuZXIuZ3VpZDtcbiAgICAgIGxpc3Rlbih0YXJnZXQsICdvbmUnLCB0eXBlLCB3cmFwcGVyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGxpc3RlbmVyIHRvIGFuIGV2ZW50IChvciBldmVudHMpIG9uIHRoaXMgb2JqZWN0IG9yIGFub3RoZXIgZXZlbnRlZFxuICAgKiBvYmplY3QuIFRoZSBsaXN0ZW5lciB3aWxsIG9ubHkgYmUgY2FsbGVkIG9uY2UgZm9yIHRoZSBmaXJzdCBldmVudCB0aGF0IGlzIHRyaWdnZXJlZFxuICAgKiB0aGVuIHJlbW92ZWQuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ3xBcnJheXxFbGVtZW50fE9iamVjdH0gdGFyZ2V0T3JUeXBlXG4gICAqICAgICAgICAgSWYgdGhpcyBpcyBhIHN0cmluZyBvciBhcnJheSwgaXQgcmVwcmVzZW50cyB0aGUgZXZlbnQgdHlwZShzKVxuICAgKiAgICAgICAgIHRoYXQgd2lsbCB0cmlnZ2VyIHRoZSBsaXN0ZW5lci5cbiAgICpcbiAgICogICAgICAgICBBbm90aGVyIGV2ZW50ZWQgb2JqZWN0IGNhbiBiZSBwYXNzZWQgaGVyZSBpbnN0ZWFkLCB3aGljaCB3aWxsXG4gICAqICAgICAgICAgY2F1c2UgdGhlIGxpc3RlbmVyIHRvIGxpc3RlbiBmb3IgZXZlbnRzIG9uIF90aGF0XyBvYmplY3QuXG4gICAqXG4gICAqICAgICAgICAgSW4gZWl0aGVyIGNhc2UsIHRoZSBsaXN0ZW5lcidzIGB0aGlzYCB2YWx1ZSB3aWxsIGJlIGJvdW5kIHRvXG4gICAqICAgICAgICAgdGhpcyBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ3xBcnJheXxGdW5jdGlvbn0gdHlwZU9yTGlzdGVuZXJcbiAgICogICAgICAgICBJZiB0aGUgZmlyc3QgYXJndW1lbnQgd2FzIGEgc3RyaW5nIG9yIGFycmF5LCB0aGlzIHNob3VsZCBiZSB0aGVcbiAgICogICAgICAgICBsaXN0ZW5lciBmdW5jdGlvbi4gT3RoZXJ3aXNlLCB0aGlzIGlzIGEgc3RyaW5nIG9yIGFycmF5IG9mIGV2ZW50XG4gICAqICAgICAgICAgdHlwZShzKS5cbiAgICpcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IFtsaXN0ZW5lcl1cbiAgICogICAgICAgICBJZiB0aGUgZmlyc3QgYXJndW1lbnQgd2FzIGFub3RoZXIgZXZlbnRlZCBvYmplY3QsIHRoaXMgd2lsbCBiZVxuICAgKiAgICAgICAgIHRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAgICovXG4gIGFueTogZnVuY3Rpb24gYW55KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuXG4gICAgdmFyIF9ub3JtYWxpemVMaXN0ZW5BcmdzMyA9IG5vcm1hbGl6ZUxpc3RlbkFyZ3ModGhpcywgYXJncyksXG4gICAgICAgIGlzVGFyZ2V0aW5nU2VsZiA9IF9ub3JtYWxpemVMaXN0ZW5BcmdzMy5pc1RhcmdldGluZ1NlbGYsXG4gICAgICAgIHRhcmdldCA9IF9ub3JtYWxpemVMaXN0ZW5BcmdzMy50YXJnZXQsXG4gICAgICAgIHR5cGUgPSBfbm9ybWFsaXplTGlzdGVuQXJnczMudHlwZSxcbiAgICAgICAgbGlzdGVuZXIgPSBfbm9ybWFsaXplTGlzdGVuQXJnczMubGlzdGVuZXI7IC8vIFRhcmdldGluZyB0aGlzIGV2ZW50ZWQgb2JqZWN0LlxuXG5cbiAgICBpZiAoaXNUYXJnZXRpbmdTZWxmKSB7XG4gICAgICBsaXN0ZW4odGFyZ2V0LCAnYW55JywgdHlwZSwgbGlzdGVuZXIpOyAvLyBUYXJnZXRpbmcgYW5vdGhlciBldmVudGVkIG9iamVjdC5cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICBfdGhpczMub2ZmKHRhcmdldCwgdHlwZSwgd3JhcHBlcik7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBsYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICAgIGxhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0ZW5lci5hcHBseShudWxsLCBsYXJncyk7XG4gICAgICB9OyAvLyBVc2UgdGhlIHNhbWUgZnVuY3Rpb24gSUQgYXMgdGhlIGxpc3RlbmVyIHNvIHdlIGNhbiByZW1vdmUgaXQgbGF0ZXJcbiAgICAgIC8vIGl0IHVzaW5nIHRoZSBJRCBvZiB0aGUgb3JpZ2luYWwgbGlzdGVuZXIuXG5cblxuICAgICAgd3JhcHBlci5ndWlkID0gbGlzdGVuZXIuZ3VpZDtcbiAgICAgIGxpc3Rlbih0YXJnZXQsICdhbnknLCB0eXBlLCB3cmFwcGVyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgbGlzdGVuZXIocykgZnJvbSBldmVudChzKSBvbiBhbiBldmVudGVkIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfEFycmF5fEVsZW1lbnR8T2JqZWN0fSBbdGFyZ2V0T3JUeXBlXVxuICAgKiAgICAgICAgIElmIHRoaXMgaXMgYSBzdHJpbmcgb3IgYXJyYXksIGl0IHJlcHJlc2VudHMgdGhlIGV2ZW50IHR5cGUocykuXG4gICAqXG4gICAqICAgICAgICAgQW5vdGhlciBldmVudGVkIG9iamVjdCBjYW4gYmUgcGFzc2VkIGhlcmUgaW5zdGVhZCwgaW4gd2hpY2ggY2FzZVxuICAgKiAgICAgICAgIEFMTCAzIGFyZ3VtZW50cyBhcmUgX3JlcXVpcmVkXy5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfEFycmF5fEZ1bmN0aW9ufSBbdHlwZU9yTGlzdGVuZXJdXG4gICAqICAgICAgICAgSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBhIHN0cmluZyBvciBhcnJheSwgdGhpcyBtYXkgYmUgdGhlXG4gICAqICAgICAgICAgbGlzdGVuZXIgZnVuY3Rpb24uIE90aGVyd2lzZSwgdGhpcyBpcyBhIHN0cmluZyBvciBhcnJheSBvZiBldmVudFxuICAgKiAgICAgICAgIHR5cGUocykuXG4gICAqXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbbGlzdGVuZXJdXG4gICAqICAgICAgICAgSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBhbm90aGVyIGV2ZW50ZWQgb2JqZWN0LCB0aGlzIHdpbGwgYmVcbiAgICogICAgICAgICB0aGUgbGlzdGVuZXIgZnVuY3Rpb247IG90aGVyd2lzZSwgX2FsbF8gbGlzdGVuZXJzIGJvdW5kIHRvIHRoZVxuICAgKiAgICAgICAgIGV2ZW50IHR5cGUocykgd2lsbCBiZSByZW1vdmVkLlxuICAgKi9cbiAgb2ZmOiBmdW5jdGlvbiBvZmYkMSh0YXJnZXRPclR5cGUsIHR5cGVPckxpc3RlbmVyLCBsaXN0ZW5lcikge1xuICAgIC8vIFRhcmdldGluZyB0aGlzIGV2ZW50ZWQgb2JqZWN0LlxuICAgIGlmICghdGFyZ2V0T3JUeXBlIHx8IGlzVmFsaWRFdmVudFR5cGUodGFyZ2V0T3JUeXBlKSkge1xuICAgICAgb2ZmKHRoaXMuZXZlbnRCdXNFbF8sIHRhcmdldE9yVHlwZSwgdHlwZU9yTGlzdGVuZXIpOyAvLyBUYXJnZXRpbmcgYW5vdGhlciBldmVudGVkIG9iamVjdC5cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHRhcmdldCA9IHRhcmdldE9yVHlwZTtcbiAgICAgIHZhciB0eXBlID0gdHlwZU9yTGlzdGVuZXI7IC8vIEZhaWwgZmFzdCBhbmQgaW4gYSBtZWFuaW5nZnVsIHdheSFcblxuICAgICAgdmFsaWRhdGVUYXJnZXQodGFyZ2V0KTtcbiAgICAgIHZhbGlkYXRlRXZlbnRUeXBlKHR5cGUpO1xuICAgICAgdmFsaWRhdGVMaXN0ZW5lcihsaXN0ZW5lcik7IC8vIEVuc3VyZSB0aGVyZSdzIGF0IGxlYXN0IGEgZ3VpZCwgZXZlbiBpZiB0aGUgZnVuY3Rpb24gaGFzbid0IGJlZW4gdXNlZFxuXG4gICAgICBsaXN0ZW5lciA9IGJpbmQodGhpcywgbGlzdGVuZXIpOyAvLyBSZW1vdmUgdGhlIGRpc3Bvc2UgbGlzdGVuZXIgb24gdGhpcyBldmVudGVkIG9iamVjdCwgd2hpY2ggd2FzIGdpdmVuXG4gICAgICAvLyB0aGUgc2FtZSBndWlkIGFzIHRoZSBldmVudCBsaXN0ZW5lciBpbiBvbigpLlxuXG4gICAgICB0aGlzLm9mZignZGlzcG9zZScsIGxpc3RlbmVyKTtcblxuICAgICAgaWYgKHRhcmdldC5ub2RlTmFtZSkge1xuICAgICAgICBvZmYodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIG9mZih0YXJnZXQsICdkaXNwb3NlJywgbGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIGlmIChpc0V2ZW50ZWQodGFyZ2V0KSkge1xuICAgICAgICB0YXJnZXQub2ZmKHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgdGFyZ2V0Lm9mZignZGlzcG9zZScsIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpcmUgYW4gZXZlbnQgb24gdGhpcyBldmVudGVkIG9iamVjdCwgY2F1c2luZyBpdHMgbGlzdGVuZXJzIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQHBhcmFtICAge3N0cmluZ3xPYmplY3R9IGV2ZW50XG4gICAqICAgICAgICAgIEFuIGV2ZW50IHR5cGUgb3IgYW4gb2JqZWN0IHdpdGggYSB0eXBlIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0gICB7T2JqZWN0fSBbaGFzaF1cbiAgICogICAgICAgICAgQW4gYWRkaXRpb25hbCBvYmplY3QgdG8gcGFzcyBhbG9uZyB0byBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgIFdoZXRoZXIgb3Igbm90IHRoZSBkZWZhdWx0IGJlaGF2aW9yIHdhcyBwcmV2ZW50ZWQuXG4gICAqL1xuICB0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyJDEoZXZlbnQsIGhhc2gpIHtcbiAgICByZXR1cm4gdHJpZ2dlcih0aGlzLmV2ZW50QnVzRWxfLCBldmVudCwgaGFzaCk7XG4gIH1cbn07XG4vKipcbiAqIEFwcGxpZXMge0BsaW5rIG1vZHVsZTpldmVudGVkfkV2ZW50ZWRNaXhpbnxFdmVudGVkTWl4aW59IHRvIGEgdGFyZ2V0IG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IHRhcmdldFxuICogICAgICAgICBUaGUgb2JqZWN0IHRvIHdoaWNoIHRvIGFkZCBldmVudCBtZXRob2RzLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gW29wdGlvbnM9e31dXG4gKiAgICAgICAgIE9wdGlvbnMgZm9yIGN1c3RvbWl6aW5nIHRoZSBtaXhpbiBiZWhhdmlvci5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IFtvcHRpb25zLmV2ZW50QnVzS2V5XVxuICogICAgICAgICBCeSBkZWZhdWx0LCBhZGRzIGEgYGV2ZW50QnVzRWxfYCBET00gZWxlbWVudCB0byB0aGUgdGFyZ2V0IG9iamVjdCxcbiAqICAgICAgICAgd2hpY2ggaXMgdXNlZCBhcyBhbiBldmVudCBidXMuIElmIHRoZSB0YXJnZXQgb2JqZWN0IGFscmVhZHkgaGFzIGFcbiAqICAgICAgICAgRE9NIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgdXNlZCwgcGFzcyBpdHMga2V5IGhlcmUuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogICAgICAgICBUaGUgdGFyZ2V0IG9iamVjdC5cbiAqL1xuXG5mdW5jdGlvbiBldmVudGVkKHRhcmdldCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIGV2ZW50QnVzS2V5ID0gX29wdGlvbnMuZXZlbnRCdXNLZXk7IC8vIFNldCBvciBjcmVhdGUgdGhlIGV2ZW50QnVzRWxfLlxuXG4gIGlmIChldmVudEJ1c0tleSkge1xuICAgIGlmICghdGFyZ2V0W2V2ZW50QnVzS2V5XS5ub2RlTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGV2ZW50QnVzS2V5IFxcXCJcIiArIGV2ZW50QnVzS2V5ICsgXCJcXFwiIGRvZXMgbm90IHJlZmVyIHRvIGFuIGVsZW1lbnQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5ldmVudEJ1c0VsXyA9IHRhcmdldFtldmVudEJ1c0tleV07XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LmV2ZW50QnVzRWxfID0gY3JlYXRlRWwoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtZXZlbnQtYnVzJ1xuICAgIH0pO1xuICB9XG5cbiAgYXNzaWduKHRhcmdldCwgRXZlbnRlZE1peGluKTtcblxuICBpZiAodGFyZ2V0LmV2ZW50ZWRDYWxsYmFja3MpIHtcbiAgICB0YXJnZXQuZXZlbnRlZENhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfSAvLyBXaGVuIGFueSBldmVudGVkIG9iamVjdCBpcyBkaXNwb3NlZCwgaXQgcmVtb3ZlcyBhbGwgaXRzIGxpc3RlbmVycy5cblxuXG4gIHRhcmdldC5vbignZGlzcG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICB0YXJnZXQub2ZmKCk7XG4gICAgd2luZG93JDEuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0YXJnZXQuZXZlbnRCdXNFbF8gPSBudWxsO1xuICAgIH0sIDApO1xuICB9KTtcbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBAZmlsZSBtaXhpbnMvc3RhdGVmdWwuanNcbiAqIEBtb2R1bGUgc3RhdGVmdWxcbiAqL1xuLyoqXG4gKiBDb250YWlucyBtZXRob2RzIHRoYXQgcHJvdmlkZSBzdGF0ZWZ1bG5lc3MgdG8gYW4gb2JqZWN0IHdoaWNoIGlzIHBhc3NlZFxuICogdG8ge0BsaW5rIG1vZHVsZTpzdGF0ZWZ1bH0uXG4gKlxuICogQG1peGluIFN0YXRlZnVsTWl4aW5cbiAqL1xuXG52YXIgU3RhdGVmdWxNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEEgaGFzaCBjb250YWluaW5nIGFyYml0cmFyeSBrZXlzIGFuZCB2YWx1ZXMgcmVwcmVzZW50aW5nIHRoZSBzdGF0ZSBvZlxuICAgKiB0aGUgb2JqZWN0LlxuICAgKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGU6IHt9LFxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHN0YXRlIG9mIGFuIG9iamVjdCBieSBtdXRhdGluZyBpdHNcbiAgICoge0BsaW5rIG1vZHVsZTpzdGF0ZWZ1bH5TdGF0ZWZ1bE1peGluLnN0YXRlfHN0YXRlfSBvYmplY3QgaW4gcGxhY2UuXG4gICAqXG4gICAqIEBmaXJlcyAgIG1vZHVsZTpzdGF0ZWZ1bH5TdGF0ZWZ1bE1peGluI3N0YXRlY2hhbmdlZFxuICAgKiBAcGFyYW0gICB7T2JqZWN0fEZ1bmN0aW9ufSBzdGF0ZVVwZGF0ZXNcbiAgICogICAgICAgICAgQSBuZXcgc2V0IG9mIHByb3BlcnRpZXMgdG8gc2hhbGxvdy1tZXJnZSBpbnRvIHRoZSBwbHVnaW4gc3RhdGUuXG4gICAqICAgICAgICAgIENhbiBiZSBhIHBsYWluIG9iamVjdCBvciBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHBsYWluIG9iamVjdC5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fHVuZGVmaW5lZH1cbiAgICogICAgICAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgY2hhbmdlcyB0aGF0IG9jY3VycmVkLiBJZiBubyBjaGFuZ2VzXG4gICAqICAgICAgICAgIG9jY3VycmVkLCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgc2V0U3RhdGU6IGZ1bmN0aW9uIHNldFN0YXRlKHN0YXRlVXBkYXRlcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBTdXBwb3J0IHByb3ZpZGluZyB0aGUgYHN0YXRlVXBkYXRlc2Agc3RhdGUgYXMgYSBmdW5jdGlvbi5cbiAgICBpZiAodHlwZW9mIHN0YXRlVXBkYXRlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGVVcGRhdGVzID0gc3RhdGVVcGRhdGVzKCk7XG4gICAgfVxuXG4gICAgdmFyIGNoYW5nZXM7XG4gICAgZWFjaChzdGF0ZVVwZGF0ZXMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAvLyBSZWNvcmQgdGhlIGNoYW5nZSBpZiB0aGUgdmFsdWUgaXMgZGlmZmVyZW50IGZyb20gd2hhdCdzIGluIHRoZVxuICAgICAgLy8gY3VycmVudCBzdGF0ZS5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZVtrZXldICE9PSB2YWx1ZSkge1xuICAgICAgICBjaGFuZ2VzID0gY2hhbmdlcyB8fCB7fTtcbiAgICAgICAgY2hhbmdlc1trZXldID0ge1xuICAgICAgICAgIGZyb206IF90aGlzLnN0YXRlW2tleV0sXG4gICAgICAgICAgdG86IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnN0YXRlW2tleV0gPSB2YWx1ZTtcbiAgICB9KTsgLy8gT25seSB0cmlnZ2VyIFwic3RhdGVjaGFuZ2VcIiBpZiB0aGVyZSB3ZXJlIGNoYW5nZXMgQU5EIHdlIGhhdmUgYSB0cmlnZ2VyXG4gICAgLy8gZnVuY3Rpb24uIFRoaXMgYWxsb3dzIHVzIHRvIG5vdCByZXF1aXJlIHRoYXQgdGhlIHRhcmdldCBvYmplY3QgYmUgYW5cbiAgICAvLyBldmVudGVkIG9iamVjdC5cblxuICAgIGlmIChjaGFuZ2VzICYmIGlzRXZlbnRlZCh0aGlzKSkge1xuICAgICAgLyoqXG4gICAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgYm90aFxuICAgICAgICoge0BsaW5rIG1vZHVsZTpzdGF0ZWZ1bHxzdGF0ZWZ1bH0gYW5kIHtAbGluayBtb2R1bGU6ZXZlbnRlZHxldmVudGVkfVxuICAgICAgICogaW5kaWNhdGluZyB0aGF0IGl0cyBzdGF0ZSBoYXMgY2hhbmdlZC5cbiAgICAgICAqXG4gICAgICAgKiBAZXZlbnQgICAgbW9kdWxlOnN0YXRlZnVsflN0YXRlZnVsTWl4aW4jc3RhdGVjaGFuZ2VkXG4gICAgICAgKiBAdHlwZSAgICAge09iamVjdH1cbiAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjaGFuZ2VzXG4gICAgICAgKiAgICAgICAgICAgQSBoYXNoIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgdGhhdCB3ZXJlIGNoYW5nZWQgYW5kXG4gICAgICAgKiAgICAgICAgICAgdGhlIHZhbHVlcyB0aGV5IHdlcmUgY2hhbmdlZCBgZnJvbWAgYW5kIGB0b2AuXG4gICAgICAgKi9cbiAgICAgIHRoaXMudHJpZ2dlcih7XG4gICAgICAgIGNoYW5nZXM6IGNoYW5nZXMsXG4gICAgICAgIHR5cGU6ICdzdGF0ZWNoYW5nZWQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hhbmdlcztcbiAgfVxufTtcbi8qKlxuICogQXBwbGllcyB7QGxpbmsgbW9kdWxlOnN0YXRlZnVsflN0YXRlZnVsTWl4aW58U3RhdGVmdWxNaXhpbn0gdG8gYSB0YXJnZXRcbiAqIG9iamVjdC5cbiAqXG4gKiBJZiB0aGUgdGFyZ2V0IG9iamVjdCBpcyB7QGxpbmsgbW9kdWxlOmV2ZW50ZWR8ZXZlbnRlZH0gYW5kIGhhcyBhXG4gKiBgaGFuZGxlU3RhdGVDaGFuZ2VkYCBtZXRob2QsIHRoYXQgbWV0aG9kIHdpbGwgYmUgYXV0b21hdGljYWxseSBib3VuZCB0byB0aGVcbiAqIGBzdGF0ZWNoYW5nZWRgIGV2ZW50IG9uIGl0c2VsZi5cbiAqXG4gKiBAcGFyYW0gICB7T2JqZWN0fSB0YXJnZXRcbiAqICAgICAgICAgIFRoZSBvYmplY3QgdG8gYmUgbWFkZSBzdGF0ZWZ1bC5cbiAqXG4gKiBAcGFyYW0gICB7T2JqZWN0fSBbZGVmYXVsdFN0YXRlXVxuICogICAgICAgICAgQSBkZWZhdWx0IHNldCBvZiBwcm9wZXJ0aWVzIHRvIHBvcHVsYXRlIHRoZSBuZXdseS1zdGF0ZWZ1bCBvYmplY3Qnc1xuICogICAgICAgICAgYHN0YXRlYCBwcm9wZXJ0eS5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiAgICAgICAgICBSZXR1cm5zIHRoZSBgdGFyZ2V0YC5cbiAqL1xuXG5mdW5jdGlvbiBzdGF0ZWZ1bCh0YXJnZXQsIGRlZmF1bHRTdGF0ZSkge1xuICBhc3NpZ24odGFyZ2V0LCBTdGF0ZWZ1bE1peGluKTsgLy8gVGhpcyBoYXBwZW5zIGFmdGVyIHRoZSBtaXhpbmctaW4gYmVjYXVzZSB3ZSBuZWVkIHRvIHJlcGxhY2UgdGhlIGBzdGF0ZWBcbiAgLy8gYWRkZWQgaW4gdGhhdCBzdGVwLlxuXG4gIHRhcmdldC5zdGF0ZSA9IGFzc2lnbih7fSwgdGFyZ2V0LnN0YXRlLCBkZWZhdWx0U3RhdGUpOyAvLyBBdXRvLWJpbmQgdGhlIGBoYW5kbGVTdGF0ZUNoYW5nZWRgIG1ldGhvZCBvZiB0aGUgdGFyZ2V0IG9iamVjdCBpZiBpdCBleGlzdHMuXG5cbiAgaWYgKHR5cGVvZiB0YXJnZXQuaGFuZGxlU3RhdGVDaGFuZ2VkID09PSAnZnVuY3Rpb24nICYmIGlzRXZlbnRlZCh0YXJnZXQpKSB7XG4gICAgdGFyZ2V0Lm9uKCdzdGF0ZWNoYW5nZWQnLCB0YXJnZXQuaGFuZGxlU3RhdGVDaGFuZ2VkKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQGZpbGUgc3RyaW5nLWNhc2VzLmpzXG4gKiBAbW9kdWxlIHRvLWxvd2VyLWNhc2VcbiAqL1xuXG4vKipcbiAqIExvd2VyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqICAgICAgICBTdHJpbmcgdG8gYmUgbG93ZXJjYXNlZFxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgVGhlIHN0cmluZyB3aXRoIGEgbG93ZXJjYXNlZCBmaXJzdCBsZXR0ZXJcbiAqL1xudmFyIHRvTG93ZXJDYXNlID0gZnVuY3Rpb24gdG9Mb3dlckNhc2Uoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLy4vLCBmdW5jdGlvbiAodykge1xuICAgIHJldHVybiB3LnRvTG93ZXJDYXNlKCk7XG4gIH0pO1xufTtcbi8qKlxuICogVXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogICAgICAgIFN0cmluZyB0byBiZSB1cHBlcmNhc2VkXG4gKlxuICogQHJldHVybiB7c3RyaW5nfVxuICogICAgICAgICBUaGUgc3RyaW5nIHdpdGggYW4gdXBwZXJjYXNlZCBmaXJzdCBsZXR0ZXJcbiAqL1xuXG52YXIgdG9UaXRsZUNhc2UgPSBmdW5jdGlvbiB0b1RpdGxlQ2FzZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLi8sIGZ1bmN0aW9uICh3KSB7XG4gICAgcmV0dXJuIHcudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59O1xuLyoqXG4gKiBDb21wYXJlcyB0aGUgVGl0bGVDYXNlIHZlcnNpb25zIG9mIHRoZSB0d28gc3RyaW5ncyBmb3IgZXF1YWxpdHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cjFcbiAqICAgICAgICBUaGUgZmlyc3Qgc3RyaW5nIHRvIGNvbXBhcmVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyMlxuICogICAgICAgIFRoZSBzZWNvbmQgc3RyaW5nIHRvIGNvbXBhcmVcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBXaGV0aGVyIHRoZSBUaXRsZUNhc2UgdmVyc2lvbnMgb2YgdGhlIHN0cmluZ3MgYXJlIGVxdWFsXG4gKi9cblxudmFyIHRpdGxlQ2FzZUVxdWFscyA9IGZ1bmN0aW9uIHRpdGxlQ2FzZUVxdWFscyhzdHIxLCBzdHIyKSB7XG4gIHJldHVybiB0b1RpdGxlQ2FzZShzdHIxKSA9PT0gdG9UaXRsZUNhc2Uoc3RyMik7XG59O1xuXG4vKipcbiAqIEBmaWxlIG1lcmdlLW9wdGlvbnMuanNcbiAqIEBtb2R1bGUgbWVyZ2Utb3B0aW9uc1xuICovXG4vKipcbiAqIE1lcmdlIHR3byBvYmplY3RzIHJlY3Vyc2l2ZWx5LlxuICpcbiAqIFBlcmZvcm1zIGEgZGVlcCBtZXJnZSBsaWtlXG4gKiB7QGxpbmsgaHR0cHM6Ly9sb2Rhc2guY29tL2RvY3MvNC4xNy4xMCNtZXJnZXxsb2Rhc2gubWVyZ2V9LCBidXQgb25seSBtZXJnZXNcbiAqIHBsYWluIG9iamVjdHMgKG5vdCBhcnJheXMsIGVsZW1lbnRzLCBvciBhbnl0aGluZyBlbHNlKS5cbiAqXG4gKiBOb24tcGxhaW4gb2JqZWN0IHZhbHVlcyB3aWxsIGJlIGNvcGllZCBkaXJlY3RseSBmcm9tIHRoZSByaWdodC1tb3N0XG4gKiBhcmd1bWVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0gICB7T2JqZWN0W119IHNvdXJjZXNcbiAqICAgICAgICAgIE9uZSBvciBtb3JlIG9iamVjdHMgdG8gbWVyZ2UgaW50byBhIG5ldyBvYmplY3QuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogICAgICAgICAgQSBuZXcgb2JqZWN0IHRoYXQgaXMgdGhlIG1lcmdlZCByZXN1bHQgb2YgYWxsIHNvdXJjZXMuXG4gKi9cblxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zKCkge1xuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNvdXJjZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc291cmNlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlYWNoKHNvdXJjZSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICghaXNQbGFpbih2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzUGxhaW4ocmVzdWx0W2tleV0pKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0ge307XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2VPcHRpb25zKHJlc3VsdFtrZXldLCB2YWx1ZSk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgTWFwU2hhbSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hcFNoYW0oKSB7XG4gICAgdGhpcy5tYXBfID0ge307XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWFwU2hhbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhcyA9IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIHRoaXMubWFwXztcbiAgfTtcblxuICBfcHJvdG9bXCJkZWxldGVcIl0gPSBmdW5jdGlvbiBfZGVsZXRlKGtleSkge1xuICAgIHZhciBoYXMgPSB0aGlzLmhhcyhrZXkpO1xuICAgIGRlbGV0ZSB0aGlzLm1hcF9ba2V5XTtcbiAgICByZXR1cm4gaGFzO1xuICB9O1xuXG4gIF9wcm90by5zZXQgPSBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMuc2V0X1trZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMubWFwXykge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcF9ba2V5XSwga2V5LCB0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIE1hcFNoYW07XG59KCk7XG5cbnZhciBNYXAkMSA9IHdpbmRvdyQxLk1hcCA/IHdpbmRvdyQxLk1hcCA6IE1hcFNoYW07XG5cbnZhciBTZXRTaGFtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2V0U2hhbSgpIHtcbiAgICB0aGlzLnNldF8gPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTZXRTaGFtLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFzID0gZnVuY3Rpb24gaGFzKGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gdGhpcy5zZXRfO1xuICB9O1xuXG4gIF9wcm90b1tcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uIF9kZWxldGUoa2V5KSB7XG4gICAgdmFyIGhhcyA9IHRoaXMuaGFzKGtleSk7XG4gICAgZGVsZXRlIHRoaXMuc2V0X1trZXldO1xuICAgIHJldHVybiBoYXM7XG4gIH07XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChrZXkpIHtcbiAgICB0aGlzLnNldF9ba2V5XSA9IDE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuc2V0Xykge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCBrZXksIGtleSwgdGhpcyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTZXRTaGFtO1xufSgpO1xuXG52YXIgU2V0ID0gd2luZG93JDEuU2V0ID8gd2luZG93JDEuU2V0IDogU2V0U2hhbTtcblxuLyoqXG4gKiBQbGF5ZXIgQ29tcG9uZW50IC0gQmFzZSBjbGFzcyBmb3IgYWxsIFVJIG9iamVjdHNcbiAqXG4gKiBAZmlsZSBjb21wb25lbnQuanNcbiAqL1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgVUkgQ29tcG9uZW50cy5cbiAqIENvbXBvbmVudHMgYXJlIFVJIG9iamVjdHMgd2hpY2ggcmVwcmVzZW50IGJvdGggYSBqYXZhc2NyaXB0IG9iamVjdCBhbmQgYW4gZWxlbWVudFxuICogaW4gdGhlIERPTS4gVGhleSBjYW4gYmUgY2hpbGRyZW4gb2Ygb3RoZXIgY29tcG9uZW50cywgYW5kIGNhbiBoYXZlXG4gKiBjaGlsZHJlbiB0aGVtc2VsdmVzLlxuICpcbiAqIENvbXBvbmVudHMgY2FuIGFsc28gdXNlIG1ldGhvZHMgZnJvbSB7QGxpbmsgRXZlbnRUYXJnZXR9XG4gKi9cblxudmFyIENvbXBvbmVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBjb21wb25lbnQgaXMgcmVhZHkuIERvZXMgbm90IGhhdmUgYW55XG4gICAqIHBhcmFtdGVycyBhbmQgYW55IGNhbGxiYWNrIHZhbHVlIHdpbGwgYmUgaWdub3JlZC5cbiAgICpcbiAgICogQGNhbGxiYWNrIENvbXBvbmVudH5SZWFkeUNhbGxiYWNrXG4gICAqIEB0aGlzIENvbXBvbmVudFxuICAgKi9cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3RbXX0gW29wdGlvbnMuY2hpbGRyZW5dXG4gICAqICAgICAgICBBbiBhcnJheSBvZiBjaGlsZHJlbiBvYmplY3RzIHRvIGludGlhbGl6ZSB0aGlzIGNvbXBvbmVudCB3aXRoLiBDaGlsZHJlbiBvYmplY3RzIGhhdmVcbiAgICogICAgICAgIGEgbmFtZSBwcm9wZXJ0eSB0aGF0IHdpbGwgYmUgdXNlZCBpZiBtb3JlIHRoYW4gb25lIGNvbXBvbmVudCBvZiB0aGUgc2FtZSB0eXBlIG5lZWRzIHRvIGJlXG4gICAqICAgICAgICBhZGRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtDb21wb25lbnR+UmVhZHlDYWxsYmFja30gW3JlYWR5XVxuICAgKiAgICAgICAgRnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCB3aGVuIHRoZSBgQ29tcG9uZW50YCBpcyByZWFkeS5cbiAgICovXG4gIGZ1bmN0aW9uIENvbXBvbmVudChwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB7XG4gICAgLy8gVGhlIGNvbXBvbmVudCBtaWdodCBiZSB0aGUgcGxheWVyIGl0c2VsZiBhbmQgd2UgY2FuJ3QgcGFzcyBgdGhpc2AgdG8gc3VwZXJcbiAgICBpZiAoIXBsYXllciAmJiB0aGlzLnBsYXkpIHtcbiAgICAgIHRoaXMucGxheWVyXyA9IHBsYXllciA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXJfID0gcGxheWVyO1xuICAgIH1cblxuICAgIHRoaXMuaXNEaXNwb3NlZF8gPSBmYWxzZTsgLy8gSG9sZCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgY29tcG9uZW50IHZpYSBgYWRkQ2hpbGRgIG1ldGhvZFxuXG4gICAgdGhpcy5wYXJlbnRDb21wb25lbnRfID0gbnVsbDsgLy8gTWFrZSBhIGNvcHkgb2YgcHJvdG90eXBlLm9wdGlvbnNfIHRvIHByb3RlY3QgYWdhaW5zdCBvdmVycmlkaW5nIGRlZmF1bHRzXG5cbiAgICB0aGlzLm9wdGlvbnNfID0gbWVyZ2VPcHRpb25zKHt9LCB0aGlzLm9wdGlvbnNfKTsgLy8gVXBkYXRlZCBvcHRpb25zIHdpdGggc3VwcGxpZWQgb3B0aW9uc1xuXG4gICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uc18gPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zXywgb3B0aW9ucyk7IC8vIEdldCBJRCBmcm9tIG9wdGlvbnMgb3Igb3B0aW9ucyBlbGVtZW50IGlmIG9uZSBpcyBzdXBwbGllZFxuXG4gICAgdGhpcy5pZF8gPSBvcHRpb25zLmlkIHx8IG9wdGlvbnMuZWwgJiYgb3B0aW9ucy5lbC5pZDsgLy8gSWYgdGhlcmUgd2FzIG5vIElEIGZyb20gdGhlIG9wdGlvbnMsIGdlbmVyYXRlIG9uZVxuXG4gICAgaWYgKCF0aGlzLmlkXykge1xuICAgICAgLy8gRG9uJ3QgcmVxdWlyZSB0aGUgcGxheWVyIElEIGZ1bmN0aW9uIGluIHRoZSBjYXNlIG9mIG1vY2sgcGxheWVyc1xuICAgICAgdmFyIGlkID0gcGxheWVyICYmIHBsYXllci5pZCAmJiBwbGF5ZXIuaWQoKSB8fCAnbm9fcGxheWVyJztcbiAgICAgIHRoaXMuaWRfID0gaWQgKyBcIl9jb21wb25lbnRfXCIgKyBuZXdHVUlEKCk7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lXyA9IG9wdGlvbnMubmFtZSB8fCBudWxsOyAvLyBDcmVhdGUgZWxlbWVudCBpZiBvbmUgd2Fzbid0IHByb3ZpZGVkIGluIG9wdGlvbnNcblxuICAgIGlmIChvcHRpb25zLmVsKSB7XG4gICAgICB0aGlzLmVsXyA9IG9wdGlvbnMuZWw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmNyZWF0ZUVsICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5lbF8gPSB0aGlzLmNyZWF0ZUVsKCk7XG4gICAgfSAvLyBpZiBldmVudGVkIGlzIGFueXRoaW5nIGV4Y2VwdCBmYWxzZSwgd2Ugd2FudCB0byBtaXhpbiBpbiBldmVudGVkXG5cblxuICAgIGlmIChvcHRpb25zLmV2ZW50ZWQgIT09IGZhbHNlKSB7XG4gICAgICAvLyBNYWtlIHRoaXMgYW4gZXZlbnRlZCBvYmplY3QgYW5kIHVzZSBgZWxfYCwgaWYgYXZhaWxhYmxlLCBhcyBpdHMgZXZlbnQgYnVzXG4gICAgICBldmVudGVkKHRoaXMsIHtcbiAgICAgICAgZXZlbnRCdXNLZXk6IHRoaXMuZWxfID8gJ2VsXycgOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0ZWZ1bCh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRTdGF0ZSk7XG4gICAgdGhpcy5jaGlsZHJlbl8gPSBbXTtcbiAgICB0aGlzLmNoaWxkSW5kZXhfID0ge307XG4gICAgdGhpcy5jaGlsZE5hbWVJbmRleF8gPSB7fTtcbiAgICB0aGlzLnNldFRpbWVvdXRJZHNfID0gbmV3IFNldCgpO1xuICAgIHRoaXMuc2V0SW50ZXJ2YWxJZHNfID0gbmV3IFNldCgpO1xuICAgIHRoaXMucmFmSWRzXyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLm5hbWVkUmFmc18gPSBuZXcgTWFwJDEoKTtcbiAgICB0aGlzLmNsZWFyaW5nVGltZXJzT25EaXNwb3NlXyA9IGZhbHNlOyAvLyBBZGQgYW55IGNoaWxkIGNvbXBvbmVudHMgaW4gb3B0aW9uc1xuXG4gICAgaWYgKG9wdGlvbnMuaW5pdENoaWxkcmVuICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5pbml0Q2hpbGRyZW4oKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlYWR5KHJlYWR5KTsgLy8gRG9uJ3Qgd2FudCB0byB0cmlnZ2VyIHJlYWR5IGhlcmUgb3IgaXQgd2lsbCBiZWZvcmUgaW5pdCBpcyBhY3R1YWxseVxuICAgIC8vIGZpbmlzaGVkIGZvciBhbGwgY2hpbGRyZW4gdGhhdCBydW4gdGhpcyBjb25zdHJ1Y3RvclxuXG4gICAgaWYgKG9wdGlvbnMucmVwb3J0VG91Y2hBY3Rpdml0eSAhPT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuZW5hYmxlVG91Y2hBY3Rpdml0eSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGlzcG9zZSBvZiB0aGUgYENvbXBvbmVudGAgYW5kIGFsbCBjaGlsZCBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAZmlyZXMgQ29tcG9uZW50I2Rpc3Bvc2VcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgLy8gQmFpbCBvdXQgaWYgdGhlIGNvbXBvbmVudCBoYXMgYWxyZWFkeSBiZWVuIGRpc3Bvc2VkLlxuICAgIGlmICh0aGlzLmlzRGlzcG9zZWRfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCB3aGVuIGEgYENvbXBvbmVudGAgaXMgZGlzcG9zZWQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgQ29tcG9uZW50I2Rpc3Bvc2VcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtidWJibGVzPWZhbHNlXVxuICAgICAqICAgICAgICAgICBzZXQgdG8gZmFsc2Ugc28gdGhhdCB0aGUgZGlzcG9zZSBldmVudCBkb2VzIG5vdFxuICAgICAqICAgICAgICAgICBidWJibGUgdXBcbiAgICAgKi9cblxuXG4gICAgdGhpcy50cmlnZ2VyKHtcbiAgICAgIHR5cGU6ICdkaXNwb3NlJyxcbiAgICAgIGJ1YmJsZXM6IGZhbHNlXG4gICAgfSk7XG4gICAgdGhpcy5pc0Rpc3Bvc2VkXyA9IHRydWU7IC8vIERpc3Bvc2UgYWxsIGNoaWxkcmVuLlxuXG4gICAgaWYgKHRoaXMuY2hpbGRyZW5fKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5jaGlsZHJlbl8ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW5fW2ldLmRpc3Bvc2UpIHtcbiAgICAgICAgICB0aGlzLmNoaWxkcmVuX1tpXS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIERlbGV0ZSBjaGlsZCByZWZlcmVuY2VzXG5cblxuICAgIHRoaXMuY2hpbGRyZW5fID0gbnVsbDtcbiAgICB0aGlzLmNoaWxkSW5kZXhfID0gbnVsbDtcbiAgICB0aGlzLmNoaWxkTmFtZUluZGV4XyA9IG51bGw7XG4gICAgdGhpcy5wYXJlbnRDb21wb25lbnRfID0gbnVsbDtcblxuICAgIGlmICh0aGlzLmVsXykge1xuICAgICAgLy8gUmVtb3ZlIGVsZW1lbnQgZnJvbSBET01cbiAgICAgIGlmICh0aGlzLmVsXy5wYXJlbnROb2RlKSB7XG4gICAgICAgIHRoaXMuZWxfLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbF8pO1xuICAgICAgfVxuXG4gICAgICBpZiAoRG9tRGF0YS5oYXModGhpcy5lbF8pKSB7XG4gICAgICAgIERvbURhdGFbXCJkZWxldGVcIl0odGhpcy5lbF8pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsXyA9IG51bGw7XG4gICAgfSAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIHRoZSBwbGF5ZXIgYWZ0ZXIgZGlzcG9zaW5nIG9mIHRoZSBlbGVtZW50XG5cblxuICAgIHRoaXMucGxheWVyXyA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZSB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvbmVudCBoYXMgYmVlbiBkaXNwb3NlZC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICBJZiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIGRpc3Bvc2VkLCB3aWxsIGJlIGB0cnVlYC4gT3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pc0Rpc3Bvc2VkID0gZnVuY3Rpb24gaXNEaXNwb3NlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLmlzRGlzcG9zZWRfKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSB7QGxpbmsgUGxheWVyfSB0aGF0IHRoZSBgQ29tcG9uZW50YCBoYXMgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEByZXR1cm4ge1BsYXllcn1cbiAgICogICAgICAgICBUaGUgcGxheWVyIHRoYXQgdGhpcyBgQ29tcG9uZW50YCBoYXMgYXR0YWNoZWQgdG8uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBsYXllciA9IGZ1bmN0aW9uIHBsYXllcigpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXJfO1xuICB9XG4gIC8qKlxuICAgKiBEZWVwIG1lcmdlIG9mIG9wdGlvbnMgb2JqZWN0cyB3aXRoIG5ldyBvcHRpb25zLlxuICAgKiA+IE5vdGU6IFdoZW4gYm90aCBgb2JqYCBhbmQgYG9wdGlvbnNgIGNvbnRhaW4gcHJvcGVydGllcyB3aG9zZSB2YWx1ZXMgYXJlIG9iamVjdHMuXG4gICAqICAgICAgICAgVGhlIHR3byBwcm9wZXJ0aWVzIGdldCBtZXJnZWQgdXNpbmcge0BsaW5rIG1vZHVsZTptZXJnZU9wdGlvbnN9XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICogICAgICAgIFRoZSBvYmplY3QgdGhhdCBjb250YWlucyBuZXcgb3B0aW9ucy5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiAgICAgICAgIEEgbmV3IG9iamVjdCBvZiBgdGhpcy5vcHRpb25zX2AgYW5kIGBvYmpgIG1lcmdlZCB0b2dldGhlci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub3B0aW9ucyA9IGZ1bmN0aW9uIG9wdGlvbnMob2JqKSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNfO1xuICAgIH1cblxuICAgIHRoaXMub3B0aW9uc18gPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zXywgb2JqKTtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zXztcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBgQ29tcG9uZW50YHMgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgRE9NIGVsZW1lbnQgZm9yIHRoaXMgYENvbXBvbmVudGAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVsID0gZnVuY3Rpb24gZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgcyBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0YWdOYW1lXVxuICAgKiAgICAgICAgRWxlbWVudCdzIERPTSBub2RlIHR5cGUuIGUuZy4gJ2RpdidcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXVxuICAgKiAgICAgICAgQW4gb2JqZWN0IG9mIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgc2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW2F0dHJpYnV0ZXNdXG4gICAqICAgICAgICBBbiBvYmplY3Qgb2YgYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSBzZXQuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwkMSh0YWdOYW1lLCBwcm9wZXJ0aWVzLCBhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsKHRhZ05hbWUsIHByb3BlcnRpZXMsIGF0dHJpYnV0ZXMpO1xuICB9XG4gIC8qKlxuICAgKiBMb2NhbGl6ZSBhIHN0cmluZyBnaXZlbiB0aGUgc3RyaW5nIGluIGVuZ2xpc2guXG4gICAqXG4gICAqIElmIHRva2VucyBhcmUgcHJvdmlkZWQsIGl0J2xsIHRyeSBhbmQgcnVuIGEgc2ltcGxlIHRva2VuIHJlcGxhY2VtZW50IG9uIHRoZSBwcm92aWRlZCBzdHJpbmcuXG4gICAqIFRoZSB0b2tlbnMgaXQgbG9va3MgZm9yIGxvb2sgbGlrZSBgezF9YCB3aXRoIHRoZSBpbmRleCBiZWluZyAxLWluZGV4ZWQgaW50byB0aGUgdG9rZW5zIGFycmF5LlxuICAgKlxuICAgKiBJZiBhIGBkZWZhdWx0VmFsdWVgIGlzIHByb3ZpZGVkLCBpdCdsbCB1c2UgdGhhdCBvdmVyIGBzdHJpbmdgLFxuICAgKiBpZiBhIHZhbHVlIGlzbid0IGZvdW5kIGluIHByb3ZpZGVkIGxhbmd1YWdlIGZpbGVzLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3Ugd2FudCB0byBoYXZlIGEgZGVzY3JpcHRpdmUga2V5IGZvciB0b2tlbiByZXBsYWNlbWVudFxuICAgKiBidXQgaGF2ZSBhIHN1Y2NpbmN0IGxvY2FsaXplZCBzdHJpbmcgYW5kIG5vdCByZXF1aXJlIGBlbi5qc29uYCB0byBiZSBpbmNsdWRlZC5cbiAgICpcbiAgICogQ3VycmVudGx5LCBpdCBpcyB1c2VkIGZvciB0aGUgcHJvZ3Jlc3MgYmFyIHRpbWluZy5cbiAgICogYGBganNcbiAgICoge1xuICAgKiAgIFwicHJvZ3Jlc3MgYmFyIHRpbWluZzogY3VycmVudFRpbWU9ezF9IGR1cmF0aW9uPXsyfVwiOiBcInsxfSBvZiB7Mn1cIlxuICAgKiB9XG4gICAqIGBgYFxuICAgKiBJdCBpcyB0aGVuIHVzZWQgbGlrZSBzbzpcbiAgICogYGBganNcbiAgICogdGhpcy5sb2NhbGl6ZSgncHJvZ3Jlc3MgYmFyIHRpbWluZzogY3VycmVudFRpbWU9ezF9IGR1cmF0aW9uezJ9JyxcbiAgICogICAgICAgICAgICAgICBbdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCksIHRoaXMucGxheWVyXy5kdXJhdGlvbigpXSxcbiAgICogICAgICAgICAgICAgICAnezF9IG9mIHsyfScpO1xuICAgKiBgYGBcbiAgICpcbiAgICogV2hpY2ggb3V0cHV0cyBzb21ldGhpbmcgbGlrZTogYDAxOjIzIG9mIDI0OjU2YC5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgKiAgICAgICAgVGhlIHN0cmluZyB0byBsb2NhbGl6ZSBhbmQgdGhlIGtleSB0byBsb29rdXAgaW4gdGhlIGxhbmd1YWdlIGZpbGVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbdG9rZW5zXVxuICAgKiAgICAgICAgSWYgdGhlIGN1cnJlbnQgaXRlbSBoYXMgdG9rZW4gcmVwbGFjZW1lbnRzLCBwcm92aWRlIHRoZSB0b2tlbnMgaGVyZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0VmFsdWVdXG4gICAqICAgICAgICBEZWZhdWx0cyB0byBgc3RyaW5nYC4gQ2FuIGJlIGEgZGVmYXVsdCB2YWx1ZSB0byB1c2UgZm9yIHRva2VuIHJlcGxhY2VtZW50XG4gICAqICAgICAgICBpZiB0aGUgbG9va3VwIGtleSBpcyBuZWVkZWQgdG8gYmUgc2VwYXJhdGUuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgbG9jYWxpemVkIHN0cmluZyBvciBpZiBubyBsb2NhbGl6YXRpb24gZXhpc3RzIHRoZSBlbmdsaXNoIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubG9jYWxpemUgPSBmdW5jdGlvbiBsb2NhbGl6ZShzdHJpbmcsIHRva2VucywgZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWZhdWx0VmFsdWUgPSBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIGNvZGUgPSB0aGlzLnBsYXllcl8ubGFuZ3VhZ2UgJiYgdGhpcy5wbGF5ZXJfLmxhbmd1YWdlKCk7XG4gICAgdmFyIGxhbmd1YWdlcyA9IHRoaXMucGxheWVyXy5sYW5ndWFnZXMgJiYgdGhpcy5wbGF5ZXJfLmxhbmd1YWdlcygpO1xuICAgIHZhciBsYW5ndWFnZSA9IGxhbmd1YWdlcyAmJiBsYW5ndWFnZXNbY29kZV07XG4gICAgdmFyIHByaW1hcnlDb2RlID0gY29kZSAmJiBjb2RlLnNwbGl0KCctJylbMF07XG4gICAgdmFyIHByaW1hcnlMYW5nID0gbGFuZ3VhZ2VzICYmIGxhbmd1YWdlc1twcmltYXJ5Q29kZV07XG4gICAgdmFyIGxvY2FsaXplZFN0cmluZyA9IGRlZmF1bHRWYWx1ZTtcblxuICAgIGlmIChsYW5ndWFnZSAmJiBsYW5ndWFnZVtzdHJpbmddKSB7XG4gICAgICBsb2NhbGl6ZWRTdHJpbmcgPSBsYW5ndWFnZVtzdHJpbmddO1xuICAgIH0gZWxzZSBpZiAocHJpbWFyeUxhbmcgJiYgcHJpbWFyeUxhbmdbc3RyaW5nXSkge1xuICAgICAgbG9jYWxpemVkU3RyaW5nID0gcHJpbWFyeUxhbmdbc3RyaW5nXTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW5zKSB7XG4gICAgICBsb2NhbGl6ZWRTdHJpbmcgPSBsb2NhbGl6ZWRTdHJpbmcucmVwbGFjZSgvXFx7KFxcZCspXFx9L2csIGZ1bmN0aW9uIChtYXRjaCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdG9rZW5zW2luZGV4IC0gMV07XG4gICAgICAgIHZhciByZXQgPSB2YWx1ZTtcblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldCA9IG1hdGNoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsb2NhbGl6ZWRTdHJpbmc7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgYENvbXBvbmVudGBzIERPTSBlbGVtZW50LiBUaGlzIGlzIHdoZXJlIGNoaWxkcmVuIGdldCBpbnNlcnRlZC5cbiAgICogVGhpcyB3aWxsIHVzdWFsbHkgYmUgdGhlIHRoZSBzYW1lIGFzIHRoZSBlbGVtZW50IHJldHVybmVkIGluIHtAbGluayBDb21wb25lbnQjZWx9LlxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBjb250ZW50IGVsZW1lbnQgZm9yIHRoaXMgYENvbXBvbmVudGAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvbnRlbnRFbCA9IGZ1bmN0aW9uIGNvbnRlbnRFbCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50RWxfIHx8IHRoaXMuZWxfO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhpcyBgQ29tcG9uZW50YHMgSURcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBpZCBvZiB0aGlzIGBDb21wb25lbnRgXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmlkID0gZnVuY3Rpb24gaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWRfO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGBDb21wb25lbnRgcyBuYW1lLiBUaGUgbmFtZSBnZXRzIHVzZWQgdG8gcmVmZXJlbmNlIHRoZSBgQ29tcG9uZW50YFxuICAgKiBhbmQgaXMgc2V0IGR1cmluZyByZWdpc3RyYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgbmFtZSBvZiB0aGlzIGBDb21wb25lbnRgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5uYW1lID0gZnVuY3Rpb24gbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lXztcbiAgfVxuICAvKipcbiAgICogR2V0IGFuIGFycmF5IG9mIGFsbCBjaGlsZCBjb21wb25lbnRzXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKiAgICAgICAgIFRoZSBjaGlsZHJlblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jaGlsZHJlbiA9IGZ1bmN0aW9uIGNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2hpbGQgYENvbXBvbmVudGAgd2l0aCB0aGUgZ2l2ZW4gYGlkYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAqICAgICAgICBUaGUgaWQgb2YgdGhlIGNoaWxkIGBDb21wb25lbnRgIHRvIGdldC5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fHVuZGVmaW5lZH1cbiAgICogICAgICAgICBUaGUgY2hpbGQgYENvbXBvbmVudGAgd2l0aCB0aGUgZ2l2ZW4gYGlkYCBvciB1bmRlZmluZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldENoaWxkQnlJZCA9IGZ1bmN0aW9uIGdldENoaWxkQnlJZChpZCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkSW5kZXhfW2lkXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2hpbGQgYENvbXBvbmVudGAgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIGNoaWxkIGBDb21wb25lbnRgIHRvIGdldC5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fHVuZGVmaW5lZH1cbiAgICogICAgICAgICBUaGUgY2hpbGQgYENvbXBvbmVudGAgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgIG9yIHVuZGVmaW5lZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0Q2hpbGQgPSBmdW5jdGlvbiBnZXRDaGlsZChuYW1lKSB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2hpbGROYW1lSW5kZXhfW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkZXNjZW5kYW50IGBDb21wb25lbnRgIGZvbGxvd2luZyB0aGUgZ2l2ZW50XG4gICAqIGRlc2NlbmRhbnQgYG5hbWVzYC4gRm9yIGluc3RhbmNlIFsnZm9vJywgJ2JhcicsICdiYXonXSB3b3VsZFxuICAgKiB0cnkgdG8gZ2V0ICdmb28nIG9uIHRoZSBjdXJyZW50IGNvbXBvbmVudCwgJ2Jhcicgb24gdGhlICdmb28nXG4gICAqIGNvbXBvbmVudCBhbmQgJ2Jheicgb24gdGhlICdiYXInIGNvbXBvbmVudCBhbmQgcmV0dXJuIHVuZGVmaW5lZFxuICAgKiBpZiBhbnkgb2YgdGhvc2UgZG9uJ3QgZXhpc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7Li4uc3RyaW5nW118Li4uc3RyaW5nfSBuYW1lc1xuICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIGNoaWxkIGBDb21wb25lbnRgIHRvIGdldC5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fHVuZGVmaW5lZH1cbiAgICogICAgICAgICBUaGUgZGVzY2VuZGFudCBgQ29tcG9uZW50YCBmb2xsb3dpbmcgdGhlIGdpdmVuIGRlc2NlbmRhbnRcbiAgICogICAgICAgICBgbmFtZXNgIG9yIHVuZGVmaW5lZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0RGVzY2VuZGFudCA9IGZ1bmN0aW9uIGdldERlc2NlbmRhbnQoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG5hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgLy8gZmxhdHRlbiBhcnJheSBhcmd1bWVudCBpbnRvIHRoZSBtYWluIGFycmF5XG4gICAgbmFtZXMgPSBuYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbikge1xuICAgICAgcmV0dXJuIGFjYy5jb25jYXQobik7XG4gICAgfSwgW10pO1xuICAgIHZhciBjdXJyZW50Q2hpbGQgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudENoaWxkID0gY3VycmVudENoaWxkLmdldENoaWxkKG5hbWVzW2ldKTtcblxuICAgICAgaWYgKCFjdXJyZW50Q2hpbGQgfHwgIWN1cnJlbnRDaGlsZC5nZXRDaGlsZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRDaGlsZDtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgY2hpbGQgYENvbXBvbmVudGAgaW5zaWRlIHRoZSBjdXJyZW50IGBDb21wb25lbnRgLlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xDb21wb25lbnR9IGNoaWxkXG4gICAqICAgICAgICBUaGUgbmFtZSBvciBpbnN0YW5jZSBvZiBhIGNoaWxkIHRvIGFkZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBvcHRpb25zIHRoYXQgd2lsbCBnZXQgcGFzc2VkIHRvIGNoaWxkcmVuIG9mXG4gICAqICAgICAgICB0aGUgY2hpbGQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbaW5kZXg9dGhpcy5jaGlsZHJlbl8ubGVuZ3RoXVxuICAgKiAgICAgICAgVGhlIGluZGV4IHRvIGF0dGVtcHQgdG8gYWRkIGEgY2hpbGQgaW50by5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKiAgICAgICAgIFRoZSBgQ29tcG9uZW50YCB0aGF0IGdldHMgYWRkZWQgYXMgYSBjaGlsZC4gV2hlbiB1c2luZyBhIHN0cmluZyB0aGVcbiAgICogICAgICAgICBgQ29tcG9uZW50YCB3aWxsIGdldCBjcmVhdGVkIGJ5IHRoaXMgcHJvY2Vzcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkQ2hpbGQgPSBmdW5jdGlvbiBhZGRDaGlsZChjaGlsZCwgb3B0aW9ucywgaW5kZXgpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICAgIGluZGV4ID0gdGhpcy5jaGlsZHJlbl8ubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBjb21wb25lbnQ7XG4gICAgdmFyIGNvbXBvbmVudE5hbWU7IC8vIElmIGNoaWxkIGlzIGEgc3RyaW5nLCBjcmVhdGUgY29tcG9uZW50IHdpdGggb3B0aW9uc1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbXBvbmVudE5hbWUgPSB0b1RpdGxlQ2FzZShjaGlsZCk7XG4gICAgICB2YXIgY29tcG9uZW50Q2xhc3NOYW1lID0gb3B0aW9ucy5jb21wb25lbnRDbGFzcyB8fCBjb21wb25lbnROYW1lOyAvLyBTZXQgbmFtZSB0aHJvdWdoIG9wdGlvbnNcblxuICAgICAgb3B0aW9ucy5uYW1lID0gY29tcG9uZW50TmFtZTsgLy8gQ3JlYXRlIGEgbmV3IG9iamVjdCAmIGVsZW1lbnQgZm9yIHRoaXMgY29udHJvbHMgc2V0XG4gICAgICAvLyBJZiB0aGVyZSdzIG5vIC5wbGF5ZXJfLCB0aGlzIGlzIGEgcGxheWVyXG5cbiAgICAgIHZhciBDb21wb25lbnRDbGFzcyA9IENvbXBvbmVudC5nZXRDb21wb25lbnQoY29tcG9uZW50Q2xhc3NOYW1lKTtcblxuICAgICAgaWYgKCFDb21wb25lbnRDbGFzcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21wb25lbnQgXCIgKyBjb21wb25lbnRDbGFzc05hbWUgKyBcIiBkb2VzIG5vdCBleGlzdFwiKTtcbiAgICAgIH0gLy8gZGF0YSBzdG9yZWQgZGlyZWN0bHkgb24gdGhlIHZpZGVvanMgb2JqZWN0IG1heSBiZVxuICAgICAgLy8gbWlzaWRlbnRpZmllZCBhcyBhIGNvbXBvbmVudCB0byByZXRhaW5cbiAgICAgIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggNC54LiBjaGVjayB0byBtYWtlIHN1cmUgdGhlXG4gICAgICAvLyBjb21wb25lbnQgY2xhc3MgY2FuIGJlIGluc3RhbnRpYXRlZC5cblxuXG4gICAgICBpZiAodHlwZW9mIENvbXBvbmVudENsYXNzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb21wb25lbnQgPSBuZXcgQ29tcG9uZW50Q2xhc3ModGhpcy5wbGF5ZXJfIHx8IHRoaXMsIG9wdGlvbnMpOyAvLyBjaGlsZCBpcyBhIGNvbXBvbmVudCBpbnN0YW5jZVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnQgPSBjaGlsZDtcbiAgICB9XG5cbiAgICBpZiAoY29tcG9uZW50LnBhcmVudENvbXBvbmVudF8pIHtcbiAgICAgIGNvbXBvbmVudC5wYXJlbnRDb21wb25lbnRfLnJlbW92ZUNoaWxkKGNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGlsZHJlbl8uc3BsaWNlKGluZGV4LCAwLCBjb21wb25lbnQpO1xuICAgIGNvbXBvbmVudC5wYXJlbnRDb21wb25lbnRfID0gdGhpcztcblxuICAgIGlmICh0eXBlb2YgY29tcG9uZW50LmlkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmNoaWxkSW5kZXhfW2NvbXBvbmVudC5pZCgpXSA9IGNvbXBvbmVudDtcbiAgICB9IC8vIElmIGEgbmFtZSB3YXNuJ3QgdXNlZCB0byBjcmVhdGUgdGhlIGNvbXBvbmVudCwgY2hlY2sgaWYgd2UgY2FuIHVzZSB0aGVcbiAgICAvLyBuYW1lIGZ1bmN0aW9uIG9mIHRoZSBjb21wb25lbnRcblxuXG4gICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgY29tcG9uZW50Lm5hbWUgJiYgdG9UaXRsZUNhc2UoY29tcG9uZW50Lm5hbWUoKSk7XG5cbiAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgdGhpcy5jaGlsZE5hbWVJbmRleF9bY29tcG9uZW50TmFtZV0gPSBjb21wb25lbnQ7XG4gICAgICB0aGlzLmNoaWxkTmFtZUluZGV4X1t0b0xvd2VyQ2FzZShjb21wb25lbnROYW1lKV0gPSBjb21wb25lbnQ7XG4gICAgfSAvLyBBZGQgdGhlIFVJIG9iamVjdCdzIGVsZW1lbnQgdG8gdGhlIGNvbnRhaW5lciBkaXYgKGJveClcbiAgICAvLyBIYXZpbmcgYW4gZWxlbWVudCBpcyBub3QgcmVxdWlyZWRcblxuXG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQuZWwgPT09ICdmdW5jdGlvbicgJiYgY29tcG9uZW50LmVsKCkpIHtcbiAgICAgIC8vIElmIGluc2VydGluZyBiZWZvcmUgYSBjb21wb25lbnQsIGluc2VydCBiZWZvcmUgdGhhdCBjb21wb25lbnQncyBlbGVtZW50XG4gICAgICB2YXIgcmVmTm9kZSA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLmNoaWxkcmVuX1tpbmRleCArIDFdKSB7XG4gICAgICAgIC8vIE1vc3QgY2hpbGRyZW4gYXJlIGNvbXBvbmVudHMsIGJ1dCB0aGUgdmlkZW8gdGVjaCBpcyBhbiBIVE1MIGVsZW1lbnRcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW5fW2luZGV4ICsgMV0uZWxfKSB7XG4gICAgICAgICAgcmVmTm9kZSA9IHRoaXMuY2hpbGRyZW5fW2luZGV4ICsgMV0uZWxfO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRWwodGhpcy5jaGlsZHJlbl9baW5kZXggKyAxXSkpIHtcbiAgICAgICAgICByZWZOb2RlID0gdGhpcy5jaGlsZHJlbl9baW5kZXggKyAxXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRlbnRFbCgpLmluc2VydEJlZm9yZShjb21wb25lbnQuZWwoKSwgcmVmTm9kZSk7XG4gICAgfSAvLyBSZXR1cm4gc28gaXQgY2FuIHN0b3JlZCBvbiBwYXJlbnQgb2JqZWN0IGlmIGRlc2lyZWQuXG5cblxuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGNoaWxkIGBDb21wb25lbnRgIGZyb20gdGhpcyBgQ29tcG9uZW50YHMgbGlzdCBvZiBjaGlsZHJlbi4gQWxzbyByZW1vdmVzXG4gICAqIHRoZSBjaGlsZCBgQ29tcG9uZW50YHMgZWxlbWVudCBmcm9tIHRoaXMgYENvbXBvbmVudGBzIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29tcG9uZW50fSBjb21wb25lbnRcbiAgICogICAgICAgIFRoZSBjaGlsZCBgQ29tcG9uZW50YCB0byByZW1vdmUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gcmVtb3ZlQ2hpbGQoY29tcG9uZW50KSB7XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb21wb25lbnQgPSB0aGlzLmdldENoaWxkKGNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFjb21wb25lbnQgfHwgIXRoaXMuY2hpbGRyZW5fKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkRm91bmQgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSB0aGlzLmNoaWxkcmVuXy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKHRoaXMuY2hpbGRyZW5fW2ldID09PSBjb21wb25lbnQpIHtcbiAgICAgICAgY2hpbGRGb3VuZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hpbGRyZW5fLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZEZvdW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29tcG9uZW50LnBhcmVudENvbXBvbmVudF8gPSBudWxsO1xuICAgIHRoaXMuY2hpbGRJbmRleF9bY29tcG9uZW50LmlkKCldID0gbnVsbDtcbiAgICB0aGlzLmNoaWxkTmFtZUluZGV4X1t0b1RpdGxlQ2FzZShjb21wb25lbnQubmFtZSgpKV0gPSBudWxsO1xuICAgIHRoaXMuY2hpbGROYW1lSW5kZXhfW3RvTG93ZXJDYXNlKGNvbXBvbmVudC5uYW1lKCkpXSA9IG51bGw7XG4gICAgdmFyIGNvbXBFbCA9IGNvbXBvbmVudC5lbCgpO1xuXG4gICAgaWYgKGNvbXBFbCAmJiBjb21wRWwucGFyZW50Tm9kZSA9PT0gdGhpcy5jb250ZW50RWwoKSkge1xuICAgICAgdGhpcy5jb250ZW50RWwoKS5yZW1vdmVDaGlsZChjb21wb25lbnQuZWwoKSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBZGQgYW5kIGluaXRpYWxpemUgZGVmYXVsdCBjaGlsZCBgQ29tcG9uZW50YHMgYmFzZWQgdXBvbiBvcHRpb25zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbml0Q2hpbGRyZW4gPSBmdW5jdGlvbiBpbml0Q2hpbGRyZW4oKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMub3B0aW9uc18uY2hpbGRyZW47XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIC8vIGB0aGlzYCBpcyBgcGFyZW50YFxuICAgICAgdmFyIHBhcmVudE9wdGlvbnMgPSB0aGlzLm9wdGlvbnNfO1xuXG4gICAgICB2YXIgaGFuZGxlQWRkID0gZnVuY3Rpb24gaGFuZGxlQWRkKGNoaWxkKSB7XG4gICAgICAgIHZhciBuYW1lID0gY2hpbGQubmFtZTtcbiAgICAgICAgdmFyIG9wdHMgPSBjaGlsZC5vcHRzOyAvLyBBbGxvdyBvcHRpb25zIGZvciBjaGlsZHJlbiB0byBiZSBzZXQgYXQgdGhlIHBhcmVudCBvcHRpb25zXG4gICAgICAgIC8vIGUuZy4gdmlkZW9qcyhpZCwgeyBjb250cm9sQmFyOiBmYWxzZSB9KTtcbiAgICAgICAgLy8gaW5zdGVhZCBvZiB2aWRlb2pzKGlkLCB7IGNoaWxkcmVuOiB7IGNvbnRyb2xCYXI6IGZhbHNlIH0pO1xuXG4gICAgICAgIGlmIChwYXJlbnRPcHRpb25zW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBvcHRzID0gcGFyZW50T3B0aW9uc1tuYW1lXTtcbiAgICAgICAgfSAvLyBBbGxvdyBmb3IgZGlzYWJsaW5nIGRlZmF1bHQgY29tcG9uZW50c1xuICAgICAgICAvLyBlLmcuIG9wdGlvbnNbJ2NoaWxkcmVuJ11bJ3Bvc3RlckltYWdlJ10gPSBmYWxzZVxuXG5cbiAgICAgICAgaWYgKG9wdHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIEFsbG93IG9wdGlvbnMgdG8gYmUgcGFzc2VkIGFzIGEgc2ltcGxlIGJvb2xlYW4gaWYgbm8gY29uZmlndXJhdGlvblxuICAgICAgICAvLyBpcyBuZWNlc3NhcnkuXG5cblxuICAgICAgICBpZiAob3B0cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgfSAvLyBXZSBhbHNvIHdhbnQgdG8gcGFzcyB0aGUgb3JpZ2luYWwgcGxheWVyIG9wdGlvbnNcbiAgICAgICAgLy8gdG8gZWFjaCBjb21wb25lbnQgYXMgd2VsbCBzbyB0aGV5IGRvbid0IG5lZWQgdG9cbiAgICAgICAgLy8gcmVhY2ggYmFjayBpbnRvIHRoZSBwbGF5ZXIgZm9yIG9wdGlvbnMgbGF0ZXIuXG5cblxuICAgICAgICBvcHRzLnBsYXllck9wdGlvbnMgPSBfdGhpcy5vcHRpb25zXy5wbGF5ZXJPcHRpb25zOyAvLyBDcmVhdGUgYW5kIGFkZCB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgICAvLyBBZGQgYSBkaXJlY3QgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCBieSBuYW1lIG9uIHRoZSBwYXJlbnQgaW5zdGFuY2UuXG4gICAgICAgIC8vIElmIHR3byBvZiB0aGUgc2FtZSBjb21wb25lbnQgYXJlIHVzZWQsIGRpZmZlcmVudCBuYW1lcyBzaG91bGQgYmUgc3VwcGxpZWRcbiAgICAgICAgLy8gZm9yIGVhY2hcblxuICAgICAgICB2YXIgbmV3Q2hpbGQgPSBfdGhpcy5hZGRDaGlsZChuYW1lLCBvcHRzKTtcblxuICAgICAgICBpZiAobmV3Q2hpbGQpIHtcbiAgICAgICAgICBfdGhpc1tuYW1lXSA9IG5ld0NoaWxkO1xuICAgICAgICB9XG4gICAgICB9OyAvLyBBbGxvdyBmb3IgYW4gYXJyYXkgb2YgY2hpbGRyZW4gZGV0YWlscyB0byBwYXNzZWQgaW4gdGhlIG9wdGlvbnNcblxuXG4gICAgICB2YXIgd29ya2luZ0NoaWxkcmVuO1xuICAgICAgdmFyIFRlY2ggPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KCdUZWNoJyk7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICB3b3JraW5nQ2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdvcmtpbmdDaGlsZHJlbiA9IE9iamVjdC5rZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgd29ya2luZ0NoaWxkcmVuIC8vIGNoaWxkcmVuIHRoYXQgYXJlIGluIHRoaXMub3B0aW9uc18gYnV0IGFsc28gaW4gd29ya2luZ0NoaWxkcmVuICB3b3VsZFxuICAgICAgLy8gZ2l2ZSB1cyBleHRyYSBjaGlsZHJlbiB3ZSBkbyBub3Qgd2FudC4gU28sIHdlIHdhbnQgdG8gZmlsdGVyIHRoZW0gb3V0LlxuICAgICAgLmNvbmNhdChPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnNfKS5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiAhd29ya2luZ0NoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKHdjaGlsZCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygd2NoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkID09PSB3Y2hpbGQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNoaWxkID09PSB3Y2hpbGQubmFtZTtcbiAgICAgICAgfSk7XG4gICAgICB9KSkubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgbmFtZTtcbiAgICAgICAgdmFyIG9wdHM7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBuYW1lID0gY2hpbGQ7XG4gICAgICAgICAgb3B0cyA9IGNoaWxkcmVuW25hbWVdIHx8IF90aGlzLm9wdGlvbnNfW25hbWVdIHx8IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5hbWUgPSBjaGlsZC5uYW1lO1xuICAgICAgICAgIG9wdHMgPSBjaGlsZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICBvcHRzOiBvcHRzXG4gICAgICAgIH07XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgdG8gbWFrZSBzdXJlIHRoYXQgY2hpbGQubmFtZSBpc24ndCBpbiB0aGUgdGVjaE9yZGVyIHNpbmNlXG4gICAgICAgIC8vIHRlY2hzIGFyZSByZWdpc3RlcmQgYXMgQ29tcG9uZW50cyBidXQgY2FuJ3QgYXJlbid0IGNvbXBhdGlibGVcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvLmpzL2lzc3Vlcy8yNzcyXG4gICAgICAgIHZhciBjID0gQ29tcG9uZW50LmdldENvbXBvbmVudChjaGlsZC5vcHRzLmNvbXBvbmVudENsYXNzIHx8IHRvVGl0bGVDYXNlKGNoaWxkLm5hbWUpKTtcbiAgICAgICAgcmV0dXJuIGMgJiYgIVRlY2guaXNUZWNoKGMpO1xuICAgICAgfSkuZm9yRWFjaChoYW5kbGVBZGQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBjbGFzcyBuYW1lLiBTaG91bGQgYmUgb3ZlcnJpZGVuIGJ5IHN1Yi1jb21wb25lbnRzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBjbGFzcyBuYW1lIGZvciB0aGlzIG9iamVjdC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIC8vIENoaWxkIGNsYXNzZXMgY2FuIGluY2x1ZGUgYSBmdW5jdGlvbiB0aGF0IGRvZXM6XG4gICAgLy8gcmV0dXJuICdDTEFTUyBOQU1FJyArIHRoaXMuX3N1cGVyKCk7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIC8qKlxuICAgKiBCaW5kIGEgbGlzdGVuZXIgdG8gdGhlIGNvbXBvbmVudCdzIHJlYWR5IHN0YXRlLlxuICAgKiBEaWZmZXJlbnQgZnJvbSBldmVudCBsaXN0ZW5lcnMgaW4gdGhhdCBpZiB0aGUgcmVhZHkgZXZlbnQgaGFzIGFscmVhZHkgaGFwcGVuZWRcbiAgICogaXQgd2lsbCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBpbW1lZGlhdGVseS5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKiAgICAgICAgIFJldHVybnMgaXRzZWxmOyBtZXRob2QgY2FuIGJlIGNoYWluZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlYWR5ID0gZnVuY3Rpb24gcmVhZHkoZm4sIHN5bmMpIHtcbiAgICBpZiAoc3luYyA9PT0gdm9pZCAwKSB7XG4gICAgICBzeW5jID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFmbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1JlYWR5Xykge1xuICAgICAgdGhpcy5yZWFkeVF1ZXVlXyA9IHRoaXMucmVhZHlRdWV1ZV8gfHwgW107XG4gICAgICB0aGlzLnJlYWR5UXVldWVfLnB1c2goZm4pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICBmbi5jYWxsKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYWxsIHRoZSBmdW5jdGlvbiBhc3luY2hyb25vdXNseSBieSBkZWZhdWx0IGZvciBjb25zaXN0ZW5jeVxuICAgICAgdGhpcy5zZXRUaW1lb3V0KGZuLCAxKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFRyaWdnZXIgYWxsIHRoZSByZWFkeSBsaXN0ZW5lcnMgZm9yIHRoaXMgYENvbXBvbmVudGAuXG4gICAqXG4gICAqIEBmaXJlcyBDb21wb25lbnQjcmVhZHlcbiAgICovXG4gIDtcblxuICBfcHJvdG8udHJpZ2dlclJlYWR5ID0gZnVuY3Rpb24gdHJpZ2dlclJlYWR5KCkge1xuICAgIHRoaXMuaXNSZWFkeV8gPSB0cnVlOyAvLyBFbnN1cmUgcmVhZHkgaXMgdHJpZ2dlcmVkIGFzeW5jaHJvbm91c2x5XG5cbiAgICB0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlYWR5UXVldWUgPSB0aGlzLnJlYWR5UXVldWVfOyAvLyBSZXNldCBSZWFkeSBRdWV1ZVxuXG4gICAgICB0aGlzLnJlYWR5UXVldWVfID0gW107XG5cbiAgICAgIGlmIChyZWFkeVF1ZXVlICYmIHJlYWR5UXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICByZWFkeVF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgZm4uY2FsbCh0aGlzKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9IC8vIEFsbG93IGZvciB1c2luZyBldmVudCBsaXN0ZW5lcnMgYWxzb1xuXG4gICAgICAvKipcbiAgICAgICAqIFRyaWdnZXJlZCB3aGVuIGEgYENvbXBvbmVudGAgaXMgcmVhZHkuXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50IENvbXBvbmVudCNyZWFkeVxuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICovXG5cblxuICAgICAgdGhpcy50cmlnZ2VyKCdyZWFkeScpO1xuICAgIH0sIDEpO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kIGEgc2luZ2xlIERPTSBlbGVtZW50IG1hdGNoaW5nIGEgYHNlbGVjdG9yYC4gVGhpcyBjYW4gYmUgd2l0aGluIHRoZSBgQ29tcG9uZW50YHNcbiAgICogYGNvbnRlbnRFbCgpYCBvciBhbm90aGVyIGN1c3RvbSBjb250ZXh0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAgICogICAgICAgIEEgdmFsaWQgQ1NTIHNlbGVjdG9yLCB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBgcXVlcnlTZWxlY3RvcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxzdHJpbmd9IFtjb250ZXh0PXRoaXMuY29udGVudEVsKCldXG4gICAqICAgICAgICBBIERPTSBlbGVtZW50IHdpdGhpbiB3aGljaCB0byBxdWVyeS4gQ2FuIGFsc28gYmUgYSBzZWxlY3RvciBzdHJpbmcgaW5cbiAgICogICAgICAgIHdoaWNoIGNhc2UgdGhlIGZpcnN0IG1hdGNoaW5nIGVsZW1lbnQgd2lsbCBnZXQgdXNlZCBhcyBjb250ZXh0LiBJZlxuICAgKiAgICAgICAgbWlzc2luZyBgdGhpcy5jb250ZW50RWwoKWAgZ2V0cyB1c2VkLiBJZiAgYHRoaXMuY29udGVudEVsKClgIHJldHVybnNcbiAgICogICAgICAgIG5vdGhpbmcgaXQgZmFsbHMgYmFjayB0byBgZG9jdW1lbnRgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fG51bGx9XG4gICAqICAgICAgICAgdGhlIGRvbSBlbGVtZW50IHRoYXQgd2FzIGZvdW5kLCBvciBudWxsXG4gICAqXG4gICAqIEBzZWUgW0luZm9ybWF0aW9uIG9uIENTUyBTZWxlY3RvcnNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0d1aWRlL0NTUy9HZXR0aW5nX1N0YXJ0ZWQvU2VsZWN0b3JzKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by4kID0gZnVuY3Rpb24gJCQxKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuICQoc2VsZWN0b3IsIGNvbnRleHQgfHwgdGhpcy5jb250ZW50RWwoKSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBET00gZWxlbWVudCBtYXRjaGluZyBhIGBzZWxlY3RvcmAuIFRoaXMgY2FuIGJlIHdpdGhpbiB0aGUgYENvbXBvbmVudGBzXG4gICAqIGBjb250ZW50RWwoKWAgb3IgYW5vdGhlciBjdXN0b20gY29udGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gICAqICAgICAgICBBIHZhbGlkIENTUyBzZWxlY3Rvciwgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gYHF1ZXJ5U2VsZWN0b3JBbGxgLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR8c3RyaW5nfSBbY29udGV4dD10aGlzLmNvbnRlbnRFbCgpXVxuICAgKiAgICAgICAgQSBET00gZWxlbWVudCB3aXRoaW4gd2hpY2ggdG8gcXVlcnkuIENhbiBhbHNvIGJlIGEgc2VsZWN0b3Igc3RyaW5nIGluXG4gICAqICAgICAgICB3aGljaCBjYXNlIHRoZSBmaXJzdCBtYXRjaGluZyBlbGVtZW50IHdpbGwgZ2V0IHVzZWQgYXMgY29udGV4dC4gSWZcbiAgICogICAgICAgIG1pc3NpbmcgYHRoaXMuY29udGVudEVsKClgIGdldHMgdXNlZC4gSWYgIGB0aGlzLmNvbnRlbnRFbCgpYCByZXR1cm5zXG4gICAqICAgICAgICBub3RoaW5nIGl0IGZhbGxzIGJhY2sgdG8gYGRvY3VtZW50YC5cbiAgICpcbiAgICogQHJldHVybiB7Tm9kZUxpc3R9XG4gICAqICAgICAgICAgYSBsaXN0IG9mIGRvbSBlbGVtZW50cyB0aGF0IHdlcmUgZm91bmRcbiAgICpcbiAgICogQHNlZSBbSW5mb3JtYXRpb24gb24gQ1NTIFNlbGVjdG9yc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvR3VpZGUvQ1NTL0dldHRpbmdfU3RhcnRlZC9TZWxlY3RvcnMpXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLiQkID0gZnVuY3Rpb24gJCQkMShzZWxlY3RvciwgY29udGV4dCkge1xuICAgIHJldHVybiAkJChzZWxlY3RvciwgY29udGV4dCB8fCB0aGlzLmNvbnRlbnRFbCgpKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBjb21wb25lbnQncyBlbGVtZW50IGhhcyBhIENTUyBjbGFzcyBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NUb0NoZWNrXG4gICAqICAgICAgICBDU1MgY2xhc3MgbmFtZSB0byBjaGVjay5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICAtIFRydWUgaWYgdGhlIGBDb21wb25lbnRgIGhhcyB0aGUgY2xhc3MuXG4gICAqICAgICAgICAgLSBGYWxzZSBpZiB0aGUgYENvbXBvbmVudGAgZG9lcyBub3QgaGF2ZSB0aGUgY2xhc3NgXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhc0NsYXNzID0gZnVuY3Rpb24gaGFzQ2xhc3MkMShjbGFzc1RvQ2hlY2spIHtcbiAgICByZXR1cm4gaGFzQ2xhc3ModGhpcy5lbF8sIGNsYXNzVG9DaGVjayk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIENTUyBjbGFzcyBuYW1lIHRvIHRoZSBgQ29tcG9uZW50YHMgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzVG9BZGRcbiAgICogICAgICAgIENTUyBjbGFzcyBuYW1lIHRvIGFkZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRDbGFzcyA9IGZ1bmN0aW9uIGFkZENsYXNzJDEoY2xhc3NUb0FkZCkge1xuICAgIGFkZENsYXNzKHRoaXMuZWxfLCBjbGFzc1RvQWRkKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGEgQ1NTIGNsYXNzIG5hbWUgZnJvbSB0aGUgYENvbXBvbmVudGBzIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1RvUmVtb3ZlXG4gICAqICAgICAgICBDU1MgY2xhc3MgbmFtZSB0byByZW1vdmVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyQxKGNsYXNzVG9SZW1vdmUpIHtcbiAgICByZW1vdmVDbGFzcyh0aGlzLmVsXywgY2xhc3NUb1JlbW92ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBvciByZW1vdmUgYSBDU1MgY2xhc3MgbmFtZSBmcm9tIHRoZSBjb21wb25lbnQncyBlbGVtZW50LlxuICAgKiAtIGBjbGFzc1RvVG9nZ2xlYCBnZXRzIGFkZGVkIHdoZW4ge0BsaW5rIENvbXBvbmVudCNoYXNDbGFzc30gd291bGQgcmV0dXJuIGZhbHNlLlxuICAgKiAtIGBjbGFzc1RvVG9nZ2xlYCBnZXRzIHJlbW92ZWQgd2hlbiB7QGxpbmsgQ29tcG9uZW50I2hhc0NsYXNzfSB3b3VsZCByZXR1cm4gdHJ1ZS5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSBjbGFzc1RvVG9nZ2xlXG4gICAqICAgICAgICAgVGhlIGNsYXNzIHRvIGFkZCBvciByZW1vdmUgYmFzZWQgb24gKEBsaW5rIENvbXBvbmVudCNoYXNDbGFzc31cbiAgICpcbiAgICogQHBhcmFtICB7Ym9vbGVhbnxEb21+cHJlZGljYXRlfSBbcHJlZGljYXRlXVxuICAgKiAgICAgICAgIEFuIHtAbGluayBEb21+cHJlZGljYXRlfSBmdW5jdGlvbiBvciBhIGJvb2xlYW5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiB0b2dnbGVDbGFzcyQxKGNsYXNzVG9Ub2dnbGUsIHByZWRpY2F0ZSkge1xuICAgIHRvZ2dsZUNsYXNzKHRoaXMuZWxfLCBjbGFzc1RvVG9nZ2xlLCBwcmVkaWNhdGUpO1xuICB9XG4gIC8qKlxuICAgKiBTaG93IHRoZSBgQ29tcG9uZW50YHMgZWxlbWVudCBpZiBpdCBpcyBoaWRkZW4gYnkgcmVtb3ZpbmcgdGhlXG4gICAqICd2anMtaGlkZGVuJyBjbGFzcyBuYW1lIGZyb20gaXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgfVxuICAvKipcbiAgICogSGlkZSB0aGUgYENvbXBvbmVudGBzIGVsZW1lbnQgaWYgaXQgaXMgY3VycmVudGx5IHNob3dpbmcgYnkgYWRkaW5nIHRoZVxuICAgKiAndmpzLWhpZGRlbmAgY2xhc3MgbmFtZSB0byBpdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLWhpZGRlbicpO1xuICB9XG4gIC8qKlxuICAgKiBMb2NrIGEgYENvbXBvbmVudGBzIGVsZW1lbnQgaW4gaXRzIHZpc2libGUgc3RhdGUgYnkgYWRkaW5nIHRoZSAndmpzLWxvY2stc2hvd2luZydcbiAgICogY2xhc3MgbmFtZSB0byBpdC4gVXNlZCBkdXJpbmcgZmFkZUluL2ZhZGVPdXQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxvY2tTaG93aW5nID0gZnVuY3Rpb24gbG9ja1Nob3dpbmcoKSB7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLWxvY2stc2hvd2luZycpO1xuICB9XG4gIC8qKlxuICAgKiBVbmxvY2sgYSBgQ29tcG9uZW50YHMgZWxlbWVudCBmcm9tIGl0cyB2aXNpYmxlIHN0YXRlIGJ5IHJlbW92aW5nIHRoZSAndmpzLWxvY2stc2hvd2luZydcbiAgICogY2xhc3MgbmFtZSBmcm9tIGl0LiBVc2VkIGR1cmluZyBmYWRlSW4vZmFkZU91dC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5sb2NrU2hvd2luZyA9IGZ1bmN0aW9uIHVubG9ja1Nob3dpbmcoKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWxvY2stc2hvd2luZycpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZSBvbiB0aGUgYENvbXBvbmVudGBzIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAgICogICAgICAgIE5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byBnZXQgdGhlIHZhbHVlIGZyb20uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxuICAgKiAgICAgICAgIC0gVGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgdGhhdCB3YXMgYXNrZWQgZm9yLlxuICAgKiAgICAgICAgIC0gQ2FuIGJlIGFuIGVtcHR5IHN0cmluZyBvbiBzb21lIGJyb3dzZXJzIGlmIHRoZSBhdHRyaWJ1dGUgZG9lcyBub3QgZXhpc3RcbiAgICogICAgICAgICAgIG9yIGhhcyBubyB2YWx1ZVxuICAgKiAgICAgICAgIC0gTW9zdCBicm93c2VycyB3aWxsIHJldHVybiBudWxsIGlmIHRoZSBhdHRpYnV0ZSBkb2VzIG5vdCBleGlzdCBvciBoYXNcbiAgICogICAgICAgICAgIG5vIHZhbHVlLlxuICAgKlxuICAgKiBAc2VlIFtET00gQVBJXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudC9nZXRBdHRyaWJ1dGV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZSQxKGF0dHJpYnV0ZSkge1xuICAgIHJldHVybiBnZXRBdHRyaWJ1dGUodGhpcy5lbF8sIGF0dHJpYnV0ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlIG9uIHRoZSBgQ29tcG9uZW50YCdzIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICAgKiAgICAgICAgTmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIHNldC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqICAgICAgICBWYWx1ZSB0byBzZXQgdGhlIGF0dHJpYnV0ZSB0by5cbiAgICpcbiAgICogQHNlZSBbRE9NIEFQSV17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvc2V0QXR0cmlidXRlfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUkMShhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgc2V0QXR0cmlidXRlKHRoaXMuZWxfLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGFuIGF0dHJpYnV0ZSBmcm9tIHRoZSBgQ29tcG9uZW50YHMgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICAgKiAgICAgICAgTmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIHJlbW92ZS5cbiAgICpcbiAgICogQHNlZSBbRE9NIEFQSV17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvcmVtb3ZlQXR0cmlidXRlfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVBdHRyaWJ1dGUgPSBmdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUkMShhdHRyaWJ1dGUpIHtcbiAgICByZW1vdmVBdHRyaWJ1dGUodGhpcy5lbF8sIGF0dHJpYnV0ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIHdpZHRoIG9mIHRoZSBjb21wb25lbnQgYmFzZWQgdXBvbiB0aGUgQ1NTIHN0eWxlcy5cbiAgICogU2VlIHtAbGluayBDb21wb25lbnQjZGltZW5zaW9ufSBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbbnVtXVxuICAgKiAgICAgICAgVGhlIHdpZHRoIHRoYXQgeW91IHdhbnQgdG8gc2V0IHBvc3RmaXhlZCB3aXRoICclJywgJ3B4JyBvciBub3RoaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwTGlzdGVuZXJzXVxuICAgKiAgICAgICAgU2tpcCB0aGUgY29tcG9uZW50cmVzaXplIGV2ZW50IHRyaWdnZXJcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfHN0cmluZ31cbiAgICogICAgICAgICBUaGUgd2lkdGggd2hlbiBnZXR0aW5nLCB6ZXJvIGlmIHRoZXJlIGlzIG5vIHdpZHRoLiBDYW4gYmUgYSBzdHJpbmdcbiAgICogICAgICAgICAgIHBvc3RwaXhlZCB3aXRoICclJyBvciAncHgnLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by53aWR0aCA9IGZ1bmN0aW9uIHdpZHRoKG51bSwgc2tpcExpc3RlbmVycykge1xuICAgIHJldHVybiB0aGlzLmRpbWVuc2lvbignd2lkdGgnLCBudW0sIHNraXBMaXN0ZW5lcnMpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHRoZSBoZWlnaHQgb2YgdGhlIGNvbXBvbmVudCBiYXNlZCB1cG9uIHRoZSBDU1Mgc3R5bGVzLlxuICAgKiBTZWUge0BsaW5rIENvbXBvbmVudCNkaW1lbnNpb259IGZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtudW1dXG4gICAqICAgICAgICBUaGUgaGVpZ2h0IHRoYXQgeW91IHdhbnQgdG8gc2V0IHBvc3RmaXhlZCB3aXRoICclJywgJ3B4JyBvciBub3RoaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwTGlzdGVuZXJzXVxuICAgKiAgICAgICAgU2tpcCB0aGUgY29tcG9uZW50cmVzaXplIGV2ZW50IHRyaWdnZXJcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfHN0cmluZ31cbiAgICogICAgICAgICBUaGUgd2lkdGggd2hlbiBnZXR0aW5nLCB6ZXJvIGlmIHRoZXJlIGlzIG5vIHdpZHRoLiBDYW4gYmUgYSBzdHJpbmdcbiAgICogICAgICAgICBwb3N0cGl4ZWQgd2l0aCAnJScgb3IgJ3B4Jy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGVpZ2h0ID0gZnVuY3Rpb24gaGVpZ2h0KG51bSwgc2tpcExpc3RlbmVycykge1xuICAgIHJldHVybiB0aGlzLmRpbWVuc2lvbignaGVpZ2h0JywgbnVtLCBza2lwTGlzdGVuZXJzKTtcbiAgfVxuICAvKipcbiAgICogU2V0IGJvdGggdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGBDb21wb25lbnRgIGVsZW1lbnQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfHN0cmluZ30gd2lkdGhcbiAgICogICAgICAgICBXaWR0aCB0byBzZXQgdGhlIGBDb21wb25lbnRgcyBlbGVtZW50IHRvLlxuICAgKlxuICAgKiBAcGFyYW0gIHtudW1iZXJ8c3RyaW5nfSBoZWlnaHRcbiAgICogICAgICAgICBIZWlnaHQgdG8gc2V0IHRoZSBgQ29tcG9uZW50YHMgZWxlbWVudCB0by5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGltZW5zaW9ucyA9IGZ1bmN0aW9uIGRpbWVuc2lvbnMod2lkdGgsIGhlaWdodCkge1xuICAgIC8vIFNraXAgY29tcG9uZW50cmVzaXplIGxpc3RlbmVycyBvbiB3aWR0aCBmb3Igb3B0aW1pemF0aW9uXG4gICAgdGhpcy53aWR0aCh3aWR0aCwgdHJ1ZSk7XG4gICAgdGhpcy5oZWlnaHQoaGVpZ2h0KTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB3aWR0aCBvciBoZWlnaHQgb2YgdGhlIGBDb21wb25lbnRgIGVsZW1lbnQuIFRoaXMgaXMgdGhlIHNoYXJlZCBjb2RlXG4gICAqIGZvciB0aGUge0BsaW5rIENvbXBvbmVudCN3aWR0aH0gYW5kIHtAbGluayBDb21wb25lbnQjaGVpZ2h0fS5cbiAgICpcbiAgICogVGhpbmdzIHRvIGtub3c6XG4gICAqIC0gSWYgdGhlIHdpZHRoIG9yIGhlaWdodCBpbiBhbiBudW1iZXIgdGhpcyB3aWxsIHJldHVybiB0aGUgbnVtYmVyIHBvc3RmaXhlZCB3aXRoICdweCcuXG4gICAqIC0gSWYgdGhlIHdpZHRoL2hlaWdodCBpcyBhIHBlcmNlbnQgdGhpcyB3aWxsIHJldHVybiB0aGUgcGVyY2VudCBwb3N0Zml4ZWQgd2l0aCAnJSdcbiAgICogLSBIaWRkZW4gZWxlbWVudHMgaGF2ZSBhIHdpZHRoIG9mIDAgd2l0aCBgd2luZG93LmdldENvbXB1dGVkU3R5bGVgLiBUaGlzIGZ1bmN0aW9uXG4gICAqICAgZGVmYXVsdHMgdG8gdGhlIGBDb21wb25lbnRgcyBgc3R5bGUud2lkdGhgIGFuZCBmYWxscyBiYWNrIHRvIGB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZWAuXG4gICAqICAgU2VlIFt0aGlzXXtAbGluayBodHRwOi8vd3d3LmZvbGlvdGVrLmNvbS9kZXZibG9nL2dldHRpbmctdGhlLXdpZHRoLW9mLWEtaGlkZGVuLWVsZW1lbnQtd2l0aC1qcXVlcnktdXNpbmctd2lkdGgvfVxuICAgKiAgIGZvciBtb3JlIGluZm9ybWF0aW9uXG4gICAqIC0gSWYgeW91IHdhbnQgdGhlIGNvbXB1dGVkIHN0eWxlIG9mIHRoZSBjb21wb25lbnQsIHVzZSB7QGxpbmsgQ29tcG9uZW50I2N1cnJlbnRXaWR0aH1cbiAgICogICBhbmQge0BsaW5rIHtDb21wb25lbnQjY3VycmVudEhlaWdodH1cbiAgICpcbiAgICogQGZpcmVzIENvbXBvbmVudCNjb21wb25lbnRyZXNpemVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHdpZHRoT3JIZWlnaHRcbiAgIDggICAgICAgICd3aWR0aCcgb3IgJ2hlaWdodCdcbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfHN0cmluZ30gW251bV1cbiAgIDggICAgICAgICBOZXcgZGltZW5zaW9uXG4gICAqXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IFtza2lwTGlzdGVuZXJzXVxuICAgKiAgICAgICAgIFNraXAgY29tcG9uZW50cmVzaXplIGV2ZW50IHRyaWdnZXJcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkaW1lbnNpb24gd2hlbiBnZXR0aW5nIG9yIDAgaWYgdW5zZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGltZW5zaW9uID0gZnVuY3Rpb24gZGltZW5zaW9uKHdpZHRoT3JIZWlnaHQsIG51bSwgc2tpcExpc3RlbmVycykge1xuICAgIGlmIChudW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gU2V0IHRvIHplcm8gaWYgbnVsbCBvciBsaXRlcmFsbHkgTmFOIChOYU4gIT09IE5hTilcbiAgICAgIGlmIChudW0gPT09IG51bGwgfHwgbnVtICE9PSBudW0pIHtcbiAgICAgICAgbnVtID0gMDtcbiAgICAgIH0gLy8gQ2hlY2sgaWYgdXNpbmcgY3NzIHdpZHRoL2hlaWdodCAoJSBvciBweCkgYW5kIGFkanVzdFxuXG5cbiAgICAgIGlmICgoJycgKyBudW0pLmluZGV4T2YoJyUnKSAhPT0gLTEgfHwgKCcnICsgbnVtKS5pbmRleE9mKCdweCcpICE9PSAtMSkge1xuICAgICAgICB0aGlzLmVsXy5zdHlsZVt3aWR0aE9ySGVpZ2h0XSA9IG51bTtcbiAgICAgIH0gZWxzZSBpZiAobnVtID09PSAnYXV0bycpIHtcbiAgICAgICAgdGhpcy5lbF8uc3R5bGVbd2lkdGhPckhlaWdodF0gPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxfLnN0eWxlW3dpZHRoT3JIZWlnaHRdID0gbnVtICsgJ3B4JztcbiAgICAgIH0gLy8gc2tpcExpc3RlbmVycyBhbGxvd3MgdXMgdG8gYXZvaWQgdHJpZ2dlcmluZyB0aGUgcmVzaXplIGV2ZW50IHdoZW4gc2V0dGluZyBib3RoIHdpZHRoIGFuZCBoZWlnaHRcblxuXG4gICAgICBpZiAoIXNraXBMaXN0ZW5lcnMpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyaWdnZXJlZCB3aGVuIGEgY29tcG9uZW50IGlzIHJlc2l6ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBDb21wb25lbnQjY29tcG9uZW50cmVzaXplXG4gICAgICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHJpZ2dlcignY29tcG9uZW50cmVzaXplJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE5vdCBzZXR0aW5nIGEgdmFsdWUsIHNvIGdldHRpbmcgaXRcbiAgICAvLyBNYWtlIHN1cmUgZWxlbWVudCBleGlzdHNcblxuXG4gICAgaWYgKCF0aGlzLmVsXykge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSAvLyBHZXQgZGltZW5zaW9uIHZhbHVlIGZyb20gc3R5bGVcblxuXG4gICAgdmFyIHZhbCA9IHRoaXMuZWxfLnN0eWxlW3dpZHRoT3JIZWlnaHRdO1xuICAgIHZhciBweEluZGV4ID0gdmFsLmluZGV4T2YoJ3B4Jyk7XG5cbiAgICBpZiAocHhJbmRleCAhPT0gLTEpIHtcbiAgICAgIC8vIFJldHVybiB0aGUgcGl4ZWwgdmFsdWUgd2l0aCBubyAncHgnXG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsLnNsaWNlKDAsIHB4SW5kZXgpLCAxMCk7XG4gICAgfSAvLyBObyBweCBzbyB1c2luZyAlIG9yIG5vIHN0eWxlIHdhcyBzZXQsIHNvIGZhbGxpbmcgYmFjayB0byBvZmZzZXRXaWR0aC9oZWlnaHRcbiAgICAvLyBJZiBjb21wb25lbnQgaGFzIGRpc3BsYXk6bm9uZSwgb2Zmc2V0IHdpbGwgcmV0dXJuIDBcbiAgICAvLyBUT0RPOiBoYW5kbGUgZGlzcGxheTpub25lIGFuZCBubyBkaW1lbnNpb24gc3R5bGUgdXNpbmcgcHhcblxuXG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuZWxfWydvZmZzZXQnICsgdG9UaXRsZUNhc2Uod2lkdGhPckhlaWdodCldLCAxMCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY29tcHV0ZWQgd2lkdGggb3IgdGhlIGhlaWdodCBvZiB0aGUgY29tcG9uZW50J3MgZWxlbWVudC5cbiAgICpcbiAgICogVXNlcyBgd2luZG93LmdldENvbXB1dGVkU3R5bGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gd2lkdGhPckhlaWdodFxuICAgKiAgICAgICAgQSBzdHJpbmcgY29udGFpbmluZyAnd2lkdGgnIG9yICdoZWlnaHQnLiBXaGljaGV2ZXIgb25lIHlvdSB3YW50IHRvIGdldC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkaW1lbnNpb24gdGhhdCBnZXRzIGFza2VkIGZvciBvciAwIGlmIG5vdGhpbmcgd2FzIHNldFxuICAgKiAgICAgICAgIGZvciB0aGF0IGRpbWVuc2lvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3VycmVudERpbWVuc2lvbiA9IGZ1bmN0aW9uIGN1cnJlbnREaW1lbnNpb24od2lkdGhPckhlaWdodCkge1xuICAgIHZhciBjb21wdXRlZFdpZHRoT3JIZWlnaHQgPSAwO1xuXG4gICAgaWYgKHdpZHRoT3JIZWlnaHQgIT09ICd3aWR0aCcgJiYgd2lkdGhPckhlaWdodCAhPT0gJ2hlaWdodCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3VycmVudERpbWVuc2lvbiBvbmx5IGFjY2VwdHMgd2lkdGggb3IgaGVpZ2h0IHZhbHVlJyk7XG4gICAgfVxuXG4gICAgY29tcHV0ZWRXaWR0aE9ySGVpZ2h0ID0gY29tcHV0ZWRTdHlsZSh0aGlzLmVsXywgd2lkdGhPckhlaWdodCk7IC8vIHJlbW92ZSAncHgnIGZyb20gdmFyaWFibGUgYW5kIHBhcnNlIGFzIGludGVnZXJcblxuICAgIGNvbXB1dGVkV2lkdGhPckhlaWdodCA9IHBhcnNlRmxvYXQoY29tcHV0ZWRXaWR0aE9ySGVpZ2h0KTsgLy8gaWYgdGhlIGNvbXB1dGVkIHZhbHVlIGlzIHN0aWxsIDAsIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgYnJvd3NlciBpcyBseWluZ1xuICAgIC8vIGFuZCB3ZSB3YW50IHRvIGNoZWNrIHRoZSBvZmZzZXQgdmFsdWVzLlxuICAgIC8vIFRoaXMgY29kZSBhbHNvIHJ1bnMgd2hlcmV2ZXIgZ2V0Q29tcHV0ZWRTdHlsZSBkb2Vzbid0IGV4aXN0LlxuXG4gICAgaWYgKGNvbXB1dGVkV2lkdGhPckhlaWdodCA9PT0gMCB8fCBpc05hTihjb21wdXRlZFdpZHRoT3JIZWlnaHQpKSB7XG4gICAgICB2YXIgcnVsZSA9IFwib2Zmc2V0XCIgKyB0b1RpdGxlQ2FzZSh3aWR0aE9ySGVpZ2h0KTtcbiAgICAgIGNvbXB1dGVkV2lkdGhPckhlaWdodCA9IHRoaXMuZWxfW3J1bGVdO1xuICAgIH1cblxuICAgIHJldHVybiBjb21wdXRlZFdpZHRoT3JIZWlnaHQ7XG4gIH1cbiAgLyoqXG4gICAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHdpZHRoIGFuZCBoZWlnaHQgdmFsdWVzIG9mIHRoZSBgQ29tcG9uZW50YHNcbiAgICogY29tcHV0ZWQgc3R5bGUuIFVzZXMgYHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlYC5cbiAgICpcbiAgICogQHR5cGVkZWYge09iamVjdH0gQ29tcG9uZW50fkRpbWVuc2lvbk9iamVjdFxuICAgKlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gd2lkdGhcbiAgICogICAgICAgICAgIFRoZSB3aWR0aCBvZiB0aGUgYENvbXBvbmVudGBzIGNvbXB1dGVkIHN0eWxlLlxuICAgKlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gaGVpZ2h0XG4gICAqICAgICAgICAgICBUaGUgaGVpZ2h0IG9mIHRoZSBgQ29tcG9uZW50YHMgY29tcHV0ZWQgc3R5bGUuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBHZXQgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgY29tcHV0ZWQgd2lkdGggYW5kIGhlaWdodCB2YWx1ZXMgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIGVsZW1lbnQuXG4gICAqXG4gICAqIFVzZXMgYHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlYC5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fkRpbWVuc2lvbk9iamVjdH1cbiAgICogICAgICAgICBUaGUgY29tcHV0ZWQgZGltZW5zaW9ucyBvZiB0aGUgY29tcG9uZW50J3MgZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3VycmVudERpbWVuc2lvbnMgPSBmdW5jdGlvbiBjdXJyZW50RGltZW5zaW9ucygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHRoaXMuY3VycmVudERpbWVuc2lvbignd2lkdGgnKSxcbiAgICAgIGhlaWdodDogdGhpcy5jdXJyZW50RGltZW5zaW9uKCdoZWlnaHQnKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY29tcHV0ZWQgd2lkdGggb2YgdGhlIGNvbXBvbmVudCdzIGVsZW1lbnQuXG4gICAqXG4gICAqIFVzZXMgYHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlYC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBjb21wdXRlZCB3aWR0aCBvZiB0aGUgY29tcG9uZW50J3MgZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3VycmVudFdpZHRoID0gZnVuY3Rpb24gY3VycmVudFdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnREaW1lbnNpb24oJ3dpZHRoJyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY29tcHV0ZWQgaGVpZ2h0IG9mIHRoZSBjb21wb25lbnQncyBlbGVtZW50LlxuICAgKlxuICAgKiBVc2VzIGB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgY29tcHV0ZWQgaGVpZ2h0IG9mIHRoZSBjb21wb25lbnQncyBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jdXJyZW50SGVpZ2h0ID0gZnVuY3Rpb24gY3VycmVudEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RGltZW5zaW9uKCdoZWlnaHQnKTtcbiAgfVxuICAvKipcbiAgICogU2V0IHRoZSBmb2N1cyB0byB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mb2N1cyA9IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgIHRoaXMuZWxfLmZvY3VzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgZm9jdXMgZnJvbSB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5ibHVyID0gZnVuY3Rpb24gYmx1cigpIHtcbiAgICB0aGlzLmVsXy5ibHVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gdGhpcyBDb21wb25lbnQgcmVjZWl2ZXMgYSBga2V5ZG93bmAgZXZlbnQgd2hpY2ggaXQgZG9lcyBub3QgcHJvY2VzcyxcbiAgICogIGl0IHBhc3NlcyB0aGUgZXZlbnQgdG8gdGhlIFBsYXllciBmb3IgaGFuZGxpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGtleWRvd25gIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIGlmICh0aGlzLnBsYXllcl8pIHtcbiAgICAgIC8vIFdlIG9ubHkgc3RvcCBwcm9wYWdhdGlvbiBoZXJlIGJlY2F1c2Ugd2Ugd2FudCB1bmhhbmRsZWQgZXZlbnRzIHRvIGZhbGxcbiAgICAgIC8vIGJhY2sgdG8gdGhlIGJyb3dzZXIuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMucGxheWVyXy5oYW5kbGVLZXlEb3duKGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIE1hbnkgY29tcG9uZW50cyB1c2VkIHRvIGhhdmUgYSBgaGFuZGxlS2V5UHJlc3NgIG1ldGhvZCwgd2hpY2ggd2FzIHBvb3JseVxuICAgKiBuYW1lZCBiZWNhdXNlIGl0IGxpc3RlbmVkIHRvIGEgYGtleWRvd25gIGV2ZW50LiBUaGlzIG1ldGhvZCBuYW1lIG5vd1xuICAgKiBkZWxlZ2F0ZXMgdG8gYGhhbmRsZUtleURvd25gLiBUaGlzIG1lYW5zIGFueW9uZSBjYWxsaW5nIGBoYW5kbGVLZXlQcmVzc2BcbiAgICogd2lsbCBub3Qgc2VlIHRoZWlyIG1ldGhvZCBjYWxscyBzdG9wIHdvcmtpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUtleVByZXNzID0gZnVuY3Rpb24gaGFuZGxlS2V5UHJlc3MoZXZlbnQpIHtcbiAgICB0aGlzLmhhbmRsZUtleURvd24oZXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBFbWl0IGEgJ3RhcCcgZXZlbnRzIHdoZW4gdG91Y2ggZXZlbnQgc3VwcG9ydCBnZXRzIGRldGVjdGVkLiBUaGlzIGdldHMgdXNlZCB0b1xuICAgKiBzdXBwb3J0IHRvZ2dsaW5nIHRoZSBjb250cm9scyB0aHJvdWdoIGEgdGFwIG9uIHRoZSB2aWRlby4gVGhleSBnZXQgZW5hYmxlZFxuICAgKiBiZWNhdXNlIGV2ZXJ5IHN1Yi1jb21wb25lbnQgd291bGQgaGF2ZSBleHRyYSBvdmVyaGVhZCBvdGhlcndpc2UuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBmaXJlcyBDb21wb25lbnQjdGFwXG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCN0b3VjaHN0YXJ0XG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCN0b3VjaG1vdmVcbiAgICogQGxpc3RlbnMgQ29tcG9uZW50I3RvdWNobGVhdmVcbiAgICogQGxpc3RlbnMgQ29tcG9uZW50I3RvdWNoY2FuY2VsXG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCN0b3VjaGVuZFxuICAgICovXG4gIDtcblxuICBfcHJvdG8uZW1pdFRhcEV2ZW50cyA9IGZ1bmN0aW9uIGVtaXRUYXBFdmVudHMoKSB7XG4gICAgLy8gVHJhY2sgdGhlIHN0YXJ0IHRpbWUgc28gd2UgY2FuIGRldGVybWluZSBob3cgbG9uZyB0aGUgdG91Y2ggbGFzdGVkXG4gICAgdmFyIHRvdWNoU3RhcnQgPSAwO1xuICAgIHZhciBmaXJzdFRvdWNoID0gbnVsbDsgLy8gTWF4aW11bSBtb3ZlbWVudCBhbGxvd2VkIGR1cmluZyBhIHRvdWNoIGV2ZW50IHRvIHN0aWxsIGJlIGNvbnNpZGVyZWQgYSB0YXBcbiAgICAvLyBPdGhlciBwb3B1bGFyIGxpYnMgdXNlIGFueXdoZXJlIGZyb20gMiAoaGFtbWVyLmpzKSB0byAxNSxcbiAgICAvLyBzbyAxMCBzZWVtcyBsaWtlIGEgbmljZSwgcm91bmQgbnVtYmVyLlxuXG4gICAgdmFyIHRhcE1vdmVtZW50VGhyZXNob2xkID0gMTA7IC8vIFRoZSBtYXhpbXVtIGxlbmd0aCBhIHRvdWNoIGNhbiBiZSB3aGlsZSBzdGlsbCBiZWluZyBjb25zaWRlcmVkIGEgdGFwXG5cbiAgICB2YXIgdG91Y2hUaW1lVGhyZXNob2xkID0gMjAwO1xuICAgIHZhciBjb3VsZEJlVGFwO1xuICAgIHRoaXMub24oJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIElmIG1vcmUgdGhhbiBvbmUgZmluZ2VyLCBkb24ndCBjb25zaWRlciB0cmVhdGluZyB0aGlzIGFzIGEgY2xpY2tcbiAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBDb3B5IHBhZ2VYL3BhZ2VZIGZyb20gdGhlIG9iamVjdFxuICAgICAgICBmaXJzdFRvdWNoID0ge1xuICAgICAgICAgIHBhZ2VYOiBldmVudC50b3VjaGVzWzBdLnBhZ2VYLFxuICAgICAgICAgIHBhZ2VZOiBldmVudC50b3VjaGVzWzBdLnBhZ2VZXG4gICAgICAgIH07IC8vIFJlY29yZCBzdGFydCB0aW1lIHNvIHdlIGNhbiBkZXRlY3QgYSB0YXAgdnMuIFwidG91Y2ggYW5kIGhvbGRcIlxuXG4gICAgICAgIHRvdWNoU3RhcnQgPSB3aW5kb3ckMS5wZXJmb3JtYW5jZS5ub3coKTsgLy8gUmVzZXQgY291bGRCZVRhcCB0cmFja2luZ1xuXG4gICAgICAgIGNvdWxkQmVUYXAgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMub24oJ3RvdWNobW92ZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gSWYgbW9yZSB0aGFuIG9uZSBmaW5nZXIsIGRvbid0IGNvbnNpZGVyIHRyZWF0aW5nIHRoaXMgYXMgYSBjbGlja1xuICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBjb3VsZEJlVGFwID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGZpcnN0VG91Y2gpIHtcbiAgICAgICAgLy8gU29tZSBkZXZpY2VzIHdpbGwgdGhyb3cgdG91Y2htb3ZlcyBmb3IgYWxsIGJ1dCB0aGUgc2xpZ2h0ZXN0IG9mIHRhcHMuXG4gICAgICAgIC8vIFNvLCBpZiB3ZSBtb3ZlZCBvbmx5IGEgc21hbGwgZGlzdGFuY2UsIHRoaXMgY291bGQgc3RpbGwgYmUgYSB0YXBcbiAgICAgICAgdmFyIHhkaWZmID0gZXZlbnQudG91Y2hlc1swXS5wYWdlWCAtIGZpcnN0VG91Y2gucGFnZVg7XG4gICAgICAgIHZhciB5ZGlmZiA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVkgLSBmaXJzdFRvdWNoLnBhZ2VZO1xuICAgICAgICB2YXIgdG91Y2hEaXN0YW5jZSA9IE1hdGguc3FydCh4ZGlmZiAqIHhkaWZmICsgeWRpZmYgKiB5ZGlmZik7XG5cbiAgICAgICAgaWYgKHRvdWNoRGlzdGFuY2UgPiB0YXBNb3ZlbWVudFRocmVzaG9sZCkge1xuICAgICAgICAgIGNvdWxkQmVUYXAgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIG5vVGFwID0gZnVuY3Rpb24gbm9UYXAoKSB7XG4gICAgICBjb3VsZEJlVGFwID0gZmFsc2U7XG4gICAgfTsgLy8gVE9ETzogTGlzdGVuIHRvIHRoZSBvcmlnaW5hbCB0YXJnZXQuIGh0dHA6Ly95b3V0dS5iZS9EdWpmcFhPS1VwOD90PTEzbThzXG5cblxuICAgIHRoaXMub24oJ3RvdWNobGVhdmUnLCBub1RhcCk7XG4gICAgdGhpcy5vbigndG91Y2hjYW5jZWwnLCBub1RhcCk7IC8vIFdoZW4gdGhlIHRvdWNoIGVuZHMsIG1lYXN1cmUgaG93IGxvbmcgaXQgdG9vayBhbmQgdHJpZ2dlciB0aGUgYXBwcm9wcmlhdGVcbiAgICAvLyBldmVudFxuXG4gICAgdGhpcy5vbigndG91Y2hlbmQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGZpcnN0VG91Y2ggPSBudWxsOyAvLyBQcm9jZWVkIG9ubHkgaWYgdGhlIHRvdWNobW92ZS9sZWF2ZS9jYW5jZWwgZXZlbnQgZGlkbid0IGhhcHBlblxuXG4gICAgICBpZiAoY291bGRCZVRhcCA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBNZWFzdXJlIGhvdyBsb25nIHRoZSB0b3VjaCBsYXN0ZWRcbiAgICAgICAgdmFyIHRvdWNoVGltZSA9IHdpbmRvdyQxLnBlcmZvcm1hbmNlLm5vdygpIC0gdG91Y2hTdGFydDsgLy8gTWFrZSBzdXJlIHRoZSB0b3VjaCB3YXMgbGVzcyB0aGFuIHRoZSB0aHJlc2hvbGQgdG8gYmUgY29uc2lkZXJlZCBhIHRhcFxuXG4gICAgICAgIGlmICh0b3VjaFRpbWUgPCB0b3VjaFRpbWVUaHJlc2hvbGQpIHtcbiAgICAgICAgICAvLyBEb24ndCBsZXQgYnJvd3NlciB0dXJuIHRoaXMgaW50byBhIGNsaWNrXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUcmlnZ2VyZWQgd2hlbiBhIGBDb21wb25lbnRgIGlzIHRhcHBlZC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBldmVudCBDb21wb25lbnQjdGFwXG4gICAgICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICAgICAqL1xuXG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCd0YXAnKTsgLy8gSXQgbWF5IGJlIGdvb2QgdG8gY29weSB0aGUgdG91Y2hlbmQgZXZlbnQgb2JqZWN0IGFuZCBjaGFuZ2UgdGhlXG4gICAgICAgICAgLy8gdHlwZSB0byB0YXAsIGlmIHRoZSBvdGhlciBldmVudCBwcm9wZXJ0aWVzIGFyZW4ndCBleGFjdCBhZnRlclxuICAgICAgICAgIC8vIEV2ZW50cy5maXhFdmVudCBydW5zIChlLmcuIGV2ZW50LnRhcmdldClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJlcG9ydHMgdXNlciBhY3Rpdml0eSB3aGVuZXZlciB0b3VjaCBldmVudHMgaGFwcGVuLiBUaGlzIGNhbiBnZXRcbiAgICogdHVybmVkIG9mZiBieSBhbnkgc3ViLWNvbXBvbmVudHMgdGhhdCB3YW50cyB0b3VjaCBldmVudHMgdG8gYWN0IGFub3RoZXIgd2F5LlxuICAgKlxuICAgKiBSZXBvcnQgdXNlciB0b3VjaCBhY3Rpdml0eSB3aGVuIHRvdWNoIGV2ZW50cyBvY2N1ci4gVXNlciBhY3Rpdml0eSBnZXRzIHVzZWQgdG9cbiAgICogZGV0ZXJtaW5lIHdoZW4gY29udHJvbHMgc2hvdWxkIHNob3cvaGlkZS4gSXQgaXMgc2ltcGxlIHdoZW4gaXQgY29tZXMgdG8gbW91c2VcbiAgICogZXZlbnRzLCBiZWNhdXNlIGFueSBtb3VzZSBldmVudCBzaG91bGQgc2hvdyB0aGUgY29udHJvbHMuIFNvIHdlIGNhcHR1cmUgbW91c2VcbiAgICogZXZlbnRzIHRoYXQgYnViYmxlIHVwIHRvIHRoZSBwbGF5ZXIgYW5kIHJlcG9ydCBhY3Rpdml0eSB3aGVuIHRoYXQgaGFwcGVucy5cbiAgICogV2l0aCB0b3VjaCBldmVudHMgaXQgaXNuJ3QgYXMgZWFzeSBhcyBgdG91Y2hzdGFydGAgYW5kIGB0b3VjaGVuZGAgdG9nZ2xlIHBsYXllclxuICAgKiBjb250cm9scy4gU28gdG91Y2ggZXZlbnRzIGNhbid0IGhlbHAgdXMgYXQgdGhlIHBsYXllciBsZXZlbCBlaXRoZXIuXG4gICAqXG4gICAqIFVzZXIgYWN0aXZpdHkgZ2V0cyBjaGVja2VkIGFzeW5jaHJvbm91c2x5LiBTbyB3aGF0IGNvdWxkIGhhcHBlbiBpcyBhIHRhcCBldmVudFxuICAgKiBvbiB0aGUgdmlkZW8gdHVybnMgdGhlIGNvbnRyb2xzIG9mZi4gVGhlbiB0aGUgYHRvdWNoZW5kYCBldmVudCBidWJibGVzIHVwIHRvXG4gICAqIHRoZSBwbGF5ZXIuIFdoaWNoLCBpZiBpdCByZXBvcnRlZCB1c2VyIGFjdGl2aXR5LCB3b3VsZCB0dXJuIHRoZSBjb250cm9scyByaWdodFxuICAgKiBiYWNrIG9uLiBXZSBhbHNvIGRvbid0IHdhbnQgdG8gY29tcGxldGVseSBibG9jayB0b3VjaCBldmVudHMgZnJvbSBidWJibGluZyB1cC5cbiAgICogRnVydGhlcm1vcmUgYSBgdG91Y2htb3ZlYCBldmVudCBhbmQgYW55dGhpbmcgb3RoZXIgdGhhbiBhIHRhcCwgc2hvdWxkIG5vdCB0dXJuXG4gICAqIGNvbnRyb2xzIGJhY2sgb24uXG4gICAqXG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCN0b3VjaHN0YXJ0XG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCN0b3VjaG1vdmVcbiAgICogQGxpc3RlbnMgQ29tcG9uZW50I3RvdWNoZW5kXG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCN0b3VjaGNhbmNlbFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmFibGVUb3VjaEFjdGl2aXR5ID0gZnVuY3Rpb24gZW5hYmxlVG91Y2hBY3Rpdml0eSgpIHtcbiAgICAvLyBEb24ndCBjb250aW51ZSBpZiB0aGUgcm9vdCBwbGF5ZXIgZG9lc24ndCBzdXBwb3J0IHJlcG9ydGluZyB1c2VyIGFjdGl2aXR5XG4gICAgaWYgKCF0aGlzLnBsYXllcigpIHx8ICF0aGlzLnBsYXllcigpLnJlcG9ydFVzZXJBY3Rpdml0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gbGlzdGVuZXIgZm9yIHJlcG9ydGluZyB0aGF0IHRoZSB1c2VyIGlzIGFjdGl2ZVxuXG5cbiAgICB2YXIgcmVwb3J0ID0gYmluZCh0aGlzLnBsYXllcigpLCB0aGlzLnBsYXllcigpLnJlcG9ydFVzZXJBY3Rpdml0eSk7XG4gICAgdmFyIHRvdWNoSG9sZGluZztcbiAgICB0aGlzLm9uKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgcmVwb3J0KCk7IC8vIEZvciBhcyBsb25nIGFzIHRoZSB0aGV5IGFyZSB0b3VjaGluZyB0aGUgZGV2aWNlIG9yIGhhdmUgdGhlaXIgbW91c2UgZG93bixcbiAgICAgIC8vIHdlIGNvbnNpZGVyIHRoZW0gYWN0aXZlIGV2ZW4gaWYgdGhleSdyZSBub3QgbW92aW5nIHRoZWlyIGZpbmdlciBvciBtb3VzZS5cbiAgICAgIC8vIFNvIHdlIHdhbnQgdG8gY29udGludWUgdG8gdXBkYXRlIHRoYXQgdGhleSBhcmUgYWN0aXZlXG5cbiAgICAgIHRoaXMuY2xlYXJJbnRlcnZhbCh0b3VjaEhvbGRpbmcpOyAvLyByZXBvcnQgYXQgdGhlIHNhbWUgaW50ZXJ2YWwgYXMgYWN0aXZpdHlDaGVja1xuXG4gICAgICB0b3VjaEhvbGRpbmcgPSB0aGlzLnNldEludGVydmFsKHJlcG9ydCwgMjUwKTtcbiAgICB9KTtcblxuICAgIHZhciB0b3VjaEVuZCA9IGZ1bmN0aW9uIHRvdWNoRW5kKGV2ZW50KSB7XG4gICAgICByZXBvcnQoKTsgLy8gc3RvcCB0aGUgaW50ZXJ2YWwgdGhhdCBtYWludGFpbnMgYWN0aXZpdHkgaWYgdGhlIHRvdWNoIGlzIGhvbGRpbmdcblxuICAgICAgdGhpcy5jbGVhckludGVydmFsKHRvdWNoSG9sZGluZyk7XG4gICAgfTtcblxuICAgIHRoaXMub24oJ3RvdWNobW92ZScsIHJlcG9ydCk7XG4gICAgdGhpcy5vbigndG91Y2hlbmQnLCB0b3VjaEVuZCk7XG4gICAgdGhpcy5vbigndG91Y2hjYW5jZWwnLCB0b3VjaEVuZCk7XG4gIH1cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgdGhhdCBoYXMgbm8gcGFyYW1ldGVycyBhbmQgaXMgYm91bmQgaW50byBgQ29tcG9uZW50YHMgY29udGV4dC5cbiAgICpcbiAgICogQGNhbGxiYWNrIENvbXBvbmVudH5HZW5lcmljQ2FsbGJhY2tcbiAgICogQHRoaXMgQ29tcG9uZW50XG4gICAqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBydW5zIGFmdGVyIGFuIGB4YCBtaWxsaXNlY29uZCB0aW1lb3V0LiBUaGlzIGZ1bmN0aW9uIGlzIGFcbiAgICogd3JhcHBlciBhcm91bmQgYHdpbmRvdy5zZXRUaW1lb3V0YC4gVGhlcmUgYXJlIGEgZmV3IHJlYXNvbnMgdG8gdXNlIHRoaXMgb25lXG4gICAqIGluc3RlYWQgdGhvdWdoOlxuICAgKiAxLiBJdCBnZXRzIGNsZWFyZWQgdmlhICB7QGxpbmsgQ29tcG9uZW50I2NsZWFyVGltZW91dH0gd2hlblxuICAgKiAgICB7QGxpbmsgQ29tcG9uZW50I2Rpc3Bvc2V9IGdldHMgY2FsbGVkLlxuICAgKiAyLiBUaGUgZnVuY3Rpb24gY2FsbGJhY2sgd2lsbCBnZXRzIHR1cm5lZCBpbnRvIGEge0BsaW5rIENvbXBvbmVudH5HZW5lcmljQ2FsbGJhY2t9XG4gICAqXG4gICAqID4gTm90ZTogWW91IGNhbid0IHVzZSBgd2luZG93LmNsZWFyVGltZW91dGAgb24gdGhlIGlkIHJldHVybmVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRoaXNcbiAgICogICAgICAgICB3aWxsIGNhdXNlIGl0cyBkaXNwb3NlIGxpc3RlbmVyIG5vdCB0byBnZXQgY2xlYW5lZCB1cCEgUGxlYXNlIHVzZVxuICAgKiAgICAgICAgIHtAbGluayBDb21wb25lbnQjY2xlYXJUaW1lb3V0fSBvciB7QGxpbmsgQ29tcG9uZW50I2Rpc3Bvc2V9IGluc3RlYWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29tcG9uZW50fkdlbmVyaWNDYWxsYmFja30gZm5cbiAgICogICAgICAgIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgcnVuIGFmdGVyIGB0aW1lb3V0YC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRcbiAgICogICAgICAgIFRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGJlZm9yZSBleGVjdXRpbmcgdGhlIHNwZWNpZmllZCBmdW5jdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFJldHVybnMgYSB0aW1lb3V0IElEIHRoYXQgZ2V0cyB1c2VkIHRvIGlkZW50aWZ5IHRoZSB0aW1lb3V0LiBJdCBjYW4gYWxzb1xuICAgKiAgICAgICAgIGdldCB1c2VkIGluIHtAbGluayBDb21wb25lbnQjY2xlYXJUaW1lb3V0fSB0byBjbGVhciB0aGUgdGltZW91dCB0aGF0XG4gICAqICAgICAgICAgd2FzIHNldC5cbiAgICpcbiAgICogQGxpc3RlbnMgQ29tcG9uZW50I2Rpc3Bvc2VcbiAgICogQHNlZSBbU2ltaWxhciB0b117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvd1RpbWVycy9zZXRUaW1lb3V0fVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRUaW1lb3V0ID0gZnVuY3Rpb24gc2V0VGltZW91dChmbiwgdGltZW91dCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgLy8gZGVjbGFyZSBhcyB2YXJpYWJsZXMgc28gdGhleSBhcmUgcHJvcGVybHkgYXZhaWxhYmxlIGluIHRpbWVvdXQgZnVuY3Rpb25cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB2YXIgdGltZW91dElkO1xuICAgIGZuID0gYmluZCh0aGlzLCBmbik7XG4gICAgdGhpcy5jbGVhclRpbWVyc09uRGlzcG9zZV8oKTtcbiAgICB0aW1lb3V0SWQgPSB3aW5kb3ckMS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpczIuc2V0VGltZW91dElkc18uaGFzKHRpbWVvdXRJZCkpIHtcbiAgICAgICAgX3RoaXMyLnNldFRpbWVvdXRJZHNfW1wiZGVsZXRlXCJdKHRpbWVvdXRJZCk7XG4gICAgICB9XG5cbiAgICAgIGZuKCk7XG4gICAgfSwgdGltZW91dCk7XG4gICAgdGhpcy5zZXRUaW1lb3V0SWRzXy5hZGQodGltZW91dElkKTtcbiAgICByZXR1cm4gdGltZW91dElkO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgYSB0aW1lb3V0IHRoYXQgZ2V0cyBjcmVhdGVkIHZpYSBgd2luZG93LnNldFRpbWVvdXRgIG9yXG4gICAqIHtAbGluayBDb21wb25lbnQjc2V0VGltZW91dH0uIElmIHlvdSBzZXQgYSB0aW1lb3V0IHZpYSB7QGxpbmsgQ29tcG9uZW50I3NldFRpbWVvdXR9XG4gICAqIHVzZSB0aGlzIGZ1bmN0aW9uIGluc3RlYWQgb2YgYHdpbmRvdy5jbGVhclRpbW91dGAuIElmIHlvdSBkb24ndCB5b3VyIGRpc3Bvc2VcbiAgICogbGlzdGVuZXIgd2lsbCBub3QgZ2V0IGNsZWFuZWQgdXAgdW50aWwge0BsaW5rIENvbXBvbmVudCNkaXNwb3NlfSFcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRJZFxuICAgKiAgICAgICAgVGhlIGlkIG9mIHRoZSB0aW1lb3V0IHRvIGNsZWFyLiBUaGUgcmV0dXJuIHZhbHVlIG9mXG4gICAqICAgICAgICB7QGxpbmsgQ29tcG9uZW50I3NldFRpbWVvdXR9IG9yIGB3aW5kb3cuc2V0VGltZW91dGAuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBSZXR1cm5zIHRoZSB0aW1lb3V0IGlkIHRoYXQgd2FzIGNsZWFyZWQuXG4gICAqXG4gICAqIEBzZWUgW1NpbWlsYXIgdG9de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3dUaW1lcnMvY2xlYXJUaW1lb3V0fVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jbGVhclRpbWVvdXQgPSBmdW5jdGlvbiBjbGVhclRpbWVvdXQodGltZW91dElkKSB7XG4gICAgaWYgKHRoaXMuc2V0VGltZW91dElkc18uaGFzKHRpbWVvdXRJZCkpIHtcbiAgICAgIHRoaXMuc2V0VGltZW91dElkc19bXCJkZWxldGVcIl0odGltZW91dElkKTtcbiAgICAgIHdpbmRvdyQxLmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aW1lb3V0SWQ7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgcnVuIGV2ZXJ5IGB4YCBtaWxsaXNlY29uZHMuIFRoaXMgZnVuY3Rpb24gaXMgYSB3cmFwcGVyXG4gICAqIGFyb3VuZCBgd2luZG93LnNldEludGVydmFsYC4gVGhlcmUgYXJlIGEgZmV3IHJlYXNvbnMgdG8gdXNlIHRoaXMgb25lIGluc3RlYWQgdGhvdWdoLlxuICAgKiAxLiBJdCBnZXRzIGNsZWFyZWQgdmlhICB7QGxpbmsgQ29tcG9uZW50I2NsZWFySW50ZXJ2YWx9IHdoZW5cbiAgICogICAge0BsaW5rIENvbXBvbmVudCNkaXNwb3NlfSBnZXRzIGNhbGxlZC5cbiAgICogMi4gVGhlIGZ1bmN0aW9uIGNhbGxiYWNrIHdpbGwgYmUgYSB7QGxpbmsgQ29tcG9uZW50fkdlbmVyaWNDYWxsYmFja31cbiAgICpcbiAgICogQHBhcmFtIHtDb21wb25lbnR+R2VuZXJpY0NhbGxiYWNrfSBmblxuICAgKiAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIHJ1biBldmVyeSBgeGAgc2Vjb25kcy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsXG4gICAqICAgICAgICBFeGVjdXRlIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24gZXZlcnkgYHhgIG1pbGxpc2Vjb25kcy5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFJldHVybnMgYW4gaWQgdGhhdCBjYW4gYmUgdXNlZCB0byBpZGVudGlmeSB0aGUgaW50ZXJ2YWwuIEl0IGNhbiBhbHNvIGJlIGJlIHVzZWQgaW5cbiAgICogICAgICAgICB7QGxpbmsgQ29tcG9uZW50I2NsZWFySW50ZXJ2YWx9IHRvIGNsZWFyIHRoZSBpbnRlcnZhbC5cbiAgICpcbiAgICogQGxpc3RlbnMgQ29tcG9uZW50I2Rpc3Bvc2VcbiAgICogQHNlZSBbU2ltaWxhciB0b117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvd1RpbWVycy9zZXRJbnRlcnZhbH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbiBzZXRJbnRlcnZhbChmbiwgaW50ZXJ2YWwpIHtcbiAgICBmbiA9IGJpbmQodGhpcywgZm4pO1xuICAgIHRoaXMuY2xlYXJUaW1lcnNPbkRpc3Bvc2VfKCk7XG4gICAgdmFyIGludGVydmFsSWQgPSB3aW5kb3ckMS5zZXRJbnRlcnZhbChmbiwgaW50ZXJ2YWwpO1xuICAgIHRoaXMuc2V0SW50ZXJ2YWxJZHNfLmFkZChpbnRlcnZhbElkKTtcbiAgICByZXR1cm4gaW50ZXJ2YWxJZDtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIGFuIGludGVydmFsIHRoYXQgZ2V0cyBjcmVhdGVkIHZpYSBgd2luZG93LnNldEludGVydmFsYCBvclxuICAgKiB7QGxpbmsgQ29tcG9uZW50I3NldEludGVydmFsfS4gSWYgeW91IHNldCBhbiBpbnRldmFsIHZpYSB7QGxpbmsgQ29tcG9uZW50I3NldEludGVydmFsfVxuICAgKiB1c2UgdGhpcyBmdW5jdGlvbiBpbnN0ZWFkIG9mIGB3aW5kb3cuY2xlYXJJbnRlcnZhbGAuIElmIHlvdSBkb24ndCB5b3VyIGRpc3Bvc2VcbiAgICogbGlzdGVuZXIgd2lsbCBub3QgZ2V0IGNsZWFuZWQgdXAgdW50aWwge0BsaW5rIENvbXBvbmVudCNkaXNwb3NlfSFcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsSWRcbiAgICogICAgICAgIFRoZSBpZCBvZiB0aGUgaW50ZXJ2YWwgdG8gY2xlYXIuIFRoZSByZXR1cm4gdmFsdWUgb2ZcbiAgICogICAgICAgIHtAbGluayBDb21wb25lbnQjc2V0SW50ZXJ2YWx9IG9yIGB3aW5kb3cuc2V0SW50ZXJ2YWxgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgUmV0dXJucyB0aGUgaW50ZXJ2YWwgaWQgdGhhdCB3YXMgY2xlYXJlZC5cbiAgICpcbiAgICogQHNlZSBbU2ltaWxhciB0b117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvd1RpbWVycy9jbGVhckludGVydmFsfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jbGVhckludGVydmFsID0gZnVuY3Rpb24gY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKSB7XG4gICAgaWYgKHRoaXMuc2V0SW50ZXJ2YWxJZHNfLmhhcyhpbnRlcnZhbElkKSkge1xuICAgICAgdGhpcy5zZXRJbnRlcnZhbElkc19bXCJkZWxldGVcIl0oaW50ZXJ2YWxJZCk7XG4gICAgICB3aW5kb3ckMS5jbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnRlcnZhbElkO1xuICB9XG4gIC8qKlxuICAgKiBRdWV1ZXMgdXAgYSBjYWxsYmFjayB0byBiZSBwYXNzZWQgdG8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIChyQUYpLCBidXRcbiAgICogd2l0aCBhIGZldyBleHRyYSBib251c2VzOlxuICAgKlxuICAgKiAtIFN1cHBvcnRzIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgckFGIGJ5IGZhbGxpbmcgYmFjayB0b1xuICAgKiAgIHtAbGluayBDb21wb25lbnQjc2V0VGltZW91dH0uXG4gICAqXG4gICAqIC0gVGhlIGNhbGxiYWNrIGlzIHR1cm5lZCBpbnRvIGEge0BsaW5rIENvbXBvbmVudH5HZW5lcmljQ2FsbGJhY2t9IChpLmUuXG4gICAqICAgYm91bmQgdG8gdGhlIGNvbXBvbmVudCkuXG4gICAqXG4gICAqIC0gQXV0b21hdGljIGNhbmNlbGxhdGlvbiBvZiB0aGUgckFGIGNhbGxiYWNrIGlzIGhhbmRsZWQgaWYgdGhlIGNvbXBvbmVudFxuICAgKiAgIGlzIGRpc3Bvc2VkIGJlZm9yZSBpdCBpcyBjYWxsZWQuXG4gICAqXG4gICAqIEBwYXJhbSAge0NvbXBvbmVudH5HZW5lcmljQ2FsbGJhY2t9IGZuXG4gICAqICAgICAgICAgQSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgYm91bmQgdG8gdGhpcyBjb21wb25lbnQgYW5kIGV4ZWN1dGVkIGp1c3RcbiAgICogICAgICAgICBiZWZvcmUgdGhlIGJyb3dzZXIncyBuZXh0IHJlcGFpbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBSZXR1cm5zIGFuIHJBRiBJRCB0aGF0IGdldHMgdXNlZCB0byBpZGVudGlmeSB0aGUgdGltZW91dC4gSXQgY2FuXG4gICAqICAgICAgICAgYWxzbyBiZSB1c2VkIGluIHtAbGluayBDb21wb25lbnQjY2FuY2VsQW5pbWF0aW9uRnJhbWV9IHRvIGNhbmNlbFxuICAgKiAgICAgICAgIHRoZSBhbmltYXRpb24gZnJhbWUgY2FsbGJhY2suXG4gICAqXG4gICAqIEBsaXN0ZW5zIENvbXBvbmVudCNkaXNwb3NlXG4gICAqIEBzZWUgW1NpbWlsYXIgdG9de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS93aW5kb3cvcmVxdWVzdEFuaW1hdGlvbkZyYW1lfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIC8vIEZhbGwgYmFjayB0byB1c2luZyBhIHRpbWVyLlxuICAgIGlmICghdGhpcy5zdXBwb3J0c1JhZl8pIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFRpbWVvdXQoZm4sIDEwMDAgLyA2MCk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhclRpbWVyc09uRGlzcG9zZV8oKTsgLy8gZGVjbGFyZSBhcyB2YXJpYWJsZXMgc28gdGhleSBhcmUgcHJvcGVybHkgYXZhaWxhYmxlIGluIHJBRiBmdW5jdGlvblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgdmFyIGlkO1xuICAgIGZuID0gYmluZCh0aGlzLCBmbik7XG4gICAgaWQgPSB3aW5kb3ckMS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzMy5yYWZJZHNfLmhhcyhpZCkpIHtcbiAgICAgICAgX3RoaXMzLnJhZklkc19bXCJkZWxldGVcIl0oaWQpO1xuICAgICAgfVxuXG4gICAgICBmbigpO1xuICAgIH0pO1xuICAgIHRoaXMucmFmSWRzXy5hZGQoaWQpO1xuICAgIHJldHVybiBpZDtcbiAgfVxuICAvKipcbiAgICogUmVxdWVzdCBhbiBhbmltYXRpb24gZnJhbWUsIGJ1dCBvbmx5IG9uZSBuYW1lZCBhbmltYXRpb25cbiAgICogZnJhbWUgd2lsbCBiZSBxdWV1ZWQuIEFub3RoZXIgd2lsbCBuZXZlciBiZSBhZGRlZCB1bnRpbFxuICAgKiB0aGUgcHJldmlvdXMgb25lIGZpbmlzaGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgVGhlIG5hbWUgdG8gZ2l2ZSB0aGlzIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgKlxuICAgKiBAcGFyYW0gIHtDb21wb25lbnR+R2VuZXJpY0NhbGxiYWNrfSBmblxuICAgKiAgICAgICAgIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGJvdW5kIHRvIHRoaXMgY29tcG9uZW50IGFuZCBleGVjdXRlZCBqdXN0XG4gICAqICAgICAgICAgYmVmb3JlIHRoZSBicm93c2VyJ3MgbmV4dCByZXBhaW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXF1ZXN0TmFtZWRBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIHJlcXVlc3ROYW1lZEFuaW1hdGlvbkZyYW1lKG5hbWUsIGZuKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5uYW1lZFJhZnNfLmhhcyhuYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXJUaW1lcnNPbkRpc3Bvc2VfKCk7XG4gICAgZm4gPSBiaW5kKHRoaXMsIGZuKTtcbiAgICB2YXIgaWQgPSB0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBmbigpO1xuXG4gICAgICBpZiAoX3RoaXM0Lm5hbWVkUmFmc18uaGFzKG5hbWUpKSB7XG4gICAgICAgIF90aGlzNC5uYW1lZFJhZnNfW1wiZGVsZXRlXCJdKG5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMubmFtZWRSYWZzXy5zZXQobmFtZSwgaWQpO1xuICAgIHJldHVybiBuYW1lO1xuICB9XG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgY3VycmVudCBuYW1lZCBhbmltYXRpb24gZnJhbWUgaWYgaXQgZXhpc3RzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB0byBjYW5jZWwuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNhbmNlbE5hbWVkQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiBjYW5jZWxOYW1lZEFuaW1hdGlvbkZyYW1lKG5hbWUpIHtcbiAgICBpZiAoIXRoaXMubmFtZWRSYWZzXy5oYXMobmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMubmFtZWRSYWZzXy5nZXQobmFtZSkpO1xuICAgIHRoaXMubmFtZWRSYWZzX1tcImRlbGV0ZVwiXShuYW1lKTtcbiAgfVxuICAvKipcbiAgICogQ2FuY2VscyBhIHF1ZXVlZCBjYWxsYmFjayBwYXNzZWQgdG8ge0BsaW5rIENvbXBvbmVudCNyZXF1ZXN0QW5pbWF0aW9uRnJhbWV9XG4gICAqIChyQUYpLlxuICAgKlxuICAgKiBJZiB5b3UgcXVldWUgYW4gckFGIGNhbGxiYWNrIHZpYSB7QGxpbmsgQ29tcG9uZW50I3JlcXVlc3RBbmltYXRpb25GcmFtZX0sXG4gICAqIHVzZSB0aGlzIGZ1bmN0aW9uIGluc3RlYWQgb2YgYHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZWAuIElmIHlvdSBkb24ndCxcbiAgICogeW91ciBkaXNwb3NlIGxpc3RlbmVyIHdpbGwgbm90IGdldCBjbGVhbmVkIHVwIHVudGlsIHtAbGluayBDb21wb25lbnQjZGlzcG9zZX0hXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpZFxuICAgKiAgICAgICAgVGhlIHJBRiBJRCB0byBjbGVhci4gVGhlIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgQ29tcG9uZW50I3JlcXVlc3RBbmltYXRpb25GcmFtZX0uXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBSZXR1cm5zIHRoZSByQUYgSUQgdGhhdCB3YXMgY2xlYXJlZC5cbiAgICpcbiAgICogQHNlZSBbU2ltaWxhciB0b117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy9jYW5jZWxBbmltYXRpb25GcmFtZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICAgIC8vIEZhbGwgYmFjayB0byB1c2luZyBhIHRpbWVyLlxuICAgIGlmICghdGhpcy5zdXBwb3J0c1JhZl8pIHtcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyVGltZW91dChpZCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmFmSWRzXy5oYXMoaWQpKSB7XG4gICAgICB0aGlzLnJhZklkc19bXCJkZWxldGVcIl0oaWQpO1xuICAgICAgd2luZG93JDEuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBpZDtcbiAgfVxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0byBzZXR1cCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCwgYHNldFRpbWVvdXRgLFxuICAgKiBhbmQgYHNldEludGVydmFsYCwgY2xlYXJpbmcgb24gZGlzcG9zZS5cbiAgICpcbiAgICogPiBQcmV2aW91c2x5IGVhY2ggdGltZXIgYWRkZWQgYW5kIHJlbW92ZWQgZGlzcG9zZSBsaXN0ZW5lcnMgb24gaXQncyBvd24uXG4gICAqIEZvciBiZXR0ZXIgcGVyZm9ybWFuY2UgaXQgd2FzIGRlY2lkZWQgdG8gYmF0Y2ggdGhlbSBhbGwsIGFuZCB1c2UgYFNldGBzXG4gICAqIHRvIHRyYWNrIG91dHN0YW5kaW5nIHRpbWVyIGlkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2xlYXJUaW1lcnNPbkRpc3Bvc2VfID0gZnVuY3Rpb24gY2xlYXJUaW1lcnNPbkRpc3Bvc2VfKCkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuY2xlYXJpbmdUaW1lcnNPbkRpc3Bvc2VfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhcmluZ1RpbWVyc09uRGlzcG9zZV8gPSB0cnVlO1xuICAgIHRoaXMub25lKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgW1snbmFtZWRSYWZzXycsICdjYW5jZWxOYW1lZEFuaW1hdGlvbkZyYW1lJ10sIFsncmFmSWRzXycsICdjYW5jZWxBbmltYXRpb25GcmFtZSddLCBbJ3NldFRpbWVvdXRJZHNfJywgJ2NsZWFyVGltZW91dCddLCBbJ3NldEludGVydmFsSWRzXycsICdjbGVhckludGVydmFsJ11dLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIGlkTmFtZSA9IF9yZWZbMF0sXG4gICAgICAgICAgICBjYW5jZWxOYW1lID0gX3JlZlsxXTtcblxuICAgICAgICAvLyBmb3IgYSBgU2V0YCBrZXkgd2lsbCBhY3R1YWxseSBiZSB0aGUgdmFsdWUgYWdhaW5cbiAgICAgICAgLy8gc28gZm9yRWFjaCgodmFsLCB2YWwpID0+YCBidXQgZm9yIG1hcHMgd2Ugd2FudCB0byB1c2VcbiAgICAgICAgLy8gdGhlIGtleS5cbiAgICAgICAgX3RoaXM1W2lkTmFtZV0uZm9yRWFjaChmdW5jdGlvbiAodmFsLCBrZXkpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM1W2NhbmNlbE5hbWVdKGtleSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBfdGhpczUuY2xlYXJpbmdUaW1lcnNPbkRpc3Bvc2VfID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgYENvbXBvbmVudGAgd2l0aCBgdmlkZW9qc2AgZ2l2ZW4gdGhlIG5hbWUgYW5kIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqID4gTk9URToge0BsaW5rIFRlY2h9cyBzaG91bGQgbm90IGJlIHJlZ2lzdGVyZWQgYXMgYSBgQ29tcG9uZW50YC4ge0BsaW5rIFRlY2h9c1xuICAgKiAgICAgICAgIHNob3VsZCBiZSByZWdpc3RlcmVkIHVzaW5nIHtAbGluayBUZWNoLnJlZ2lzdGVyVGVjaH0gb3JcbiAgICogICAgICAgICB7QGxpbmsgdmlkZW9qczp2aWRlb2pzLnJlZ2lzdGVyVGVjaH0uXG4gICAqXG4gICAqID4gTk9URTogVGhpcyBmdW5jdGlvbiBjYW4gYWxzbyBiZSBzZWVuIG9uIHZpZGVvanMgYXNcbiAgICogICAgICAgICB7QGxpbmsgdmlkZW9qczp2aWRlb2pzLnJlZ2lzdGVyQ29tcG9uZW50fS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBgQ29tcG9uZW50YCB0byByZWdpc3Rlci5cbiAgICpcbiAgICogQHBhcmFtIHtDb21wb25lbnR9IENvbXBvbmVudFRvUmVnaXN0ZXJcbiAgICogICAgICAgIFRoZSBgQ29tcG9uZW50YCBjbGFzcyB0byByZWdpc3Rlci5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKiAgICAgICAgIFRoZSBgQ29tcG9uZW50YCB0aGF0IHdhcyByZWdpc3RlcmVkLlxuICAgKi9cbiAgO1xuXG4gIENvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCA9IGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcG9uZW50KG5hbWUsIENvbXBvbmVudFRvUmVnaXN0ZXIpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8ICFuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGNvbXBvbmVudCBuYW1lLCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOyBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy5cIik7XG4gICAgfVxuXG4gICAgdmFyIFRlY2ggPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KCdUZWNoJyk7IC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoaXMgY2hlY2sgaXMgb25seSBkb25lIGlmIFRlY2ggaGFzIGJlZW4gcmVnaXN0ZXJlZC5cblxuICAgIHZhciBpc1RlY2ggPSBUZWNoICYmIFRlY2guaXNUZWNoKENvbXBvbmVudFRvUmVnaXN0ZXIpO1xuICAgIHZhciBpc0NvbXAgPSBDb21wb25lbnQgPT09IENvbXBvbmVudFRvUmVnaXN0ZXIgfHwgQ29tcG9uZW50LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKENvbXBvbmVudFRvUmVnaXN0ZXIucHJvdG90eXBlKTtcblxuICAgIGlmIChpc1RlY2ggfHwgIWlzQ29tcCkge1xuICAgICAgdmFyIHJlYXNvbjtcblxuICAgICAgaWYgKGlzVGVjaCkge1xuICAgICAgICByZWFzb24gPSAndGVjaHMgbXVzdCBiZSByZWdpc3RlcmVkIHVzaW5nIFRlY2gucmVnaXN0ZXJUZWNoKCknO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVhc29uID0gJ211c3QgYmUgYSBDb21wb25lbnQgc3ViY2xhc3MnO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGNvbXBvbmVudCwgXFxcIlwiICsgbmFtZSArIFwiXFxcIjsgXCIgKyByZWFzb24gKyBcIi5cIik7XG4gICAgfVxuXG4gICAgbmFtZSA9IHRvVGl0bGVDYXNlKG5hbWUpO1xuXG4gICAgaWYgKCFDb21wb25lbnQuY29tcG9uZW50c18pIHtcbiAgICAgIENvbXBvbmVudC5jb21wb25lbnRzXyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBQbGF5ZXIgPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KCdQbGF5ZXInKTtcblxuICAgIGlmIChuYW1lID09PSAnUGxheWVyJyAmJiBQbGF5ZXIgJiYgUGxheWVyLnBsYXllcnMpIHtcbiAgICAgIHZhciBwbGF5ZXJzID0gUGxheWVyLnBsYXllcnM7XG4gICAgICB2YXIgcGxheWVyTmFtZXMgPSBPYmplY3Qua2V5cyhwbGF5ZXJzKTsgLy8gSWYgd2UgaGF2ZSBwbGF5ZXJzIHRoYXQgd2VyZSBkaXNwb3NlZCwgdGhlbiB0aGVpciBuYW1lIHdpbGwgc3RpbGwgYmVcbiAgICAgIC8vIGluIFBsYXllcnMucGxheWVycy4gU28sIHdlIG11c3QgbG9vcCB0aHJvdWdoIGFuZCB2ZXJpZnkgdGhhdCB0aGUgdmFsdWVcbiAgICAgIC8vIGZvciBlYWNoIGl0ZW0gaXMgbm90IG51bGwuIFRoaXMgYWxsb3dzIHJlZ2lzdHJhdGlvbiBvZiB0aGUgUGxheWVyIGNvbXBvbmVudFxuICAgICAgLy8gYWZ0ZXIgYWxsIHBsYXllcnMgaGF2ZSBiZWVuIGRpc3Bvc2VkIG9yIGJlZm9yZSBhbnkgd2VyZSBjcmVhdGVkLlxuXG4gICAgICBpZiAocGxheWVycyAmJiBwbGF5ZXJOYW1lcy5sZW5ndGggPiAwICYmIHBsYXllck5hbWVzLm1hcChmdW5jdGlvbiAocG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHBsYXllcnNbcG5hbWVdO1xuICAgICAgfSkuZXZlcnkoQm9vbGVhbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IHJlZ2lzdGVyIFBsYXllciBjb21wb25lbnQgYWZ0ZXIgcGxheWVyIGhhcyBiZWVuIGNyZWF0ZWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQ29tcG9uZW50LmNvbXBvbmVudHNfW25hbWVdID0gQ29tcG9uZW50VG9SZWdpc3RlcjtcbiAgICBDb21wb25lbnQuY29tcG9uZW50c19bdG9Mb3dlckNhc2UobmFtZSldID0gQ29tcG9uZW50VG9SZWdpc3RlcjtcbiAgICByZXR1cm4gQ29tcG9uZW50VG9SZWdpc3RlcjtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgYENvbXBvbmVudGAgYmFzZWQgb24gdGhlIG5hbWUgaXQgd2FzIHJlZ2lzdGVyZWQgd2l0aC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogICAgICAgIFRoZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgdG8gZ2V0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9XG4gICAqICAgICAgICAgVGhlIGBDb21wb25lbnRgIHRoYXQgZ290IHJlZ2lzdGVyZWQgdW5kZXIgdGhlIGdpdmVuIG5hbWUuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIEluIGB2aWRlb2pzYCA2IHRoaXMgd2lsbCBub3QgcmV0dXJuIGBDb21wb25lbnRgcyB0aGF0IHdlcmUgbm90XG4gICAqICAgICAgICAgICAgIHJlZ2lzdGVyZWQgdXNpbmcge0BsaW5rIENvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudH0uIEN1cnJlbnRseSB3ZVxuICAgKiAgICAgICAgICAgICBjaGVjayB0aGUgZ2xvYmFsIGB2aWRlb2pzYCBvYmplY3QgZm9yIGEgYENvbXBvbmVudGAgbmFtZSBhbmRcbiAgICogICAgICAgICAgICAgcmV0dXJuIHRoYXQgaWYgaXQgZXhpc3RzLlxuICAgKi9cbiAgO1xuXG4gIENvbXBvbmVudC5nZXRDb21wb25lbnQgPSBmdW5jdGlvbiBnZXRDb21wb25lbnQobmFtZSkge1xuICAgIGlmICghbmFtZSB8fCAhQ29tcG9uZW50LmNvbXBvbmVudHNfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIENvbXBvbmVudC5jb21wb25lbnRzX1tuYW1lXTtcbiAgfTtcblxuICByZXR1cm4gQ29tcG9uZW50O1xufSgpO1xuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvbmVudCBzdXBwb3J0cyBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYC5cbiAqXG4gKiBUaGlzIGlzIGV4cG9zZWQgcHJpbWFyaWx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuXG5cbkNvbXBvbmVudC5wcm90b3R5cGUuc3VwcG9ydHNSYWZfID0gdHlwZW9mIHdpbmRvdyQxLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygd2luZG93JDEuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPT09ICdmdW5jdGlvbic7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0NvbXBvbmVudCcsIENvbXBvbmVudCk7XG5cbi8qKlxuICogQGZpbGUgYnJvd3Nlci5qc1xuICogQG1vZHVsZSBicm93c2VyXG4gKi9cbnZhciBVU0VSX0FHRU5UID0gd2luZG93JDEubmF2aWdhdG9yICYmIHdpbmRvdyQxLm5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG52YXIgd2Via2l0VmVyc2lvbk1hcCA9IC9BcHBsZVdlYktpdFxcLyhbXFxkLl0rKS9pLmV4ZWMoVVNFUl9BR0VOVCk7XG52YXIgYXBwbGVXZWJraXRWZXJzaW9uID0gd2Via2l0VmVyc2lvbk1hcCA/IHBhcnNlRmxvYXQod2Via2l0VmVyc2lvbk1hcC5wb3AoKSkgOiBudWxsO1xuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGRldmljZSBpcyBhbiBpUG9kLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQHR5cGUge0Jvb2xlYW59XG4gKi9cblxudmFyIElTX0lQT0QgPSAvaVBvZC9pLnRlc3QoVVNFUl9BR0VOVCk7XG4vKipcbiAqIFRoZSBkZXRlY3RlZCBpT1MgdmVyc2lvbiAtIG9yIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAqL1xuXG52YXIgSU9TX1ZFUlNJT04gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBtYXRjaCA9IFVTRVJfQUdFTlQubWF0Y2goL09TIChcXGQrKV8vaSk7XG5cbiAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XG4gICAgcmV0dXJuIG1hdGNoWzFdO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59KCk7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYW4gQW5kcm9pZCBkZXZpY2UuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuXG52YXIgSVNfQU5EUk9JRCA9IC9BbmRyb2lkL2kudGVzdChVU0VSX0FHRU5UKTtcbi8qKlxuICogVGhlIGRldGVjdGVkIEFuZHJvaWQgdmVyc2lvbiAtIG9yIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtudW1iZXJ8c3RyaW5nfG51bGx9XG4gKi9cblxudmFyIEFORFJPSURfVkVSU0lPTiA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhpcyBtYXRjaGVzIEFuZHJvaWQgTWFqb3IuTWlub3IuUGF0Y2ggdmVyc2lvbnNcbiAgLy8gQU5EUk9JRF9WRVJTSU9OIGlzIE1ham9yLk1pbm9yIGFzIGEgTnVtYmVyLCBpZiBNaW5vciBpc24ndCBhdmFpbGFibGUsIHRoZW4gb25seSBNYWpvciBpcyByZXR1cm5lZFxuICB2YXIgbWF0Y2ggPSBVU0VSX0FHRU5ULm1hdGNoKC9BbmRyb2lkIChcXGQrKSg/OlxcLihcXGQrKSk/KD86XFwuKFxcZCspKSovaSk7XG5cbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG1ham9yID0gbWF0Y2hbMV0gJiYgcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciBtaW5vciA9IG1hdGNoWzJdICYmIHBhcnNlRmxvYXQobWF0Y2hbMl0pO1xuXG4gIGlmIChtYWpvciAmJiBtaW5vcikge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KG1hdGNoWzFdICsgJy4nICsgbWF0Y2hbMl0pO1xuICB9IGVsc2UgaWYgKG1ham9yKSB7XG4gICAgcmV0dXJuIG1ham9yO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59KCk7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYSBuYXRpdmUgQW5kcm9pZCBicm93c2VyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQHR5cGUge0Jvb2xlYW59XG4gKi9cblxudmFyIElTX05BVElWRV9BTkRST0lEID0gSVNfQU5EUk9JRCAmJiBBTkRST0lEX1ZFUlNJT04gPCA1ICYmIGFwcGxlV2Via2l0VmVyc2lvbiA8IDUzNztcbi8qKlxuICogV2hldGhlciBvciBub3QgdGhpcyBpcyBNb3ppbGxhIEZpcmVmb3guXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuXG52YXIgSVNfRklSRUZPWCA9IC9GaXJlZm94L2kudGVzdChVU0VSX0FHRU5UKTtcbi8qKlxuICogV2hldGhlciBvciBub3QgdGhpcyBpcyBNaWNyb3NvZnQgRWRnZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5cbnZhciBJU19FREdFID0gL0VkZy9pLnRlc3QoVVNFUl9BR0VOVCk7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgR29vZ2xlIENocm9tZS5cbiAqXG4gKiBUaGlzIHdpbGwgYWxzbyBiZSBgdHJ1ZWAgZm9yIENocm9tZSBvbiBpT1MsIHdoaWNoIHdpbGwgaGF2ZSBkaWZmZXJlbnQgc3VwcG9ydFxuICogYXMgaXQgaXMgYWN0dWFsbHkgU2FmYXJpIHVuZGVyIHRoZSBob29kLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQHR5cGUge0Jvb2xlYW59XG4gKi9cblxudmFyIElTX0NIUk9NRSA9ICFJU19FREdFICYmICgvQ2hyb21lL2kudGVzdChVU0VSX0FHRU5UKSB8fCAvQ3JpT1MvaS50ZXN0KFVTRVJfQUdFTlQpKTtcbi8qKlxuICogVGhlIGRldGVjdGVkIEdvb2dsZSBDaHJvbWUgdmVyc2lvbiAtIG9yIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtudW1iZXJ8bnVsbH1cbiAqL1xuXG52YXIgQ0hST01FX1ZFUlNJT04gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBtYXRjaCA9IFVTRVJfQUdFTlQubWF0Y2goLyhDaHJvbWV8Q3JpT1MpXFwvKFxcZCspLyk7XG5cbiAgaWYgKG1hdGNoICYmIG1hdGNoWzJdKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobWF0Y2hbMl0pO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59KCk7XG4vKipcbiAqIFRoZSBkZXRlY3RlZCBJbnRlcm5ldCBFeHBsb3JlciB2ZXJzaW9uIC0gb3IgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQHR5cGUge251bWJlcnxudWxsfVxuICovXG5cbnZhciBJRV9WRVJTSU9OID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmVzdWx0ID0gL01TSUVcXHMoXFxkKylcXC5cXGQvLmV4ZWMoVVNFUl9BR0VOVCk7XG4gIHZhciB2ZXJzaW9uID0gcmVzdWx0ICYmIHBhcnNlRmxvYXQocmVzdWx0WzFdKTtcblxuICBpZiAoIXZlcnNpb24gJiYgL1RyaWRlbnRcXC83LjAvaS50ZXN0KFVTRVJfQUdFTlQpICYmIC9ydjoxMS4wLy50ZXN0KFVTRVJfQUdFTlQpKSB7XG4gICAgLy8gSUUgMTEgaGFzIGEgZGlmZmVyZW50IHVzZXIgYWdlbnQgc3RyaW5nIHRoYW4gb3RoZXIgSUUgdmVyc2lvbnNcbiAgICB2ZXJzaW9uID0gMTEuMDtcbiAgfVxuXG4gIHJldHVybiB2ZXJzaW9uO1xufSgpO1xuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGlzIGRlc2t0b3AgU2FmYXJpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdFxuICogQHR5cGUge0Jvb2xlYW59XG4gKi9cblxudmFyIElTX1NBRkFSSSA9IC9TYWZhcmkvaS50ZXN0KFVTRVJfQUdFTlQpICYmICFJU19DSFJPTUUgJiYgIUlTX0FORFJPSUQgJiYgIUlTX0VER0U7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYSBXaW5kb3dzIG1hY2hpbmUuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuXG52YXIgSVNfV0lORE9XUyA9IC9XaW5kb3dzL2kudGVzdChVU0VSX0FHRU5UKTtcbi8qKlxuICogV2hldGhlciBvciBub3QgdGhpcyBkZXZpY2UgaXMgdG91Y2gtZW5hYmxlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5cbnZhciBUT1VDSF9FTkFCTEVEID0gaXNSZWFsKCkgJiYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyQxIHx8IHdpbmRvdyQxLm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCB3aW5kb3ckMS5Eb2N1bWVudFRvdWNoICYmIHdpbmRvdyQxLmRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93JDEuRG9jdW1lbnRUb3VjaCk7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgZGV2aWNlIGlzIGFuIGlQYWQuXG4gKlxuICogQHN0YXRpY1xuICogQGNvbnN0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuXG52YXIgSVNfSVBBRCA9IC9pUGFkL2kudGVzdChVU0VSX0FHRU5UKSB8fCBJU19TQUZBUkkgJiYgVE9VQ0hfRU5BQkxFRCAmJiAhL2lQaG9uZS9pLnRlc3QoVVNFUl9BR0VOVCk7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgZGV2aWNlIGlzIGFuIGlQaG9uZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG4vLyBUaGUgRmFjZWJvb2sgYXBwJ3MgVUlXZWJWaWV3IGlkZW50aWZpZXMgYXMgYm90aCBhbiBpUGhvbmUgYW5kIGlQYWQsIHNvXG4vLyB0byBpZGVudGlmeSBpUGhvbmVzLCB3ZSBuZWVkIHRvIGV4Y2x1ZGUgaVBhZHMuXG4vLyBodHRwOi8vYXJ0c3kuZ2l0aHViLmlvL2Jsb2cvMjAxMi8xMC8xOC90aGUtcGVyaWxzLW9mLWlvcy11c2VyLWFnZW50LXNuaWZmaW5nL1xuXG52YXIgSVNfSVBIT05FID0gL2lQaG9uZS9pLnRlc3QoVVNFUl9BR0VOVCkgJiYgIUlTX0lQQUQ7XG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYW4gaU9TIGRldmljZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5cbnZhciBJU19JT1MgPSBJU19JUEhPTkUgfHwgSVNfSVBBRCB8fCBJU19JUE9EO1xuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGlzIGFueSBmbGF2b3Igb2YgU2FmYXJpIC0gaW5jbHVkaW5nIGlPUy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5cbnZhciBJU19BTllfU0FGQVJJID0gKElTX1NBRkFSSSB8fCBJU19JT1MpICYmICFJU19DSFJPTUU7XG5cbnZhciBicm93c2VyID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIElTX0lQT0Q6IElTX0lQT0QsXG4gIElPU19WRVJTSU9OOiBJT1NfVkVSU0lPTixcbiAgSVNfQU5EUk9JRDogSVNfQU5EUk9JRCxcbiAgQU5EUk9JRF9WRVJTSU9OOiBBTkRST0lEX1ZFUlNJT04sXG4gIElTX05BVElWRV9BTkRST0lEOiBJU19OQVRJVkVfQU5EUk9JRCxcbiAgSVNfRklSRUZPWDogSVNfRklSRUZPWCxcbiAgSVNfRURHRTogSVNfRURHRSxcbiAgSVNfQ0hST01FOiBJU19DSFJPTUUsXG4gIENIUk9NRV9WRVJTSU9OOiBDSFJPTUVfVkVSU0lPTixcbiAgSUVfVkVSU0lPTjogSUVfVkVSU0lPTixcbiAgSVNfU0FGQVJJOiBJU19TQUZBUkksXG4gIElTX1dJTkRPV1M6IElTX1dJTkRPV1MsXG4gIFRPVUNIX0VOQUJMRUQ6IFRPVUNIX0VOQUJMRUQsXG4gIElTX0lQQUQ6IElTX0lQQUQsXG4gIElTX0lQSE9ORTogSVNfSVBIT05FLFxuICBJU19JT1M6IElTX0lPUyxcbiAgSVNfQU5ZX1NBRkFSSTogSVNfQU5ZX1NBRkFSSVxufSk7XG5cbi8qKlxuICogQGZpbGUgdGltZS1yYW5nZXMuanNcbiAqIEBtb2R1bGUgdGltZS1yYW5nZXNcbiAqL1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHRpbWUgZm9yIHRoZSBzcGVjaWZpZWQgaW5kZXggYXQgdGhlIHN0YXJ0IG9yIGVuZFxuICogb2YgYSBUaW1lUmFuZ2Ugb2JqZWN0LlxuICpcbiAqIEB0eXBlZGVmICAgIHtGdW5jdGlvbn0gVGltZVJhbmdlSW5kZXhcbiAqXG4gKiBAcGFyYW0gICAgICB7bnVtYmVyfSBbaW5kZXg9MF1cbiAqICAgICAgICAgICAgIFRoZSByYW5nZSBudW1iZXIgdG8gcmV0dXJuIHRoZSB0aW1lIGZvci5cbiAqXG4gKiBAcmV0dXJuICAgICB7bnVtYmVyfVxuICogICAgICAgICAgICAgVGhlIHRpbWUgb2Zmc2V0IGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhlIGluZGV4IGFyZ3VtZW50IG11c3QgYmUgcHJvdmlkZWQuXG4gKiAgICAgICAgICAgICBJbiB0aGUgZnV0dXJlLCBsZWF2aW5nIGl0IG91dCB3aWxsIHRocm93IGFuIGVycm9yLlxuICovXG5cbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgcmFuZ2VzIG9mIHRpbWUuXG4gKlxuICogQHR5cGVkZWYgIHtPYmplY3R9IFRpbWVSYW5nZVxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsZW5ndGhcbiAqICAgICAgICAgICBUaGUgbnVtYmVyIG9mIHRpbWUgcmFuZ2VzIHJlcHJlc2VudGVkIGJ5IHRoaXMgb2JqZWN0LlxuICpcbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOnRpbWUtcmFuZ2VzflRpbWVSYW5nZUluZGV4fSBzdGFydFxuICogICAgICAgICAgIFJldHVybnMgdGhlIHRpbWUgb2Zmc2V0IGF0IHdoaWNoIGEgc3BlY2lmaWVkIHRpbWUgcmFuZ2UgYmVnaW5zLlxuICpcbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOnRpbWUtcmFuZ2VzflRpbWVSYW5nZUluZGV4fSBlbmRcbiAqICAgICAgICAgICBSZXR1cm5zIHRoZSB0aW1lIG9mZnNldCBhdCB3aGljaCBhIHNwZWNpZmllZCB0aW1lIHJhbmdlIGVuZHMuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVGltZVJhbmdlc1xuICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYW55IG9mIHRoZSB0aW1lIHJhbmdlcyBhcmUgb3ZlciB0aGUgbWF4aW11bSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge3N0cmluZ30gZm5OYW1lXG4gKiAgICAgICAgICBUaGUgZnVuY3Rpb24gbmFtZSB0byB1c2UgZm9yIGxvZ2dpbmdcbiAqXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBpbmRleFxuICogICAgICAgICAgVGhlIGluZGV4IHRvIGNoZWNrXG4gKlxuICogQHBhcmFtICAge251bWJlcn0gbWF4SW5kZXhcbiAqICAgICAgICAgIFRoZSBtYXhpbXVtIHBvc3NpYmxlIGluZGV4XG4gKlxuICogQHRocm93cyAge0Vycm9yfSBpZiB0aGUgdGltZVJhbmdlcyBwcm92aWRlZCBhcmUgb3ZlciB0aGUgbWF4SW5kZXhcbiAqL1xuZnVuY3Rpb24gcmFuZ2VDaGVjayhmbk5hbWUsIGluZGV4LCBtYXhJbmRleCkge1xuICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJyB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBtYXhJbmRleCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICdcIiArIGZuTmFtZSArIFwiJyBvbiAnVGltZVJhbmdlcyc6IFRoZSBpbmRleCBwcm92aWRlZCAoXCIgKyBpbmRleCArIFwiKSBpcyBub24tbnVtZXJpYyBvciBvdXQgb2YgYm91bmRzICgwLVwiICsgbWF4SW5kZXggKyBcIikuXCIpO1xuICB9XG59XG4vKipcbiAqIEdldCB0aGUgdGltZSBmb3IgdGhlIHNwZWNpZmllZCBpbmRleCBhdCB0aGUgc3RhcnQgb3IgZW5kXG4gKiBvZiBhIFRpbWVSYW5nZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgICAgIHtzdHJpbmd9IGZuTmFtZVxuICogICAgICAgICAgICAgVGhlIGZ1bmN0aW9uIG5hbWUgdG8gdXNlIGZvciBsb2dnaW5nXG4gKlxuICogQHBhcmFtICAgICAge3N0cmluZ30gdmFsdWVJbmRleFxuICogICAgICAgICAgICAgVGhlIHByb3BlcnR5IHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gZ2V0IHRoZSB0aW1lLiBzaG91bGQgYmVcbiAqICAgICAgICAgICAgICdzdGFydCcgb3IgJ2VuZCdcbiAqXG4gKiBAcGFyYW0gICAgICB7QXJyYXl9IHJhbmdlc1xuICogICAgICAgICAgICAgQW4gYXJyYXkgb2YgdGltZSByYW5nZXNcbiAqXG4gKiBAcGFyYW0gICAgICB7QXJyYXl9IFtyYW5nZUluZGV4PTBdXG4gKiAgICAgICAgICAgICBUaGUgaW5kZXggdG8gc3RhcnQgdGhlIHNlYXJjaCBhdFxuICpcbiAqIEByZXR1cm4gICAgIHtudW1iZXJ9XG4gKiAgICAgICAgICAgICBUaGUgdGltZSB0aGF0IG9mZnNldCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICpcbiAqIEBkZXByZWNhdGVkIHJhbmdlSW5kZXggbXVzdCBiZSBzZXQgdG8gYSB2YWx1ZSwgaW4gdGhlIGZ1dHVyZSB0aGlzIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gKiBAdGhyb3dzICAgICB7RXJyb3J9IGlmIHJhbmdlSW5kZXggaXMgbW9yZSB0aGFuIHRoZSBsZW5ndGggb2YgcmFuZ2VzXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRSYW5nZShmbk5hbWUsIHZhbHVlSW5kZXgsIHJhbmdlcywgcmFuZ2VJbmRleCkge1xuICByYW5nZUNoZWNrKGZuTmFtZSwgcmFuZ2VJbmRleCwgcmFuZ2VzLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gcmFuZ2VzW3JhbmdlSW5kZXhdW3ZhbHVlSW5kZXhdO1xufVxuLyoqXG4gKiBDcmVhdGUgYSB0aW1lIHJhbmdlIG9iamVjdCBnaXZlbiByYW5nZXMgb2YgdGltZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge0FycmF5fSBbcmFuZ2VzXVxuICogICAgICAgICAgQW4gYXJyYXkgb2YgdGltZSByYW5nZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVUaW1lUmFuZ2VzT2JqKHJhbmdlcykge1xuICBpZiAocmFuZ2VzID09PSB1bmRlZmluZWQgfHwgcmFuZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZW5ndGg6IDAsXG4gICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBUaW1lUmFuZ2VzIG9iamVjdCBpcyBlbXB0eScpO1xuICAgICAgfSxcbiAgICAgIGVuZDogZnVuY3Rpb24gZW5kKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgVGltZVJhbmdlcyBvYmplY3QgaXMgZW1wdHknKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsZW5ndGg6IHJhbmdlcy5sZW5ndGgsXG4gICAgc3RhcnQ6IGdldFJhbmdlLmJpbmQobnVsbCwgJ3N0YXJ0JywgMCwgcmFuZ2VzKSxcbiAgICBlbmQ6IGdldFJhbmdlLmJpbmQobnVsbCwgJ2VuZCcsIDEsIHJhbmdlcylcbiAgfTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgYFRpbWVSYW5nZWAgb2JqZWN0IHdoaWNoIG1pbWljcyBhblxuICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9UaW1lUmFuZ2VzfEhUTUw1IFRpbWVSYW5nZXMgaW5zdGFuY2V9LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfEFycmF5W119IHN0YXJ0XG4gKiAgICAgICAgVGhlIHN0YXJ0IG9mIGEgc2luZ2xlIHJhbmdlIChhIG51bWJlcikgb3IgYW4gYXJyYXkgb2YgcmFuZ2VzIChhblxuICogICAgICAgIGFycmF5IG9mIGFycmF5cyBvZiB0d28gbnVtYmVycyBlYWNoKS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiAgICAgICAgVGhlIGVuZCBvZiBhIHNpbmdsZSByYW5nZS4gQ2Fubm90IGJlIHVzZWQgd2l0aCB0aGUgYXJyYXkgZm9ybSBvZlxuICogICAgICAgIHRoZSBgc3RhcnRgIGFyZ3VtZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlVGltZVJhbmdlcyhzdGFydCwgZW5kKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0YXJ0KSkge1xuICAgIHJldHVybiBjcmVhdGVUaW1lUmFuZ2VzT2JqKHN0YXJ0KTtcbiAgfSBlbHNlIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVRpbWVSYW5nZXNPYmooKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVUaW1lUmFuZ2VzT2JqKFtbc3RhcnQsIGVuZF1dKTtcbn1cblxuLyoqXG4gKiBAZmlsZSBidWZmZXIuanNcbiAqIEBtb2R1bGUgYnVmZmVyXG4gKi9cbi8qKlxuICogQ29tcHV0ZSB0aGUgcGVyY2VudGFnZSBvZiB0aGUgbWVkaWEgdGhhdCBoYXMgYmVlbiBidWZmZXJlZC5cbiAqXG4gKiBAcGFyYW0ge1RpbWVSYW5nZX0gYnVmZmVyZWRcbiAqICAgICAgICBUaGUgY3VycmVudCBgVGltZVJhbmdlYCBvYmplY3QgcmVwcmVzZW50aW5nIGJ1ZmZlcmVkIHRpbWUgcmFuZ2VzXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uXG4gKiAgICAgICAgVG90YWwgZHVyYXRpb24gb2YgdGhlIG1lZGlhXG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBQZXJjZW50IGJ1ZmZlcmVkIG9mIHRoZSB0b3RhbCBkdXJhdGlvbiBpbiBkZWNpbWFsIGZvcm0uXG4gKi9cblxuZnVuY3Rpb24gYnVmZmVyZWRQZXJjZW50KGJ1ZmZlcmVkLCBkdXJhdGlvbikge1xuICB2YXIgYnVmZmVyZWREdXJhdGlvbiA9IDA7XG4gIHZhciBzdGFydDtcbiAgdmFyIGVuZDtcblxuICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoIWJ1ZmZlcmVkIHx8ICFidWZmZXJlZC5sZW5ndGgpIHtcbiAgICBidWZmZXJlZCA9IGNyZWF0ZVRpbWVSYW5nZXMoMCwgMCk7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgc3RhcnQgPSBidWZmZXJlZC5zdGFydChpKTtcbiAgICBlbmQgPSBidWZmZXJlZC5lbmQoaSk7IC8vIGJ1ZmZlcmVkIGVuZCBjYW4gYmUgYmlnZ2VyIHRoYW4gZHVyYXRpb24gYnkgYSB2ZXJ5IHNtYWxsIGZyYWN0aW9uXG5cbiAgICBpZiAoZW5kID4gZHVyYXRpb24pIHtcbiAgICAgIGVuZCA9IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIGJ1ZmZlcmVkRHVyYXRpb24gKz0gZW5kIC0gc3RhcnQ7XG4gIH1cblxuICByZXR1cm4gYnVmZmVyZWREdXJhdGlvbiAvIGR1cmF0aW9uO1xufVxuXG4vKipcbiAqIEBmaWxlIGZ1bGxzY3JlZW4tYXBpLmpzXG4gKiBAbW9kdWxlIGZ1bGxzY3JlZW4tYXBpXG4gKiBAcHJpdmF0ZVxuICovXG4vKipcbiAqIFN0b3JlIHRoZSBicm93c2VyLXNwZWNpZmljIG1ldGhvZHMgZm9yIHRoZSBmdWxsc2NyZWVuIEFQSS5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHNlZSBbU3BlY2lmaWNhdGlvbl17QGxpbmsgaHR0cHM6Ly9mdWxsc2NyZWVuLnNwZWMud2hhdHdnLm9yZ31cbiAqIEBzZWUgW01hcCBBcHByb2FjaCBGcm9tIFNjcmVlbmZ1bGwuanNde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvc2NyZWVuZnVsbC5qc31cbiAqL1xuXG52YXIgRnVsbHNjcmVlbkFwaSA9IHtcbiAgcHJlZml4ZWQ6IHRydWVcbn07IC8vIGJyb3dzZXIgQVBJIG1ldGhvZHNcblxudmFyIGFwaU1hcCA9IFtbJ3JlcXVlc3RGdWxsc2NyZWVuJywgJ2V4aXRGdWxsc2NyZWVuJywgJ2Z1bGxzY3JlZW5FbGVtZW50JywgJ2Z1bGxzY3JlZW5FbmFibGVkJywgJ2Z1bGxzY3JlZW5jaGFuZ2UnLCAnZnVsbHNjcmVlbmVycm9yJywgJ2Z1bGxzY3JlZW4nXSwgLy8gV2ViS2l0XG5bJ3dlYmtpdFJlcXVlc3RGdWxsc2NyZWVuJywgJ3dlYmtpdEV4aXRGdWxsc2NyZWVuJywgJ3dlYmtpdEZ1bGxzY3JlZW5FbGVtZW50JywgJ3dlYmtpdEZ1bGxzY3JlZW5FbmFibGVkJywgJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCAnd2Via2l0ZnVsbHNjcmVlbmVycm9yJywgJy13ZWJraXQtZnVsbC1zY3JlZW4nXSwgLy8gTW96aWxsYVxuWydtb3pSZXF1ZXN0RnVsbFNjcmVlbicsICdtb3pDYW5jZWxGdWxsU2NyZWVuJywgJ21vekZ1bGxTY3JlZW5FbGVtZW50JywgJ21vekZ1bGxTY3JlZW5FbmFibGVkJywgJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCAnbW96ZnVsbHNjcmVlbmVycm9yJywgJy1tb3otZnVsbC1zY3JlZW4nXSwgLy8gTWljcm9zb2Z0XG5bJ21zUmVxdWVzdEZ1bGxzY3JlZW4nLCAnbXNFeGl0RnVsbHNjcmVlbicsICdtc0Z1bGxzY3JlZW5FbGVtZW50JywgJ21zRnVsbHNjcmVlbkVuYWJsZWQnLCAnTVNGdWxsc2NyZWVuQ2hhbmdlJywgJ01TRnVsbHNjcmVlbkVycm9yJywgJy1tcy1mdWxsc2NyZWVuJ11dO1xudmFyIHNwZWNBcGkgPSBhcGlNYXBbMF07XG52YXIgYnJvd3NlckFwaTsgLy8gZGV0ZXJtaW5lIHRoZSBzdXBwb3J0ZWQgc2V0IG9mIGZ1bmN0aW9uc1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IGFwaU1hcC5sZW5ndGg7IGkrKykge1xuICAvLyBjaGVjayBmb3IgZXhpdEZ1bGxzY3JlZW4gZnVuY3Rpb25cbiAgaWYgKGFwaU1hcFtpXVsxXSBpbiBkb2N1bWVudCkge1xuICAgIGJyb3dzZXJBcGkgPSBhcGlNYXBbaV07XG4gICAgYnJlYWs7XG4gIH1cbn0gLy8gbWFwIHRoZSBicm93c2VyIEFQSSBuYW1lcyB0byB0aGUgc3BlYyBBUEkgbmFtZXNcblxuXG5pZiAoYnJvd3NlckFwaSkge1xuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYnJvd3NlckFwaS5sZW5ndGg7IF9pKyspIHtcbiAgICBGdWxsc2NyZWVuQXBpW3NwZWNBcGlbX2ldXSA9IGJyb3dzZXJBcGlbX2ldO1xuICB9XG5cbiAgRnVsbHNjcmVlbkFwaS5wcmVmaXhlZCA9IGJyb3dzZXJBcGlbMF0gIT09IHNwZWNBcGlbMF07XG59XG5cbi8qKlxuICogQGZpbGUgbWVkaWEtZXJyb3IuanNcbiAqL1xuLyoqXG4gKiBBIEN1c3RvbSBgTWVkaWFFcnJvcmAgY2xhc3Mgd2hpY2ggbWltaWNzIHRoZSBzdGFuZGFyZCBIVE1MNSBgTWVkaWFFcnJvcmAgY2xhc3MuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfE9iamVjdHxNZWRpYUVycm9yfSB2YWx1ZVxuICogICAgICAgIFRoaXMgY2FuIGJlIG9mIG11bHRpcGxlIHR5cGVzOlxuICogICAgICAgIC0gbnVtYmVyOiBzaG91bGQgYmUgYSBzdGFuZGFyZCBlcnJvciBjb2RlXG4gKiAgICAgICAgLSBzdHJpbmc6IGFuIGVycm9yIG1lc3NhZ2UgKHRoZSBjb2RlIHdpbGwgYmUgMClcbiAqICAgICAgICAtIE9iamVjdDogYXJiaXRyYXJ5IHByb3BlcnRpZXNcbiAqICAgICAgICAtIGBNZWRpYUVycm9yYCAobmF0aXZlKTogdXNlZCB0byBwb3B1bGF0ZSBhIHZpZGVvLmpzIGBNZWRpYUVycm9yYCBvYmplY3RcbiAqICAgICAgICAtIGBNZWRpYUVycm9yYCAodmlkZW8uanMpOiB3aWxsIHJldHVybiBpdHNlbGYgaWYgaXQncyBhbHJlYWR5IGFcbiAqICAgICAgICAgIHZpZGVvLmpzIGBNZWRpYUVycm9yYCBvYmplY3QuXG4gKlxuICogQHNlZSBbTWVkaWFFcnJvciBTcGVjXXtAbGluayBodHRwczovL2Rldi53My5vcmcvaHRtbDUvc3BlYy1hdXRob3Itdmlldy92aWRlby5odG1sI21lZGlhZXJyb3J9XG4gKiBAc2VlIFtFbmNyeXB0ZWQgTWVkaWFFcnJvciBTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1lbmNyeXB0ZWQtbWVkaWEtMjAxMzA1MTAvI2Vycm9yLWNvZGVzfVxuICpcbiAqIEBjbGFzcyBNZWRpYUVycm9yXG4gKi9cblxuZnVuY3Rpb24gTWVkaWFFcnJvcih2YWx1ZSkge1xuICAvLyBBbGxvdyByZWR1bmRhbnQgY2FsbHMgdG8gdGhpcyBjb25zdHJ1Y3RvciB0byBhdm9pZCBoYXZpbmcgYGluc3RhbmNlb2ZgXG4gIC8vIGNoZWNrcyBwZXBwZXJlZCBhcm91bmQgdGhlIGNvZGUuXG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1lZGlhRXJyb3IpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRoaXMuY29kZSA9IHZhbHVlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBkZWZhdWx0IGNvZGUgaXMgemVybywgc28gdGhpcyBpcyBhIGN1c3RvbSBlcnJvclxuICAgIHRoaXMubWVzc2FnZSA9IHZhbHVlO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIC8vIFdlIGFzc2lnbiB0aGUgYGNvZGVgIHByb3BlcnR5IG1hbnVhbGx5IGJlY2F1c2UgbmF0aXZlIGBNZWRpYUVycm9yYCBvYmplY3RzXG4gICAgLy8gZG8gbm90IGV4cG9zZSBpdCBhcyBhbiBvd24vZW51bWVyYWJsZSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0LlxuICAgIGlmICh0eXBlb2YgdmFsdWUuY29kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMuY29kZSA9IHZhbHVlLmNvZGU7XG4gICAgfVxuXG4gICAgYXNzaWduKHRoaXMsIHZhbHVlKTtcbiAgfVxuXG4gIGlmICghdGhpcy5tZXNzYWdlKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gTWVkaWFFcnJvci5kZWZhdWx0TWVzc2FnZXNbdGhpcy5jb2RlXSB8fCAnJztcbiAgfVxufVxuLyoqXG4gKiBUaGUgZXJyb3IgY29kZSB0aGF0IHJlZmVycyB0d28gb25lIG9mIHRoZSBkZWZpbmVkIGBNZWRpYUVycm9yYCB0eXBlc1xuICpcbiAqIEB0eXBlIHtOdW1iZXJ9XG4gKi9cblxuXG5NZWRpYUVycm9yLnByb3RvdHlwZS5jb2RlID0gMDtcbi8qKlxuICogQW4gb3B0aW9uYWwgbWVzc2FnZSB0aGF0IHRvIHNob3cgd2l0aCB0aGUgZXJyb3IuIE1lc3NhZ2UgaXMgbm90IHBhcnQgb2YgdGhlIEhUTUw1XG4gKiB2aWRlbyBzcGVjIGJ1dCBhbGxvd3MgZm9yIG1vcmUgaW5mb3JtYXRpdmUgY3VzdG9tIGVycm9ycy5cbiAqXG4gKiBAdHlwZSB7U3RyaW5nfVxuICovXG5cbk1lZGlhRXJyb3IucHJvdG90eXBlLm1lc3NhZ2UgPSAnJztcbi8qKlxuICogQW4gb3B0aW9uYWwgc3RhdHVzIGNvZGUgdGhhdCBjYW4gYmUgc2V0IGJ5IHBsdWdpbnMgdG8gYWxsb3cgZXZlbiBtb3JlIGRldGFpbCBhYm91dFxuICogdGhlIGVycm9yLiBGb3IgZXhhbXBsZSBhIHBsdWdpbiBtaWdodCBwcm92aWRlIGEgc3BlY2lmaWMgSFRUUCBzdGF0dXMgY29kZSBhbmQgYW5cbiAqIGVycm9yIG1lc3NhZ2UgZm9yIHRoYXQgY29kZS4gVGhlbiB3aGVuIHRoZSBwbHVnaW4gZ2V0cyB0aGF0IGVycm9yIHRoaXMgY2xhc3Mgd2lsbFxuICoga25vdyBob3cgdG8gZGlzcGxheSBhbiBlcnJvciBtZXNzYWdlIGZvciBpdC4gVGhpcyBhbGxvd3MgYSBjdXN0b20gbWVzc2FnZSB0byBzaG93XG4gKiB1cCBvbiB0aGUgYFBsYXllcmAgZXJyb3Igb3ZlcmxheS5cbiAqXG4gKiBAdHlwZSB7QXJyYXl9XG4gKi9cblxuTWVkaWFFcnJvci5wcm90b3R5cGUuc3RhdHVzID0gbnVsbDtcbi8qKlxuICogRXJyb3JzIGluZGV4ZWQgYnkgdGhlIFczQyBzdGFuZGFyZC4gVGhlIG9yZGVyICoqQ0FOTk9UIENIQU5HRSoqISBTZWUgdGhlXG4gKiBzcGVjaWZpY2F0aW9uIGxpc3RlZCB1bmRlciB7QGxpbmsgTWVkaWFFcnJvcn0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogQGVudW0ge2FycmF5fVxuICogQHJlYWRvbmx5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gMCAtIE1FRElBX0VSUl9DVVNUT01cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAxIC0gTUVESUFfRVJSX0FCT1JURURcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAyIC0gTUVESUFfRVJSX05FVFdPUktcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAzIC0gTUVESUFfRVJSX0RFQ09ERVxuICogQHByb3BlcnR5IHtzdHJpbmd9IDQgLSBNRURJQV9FUlJfU1JDX05PVF9TVVBQT1JURURcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSA1IC0gTUVESUFfRVJSX0VOQ1JZUFRFRFxuICovXG5cbk1lZGlhRXJyb3IuZXJyb3JUeXBlcyA9IFsnTUVESUFfRVJSX0NVU1RPTScsICdNRURJQV9FUlJfQUJPUlRFRCcsICdNRURJQV9FUlJfTkVUV09SSycsICdNRURJQV9FUlJfREVDT0RFJywgJ01FRElBX0VSUl9TUkNfTk9UX1NVUFBPUlRFRCcsICdNRURJQV9FUlJfRU5DUllQVEVEJ107XG4vKipcbiAqIFRoZSBkZWZhdWx0IGBNZWRpYUVycm9yYCBtZXNzYWdlcyBiYXNlZCBvbiB0aGUge0BsaW5rIE1lZGlhRXJyb3IuZXJyb3JUeXBlc30uXG4gKlxuICogQHR5cGUge0FycmF5fVxuICogQGNvbnN0YW50XG4gKi9cblxuTWVkaWFFcnJvci5kZWZhdWx0TWVzc2FnZXMgPSB7XG4gIDE6ICdZb3UgYWJvcnRlZCB0aGUgbWVkaWEgcGxheWJhY2snLFxuICAyOiAnQSBuZXR3b3JrIGVycm9yIGNhdXNlZCB0aGUgbWVkaWEgZG93bmxvYWQgdG8gZmFpbCBwYXJ0LXdheS4nLFxuICAzOiAnVGhlIG1lZGlhIHBsYXliYWNrIHdhcyBhYm9ydGVkIGR1ZSB0byBhIGNvcnJ1cHRpb24gcHJvYmxlbSBvciBiZWNhdXNlIHRoZSBtZWRpYSB1c2VkIGZlYXR1cmVzIHlvdXIgYnJvd3NlciBkaWQgbm90IHN1cHBvcnQuJyxcbiAgNDogJ1RoZSBtZWRpYSBjb3VsZCBub3QgYmUgbG9hZGVkLCBlaXRoZXIgYmVjYXVzZSB0aGUgc2VydmVyIG9yIG5ldHdvcmsgZmFpbGVkIG9yIGJlY2F1c2UgdGhlIGZvcm1hdCBpcyBub3Qgc3VwcG9ydGVkLicsXG4gIDU6ICdUaGUgbWVkaWEgaXMgZW5jcnlwdGVkIGFuZCB3ZSBkbyBub3QgaGF2ZSB0aGUga2V5cyB0byBkZWNyeXB0IGl0Lidcbn07IC8vIEFkZCB0eXBlcyBhcyBwcm9wZXJ0aWVzIG9uIE1lZGlhRXJyb3Jcbi8vIGUuZy4gTWVkaWFFcnJvci5NRURJQV9FUlJfU1JDX05PVF9TVVBQT1JURUQgPSA0O1xuXG5mb3IgKHZhciBlcnJOdW0gPSAwOyBlcnJOdW0gPCBNZWRpYUVycm9yLmVycm9yVHlwZXMubGVuZ3RoOyBlcnJOdW0rKykge1xuICBNZWRpYUVycm9yW01lZGlhRXJyb3IuZXJyb3JUeXBlc1tlcnJOdW1dXSA9IGVyck51bTsgLy8gdmFsdWVzIHNob3VsZCBiZSBhY2Nlc3NpYmxlIG9uIGJvdGggdGhlIGNsYXNzIGFuZCBpbnN0YW5jZVxuXG4gIE1lZGlhRXJyb3IucHJvdG90eXBlW01lZGlhRXJyb3IuZXJyb3JUeXBlc1tlcnJOdW1dXSA9IGVyck51bTtcbn0gLy8ganNkb2NzIGZvciBpbnN0YW5jZS9zdGF0aWMgbWVtYmVycyBhZGRlZCBhYm92ZVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBhbiBvYmplY3QgaXMgYFByb21pc2VgLWxpa2UgKGkuZS4gaGFzIGEgYHRoZW5gIG1ldGhvZCkuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSAgdmFsdWVcbiAqICAgICAgICAgQW4gb2JqZWN0IHRoYXQgbWF5IG9yIG1heSBub3QgYmUgYFByb21pc2VgLWxpa2UuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBgUHJvbWlzZWAtbGlrZS5cbiAqL1xuZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuLyoqXG4gKiBTaWxlbmNlIGEgUHJvbWlzZS1saWtlIG9iamVjdC5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgYXZvaWRpbmcgbm9uLWhhcm1mdWwsIGJ1dCBwb3RlbnRpYWxseSBjb25mdXNpbmcgXCJ1bmNhdWdodFxuICogcGxheSBwcm9taXNlXCIgcmVqZWN0aW9uIGVycm9yIG1lc3NhZ2VzLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gdmFsdWVcbiAqICAgICAgICAgQW4gb2JqZWN0IHRoYXQgbWF5IG9yIG1heSBub3QgYmUgYFByb21pc2VgLWxpa2UuXG4gKi9cblxuZnVuY3Rpb24gc2lsZW5jZVByb21pc2UodmFsdWUpIHtcbiAgaWYgKGlzUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICB2YWx1ZS50aGVuKG51bGwsIGZ1bmN0aW9uIChlKSB7fSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAZmlsZSB0ZXh0LXRyYWNrLWxpc3QtY29udmVydGVyLmpzIFV0aWxpdGllcyBmb3IgY2FwdHVyaW5nIHRleHQgdHJhY2sgc3RhdGUgYW5kXG4gKiByZS1jcmVhdGluZyB0cmFja3MgYmFzZWQgb24gYSBjYXB0dXJlLlxuICpcbiAqIEBtb2R1bGUgdGV4dC10cmFjay1saXN0LWNvbnZlcnRlclxuICovXG5cbi8qKlxuICogRXhhbWluZSBhIHNpbmdsZSB7QGxpbmsgVGV4dFRyYWNrfSBhbmQgcmV0dXJuIGEgSlNPTi1jb21wYXRpYmxlIGphdmFzY3JpcHQgb2JqZWN0IHRoYXRcbiAqIHJlcHJlc2VudHMgdGhlIHtAbGluayBUZXh0VHJhY2t9J3Mgc3RhdGUuXG4gKlxuICogQHBhcmFtIHtUZXh0VHJhY2t9IHRyYWNrXG4gKiAgICAgICAgVGhlIHRleHQgdHJhY2sgdG8gcXVlcnkuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogICAgICAgICBBIHNlcmlhbGl6YWJsZSBqYXZhc2NyaXB0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBUZXh0VHJhY2suXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgdHJhY2tUb0pzb25fID0gZnVuY3Rpb24gdHJhY2tUb0pzb25fKHRyYWNrKSB7XG4gIHZhciByZXQgPSBbJ2tpbmQnLCAnbGFiZWwnLCAnbGFuZ3VhZ2UnLCAnaWQnLCAnaW5CYW5kTWV0YWRhdGFUcmFja0Rpc3BhdGNoVHlwZScsICdtb2RlJywgJ3NyYyddLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwcm9wLCBpKSB7XG4gICAgaWYgKHRyYWNrW3Byb3BdKSB7XG4gICAgICBhY2NbcHJvcF0gPSB0cmFja1twcm9wXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7XG4gICAgY3VlczogdHJhY2suY3VlcyAmJiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwodHJhY2suY3VlcywgZnVuY3Rpb24gKGN1ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnRUaW1lOiBjdWUuc3RhcnRUaW1lLFxuICAgICAgICBlbmRUaW1lOiBjdWUuZW5kVGltZSxcbiAgICAgICAgdGV4dDogY3VlLnRleHQsXG4gICAgICAgIGlkOiBjdWUuaWRcbiAgICAgIH07XG4gICAgfSlcbiAgfSk7XG4gIHJldHVybiByZXQ7XG59O1xuLyoqXG4gKiBFeGFtaW5lIGEge0BsaW5rIFRlY2h9IGFuZCByZXR1cm4gYSBKU09OLWNvbXBhdGlibGUgamF2YXNjcmlwdCBhcnJheSB0aGF0IHJlcHJlc2VudHMgdGhlXG4gKiBzdGF0ZSBvZiBhbGwge0BsaW5rIFRleHRUcmFja31zIGN1cnJlbnRseSBjb25maWd1cmVkLiBUaGUgcmV0dXJuIGFycmF5IGlzIGNvbXBhdGlibGUgd2l0aFxuICoge0BsaW5rIHRleHQtdHJhY2stbGlzdC1jb252ZXJ0ZXI6anNvblRvVGV4dFRyYWNrc30uXG4gKlxuICogQHBhcmFtIHtUZWNofSB0ZWNoXG4gKiAgICAgICAgVGhlIHRlY2ggb2JqZWN0IHRvIHF1ZXJ5XG4gKlxuICogQHJldHVybiB7QXJyYXl9XG4gKiAgICAgICAgIEEgc2VyaWFsaXphYmxlIGphdmFzY3JpcHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHtAbGluayBUZWNofXNcbiAqICAgICAgICAge0BsaW5rIFRleHRUcmFja0xpc3R9LlxuICovXG5cblxudmFyIHRleHRUcmFja3NUb0pzb24gPSBmdW5jdGlvbiB0ZXh0VHJhY2tzVG9Kc29uKHRlY2gpIHtcbiAgdmFyIHRyYWNrRWxzID0gdGVjaC4kJCgndHJhY2snKTtcbiAgdmFyIHRyYWNrT2JqcyA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbCh0cmFja0VscywgZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC50cmFjaztcbiAgfSk7XG4gIHZhciB0cmFja3MgPSBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwodHJhY2tFbHMsIGZ1bmN0aW9uICh0cmFja0VsKSB7XG4gICAgdmFyIGpzb24gPSB0cmFja1RvSnNvbl8odHJhY2tFbC50cmFjayk7XG5cbiAgICBpZiAodHJhY2tFbC5zcmMpIHtcbiAgICAgIGpzb24uc3JjID0gdHJhY2tFbC5zcmM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH0pO1xuICByZXR1cm4gdHJhY2tzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwodGVjaC50ZXh0VHJhY2tzKCksIGZ1bmN0aW9uICh0cmFjaykge1xuICAgIHJldHVybiB0cmFja09ianMuaW5kZXhPZih0cmFjaykgPT09IC0xO1xuICB9KS5tYXAodHJhY2tUb0pzb25fKSk7XG59O1xuLyoqXG4gKiBDcmVhdGUgYSBzZXQgb2YgcmVtb3RlIHtAbGluayBUZXh0VHJhY2t9cyBvbiBhIHtAbGluayBUZWNofSBiYXNlZCBvbiBhbiBhcnJheSBvZiBqYXZhc2NyaXB0XG4gKiBvYmplY3Qge0BsaW5rIFRleHRUcmFja30gcmVwcmVzZW50YXRpb25zLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGpzb25cbiAqICAgICAgICBBbiBhcnJheSBvZiBgVGV4dFRyYWNrYCByZXByZXNlbnRhdGlvbiBvYmplY3RzLCBsaWtlIHRob3NlIHRoYXQgd291bGQgYmVcbiAqICAgICAgICBwcm9kdWNlZCBieSBgdGV4dFRyYWNrc1RvSnNvbmAuXG4gKlxuICogQHBhcmFtIHtUZWNofSB0ZWNoXG4gKiAgICAgICAgVGhlIGBUZWNoYCB0byBjcmVhdGUgdGhlIGBUZXh0VHJhY2tgcyBvbi5cbiAqL1xuXG5cbnZhciBqc29uVG9UZXh0VHJhY2tzID0gZnVuY3Rpb24ganNvblRvVGV4dFRyYWNrcyhqc29uLCB0ZWNoKSB7XG4gIGpzb24uZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcbiAgICB2YXIgYWRkZWRUcmFjayA9IHRlY2guYWRkUmVtb3RlVGV4dFRyYWNrKHRyYWNrKS50cmFjaztcblxuICAgIGlmICghdHJhY2suc3JjICYmIHRyYWNrLmN1ZXMpIHtcbiAgICAgIHRyYWNrLmN1ZXMuZm9yRWFjaChmdW5jdGlvbiAoY3VlKSB7XG4gICAgICAgIHJldHVybiBhZGRlZFRyYWNrLmFkZEN1ZShjdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRlY2gudGV4dFRyYWNrcygpO1xufTtcblxudmFyIHRleHRUcmFja0NvbnZlcnRlciA9IHtcbiAgdGV4dFRyYWNrc1RvSnNvbjogdGV4dFRyYWNrc1RvSnNvbixcbiAganNvblRvVGV4dFRyYWNrczoganNvblRvVGV4dFRyYWNrcyxcbiAgdHJhY2tUb0pzb25fOiB0cmFja1RvSnNvbl9cbn07XG5cbnZhciBNT0RBTF9DTEFTU19OQU1FID0gJ3Zqcy1tb2RhbC1kaWFsb2cnO1xuLyoqXG4gKiBUaGUgYE1vZGFsRGlhbG9nYCBkaXNwbGF5cyBvdmVyIHRoZSB2aWRlbyBhbmQgaXRzIGNvbnRyb2xzLCB3aGljaCBibG9ja3NcbiAqIGludGVyYWN0aW9uIHdpdGggdGhlIHBsYXllciB1bnRpbCBpdCBpcyBjbG9zZWQuXG4gKlxuICogTW9kYWwgZGlhbG9ncyBpbmNsdWRlIGEgXCJDbG9zZVwiIGJ1dHRvbiBhbmQgd2lsbCBjbG9zZSB3aGVuIHRoYXQgYnV0dG9uXG4gKiBpcyBhY3RpdmF0ZWQgLSBvciB3aGVuIEVTQyBpcyBwcmVzc2VkIGFueXdoZXJlLlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBNb2RhbERpYWxvZyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNb2RhbERpYWxvZywgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtNaXhlZH0gW29wdGlvbnMuY29udGVudD11bmRlZmluZWRdXG4gICAqICAgICAgICBQcm92aWRlIGN1c3RvbWl6ZWQgY29udGVudCBmb3IgdGhpcyBtb2RhbC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmRlc2NyaXB0aW9uXVxuICAgKiAgICAgICAgQSB0ZXh0IGRlc2NyaXB0aW9uIGZvciB0aGUgbW9kYWwsIHByaW1hcmlseSBmb3IgYWNjZXNzaWJpbGl0eS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5maWxsQWx3YXlzPWZhbHNlXVxuICAgKiAgICAgICAgTm9ybWFsbHksIG1vZGFscyBhcmUgYXV0b21hdGljYWxseSBmaWxsZWQgb25seSB0aGUgZmlyc3QgdGltZVxuICAgKiAgICAgICAgdGhleSBvcGVuLiBUaGlzIHRlbGxzIHRoZSBtb2RhbCB0byByZWZyZXNoIGl0cyBjb250ZW50XG4gICAqICAgICAgICBldmVyeSB0aW1lIGl0IG9wZW5zLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFiZWxdXG4gICAqICAgICAgICBBIHRleHQgbGFiZWwgZm9yIHRoZSBtb2RhbCwgcHJpbWFyaWx5IGZvciBhY2Nlc3NpYmlsaXR5LlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnBhdXNlT25PcGVuPXRydWVdXG4gICAqICAgICAgICBJZiBgdHJ1ZWAsIHBsYXliYWNrIHdpbGwgd2lsbCBiZSBwYXVzZWQgaWYgcGxheWluZyB3aGVuXG4gICAqICAgICAgICB0aGUgbW9kYWwgb3BlbnMsIGFuZCByZXN1bWVkIHdoZW4gaXQgY2xvc2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRlbXBvcmFyeT10cnVlXVxuICAgKiAgICAgICAgSWYgYHRydWVgLCB0aGUgbW9kYWwgY2FuIG9ubHkgYmUgb3BlbmVkIG9uY2U7IGl0IHdpbGwgYmVcbiAgICogICAgICAgIGRpc3Bvc2VkIGFzIHNvb24gYXMgaXQncyBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudW5jbG9zZWFibGU9ZmFsc2VdXG4gICAqICAgICAgICBJZiBgdHJ1ZWAsIHRoZSB1c2VyIHdpbGwgbm90IGJlIGFibGUgdG8gY2xvc2UgdGhlIG1vZGFsXG4gICAqICAgICAgICB0aHJvdWdoIHRoZSBVSSBpbiB0aGUgbm9ybWFsIHdheXMuIFByb2dyYW1tYXRpYyBjbG9zaW5nIGlzXG4gICAqICAgICAgICBzdGlsbCBwb3NzaWJsZS5cbiAgICovXG4gIGZ1bmN0aW9uIE1vZGFsRGlhbG9nKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5vcGVuZWRfID0gX3RoaXMuaGFzQmVlbk9wZW5lZF8gPSBfdGhpcy5oYXNCZWVuRmlsbGVkXyA9IGZhbHNlO1xuXG4gICAgX3RoaXMuY2xvc2VhYmxlKCFfdGhpcy5vcHRpb25zXy51bmNsb3NlYWJsZSk7XG5cbiAgICBfdGhpcy5jb250ZW50KF90aGlzLm9wdGlvbnNfLmNvbnRlbnQpOyAvLyBNYWtlIHN1cmUgdGhlIGNvbnRlbnRFbCBpcyBkZWZpbmVkIEFGVEVSIGFueSBjaGlsZHJlbiBhcmUgaW5pdGlhbGl6ZWRcbiAgICAvLyBiZWNhdXNlIHdlIG9ubHkgd2FudCB0aGUgY29udGVudHMgb2YgdGhlIG1vZGFsIGluIHRoZSBjb250ZW50RWxcbiAgICAvLyAobm90IHRoZSBVSSBlbGVtZW50cyBsaWtlIHRoZSBjbG9zZSBidXR0b24pLlxuXG5cbiAgICBfdGhpcy5jb250ZW50RWxfID0gY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogTU9EQUxfQ0xBU1NfTkFNRSArIFwiLWNvbnRlbnRcIlxuICAgIH0sIHtcbiAgICAgIHJvbGU6ICdkb2N1bWVudCdcbiAgICB9KTtcbiAgICBfdGhpcy5kZXNjRWxfID0gY3JlYXRlRWwoJ3AnLCB7XG4gICAgICBjbGFzc05hbWU6IE1PREFMX0NMQVNTX05BTUUgKyBcIi1kZXNjcmlwdGlvbiB2anMtY29udHJvbC10ZXh0XCIsXG4gICAgICBpZDogX3RoaXMuZWwoKS5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKVxuICAgIH0pO1xuICAgIHRleHRDb250ZW50KF90aGlzLmRlc2NFbF8sIF90aGlzLmRlc2NyaXB0aW9uKCkpO1xuXG4gICAgX3RoaXMuZWxfLmFwcGVuZENoaWxkKF90aGlzLmRlc2NFbF8pO1xuXG4gICAgX3RoaXMuZWxfLmFwcGVuZENoaWxkKF90aGlzLmNvbnRlbnRFbF8pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBNb2RhbERpYWxvZ2AncyBET00gZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBET00gZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gTW9kYWxEaWFsb2cucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRDU1NDbGFzcygpLFxuICAgICAgdGFiSW5kZXg6IC0xXG4gICAgfSwge1xuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiB0aGlzLmlkKCkgKyBcIl9kZXNjcmlwdGlvblwiLFxuICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgJ2FyaWEtbGFiZWwnOiB0aGlzLmxhYmVsKCksXG4gICAgICAncm9sZSc6ICdkaWFsb2cnXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuY29udGVudEVsXyA9IG51bGw7XG4gICAgdGhpcy5kZXNjRWxfID0gbnVsbDtcbiAgICB0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF8gPSBudWxsO1xuXG4gICAgX0NvbXBvbmVudC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBNT0RBTF9DTEFTU19OQU1FICsgXCIgdmpzLWhpZGRlbiBcIiArIF9Db21wb25lbnQucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGFiZWwgc3RyaW5nIGZvciB0aGlzIG1vZGFsLiBQcmltYXJpbHkgdXNlZCBmb3IgYWNjZXNzaWJpbGl0eS5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIHRoZSBsb2NhbGl6ZWQgb3IgcmF3IGxhYmVsIG9mIHRoaXMgbW9kYWwuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxhYmVsID0gZnVuY3Rpb24gbGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zXy5sYWJlbCB8fCAnTW9kYWwgV2luZG93Jyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRlc2NyaXB0aW9uIHN0cmluZyBmb3IgdGhpcyBtb2RhbC4gUHJpbWFyaWx5IHVzZWQgZm9yXG4gICAqIGFjY2Vzc2liaWxpdHkuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgbG9jYWxpemVkIG9yIHJhdyBkZXNjcmlwdGlvbiBvZiB0aGlzIG1vZGFsLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgIHZhciBkZXNjID0gdGhpcy5vcHRpb25zXy5kZXNjcmlwdGlvbiB8fCB0aGlzLmxvY2FsaXplKCdUaGlzIGlzIGEgbW9kYWwgd2luZG93LicpOyAvLyBBcHBlbmQgYSB1bml2ZXJzYWwgY2xvc2VhYmlsaXR5IG1lc3NhZ2UgaWYgdGhlIG1vZGFsIGlzIGNsb3NlYWJsZS5cblxuICAgIGlmICh0aGlzLmNsb3NlYWJsZSgpKSB7XG4gICAgICBkZXNjICs9ICcgJyArIHRoaXMubG9jYWxpemUoJ1RoaXMgbW9kYWwgY2FuIGJlIGNsb3NlZCBieSBwcmVzc2luZyB0aGUgRXNjYXBlIGtleSBvciBhY3RpdmF0aW5nIHRoZSBjbG9zZSBidXR0b24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc2M7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBtb2RhbC5cbiAgICpcbiAgICogQGZpcmVzIE1vZGFsRGlhbG9nI2JlZm9yZW1vZGFsb3BlblxuICAgKiBAZmlyZXMgTW9kYWxEaWFsb2cjbW9kYWxvcGVuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9wZW4gPSBmdW5jdGlvbiBvcGVuKCkge1xuICAgIGlmICghdGhpcy5vcGVuZWRfKSB7XG4gICAgICB2YXIgcGxheWVyID0gdGhpcy5wbGF5ZXIoKTtcbiAgICAgIC8qKlxuICAgICAgICAqIEZpcmVkIGp1c3QgYmVmb3JlIGEgYE1vZGFsRGlhbG9nYCBpcyBvcGVuZWQuXG4gICAgICAgICpcbiAgICAgICAgKiBAZXZlbnQgTW9kYWxEaWFsb2cjYmVmb3JlbW9kYWxvcGVuXG4gICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICAqL1xuXG4gICAgICB0aGlzLnRyaWdnZXIoJ2JlZm9yZW1vZGFsb3BlbicpO1xuICAgICAgdGhpcy5vcGVuZWRfID0gdHJ1ZTsgLy8gRmlsbCBjb250ZW50IGlmIHRoZSBtb2RhbCBoYXMgbmV2ZXIgb3BlbmVkIGJlZm9yZSBhbmRcbiAgICAgIC8vIG5ldmVyIGJlZW4gZmlsbGVkLlxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zXy5maWxsQWx3YXlzIHx8ICF0aGlzLmhhc0JlZW5PcGVuZWRfICYmICF0aGlzLmhhc0JlZW5GaWxsZWRfKSB7XG4gICAgICAgIHRoaXMuZmlsbCgpO1xuICAgICAgfSAvLyBJZiB0aGUgcGxheWVyIHdhcyBwbGF5aW5nLCBwYXVzZSBpdCBhbmQgdGFrZSBub3RlIG9mIGl0cyBwcmV2aW91c2x5XG4gICAgICAvLyBwbGF5aW5nIHN0YXRlLlxuXG5cbiAgICAgIHRoaXMud2FzUGxheWluZ18gPSAhcGxheWVyLnBhdXNlZCgpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zXy5wYXVzZU9uT3BlbiAmJiB0aGlzLndhc1BsYXlpbmdfKSB7XG4gICAgICAgIHBsYXllci5wYXVzZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9uKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duKTsgLy8gSGlkZSBjb250cm9scyBhbmQgbm90ZSBpZiB0aGV5IHdlcmUgZW5hYmxlZC5cblxuICAgICAgdGhpcy5oYWRDb250cm9sc18gPSBwbGF5ZXIuY29udHJvbHMoKTtcbiAgICAgIHBsYXllci5jb250cm9scyhmYWxzZSk7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICAgIHRoaXMuY29uZGl0aW9uYWxGb2N1c18oKTtcbiAgICAgIHRoaXMuZWwoKS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICAvKipcbiAgICAgICAgKiBGaXJlZCBqdXN0IGFmdGVyIGEgYE1vZGFsRGlhbG9nYCBpcyBvcGVuZWQuXG4gICAgICAgICpcbiAgICAgICAgKiBAZXZlbnQgTW9kYWxEaWFsb2cjbW9kYWxvcGVuXG4gICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICAqL1xuXG4gICAgICB0aGlzLnRyaWdnZXIoJ21vZGFsb3BlbicpO1xuICAgICAgdGhpcy5oYXNCZWVuT3BlbmVkXyA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJZiB0aGUgYE1vZGFsRGlhbG9nYCBpcyBjdXJyZW50bHkgb3BlbiBvciBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IFt2YWx1ZV1cbiAgICogICAgICAgICBJZiBnaXZlbiwgaXQgd2lsbCBvcGVuIChgdHJ1ZWApIG9yIGNsb3NlIChgZmFsc2VgKSB0aGUgbW9kYWwuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgdGhlIGN1cnJlbnQgb3BlbiBzdGF0ZSBvZiB0aGUgbW9kYWxkaWFsb2dcbiAgICovXG4gIDtcblxuICBfcHJvdG8ub3BlbmVkID0gZnVuY3Rpb24gb3BlbmVkKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aGlzW3ZhbHVlID8gJ29wZW4nIDogJ2Nsb3NlJ10oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vcGVuZWRfO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG1vZGFsLCBkb2VzIG5vdGhpbmcgaWYgdGhlIGBNb2RhbERpYWxvZ2AgaXNcbiAgICogbm90IG9wZW4uXG4gICAqXG4gICAqIEBmaXJlcyBNb2RhbERpYWxvZyNiZWZvcmVtb2RhbGNsb3NlXG4gICAqIEBmaXJlcyBNb2RhbERpYWxvZyNtb2RhbGNsb3NlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgaWYgKCF0aGlzLm9wZW5lZF8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGxheWVyID0gdGhpcy5wbGF5ZXIoKTtcbiAgICAvKipcbiAgICAgICogRmlyZWQganVzdCBiZWZvcmUgYSBgTW9kYWxEaWFsb2dgIGlzIGNsb3NlZC5cbiAgICAgICpcbiAgICAgICogQGV2ZW50IE1vZGFsRGlhbG9nI2JlZm9yZW1vZGFsY2xvc2VcbiAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignYmVmb3JlbW9kYWxjbG9zZScpO1xuICAgIHRoaXMub3BlbmVkXyA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMud2FzUGxheWluZ18gJiYgdGhpcy5vcHRpb25zXy5wYXVzZU9uT3Blbikge1xuICAgICAgcGxheWVyLnBsYXkoKTtcbiAgICB9XG5cbiAgICB0aGlzLm9mZigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XG5cbiAgICBpZiAodGhpcy5oYWRDb250cm9sc18pIHtcbiAgICAgIHBsYXllci5jb250cm9scyh0cnVlKTtcbiAgICB9XG5cbiAgICB0aGlzLmhpZGUoKTtcbiAgICB0aGlzLmVsKCkuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgLyoqXG4gICAgICAqIEZpcmVkIGp1c3QgYWZ0ZXIgYSBgTW9kYWxEaWFsb2dgIGlzIGNsb3NlZC5cbiAgICAgICpcbiAgICAgICogQGV2ZW50IE1vZGFsRGlhbG9nI21vZGFsY2xvc2VcbiAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignbW9kYWxjbG9zZScpO1xuICAgIHRoaXMuY29uZGl0aW9uYWxCbHVyXygpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9uc18udGVtcG9yYXJ5KSB7XG4gICAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIHRvIHNlZSBpZiB0aGUgYE1vZGFsRGlhbG9nYCBpcyBjbG9zZWFibGUgdmlhIHRoZSBVSS5cbiAgICpcbiAgICogQHBhcmFtICB7Ym9vbGVhbn0gW3ZhbHVlXVxuICAgKiAgICAgICAgIElmIGdpdmVuIGFzIGEgYm9vbGVhbiwgaXQgd2lsbCBzZXQgdGhlIGBjbG9zZWFibGVgIG9wdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICBSZXR1cm5zIHRoZSBmaW5hbCB2YWx1ZSBvZiB0aGUgY2xvc2FibGUgb3B0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jbG9zZWFibGUgPSBmdW5jdGlvbiBjbG9zZWFibGUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHZhciBjbG9zZWFibGUgPSB0aGlzLmNsb3NlYWJsZV8gPSAhIXZhbHVlO1xuICAgICAgdmFyIGNsb3NlID0gdGhpcy5nZXRDaGlsZCgnY2xvc2VCdXR0b24nKTsgLy8gSWYgdGhpcyBpcyBiZWluZyBtYWRlIGNsb3NlYWJsZSBhbmQgaGFzIG5vIGNsb3NlIGJ1dHRvbiwgYWRkIG9uZS5cblxuICAgICAgaWYgKGNsb3NlYWJsZSAmJiAhY2xvc2UpIHtcbiAgICAgICAgLy8gVGhlIGNsb3NlIGJ1dHRvbiBzaG91bGQgYmUgYSBjaGlsZCBvZiB0aGUgbW9kYWwgLSBub3QgaXRzXG4gICAgICAgIC8vIGNvbnRlbnQgZWxlbWVudCwgc28gdGVtcG9yYXJpbHkgY2hhbmdlIHRoZSBjb250ZW50IGVsZW1lbnQuXG4gICAgICAgIHZhciB0ZW1wID0gdGhpcy5jb250ZW50RWxfO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbF8gPSB0aGlzLmVsXztcbiAgICAgICAgY2xvc2UgPSB0aGlzLmFkZENoaWxkKCdjbG9zZUJ1dHRvbicsIHtcbiAgICAgICAgICBjb250cm9sVGV4dDogJ0Nsb3NlIE1vZGFsIERpYWxvZydcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29udGVudEVsXyA9IHRlbXA7XG4gICAgICAgIHRoaXMub24oY2xvc2UsICdjbG9zZScsIHRoaXMuY2xvc2UpO1xuICAgICAgfSAvLyBJZiB0aGlzIGlzIGJlaW5nIG1hZGUgdW5jbG9zZWFibGUgYW5kIGhhcyBhIGNsb3NlIGJ1dHRvbiwgcmVtb3ZlIGl0LlxuXG5cbiAgICAgIGlmICghY2xvc2VhYmxlICYmIGNsb3NlKSB7XG4gICAgICAgIHRoaXMub2ZmKGNsb3NlLCAnY2xvc2UnLCB0aGlzLmNsb3NlKTtcbiAgICAgICAgdGhpcy5yZW1vdmVDaGlsZChjbG9zZSk7XG4gICAgICAgIGNsb3NlLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jbG9zZWFibGVfO1xuICB9XG4gIC8qKlxuICAgKiBGaWxsIHRoZSBtb2RhbCdzIGNvbnRlbnQgZWxlbWVudCB3aXRoIHRoZSBtb2RhbCdzIFwiY29udGVudFwiIG9wdGlvbi5cbiAgICogVGhlIGNvbnRlbnQgZWxlbWVudCB3aWxsIGJlIGVtcHRpZWQgYmVmb3JlIHRoaXMgY2hhbmdlIHRha2VzIHBsYWNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5maWxsID0gZnVuY3Rpb24gZmlsbCgpIHtcbiAgICB0aGlzLmZpbGxXaXRoKHRoaXMuY29udGVudCgpKTtcbiAgfVxuICAvKipcbiAgICogRmlsbCB0aGUgbW9kYWwncyBjb250ZW50IGVsZW1lbnQgd2l0aCBhcmJpdHJhcnkgY29udGVudC5cbiAgICogVGhlIGNvbnRlbnQgZWxlbWVudCB3aWxsIGJlIGVtcHRpZWQgYmVmb3JlIHRoaXMgY2hhbmdlIHRha2VzIHBsYWNlLlxuICAgKlxuICAgKiBAZmlyZXMgTW9kYWxEaWFsb2cjYmVmb3JlbW9kYWxmaWxsXG4gICAqIEBmaXJlcyBNb2RhbERpYWxvZyNtb2RhbGZpbGxcbiAgICpcbiAgICogQHBhcmFtIHtNaXhlZH0gW2NvbnRlbnRdXG4gICAqICAgICAgICBUaGUgc2FtZSBydWxlcyBhcHBseSB0byB0aGlzIGFzIGFwcGx5IHRvIHRoZSBgY29udGVudGAgb3B0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5maWxsV2l0aCA9IGZ1bmN0aW9uIGZpbGxXaXRoKGNvbnRlbnQpIHtcbiAgICB2YXIgY29udGVudEVsID0gdGhpcy5jb250ZW50RWwoKTtcbiAgICB2YXIgcGFyZW50RWwgPSBjb250ZW50RWwucGFyZW50Tm9kZTtcbiAgICB2YXIgbmV4dFNpYmxpbmdFbCA9IGNvbnRlbnRFbC5uZXh0U2libGluZztcbiAgICAvKipcbiAgICAgICogRmlyZWQganVzdCBiZWZvcmUgYSBgTW9kYWxEaWFsb2dgIGlzIGZpbGxlZCB3aXRoIGNvbnRlbnQuXG4gICAgICAqXG4gICAgICAqIEBldmVudCBNb2RhbERpYWxvZyNiZWZvcmVtb2RhbGZpbGxcbiAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignYmVmb3JlbW9kYWxmaWxsJyk7XG4gICAgdGhpcy5oYXNCZWVuRmlsbGVkXyA9IHRydWU7IC8vIERldGFjaCB0aGUgY29udGVudCBlbGVtZW50IGZyb20gdGhlIERPTSBiZWZvcmUgcGVyZm9ybWluZ1xuICAgIC8vIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBtb2RpZnlpbmcgdGhlIGxpdmUgRE9NIG11bHRpcGxlIHRpbWVzLlxuXG4gICAgcGFyZW50RWwucmVtb3ZlQ2hpbGQoY29udGVudEVsKTtcbiAgICB0aGlzLmVtcHR5KCk7XG4gICAgaW5zZXJ0Q29udGVudChjb250ZW50RWwsIGNvbnRlbnQpO1xuICAgIC8qKlxuICAgICAqIEZpcmVkIGp1c3QgYWZ0ZXIgYSBgTW9kYWxEaWFsb2dgIGlzIGZpbGxlZCB3aXRoIGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgTW9kYWxEaWFsb2cjbW9kYWxmaWxsXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdtb2RhbGZpbGwnKTsgLy8gUmUtaW5qZWN0IHRoZSByZS1maWxsZWQgY29udGVudCBlbGVtZW50LlxuXG4gICAgaWYgKG5leHRTaWJsaW5nRWwpIHtcbiAgICAgIHBhcmVudEVsLmluc2VydEJlZm9yZShjb250ZW50RWwsIG5leHRTaWJsaW5nRWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChjb250ZW50RWwpO1xuICAgIH0gLy8gbWFrZSBzdXJlIHRoYXQgdGhlIGNsb3NlIGJ1dHRvbiBpcyBsYXN0IGluIHRoZSBkaWFsb2cgRE9NXG5cblxuICAgIHZhciBjbG9zZUJ1dHRvbiA9IHRoaXMuZ2V0Q2hpbGQoJ2Nsb3NlQnV0dG9uJyk7XG5cbiAgICBpZiAoY2xvc2VCdXR0b24pIHtcbiAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uLmVsXyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFbXB0aWVzIHRoZSBjb250ZW50IGVsZW1lbnQuIFRoaXMgaGFwcGVucyBhbnl0aW1lIHRoZSBtb2RhbCBpcyBmaWxsZWQuXG4gICAqXG4gICAqIEBmaXJlcyBNb2RhbERpYWxvZyNiZWZvcmVtb2RhbGVtcHR5XG4gICAqIEBmaXJlcyBNb2RhbERpYWxvZyNtb2RhbGVtcHR5XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVtcHR5ID0gZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgLyoqXG4gICAgKiBGaXJlZCBqdXN0IGJlZm9yZSBhIGBNb2RhbERpYWxvZ2AgaXMgZW1wdGllZC5cbiAgICAqXG4gICAgKiBAZXZlbnQgTW9kYWxEaWFsb2cjYmVmb3JlbW9kYWxlbXB0eVxuICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICovXG4gICAgdGhpcy50cmlnZ2VyKCdiZWZvcmVtb2RhbGVtcHR5Jyk7XG4gICAgZW1wdHlFbCh0aGlzLmNvbnRlbnRFbCgpKTtcbiAgICAvKipcbiAgICAqIEZpcmVkIGp1c3QgYWZ0ZXIgYSBgTW9kYWxEaWFsb2dgIGlzIGVtcHRpZWQuXG4gICAgKlxuICAgICogQGV2ZW50IE1vZGFsRGlhbG9nI21vZGFsZW1wdHlcbiAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdtb2RhbGVtcHR5Jyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgbW9kYWwgY29udGVudCwgd2hpY2ggZ2V0cyBub3JtYWxpemVkIGJlZm9yZSBiZWluZ1xuICAgKiByZW5kZXJlZCBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIFRoaXMgZG9lcyBub3QgdXBkYXRlIHRoZSBET00gb3IgZmlsbCB0aGUgbW9kYWwsIGJ1dCBpdCBpcyBjYWxsZWQgZHVyaW5nXG4gICAqIHRoYXQgcHJvY2Vzcy5cbiAgICpcbiAgICogQHBhcmFtICB7TWl4ZWR9IFt2YWx1ZV1cbiAgICogICAgICAgICBJZiBkZWZpbmVkLCBzZXRzIHRoZSBpbnRlcm5hbCBjb250ZW50IHZhbHVlIHRvIGJlIHVzZWQgb24gdGhlXG4gICAqICAgICAgICAgbmV4dCBjYWxsKHMpIHRvIGBmaWxsYC4gVGhpcyB2YWx1ZSBpcyBub3JtYWxpemVkIGJlZm9yZSBiZWluZ1xuICAgKiAgICAgICAgIGluc2VydGVkLiBUbyBcImNsZWFyXCIgdGhlIGludGVybmFsIGNvbnRlbnQgdmFsdWUsIHBhc3MgYG51bGxgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtNaXhlZH1cbiAgICogICAgICAgICBUaGUgY3VycmVudCBjb250ZW50IG9mIHRoZSBtb2RhbCBkaWFsb2dcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29udGVudCA9IGZ1bmN0aW9uIGNvbnRlbnQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5jb250ZW50XyA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbnRlbnRfO1xuICB9XG4gIC8qKlxuICAgKiBjb25kaXRpb25hbGx5IGZvY3VzIHRoZSBtb2RhbCBkaWFsb2cgaWYgZm9jdXMgd2FzIHByZXZpb3VzbHkgb24gdGhlIHBsYXllci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29uZGl0aW9uYWxGb2N1c18gPSBmdW5jdGlvbiBjb25kaXRpb25hbEZvY3VzXygpIHtcbiAgICB2YXIgYWN0aXZlRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIHZhciBwbGF5ZXJFbCA9IHRoaXMucGxheWVyXy5lbF87XG4gICAgdGhpcy5wcmV2aW91c2x5QWN0aXZlRWxfID0gbnVsbDtcblxuICAgIGlmIChwbGF5ZXJFbC5jb250YWlucyhhY3RpdmVFbCkgfHwgcGxheWVyRWwgPT09IGFjdGl2ZUVsKSB7XG4gICAgICB0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF8gPSBhY3RpdmVFbDtcbiAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIGNvbmRpdGlvbmFsbHkgYmx1ciB0aGUgZWxlbWVudCBhbmQgcmVmb2N1cyB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29uZGl0aW9uYWxCbHVyXyA9IGZ1bmN0aW9uIGNvbmRpdGlvbmFsQmx1cl8oKSB7XG4gICAgaWYgKHRoaXMucHJldmlvdXNseUFjdGl2ZUVsXykge1xuICAgICAgdGhpcy5wcmV2aW91c2x5QWN0aXZlRWxfLmZvY3VzKCk7XG4gICAgICB0aGlzLnByZXZpb3VzbHlBY3RpdmVFbF8gPSBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogS2V5ZG93biBoYW5kbGVyLiBBdHRhY2hlZCB3aGVuIG1vZGFsIGlzIGZvY3VzZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICAvLyBEbyBub3QgYWxsb3cga2V5ZG93bnMgdG8gcmVhY2ggb3V0IG9mIHRoZSBtb2RhbCBkaWFsb2cuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnRXNjYXBlJykgJiYgdGhpcy5jbG9zZWFibGUoKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGV4aXQgZWFybHkgaWYgaXQgaXNuJ3QgYSB0YWIga2V5XG5cblxuICAgIGlmICgha2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnVGFiJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZm9jdXNhYmxlRWxzID0gdGhpcy5mb2N1c2FibGVFbHNfKCk7XG4gICAgdmFyIGFjdGl2ZUVsID0gdGhpcy5lbF8ucXVlcnlTZWxlY3RvcignOmZvY3VzJyk7XG4gICAgdmFyIGZvY3VzSW5kZXg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvY3VzYWJsZUVscy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFjdGl2ZUVsID09PSBmb2N1c2FibGVFbHNbaV0pIHtcbiAgICAgICAgZm9jdXNJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzLmVsXykge1xuICAgICAgZm9jdXNJbmRleCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnNoaWZ0S2V5ICYmIGZvY3VzSW5kZXggPT09IDApIHtcbiAgICAgIGZvY3VzYWJsZUVsc1tmb2N1c2FibGVFbHMubGVuZ3RoIC0gMV0uZm9jdXMoKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIGlmICghZXZlbnQuc2hpZnRLZXkgJiYgZm9jdXNJbmRleCA9PT0gZm9jdXNhYmxlRWxzLmxlbmd0aCAtIDEpIHtcbiAgICAgIGZvY3VzYWJsZUVsc1swXS5mb2N1cygpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIGdldCBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZvY3VzYWJsZUVsc18gPSBmdW5jdGlvbiBmb2N1c2FibGVFbHNfKCkge1xuICAgIHZhciBhbGxDaGlsZHJlbiA9IHRoaXMuZWxfLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKTtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGFsbENoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiAoY2hpbGQgaW5zdGFuY2VvZiB3aW5kb3ckMS5IVE1MQW5jaG9yRWxlbWVudCB8fCBjaGlsZCBpbnN0YW5jZW9mIHdpbmRvdyQxLkhUTUxBcmVhRWxlbWVudCkgJiYgY2hpbGQuaGFzQXR0cmlidXRlKCdocmVmJykgfHwgKGNoaWxkIGluc3RhbmNlb2Ygd2luZG93JDEuSFRNTElucHV0RWxlbWVudCB8fCBjaGlsZCBpbnN0YW5jZW9mIHdpbmRvdyQxLkhUTUxTZWxlY3RFbGVtZW50IHx8IGNoaWxkIGluc3RhbmNlb2Ygd2luZG93JDEuSFRNTFRleHRBcmVhRWxlbWVudCB8fCBjaGlsZCBpbnN0YW5jZW9mIHdpbmRvdyQxLkhUTUxCdXR0b25FbGVtZW50KSAmJiAhY2hpbGQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IGNoaWxkIGluc3RhbmNlb2Ygd2luZG93JDEuSFRNTElGcmFtZUVsZW1lbnQgfHwgY2hpbGQgaW5zdGFuY2VvZiB3aW5kb3ckMS5IVE1MT2JqZWN0RWxlbWVudCB8fCBjaGlsZCBpbnN0YW5jZW9mIHdpbmRvdyQxLkhUTUxFbWJlZEVsZW1lbnQgfHwgY2hpbGQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpICYmIGNoaWxkLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSAhPT0gLTEgfHwgY2hpbGQuaGFzQXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxEaWFsb2c7XG59KENvbXBvbmVudCk7XG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgYE1vZGFsRGlhbG9nYCBkZWZhdWx0IG9wdGlvbnMuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5Nb2RhbERpYWxvZy5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIHBhdXNlT25PcGVuOiB0cnVlLFxuICB0ZW1wb3Jhcnk6IHRydWVcbn07XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ01vZGFsRGlhbG9nJywgTW9kYWxEaWFsb2cpO1xuXG4vKipcbiAqIENvbW1vbiBmdW5jdGlvbmFsaXkgYmV0d2VlbiB7QGxpbmsgVGV4dFRyYWNrTGlzdH0sIHtAbGluayBBdWRpb1RyYWNrTGlzdH0sIGFuZFxuICoge0BsaW5rIFZpZGVvVHJhY2tMaXN0fVxuICpcbiAqIEBleHRlbmRzIEV2ZW50VGFyZ2V0XG4gKi9cblxudmFyIFRyYWNrTGlzdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0V2ZW50VGFyZ2V0KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYWNrTGlzdCwgX0V2ZW50VGFyZ2V0KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3NcbiAgICpcbiAgICogQHBhcmFtIHtUcmFja1tdfSB0cmFja3NcbiAgICogICAgICAgIEEgbGlzdCBvZiB0cmFja3MgdG8gaW5pdGlhbGl6ZSB0aGUgbGlzdCB3aXRoLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGZ1bmN0aW9uIFRyYWNrTGlzdCh0cmFja3MpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAodHJhY2tzID09PSB2b2lkIDApIHtcbiAgICAgIHRyYWNrcyA9IFtdO1xuICAgIH1cblxuICAgIF90aGlzID0gX0V2ZW50VGFyZ2V0LmNhbGwodGhpcykgfHwgdGhpcztcbiAgICBfdGhpcy50cmFja3NfID0gW107XG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFRyYWNrTGlzdFxuICAgICAqIEBtZW1iZXIge251bWJlcn0gbGVuZ3RoXG4gICAgICogICAgICAgICBUaGUgY3VycmVudCBudW1iZXIgb2YgYFRyYWNrYHMgaW4gdGhlIHRoaXMgVHJhY2tpc3QuXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhY2tzXy5sZW5ndGg7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgX3RoaXMuYWRkVHJhY2sodHJhY2tzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHtAbGluayBUcmFja30gdG8gdGhlIGBUcmFja0xpc3RgXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhY2t9IHRyYWNrXG4gICAqICAgICAgICBUaGUgYXVkaW8sIHZpZGVvLCBvciB0ZXh0IHRyYWNrIHRvIGFkZCB0byB0aGUgbGlzdC5cbiAgICpcbiAgICogQGZpcmVzIFRyYWNrTGlzdCNhZGR0cmFja1xuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBUcmFja0xpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGRUcmFjayA9IGZ1bmN0aW9uIGFkZFRyYWNrKHRyYWNrKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy50cmFja3NfLmxlbmd0aDtcblxuICAgIGlmICghKCcnICsgaW5kZXggaW4gdGhpcykpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50cmFja3NfW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSAvLyBEbyBub3QgYWRkIGR1cGxpY2F0ZSB0cmFja3NcblxuXG4gICAgaWYgKHRoaXMudHJhY2tzXy5pbmRleE9mKHRyYWNrKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMudHJhY2tzXy5wdXNoKHRyYWNrKTtcbiAgICAgIC8qKlxuICAgICAgICogVHJpZ2dlcmVkIHdoZW4gYSB0cmFjayBpcyBhZGRlZCB0byBhIHRyYWNrIGxpc3QuXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50IFRyYWNrTGlzdCNhZGR0cmFja1xuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICogQHByb3BlcnR5IHtUcmFja30gdHJhY2tcbiAgICAgICAqICAgICAgICAgICBBIHJlZmVyZW5jZSB0byB0cmFjayB0aGF0IHdhcyBhZGRlZC5cbiAgICAgICAqL1xuXG4gICAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgICB0cmFjazogdHJhY2ssXG4gICAgICAgIHR5cGU6ICdhZGR0cmFjaycsXG4gICAgICAgIHRhcmdldDogdGhpc1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSB7QGxpbmsgVHJhY2t9IGZyb20gdGhlIGBUcmFja0xpc3RgXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhY2t9IHJ0cmFja1xuICAgKiAgICAgICAgVGhlIGF1ZGlvLCB2aWRlbywgb3IgdGV4dCB0cmFjayB0byByZW1vdmUgZnJvbSB0aGUgbGlzdC5cbiAgICpcbiAgICogQGZpcmVzIFRyYWNrTGlzdCNyZW1vdmV0cmFja1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVUcmFjayA9IGZ1bmN0aW9uIHJlbW92ZVRyYWNrKHJ0cmFjaykge1xuICAgIHZhciB0cmFjaztcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh0aGlzW2ldID09PSBydHJhY2spIHtcbiAgICAgICAgdHJhY2sgPSB0aGlzW2ldO1xuXG4gICAgICAgIGlmICh0cmFjay5vZmYpIHtcbiAgICAgICAgICB0cmFjay5vZmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJhY2tzXy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdHJhY2spIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gYSB0cmFjayBpcyByZW1vdmVkIGZyb20gdHJhY2sgbGlzdC5cbiAgICAgKlxuICAgICAqIEBldmVudCBUcmFja0xpc3QjcmVtb3ZldHJhY2tcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICogQHByb3BlcnR5IHtUcmFja30gdHJhY2tcbiAgICAgKiAgICAgICAgICAgQSByZWZlcmVuY2UgdG8gdHJhY2sgdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKi9cblxuXG4gICAgdGhpcy50cmlnZ2VyKHtcbiAgICAgIHRyYWNrOiB0cmFjayxcbiAgICAgIHR5cGU6ICdyZW1vdmV0cmFjaycsXG4gICAgICB0YXJnZXQ6IHRoaXNcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgVHJhY2sgZnJvbSB0aGUgVHJhY2tMaXN0IGJ5IGEgdHJhY2tzIGlkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIHRoZSBpZCBvZiB0aGUgdHJhY2sgdG8gZ2V0XG4gICAqIEBtZXRob2QgZ2V0VHJhY2tCeUlkXG4gICAqIEByZXR1cm4ge1RyYWNrfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRUcmFja0J5SWQgPSBmdW5jdGlvbiBnZXRUcmFja0J5SWQoaWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciB0cmFjayA9IHRoaXNbaV07XG5cbiAgICAgIGlmICh0cmFjay5pZCA9PT0gaWQpIHtcbiAgICAgICAgcmVzdWx0ID0gdHJhY2s7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgcmV0dXJuIFRyYWNrTGlzdDtcbn0oRXZlbnRUYXJnZXQpO1xuLyoqXG4gKiBUcmlnZ2VyZWQgd2hlbiBhIGRpZmZlcmVudCB0cmFjayBpcyBzZWxlY3RlZC9lbmFibGVkLlxuICpcbiAqIEBldmVudCBUcmFja0xpc3QjY2hhbmdlXG4gKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gKi9cblxuLyoqXG4gKiBFdmVudHMgdGhhdCBjYW4gYmUgY2FsbGVkIHdpdGggb24gKyBldmVudE5hbWUuIFNlZSB7QGxpbmsgRXZlbnRIYW5kbGVyfS5cbiAqXG4gKiBAcHJvcGVydHkge09iamVjdH0gVHJhY2tMaXN0I2FsbG93ZWRFdmVudHNfXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuVHJhY2tMaXN0LnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXyA9IHtcbiAgY2hhbmdlOiAnY2hhbmdlJyxcbiAgYWRkdHJhY2s6ICdhZGR0cmFjaycsXG4gIHJlbW92ZXRyYWNrOiAncmVtb3ZldHJhY2snXG59OyAvLyBlbXVsYXRlIGF0dHJpYnV0ZSBFdmVudEhhbmRsZXIgc3VwcG9ydCB0byBhbGxvdyBmb3IgZmVhdHVyZSBkZXRlY3Rpb25cblxuZm9yICh2YXIgZXZlbnQgaW4gVHJhY2tMaXN0LnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXykge1xuICBUcmFja0xpc3QucHJvdG90eXBlWydvbicgKyBldmVudF0gPSBudWxsO1xufVxuXG4vKipcbiAqIEFueXdoZXJlIHdlIGNhbGwgdGhpcyBmdW5jdGlvbiB3ZSBkaXZlcmdlIGZyb20gdGhlIHNwZWNcbiAqIGFzIHdlIG9ubHkgc3VwcG9ydCBvbmUgZW5hYmxlZCBhdWRpb3RyYWNrIGF0IGEgdGltZVxuICpcbiAqIEBwYXJhbSB7QXVkaW9UcmFja0xpc3R9IGxpc3RcbiAqICAgICAgICBsaXN0IHRvIHdvcmsgb25cbiAqXG4gKiBAcGFyYW0ge0F1ZGlvVHJhY2t9IHRyYWNrXG4gKiAgICAgICAgVGhlIHRyYWNrIHRvIHNraXBcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkaXNhYmxlT3RoZXJzID0gZnVuY3Rpb24gZGlzYWJsZU90aGVycyhsaXN0LCB0cmFjaykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIU9iamVjdC5rZXlzKGxpc3RbaV0pLmxlbmd0aCB8fCB0cmFjay5pZCA9PT0gbGlzdFtpXS5pZCkge1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBhbm90aGVyIGF1ZGlvIHRyYWNrIGlzIGVuYWJsZWQsIGRpc2FibGUgaXRcblxuXG4gICAgbGlzdFtpXS5lbmFibGVkID0gZmFsc2U7XG4gIH1cbn07XG4vKipcbiAqIFRoZSBjdXJyZW50IGxpc3Qgb2Yge0BsaW5rIEF1ZGlvVHJhY2t9IGZvciBhIG1lZGlhIGZpbGUuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2F1ZGlvdHJhY2tsaXN0fVxuICogQGV4dGVuZHMgVHJhY2tMaXN0XG4gKi9cblxuXG52YXIgQXVkaW9UcmFja0xpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UcmFja0xpc3QpIHtcbiAgX2luaGVyaXRzTG9vc2UoQXVkaW9UcmFja0xpc3QsIF9UcmFja0xpc3QpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtBdWRpb1RyYWNrW119IFt0cmFja3M9W11dXG4gICAqICAgICAgICBBIGxpc3Qgb2YgYEF1ZGlvVHJhY2tgIHRvIGluc3RhbnRpYXRlIHRoZSBsaXN0IHdpdGguXG4gICAqL1xuICBmdW5jdGlvbiBBdWRpb1RyYWNrTGlzdCh0cmFja3MpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAodHJhY2tzID09PSB2b2lkIDApIHtcbiAgICAgIHRyYWNrcyA9IFtdO1xuICAgIH1cblxuICAgIC8vIG1ha2Ugc3VyZSBvbmx5IDEgdHJhY2sgaXMgZW5hYmxlZFxuICAgIC8vIHNvcnRlZCBmcm9tIGxhc3QgaW5kZXggdG8gZmlyc3QgaW5kZXhcbiAgICBmb3IgKHZhciBpID0gdHJhY2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBpZiAodHJhY2tzW2ldLmVuYWJsZWQpIHtcbiAgICAgICAgZGlzYWJsZU90aGVycyh0cmFja3MsIHRyYWNrc1tpXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzID0gX1RyYWNrTGlzdC5jYWxsKHRoaXMsIHRyYWNrcykgfHwgdGhpcztcbiAgICBfdGhpcy5jaGFuZ2luZ18gPSBmYWxzZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhbiB7QGxpbmsgQXVkaW9UcmFja30gdG8gdGhlIGBBdWRpb1RyYWNrTGlzdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7QXVkaW9UcmFja30gdHJhY2tcbiAgICogICAgICAgIFRoZSBBdWRpb1RyYWNrIHRvIGFkZCB0byB0aGUgbGlzdFxuICAgKlxuICAgKiBAZmlyZXMgVHJhY2tMaXN0I2FkZHRyYWNrXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEF1ZGlvVHJhY2tMaXN0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkVHJhY2sgPSBmdW5jdGlvbiBhZGRUcmFjayh0cmFjaykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKHRyYWNrLmVuYWJsZWQpIHtcbiAgICAgIGRpc2FibGVPdGhlcnModGhpcywgdHJhY2spO1xuICAgIH1cblxuICAgIF9UcmFja0xpc3QucHJvdG90eXBlLmFkZFRyYWNrLmNhbGwodGhpcywgdHJhY2spOyAvLyBuYXRpdmUgdHJhY2tzIGRvbid0IGhhdmUgdGhpc1xuXG5cbiAgICBpZiAoIXRyYWNrLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cmFjay5lbmFibGVkQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHdoZW4gd2UgYXJlIGRpc2FibGluZyBvdGhlciB0cmFja3MgKHNpbmNlIHdlIGRvbid0IHN1cHBvcnRcbiAgICAgIC8vIG1vcmUgdGhhbiBvbmUgdHJhY2sgYXQgYSB0aW1lKSB3ZSB3aWxsIHNldCBjaGFuZ2luZ19cbiAgICAgIC8vIHRvIHRydWUgc28gdGhhdCB3ZSBkb24ndCB0cmlnZ2VyIGFkZGl0aW9uYWwgY2hhbmdlIGV2ZW50c1xuICAgICAgaWYgKF90aGlzMi5jaGFuZ2luZ18pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpczIuY2hhbmdpbmdfID0gdHJ1ZTtcbiAgICAgIGRpc2FibGVPdGhlcnMoX3RoaXMyLCB0cmFjayk7XG4gICAgICBfdGhpczIuY2hhbmdpbmdfID0gZmFsc2U7XG5cbiAgICAgIF90aGlzMi50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBsaXN0ZW5zIEF1ZGlvVHJhY2sjZW5hYmxlZGNoYW5nZVxuICAgICAqIEBmaXJlcyBUcmFja0xpc3QjY2hhbmdlXG4gICAgICovXG5cblxuICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2VuYWJsZWRjaGFuZ2UnLCB0cmFjay5lbmFibGVkQ2hhbmdlXyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZVRyYWNrID0gZnVuY3Rpb24gcmVtb3ZlVHJhY2socnRyYWNrKSB7XG4gICAgX1RyYWNrTGlzdC5wcm90b3R5cGUucmVtb3ZlVHJhY2suY2FsbCh0aGlzLCBydHJhY2spO1xuXG4gICAgaWYgKHJ0cmFjay5yZW1vdmVFdmVudExpc3RlbmVyICYmIHJ0cmFjay5lbmFibGVkQ2hhbmdlXykge1xuICAgICAgcnRyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuYWJsZWRjaGFuZ2UnLCBydHJhY2suZW5hYmxlZENoYW5nZV8pO1xuICAgICAgcnRyYWNrLmVuYWJsZWRDaGFuZ2VfID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEF1ZGlvVHJhY2tMaXN0O1xufShUcmFja0xpc3QpO1xuXG4vKipcbiAqIFVuLXNlbGVjdCBhbGwgb3RoZXIge0BsaW5rIFZpZGVvVHJhY2t9cyB0aGF0IGFyZSBzZWxlY3RlZC5cbiAqXG4gKiBAcGFyYW0ge1ZpZGVvVHJhY2tMaXN0fSBsaXN0XG4gKiAgICAgICAgbGlzdCB0byB3b3JrIG9uXG4gKlxuICogQHBhcmFtIHtWaWRlb1RyYWNrfSB0cmFja1xuICogICAgICAgIFRoZSB0cmFjayB0byBza2lwXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZGlzYWJsZU90aGVycyQxID0gZnVuY3Rpb24gZGlzYWJsZU90aGVycyhsaXN0LCB0cmFjaykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIU9iamVjdC5rZXlzKGxpc3RbaV0pLmxlbmd0aCB8fCB0cmFjay5pZCA9PT0gbGlzdFtpXS5pZCkge1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBhbm90aGVyIHZpZGVvIHRyYWNrIGlzIGVuYWJsZWQsIGRpc2FibGUgaXRcblxuXG4gICAgbGlzdFtpXS5zZWxlY3RlZCA9IGZhbHNlO1xuICB9XG59O1xuLyoqXG4gKiBUaGUgY3VycmVudCBsaXN0IG9mIHtAbGluayBWaWRlb1RyYWNrfSBmb3IgYSB2aWRlby5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjdmlkZW90cmFja2xpc3R9XG4gKiBAZXh0ZW5kcyBUcmFja0xpc3RcbiAqL1xuXG5cbnZhciBWaWRlb1RyYWNrTGlzdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RyYWNrTGlzdCkge1xuICBfaW5oZXJpdHNMb29zZShWaWRlb1RyYWNrTGlzdCwgX1RyYWNrTGlzdCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZpZGVvVHJhY2tbXX0gW3RyYWNrcz1bXV1cbiAgICogICAgICAgIEEgbGlzdCBvZiBgVmlkZW9UcmFja2AgdG8gaW5zdGFudGlhdGUgdGhlIGxpc3Qgd2l0aC5cbiAgICovXG4gIGZ1bmN0aW9uIFZpZGVvVHJhY2tMaXN0KHRyYWNrcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh0cmFja3MgPT09IHZvaWQgMCkge1xuICAgICAgdHJhY2tzID0gW107XG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIG9ubHkgMSB0cmFjayBpcyBlbmFibGVkXG4gICAgLy8gc29ydGVkIGZyb20gbGFzdCBpbmRleCB0byBmaXJzdCBpbmRleFxuICAgIGZvciAodmFyIGkgPSB0cmFja3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGlmICh0cmFja3NbaV0uc2VsZWN0ZWQpIHtcbiAgICAgICAgZGlzYWJsZU90aGVycyQxKHRyYWNrcywgdHJhY2tzW2ldKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfVHJhY2tMaXN0LmNhbGwodGhpcywgdHJhY2tzKSB8fCB0aGlzO1xuICAgIF90aGlzLmNoYW5naW5nXyA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge251bWJlcn0gVmlkZW9UcmFja0xpc3Qjc2VsZWN0ZWRJbmRleFxuICAgICAqICAgICAgICAgVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIHNlbGVjdGVkIHtAbGluayBWaWRlb1RyYWNrYH0uXG4gICAgICovXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICdzZWxlY3RlZEluZGV4Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aGlzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIGlmICh0aGlzW19pXS5zZWxlY3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIF9pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCgpIHt9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgVmlkZW9UcmFja30gdG8gdGhlIGBWaWRlb1RyYWNrTGlzdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7VmlkZW9UcmFja30gdHJhY2tcbiAgICogICAgICAgIFRoZSBWaWRlb1RyYWNrIHRvIGFkZCB0byB0aGUgbGlzdFxuICAgKlxuICAgKiBAZmlyZXMgVHJhY2tMaXN0I2FkZHRyYWNrXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFZpZGVvVHJhY2tMaXN0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkVHJhY2sgPSBmdW5jdGlvbiBhZGRUcmFjayh0cmFjaykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKHRyYWNrLnNlbGVjdGVkKSB7XG4gICAgICBkaXNhYmxlT3RoZXJzJDEodGhpcywgdHJhY2spO1xuICAgIH1cblxuICAgIF9UcmFja0xpc3QucHJvdG90eXBlLmFkZFRyYWNrLmNhbGwodGhpcywgdHJhY2spOyAvLyBuYXRpdmUgdHJhY2tzIGRvbid0IGhhdmUgdGhpc1xuXG5cbiAgICBpZiAoIXRyYWNrLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cmFjay5zZWxlY3RlZENoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMyLmNoYW5naW5nXykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5jaGFuZ2luZ18gPSB0cnVlO1xuICAgICAgZGlzYWJsZU90aGVycyQxKF90aGlzMiwgdHJhY2spO1xuICAgICAgX3RoaXMyLmNoYW5naW5nXyA9IGZhbHNlO1xuXG4gICAgICBfdGhpczIudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAbGlzdGVucyBWaWRlb1RyYWNrI3NlbGVjdGVkY2hhbmdlXG4gICAgICogQGZpcmVzIFRyYWNrTGlzdCNjaGFuZ2VcbiAgICAgKi9cblxuXG4gICAgdHJhY2suYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0ZWRjaGFuZ2UnLCB0cmFjay5zZWxlY3RlZENoYW5nZV8pO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmVUcmFjayA9IGZ1bmN0aW9uIHJlbW92ZVRyYWNrKHJ0cmFjaykge1xuICAgIF9UcmFja0xpc3QucHJvdG90eXBlLnJlbW92ZVRyYWNrLmNhbGwodGhpcywgcnRyYWNrKTtcblxuICAgIGlmIChydHJhY2sucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJiBydHJhY2suc2VsZWN0ZWRDaGFuZ2VfKSB7XG4gICAgICBydHJhY2sucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2VsZWN0ZWRjaGFuZ2UnLCBydHJhY2suc2VsZWN0ZWRDaGFuZ2VfKTtcbiAgICAgIHJ0cmFjay5zZWxlY3RlZENoYW5nZV8gPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVmlkZW9UcmFja0xpc3Q7XG59KFRyYWNrTGlzdCk7XG5cbi8qKlxuICogVGhlIGN1cnJlbnQgbGlzdCBvZiB7QGxpbmsgVGV4dFRyYWNrfSBmb3IgYSBtZWRpYSBmaWxlLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN0ZXh0dHJhY2tsaXN0fVxuICogQGV4dGVuZHMgVHJhY2tMaXN0XG4gKi9cblxudmFyIFRleHRUcmFja0xpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UcmFja0xpc3QpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGV4dFRyYWNrTGlzdCwgX1RyYWNrTGlzdCk7XG5cbiAgZnVuY3Rpb24gVGV4dFRyYWNrTGlzdCgpIHtcbiAgICByZXR1cm4gX1RyYWNrTGlzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVGV4dFRyYWNrTGlzdC5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEFkZCBhIHtAbGluayBUZXh0VHJhY2t9IHRvIHRoZSBgVGV4dFRyYWNrTGlzdGBcbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t9IHRyYWNrXG4gICAqICAgICAgICBUaGUgdGV4dCB0cmFjayB0byBhZGQgdG8gdGhlIGxpc3QuXG4gICAqXG4gICAqIEBmaXJlcyBUcmFja0xpc3QjYWRkdHJhY2tcbiAgICovXG4gIF9wcm90by5hZGRUcmFjayA9IGZ1bmN0aW9uIGFkZFRyYWNrKHRyYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9UcmFja0xpc3QucHJvdG90eXBlLmFkZFRyYWNrLmNhbGwodGhpcywgdHJhY2spO1xuXG4gICAgaWYgKCF0aGlzLnF1ZXVlQ2hhbmdlXykge1xuICAgICAgdGhpcy5xdWV1ZUNoYW5nZV8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5xdWV1ZVRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMudHJpZ2dlclNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2UpIHtcbiAgICAgIHRoaXMudHJpZ2dlclNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2VfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcignc2VsZWN0ZWRsYW5ndWFnZWNoYW5nZScpO1xuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGxpc3RlbnMgVGV4dFRyYWNrI21vZGVjaGFuZ2VcbiAgICAgKiBAZmlyZXMgVHJhY2tMaXN0I2NoYW5nZVxuICAgICAqL1xuXG5cbiAgICB0cmFjay5hZGRFdmVudExpc3RlbmVyKCdtb2RlY2hhbmdlJywgdGhpcy5xdWV1ZUNoYW5nZV8pO1xuICAgIHZhciBub25MYW5ndWFnZVRleHRUcmFja0tpbmQgPSBbJ21ldGFkYXRhJywgJ2NoYXB0ZXJzJ107XG5cbiAgICBpZiAobm9uTGFuZ3VhZ2VUZXh0VHJhY2tLaW5kLmluZGV4T2YodHJhY2sua2luZCkgPT09IC0xKSB7XG4gICAgICB0cmFjay5hZGRFdmVudExpc3RlbmVyKCdtb2RlY2hhbmdlJywgdGhpcy50cmlnZ2VyU2VsZWN0ZWRsYW5ndWFnZWNoYW5nZV8pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlVHJhY2sgPSBmdW5jdGlvbiByZW1vdmVUcmFjayhydHJhY2spIHtcbiAgICBfVHJhY2tMaXN0LnByb3RvdHlwZS5yZW1vdmVUcmFjay5jYWxsKHRoaXMsIHJ0cmFjayk7IC8vIG1hbnVhbGx5IHJlbW92ZSB0aGUgZXZlbnQgaGFuZGxlcnMgd2UgYWRkZWRcblxuXG4gICAgaWYgKHJ0cmFjay5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICBpZiAodGhpcy5xdWV1ZUNoYW5nZV8pIHtcbiAgICAgICAgcnRyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vZGVjaGFuZ2UnLCB0aGlzLnF1ZXVlQ2hhbmdlXyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNlbGVjdGVkbGFuZ3VhZ2VjaGFuZ2VfKSB7XG4gICAgICAgIHJ0cmFjay5yZW1vdmVFdmVudExpc3RlbmVyKCdtb2RlY2hhbmdlJywgdGhpcy50cmlnZ2VyU2VsZWN0ZWRsYW5ndWFnZWNoYW5nZV8pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVGV4dFRyYWNrTGlzdDtcbn0oVHJhY2tMaXN0KTtcblxuLyoqXG4gKiBAZmlsZSBodG1sLXRyYWNrLWVsZW1lbnQtbGlzdC5qc1xuICovXG5cbi8qKlxuICogVGhlIGN1cnJlbnQgbGlzdCBvZiB7QGxpbmsgSHRtbFRyYWNrRWxlbWVudH1zLlxuICovXG52YXIgSHRtbFRyYWNrRWxlbWVudExpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7SHRtbFRyYWNrRWxlbWVudFtdfSBbdHJhY2tzPVtdXVxuICAgKiAgICAgICAgQSBsaXN0IG9mIGBIdG1sVHJhY2tFbGVtZW50YCB0byBpbnN0YW50aWF0ZSB0aGUgbGlzdCB3aXRoLlxuICAgKi9cbiAgZnVuY3Rpb24gSHRtbFRyYWNrRWxlbWVudExpc3QodHJhY2tFbGVtZW50cykge1xuICAgIGlmICh0cmFja0VsZW1lbnRzID09PSB2b2lkIDApIHtcbiAgICAgIHRyYWNrRWxlbWVudHMgPSBbXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNrRWxlbWVudHNfID0gW107XG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIEh0bWxUcmFja0VsZW1lbnRMaXN0XG4gICAgICogQG1lbWJlciB7bnVtYmVyfSBsZW5ndGhcbiAgICAgKiAgICAgICAgIFRoZSBjdXJyZW50IG51bWJlciBvZiBgVHJhY2tgcyBpbiB0aGUgdGhpcyBUcmFja2lzdC5cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbGVuZ3RoJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYWNrRWxlbWVudHNfLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSB0cmFja0VsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmFkZFRyYWNrRWxlbWVudF8odHJhY2tFbGVtZW50c1tpXSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBZGQgYW4ge0BsaW5rIEh0bWxUcmFja0VsZW1lbnR9IHRvIHRoZSBgSHRtbFRyYWNrRWxlbWVudExpc3RgXG4gICAqXG4gICAqIEBwYXJhbSB7SHRtbFRyYWNrRWxlbWVudH0gdHJhY2tFbGVtZW50XG4gICAqICAgICAgICBUaGUgdHJhY2sgZWxlbWVudCB0byBhZGQgdG8gdGhlIGxpc3QuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEh0bWxUcmFja0VsZW1lbnRMaXN0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkVHJhY2tFbGVtZW50XyA9IGZ1bmN0aW9uIGFkZFRyYWNrRWxlbWVudF8odHJhY2tFbGVtZW50KSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy50cmFja0VsZW1lbnRzXy5sZW5ndGg7XG5cbiAgICBpZiAoISgnJyArIGluZGV4IGluIHRoaXMpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudHJhY2tFbGVtZW50c19baW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IC8vIERvIG5vdCBhZGQgZHVwbGljYXRlIGVsZW1lbnRzXG5cblxuICAgIGlmICh0aGlzLnRyYWNrRWxlbWVudHNfLmluZGV4T2YodHJhY2tFbGVtZW50KSA9PT0gLTEpIHtcbiAgICAgIHRoaXMudHJhY2tFbGVtZW50c18ucHVzaCh0cmFja0VsZW1lbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IGFuIHtAbGluayBIdG1sVHJhY2tFbGVtZW50fSBmcm9tIHRoZSBgSHRtbFRyYWNrRWxlbWVudExpc3RgIGdpdmVuIGFuXG4gICAqIHtAbGluayBUZXh0VHJhY2t9LlxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja30gdHJhY2tcbiAgICogICAgICAgIFRoZSB0cmFjayBhc3NvY2lhdGVkIHdpdGggYSB0cmFjayBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtIdG1sVHJhY2tFbGVtZW50fHVuZGVmaW5lZH1cbiAgICogICAgICAgICBUaGUgdHJhY2sgZWxlbWVudCB0aGF0IHdhcyBmb3VuZCBvciB1bmRlZmluZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFRyYWNrRWxlbWVudEJ5VHJhY2tfID0gZnVuY3Rpb24gZ2V0VHJhY2tFbGVtZW50QnlUcmFja18odHJhY2spIHtcbiAgICB2YXIgdHJhY2tFbGVtZW50XztcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSB0aGlzLnRyYWNrRWxlbWVudHNfLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJhY2sgPT09IHRoaXMudHJhY2tFbGVtZW50c19baV0udHJhY2spIHtcbiAgICAgICAgdHJhY2tFbGVtZW50XyA9IHRoaXMudHJhY2tFbGVtZW50c19baV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cmFja0VsZW1lbnRfO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSB7QGxpbmsgSHRtbFRyYWNrRWxlbWVudH0gZnJvbSB0aGUgYEh0bWxUcmFja0VsZW1lbnRMaXN0YFxuICAgKlxuICAgKiBAcGFyYW0ge0h0bWxUcmFja0VsZW1lbnR9IHRyYWNrRWxlbWVudFxuICAgKiAgICAgICAgVGhlIHRyYWNrIGVsZW1lbnQgdG8gcmVtb3ZlIGZyb20gdGhlIGxpc3QuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVRyYWNrRWxlbWVudF8gPSBmdW5jdGlvbiByZW1vdmVUcmFja0VsZW1lbnRfKHRyYWNrRWxlbWVudCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSB0aGlzLnRyYWNrRWxlbWVudHNfLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJhY2tFbGVtZW50ID09PSB0aGlzLnRyYWNrRWxlbWVudHNfW2ldKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYWNrRWxlbWVudHNfW2ldLnRyYWNrICYmIHR5cGVvZiB0aGlzLnRyYWNrRWxlbWVudHNfW2ldLnRyYWNrLm9mZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMudHJhY2tFbGVtZW50c19baV0udHJhY2sub2ZmKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMudHJhY2tFbGVtZW50c19baV0ub2ZmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy50cmFja0VsZW1lbnRzX1tpXS5vZmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJhY2tFbGVtZW50c18uc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEh0bWxUcmFja0VsZW1lbnRMaXN0O1xufSgpO1xuXG4vKipcbiAqIEBmaWxlIHRleHQtdHJhY2stY3VlLWxpc3QuanNcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFRleHRUcmFja0N1ZUxpc3R+VGV4dFRyYWNrQ3VlXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGlkXG4gKiAgICAgICAgICAgVGhlIHVuaXF1ZSBpZCBmb3IgdGhpcyB0ZXh0IHRyYWNrIGN1ZVxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdGFydFRpbWVcbiAqICAgICAgICAgICBUaGUgc3RhcnQgdGltZSBmb3IgdGhpcyB0ZXh0IHRyYWNrIGN1ZVxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBlbmRUaW1lXG4gKiAgICAgICAgICAgVGhlIGVuZCB0aW1lIGZvciB0aGlzIHRleHQgdHJhY2sgY3VlXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBwYXVzZU9uRXhpdFxuICogICAgICAgICAgIFBhdXNlIHdoZW4gdGhlIGVuZCB0aW1lIGlzIHJlYWNoZWQgaWYgdHJ1ZS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjdGV4dHRyYWNrY3VlfVxuICovXG5cbi8qKlxuICogQSBMaXN0IG9mIFRleHRUcmFja0N1ZXMuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI3RleHR0cmFja2N1ZWxpc3R9XG4gKi9cbnZhciBUZXh0VHJhY2tDdWVMaXN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLi5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gY3Vlc1xuICAgKiAgICAgICAgQSBsaXN0IG9mIGN1ZXMgdG8gYmUgaW5pdGlhbGl6ZWQgd2l0aFxuICAgKi9cbiAgZnVuY3Rpb24gVGV4dFRyYWNrQ3VlTGlzdChjdWVzKSB7XG4gICAgVGV4dFRyYWNrQ3VlTGlzdC5wcm90b3R5cGUuc2V0Q3Vlc18uY2FsbCh0aGlzLCBjdWVzKTtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgVGV4dFRyYWNrQ3VlTGlzdFxuICAgICAqIEBtZW1iZXIge251bWJlcn0gbGVuZ3RoXG4gICAgICogICAgICAgICBUaGUgY3VycmVudCBudW1iZXIgb2YgYFRleHRUcmFja0N1ZWBzIGluIHRoZSBUZXh0VHJhY2tDdWVMaXN0LlxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoXztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQSBzZXR0ZXIgZm9yIGN1ZXMgaW4gdGhpcyBsaXN0LiBDcmVhdGVzIGdldHRlcnNcbiAgICogYW4gYW4gaW5kZXggZm9yIHRoZSBjdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBjdWVzXG4gICAqICAgICAgICBBbiBhcnJheSBvZiBjdWVzIHRvIHNldFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBUZXh0VHJhY2tDdWVMaXN0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0Q3Vlc18gPSBmdW5jdGlvbiBzZXRDdWVzXyhjdWVzKSB7XG4gICAgdmFyIG9sZExlbmd0aCA9IHRoaXMubGVuZ3RoIHx8IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsID0gY3Vlcy5sZW5ndGg7XG4gICAgdGhpcy5jdWVzXyA9IGN1ZXM7XG4gICAgdGhpcy5sZW5ndGhfID0gY3Vlcy5sZW5ndGg7XG5cbiAgICB2YXIgZGVmaW5lUHJvcCA9IGZ1bmN0aW9uIGRlZmluZVByb3AoaW5kZXgpIHtcbiAgICAgIGlmICghKCcnICsgaW5kZXggaW4gdGhpcykpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICcnICsgaW5kZXgsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1ZXNfW2luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAob2xkTGVuZ3RoIDwgbCkge1xuICAgICAgaSA9IG9sZExlbmd0aDtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgZGVmaW5lUHJvcC5jYWxsKHRoaXMsIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IGEgYFRleHRUcmFja0N1ZWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gdGhlIGBUZXh0VHJhY2tDdWVMaXN0YCBieSBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAqICAgICAgICBUaGUgaWQgb2YgdGhlIGN1ZSB0aGF0IHNob3VsZCBiZSBzZWFyY2hlZCBmb3IuXG4gICAqXG4gICAqIEByZXR1cm4ge1RleHRUcmFja0N1ZUxpc3R+VGV4dFRyYWNrQ3VlfG51bGx9XG4gICAqICAgICAgICAgQSBzaW5nbGUgY3VlIG9yIG51bGwgaWYgbm9uZSB3YXMgZm91bmQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldEN1ZUJ5SWQgPSBmdW5jdGlvbiBnZXRDdWVCeUlkKGlkKSB7XG4gICAgdmFyIHJlc3VsdCA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY3VlID0gdGhpc1tpXTtcblxuICAgICAgaWYgKGN1ZS5pZCA9PT0gaWQpIHtcbiAgICAgICAgcmVzdWx0ID0gY3VlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHJldHVybiBUZXh0VHJhY2tDdWVMaXN0O1xufSgpO1xuXG4vKipcbiAqIEBmaWxlIHRyYWNrLWtpbmRzLmpzXG4gKi9cblxuLyoqXG4gKiBBbGwgcG9zc2libGUgYFZpZGVvVHJhY2tLaW5kYHNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNkb20tdmlkZW90cmFjay1raW5kXG4gKiBAdHlwZWRlZiBWaWRlb1RyYWNrfktpbmRcbiAqIEBlbnVtXG4gKi9cbnZhciBWaWRlb1RyYWNrS2luZCA9IHtcbiAgYWx0ZXJuYXRpdmU6ICdhbHRlcm5hdGl2ZScsXG4gIGNhcHRpb25zOiAnY2FwdGlvbnMnLFxuICBtYWluOiAnbWFpbicsXG4gIHNpZ246ICdzaWduJyxcbiAgc3VidGl0bGVzOiAnc3VidGl0bGVzJyxcbiAgY29tbWVudGFyeTogJ2NvbW1lbnRhcnknXG59O1xuLyoqXG4gKiBBbGwgcG9zc2libGUgYEF1ZGlvVHJhY2tLaW5kYHNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNkb20tYXVkaW90cmFjay1raW5kXG4gKiBAdHlwZWRlZiBBdWRpb1RyYWNrfktpbmRcbiAqIEBlbnVtXG4gKi9cblxudmFyIEF1ZGlvVHJhY2tLaW5kID0ge1xuICAnYWx0ZXJuYXRpdmUnOiAnYWx0ZXJuYXRpdmUnLFxuICAnZGVzY3JpcHRpb25zJzogJ2Rlc2NyaXB0aW9ucycsXG4gICdtYWluJzogJ21haW4nLFxuICAnbWFpbi1kZXNjJzogJ21haW4tZGVzYycsXG4gICd0cmFuc2xhdGlvbic6ICd0cmFuc2xhdGlvbicsXG4gICdjb21tZW50YXJ5JzogJ2NvbW1lbnRhcnknXG59O1xuLyoqXG4gKiBBbGwgcG9zc2libGUgYFRleHRUcmFja0tpbmRgc1xuICpcbiAqIEBzZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2RvbS10ZXh0dHJhY2sta2luZFxuICogQHR5cGVkZWYgVGV4dFRyYWNrfktpbmRcbiAqIEBlbnVtXG4gKi9cblxudmFyIFRleHRUcmFja0tpbmQgPSB7XG4gIHN1YnRpdGxlczogJ3N1YnRpdGxlcycsXG4gIGNhcHRpb25zOiAnY2FwdGlvbnMnLFxuICBkZXNjcmlwdGlvbnM6ICdkZXNjcmlwdGlvbnMnLFxuICBjaGFwdGVyczogJ2NoYXB0ZXJzJyxcbiAgbWV0YWRhdGE6ICdtZXRhZGF0YSdcbn07XG4vKipcbiAqIEFsbCBwb3NzaWJsZSBgVGV4dFRyYWNrTW9kZWBzXG4gKlxuICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjdGV4dHRyYWNrbW9kZVxuICogQHR5cGVkZWYgVGV4dFRyYWNrfk1vZGVcbiAqIEBlbnVtXG4gKi9cblxudmFyIFRleHRUcmFja01vZGUgPSB7XG4gIGRpc2FibGVkOiAnZGlzYWJsZWQnLFxuICBoaWRkZW46ICdoaWRkZW4nLFxuICBzaG93aW5nOiAnc2hvd2luZydcbn07XG5cbi8qKlxuICogQSBUcmFjayBjbGFzcyB0aGF0IGNvbnRhaW5zIGFsbCBvZiB0aGUgY29tbW9uIGZ1bmN0aW9uYWxpdHkgZm9yIHtAbGluayBBdWRpb1RyYWNrfSxcbiAqIHtAbGluayBWaWRlb1RyYWNrfSwgYW5kIHtAbGluayBUZXh0VHJhY2t9LlxuICpcbiAqID4gTm90ZTogVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHlcbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWx9XG4gKiBAZXh0ZW5kcyBFdmVudFRhcmdldFxuICogQGFic3RyYWN0XG4gKi9cblxudmFyIFRyYWNrID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXZlbnRUYXJnZXQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhY2ssIF9FdmVudFRhcmdldCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gICAqICAgICAgICBPYmplY3Qgb2Ygb3B0aW9uIG5hbWVzIGFuZCB2YWx1ZXNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmtpbmQ9JyddXG4gICAqICAgICAgICBBIHZhbGlkIGtpbmQgZm9yIHRoZSB0cmFjayB0eXBlIHlvdSBhcmUgY3JlYXRpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZD0ndmpzX3RyYWNrXycgKyBHdWlkLm5ld0dVSUQoKV1cbiAgICogICAgICAgIEEgdW5pcXVlIGlkIGZvciB0aGlzIEF1ZGlvVHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYWJlbD0nJ11cbiAgICogICAgICAgIFRoZSBtZW51IGxhYmVsIGZvciB0aGlzIHRyYWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFuZ3VhZ2U9JyddXG4gICAqICAgICAgICBBIHZhbGlkIHR3byBjaGFyYWN0ZXIgbGFuZ3VhZ2UgY29kZS5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBmdW5jdGlvbiBUcmFjayhvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIF90aGlzID0gX0V2ZW50VGFyZ2V0LmNhbGwodGhpcykgfHwgdGhpcztcbiAgICB2YXIgdHJhY2tQcm9wcyA9IHtcbiAgICAgIGlkOiBvcHRpb25zLmlkIHx8ICd2anNfdHJhY2tfJyArIG5ld0dVSUQoKSxcbiAgICAgIGtpbmQ6IG9wdGlvbnMua2luZCB8fCAnJyxcbiAgICAgIGxhYmVsOiBvcHRpb25zLmxhYmVsIHx8ICcnLFxuICAgICAgbGFuZ3VhZ2U6IG9wdGlvbnMubGFuZ3VhZ2UgfHwgJydcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBUcmFja1xuICAgICAqIEBtZW1iZXIge3N0cmluZ30gaWRcbiAgICAgKiAgICAgICAgIFRoZSBpZCBvZiB0aGlzIHRyYWNrLiBDYW5ub3QgYmUgY2hhbmdlZCBhZnRlciBjcmVhdGlvbi5cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFRyYWNrXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSBraW5kXG4gICAgICogICAgICAgICBUaGUga2luZCBvZiB0cmFjayB0aGF0IHRoaXMgaXMuIENhbm5vdCBiZSBjaGFuZ2VkIGFmdGVyIGNyZWF0aW9uLlxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2tcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGxhYmVsXG4gICAgICogICAgICAgICBUaGUgbGFiZWwgb2YgdGhpcyB0cmFjay4gQ2Fubm90IGJlIGNoYW5nZWQgYWZ0ZXIgY3JlYXRpb24uXG4gICAgICogQGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBUcmFja1xuICAgICAqIEBtZW1iZXIge3N0cmluZ30gbGFuZ3VhZ2VcbiAgICAgKiAgICAgICAgIFRoZSB0d28gbGV0dGVyIGxhbmd1YWdlIGNvZGUgZm9yIHRoaXMgdHJhY2suIENhbm5vdCBiZSBjaGFuZ2VkIGFmdGVyXG4gICAgICogICAgICAgICBjcmVhdGlvbi5cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3Aoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIGtleSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdHJhY2tQcm9wc1trZXldO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCgpIHt9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIHRyYWNrUHJvcHMpIHtcbiAgICAgIF9sb29wKGtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIFRyYWNrO1xufShFdmVudFRhcmdldCk7XG5cbi8qKlxuICogQGZpbGUgdXJsLmpzXG4gKiBAbW9kdWxlIHVybFxuICovXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IHVybDpVUkxPYmplY3RcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcHJvdG9jb2xcbiAqICAgICAgICAgICBUaGUgcHJvdG9jb2wgb2YgdGhlIHVybCB0aGF0IHdhcyBwYXJzZWQuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGhvc3RuYW1lXG4gKiAgICAgICAgICAgVGhlIGhvc3RuYW1lIG9mIHRoZSB1cmwgdGhhdCB3YXMgcGFyc2VkLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwb3J0XG4gKiAgICAgICAgICAgVGhlIHBvcnQgb2YgdGhlIHVybCB0aGF0IHdhcyBwYXJzZWQuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBhdGhuYW1lXG4gKiAgICAgICAgICAgVGhlIHBhdGhuYW1lIG9mIHRoZSB1cmwgdGhhdCB3YXMgcGFyc2VkLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzZWFyY2hcbiAqICAgICAgICAgICBUaGUgc2VhcmNoIHF1ZXJ5IG9mIHRoZSB1cmwgdGhhdCB3YXMgcGFyc2VkLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBoYXNoXG4gKiAgICAgICAgICAgVGhlIGhhc2ggb2YgdGhlIHVybCB0aGF0IHdhcyBwYXJzZWQuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGhvc3RcbiAqICAgICAgICAgICBUaGUgaG9zdCBvZiB0aGUgdXJsIHRoYXQgd2FzIHBhcnNlZC5cbiAqL1xuXG4vKipcbiAqIFJlc29sdmUgYW5kIHBhcnNlIHRoZSBlbGVtZW50cyBvZiBhIFVSTC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSAgICB7U3RyaW5nfSB1cmxcbiAqICAgICAgICAgICBUaGUgdXJsIHRvIHBhcnNlXG4gKlxuICogQHJldHVybiAgIHt1cmw6VVJMT2JqZWN0fVxuICogICAgICAgICAgIEFuIG9iamVjdCBvZiB1cmwgZGV0YWlsc1xuICovXG5cbnZhciBwYXJzZVVybCA9IGZ1bmN0aW9uIHBhcnNlVXJsKHVybCkge1xuICB2YXIgcHJvcHMgPSBbJ3Byb3RvY29sJywgJ2hvc3RuYW1lJywgJ3BvcnQnLCAncGF0aG5hbWUnLCAnc2VhcmNoJywgJ2hhc2gnLCAnaG9zdCddOyAvLyBhZGQgdGhlIHVybCB0byBhbiBhbmNob3IgYW5kIGxldCB0aGUgYnJvd3NlciBwYXJzZSB0aGUgVVJMXG5cbiAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGEuaHJlZiA9IHVybDsgLy8gSUU4IChhbmQgOT8pIEZpeFxuICAvLyBpZTggZG9lc24ndCBwYXJzZSB0aGUgVVJMIGNvcnJlY3RseSB1bnRpbCB0aGUgYW5jaG9yIGlzIGFjdHVhbGx5XG4gIC8vIGFkZGVkIHRvIHRoZSBib2R5LCBhbmQgYW4gaW5uZXJIVE1MIGlzIG5lZWRlZCB0byB0cmlnZ2VyIHRoZSBwYXJzaW5nXG5cbiAgdmFyIGFkZFRvQm9keSA9IGEuaG9zdCA9PT0gJycgJiYgYS5wcm90b2NvbCAhPT0gJ2ZpbGU6JztcbiAgdmFyIGRpdjtcblxuICBpZiAoYWRkVG9Cb2R5KSB7XG4gICAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj1cXFwiXCIgKyB1cmwgKyBcIlxcXCI+PC9hPlwiO1xuICAgIGEgPSBkaXYuZmlyc3RDaGlsZDsgLy8gcHJldmVudCB0aGUgZGl2IGZyb20gYWZmZWN0aW5nIGxheW91dFxuXG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTpub25lOyBwb3NpdGlvbjphYnNvbHV0ZTsnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gIH0gLy8gQ29weSB0aGUgc3BlY2lmaWMgVVJMIHByb3BlcnRpZXMgdG8gYSBuZXcgb2JqZWN0XG4gIC8vIFRoaXMgaXMgYWxzbyBuZWVkZWQgZm9yIElFOCBiZWNhdXNlIHRoZSBhbmNob3IgbG9zZXMgaXRzXG4gIC8vIHByb3BlcnRpZXMgd2hlbiBpdCdzIHJlbW92ZWQgZnJvbSB0aGUgZG9tXG5cblxuICB2YXIgZGV0YWlscyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICBkZXRhaWxzW3Byb3BzW2ldXSA9IGFbcHJvcHNbaV1dO1xuICB9IC8vIElFOSBhZGRzIHRoZSBwb3J0IHRvIHRoZSBob3N0IHByb3BlcnR5IHVubGlrZSBldmVyeW9uZSBlbHNlLiBJZlxuICAvLyBhIHBvcnQgaWRlbnRpZmllciBpcyBhZGRlZCBmb3Igc3RhbmRhcmQgcG9ydHMsIHN0cmlwIGl0LlxuXG5cbiAgaWYgKGRldGFpbHMucHJvdG9jb2wgPT09ICdodHRwOicpIHtcbiAgICBkZXRhaWxzLmhvc3QgPSBkZXRhaWxzLmhvc3QucmVwbGFjZSgvOjgwJC8sICcnKTtcbiAgfVxuXG4gIGlmIChkZXRhaWxzLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgIGRldGFpbHMuaG9zdCA9IGRldGFpbHMuaG9zdC5yZXBsYWNlKC86NDQzJC8sICcnKTtcbiAgfVxuXG4gIGlmICghZGV0YWlscy5wcm90b2NvbCkge1xuICAgIGRldGFpbHMucHJvdG9jb2wgPSB3aW5kb3ckMS5sb2NhdGlvbi5wcm90b2NvbDtcbiAgfVxuXG4gIGlmIChhZGRUb0JvZHkpIHtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGRpdik7XG4gIH1cblxuICByZXR1cm4gZGV0YWlscztcbn07XG4vKipcbiAqIEdldCBhYnNvbHV0ZSB2ZXJzaW9uIG9mIHJlbGF0aXZlIFVSTC4gVXNlZCB0byB0ZWxsIEZsYXNoIHRoZSBjb3JyZWN0IFVSTC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSAgICB7c3RyaW5nfSB1cmxcbiAqICAgICAgICAgICBVUkwgdG8gbWFrZSBhYnNvbHV0ZVxuICpcbiAqIEByZXR1cm4gICB7c3RyaW5nfVxuICogICAgICAgICAgIEFic29sdXRlIFVSTFxuICpcbiAqIEBzZWUgICAgICBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ3MDgzMi9nZXR0aW5nLWFuLWFic29sdXRlLXVybC1mcm9tLWEtcmVsYXRpdmUtb25lLWllNi1pc3N1ZVxuICovXG5cbnZhciBnZXRBYnNvbHV0ZVVSTCA9IGZ1bmN0aW9uIGdldEFic29sdXRlVVJMKHVybCkge1xuICAvLyBDaGVjayBpZiBhYnNvbHV0ZSBVUkxcbiAgaWYgKCF1cmwubWF0Y2goL15odHRwcz86XFwvXFwvLykpIHtcbiAgICAvLyBDb252ZXJ0IHRvIGFic29sdXRlIFVSTC4gRmxhc2ggaG9zdGVkIG9mZi1zaXRlIG5lZWRzIGFuIGFic29sdXRlIFVSTC5cbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj1cXFwiXCIgKyB1cmwgKyBcIlxcXCI+eDwvYT5cIjtcbiAgICB1cmwgPSBkaXYuZmlyc3RDaGlsZC5ocmVmO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGV4dGVuc2lvbiBvZiB0aGUgcGFzc2VkIGZpbGUgbmFtZS4gSXQgd2lsbCByZXR1cm4gYW4gZW1wdHkgc3RyaW5nXG4gKiBpZiBwYXNzZWQgYW4gaW52YWxpZCBwYXRoLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtICAgIHtzdHJpbmd9IHBhdGhcbiAqICAgICAgICAgICBUaGUgZmlsZU5hbWUgcGF0aCBsaWtlICcvcGF0aC90by9maWxlLm1wNCdcbiAqXG4gKiBAcmV0dXJuICB7c3RyaW5nfVxuICogICAgICAgICAgIFRoZSBleHRlbnNpb24gaW4gbG93ZXIgY2FzZSBvciBhbiBlbXB0eSBzdHJpbmcgaWYgbm9cbiAqICAgICAgICAgICBleHRlbnNpb24gY291bGQgYmUgZm91bmQuXG4gKi9cblxudmFyIGdldEZpbGVFeHRlbnNpb24gPSBmdW5jdGlvbiBnZXRGaWxlRXh0ZW5zaW9uKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzcGxpdFBhdGhSZSA9IC9eKFxcLz8pKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/KShcXC4oW15cXC5cXC9cXD9dKykpKSg/OltcXC9dKnxbXFw/XS4qKSQvO1xuICAgIHZhciBwYXRoUGFydHMgPSBzcGxpdFBhdGhSZS5leGVjKHBhdGgpO1xuXG4gICAgaWYgKHBhdGhQYXJ0cykge1xuICAgICAgcmV0dXJuIHBhdGhQYXJ0cy5wb3AoKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn07XG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgdXJsIHBhc3NlZCBpcyBhIGNyb3NzIGRvbWFpbiByZXF1ZXN0IG9yIG5vdC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSAgICB7c3RyaW5nfSB1cmxcbiAqICAgICAgICAgICBUaGUgdXJsIHRvIGNoZWNrLlxuICpcbiAqIEBwYXJhbSAgICB7T2JqZWN0fSBbd2luTG9jXVxuICogICAgICAgICAgIHRoZSBkb21haW4gdG8gY2hlY2sgdGhlIHVybCBhZ2FpbnN0LCBkZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb25cbiAqXG4gKiBAcGFyYW0gICAge3N0cmluZ30gW3dpbkxvYy5wcm90b2NvbF1cbiAqICAgICAgICAgICBUaGUgd2luZG93IGxvY2F0aW9uIHByb3RvY29sIGRlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbFxuICpcbiAqIEBwYXJhbSAgICB7c3RyaW5nfSBbd2luTG9jLmhvc3RdXG4gKiAgICAgICAgICAgVGhlIHdpbmRvdyBsb2NhdGlvbiBob3N0IGRlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5ob3N0XG4gKlxuICogQHJldHVybiAgIHtib29sZWFufVxuICogICAgICAgICAgIFdoZXRoZXIgaXQgaXMgYSBjcm9zcyBkb21haW4gcmVxdWVzdCBvciBub3QuXG4gKi9cblxudmFyIGlzQ3Jvc3NPcmlnaW4gPSBmdW5jdGlvbiBpc0Nyb3NzT3JpZ2luKHVybCwgd2luTG9jKSB7XG4gIGlmICh3aW5Mb2MgPT09IHZvaWQgMCkge1xuICAgIHdpbkxvYyA9IHdpbmRvdyQxLmxvY2F0aW9uO1xuICB9XG5cbiAgdmFyIHVybEluZm8gPSBwYXJzZVVybCh1cmwpOyAvLyBJRTggcHJvdG9jb2wgcmVsYXRpdmUgdXJscyB3aWxsIHJldHVybiAnOicgZm9yIHByb3RvY29sXG5cbiAgdmFyIHNyY1Byb3RvY29sID0gdXJsSW5mby5wcm90b2NvbCA9PT0gJzonID8gd2luTG9jLnByb3RvY29sIDogdXJsSW5mby5wcm90b2NvbDsgLy8gQ2hlY2sgaWYgdXJsIGlzIGZvciBhbm90aGVyIGRvbWFpbi9vcmlnaW5cbiAgLy8gSUU4IGRvZXNuJ3Qga25vdyBsb2NhdGlvbi5vcmlnaW4sIHNvIHdlIHdvbid0IHJlbHkgb24gaXQgaGVyZVxuXG4gIHZhciBjcm9zc09yaWdpbiA9IHNyY1Byb3RvY29sICsgdXJsSW5mby5ob3N0ICE9PSB3aW5Mb2MucHJvdG9jb2wgKyB3aW5Mb2MuaG9zdDtcbiAgcmV0dXJuIGNyb3NzT3JpZ2luO1xufTtcblxudmFyIFVybCA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBwYXJzZVVybDogcGFyc2VVcmwsXG4gIGdldEFic29sdXRlVVJMOiBnZXRBYnNvbHV0ZVVSTCxcbiAgZ2V0RmlsZUV4dGVuc2lvbjogZ2V0RmlsZUV4dGVuc2lvbixcbiAgaXNDcm9zc09yaWdpbjogaXNDcm9zc09yaWdpblxufSk7XG5cbi8qKlxuICogVGFrZXMgYSB3ZWJ2dHQgZmlsZSBjb250ZW50cyBhbmQgcGFyc2VzIGl0IGludG8gY3Vlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmNDb250ZW50XG4gKiAgICAgICAgd2ViVlRUIGZpbGUgY29udGVudHNcbiAqXG4gKiBAcGFyYW0ge1RleHRUcmFja30gdHJhY2tcbiAqICAgICAgICBUZXh0VHJhY2sgdG8gYWRkIGN1ZXMgdG8uIEN1ZXMgY29tZSBmcm9tIHRoZSBzcmNDb250ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIHBhcnNlQ3VlcyA9IGZ1bmN0aW9uIHBhcnNlQ3VlcyhzcmNDb250ZW50LCB0cmFjaykge1xuICB2YXIgcGFyc2VyID0gbmV3IHdpbmRvdyQxLldlYlZUVC5QYXJzZXIod2luZG93JDEsIHdpbmRvdyQxLnZ0dGpzLCB3aW5kb3ckMS5XZWJWVFQuU3RyaW5nRGVjb2RlcigpKTtcbiAgdmFyIGVycm9ycyA9IFtdO1xuXG4gIHBhcnNlci5vbmN1ZSA9IGZ1bmN0aW9uIChjdWUpIHtcbiAgICB0cmFjay5hZGRDdWUoY3VlKTtcbiAgfTtcblxuICBwYXJzZXIub25wYXJzaW5nZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBlcnJvcnMucHVzaChlcnJvcik7XG4gIH07XG5cbiAgcGFyc2VyLm9uZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdHJhY2sudHJpZ2dlcih7XG4gICAgICB0eXBlOiAnbG9hZGVkZGF0YScsXG4gICAgICB0YXJnZXQ6IHRyYWNrXG4gICAgfSk7XG4gIH07XG5cbiAgcGFyc2VyLnBhcnNlKHNyY0NvbnRlbnQpO1xuXG4gIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgIGlmICh3aW5kb3ckMS5jb25zb2xlICYmIHdpbmRvdyQxLmNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQpIHtcbiAgICAgIHdpbmRvdyQxLmNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoXCJUZXh0IFRyYWNrIHBhcnNpbmcgZXJyb3JzIGZvciBcIiArIHRyYWNrLnNyYyk7XG4gICAgfVxuXG4gICAgZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZXR1cm4gbG9nLmVycm9yKGVycm9yKTtcbiAgICB9KTtcblxuICAgIGlmICh3aW5kb3ckMS5jb25zb2xlICYmIHdpbmRvdyQxLmNvbnNvbGUuZ3JvdXBFbmQpIHtcbiAgICAgIHdpbmRvdyQxLmNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZXIuZmx1c2goKTtcbn07XG4vKipcbiAqIExvYWQgYSBgVGV4dFRyYWNrYCBmcm9tIGEgc3BlY2lmaWVkIHVybC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjXG4gKiAgICAgICAgVXJsIHRvIGxvYWQgdHJhY2sgZnJvbS5cbiAqXG4gKiBAcGFyYW0ge1RleHRUcmFja30gdHJhY2tcbiAqICAgICAgICBUcmFjayB0byBhZGQgY3VlcyB0by4gQ29tZXMgZnJvbSB0aGUgY29udGVudCBhdCB0aGUgZW5kIG9mIGB1cmxgLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgbG9hZFRyYWNrID0gZnVuY3Rpb24gbG9hZFRyYWNrKHNyYywgdHJhY2spIHtcbiAgdmFyIG9wdHMgPSB7XG4gICAgdXJpOiBzcmNcbiAgfTtcbiAgdmFyIGNyb3NzT3JpZ2luID0gaXNDcm9zc09yaWdpbihzcmMpO1xuXG4gIGlmIChjcm9zc09yaWdpbikge1xuICAgIG9wdHMuY29ycyA9IGNyb3NzT3JpZ2luO1xuICB9XG5cbiAgdmFyIHdpdGhDcmVkZW50aWFscyA9IHRyYWNrLnRlY2hfLmNyb3NzT3JpZ2luKCkgPT09ICd1c2UtY3JlZGVudGlhbHMnO1xuXG4gIGlmICh3aXRoQ3JlZGVudGlhbHMpIHtcbiAgICBvcHRzLndpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscztcbiAgfVxuXG4gIFhIUihvcHRzLCBiaW5kKHRoaXMsIGZ1bmN0aW9uIChlcnIsIHJlc3BvbnNlLCByZXNwb25zZUJvZHkpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXR1cm4gbG9nLmVycm9yKGVyciwgcmVzcG9uc2UpO1xuICAgIH1cblxuICAgIHRyYWNrLmxvYWRlZF8gPSB0cnVlOyAvLyBNYWtlIHN1cmUgdGhhdCB2dHRqcyBoYXMgbG9hZGVkLCBvdGhlcndpc2UsIHdhaXQgdGlsbCBpdCBmaW5pc2hlZCBsb2FkaW5nXG4gICAgLy8gTk9URTogdGhpcyBpcyBvbmx5IHVzZWQgZm9yIHRoZSBhbHQvdmlkZW8ubm92dHQuanMgYnVpbGRcblxuICAgIGlmICh0eXBlb2Ygd2luZG93JDEuV2ViVlRUICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAodHJhY2sudGVjaF8pIHtcbiAgICAgICAgLy8gdG8gcHJldmVudCB1c2UgYmVmb3JlIGRlZmluZSBlc2xpbnQgZXJyb3IsIHdlIGRlZmluZSBsb2FkSGFuZGxlclxuICAgICAgICAvLyBhcyBhIGxldCBoZXJlXG4gICAgICAgIHRyYWNrLnRlY2hfLmFueShbJ3Z0dGpzbG9hZGVkJywgJ3Z0dGpzZXJyb3InXSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd2dHRqc2Vycm9yJykge1xuICAgICAgICAgICAgbG9nLmVycm9yKFwidnR0anMgZmFpbGVkIHRvIGxvYWQsIHN0b3BwaW5nIHRyeWluZyB0byBwcm9jZXNzIFwiICsgdHJhY2suc3JjKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcGFyc2VDdWVzKHJlc3BvbnNlQm9keSwgdHJhY2spO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VDdWVzKHJlc3BvbnNlQm9keSwgdHJhY2spO1xuICAgIH1cbiAgfSkpO1xufTtcbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBgVGV4dFRyYWNrYC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjdGV4dHRyYWNrfVxuICogQGV4dGVuZHMgVHJhY2tcbiAqL1xuXG5cbnZhciBUZXh0VHJhY2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UcmFjaykge1xuICBfaW5oZXJpdHNMb29zZShUZXh0VHJhY2ssIF9UcmFjayk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucz17fVxuICAgKiAgICAgICAgT2JqZWN0IG9mIG9wdGlvbiBuYW1lcyBhbmQgdmFsdWVzXG4gICAqXG4gICAqIEBwYXJhbSB7VGVjaH0gb3B0aW9ucy50ZWNoXG4gICAqICAgICAgICBBIHJlZmVyZW5jZSB0byB0aGUgdGVjaCB0aGF0IG93bnMgdGhpcyBUZXh0VHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7VGV4dFRyYWNrfktpbmR9IFtvcHRpb25zLmtpbmQ9J3N1YnRpdGxlcyddXG4gICAqICAgICAgICBBIHZhbGlkIHRleHQgdHJhY2sga2luZC5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t+TW9kZX0gW29wdGlvbnMubW9kZT0nZGlzYWJsZWQnXVxuICAgKiAgICAgICAgQSB2YWxpZCB0ZXh0IHRyYWNrIG1vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZD0ndmpzX3RyYWNrXycgKyBHdWlkLm5ld0dVSUQoKV1cbiAgICogICAgICAgIEEgdW5pcXVlIGlkIGZvciB0aGlzIFRleHRUcmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxhYmVsPScnXVxuICAgKiAgICAgICAgVGhlIG1lbnUgbGFiZWwgZm9yIHRoaXMgdHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYW5ndWFnZT0nJ11cbiAgICogICAgICAgIEEgdmFsaWQgdHdvIGNoYXJhY3RlciBsYW5ndWFnZSBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc3JjbGFuZz0nJ11cbiAgICogICAgICAgIEEgdmFsaWQgdHdvIGNoYXJhY3RlciBsYW5ndWFnZSBjb2RlLiBBbiBhbHRlcm5hdGl2ZSwgYnV0IGRlcHJpb3JpdGl6ZWRcbiAgICogICAgICAgIHZlcnNpb24gb2YgYG9wdGlvbnMubGFuZ3VhZ2VgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zcmNdXG4gICAqICAgICAgICBBIHVybCB0byBUZXh0VHJhY2sgY3Vlcy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZhdWx0XVxuICAgKiAgICAgICAgSWYgdGhpcyB0cmFjayBzaG91bGQgZGVmYXVsdCB0byBvbiBvciBvZmYuXG4gICAqL1xuICBmdW5jdGlvbiBUZXh0VHJhY2sob3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMudGVjaCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIHRlY2ggd2FzIG5vdCBwcm92aWRlZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgc2V0dGluZ3MgPSBtZXJnZU9wdGlvbnMob3B0aW9ucywge1xuICAgICAga2luZDogVGV4dFRyYWNrS2luZFtvcHRpb25zLmtpbmRdIHx8ICdzdWJ0aXRsZXMnLFxuICAgICAgbGFuZ3VhZ2U6IG9wdGlvbnMubGFuZ3VhZ2UgfHwgb3B0aW9ucy5zcmNsYW5nIHx8ICcnXG4gICAgfSk7XG4gICAgdmFyIG1vZGUgPSBUZXh0VHJhY2tNb2RlW3NldHRpbmdzLm1vZGVdIHx8ICdkaXNhYmxlZCc7XG4gICAgdmFyIGRlZmF1bHRfID0gc2V0dGluZ3NbXCJkZWZhdWx0XCJdO1xuXG4gICAgaWYgKHNldHRpbmdzLmtpbmQgPT09ICdtZXRhZGF0YScgfHwgc2V0dGluZ3Mua2luZCA9PT0gJ2NoYXB0ZXJzJykge1xuICAgICAgbW9kZSA9ICdoaWRkZW4nO1xuICAgIH1cblxuICAgIF90aGlzID0gX1RyYWNrLmNhbGwodGhpcywgc2V0dGluZ3MpIHx8IHRoaXM7XG4gICAgX3RoaXMudGVjaF8gPSBzZXR0aW5ncy50ZWNoO1xuICAgIF90aGlzLmN1ZXNfID0gW107XG4gICAgX3RoaXMuYWN0aXZlQ3Vlc18gPSBbXTtcbiAgICBfdGhpcy5wcmVsb2FkXyA9IF90aGlzLnRlY2hfLnByZWxvYWRUZXh0VHJhY2tzICE9PSBmYWxzZTtcbiAgICB2YXIgY3VlcyA9IG5ldyBUZXh0VHJhY2tDdWVMaXN0KF90aGlzLmN1ZXNfKTtcbiAgICB2YXIgYWN0aXZlQ3VlcyA9IG5ldyBUZXh0VHJhY2tDdWVMaXN0KF90aGlzLmFjdGl2ZUN1ZXNfKTtcbiAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciB0aW1ldXBkYXRlSGFuZGxlciA9IGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEFjY2Vzc2luZyB0aGlzLmFjdGl2ZUN1ZXMgZm9yIHRoZSBzaWRlLWVmZmVjdHMgb2YgdXBkYXRpbmcgaXRzZWxmXG4gICAgICAvLyBkdWUgdG8gaXRzIG5hdHVyZSBhcyBhIGdldHRlciBmdW5jdGlvbi4gRG8gbm90IHJlbW92ZSBvciBjdWVzIHdpbGxcbiAgICAgIC8vIHN0b3AgdXBkYXRpbmchXG4gICAgICAvLyBVc2UgdGhlIHNldHRlciB0byBwcmV2ZW50IGRlbGV0aW9uIGZyb20gdWdsaWZ5IChwdXJlX2dldHRlcnMgcnVsZSlcbiAgICAgIHRoaXMuYWN0aXZlQ3VlcyA9IHRoaXMuYWN0aXZlQ3VlcztcblxuICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdjdWVjaGFuZ2UnKTtcbiAgICAgICAgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKG1vZGUgIT09ICdkaXNhYmxlZCcpIHtcbiAgICAgIF90aGlzLnRlY2hfLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMudGVjaF8ub24oJ3RpbWV1cGRhdGUnLCB0aW1ldXBkYXRlSGFuZGxlcik7XG4gICAgICB9LCB0cnVlKTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwge1xuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgVGV4dFRyYWNrXG4gICAgICAgKiBAbWVtYmVyIHtib29sZWFufSBkZWZhdWx0XG4gICAgICAgKiAgICAgICAgIElmIHRoaXMgdHJhY2sgd2FzIHNldCB0byBiZSBvbiBvciBvZmYgYnkgZGVmYXVsdC4gQ2Fubm90IGJlIGNoYW5nZWQgYWZ0ZXJcbiAgICAgICAqICAgICAgICAgY3JlYXRpb24uXG4gICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAqXG4gICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAqL1xuICAgICAgXCJkZWZhdWx0XCI6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRfO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCgpIHt9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBUZXh0VHJhY2tcbiAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbW9kZVxuICAgICAgICogICAgICAgICBTZXQgdGhlIG1vZGUgb2YgdGhpcyBUZXh0VHJhY2sgdG8gYSB2YWxpZCB7QGxpbmsgVGV4dFRyYWNrfk1vZGV9LiBXaWxsXG4gICAgICAgKiAgICAgICAgIG5vdCBiZSBzZXQgaWYgc2V0dGluZyB0byBhbiBpbnZhbGlkIG1vZGUuXG4gICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAqXG4gICAgICAgKiBAZmlyZXMgVGV4dFRyYWNrI21vZGVjaGFuZ2VcbiAgICAgICAqL1xuICAgICAgbW9kZToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gbW9kZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3TW9kZSkge1xuICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgaWYgKCFUZXh0VHJhY2tNb2RlW25ld01vZGVdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbW9kZSA9IG5ld01vZGU7XG5cbiAgICAgICAgICBpZiAoIXRoaXMucHJlbG9hZF8gJiYgbW9kZSAhPT0gJ2Rpc2FibGVkJyAmJiB0aGlzLmN1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBPbi1kZW1hbmQgbG9hZC5cbiAgICAgICAgICAgIGxvYWRUcmFjayh0aGlzLnNyYywgdGhpcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG1vZGUgIT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgICAgIHRoaXMudGVjaF8ucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczIudGVjaF8ub24oJ3RpbWV1cGRhdGUnLCB0aW1ldXBkYXRlSGFuZGxlcik7XG4gICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50ZWNoXy5vZmYoJ3RpbWV1cGRhdGUnLCB0aW1ldXBkYXRlSGFuZGxlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEFuIGV2ZW50IHRoYXQgZmlyZXMgd2hlbiBtb2RlIGNoYW5nZXMgb24gdGhpcyB0cmFjay4gVGhpcyBhbGxvd3NcbiAgICAgICAgICAgKiB0aGUgVGV4dFRyYWNrTGlzdCB0aGF0IGhvbGRzIHRoaXMgdHJhY2sgdG8gYWN0IGFjY29yZGluZ2x5LlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogPiBOb3RlOiBUaGlzIGlzIG5vdCBwYXJ0IG9mIHRoZSBzcGVjIVxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGV2ZW50IFRleHRUcmFjayNtb2RlY2hhbmdlXG4gICAgICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICAgICAqL1xuXG5cbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ21vZGVjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgVGV4dFRyYWNrXG4gICAgICAgKiBAbWVtYmVyIHtUZXh0VHJhY2tDdWVMaXN0fSBjdWVzXG4gICAgICAgKiAgICAgICAgIFRoZSB0ZXh0IHRyYWNrIGN1ZSBsaXN0IGZvciB0aGlzIFRleHRUcmFjay5cbiAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICovXG4gICAgICBjdWVzOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGlmICghdGhpcy5sb2FkZWRfKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY3VlcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoKSB7fVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgVGV4dFRyYWNrXG4gICAgICAgKiBAbWVtYmVyIHtUZXh0VHJhY2tDdWVMaXN0fSBhY3RpdmVDdWVzXG4gICAgICAgKiAgICAgICAgIFRoZSBsaXN0IHRleHQgdHJhY2sgY3VlcyB0aGF0IGFyZSBjdXJyZW50bHkgYWN0aXZlIGZvciB0aGlzIFRleHRUcmFjay5cbiAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICovXG4gICAgICBhY3RpdmVDdWVzOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGlmICghdGhpcy5sb2FkZWRfKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9IC8vIG5vdGhpbmcgdG8gZG9cblxuXG4gICAgICAgICAgaWYgKHRoaXMuY3Vlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBhY3RpdmVDdWVzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjdCA9IHRoaXMudGVjaF8uY3VycmVudFRpbWUoKTtcbiAgICAgICAgICB2YXIgYWN0aXZlID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuY3Vlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjdWUgPSB0aGlzLmN1ZXNbaV07XG5cbiAgICAgICAgICAgIGlmIChjdWUuc3RhcnRUaW1lIDw9IGN0ICYmIGN1ZS5lbmRUaW1lID49IGN0KSB7XG4gICAgICAgICAgICAgIGFjdGl2ZS5wdXNoKGN1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1ZS5zdGFydFRpbWUgPT09IGN1ZS5lbmRUaW1lICYmIGN1ZS5zdGFydFRpbWUgPD0gY3QgJiYgY3VlLnN0YXJ0VGltZSArIDAuNSA+PSBjdCkge1xuICAgICAgICAgICAgICBhY3RpdmUucHVzaChjdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChhY3RpdmUubGVuZ3RoICE9PSB0aGlzLmFjdGl2ZUN1ZXNfLmxlbmd0aCkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhY3RpdmUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUN1ZXNfLmluZGV4T2YoYWN0aXZlW19pXSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmFjdGl2ZUN1ZXNfID0gYWN0aXZlO1xuICAgICAgICAgIGFjdGl2ZUN1ZXMuc2V0Q3Vlc18odGhpcy5hY3RpdmVDdWVzXyk7XG4gICAgICAgICAgcmV0dXJuIGFjdGl2ZUN1ZXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIC8hXFwgS2VlcCB0aGlzIHNldHRlciBlbXB0eSAoc2VlIHRoZSB0aW1ldXBkYXRlIGhhbmRsZXIgYWJvdmUpXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge31cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChzZXR0aW5ncy5zcmMpIHtcbiAgICAgIF90aGlzLnNyYyA9IHNldHRpbmdzLnNyYztcblxuICAgICAgaWYgKCFfdGhpcy5wcmVsb2FkXykge1xuICAgICAgICAvLyBUcmFja3Mgd2lsbCBsb2FkIG9uLWRlbWFuZC5cbiAgICAgICAgLy8gQWN0IGxpa2Ugd2UncmUgbG9hZGVkIGZvciBvdGhlciBwdXJwb3Nlcy5cbiAgICAgICAgX3RoaXMubG9hZGVkXyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcmVsb2FkXyB8fCBkZWZhdWx0XyB8fCBzZXR0aW5ncy5raW5kICE9PSAnc3VidGl0bGVzJyAmJiBzZXR0aW5ncy5raW5kICE9PSAnY2FwdGlvbnMnKSB7XG4gICAgICAgIGxvYWRUcmFjayhfdGhpcy5zcmMsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMubG9hZGVkXyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBjdWUgdG8gdGhlIGludGVybmFsIGxpc3Qgb2YgY3Vlcy5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t+Q3VlfSBjdWVcbiAgICogICAgICAgIFRoZSBjdWUgdG8gYWRkIHRvIG91ciBpbnRlcm5hbCBsaXN0XG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFRleHRUcmFjay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZEN1ZSA9IGZ1bmN0aW9uIGFkZEN1ZShvcmlnaW5hbEN1ZSkge1xuICAgIHZhciBjdWUgPSBvcmlnaW5hbEN1ZTtcblxuICAgIGlmICh3aW5kb3ckMS52dHRqcyAmJiAhKG9yaWdpbmFsQ3VlIGluc3RhbmNlb2Ygd2luZG93JDEudnR0anMuVlRUQ3VlKSkge1xuICAgICAgY3VlID0gbmV3IHdpbmRvdyQxLnZ0dGpzLlZUVEN1ZShvcmlnaW5hbEN1ZS5zdGFydFRpbWUsIG9yaWdpbmFsQ3VlLmVuZFRpbWUsIG9yaWdpbmFsQ3VlLnRleHQpO1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIG9yaWdpbmFsQ3VlKSB7XG4gICAgICAgIGlmICghKHByb3AgaW4gY3VlKSkge1xuICAgICAgICAgIGN1ZVtwcm9wXSA9IG9yaWdpbmFsQ3VlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9IC8vIG1ha2Ugc3VyZSB0aGF0IGBpZGAgaXMgY29waWVkIG92ZXJcblxuXG4gICAgICBjdWUuaWQgPSBvcmlnaW5hbEN1ZS5pZDtcbiAgICAgIGN1ZS5vcmlnaW5hbEN1ZV8gPSBvcmlnaW5hbEN1ZTtcbiAgICB9XG5cbiAgICB2YXIgdHJhY2tzID0gdGhpcy50ZWNoXy50ZXh0VHJhY2tzKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyYWNrc1tpXSAhPT0gdGhpcykge1xuICAgICAgICB0cmFja3NbaV0ucmVtb3ZlQ3VlKGN1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jdWVzXy5wdXNoKGN1ZSk7XG4gICAgdGhpcy5jdWVzLnNldEN1ZXNfKHRoaXMuY3Vlc18pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBjdWUgZnJvbSBvdXIgaW50ZXJuYWwgbGlzdFxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja35DdWV9IHJlbW92ZUN1ZVxuICAgKiAgICAgICAgVGhlIGN1ZSB0byByZW1vdmUgZnJvbSBvdXIgaW50ZXJuYWwgbGlzdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVDdWUgPSBmdW5jdGlvbiByZW1vdmVDdWUoX3JlbW92ZUN1ZSkge1xuICAgIHZhciBpID0gdGhpcy5jdWVzXy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YXIgY3VlID0gdGhpcy5jdWVzX1tpXTtcblxuICAgICAgaWYgKGN1ZSA9PT0gX3JlbW92ZUN1ZSB8fCBjdWUub3JpZ2luYWxDdWVfICYmIGN1ZS5vcmlnaW5hbEN1ZV8gPT09IF9yZW1vdmVDdWUpIHtcbiAgICAgICAgdGhpcy5jdWVzXy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHRoaXMuY3Vlcy5zZXRDdWVzXyh0aGlzLmN1ZXNfKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUZXh0VHJhY2s7XG59KFRyYWNrKTtcbi8qKlxuICogY3VlY2hhbmdlIC0gT25lIG9yIG1vcmUgY3VlcyBpbiB0aGUgdHJhY2sgaGF2ZSBiZWNvbWUgYWN0aXZlIG9yIHN0b3BwZWQgYmVpbmcgYWN0aXZlLlxuICovXG5cblxuVGV4dFRyYWNrLnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXyA9IHtcbiAgY3VlY2hhbmdlOiAnY3VlY2hhbmdlJ1xufTtcblxuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGBBdWRpb1RyYWNrYC4gSWYgaXQgaXMgcGFydCBvZiBhbiB7QGxpbmsgQXVkaW9UcmFja0xpc3R9XG4gKiBvbmx5IG9uZSBgQXVkaW9UcmFja2AgaW4gdGhlIGxpc3Qgd2lsbCBiZSBlbmFibGVkIGF0IGEgdGltZS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjYXVkaW90cmFja31cbiAqIEBleHRlbmRzIFRyYWNrXG4gKi9cblxudmFyIEF1ZGlvVHJhY2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UcmFjaykge1xuICBfaW5oZXJpdHNMb29zZShBdWRpb1RyYWNrLCBfVHJhY2spO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICAgKiAgICAgICAgT2JqZWN0IG9mIG9wdGlvbiBuYW1lcyBhbmQgdmFsdWVzXG4gICAqXG4gICAqIEBwYXJhbSB7QXVkaW9UcmFja35LaW5kfSBbb3B0aW9ucy5raW5kPScnXVxuICAgKiAgICAgICAgQSB2YWxpZCBhdWRpbyB0cmFjayBraW5kXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZD0ndmpzX3RyYWNrXycgKyBHdWlkLm5ld0dVSUQoKV1cbiAgICogICAgICAgIEEgdW5pcXVlIGlkIGZvciB0aGlzIEF1ZGlvVHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYWJlbD0nJ11cbiAgICogICAgICAgIFRoZSBtZW51IGxhYmVsIGZvciB0aGlzIHRyYWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFuZ3VhZ2U9JyddXG4gICAqICAgICAgICBBIHZhbGlkIHR3byBjaGFyYWN0ZXIgbGFuZ3VhZ2UgY29kZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5lbmFibGVkXVxuICAgKiAgICAgICAgSWYgdGhpcyB0cmFjayBpcyB0aGUgb25lIHRoYXQgaXMgY3VycmVudGx5IHBsYXlpbmcuIElmIHRoaXMgdHJhY2sgaXMgcGFydCBvZlxuICAgKiAgICAgICAgYW4ge0BsaW5rIEF1ZGlvVHJhY2tMaXN0fSwgb25seSBvbmUge0BsaW5rIEF1ZGlvVHJhY2t9IHdpbGwgYmUgZW5hYmxlZC5cbiAgICovXG4gIGZ1bmN0aW9uIEF1ZGlvVHJhY2sob3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgc2V0dGluZ3MgPSBtZXJnZU9wdGlvbnMob3B0aW9ucywge1xuICAgICAga2luZDogQXVkaW9UcmFja0tpbmRbb3B0aW9ucy5raW5kXSB8fCAnJ1xuICAgIH0pO1xuICAgIF90aGlzID0gX1RyYWNrLmNhbGwodGhpcywgc2V0dGluZ3MpIHx8IHRoaXM7XG4gICAgdmFyIGVuYWJsZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQXVkaW9UcmFja1xuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IGVuYWJsZWRcbiAgICAgKiAgICAgICAgIElmIHRoaXMgYEF1ZGlvVHJhY2tgIGlzIGVuYWJsZWQgb3Igbm90LiBXaGVuIHNldHRpbmcgdGhpcyB3aWxsXG4gICAgICogICAgICAgICBmaXJlIHtAbGluayBBdWRpb1RyYWNrI2VuYWJsZWRjaGFuZ2V9IGlmIHRoZSBzdGF0ZSBvZiBlbmFibGVkIGlzIGNoYW5nZWQuXG4gICAgICogQGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAZmlyZXMgVmlkZW9UcmFjayNzZWxlY3RlZGNoYW5nZVxuICAgICAqL1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAnZW5hYmxlZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gZW5hYmxlZDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdFbmFibGVkKSB7XG4gICAgICAgIC8vIGFuIGludmFsaWQgb3IgdW5jaGFuZ2VkIHZhbHVlXG4gICAgICAgIGlmICh0eXBlb2YgbmV3RW5hYmxlZCAhPT0gJ2Jvb2xlYW4nIHx8IG5ld0VuYWJsZWQgPT09IGVuYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlbmFibGVkID0gbmV3RW5hYmxlZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IHRoYXQgZmlyZXMgd2hlbiBlbmFibGVkIGNoYW5nZXMgb24gdGhpcyB0cmFjay4gVGhpcyBhbGxvd3NcbiAgICAgICAgICogdGhlIEF1ZGlvVHJhY2tMaXN0IHRoYXQgaG9sZHMgdGhpcyB0cmFjayB0byBhY3QgYWNjb3JkaW5nbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqID4gTm90ZTogVGhpcyBpcyBub3QgcGFydCBvZiB0aGUgc3BlYyEgTmF0aXZlIHRyYWNrcyB3aWxsIGRvXG4gICAgICAgICAqICAgICAgICAgdGhpcyBpbnRlcm5hbGx5IHdpdGhvdXQgYW4gZXZlbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBBdWRpb1RyYWNrI2VuYWJsZWRjaGFuZ2VcbiAgICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICAgKi9cblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ2VuYWJsZWRjaGFuZ2UnKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gaWYgdGhlIHVzZXIgc2V0cyB0aGlzIHRyYWNrIHRvIHNlbGVjdGVkIHRoZW5cbiAgICAvLyBzZXQgc2VsZWN0ZWQgdG8gdGhhdCB0cnVlIHZhbHVlIG90aGVyd2lzZVxuICAgIC8vIHdlIGtlZXAgaXQgZmFsc2VcblxuICAgIGlmIChzZXR0aW5ncy5lbmFibGVkKSB7XG4gICAgICBfdGhpcy5lbmFibGVkID0gc2V0dGluZ3MuZW5hYmxlZDtcbiAgICB9XG5cbiAgICBfdGhpcy5sb2FkZWRfID0gdHJ1ZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gQXVkaW9UcmFjaztcbn0oVHJhY2spO1xuXG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgYFZpZGVvVHJhY2tgLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN2aWRlb3RyYWNrfVxuICogQGV4dGVuZHMgVHJhY2tcbiAqL1xuXG52YXIgVmlkZW9UcmFjayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RyYWNrKSB7XG4gIF9pbmhlcml0c0xvb3NlKFZpZGVvVHJhY2ssIF9UcmFjayk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gICAqICAgICAgICBPYmplY3Qgb2Ygb3B0aW9uIG5hbWVzIGFuZCB2YWx1ZXNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmtpbmQ9JyddXG4gICAqICAgICAgICBBIHZhbGlkIHtAbGluayBWaWRlb1RyYWNrfktpbmR9XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZD0ndmpzX3RyYWNrXycgKyBHdWlkLm5ld0dVSUQoKV1cbiAgICogICAgICAgIEEgdW5pcXVlIGlkIGZvciB0aGlzIEF1ZGlvVHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYWJlbD0nJ11cbiAgICogICAgICAgIFRoZSBtZW51IGxhYmVsIGZvciB0aGlzIHRyYWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFuZ3VhZ2U9JyddXG4gICAqICAgICAgICBBIHZhbGlkIHR3byBjaGFyYWN0ZXIgbGFuZ3VhZ2UgY29kZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zZWxlY3RlZF1cbiAgICogICAgICAgIElmIHRoaXMgdHJhY2sgaXMgdGhlIG9uZSB0aGF0IGlzIGN1cnJlbnRseSBwbGF5aW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gVmlkZW9UcmFjayhvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBzZXR0aW5ncyA9IG1lcmdlT3B0aW9ucyhvcHRpb25zLCB7XG4gICAgICBraW5kOiBWaWRlb1RyYWNrS2luZFtvcHRpb25zLmtpbmRdIHx8ICcnXG4gICAgfSk7XG4gICAgX3RoaXMgPSBfVHJhY2suY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICB2YXIgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgVmlkZW9UcmFja1xuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IHNlbGVjdGVkXG4gICAgICogICAgICAgICBJZiB0aGlzIGBWaWRlb1RyYWNrYCBpcyBzZWxlY3RlZCBvciBub3QuIFdoZW4gc2V0dGluZyB0aGlzIHdpbGxcbiAgICAgKiAgICAgICAgIGZpcmUge0BsaW5rIFZpZGVvVHJhY2sjc2VsZWN0ZWRjaGFuZ2V9IGlmIHRoZSBzdGF0ZSBvZiBzZWxlY3RlZCBjaGFuZ2VkLlxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqXG4gICAgICogQGZpcmVzIFZpZGVvVHJhY2sjc2VsZWN0ZWRjaGFuZ2VcbiAgICAgKi9cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ3NlbGVjdGVkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdTZWxlY3RlZCkge1xuICAgICAgICAvLyBhbiBpbnZhbGlkIG9yIHVuY2hhbmdlZCB2YWx1ZVxuICAgICAgICBpZiAodHlwZW9mIG5ld1NlbGVjdGVkICE9PSAnYm9vbGVhbicgfHwgbmV3U2VsZWN0ZWQgPT09IHNlbGVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0ZWQgPSBuZXdTZWxlY3RlZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGV2ZW50IHRoYXQgZmlyZXMgd2hlbiBzZWxlY3RlZCBjaGFuZ2VzIG9uIHRoaXMgdHJhY2suIFRoaXMgYWxsb3dzXG4gICAgICAgICAqIHRoZSBWaWRlb1RyYWNrTGlzdCB0aGF0IGhvbGRzIHRoaXMgdHJhY2sgdG8gYWN0IGFjY29yZGluZ2x5LlxuICAgICAgICAgKlxuICAgICAgICAgKiA+IE5vdGU6IFRoaXMgaXMgbm90IHBhcnQgb2YgdGhlIHNwZWMhIE5hdGl2ZSB0cmFja3Mgd2lsbCBkb1xuICAgICAgICAgKiAgICAgICAgIHRoaXMgaW50ZXJuYWxseSB3aXRob3V0IGFuIGV2ZW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgVmlkZW9UcmFjayNzZWxlY3RlZGNoYW5nZVxuICAgICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgICAqL1xuXG4gICAgICAgIHRoaXMudHJpZ2dlcignc2VsZWN0ZWRjaGFuZ2UnKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gaWYgdGhlIHVzZXIgc2V0cyB0aGlzIHRyYWNrIHRvIHNlbGVjdGVkIHRoZW5cbiAgICAvLyBzZXQgc2VsZWN0ZWQgdG8gdGhhdCB0cnVlIHZhbHVlIG90aGVyd2lzZVxuICAgIC8vIHdlIGtlZXAgaXQgZmFsc2VcblxuICAgIGlmIChzZXR0aW5ncy5zZWxlY3RlZCkge1xuICAgICAgX3RoaXMuc2VsZWN0ZWQgPSBzZXR0aW5ncy5zZWxlY3RlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gVmlkZW9UcmFjaztcbn0oVHJhY2spO1xuXG4vKipcbiAqIEBtZW1iZXJvZiBIVE1MVHJhY2tFbGVtZW50XG4gKiBAdHlwZWRlZiB7SFRNTFRyYWNrRWxlbWVudH5SZWFkeVN0YXRlfVxuICogQGVudW0ge251bWJlcn1cbiAqL1xuXG52YXIgTk9ORSA9IDA7XG52YXIgTE9BRElORyA9IDE7XG52YXIgTE9BREVEID0gMjtcbnZhciBFUlJPUiA9IDM7XG4vKipcbiAqIEEgc2luZ2xlIHRyYWNrIHJlcHJlc2VudGVkIGluIHRoZSBET00uXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2h0bWx0cmFja2VsZW1lbnR9XG4gKiBAZXh0ZW5kcyBFdmVudFRhcmdldFxuICovXG5cbnZhciBIVE1MVHJhY2tFbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXZlbnRUYXJnZXQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSFRNTFRyYWNrRWxlbWVudCwgX0V2ZW50VGFyZ2V0KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zPXt9XG4gICAqICAgICAgICBPYmplY3Qgb2Ygb3B0aW9uIG5hbWVzIGFuZCB2YWx1ZXNcbiAgICpcbiAgICogQHBhcmFtIHtUZWNofSBvcHRpb25zLnRlY2hcbiAgICogICAgICAgIEEgcmVmZXJlbmNlIHRvIHRoZSB0ZWNoIHRoYXQgb3ducyB0aGlzIEhUTUxUcmFja0VsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7VGV4dFRyYWNrfktpbmR9IFtvcHRpb25zLmtpbmQ9J3N1YnRpdGxlcyddXG4gICAqICAgICAgICBBIHZhbGlkIHRleHQgdHJhY2sga2luZC5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t+TW9kZX0gW29wdGlvbnMubW9kZT0nZGlzYWJsZWQnXVxuICAgKiAgICAgICAgQSB2YWxpZCB0ZXh0IHRyYWNrIG1vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZD0ndmpzX3RyYWNrXycgKyBHdWlkLm5ld0dVSUQoKV1cbiAgICogICAgICAgIEEgdW5pcXVlIGlkIGZvciB0aGlzIFRleHRUcmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxhYmVsPScnXVxuICAgKiAgICAgICAgVGhlIG1lbnUgbGFiZWwgZm9yIHRoaXMgdHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYW5ndWFnZT0nJ11cbiAgICogICAgICAgIEEgdmFsaWQgdHdvIGNoYXJhY3RlciBsYW5ndWFnZSBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc3JjbGFuZz0nJ11cbiAgICogICAgICAgIEEgdmFsaWQgdHdvIGNoYXJhY3RlciBsYW5ndWFnZSBjb2RlLiBBbiBhbHRlcm5hdGl2ZSwgYnV0IGRlcHJpb3JpdGl6ZWRcbiAgICogICAgICAgIHZlc2lvbiBvZiBgb3B0aW9ucy5sYW5ndWFnZWBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNyY11cbiAgICogICAgICAgIEEgdXJsIHRvIFRleHRUcmFjayBjdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRlZmF1bHRdXG4gICAqICAgICAgICBJZiB0aGlzIHRyYWNrIHNob3VsZCBkZWZhdWx0IHRvIG9uIG9yIG9mZi5cbiAgICovXG4gIGZ1bmN0aW9uIEhUTUxUcmFja0VsZW1lbnQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9FdmVudFRhcmdldC5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgdmFyIHJlYWR5U3RhdGU7XG4gICAgdmFyIHRyYWNrID0gbmV3IFRleHRUcmFjayhvcHRpb25zKTtcbiAgICBfdGhpcy5raW5kID0gdHJhY2sua2luZDtcbiAgICBfdGhpcy5zcmMgPSB0cmFjay5zcmM7XG4gICAgX3RoaXMuc3JjbGFuZyA9IHRyYWNrLmxhbmd1YWdlO1xuICAgIF90aGlzLmxhYmVsID0gdHJhY2subGFiZWw7XG4gICAgX3RoaXNbXCJkZWZhdWx0XCJdID0gdHJhY2tbXCJkZWZhdWx0XCJdO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB7XG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBIVE1MVHJhY2tFbGVtZW50XG4gICAgICAgKiBAbWVtYmVyIHtIVE1MVHJhY2tFbGVtZW50flJlYWR5U3RhdGV9IHJlYWR5U3RhdGVcbiAgICAgICAqICAgICAgICAgVGhlIGN1cnJlbnQgcmVhZHkgc3RhdGUgb2YgdGhlIHRyYWNrIGVsZW1lbnQuXG4gICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAqL1xuICAgICAgcmVhZHlTdGF0ZToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gcmVhZHlTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgSFRNTFRyYWNrRWxlbWVudFxuICAgICAgICogQG1lbWJlciB7VGV4dFRyYWNrfSB0cmFja1xuICAgICAgICogICAgICAgICBUaGUgdW5kZXJseWluZyBUZXh0VHJhY2sgb2JqZWN0LlxuICAgICAgICogQGluc3RhbmNlXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICB0cmFjazoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdHJhY2s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZWFkeVN0YXRlID0gTk9ORTtcbiAgICAvKipcbiAgICAgKiBAbGlzdGVucyBUZXh0VHJhY2sjbG9hZGVkZGF0YVxuICAgICAqIEBmaXJlcyBIVE1MVHJhY2tFbGVtZW50I2xvYWRcbiAgICAgKi9cblxuICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZGRhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZWFkeVN0YXRlID0gTE9BREVEO1xuXG4gICAgICBfdGhpcy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ2xvYWQnLFxuICAgICAgICB0YXJnZXQ6IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gSFRNTFRyYWNrRWxlbWVudDtcbn0oRXZlbnRUYXJnZXQpO1xuXG5IVE1MVHJhY2tFbGVtZW50LnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXyA9IHtcbiAgbG9hZDogJ2xvYWQnXG59O1xuSFRNTFRyYWNrRWxlbWVudC5OT05FID0gTk9ORTtcbkhUTUxUcmFja0VsZW1lbnQuTE9BRElORyA9IExPQURJTkc7XG5IVE1MVHJhY2tFbGVtZW50LkxPQURFRCA9IExPQURFRDtcbkhUTUxUcmFja0VsZW1lbnQuRVJST1IgPSBFUlJPUjtcblxuLypcbiAqIFRoaXMgZmlsZSBjb250YWlucyBhbGwgdHJhY2sgcHJvcGVydGllcyB0aGF0IGFyZSB1c2VkIGluXG4gKiBwbGF5ZXIuanMsIHRlY2guanMsIGh0bWw1LmpzIGFuZCBwb3NzaWJseSBvdGhlciB0ZWNocyBpbiB0aGUgZnV0dXJlLlxuICovXG5cbnZhciBOT1JNQUwgPSB7XG4gIGF1ZGlvOiB7XG4gICAgTGlzdENsYXNzOiBBdWRpb1RyYWNrTGlzdCxcbiAgICBUcmFja0NsYXNzOiBBdWRpb1RyYWNrLFxuICAgIGNhcGl0YWxOYW1lOiAnQXVkaW8nXG4gIH0sXG4gIHZpZGVvOiB7XG4gICAgTGlzdENsYXNzOiBWaWRlb1RyYWNrTGlzdCxcbiAgICBUcmFja0NsYXNzOiBWaWRlb1RyYWNrLFxuICAgIGNhcGl0YWxOYW1lOiAnVmlkZW8nXG4gIH0sXG4gIHRleHQ6IHtcbiAgICBMaXN0Q2xhc3M6IFRleHRUcmFja0xpc3QsXG4gICAgVHJhY2tDbGFzczogVGV4dFRyYWNrLFxuICAgIGNhcGl0YWxOYW1lOiAnVGV4dCdcbiAgfVxufTtcbk9iamVjdC5rZXlzKE5PUk1BTCkuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBOT1JNQUxbdHlwZV0uZ2V0dGVyTmFtZSA9IHR5cGUgKyBcIlRyYWNrc1wiO1xuICBOT1JNQUxbdHlwZV0ucHJpdmF0ZU5hbWUgPSB0eXBlICsgXCJUcmFja3NfXCI7XG59KTtcbnZhciBSRU1PVEUgPSB7XG4gIHJlbW90ZVRleHQ6IHtcbiAgICBMaXN0Q2xhc3M6IFRleHRUcmFja0xpc3QsXG4gICAgVHJhY2tDbGFzczogVGV4dFRyYWNrLFxuICAgIGNhcGl0YWxOYW1lOiAnUmVtb3RlVGV4dCcsXG4gICAgZ2V0dGVyTmFtZTogJ3JlbW90ZVRleHRUcmFja3MnLFxuICAgIHByaXZhdGVOYW1lOiAncmVtb3RlVGV4dFRyYWNrc18nXG4gIH0sXG4gIHJlbW90ZVRleHRFbDoge1xuICAgIExpc3RDbGFzczogSHRtbFRyYWNrRWxlbWVudExpc3QsXG4gICAgVHJhY2tDbGFzczogSFRNTFRyYWNrRWxlbWVudCxcbiAgICBjYXBpdGFsTmFtZTogJ1JlbW90ZVRleHRUcmFja0VscycsXG4gICAgZ2V0dGVyTmFtZTogJ3JlbW90ZVRleHRUcmFja0VscycsXG4gICAgcHJpdmF0ZU5hbWU6ICdyZW1vdGVUZXh0VHJhY2tFbHNfJ1xuICB9XG59O1xuXG52YXIgQUxMID0gX2V4dGVuZHMoe30sIE5PUk1BTCwgUkVNT1RFKTtcblxuUkVNT1RFLm5hbWVzID0gT2JqZWN0LmtleXMoUkVNT1RFKTtcbk5PUk1BTC5uYW1lcyA9IE9iamVjdC5rZXlzKE5PUk1BTCk7XG5BTEwubmFtZXMgPSBbXS5jb25jYXQoUkVNT1RFLm5hbWVzKS5jb25jYXQoTk9STUFMLm5hbWVzKTtcblxuLyoqXG4gKiBBbiBPYmplY3QgY29udGFpbmluZyBhIHN0cnVjdHVyZSBsaWtlOiBge3NyYzogJ3VybCcsIHR5cGU6ICdtaW1ldHlwZSd9YCBvciBzdHJpbmdcbiAqIHRoYXQganVzdCBjb250YWlucyB0aGUgc3JjIHVybCBhbG9uZS5cbiAqICogYHZhciBTb3VyY2VPYmplY3QgPSB7c3JjOiAnaHR0cDovL2V4LmNvbS92aWRlby5tcDQnLCB0eXBlOiAndmlkZW8vbXA0J307YFxuICAgKiBgdmFyIFNvdXJjZVN0cmluZyA9ICdodHRwOi8vZXhhbXBsZS5jb20vc29tZS12aWRlby5tcDQnO2BcbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fHN0cmluZ30gVGVjaH5Tb3VyY2VPYmplY3RcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3JjXG4gKiAgICAgICAgICAgVGhlIHVybCB0byB0aGUgc291cmNlXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGVcbiAqICAgICAgICAgICBUaGUgbWltZSB0eXBlIG9mIHRoZSBzb3VyY2VcbiAqL1xuXG4vKipcbiAqIEEgZnVuY3Rpb24gdXNlZCBieSB7QGxpbmsgVGVjaH0gdG8gY3JlYXRlIGEgbmV3IHtAbGluayBUZXh0VHJhY2t9LlxuICpcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtUZWNofSBzZWxmXG4gKiAgICAgICAgQW4gaW5zdGFuY2Ugb2YgdGhlIFRlY2ggY2xhc3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtpbmRcbiAqICAgICAgICBgVGV4dFRyYWNrYCBraW5kIChzdWJ0aXRsZXMsIGNhcHRpb25zLCBkZXNjcmlwdGlvbnMsIGNoYXB0ZXJzLCBvciBtZXRhZGF0YSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xhYmVsXVxuICogICAgICAgIExhYmVsIHRvIGlkZW50aWZ5IHRoZSB0ZXh0IHRyYWNrXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtsYW5ndWFnZV1cbiAqICAgICAgICBUd28gbGV0dGVyIGxhbmd1YWdlIGFiYnJldmlhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV1cbiAqICAgICAgICBBbiBvYmplY3Qgd2l0aCBhZGRpdGlvbmFsIHRleHQgdHJhY2sgb3B0aW9uc1xuICpcbiAqIEByZXR1cm4ge1RleHRUcmFja31cbiAqICAgICAgICAgIFRoZSB0ZXh0IHRyYWNrIHRoYXQgd2FzIGNyZWF0ZWQuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlVHJhY2tIZWxwZXIoc2VsZiwga2luZCwgbGFiZWwsIGxhbmd1YWdlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgdHJhY2tzID0gc2VsZi50ZXh0VHJhY2tzKCk7XG4gIG9wdGlvbnMua2luZCA9IGtpbmQ7XG5cbiAgaWYgKGxhYmVsKSB7XG4gICAgb3B0aW9ucy5sYWJlbCA9IGxhYmVsO1xuICB9XG5cbiAgaWYgKGxhbmd1YWdlKSB7XG4gICAgb3B0aW9ucy5sYW5ndWFnZSA9IGxhbmd1YWdlO1xuICB9XG5cbiAgb3B0aW9ucy50ZWNoID0gc2VsZjtcbiAgdmFyIHRyYWNrID0gbmV3IEFMTC50ZXh0LlRyYWNrQ2xhc3Mob3B0aW9ucyk7XG4gIHRyYWNrcy5hZGRUcmFjayh0cmFjayk7XG4gIHJldHVybiB0cmFjaztcbn1cbi8qKlxuICogVGhpcyBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgbWVkaWEgcGxheWJhY2sgdGVjaG5vbG9neSBjb250cm9sbGVycywgc3VjaCBhc1xuICoge0BsaW5rIEZsYXNofSBhbmQge0BsaW5rIEhUTUw1fVxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cblxudmFyIFRlY2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGVjaCwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgVGVjaC5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgKlxuICAqIEBwYXJhbSB7Q29tcG9uZW50flJlYWR5Q2FsbGJhY2t9IHJlYWR5XG4gICogICAgICAgIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgYEhUTUw1YCBUZWNoIGlzIHJlYWR5LlxuICAqL1xuICBmdW5jdGlvbiBUZWNoKG9wdGlvbnMsIHJlYWR5KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChyZWFkeSA9PT0gdm9pZCAwKSB7XG4gICAgICByZWFkeSA9IGZ1bmN0aW9uIHJlYWR5KCkge307XG4gICAgfVxuXG4gICAgLy8gd2UgZG9uJ3Qgd2FudCB0aGUgdGVjaCB0byByZXBvcnQgdXNlciBhY3Rpdml0eSBhdXRvbWF0aWNhbGx5LlxuICAgIC8vIFRoaXMgaXMgZG9uZSBtYW51YWxseSBpbiBhZGRDb250cm9sc0xpc3RlbmVyc1xuICAgIG9wdGlvbnMucmVwb3J0VG91Y2hBY3Rpdml0eSA9IGZhbHNlO1xuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIG51bGwsIG9wdGlvbnMsIHJlYWR5KSB8fCB0aGlzOyAvLyBrZWVwIHRyYWNrIG9mIHdoZXRoZXIgdGhlIGN1cnJlbnQgc291cmNlIGhhcyBwbGF5ZWQgYXQgYWxsIHRvXG4gICAgLy8gaW1wbGVtZW50IGEgdmVyeSBsaW1pdGVkIHBsYXllZCgpXG5cbiAgICBfdGhpcy5oYXNTdGFydGVkXyA9IGZhbHNlO1xuXG4gICAgX3RoaXMub24oJ3BsYXlpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmhhc1N0YXJ0ZWRfID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIF90aGlzLm9uKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmhhc1N0YXJ0ZWRfID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBBTEwubmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHByb3BzID0gQUxMW25hbWVdO1xuXG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zW3Byb3BzLmdldHRlck5hbWVdKSB7XG4gICAgICAgIF90aGlzW3Byb3BzLnByaXZhdGVOYW1lXSA9IG9wdGlvbnNbcHJvcHMuZ2V0dGVyTmFtZV07XG4gICAgICB9XG4gICAgfSk7IC8vIE1hbnVhbGx5IHRyYWNrIHByb2dyZXNzIGluIGNhc2VzIHdoZXJlIHRoZSBicm93c2VyL2ZsYXNoIHBsYXllciBkb2Vzbid0IHJlcG9ydCBpdC5cblxuICAgIGlmICghX3RoaXMuZmVhdHVyZXNQcm9ncmVzc0V2ZW50cykge1xuICAgICAgX3RoaXMubWFudWFsUHJvZ3Jlc3NPbigpO1xuICAgIH0gLy8gTWFudWFsbHkgdHJhY2sgdGltZXVwZGF0ZXMgaW4gY2FzZXMgd2hlcmUgdGhlIGJyb3dzZXIvZmxhc2ggcGxheWVyIGRvZXNuJ3QgcmVwb3J0IGl0LlxuXG5cbiAgICBpZiAoIV90aGlzLmZlYXR1cmVzVGltZXVwZGF0ZUV2ZW50cykge1xuICAgICAgX3RoaXMubWFudWFsVGltZVVwZGF0ZXNPbigpO1xuICAgIH1cblxuICAgIFsnVGV4dCcsICdBdWRpbycsICdWaWRlbyddLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICBpZiAob3B0aW9uc1tcIm5hdGl2ZVwiICsgdHJhY2sgKyBcIlRyYWNrc1wiXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgX3RoaXNbXCJmZWF0dXJlc05hdGl2ZVwiICsgdHJhY2sgKyBcIlRyYWNrc1wiXSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMubmF0aXZlQ2FwdGlvbnMgPT09IGZhbHNlIHx8IG9wdGlvbnMubmF0aXZlVGV4dFRyYWNrcyA9PT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5uYXRpdmVDYXB0aW9ucyA9PT0gdHJ1ZSB8fCBvcHRpb25zLm5hdGl2ZVRleHRUcmFja3MgPT09IHRydWUpIHtcbiAgICAgIF90aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFfdGhpcy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MpIHtcbiAgICAgIF90aGlzLmVtdWxhdGVUZXh0VHJhY2tzKCk7XG4gICAgfVxuXG4gICAgX3RoaXMucHJlbG9hZFRleHRUcmFja3MgPSBvcHRpb25zLnByZWxvYWRUZXh0VHJhY2tzICE9PSBmYWxzZTtcbiAgICBfdGhpcy5hdXRvUmVtb3RlVGV4dFRyYWNrc18gPSBuZXcgQUxMLnRleHQuTGlzdENsYXNzKCk7XG5cbiAgICBfdGhpcy5pbml0VHJhY2tMaXN0ZW5lcnMoKTsgLy8gVHVybiBvbiBjb21wb25lbnQgdGFwIGV2ZW50cyBvbmx5IGlmIG5vdCB1c2luZyBuYXRpdmUgY29udHJvbHNcblxuXG4gICAgaWYgKCFvcHRpb25zLm5hdGl2ZUNvbnRyb2xzRm9yVG91Y2gpIHtcbiAgICAgIF90aGlzLmVtaXRUYXBFdmVudHMoKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgIF90aGlzLm5hbWVfID0gX3RoaXMuY29uc3RydWN0b3IubmFtZSB8fCAnVW5rbm93biBUZWNoJztcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEEgc3BlY2lhbCBmdW5jdGlvbiB0byB0cmlnZ2VyIHNvdXJjZSBzZXQgaW4gYSB3YXkgdGhhdCB3aWxsIGFsbG93IHBsYXllclxuICAgKiB0byByZS10cmlnZ2VyIGlmIHRoZSBwbGF5ZXIgb3IgdGVjaCBhcmUgbm90IHJlYWR5IHlldC5cbiAgICpcbiAgICogQGZpcmVzIFRlY2gjc291cmNlc2V0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgVGhlIHNvdXJjZSBzdHJpbmcgYXQgdGhlIHRpbWUgb2YgdGhlIHNvdXJjZSBjaGFuZ2luZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVGVjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRyaWdnZXJTb3VyY2VzZXQgPSBmdW5jdGlvbiB0cmlnZ2VyU291cmNlc2V0KHNyYykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLmlzUmVhZHlfKSB7XG4gICAgICAvLyBvbiBpbml0aWFsIHJlYWR5IHdlIGhhdmUgdG8gdHJpZ2dlciBzb3VyY2Ugc2V0XG4gICAgICAvLyAxbXMgYWZ0ZXIgcmVhZHkgc28gdGhhdCBwbGF5ZXIgY2FuIHdhdGNoIGZvciBpdC5cbiAgICAgIHRoaXMub25lKCdyZWFkeScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLnRyaWdnZXJTb3VyY2VzZXQoc3JjKTtcbiAgICAgICAgfSwgMSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB0aGUgc291cmNlIGlzIHNldCBvbiB0aGUgdGVjaCBjYXVzaW5nIHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICogdG8gcmVsb2FkLlxuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgUGxheWVyI2V2ZW50OnNvdXJjZXNldH1cbiAgICAgKiBAZXZlbnQgVGVjaCNzb3VyY2VzZXRcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cblxuICAgIHRoaXMudHJpZ2dlcih7XG4gICAgICBzcmM6IHNyYyxcbiAgICAgIHR5cGU6ICdzb3VyY2VzZXQnXG4gICAgfSk7XG4gIH1cbiAgLyogRmFsbGJhY2tzIGZvciB1bnN1cHBvcnRlZCBldmVudCB0eXBlc1xuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBQb2x5ZmlsbCB0aGUgYHByb2dyZXNzYCBldmVudCBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IGl0IG5hdGl2ZWx5LlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBUZWNoI3RyYWNrUHJvZ3Jlc3N9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm1hbnVhbFByb2dyZXNzT24gPSBmdW5jdGlvbiBtYW51YWxQcm9ncmVzc09uKCkge1xuICAgIHRoaXMub24oJ2R1cmF0aW9uY2hhbmdlJywgdGhpcy5vbkR1cmF0aW9uQ2hhbmdlKTtcbiAgICB0aGlzLm1hbnVhbFByb2dyZXNzID0gdHJ1ZTsgLy8gVHJpZ2dlciBwcm9ncmVzcyB3YXRjaGluZyB3aGVuIGEgc291cmNlIGJlZ2lucyBsb2FkaW5nXG5cbiAgICB0aGlzLm9uZSgncmVhZHknLCB0aGlzLnRyYWNrUHJvZ3Jlc3MpO1xuICB9XG4gIC8qKlxuICAgKiBUdXJuIG9mZiB0aGUgcG9seWZpbGwgZm9yIGBwcm9ncmVzc2AgZXZlbnRzIHRoYXQgd2FzIGNyZWF0ZWQgaW5cbiAgICoge0BsaW5rIFRlY2gjbWFudWFsUHJvZ3Jlc3NPbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFudWFsUHJvZ3Jlc3NPZmYgPSBmdW5jdGlvbiBtYW51YWxQcm9ncmVzc09mZigpIHtcbiAgICB0aGlzLm1hbnVhbFByb2dyZXNzID0gZmFsc2U7XG4gICAgdGhpcy5zdG9wVHJhY2tpbmdQcm9ncmVzcygpO1xuICAgIHRoaXMub2ZmKCdkdXJhdGlvbmNoYW5nZScsIHRoaXMub25EdXJhdGlvbkNoYW5nZSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgaXMgdXNlZCB0byB0cmlnZ2VyIGEgYHByb2dyZXNzYCBldmVudCB3aGVuIHRoZSBidWZmZXJlZCBwZXJjZW50IGNoYW5nZXMuIEl0XG4gICAqIHNldHMgYW4gaW50ZXJ2YWwgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBldmVyeSA1MDAgbWlsbGlzZWNvbmRzIHRvIGNoZWNrIGlmIHRoZVxuICAgKiBidWZmZXIgZW5kIHBlcmNlbnQgaGFzIGNoYW5nZWQuXG4gICAqXG4gICAqID4gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkge0BsaW5rIFRlY2gjbWFudWFsUHJvZ3Jlc3NPbn1cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBgcmVhZHlgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBUZWNoI3JlYWR5XG4gICAqIEBmaXJlcyBUZWNoI3Byb2dyZXNzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRyYWNrUHJvZ3Jlc3MgPSBmdW5jdGlvbiB0cmFja1Byb2dyZXNzKGV2ZW50KSB7XG4gICAgdGhpcy5zdG9wVHJhY2tpbmdQcm9ncmVzcygpO1xuICAgIHRoaXMucHJvZ3Jlc3NJbnRlcnZhbCA9IHRoaXMuc2V0SW50ZXJ2YWwoYmluZCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBEb24ndCB0cmlnZ2VyIHVubGVzcyBidWZmZXJlZCBhbW91bnQgaXMgZ3JlYXRlciB0aGFuIGxhc3QgdGltZVxuICAgICAgdmFyIG51bUJ1ZmZlcmVkUGVyY2VudCA9IHRoaXMuYnVmZmVyZWRQZXJjZW50KCk7XG5cbiAgICAgIGlmICh0aGlzLmJ1ZmZlcmVkUGVyY2VudF8gIT09IG51bUJ1ZmZlcmVkUGVyY2VudCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBQbGF5ZXIjcHJvZ3Jlc3N9XG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBUZWNoI3Byb2dyZXNzXG4gICAgICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHJpZ2dlcigncHJvZ3Jlc3MnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWZmZXJlZFBlcmNlbnRfID0gbnVtQnVmZmVyZWRQZXJjZW50O1xuXG4gICAgICBpZiAobnVtQnVmZmVyZWRQZXJjZW50ID09PSAxKSB7XG4gICAgICAgIHRoaXMuc3RvcFRyYWNraW5nUHJvZ3Jlc3MoKTtcbiAgICAgIH1cbiAgICB9KSwgNTAwKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIG91ciBpbnRlcm5hbCBkdXJhdGlvbiBvbiBhIGBkdXJhdGlvbmNoYW5nZWAgZXZlbnQgYnkgY2FsbGluZ1xuICAgKiB7QGxpbmsgVGVjaCNkdXJhdGlvbn0uXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGR1cmF0aW9uY2hhbmdlYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgVGVjaCNkdXJhdGlvbmNoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkR1cmF0aW9uQ2hhbmdlID0gZnVuY3Rpb24gb25EdXJhdGlvbkNoYW5nZShldmVudCkge1xuICAgIHRoaXMuZHVyYXRpb25fID0gdGhpcy5kdXJhdGlvbigpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYW5kIGNyZWF0ZSBhIGBUaW1lUmFuZ2VgIG9iamVjdCBmb3IgYnVmZmVyaW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHtUaW1lUmFuZ2V9XG4gICAqICAgICAgICAgVGhlIHRpbWUgcmFuZ2Ugb2JqZWN0IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1ZmZlcmVkID0gZnVuY3Rpb24gYnVmZmVyZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVRpbWVSYW5nZXMoMCwgMCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcGVyY2VudGFnZSBvZiB0aGUgY3VycmVudCB2aWRlbyB0aGF0IGlzIGN1cnJlbnRseSBidWZmZXJlZC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIEEgbnVtYmVyIGZyb20gMCB0byAxIHRoYXQgcmVwcmVzZW50cyB0aGUgZGVjaW1hbCBwZXJjZW50YWdlIG9mIHRoZVxuICAgKiAgICAgICAgIHZpZGVvIHRoYXQgaXMgYnVmZmVyZWQuXG4gICAqXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1ZmZlcmVkUGVyY2VudCA9IGZ1bmN0aW9uIGJ1ZmZlcmVkUGVyY2VudCQxKCkge1xuICAgIHJldHVybiBidWZmZXJlZFBlcmNlbnQodGhpcy5idWZmZXJlZCgpLCB0aGlzLmR1cmF0aW9uXyk7XG4gIH1cbiAgLyoqXG4gICAqIFR1cm4gb2ZmIHRoZSBwb2x5ZmlsbCBmb3IgYHByb2dyZXNzYCBldmVudHMgdGhhdCB3YXMgY3JlYXRlZCBpblxuICAgKiB7QGxpbmsgVGVjaCNtYW51YWxQcm9ncmVzc09ufVxuICAgKiBTdG9wIG1hbnVhbGx5IHRyYWNraW5nIHByb2dyZXNzIGV2ZW50cyBieSBjbGVhcmluZyB0aGUgaW50ZXJ2YWwgdGhhdCB3YXMgc2V0IGluXG4gICAqIHtAbGluayBUZWNoI3RyYWNrUHJvZ3Jlc3N9LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zdG9wVHJhY2tpbmdQcm9ncmVzcyA9IGZ1bmN0aW9uIHN0b3BUcmFja2luZ1Byb2dyZXNzKCkge1xuICAgIHRoaXMuY2xlYXJJbnRlcnZhbCh0aGlzLnByb2dyZXNzSW50ZXJ2YWwpO1xuICB9XG4gIC8qKlxuICAgKiBQb2x5ZmlsbCB0aGUgYHRpbWV1cGRhdGVgIGV2ZW50IGZvciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgaXQuXG4gICAqXG4gICAqIEBzZWUge0BsaW5rIFRlY2gjdHJhY2tDdXJyZW50VGltZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFudWFsVGltZVVwZGF0ZXNPbiA9IGZ1bmN0aW9uIG1hbnVhbFRpbWVVcGRhdGVzT24oKSB7XG4gICAgdGhpcy5tYW51YWxUaW1lVXBkYXRlcyA9IHRydWU7XG4gICAgdGhpcy5vbigncGxheScsIHRoaXMudHJhY2tDdXJyZW50VGltZSk7XG4gICAgdGhpcy5vbigncGF1c2UnLCB0aGlzLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKTtcbiAgfVxuICAvKipcbiAgICogVHVybiBvZmYgdGhlIHBvbHlmaWxsIGZvciBgdGltZXVwZGF0ZWAgZXZlbnRzIHRoYXQgd2FzIGNyZWF0ZWQgaW5cbiAgICoge0BsaW5rIFRlY2gjbWFudWFsVGltZVVwZGF0ZXNPbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFudWFsVGltZVVwZGF0ZXNPZmYgPSBmdW5jdGlvbiBtYW51YWxUaW1lVXBkYXRlc09mZigpIHtcbiAgICB0aGlzLm1hbnVhbFRpbWVVcGRhdGVzID0gZmFsc2U7XG4gICAgdGhpcy5zdG9wVHJhY2tpbmdDdXJyZW50VGltZSgpO1xuICAgIHRoaXMub2ZmKCdwbGF5JywgdGhpcy50cmFja0N1cnJlbnRUaW1lKTtcbiAgICB0aGlzLm9mZigncGF1c2UnLCB0aGlzLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB1cCBhbiBpbnRlcnZhbCBmdW5jdGlvbiB0byB0cmFjayBjdXJyZW50IHRpbWUgYW5kIHRyaWdnZXIgYHRpbWV1cGRhdGVgIGV2ZXJ5XG4gICAqIDI1MCBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIEBsaXN0ZW5zIFRlY2gjcGxheVxuICAgKiBAdHJpZ2dlcnMgVGVjaCN0aW1ldXBkYXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRyYWNrQ3VycmVudFRpbWUgPSBmdW5jdGlvbiB0cmFja0N1cnJlbnRUaW1lKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRUaW1lSW50ZXJ2YWwpIHtcbiAgICAgIHRoaXMuc3RvcFRyYWNraW5nQ3VycmVudFRpbWUoKTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRUaW1lSW50ZXJ2YWwgPSB0aGlzLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qKlxuICAgICAgICogVHJpZ2dlcmVkIGF0IGFuIGludGVydmFsIG9mIDI1MG1zIHRvIGluZGljYXRlZCB0aGF0IHRpbWUgaXMgcGFzc2luZyBpbiB0aGUgdmlkZW8uXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50IFRlY2gjdGltZXVwZGF0ZVxuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICovXG4gICAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndGltZXVwZGF0ZScsXG4gICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgICAgbWFudWFsbHlUcmlnZ2VyZWQ6IHRydWVcbiAgICAgIH0pOyAvLyA0MiA9IDI0IGZwcyAvLyAyNTAgaXMgd2hhdCBXZWJraXQgdXNlcyAvLyBGRiB1c2VzIDE1XG4gICAgfSwgMjUwKTtcbiAgfVxuICAvKipcbiAgICogU3RvcCB0aGUgaW50ZXJ2YWwgZnVuY3Rpb24gY3JlYXRlZCBpbiB7QGxpbmsgVGVjaCN0cmFja0N1cnJlbnRUaW1lfSBzbyB0aGF0IHRoZVxuICAgKiBgdGltZXVwZGF0ZWAgZXZlbnQgaXMgbm8gbG9uZ2VyIHRyaWdnZXJlZC5cbiAgICpcbiAgICogQGxpc3RlbnMge1RlY2gjcGF1c2V9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lID0gZnVuY3Rpb24gc3RvcFRyYWNraW5nQ3VycmVudFRpbWUoKSB7XG4gICAgdGhpcy5jbGVhckludGVydmFsKHRoaXMuY3VycmVudFRpbWVJbnRlcnZhbCk7IC8vICMxMDAyIC0gaWYgdGhlIHZpZGVvIGVuZHMgcmlnaHQgYmVmb3JlIHRoZSBuZXh0IHRpbWV1cGRhdGUgd291bGQgaGFwcGVuLFxuICAgIC8vIHRoZSBwcm9ncmVzcyBiYXIgd29uJ3QgbWFrZSBpdCBhbGwgdGhlIHdheSB0byB0aGUgZW5kXG5cbiAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ3RpbWV1cGRhdGUnLFxuICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgbWFudWFsbHlUcmlnZ2VyZWQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVHVybiBvZmYgYWxsIGV2ZW50IHBvbHlmaWxscywgY2xlYXIgdGhlIGBUZWNoYHMge0BsaW5rIEF1ZGlvVHJhY2tMaXN0fSxcbiAgICoge0BsaW5rIFZpZGVvVHJhY2tMaXN0fSwgYW5kIHtAbGluayBUZXh0VHJhY2tMaXN0fSwgYW5kIGRpc3Bvc2Ugb2YgdGhpcyBUZWNoLlxuICAgKlxuICAgKiBAZmlyZXMgQ29tcG9uZW50I2Rpc3Bvc2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgLy8gY2xlYXIgb3V0IGFsbCB0cmFja3MgYmVjYXVzZSB3ZSBjYW4ndCByZXVzZSB0aGVtIGJldHdlZW4gdGVjaHNcbiAgICB0aGlzLmNsZWFyVHJhY2tzKE5PUk1BTC5uYW1lcyk7IC8vIFR1cm4gb2ZmIGFueSBtYW51YWwgcHJvZ3Jlc3Mgb3IgdGltZXVwZGF0ZSB0cmFja2luZ1xuXG4gICAgaWYgKHRoaXMubWFudWFsUHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMubWFudWFsUHJvZ3Jlc3NPZmYoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tYW51YWxUaW1lVXBkYXRlcykge1xuICAgICAgdGhpcy5tYW51YWxUaW1lVXBkYXRlc09mZigpO1xuICAgIH1cblxuICAgIF9Db21wb25lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXIgb3V0IGEgc2luZ2xlIGBUcmFja0xpc3RgIG9yIGFuIGFycmF5IG9mIGBUcmFja0xpc3RzYCBnaXZlbiB0aGVpciBuYW1lcy5cbiAgICpcbiAgICogPiBOb3RlOiBUZWNocyB3aXRob3V0IHNvdXJjZSBoYW5kbGVycyBzaG91bGQgY2FsbCB0aGlzIGJldHdlZW4gc291cmNlcyBmb3IgYHZpZGVvYFxuICAgKiAgICAgICAgICYgYGF1ZGlvYCB0cmFja3MuIFlvdSBkb24ndCB3YW50IHRvIHVzZSB0aGVtIGJldHdlZW4gdHJhY2tzIVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfHN0cmluZ30gdHlwZXNcbiAgICogICAgICAgIFRyYWNrTGlzdCBuYW1lcyB0byBjbGVhciwgdmFsaWQgbmFtZXMgYXJlIGB2aWRlb2AsIGBhdWRpb2AsIGFuZFxuICAgKiAgICAgICAgYHRleHRgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jbGVhclRyYWNrcyA9IGZ1bmN0aW9uIGNsZWFyVHJhY2tzKHR5cGVzKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB0eXBlcyA9IFtdLmNvbmNhdCh0eXBlcyk7IC8vIGNsZWFyIG91dCBhbGwgdHJhY2tzIGJlY2F1c2Ugd2UgY2FuJ3QgcmV1c2UgdGhlbSBiZXR3ZWVuIHRlY2hzXG5cbiAgICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICB2YXIgbGlzdCA9IF90aGlzM1t0eXBlICsgXCJUcmFja3NcIl0oKSB8fCBbXTtcbiAgICAgIHZhciBpID0gbGlzdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmFyIHRyYWNrID0gbGlzdFtpXTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgX3RoaXMzLnJlbW92ZVJlbW90ZVRleHRUcmFjayh0cmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnJlbW92ZVRyYWNrKHRyYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGFueSBUZXh0VHJhY2tzIGFkZGVkIHZpYSBhZGRSZW1vdGVUZXh0VHJhY2sgdGhhdCBhcmVcbiAgICogZmxhZ2dlZCBmb3IgYXV0b21hdGljIGdhcmJhZ2UgY29sbGVjdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jbGVhbnVwQXV0b1RleHRUcmFja3MgPSBmdW5jdGlvbiBjbGVhbnVwQXV0b1RleHRUcmFja3MoKSB7XG4gICAgdmFyIGxpc3QgPSB0aGlzLmF1dG9SZW1vdGVUZXh0VHJhY2tzXyB8fCBbXTtcbiAgICB2YXIgaSA9IGxpc3QubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFyIHRyYWNrID0gbGlzdFtpXTtcbiAgICAgIHRoaXMucmVtb3ZlUmVtb3RlVGV4dFRyYWNrKHRyYWNrKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSB0ZWNoLCB3aGljaCB3aWxsIHJlbW92ZXMgYWxsIHNvdXJjZXMgYW5kIHJlc2V0IHRoZSBpbnRlcm5hbCByZWFkeVN0YXRlLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHt9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHZhbHVlIG9mIGBjcm9zc09yaWdpbmAgZnJvbSB0aGUgdGVjaC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqXG4gICAqIEBzZWUge0h0bWw1I2Nyb3NzT3JpZ2lufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcm9zc09yaWdpbiA9IGZ1bmN0aW9uIGNyb3NzT3JpZ2luKCkge31cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgYGNyb3NzT3JpZ2luYCBvbiB0aGUgdGVjaC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjcm9zc09yaWdpbiB0aGUgY3Jvc3NPcmlnaW4gdmFsdWVcbiAgICogQHNlZSB7SHRtbDUjc2V0Q3Jvc3NPcmlnaW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldENyb3NzT3JpZ2luID0gZnVuY3Rpb24gc2V0Q3Jvc3NPcmlnaW4oKSB7fVxuICAvKipcbiAgICogR2V0IG9yIHNldCBhbiBlcnJvciBvbiB0aGUgVGVjaC5cbiAgICpcbiAgICogQHBhcmFtIHtNZWRpYUVycm9yfSBbZXJyXVxuICAgKiAgICAgICAgRXJyb3IgdG8gc2V0IG9uIHRoZSBUZWNoXG4gICAqXG4gICAqIEByZXR1cm4ge01lZGlhRXJyb3J8bnVsbH1cbiAgICogICAgICAgICBUaGUgY3VycmVudCBlcnJvciBvYmplY3Qgb24gdGhlIHRlY2gsIG9yIG51bGwgaWYgdGhlcmUgaXNuJ3Qgb25lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKGVycikge1xuICAgIGlmIChlcnIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5lcnJvcl8gPSBuZXcgTWVkaWFFcnJvcihlcnIpO1xuICAgICAgdGhpcy50cmlnZ2VyKCdlcnJvcicpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVycm9yXztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYFRpbWVSYW5nZWBzIHRoYXQgaGF2ZSBiZWVuIHBsYXllZCB0aHJvdWdoIGZvciB0aGUgY3VycmVudCBzb3VyY2UuXG4gICAqXG4gICAqID4gTk9URTogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBpbmNvbXBsZXRlLiBJdCBkb2VzIG5vdCB0cmFjayB0aGUgcGxheWVkIGBUaW1lUmFuZ2VgLlxuICAgKiAgICAgICAgIEl0IG9ubHkgY2hlY2tzIHdoZXRoZXIgdGhlIHNvdXJjZSBoYXMgcGxheWVkIGF0IGFsbCBvciBub3QuXG4gICAqXG4gICAqIEByZXR1cm4ge1RpbWVSYW5nZX1cbiAgICogICAgICAgICAtIEEgc2luZ2xlIHRpbWUgcmFuZ2UgaWYgdGhpcyB2aWRlbyBoYXMgcGxheWVkXG4gICAqICAgICAgICAgLSBBbiBlbXB0eSBzZXQgb2YgcmFuZ2VzIGlmIG5vdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGxheWVkID0gZnVuY3Rpb24gcGxheWVkKCkge1xuICAgIGlmICh0aGlzLmhhc1N0YXJ0ZWRfKSB7XG4gICAgICByZXR1cm4gY3JlYXRlVGltZVJhbmdlcygwLCAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlVGltZVJhbmdlcygpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgd2hldGhlciB3ZSBhcmUgc2NydWJiaW5nIG9yIG5vdFxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICpcbiAgICogQHNlZSB7SHRtbDUjc2V0U2NydWJiaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRTY3J1YmJpbmcgPSBmdW5jdGlvbiBzZXRTY3J1YmJpbmcoKSB7fVxuICAvKipcbiAgICogQ2F1c2VzIGEgbWFudWFsIHRpbWUgdXBkYXRlIHRvIG9jY3VyIGlmIHtAbGluayBUZWNoI21hbnVhbFRpbWVVcGRhdGVzT259IHdhc1xuICAgKiBwcmV2aW91c2x5IGNhbGxlZC5cbiAgICpcbiAgICogQGZpcmVzIFRlY2gjdGltZXVwZGF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRDdXJyZW50VGltZSA9IGZ1bmN0aW9uIHNldEN1cnJlbnRUaW1lKCkge1xuICAgIC8vIGltcHJvdmUgdGhlIGFjY3VyYWN5IG9mIG1hbnVhbCB0aW1ldXBkYXRlc1xuICAgIGlmICh0aGlzLm1hbnVhbFRpbWVVcGRhdGVzKSB7XG4gICAgICAvKipcbiAgICAgICAqIEEgbWFudWFsIGB0aW1ldXBkYXRlYCBldmVudC5cbiAgICAgICAqXG4gICAgICAgKiBAZXZlbnQgVGVjaCN0aW1ldXBkYXRlXG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cbiAgICAgIHRoaXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICd0aW1ldXBkYXRlJyxcbiAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICBtYW51YWxseVRyaWdnZXJlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUdXJuIG9uIGxpc3RlbmVycyBmb3Ige0BsaW5rIFZpZGVvVHJhY2tMaXN0fSwge0BsaW5rIHtBdWRpb1RyYWNrTGlzdH0sIGFuZFxuICAgKiB7QGxpbmsgVGV4dFRyYWNrTGlzdH0gZXZlbnRzLlxuICAgKlxuICAgKiBUaGlzIGFkZHMge0BsaW5rIEV2ZW50VGFyZ2V0fkV2ZW50TGlzdGVuZXJzfSBmb3IgYGFkZHRyYWNrYCwgYW5kICBgcmVtb3ZldHJhY2tgLlxuICAgKlxuICAgKiBAZmlyZXMgVGVjaCNhdWRpb3RyYWNrY2hhbmdlXG4gICAqIEBmaXJlcyBUZWNoI3ZpZGVvdHJhY2tjaGFuZ2VcbiAgICogQGZpcmVzIFRlY2gjdGV4dHRyYWNrY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluaXRUcmFja0xpc3RlbmVycyA9IGZ1bmN0aW9uIGluaXRUcmFja0xpc3RlbmVycygpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIC8qKlxuICAgICAgKiBUcmlnZ2VyZWQgd2hlbiB0cmFja3MgYXJlIGFkZGVkIG9yIHJlbW92ZWQgb24gdGhlIFRlY2gge0BsaW5rIEF1ZGlvVHJhY2tMaXN0fVxuICAgICAgKlxuICAgICAgKiBAZXZlbnQgVGVjaCNhdWRpb3RyYWNrY2hhbmdlXG4gICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICovXG5cbiAgICAvKipcbiAgICAgICogVHJpZ2dlcmVkIHdoZW4gdHJhY2tzIGFyZSBhZGRlZCBvciByZW1vdmVkIG9uIHRoZSBUZWNoIHtAbGluayBWaWRlb1RyYWNrTGlzdH1cbiAgICAgICpcbiAgICAgICogQGV2ZW50IFRlY2gjdmlkZW90cmFja2NoYW5nZVxuICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAqL1xuXG4gICAgLyoqXG4gICAgICAqIFRyaWdnZXJlZCB3aGVuIHRyYWNrcyBhcmUgYWRkZWQgb3IgcmVtb3ZlZCBvbiB0aGUgVGVjaCB7QGxpbmsgVGV4dFRyYWNrTGlzdH1cbiAgICAgICpcbiAgICAgICogQGV2ZW50IFRlY2gjdGV4dHRyYWNrY2hhbmdlXG4gICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICovXG4gICAgTk9STUFMLm5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBwcm9wcyA9IE5PUk1BTFtuYW1lXTtcblxuICAgICAgdmFyIHRyYWNrTGlzdENoYW5nZXMgPSBmdW5jdGlvbiB0cmFja0xpc3RDaGFuZ2VzKCkge1xuICAgICAgICBfdGhpczQudHJpZ2dlcihuYW1lICsgXCJ0cmFja2NoYW5nZVwiKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciB0cmFja3MgPSBfdGhpczRbcHJvcHMuZ2V0dGVyTmFtZV0oKTtcblxuICAgICAgdHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoJ3JlbW92ZXRyYWNrJywgdHJhY2tMaXN0Q2hhbmdlcyk7XG4gICAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcignYWRkdHJhY2snLCB0cmFja0xpc3RDaGFuZ2VzKTtcblxuICAgICAgX3RoaXM0Lm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCB0cmFja0xpc3RDaGFuZ2VzKTtcbiAgICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgdHJhY2tMaXN0Q2hhbmdlcyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRW11bGF0ZSBUZXh0VHJhY2tzIHVzaW5nIHZ0dC5qcyBpZiBuZWNlc3NhcnlcbiAgICpcbiAgICogQGZpcmVzIFRlY2gjdnR0anNsb2FkZWRcbiAgICogQGZpcmVzIFRlY2gjdnR0anNlcnJvclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRXZWJWdHRTY3JpcHRfID0gZnVuY3Rpb24gYWRkV2ViVnR0U2NyaXB0XygpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIGlmICh3aW5kb3ckMS5XZWJWVFQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEluaXRpYWxseSwgVGVjaC5lbF8gaXMgYSBjaGlsZCBvZiBhIGR1bW15LWRpdiB3YWl0IHVudGlsIHRoZSBDb21wb25lbnQgc3lzdGVtXG4gICAgLy8gc2lnbmFscyB0aGF0IHRoZSBUZWNoIGlzIHJlYWR5IGF0IHdoaWNoIHBvaW50IFRlY2guZWxfIGlzIHBhcnQgb2YgdGhlIERPTVxuICAgIC8vIGJlZm9yZSBpbnNlcnRpbmcgdGhlIFdlYlZUVCBzY3JpcHRcblxuXG4gICAgaWYgKGRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5lbCgpKSkge1xuICAgICAgLy8gbG9hZCB2aWEgcmVxdWlyZSBpZiBhdmFpbGFibGUgYW5kIHZ0dC5qcyBzY3JpcHQgbG9jYXRpb24gd2FzIG5vdCBwYXNzZWQgaW5cbiAgICAgIC8vIGFzIGFuIG9wdGlvbi4gbm92dHQgYnVpbGRzIHdpbGwgdHVybiB0aGUgYWJvdmUgcmVxdWlyZSBjYWxsIGludG8gYW4gZW1wdHkgb2JqZWN0XG4gICAgICAvLyB3aGljaCB3aWxsIGNhdXNlIHRoaXMgaWYgY2hlY2sgdG8gYWx3YXlzIGZhaWwuXG4gICAgICBpZiAoIXRoaXMub3B0aW9uc19bJ3Z0dC5qcyddICYmIGlzUGxhaW4odnR0KSAmJiBPYmplY3Qua2V5cyh2dHQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCd2dHRqc2xvYWRlZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIGxvYWQgdnR0LmpzIHZpYSB0aGUgc2NyaXB0IGxvY2F0aW9uIG9wdGlvbiBvciB0aGUgY2RuIG9mIG5vIGxvY2F0aW9uIHdhc1xuICAgICAgLy8gcGFzc2VkIGluXG5cblxuICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgc2NyaXB0LnNyYyA9IHRoaXMub3B0aW9uc19bJ3Z0dC5qcyddIHx8ICdodHRwczovL3Zqcy56ZW5jZG4ubmV0L3Z0dGpzLzAuMTQuMS92dHQubWluLmpzJztcblxuICAgICAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gdnR0LmpzIGlzIGxvYWRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV2ZW50IFRlY2gjdnR0anNsb2FkZWRcbiAgICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXM1LnRyaWdnZXIoJ3Z0dGpzbG9hZGVkJyk7XG4gICAgICB9O1xuXG4gICAgICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gdnR0LmpzIHdhcyBub3QgbG9hZGVkIGR1ZSB0byBhbiBlcnJvclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgVGVjaCN2dHRqc2xvYWRlZFxuICAgICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgICAqL1xuICAgICAgICBfdGhpczUudHJpZ2dlcigndnR0anNlcnJvcicpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5vbignZGlzcG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG4gICAgICAgIHNjcmlwdC5vbmVycm9yID0gbnVsbDtcbiAgICAgIH0pOyAvLyBidXQgaGF2ZSBub3QgbG9hZGVkIHlldCBhbmQgd2Ugc2V0IGl0IHRvIHRydWUgYmVmb3JlIHRoZSBpbmplY3Qgc28gdGhhdFxuICAgICAgLy8gd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSBpbmplY3RlZCB3aW5kb3cuV2ViVlRUIGlmIGl0IGxvYWRzIHJpZ2h0IGF3YXlcblxuICAgICAgd2luZG93JDEuV2ViVlRUID0gdHJ1ZTtcbiAgICAgIHRoaXMuZWwoKS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVhZHkodGhpcy5hZGRXZWJWdHRTY3JpcHRfKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEVtdWxhdGUgdGV4dHRyYWNrc1xuICAgKlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbXVsYXRlVGV4dFRyYWNrcyA9IGZ1bmN0aW9uIGVtdWxhdGVUZXh0VHJhY2tzKCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgdmFyIHRyYWNrcyA9IHRoaXMudGV4dFRyYWNrcygpO1xuICAgIHZhciByZW1vdGVUcmFja3MgPSB0aGlzLnJlbW90ZVRleHRUcmFja3MoKTtcblxuICAgIHZhciBoYW5kbGVBZGRUcmFjayA9IGZ1bmN0aW9uIGhhbmRsZUFkZFRyYWNrKGUpIHtcbiAgICAgIHJldHVybiB0cmFja3MuYWRkVHJhY2soZS50cmFjayk7XG4gICAgfTtcblxuICAgIHZhciBoYW5kbGVSZW1vdmVUcmFjayA9IGZ1bmN0aW9uIGhhbmRsZVJlbW92ZVRyYWNrKGUpIHtcbiAgICAgIHJldHVybiB0cmFja3MucmVtb3ZlVHJhY2soZS50cmFjayk7XG4gICAgfTtcblxuICAgIHJlbW90ZVRyYWNrcy5vbignYWRkdHJhY2snLCBoYW5kbGVBZGRUcmFjayk7XG4gICAgcmVtb3RlVHJhY2tzLm9uKCdyZW1vdmV0cmFjaycsIGhhbmRsZVJlbW92ZVRyYWNrKTtcbiAgICB0aGlzLmFkZFdlYlZ0dFNjcmlwdF8oKTtcblxuICAgIHZhciB1cGRhdGVEaXNwbGF5ID0gZnVuY3Rpb24gdXBkYXRlRGlzcGxheSgpIHtcbiAgICAgIHJldHVybiBfdGhpczYudHJpZ2dlcigndGV4dHRyYWNrY2hhbmdlJyk7XG4gICAgfTtcblxuICAgIHZhciB0ZXh0VHJhY2tzQ2hhbmdlcyA9IGZ1bmN0aW9uIHRleHRUcmFja3NDaGFuZ2VzKCkge1xuICAgICAgdXBkYXRlRGlzcGxheSgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07XG4gICAgICAgIHRyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2N1ZWNoYW5nZScsIHVwZGF0ZURpc3BsYXkpO1xuXG4gICAgICAgIGlmICh0cmFjay5tb2RlID09PSAnc2hvd2luZycpIHtcbiAgICAgICAgICB0cmFjay5hZGRFdmVudExpc3RlbmVyKCdjdWVjaGFuZ2UnLCB1cGRhdGVEaXNwbGF5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0ZXh0VHJhY2tzQ2hhbmdlcygpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0ZXh0VHJhY2tzQ2hhbmdlcyk7XG4gICAgdHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgdGV4dFRyYWNrc0NoYW5nZXMpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdyZW1vdmV0cmFjaycsIHRleHRUcmFja3NDaGFuZ2VzKTtcbiAgICB0aGlzLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3RlVHJhY2tzLm9mZignYWRkdHJhY2snLCBoYW5kbGVBZGRUcmFjayk7XG4gICAgICByZW1vdGVUcmFja3Mub2ZmKCdyZW1vdmV0cmFjaycsIGhhbmRsZVJlbW92ZVRyYWNrKTtcbiAgICAgIHRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0ZXh0VHJhY2tzQ2hhbmdlcyk7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWRkdHJhY2snLCB0ZXh0VHJhY2tzQ2hhbmdlcyk7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCB0ZXh0VHJhY2tzQ2hhbmdlcyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0cmFjayA9IHRyYWNrc1tpXTtcbiAgICAgICAgdHJhY2sucmVtb3ZlRXZlbnRMaXN0ZW5lcignY3VlY2hhbmdlJywgdXBkYXRlRGlzcGxheSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmV0dXJucyBhIHJlbW90ZSB7QGxpbmsgVGV4dFRyYWNrfSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBraW5kXG4gICAqICAgICAgICBgVGV4dFRyYWNrYCBraW5kIChzdWJ0aXRsZXMsIGNhcHRpb25zLCBkZXNjcmlwdGlvbnMsIGNoYXB0ZXJzLCBvciBtZXRhZGF0YSlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsYWJlbF1cbiAgICogICAgICAgIExhYmVsIHRvIGlkZW50aWZ5IHRoZSB0ZXh0IHRyYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2VdXG4gICAqICAgICAgICBUd28gbGV0dGVyIGxhbmd1YWdlIGFiYnJldmlhdGlvblxuICAgKlxuICAgKiBAcmV0dXJuIHtUZXh0VHJhY2t9XG4gICAqICAgICAgICAgVGhlIFRleHRUcmFjayB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkVGV4dFRyYWNrID0gZnVuY3Rpb24gYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSkge1xuICAgIGlmICgha2luZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXh0VHJhY2sga2luZCBpcyByZXF1aXJlZCBidXQgd2FzIG5vdCBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVUcmFja0hlbHBlcih0aGlzLCBraW5kLCBsYWJlbCwgbGFuZ3VhZ2UpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gZW11bGF0ZWQgVGV4dFRyYWNrIGZvciB1c2UgYnkgYWRkUmVtb3RlVGV4dFRyYWNrXG4gICAqXG4gICAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgb3ZlcnJpZGRlbiBieSBjbGFzc2VzIHRoYXQgaW5oZXJpdCBmcm9tXG4gICAqIFRlY2ggaW4gb3JkZXIgdG8gY3JlYXRlIG5hdGl2ZSBvciBjdXN0b20gVGV4dFRyYWNrcy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBvYmplY3Qgc2hvdWxkIGNvbnRhaW4gdGhlIG9wdGlvbnMgdG8gaW5pdGlhbGl6ZSB0aGUgVGV4dFRyYWNrIHdpdGguXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5raW5kXVxuICAgKiAgICAgICAgYFRleHRUcmFja2Aga2luZCAoc3VidGl0bGVzLCBjYXB0aW9ucywgZGVzY3JpcHRpb25zLCBjaGFwdGVycywgb3IgbWV0YWRhdGEpLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFiZWxdLlxuICAgKiAgICAgICAgTGFiZWwgdG8gaWRlbnRpZnkgdGhlIHRleHQgdHJhY2tcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxhbmd1YWdlXVxuICAgKiAgICAgICAgVHdvIGxldHRlciBsYW5ndWFnZSBhYmJyZXZpYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge0hUTUxUcmFja0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIHRyYWNrIGVsZW1lbnQgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVJlbW90ZVRleHRUcmFjayA9IGZ1bmN0aW9uIGNyZWF0ZVJlbW90ZVRleHRUcmFjayhvcHRpb25zKSB7XG4gICAgdmFyIHRyYWNrID0gbWVyZ2VPcHRpb25zKG9wdGlvbnMsIHtcbiAgICAgIHRlY2g6IHRoaXNcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IFJFTU9URS5yZW1vdGVUZXh0RWwuVHJhY2tDbGFzcyh0cmFjayk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSByZW1vdGUgdGV4dCB0cmFjayBvYmplY3QgYW5kIHJldHVybnMgYW4gaHRtbCB0cmFjayBlbGVtZW50LlxuICAgKlxuICAgKiA+IE5vdGU6IFRoaXMgY2FuIGJlIGFuIGVtdWxhdGVkIHtAbGluayBIVE1MVHJhY2tFbGVtZW50fSBvciBhIG5hdGl2ZSBvbmUuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgICAgICBTZWUge0BsaW5rIFRlY2gjY3JlYXRlUmVtb3RlVGV4dFRyYWNrfSBmb3IgbW9yZSBkZXRhaWxlZCBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFttYW51YWxDbGVhbnVwPXRydWVdXG4gICAqICAgICAgICAtIFdoZW4gZmFsc2U6IHRoZSBUZXh0VHJhY2sgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgZnJvbSB0aGUgdmlkZW9cbiAgICogICAgICAgICAgZWxlbWVudCB3aGVuZXZlciB0aGUgc291cmNlIGNoYW5nZXNcbiAgICogICAgICAgIC0gV2hlbiBUcnVlOiBUaGUgVGV4dFRyYWNrIHdpbGwgaGF2ZSB0byBiZSBjbGVhbmVkIHVwIG1hbnVhbGx5XG4gICAqXG4gICAqIEByZXR1cm4ge0hUTUxUcmFja0VsZW1lbnR9XG4gICAqICAgICAgICAgQW4gSHRtbCBUcmFjayBFbGVtZW50LlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBUaGUgZGVmYXVsdCBmdW5jdGlvbmFsaXR5IGZvciB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgZXF1aXZhbGVudFxuICAgKiAgICAgICAgICAgICB0byBcIm1hbnVhbENsZWFudXA9ZmFsc2VcIiBpbiB0aGUgZnV0dXJlLiBUaGUgbWFudWFsQ2xlYW51cCBwYXJhbWV0ZXIgd2lsbFxuICAgKiAgICAgICAgICAgICBhbHNvIGJlIHJlbW92ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJlbW90ZVRleHRUcmFjayA9IGZ1bmN0aW9uIGFkZFJlbW90ZVRleHRUcmFjayhvcHRpb25zLCBtYW51YWxDbGVhbnVwKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIGh0bWxUcmFja0VsZW1lbnQgPSB0aGlzLmNyZWF0ZVJlbW90ZVRleHRUcmFjayhvcHRpb25zKTtcblxuICAgIGlmIChtYW51YWxDbGVhbnVwICE9PSB0cnVlICYmIG1hbnVhbENsZWFudXAgIT09IGZhbHNlKSB7XG4gICAgICAvLyBkZXByZWNhdGlvbiB3YXJuaW5nXG4gICAgICBsb2cud2FybignQ2FsbGluZyBhZGRSZW1vdGVUZXh0VHJhY2sgd2l0aG91dCBleHBsaWNpdGx5IHNldHRpbmcgdGhlIFwibWFudWFsQ2xlYW51cFwiIHBhcmFtZXRlciB0byBgdHJ1ZWAgaXMgZGVwcmVjYXRlZCBhbmQgZGVmYXVsdCB0byBgZmFsc2VgIGluIGZ1dHVyZSB2ZXJzaW9uIG9mIHZpZGVvLmpzJyk7XG4gICAgICBtYW51YWxDbGVhbnVwID0gdHJ1ZTtcbiAgICB9IC8vIHN0b3JlIEhUTUxUcmFja0VsZW1lbnQgYW5kIFRleHRUcmFjayB0byByZW1vdGUgbGlzdFxuXG5cbiAgICB0aGlzLnJlbW90ZVRleHRUcmFja0VscygpLmFkZFRyYWNrRWxlbWVudF8oaHRtbFRyYWNrRWxlbWVudCk7XG4gICAgdGhpcy5yZW1vdGVUZXh0VHJhY2tzKCkuYWRkVHJhY2soaHRtbFRyYWNrRWxlbWVudC50cmFjayk7XG5cbiAgICBpZiAobWFudWFsQ2xlYW51cCAhPT0gdHJ1ZSkge1xuICAgICAgLy8gY3JlYXRlIHRoZSBUZXh0VHJhY2tMaXN0IGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICAgIHRoaXMucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM3LmF1dG9SZW1vdGVUZXh0VHJhY2tzXy5hZGRUcmFjayhodG1sVHJhY2tFbGVtZW50LnRyYWNrKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBodG1sVHJhY2tFbGVtZW50O1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSByZW1vdGUgdGV4dCB0cmFjayBmcm9tIHRoZSByZW1vdGUgYFRleHRUcmFja0xpc3RgLlxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja30gdHJhY2tcbiAgICogICAgICAgIGBUZXh0VHJhY2tgIHRvIHJlbW92ZSBmcm9tIHRoZSBgVGV4dFRyYWNrTGlzdGBcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlUmVtb3RlVGV4dFRyYWNrID0gZnVuY3Rpb24gcmVtb3ZlUmVtb3RlVGV4dFRyYWNrKHRyYWNrKSB7XG4gICAgdmFyIHRyYWNrRWxlbWVudCA9IHRoaXMucmVtb3RlVGV4dFRyYWNrRWxzKCkuZ2V0VHJhY2tFbGVtZW50QnlUcmFja18odHJhY2spOyAvLyByZW1vdmUgSFRNTFRyYWNrRWxlbWVudCBhbmQgVGV4dFRyYWNrIGZyb20gcmVtb3RlIGxpc3RcblxuICAgIHRoaXMucmVtb3RlVGV4dFRyYWNrRWxzKCkucmVtb3ZlVHJhY2tFbGVtZW50Xyh0cmFja0VsZW1lbnQpO1xuICAgIHRoaXMucmVtb3RlVGV4dFRyYWNrcygpLnJlbW92ZVRyYWNrKHRyYWNrKTtcbiAgICB0aGlzLmF1dG9SZW1vdGVUZXh0VHJhY2tzXy5yZW1vdmVUcmFjayh0cmFjayk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYXZhaWxhYmxlIG1lZGlhIHBsYXliYWNrIHF1YWxpdHkgbWV0cmljcyBhcyBzcGVjaWZpZWQgYnkgdGhlIFczQydzIE1lZGlhXG4gICAqIFBsYXliYWNrIFF1YWxpdHkgQVBJLlxuICAgKlxuICAgKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3dpY2cuZ2l0aHViLmlvL21lZGlhLXBsYXliYWNrLXF1YWxpdHl9XG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogICAgICAgICBBbiBvYmplY3Qgd2l0aCBzdXBwb3J0ZWQgbWVkaWEgcGxheWJhY2sgcXVhbGl0eSBtZXRyaWNzXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eSA9IGZ1bmN0aW9uIGdldFZpZGVvUGxheWJhY2tRdWFsaXR5KCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICAvKipcbiAgICogQXR0ZW1wdCB0byBjcmVhdGUgYSBmbG9hdGluZyB2aWRlbyB3aW5kb3cgYWx3YXlzIG9uIHRvcCBvZiBvdGhlciB3aW5kb3dzXG4gICAqIHNvIHRoYXQgdXNlcnMgbWF5IGNvbnRpbnVlIGNvbnN1bWluZyBtZWRpYSB3aGlsZSB0aGV5IGludGVyYWN0IHdpdGggb3RoZXJcbiAgICogY29udGVudCBzaXRlcywgb3IgYXBwbGljYXRpb25zIG9uIHRoZWlyIGRldmljZS5cbiAgICpcbiAgICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9waWN0dXJlLWluLXBpY3R1cmV9XG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V8dW5kZWZpbmVkfVxuICAgKiAgICAgICAgIEEgcHJvbWlzZSB3aXRoIGEgUGljdHVyZS1pbi1QaWN0dXJlIHdpbmRvdyBpZiB0aGUgYnJvd3NlciBzdXBwb3J0c1xuICAgKiAgICAgICAgIFByb21pc2VzIChvciBvbmUgd2FzIHBhc3NlZCBpbiBhcyBhbiBvcHRpb24pLiBJdCByZXR1cm5zIHVuZGVmaW5lZFxuICAgKiAgICAgICAgIG90aGVyd2lzZS5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlID0gZnVuY3Rpb24gcmVxdWVzdFBpY3R1cmVJblBpY3R1cmUoKSB7XG4gICAgdmFyIFByb21pc2VDbGFzcyA9IHRoaXMub3B0aW9uc18uUHJvbWlzZSB8fCB3aW5kb3ckMS5Qcm9taXNlO1xuXG4gICAgaWYgKFByb21pc2VDbGFzcykge1xuICAgICAgcmV0dXJuIFByb21pc2VDbGFzcy5yZWplY3QoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRvIGNoZWNrIGZvciB0aGUgdmFsdWUgb2YgdGhlICdkaXNhYmxlUGljdHVyZUluUGljdHVyZScgPHZpZGVvPiBwcm9wZXJ0eS5cbiAgICogRGVmYXVsdHMgdG8gdHJ1ZSwgYXMgaXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgZGlzYWJsZWQgaWYgdGhlIHRlY2ggZG9lcyBub3Qgc3VwcG9ydCBwaXBcbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRpc2FibGVQaWN0dXJlSW5QaWN0dXJlID0gZnVuY3Rpb24gZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRvIHNldCBvciB1bnNldCB0aGUgJ2Rpc2FibGVQaWN0dXJlSW5QaWN0dXJlJyA8dmlkZW8+IHByb3BlcnR5LlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0RGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgPSBmdW5jdGlvbiBzZXREaXNhYmxlUGljdHVyZUluUGljdHVyZSgpIHt9XG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0byBzZXQgYSBwb3N0ZXIgZnJvbSBhIGBUZWNoYC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldFBvc3RlciA9IGZ1bmN0aW9uIHNldFBvc3RlcigpIHt9XG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0byBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIHRoZSAncGxheXNpbmxpbmUnIDx2aWRlbz4gYXR0cmlidXRlLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGxheXNpbmxpbmUgPSBmdW5jdGlvbiBwbGF5c2lubGluZSgpIHt9XG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0byBzZXQgb3IgdW5zZXQgdGhlICdwbGF5c2lubGluZScgPHZpZGVvPiBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRQbGF5c2lubGluZSA9IGZ1bmN0aW9uIHNldFBsYXlzaW5saW5lKCkge31cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gZm9yY2Ugb3ZlcnJpZGUgb2YgbmF0aXZlIGF1ZGlvIHRyYWNrcy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBvdmVycmlkZSAtIElmIHNldCB0byB0cnVlIG5hdGl2ZSBhdWRpbyB3aWxsIGJlIG92ZXJyaWRkZW4sXG4gICAqIG90aGVyd2lzZSBuYXRpdmUgYXVkaW8gd2lsbCBwb3RlbnRpYWxseSBiZSB1c2VkLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8ub3ZlcnJpZGVOYXRpdmVBdWRpb1RyYWNrcyA9IGZ1bmN0aW9uIG92ZXJyaWRlTmF0aXZlQXVkaW9UcmFja3MoKSB7fVxuICAvKipcbiAgICogQXR0ZW1wdCB0byBmb3JjZSBvdmVycmlkZSBvZiBuYXRpdmUgdmlkZW8gdHJhY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG92ZXJyaWRlIC0gSWYgc2V0IHRvIHRydWUgbmF0aXZlIHZpZGVvIHdpbGwgYmUgb3ZlcnJpZGRlbixcbiAgICogb3RoZXJ3aXNlIG5hdGl2ZSB2aWRlbyB3aWxsIHBvdGVudGlhbGx5IGJlIHVzZWQuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vdmVycmlkZU5hdGl2ZVZpZGVvVHJhY2tzID0gZnVuY3Rpb24gb3ZlcnJpZGVOYXRpdmVWaWRlb1RyYWNrcygpIHt9XG4gIC8qXG4gICAqIENoZWNrIGlmIHRoZSB0ZWNoIGNhbiBzdXBwb3J0IHRoZSBnaXZlbiBtaW1lLXR5cGUuXG4gICAqXG4gICAqIFRoZSBiYXNlIHRlY2ggZG9lcyBub3Qgc3VwcG9ydCBhbnkgdHlwZSwgYnV0IHNvdXJjZSBoYW5kbGVycyBtaWdodFxuICAgKiBvdmVyd3JpdGUgdGhpcy5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSB0eXBlXG4gICAqICAgICAgICAgVGhlIG1pbWV0eXBlIHRvIGNoZWNrIGZvciBzdXBwb3J0XG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICAncHJvYmFibHknLCAnbWF5YmUnLCBvciBlbXB0eSBzdHJpbmdcbiAgICpcbiAgICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxNZWRpYUVsZW1lbnQvY2FuUGxheVR5cGV9XG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uIGNhblBsYXlUeXBlKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHR5cGUgaXMgc3VwcG9ydGVkIGJ5IHRoaXMgdGVjaC5cbiAgICpcbiAgICogVGhlIGJhc2UgdGVjaCBkb2VzIG5vdCBzdXBwb3J0IGFueSB0eXBlLCBidXQgc291cmNlIGhhbmRsZXJzIG1pZ2h0XG4gICAqIG92ZXJ3cml0ZSB0aGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgVGhlIG1lZGlhIHR5cGUgdG8gY2hlY2tcbiAgICogQHJldHVybiB7c3RyaW5nfSBSZXR1cm5zIHRoZSBuYXRpdmUgdmlkZW8gZWxlbWVudCdzIHJlc3BvbnNlXG4gICAqL1xuICA7XG5cbiAgVGVjaC5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uIGNhblBsYXlUeXBlKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHRlY2ggY2FuIHN1cHBvcnQgdGhlIGdpdmVuIHNvdXJjZVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3JjT2JqXG4gICAqICAgICAgICBUaGUgc291cmNlIG9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgVGhlIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSB0ZWNoXG4gICAqIEByZXR1cm4ge3N0cmluZ30gJ3Byb2JhYmx5JywgJ21heWJlJywgb3IgJycgKGVtcHR5IHN0cmluZylcbiAgICovXG4gIDtcblxuICBUZWNoLmNhblBsYXlTb3VyY2UgPSBmdW5jdGlvbiBjYW5QbGF5U291cmNlKHNyY09iaiwgb3B0aW9ucykge1xuICAgIHJldHVybiBUZWNoLmNhblBsYXlUeXBlKHNyY09iai50eXBlKTtcbiAgfVxuICAvKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgYXJndW1lbnQgaXMgYSBUZWNoIG9yIG5vdC5cbiAgICogQ2FuIGJlIHBhc3NlZCBlaXRoZXIgYSBDbGFzcyBsaWtlIGBIdG1sNWAgb3IgYSBpbnN0YW5jZSBsaWtlIGBwbGF5ZXIudGVjaF9gXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb21wb25lbnRcbiAgICogICAgICAgIFRoZSBpdGVtIHRvIGNoZWNrXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgV2hldGhlciBpdCBpcyBhIHRlY2ggb3Igbm90XG4gICAqICAgICAgICAgLSBUcnVlIGlmIGl0IGlzIGEgdGVjaFxuICAgKiAgICAgICAgIC0gRmFsc2UgaWYgaXQgaXMgbm90XG4gICAqL1xuICA7XG5cbiAgVGVjaC5pc1RlY2ggPSBmdW5jdGlvbiBpc1RlY2goY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudC5wcm90b3R5cGUgaW5zdGFuY2VvZiBUZWNoIHx8IGNvbXBvbmVudCBpbnN0YW5jZW9mIFRlY2ggfHwgY29tcG9uZW50ID09PSBUZWNoO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBgVGVjaGAgaW50byBhIHNoYXJlZCBsaXN0IGZvciB2aWRlb2pzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgTmFtZSBvZiB0aGUgYFRlY2hgIHRvIHJlZ2lzdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdGVjaFxuICAgKiAgICAgICAgVGhlIGBUZWNoYCBjbGFzcyB0byByZWdpc3Rlci5cbiAgICovXG4gIDtcblxuICBUZWNoLnJlZ2lzdGVyVGVjaCA9IGZ1bmN0aW9uIHJlZ2lzdGVyVGVjaChuYW1lLCB0ZWNoKSB7XG4gICAgaWYgKCFUZWNoLnRlY2hzXykge1xuICAgICAgVGVjaC50ZWNoc18gPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIVRlY2guaXNUZWNoKHRlY2gpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUZWNoIFwiICsgbmFtZSArIFwiIG11c3QgYmUgYSBUZWNoXCIpO1xuICAgIH1cblxuICAgIGlmICghVGVjaC5jYW5QbGF5VHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZWNocyBtdXN0IGhhdmUgYSBzdGF0aWMgY2FuUGxheVR5cGUgbWV0aG9kIG9uIHRoZW0nKTtcbiAgICB9XG5cbiAgICBpZiAoIVRlY2guY2FuUGxheVNvdXJjZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZWNocyBtdXN0IGhhdmUgYSBzdGF0aWMgY2FuUGxheVNvdXJjZSBtZXRob2Qgb24gdGhlbScpO1xuICAgIH1cblxuICAgIG5hbWUgPSB0b1RpdGxlQ2FzZShuYW1lKTtcbiAgICBUZWNoLnRlY2hzX1tuYW1lXSA9IHRlY2g7XG4gICAgVGVjaC50ZWNoc19bdG9Mb3dlckNhc2UobmFtZSldID0gdGVjaDtcblxuICAgIGlmIChuYW1lICE9PSAnVGVjaCcpIHtcbiAgICAgIC8vIGNhbWVsIGNhc2UgdGhlIHRlY2hOYW1lIGZvciB1c2UgaW4gdGVjaE9yZGVyXG4gICAgICBUZWNoLmRlZmF1bHRUZWNoT3JkZXJfLnB1c2gobmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRlY2g7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIGBUZWNoYCBmcm9tIHRoZSBzaGFyZWQgbGlzdCBieSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgYGNhbWVsQ2FzZWAgb3IgYFRpdGxlQ2FzZWAgbmFtZSBvZiB0aGUgVGVjaCB0byBnZXRcbiAgICpcbiAgICogQHJldHVybiB7VGVjaHx1bmRlZmluZWR9XG4gICAqICAgICAgICAgVGhlIGBUZWNoYCBvciB1bmRlZmluZWQgaWYgdGhlcmUgd2FzIG5vIHRlY2ggd2l0aCB0aGUgbmFtZSByZXF1ZXN0ZWQuXG4gICAqL1xuICA7XG5cbiAgVGVjaC5nZXRUZWNoID0gZnVuY3Rpb24gZ2V0VGVjaChuYW1lKSB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKFRlY2gudGVjaHNfICYmIFRlY2gudGVjaHNfW25hbWVdKSB7XG4gICAgICByZXR1cm4gVGVjaC50ZWNoc19bbmFtZV07XG4gICAgfVxuXG4gICAgbmFtZSA9IHRvVGl0bGVDYXNlKG5hbWUpO1xuXG4gICAgaWYgKHdpbmRvdyQxICYmIHdpbmRvdyQxLnZpZGVvanMgJiYgd2luZG93JDEudmlkZW9qc1tuYW1lXSkge1xuICAgICAgbG9nLndhcm4oXCJUaGUgXCIgKyBuYW1lICsgXCIgdGVjaCB3YXMgYWRkZWQgdG8gdGhlIHZpZGVvanMgb2JqZWN0IHdoZW4gaXQgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgdXNpbmcgdmlkZW9qcy5yZWdpc3RlclRlY2gobmFtZSwgdGVjaClcIik7XG4gICAgICByZXR1cm4gd2luZG93JDEudmlkZW9qc1tuYW1lXTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRlY2g7XG59KENvbXBvbmVudCk7XG4vKipcbiAqIEdldCB0aGUge0BsaW5rIFZpZGVvVHJhY2tMaXN0fVxuICpcbiAqIEByZXR1cm5zIHtWaWRlb1RyYWNrTGlzdH1cbiAqIEBtZXRob2QgVGVjaC5wcm90b3R5cGUudmlkZW9UcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUge0BsaW5rIEF1ZGlvVHJhY2tMaXN0fVxuICpcbiAqIEByZXR1cm5zIHtBdWRpb1RyYWNrTGlzdH1cbiAqIEBtZXRob2QgVGVjaC5wcm90b3R5cGUuYXVkaW9UcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUge0BsaW5rIFRleHRUcmFja0xpc3R9XG4gKlxuICogQHJldHVybnMge1RleHRUcmFja0xpc3R9XG4gKiBAbWV0aG9kIFRlY2gucHJvdG90eXBlLnRleHRUcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgcmVtb3RlIGVsZW1lbnQge0BsaW5rIFRleHRUcmFja0xpc3R9XG4gKlxuICogQHJldHVybnMge1RleHRUcmFja0xpc3R9XG4gKiBAbWV0aG9kIFRlY2gucHJvdG90eXBlLnJlbW90ZVRleHRUcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgcmVtb3RlIGVsZW1lbnQge0BsaW5rIEh0bWxUcmFja0VsZW1lbnRMaXN0fVxuICpcbiAqIEByZXR1cm5zIHtIdG1sVHJhY2tFbGVtZW50TGlzdH1cbiAqIEBtZXRob2QgVGVjaC5wcm90b3R5cGUucmVtb3RlVGV4dFRyYWNrRWxzXG4gKi9cblxuXG5BTEwubmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcHJvcHMgPSBBTExbbmFtZV07XG5cbiAgVGVjaC5wcm90b3R5cGVbcHJvcHMuZ2V0dGVyTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpc1twcm9wcy5wcml2YXRlTmFtZV0gPSB0aGlzW3Byb3BzLnByaXZhdGVOYW1lXSB8fCBuZXcgcHJvcHMuTGlzdENsYXNzKCk7XG4gICAgcmV0dXJuIHRoaXNbcHJvcHMucHJpdmF0ZU5hbWVdO1xuICB9O1xufSk7XG4vKipcbiAqIExpc3Qgb2YgYXNzb2NpYXRlZCB0ZXh0IHRyYWNrc1xuICpcbiAqIEB0eXBlIHtUZXh0VHJhY2tMaXN0fVxuICogQHByaXZhdGVcbiAqIEBwcm9wZXJ0eSBUZWNoI3RleHRUcmFja3NfXG4gKi9cblxuLyoqXG4gKiBMaXN0IG9mIGFzc29jaWF0ZWQgYXVkaW8gdHJhY2tzLlxuICpcbiAqIEB0eXBlIHtBdWRpb1RyYWNrTGlzdH1cbiAqIEBwcml2YXRlXG4gKiBAcHJvcGVydHkgVGVjaCNhdWRpb1RyYWNrc19cbiAqL1xuXG4vKipcbiAqIExpc3Qgb2YgYXNzb2NpYXRlZCB2aWRlbyB0cmFja3MuXG4gKlxuICogQHR5cGUge1ZpZGVvVHJhY2tMaXN0fVxuICogQHByaXZhdGVcbiAqIEBwcm9wZXJ0eSBUZWNoI3ZpZGVvVHJhY2tzX1xuICovXG5cbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBUZWNoYCBzdXBwb3J0cyB2b2x1bWUgY29udHJvbC5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNWb2x1bWVDb250cm9sID0gdHJ1ZTtcbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBUZWNoYCBzdXBwb3J0cyBtdXRpbmcgdm9sdW1lLlxuICpcbiAqIEB0eXBlIHtib2xlYW59XG4gKiBAZGVmYXVsdFxuICovXG5cblRlY2gucHJvdG90eXBlLmZlYXR1cmVzTXV0ZUNvbnRyb2wgPSB0cnVlO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIGZ1bGxzY3JlZW4gcmVzaXplIGNvbnRyb2wuXG4gKiBSZXNpemluZyBwbHVnaW5zIHVzaW5nIHJlcXVlc3QgZnVsbHNjcmVlbiByZWxvYWRzIHRoZSBwbHVnaW5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNGdWxsc2NyZWVuUmVzaXplID0gZmFsc2U7XG4vKipcbiAqIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBgVGVjaGAgc3VwcG9ydHMgY2hhbmdpbmcgdGhlIHNwZWVkIGF0IHdoaWNoIHRoZSB2aWRlb1xuICogcGxheXMuIEV4YW1wbGVzOlxuICogICAtIFNldCBwbGF5ZXIgdG8gcGxheSAyeCAodHdpY2UpIGFzIGZhc3RcbiAqICAgLSBTZXQgcGxheWVyIHRvIHBsYXkgMC41eCAoaGFsZikgYXMgZmFzdFxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICogQGRlZmF1bHRcbiAqL1xuXG5UZWNoLnByb3RvdHlwZS5mZWF0dXJlc1BsYXliYWNrUmF0ZSA9IGZhbHNlO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIHRoZSBgcHJvZ3Jlc3NgIGV2ZW50LiBUaGlzIGlzIGN1cnJlbnRseVxuICogbm90IHRyaWdnZXJlZCBieSB2aWRlby1qcy1zd2YuIFRoaXMgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBpZlxuICoge0BsaW5rIFRlY2gjbWFudWFsUHJvZ3Jlc3NPbn0gc2hvdWxkIGJlIGNhbGxlZC5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNQcm9ncmVzc0V2ZW50cyA9IGZhbHNlO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIHRoZSBgc291cmNlc2V0YCBldmVudC5cbiAqXG4gKiBBIHRlY2ggc2hvdWxkIHNldCB0aGlzIHRvIGB0cnVlYCBhbmQgdGhlbiB1c2Uge0BsaW5rIFRlY2gjdHJpZ2dlclNvdXJjZXNldH1cbiAqIHRvIHRyaWdnZXIgYSB7QGxpbmsgVGVjaCNldmVudDpzb3VyY2VzZXR9IGF0IHRoZSBlYXJsaWVzdCB0aW1lIGFmdGVyIGdldHRpbmdcbiAqIGEgbmV3IHNvdXJjZS5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNTb3VyY2VzZXQgPSBmYWxzZTtcbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBUZWNoYCBzdXBwb3J0cyB0aGUgYHRpbWV1cGRhdGVgIGV2ZW50LiBUaGlzIGlzIGN1cnJlbnRseVxuICogbm90IHRyaWdnZXJlZCBieSB2aWRlby1qcy1zd2YuIFRoaXMgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBpZlxuICoge0BsaW5rIFRlY2gjbWFudWFsVGltZVVwZGF0ZXN9IHNob3VsZCBiZSBjYWxsZWQuXG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVmYXVsdFxuICovXG5cblRlY2gucHJvdG90eXBlLmZlYXR1cmVzVGltZXVwZGF0ZUV2ZW50cyA9IGZhbHNlO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIHRoZSBuYXRpdmUgYFRleHRUcmFja2BzLlxuICogVGhpcyB3aWxsIGhlbHAgdXMgaW50ZWdyYXRlIHdpdGggbmF0aXZlIGBUZXh0VHJhY2tgcyBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGVtLlxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICogQGRlZmF1bHRcbiAqL1xuXG5UZWNoLnByb3RvdHlwZS5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MgPSBmYWxzZTtcbi8qKlxuICogQSBmdW5jdGlvbmFsIG1peGluIGZvciB0ZWNocyB0aGF0IHdhbnQgdG8gdXNlIHRoZSBTb3VyY2UgSGFuZGxlciBwYXR0ZXJuLlxuICogU291cmNlIGhhbmRsZXJzIGFyZSBzY3JpcHRzIGZvciBoYW5kbGluZyBzcGVjaWZpYyBmb3JtYXRzLlxuICogVGhlIHNvdXJjZSBoYW5kbGVyIHBhdHRlcm4gaXMgdXNlZCBmb3IgYWRhcHRpdmUgZm9ybWF0cyAoSExTLCBEQVNIKSB0aGF0XG4gKiBtYW51YWxseSBsb2FkIHZpZGVvIGRhdGEgYW5kIGZlZWQgaXQgaW50byBhIFNvdXJjZSBCdWZmZXIgKE1lZGlhIFNvdXJjZSBFeHRlbnNpb25zKVxuICogRXhhbXBsZTogYFRlY2gud2l0aFNvdXJjZUhhbmRsZXJzLmNhbGwoTXlUZWNoKTtgXG4gKlxuICogQHBhcmFtIHtUZWNofSBfVGVjaFxuICogICAgICAgIFRoZSB0ZWNoIHRvIGFkZCBzb3VyY2UgaGFuZGxlciBmdW5jdGlvbnMgdG8uXG4gKlxuICogQG1peGVzIFRlY2h+U291cmNlSGFuZGxlckFkZGl0aW9uc1xuICovXG5cblRlY2gud2l0aFNvdXJjZUhhbmRsZXJzID0gZnVuY3Rpb24gKF9UZWNoKSB7XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHNvdXJjZSBoYW5kbGVyXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICogICAgICAgIFRoZSBzb3VyY2UgaGFuZGxlciBjbGFzc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luZGV4XVxuICAgKiAgICAgICAgUmVnaXN0ZXIgaXQgYXQgdGhlIGZvbGxvd2luZyBpbmRleFxuICAgKi9cbiAgX1RlY2gucmVnaXN0ZXJTb3VyY2VIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIsIGluZGV4KSB7XG4gICAgdmFyIGhhbmRsZXJzID0gX1RlY2guc291cmNlSGFuZGxlcnM7XG5cbiAgICBpZiAoIWhhbmRsZXJzKSB7XG4gICAgICBoYW5kbGVycyA9IF9UZWNoLnNvdXJjZUhhbmRsZXJzID0gW107XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGFkZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0XG4gICAgICBpbmRleCA9IGhhbmRsZXJzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBoYW5kbGVycy5zcGxpY2UoaW5kZXgsIDAsIGhhbmRsZXIpO1xuICB9O1xuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHRlY2ggY2FuIHN1cHBvcnQgdGhlIGdpdmVuIHR5cGUuIEFsc28gY2hlY2tzIHRoZVxuICAgKiBUZWNocyBzb3VyY2VIYW5kbGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogICAgICAgICBUaGUgbWltZXR5cGUgdG8gY2hlY2suXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICAncHJvYmFibHknLCAnbWF5YmUnLCBvciAnJyAoZW1wdHkgc3RyaW5nKVxuICAgKi9cblxuXG4gIF9UZWNoLmNhblBsYXlUeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgaGFuZGxlcnMgPSBfVGVjaC5zb3VyY2VIYW5kbGVycyB8fCBbXTtcbiAgICB2YXIgY2FuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY2FuID0gaGFuZGxlcnNbaV0uY2FuUGxheVR5cGUodHlwZSk7XG5cbiAgICAgIGlmIChjYW4pIHtcbiAgICAgICAgcmV0dXJuIGNhbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH07XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBzb3VyY2UgaGFuZGxlciB0aGF0IHN1cHBvcnRzIHRoZSBzb3VyY2UuXG4gICAqXG4gICAqIFRPRE86IEFuc3dlciBxdWVzdGlvbjogc2hvdWxkICdwcm9iYWJseScgYmUgcHJpb3JpdGl6ZWQgb3ZlciAnbWF5YmUnXG4gICAqXG4gICAqIEBwYXJhbSB7VGVjaH5Tb3VyY2VPYmplY3R9IHNvdXJjZVxuICAgKiAgICAgICAgVGhlIHNvdXJjZSBvYmplY3RcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBvcHRpb25zIHBhc3NlZCB0byB0aGUgdGVjaFxuICAgKlxuICAgKiBAcmV0dXJuIHtTb3VyY2VIYW5kbGVyfG51bGx9XG4gICAqICAgICAgICAgIFRoZSBmaXJzdCBzb3VyY2UgaGFuZGxlciB0aGF0IHN1cHBvcnRzIHRoZSBzb3VyY2Ugb3IgbnVsbCBpZlxuICAgKiAgICAgICAgICBubyBTb3VyY2VIYW5kbGVyIHN1cHBvcnRzIHRoZSBzb3VyY2VcbiAgICovXG5cblxuICBfVGVjaC5zZWxlY3RTb3VyY2VIYW5kbGVyID0gZnVuY3Rpb24gKHNvdXJjZSwgb3B0aW9ucykge1xuICAgIHZhciBoYW5kbGVycyA9IF9UZWNoLnNvdXJjZUhhbmRsZXJzIHx8IFtdO1xuICAgIHZhciBjYW47XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjYW4gPSBoYW5kbGVyc1tpXS5jYW5IYW5kbGVTb3VyY2Uoc291cmNlLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGNhbikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcnNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdGVjaCBjYW4gc3VwcG9ydCB0aGUgZ2l2ZW4gc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fSBzcmNPYmpcbiAgICogICAgICAgIFRoZSBzb3VyY2Ugb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgICAgICBUaGUgb3B0aW9ucyBwYXNzZWQgdG8gdGhlIHRlY2hcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgICdwcm9iYWJseScsICdtYXliZScsIG9yICcnIChlbXB0eSBzdHJpbmcpXG4gICAqL1xuXG5cbiAgX1RlY2guY2FuUGxheVNvdXJjZSA9IGZ1bmN0aW9uIChzcmNPYmosIG9wdGlvbnMpIHtcbiAgICB2YXIgc2ggPSBfVGVjaC5zZWxlY3RTb3VyY2VIYW5kbGVyKHNyY09iaiwgb3B0aW9ucyk7XG5cbiAgICBpZiAoc2gpIHtcbiAgICAgIHJldHVybiBzaC5jYW5IYW5kbGVTb3VyY2Uoc3JjT2JqLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH07XG4gIC8qKlxuICAgKiBXaGVuIHVzaW5nIGEgc291cmNlIGhhbmRsZXIsIHByZWZlciBpdHMgaW1wbGVtZW50YXRpb24gb2ZcbiAgICogYW55IGZ1bmN0aW9uIG5vcm1hbGx5IHByb3ZpZGVkIGJ5IHRoZSB0ZWNoLlxuICAgKi9cblxuXG4gIHZhciBkZWZlcnJhYmxlID0gWydzZWVrYWJsZScsICdzZWVraW5nJywgJ2R1cmF0aW9uJ107XG4gIC8qKlxuICAgKiBBIHdyYXBwZXIgYXJvdW5kIHtAbGluayBUZWNoI3NlZWthYmxlfSB0aGF0IHdpbGwgY2FsbCBhIGBTb3VyY2VIYW5kbGVyYHMgc2Vla2FibGVcbiAgICogZnVuY3Rpb24gaWYgaXQgZXhpc3RzLCB3aXRoIGEgZmFsbGJhY2sgdG8gdGhlIFRlY2hzIHNlZWthYmxlIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAbWV0aG9kIF9UZWNoLnNlZWthYmxlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIHdyYXBwZXIgYXJvdW5kIHtAbGluayBUZWNoI2R1cmF0aW9ufSB0aGF0IHdpbGwgY2FsbCBhIGBTb3VyY2VIYW5kbGVyYHMgZHVyYXRpb25cbiAgICogZnVuY3Rpb24gaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UgaXQgd2lsbCBmYWxsYmFjayB0byB0aGUgdGVjaHMgZHVyYXRpb24gZnVuY3Rpb24uXG4gICAqXG4gICAqIEBtZXRob2QgX1RlY2guZHVyYXRpb25cbiAgICovXG5cbiAgZGVmZXJyYWJsZS5mb3JFYWNoKGZ1bmN0aW9uIChmbk5hbWUpIHtcbiAgICB2YXIgb3JpZ2luYWxGbiA9IHRoaXNbZm5OYW1lXTtcblxuICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxGbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXNbZm5OYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnNvdXJjZUhhbmRsZXJfICYmIHRoaXMuc291cmNlSGFuZGxlcl9bZm5OYW1lXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VIYW5kbGVyX1tmbk5hbWVdLmFwcGx5KHRoaXMuc291cmNlSGFuZGxlcl8sIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcmlnaW5hbEZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSwgX1RlY2gucHJvdG90eXBlKTtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIGZ1bmN0aW9uIGZvciBzZXR0aW5nIHRoZSBzb3VyY2UgdXNpbmcgYSBzb3VyY2Ugb2JqZWN0XG4gICAqIGFuZCBzb3VyY2UgaGFuZGxlcnMuXG4gICAqIFNob3VsZCBuZXZlciBiZSBjYWxsZWQgdW5sZXNzIGEgc291cmNlIGhhbmRsZXIgd2FzIGZvdW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fSBzb3VyY2VcbiAgICogICAgICAgIEEgc291cmNlIG9iamVjdCB3aXRoIHNyYyBhbmQgdHlwZSBrZXlzXG4gICAqL1xuXG4gIF9UZWNoLnByb3RvdHlwZS5zZXRTb3VyY2UgPSBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgdmFyIHNoID0gX1RlY2guc2VsZWN0U291cmNlSGFuZGxlcihzb3VyY2UsIHRoaXMub3B0aW9uc18pO1xuXG4gICAgaWYgKCFzaCkge1xuICAgICAgLy8gRmFsbCBiYWNrIHRvIGEgbmF0aXZlIHNvdXJjZSBoYW5kZXIgd2hlbiB1bnN1cHBvcnRlZCBzb3VyY2VzIGFyZVxuICAgICAgLy8gZGVsaWJlcmF0ZWx5IHNldFxuICAgICAgaWYgKF9UZWNoLm5hdGl2ZVNvdXJjZUhhbmRsZXIpIHtcbiAgICAgICAgc2ggPSBfVGVjaC5uYXRpdmVTb3VyY2VIYW5kbGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmVycm9yKCdObyBzb3VyY2UgaGFuZGxlciBmb3VuZCBmb3IgdGhlIGN1cnJlbnQgc291cmNlLicpO1xuICAgICAgfVxuICAgIH0gLy8gRGlzcG9zZSBhbnkgZXhpc3Rpbmcgc291cmNlIGhhbmRsZXJcblxuXG4gICAgdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlcigpO1xuICAgIHRoaXMub2ZmKCdkaXNwb3NlJywgdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlcik7XG5cbiAgICBpZiAoc2ggIT09IF9UZWNoLm5hdGl2ZVNvdXJjZUhhbmRsZXIpIHtcbiAgICAgIHRoaXMuY3VycmVudFNvdXJjZV8gPSBzb3VyY2U7XG4gICAgfVxuXG4gICAgdGhpcy5zb3VyY2VIYW5kbGVyXyA9IHNoLmhhbmRsZVNvdXJjZShzb3VyY2UsIHRoaXMsIHRoaXMub3B0aW9uc18pO1xuICAgIHRoaXMub25lKCdkaXNwb3NlJywgdGhpcy5kaXNwb3NlU291cmNlSGFuZGxlcik7XG4gIH07XG4gIC8qKlxuICAgKiBDbGVhbiB1cCBhbnkgZXhpc3RpbmcgU291cmNlSGFuZGxlcnMgYW5kIGxpc3RlbmVycyB3aGVuIHRoZSBUZWNoIGlzIGRpc3Bvc2VkLlxuICAgKlxuICAgKiBAbGlzdGVucyBUZWNoI2Rpc3Bvc2VcbiAgICovXG5cblxuICBfVGVjaC5wcm90b3R5cGUuZGlzcG9zZVNvdXJjZUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gaWYgd2UgaGF2ZSBhIHNvdXJjZSBhbmQgZ2V0IGFub3RoZXIgb25lXG4gICAgLy8gdGhlbiB3ZSBhcmUgbG9hZGluZyBzb21ldGhpbmcgbmV3XG4gICAgLy8gdGhhbiBjbGVhciBhbGwgb2Ygb3VyIGN1cnJlbnQgdHJhY2tzXG4gICAgaWYgKHRoaXMuY3VycmVudFNvdXJjZV8pIHtcbiAgICAgIHRoaXMuY2xlYXJUcmFja3MoWydhdWRpbycsICd2aWRlbyddKTtcbiAgICAgIHRoaXMuY3VycmVudFNvdXJjZV8gPSBudWxsO1xuICAgIH0gLy8gYWx3YXlzIGNsZWFuIHVwIGF1dG8tdGV4dCB0cmFja3NcblxuXG4gICAgdGhpcy5jbGVhbnVwQXV0b1RleHRUcmFja3MoKTtcblxuICAgIGlmICh0aGlzLnNvdXJjZUhhbmRsZXJfKSB7XG4gICAgICBpZiAodGhpcy5zb3VyY2VIYW5kbGVyXy5kaXNwb3NlKSB7XG4gICAgICAgIHRoaXMuc291cmNlSGFuZGxlcl8uZGlzcG9zZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNvdXJjZUhhbmRsZXJfID0gbnVsbDtcbiAgICB9XG4gIH07XG59OyAvLyBUaGUgYmFzZSBUZWNoIGNsYXNzIG5lZWRzIHRvIGJlIHJlZ2lzdGVyZWQgYXMgYSBDb21wb25lbnQuIEl0IGlzIHRoZSBvbmx5XG4vLyBUZWNoIHRoYXQgY2FuIGJlIHJlZ2lzdGVyZWQgYXMgYSBDb21wb25lbnQuXG5cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdUZWNoJywgVGVjaCk7XG5UZWNoLnJlZ2lzdGVyVGVjaCgnVGVjaCcsIFRlY2gpO1xuLyoqXG4gKiBBIGxpc3Qgb2YgdGVjaHMgdGhhdCBzaG91bGQgYmUgYWRkZWQgdG8gdGVjaE9yZGVyIG9uIFBsYXllcnNcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cblRlY2guZGVmYXVsdFRlY2hPcmRlcl8gPSBbXTtcblxuLyoqXG4gKiBAZmlsZSBtaWRkbGV3YXJlLmpzXG4gKiBAbW9kdWxlIG1pZGRsZXdhcmVcbiAqL1xudmFyIG1pZGRsZXdhcmVzID0ge307XG52YXIgbWlkZGxld2FyZUluc3RhbmNlcyA9IHt9O1xudmFyIFRFUk1JTkFUT1IgPSB7fTtcbi8qKlxuICogQSBtaWRkbGV3YXJlIG9iamVjdCBpcyBhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0IHRoYXQgaGFzIG1ldGhvZHMgdGhhdFxuICogbWF0Y2ggdGhlIHtAbGluayBUZWNofSBtZXRob2RzIGZvdW5kIGluIHRoZSBsaXN0cyBvZiBhbGxvd2VkXG4gKiB7QGxpbmsgbW9kdWxlOm1pZGRsZXdhcmUuYWxsb3dlZEdldHRlcnN8Z2V0dGVyc30sXG4gKiB7QGxpbmsgbW9kdWxlOm1pZGRsZXdhcmUuYWxsb3dlZFNldHRlcnN8c2V0dGVyc30sIGFuZFxuICoge0BsaW5rIG1vZHVsZTptaWRkbGV3YXJlLmFsbG93ZWRNZWRpYXRvcnN8bWVkaWF0b3JzfS5cbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBNaWRkbGV3YXJlT2JqZWN0XG4gKi9cblxuLyoqXG4gKiBBIG1pZGRsZXdhcmUgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHNob3VsZCByZXR1cm4gYVxuICoge0BsaW5rIG1vZHVsZTptaWRkbGV3YXJlfk1pZGRsZXdhcmVPYmplY3R8TWlkZGxld2FyZU9iamVjdH0uXG4gKlxuICogVGhpcyBmYWN0b3J5IHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoIHBsYXllciB3aGVuIG5lZWRlZCwgd2l0aCB0aGUgcGxheWVyXG4gKiBwYXNzZWQgaW4gYXMgYW4gYXJndW1lbnQuXG4gKlxuICogQGNhbGxiYWNrIE1pZGRsZXdhcmVGYWN0b3J5XG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gKiAgICAgICAgQSBWaWRlby5qcyBwbGF5ZXIuXG4gKi9cblxuLyoqXG4gKiBEZWZpbmUgYSBtaWRkbGV3YXJlIHRoYXQgdGhlIHBsYXllciBzaG91bGQgdXNlIGJ5IHdheSBvZiBhIGZhY3RvcnkgZnVuY3Rpb25cbiAqIHRoYXQgcmV0dXJucyBhIG1pZGRsZXdhcmUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdHlwZVxuICogICAgICAgICBUaGUgTUlNRSB0eXBlIHRvIG1hdGNoIG9yIGBcIipcImAgZm9yIGFsbCBNSU1FIHR5cGVzLlxuICpcbiAqIEBwYXJhbSAge01pZGRsZXdhcmVGYWN0b3J5fSBtaWRkbGV3YXJlXG4gKiAgICAgICAgIEEgbWlkZGxld2FyZSBmYWN0b3J5IGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBmb3JcbiAqICAgICAgICAgbWF0Y2hpbmcgdHlwZXMuXG4gKi9cblxuZnVuY3Rpb24gdXNlKHR5cGUsIG1pZGRsZXdhcmUpIHtcbiAgbWlkZGxld2FyZXNbdHlwZV0gPSBtaWRkbGV3YXJlc1t0eXBlXSB8fCBbXTtcbiAgbWlkZGxld2FyZXNbdHlwZV0ucHVzaChtaWRkbGV3YXJlKTtcbn1cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgc2V0cyBhIHNvdXJjZSB1c2luZyBtaWRkbGV3YXJlIGJ5IHJlY3Vyc2luZyB0aHJvdWdoIGFueVxuICogbWF0Y2hpbmcgbWlkZGxld2FyZXMgYW5kIGNhbGxpbmcgYHNldFNvdXJjZWAgb24gZWFjaCwgcGFzc2luZyBhbG9uZyB0aGVcbiAqIHByZXZpb3VzIHJldHVybmVkIHZhbHVlIGVhY2ggdGltZS5cbiAqXG4gKiBAcGFyYW0gIHtQbGF5ZXJ9IHBsYXllclxuICogICAgICAgICBBIHtAbGluayBQbGF5ZXJ9IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSAge1RlY2h+U291cmNlT2JqZWN0fSBzcmNcbiAqICAgICAgICAgQSBzb3VyY2Ugb2JqZWN0LlxuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufVxuICogICAgICAgICBUaGUgbmV4dCBtaWRkbGV3YXJlIHRvIHJ1bi5cbiAqL1xuXG5mdW5jdGlvbiBzZXRTb3VyY2UocGxheWVyLCBzcmMsIG5leHQpIHtcbiAgcGxheWVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzZXRTb3VyY2VIZWxwZXIoc3JjLCBtaWRkbGV3YXJlc1tzcmMudHlwZV0sIG5leHQsIHBsYXllcik7XG4gIH0sIDEpO1xufVxuLyoqXG4gKiBXaGVuIHRoZSB0ZWNoIGlzIHNldCwgcGFzc2VzIHRoZSB0ZWNoIHRvIGVhY2ggbWlkZGxld2FyZSdzIGBzZXRUZWNoYCBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtPYmplY3RbXX0gbWlkZGxld2FyZVxuICogICAgICAgIEFuIGFycmF5IG9mIG1pZGRsZXdhcmUgaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSB7VGVjaH0gdGVjaFxuICogICAgICAgIEEgVmlkZW8uanMgdGVjaC5cbiAqL1xuXG5mdW5jdGlvbiBzZXRUZWNoKG1pZGRsZXdhcmUsIHRlY2gpIHtcbiAgbWlkZGxld2FyZS5mb3JFYWNoKGZ1bmN0aW9uIChtdykge1xuICAgIHJldHVybiBtdy5zZXRUZWNoICYmIG13LnNldFRlY2godGVjaCk7XG4gIH0pO1xufVxuLyoqXG4gKiBDYWxscyBhIGdldHRlciBvbiB0aGUgdGVjaCBmaXJzdCwgdGhyb3VnaCBlYWNoIG1pZGRsZXdhcmVcbiAqIGZyb20gcmlnaHQgdG8gbGVmdCB0byB0aGUgcGxheWVyLlxuICpcbiAqIEBwYXJhbSAge09iamVjdFtdfSBtaWRkbGV3YXJlXG4gKiAgICAgICAgIEFuIGFycmF5IG9mIG1pZGRsZXdhcmUgaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSAge1RlY2h9IHRlY2hcbiAqICAgICAgICAgVGhlIGN1cnJlbnQgdGVjaC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IG1ldGhvZFxuICogICAgICAgICBBIG1ldGhvZCBuYW1lLlxuICpcbiAqIEByZXR1cm4ge01peGVkfVxuICogICAgICAgICBUaGUgZmluYWwgdmFsdWUgZnJvbSB0aGUgdGVjaCBhZnRlciBtaWRkbGV3YXJlIGhhcyBpbnRlcmNlcHRlZCBpdC5cbiAqL1xuXG5mdW5jdGlvbiBnZXQobWlkZGxld2FyZSwgdGVjaCwgbWV0aG9kKSB7XG4gIHJldHVybiBtaWRkbGV3YXJlLnJlZHVjZVJpZ2h0KG1pZGRsZXdhcmVJdGVyYXRvcihtZXRob2QpLCB0ZWNoW21ldGhvZF0oKSk7XG59XG4vKipcbiAqIFRha2VzIHRoZSBhcmd1bWVudCBnaXZlbiB0byB0aGUgcGxheWVyIGFuZCBjYWxscyB0aGUgc2V0dGVyIG1ldGhvZCBvbiBlYWNoXG4gKiBtaWRkbGV3YXJlIGZyb20gbGVmdCB0byByaWdodCB0byB0aGUgdGVjaC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3RbXX0gbWlkZGxld2FyZVxuICogICAgICAgICBBbiBhcnJheSBvZiBtaWRkbGV3YXJlIGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0gIHtUZWNofSB0ZWNoXG4gKiAgICAgICAgIFRoZSBjdXJyZW50IHRlY2guXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBtZXRob2RcbiAqICAgICAgICAgQSBtZXRob2QgbmFtZS5cbiAqXG4gKiBAcGFyYW0gIHtNaXhlZH0gYXJnXG4gKiAgICAgICAgIFRoZSB2YWx1ZSB0byBzZXQgb24gdGhlIHRlY2guXG4gKlxuICogQHJldHVybiB7TWl4ZWR9XG4gKiAgICAgICAgIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBtZXRob2RgIG9mIHRoZSBgdGVjaGAuXG4gKi9cblxuZnVuY3Rpb24gc2V0KG1pZGRsZXdhcmUsIHRlY2gsIG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiB0ZWNoW21ldGhvZF0obWlkZGxld2FyZS5yZWR1Y2UobWlkZGxld2FyZUl0ZXJhdG9yKG1ldGhvZCksIGFyZykpO1xufVxuLyoqXG4gKiBUYWtlcyB0aGUgYXJndW1lbnQgZ2l2ZW4gdG8gdGhlIHBsYXllciBhbmQgY2FsbHMgdGhlIGBjYWxsYCB2ZXJzaW9uIG9mIHRoZVxuICogbWV0aG9kIG9uIGVhY2ggbWlkZGxld2FyZSBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gKlxuICogVGhlbiwgY2FsbCB0aGUgcGFzc2VkIGluIG1ldGhvZCBvbiB0aGUgdGVjaCBhbmQgcmV0dXJuIHRoZSByZXN1bHQgdW5jaGFuZ2VkXG4gKiBiYWNrIHRvIHRoZSBwbGF5ZXIsIHRocm91Z2ggbWlkZGxld2FyZSwgdGhpcyB0aW1lIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3RbXX0gbWlkZGxld2FyZVxuICogICAgICAgICBBbiBhcnJheSBvZiBtaWRkbGV3YXJlIGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0gIHtUZWNofSB0ZWNoXG4gKiAgICAgICAgIFRoZSBjdXJyZW50IHRlY2guXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBtZXRob2RcbiAqICAgICAgICAgQSBtZXRob2QgbmFtZS5cbiAqXG4gKiBAcGFyYW0gIHtNaXhlZH0gYXJnXG4gKiAgICAgICAgIFRoZSB2YWx1ZSB0byBzZXQgb24gdGhlIHRlY2guXG4gKlxuICogQHJldHVybiB7TWl4ZWR9XG4gKiAgICAgICAgIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBtZXRob2RgIG9mIHRoZSBgdGVjaGAsIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gKiAgICAgICAgIHJldHVybiB2YWx1ZXMgb2YgbWlkZGxld2FyZXMuXG4gKi9cblxuZnVuY3Rpb24gbWVkaWF0ZShtaWRkbGV3YXJlLCB0ZWNoLCBtZXRob2QsIGFyZykge1xuICBpZiAoYXJnID09PSB2b2lkIDApIHtcbiAgICBhcmcgPSBudWxsO1xuICB9XG5cbiAgdmFyIGNhbGxNZXRob2QgPSAnY2FsbCcgKyB0b1RpdGxlQ2FzZShtZXRob2QpO1xuICB2YXIgbWlkZGxld2FyZVZhbHVlID0gbWlkZGxld2FyZS5yZWR1Y2UobWlkZGxld2FyZUl0ZXJhdG9yKGNhbGxNZXRob2QpLCBhcmcpO1xuICB2YXIgdGVybWluYXRlZCA9IG1pZGRsZXdhcmVWYWx1ZSA9PT0gVEVSTUlOQVRPUjsgLy8gZGVwcmVjYXRlZC4gVGhlIGBudWxsYCByZXR1cm4gdmFsdWUgc2hvdWxkIGluc3RlYWQgcmV0dXJuIFRFUk1JTkFUT1IgdG9cbiAgLy8gcHJldmVudCBjb25mdXNpb24gaWYgYSB0ZWNocyBtZXRob2QgYWN0dWFsbHkgcmV0dXJucyBudWxsLlxuXG4gIHZhciByZXR1cm5WYWx1ZSA9IHRlcm1pbmF0ZWQgPyBudWxsIDogdGVjaFttZXRob2RdKG1pZGRsZXdhcmVWYWx1ZSk7XG4gIGV4ZWN1dGVSaWdodChtaWRkbGV3YXJlLCBtZXRob2QsIHJldHVyblZhbHVlLCB0ZXJtaW5hdGVkKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBhbGxvd2VkIGdldHRlcnMgd2hlcmUgdGhlIGtleXMgYXJlIG1ldGhvZCBuYW1lcy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbnZhciBhbGxvd2VkR2V0dGVycyA9IHtcbiAgYnVmZmVyZWQ6IDEsXG4gIGN1cnJlbnRUaW1lOiAxLFxuICBkdXJhdGlvbjogMSxcbiAgbXV0ZWQ6IDEsXG4gIHBsYXllZDogMSxcbiAgcGF1c2VkOiAxLFxuICBzZWVrYWJsZTogMSxcbiAgdm9sdW1lOiAxXG59O1xuLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBhbGxvd2VkIHNldHRlcnMgd2hlcmUgdGhlIGtleXMgYXJlIG1ldGhvZCBuYW1lcy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbnZhciBhbGxvd2VkU2V0dGVycyA9IHtcbiAgc2V0Q3VycmVudFRpbWU6IDEsXG4gIHNldE11dGVkOiAxLFxuICBzZXRWb2x1bWU6IDFcbn07XG4vKipcbiAqIEVudW1lcmF0aW9uIG9mIGFsbG93ZWQgbWVkaWF0b3JzIHdoZXJlIHRoZSBrZXlzIGFyZSBtZXRob2QgbmFtZXMuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuXG52YXIgYWxsb3dlZE1lZGlhdG9ycyA9IHtcbiAgcGxheTogMSxcbiAgcGF1c2U6IDFcbn07XG5cbmZ1bmN0aW9uIG1pZGRsZXdhcmVJdGVyYXRvcihtZXRob2QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgbXcpIHtcbiAgICAvLyBpZiB0aGUgcHJldmlvdXMgbWlkZGxld2FyZSB0ZXJtaW5hdGVkLCBwYXNzIGFsb25nIHRoZSB0ZXJtaW5hdGlvblxuICAgIGlmICh2YWx1ZSA9PT0gVEVSTUlOQVRPUikge1xuICAgICAgcmV0dXJuIFRFUk1JTkFUT1I7XG4gICAgfVxuXG4gICAgaWYgKG13W21ldGhvZF0pIHtcbiAgICAgIHJldHVybiBtd1ttZXRob2RdKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVSaWdodChtd3MsIG1ldGhvZCwgdmFsdWUsIHRlcm1pbmF0ZWQpIHtcbiAgZm9yICh2YXIgaSA9IG13cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBtdyA9IG13c1tpXTtcblxuICAgIGlmIChtd1ttZXRob2RdKSB7XG4gICAgICBtd1ttZXRob2RdKHRlcm1pbmF0ZWQsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQ2xlYXIgdGhlIG1pZGRsZXdhcmUgY2FjaGUgZm9yIGEgcGxheWVyLlxuICpcbiAqIEBwYXJhbSAge1BsYXllcn0gcGxheWVyXG4gKiAgICAgICAgIEEge0BsaW5rIFBsYXllcn0gaW5zdGFuY2UuXG4gKi9cblxuXG5mdW5jdGlvbiBjbGVhckNhY2hlRm9yUGxheWVyKHBsYXllcikge1xuICBtaWRkbGV3YXJlSW5zdGFuY2VzW3BsYXllci5pZCgpXSA9IG51bGw7XG59XG4vKipcbiAqIHtcbiAqICBbcGxheWVySWRdOiBbW213RmFjdG9yeSwgbXdJbnN0YW5jZV0sIC4uLl1cbiAqIH1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlRmFjdG9yeShwbGF5ZXIsIG13RmFjdG9yeSkge1xuICB2YXIgbXdzID0gbWlkZGxld2FyZUluc3RhbmNlc1twbGF5ZXIuaWQoKV07XG4gIHZhciBtdyA9IG51bGw7XG5cbiAgaWYgKG13cyA9PT0gdW5kZWZpbmVkIHx8IG13cyA9PT0gbnVsbCkge1xuICAgIG13ID0gbXdGYWN0b3J5KHBsYXllcik7XG4gICAgbWlkZGxld2FyZUluc3RhbmNlc1twbGF5ZXIuaWQoKV0gPSBbW213RmFjdG9yeSwgbXddXTtcbiAgICByZXR1cm4gbXc7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG13cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBfbXdzJGkgPSBtd3NbaV0sXG4gICAgICAgIG13ZiA9IF9td3MkaVswXSxcbiAgICAgICAgbXdpID0gX213cyRpWzFdO1xuXG4gICAgaWYgKG13ZiAhPT0gbXdGYWN0b3J5KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBtdyA9IG13aTtcbiAgfVxuXG4gIGlmIChtdyA9PT0gbnVsbCkge1xuICAgIG13ID0gbXdGYWN0b3J5KHBsYXllcik7XG4gICAgbXdzLnB1c2goW213RmFjdG9yeSwgbXddKTtcbiAgfVxuXG4gIHJldHVybiBtdztcbn1cblxuZnVuY3Rpb24gc2V0U291cmNlSGVscGVyKHNyYywgbWlkZGxld2FyZSwgbmV4dCwgcGxheWVyLCBhY2MsIGxhc3RSdW4pIHtcbiAgaWYgKHNyYyA9PT0gdm9pZCAwKSB7XG4gICAgc3JjID0ge307XG4gIH1cblxuICBpZiAobWlkZGxld2FyZSA9PT0gdm9pZCAwKSB7XG4gICAgbWlkZGxld2FyZSA9IFtdO1xuICB9XG5cbiAgaWYgKGFjYyA9PT0gdm9pZCAwKSB7XG4gICAgYWNjID0gW107XG4gIH1cblxuICBpZiAobGFzdFJ1biA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFJ1biA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIF9taWRkbGV3YXJlID0gbWlkZGxld2FyZSxcbiAgICAgIG13RmFjdG9yeSA9IF9taWRkbGV3YXJlWzBdLFxuICAgICAgbXdyZXN0ID0gX21pZGRsZXdhcmUuc2xpY2UoMSk7IC8vIGlmIG13RmFjdG9yeSBpcyBhIHN0cmluZywgdGhlbiB3ZSdyZSBhdCBhIGZvcmsgaW4gdGhlIHJvYWRcblxuXG4gIGlmICh0eXBlb2YgbXdGYWN0b3J5ID09PSAnc3RyaW5nJykge1xuICAgIHNldFNvdXJjZUhlbHBlcihzcmMsIG1pZGRsZXdhcmVzW213RmFjdG9yeV0sIG5leHQsIHBsYXllciwgYWNjLCBsYXN0UnVuKTsgLy8gaWYgd2UgaGF2ZSBhbiBtd0ZhY3RvcnksIGNhbGwgaXQgd2l0aCB0aGUgcGxheWVyIHRvIGdldCB0aGUgbXcsXG4gICAgLy8gdGhlbiBjYWxsIHRoZSBtdydzIHNldFNvdXJjZSBtZXRob2RcbiAgfSBlbHNlIGlmIChtd0ZhY3RvcnkpIHtcbiAgICB2YXIgbXcgPSBnZXRPckNyZWF0ZUZhY3RvcnkocGxheWVyLCBtd0ZhY3RvcnkpOyAvLyBpZiBzZXRTb3VyY2UgaXNuJ3QgcHJlc2VudCwgaW1wbGljaXRseSBzZWxlY3QgdGhpcyBtaWRkbGV3YXJlXG5cbiAgICBpZiAoIW13LnNldFNvdXJjZSkge1xuICAgICAgYWNjLnB1c2gobXcpO1xuICAgICAgcmV0dXJuIHNldFNvdXJjZUhlbHBlcihzcmMsIG13cmVzdCwgbmV4dCwgcGxheWVyLCBhY2MsIGxhc3RSdW4pO1xuICAgIH1cblxuICAgIG13LnNldFNvdXJjZShhc3NpZ24oe30sIHNyYyksIGZ1bmN0aW9uIChlcnIsIF9zcmMpIHtcbiAgICAgIC8vIHNvbWV0aGluZyBoYXBwZW5lZCwgdHJ5IHRoZSBuZXh0IG1pZGRsZXdhcmUgb24gdGhlIGN1cnJlbnQgbGV2ZWxcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byB1c2UgdGhlIG9sZCBzcmNcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHNldFNvdXJjZUhlbHBlcihzcmMsIG13cmVzdCwgbmV4dCwgcGxheWVyLCBhY2MsIGxhc3RSdW4pO1xuICAgICAgfSAvLyB3ZSd2ZSBzdWNjZWVkZWQsIG5vdyB3ZSBuZWVkIHRvIGdvIGRlZXBlclxuXG5cbiAgICAgIGFjYy5wdXNoKG13KTsgLy8gaWYgaXQncyB0aGUgc2FtZSB0eXBlLCBjb250aW51ZSBkb3duIHRoZSBjdXJyZW50IGNoYWluXG4gICAgICAvLyBvdGhlcndpc2UsIHdlIHdhbnQgdG8gZ28gZG93biB0aGUgbmV3IGNoYWluXG5cbiAgICAgIHNldFNvdXJjZUhlbHBlcihfc3JjLCBzcmMudHlwZSA9PT0gX3NyYy50eXBlID8gbXdyZXN0IDogbWlkZGxld2FyZXNbX3NyYy50eXBlXSwgbmV4dCwgcGxheWVyLCBhY2MsIGxhc3RSdW4pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKG13cmVzdC5sZW5ndGgpIHtcbiAgICBzZXRTb3VyY2VIZWxwZXIoc3JjLCBtd3Jlc3QsIG5leHQsIHBsYXllciwgYWNjLCBsYXN0UnVuKTtcbiAgfSBlbHNlIGlmIChsYXN0UnVuKSB7XG4gICAgbmV4dChzcmMsIGFjYyk7XG4gIH0gZWxzZSB7XG4gICAgc2V0U291cmNlSGVscGVyKHNyYywgbWlkZGxld2FyZXNbJyonXSwgbmV4dCwgcGxheWVyLCBhY2MsIHRydWUpO1xuICB9XG59XG5cbi8qKlxuICogTWltZXR5cGVzXG4gKlxuICogQHNlZSBodHRwOi8vaHVsLmhhcnZhcmQuZWR1L29pcy8vLy8vc3lzdGVtcy93YXgvd2F4LXB1YmxpYy1oZWxwL21pbWV0eXBlcy5odG1cbiAqIEB0eXBlZGVmIE1pbWV0eXBlc35LaW5kXG4gKiBAZW51bVxuICovXG5cbnZhciBNaW1ldHlwZXNLaW5kID0ge1xuICBvcHVzOiAndmlkZW8vb2dnJyxcbiAgb2d2OiAndmlkZW8vb2dnJyxcbiAgbXA0OiAndmlkZW8vbXA0JyxcbiAgbW92OiAndmlkZW8vbXA0JyxcbiAgbTR2OiAndmlkZW8vbXA0JyxcbiAgbWt2OiAndmlkZW8veC1tYXRyb3NrYScsXG4gIG00YTogJ2F1ZGlvL21wNCcsXG4gIG1wMzogJ2F1ZGlvL21wZWcnLFxuICBhYWM6ICdhdWRpby9hYWMnLFxuICBjYWY6ICdhdWRpby94LWNhZicsXG4gIGZsYWM6ICdhdWRpby9mbGFjJyxcbiAgb2dhOiAnYXVkaW8vb2dnJyxcbiAgd2F2OiAnYXVkaW8vd2F2JyxcbiAgbTN1ODogJ2FwcGxpY2F0aW9uL3gtbXBlZ1VSTCcsXG4gIGpwZzogJ2ltYWdlL2pwZWcnLFxuICBqcGVnOiAnaW1hZ2UvanBlZycsXG4gIGdpZjogJ2ltYWdlL2dpZicsXG4gIHBuZzogJ2ltYWdlL3BuZycsXG4gIHN2ZzogJ2ltYWdlL3N2Zyt4bWwnLFxuICB3ZWJwOiAnaW1hZ2Uvd2VicCdcbn07XG4vKipcbiAqIEdldCB0aGUgbWltZXR5cGUgb2YgYSBnaXZlbiBzcmMgdXJsIGlmIHBvc3NpYmxlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNyY1xuICogICAgICAgIFRoZSB1cmwgdG8gdGhlIHNyY1xuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgcmV0dXJuIHRoZSBtaW1ldHlwZSBpZiBpdCB3YXMga25vd24gb3IgZW1wdHkgc3RyaW5nIG90aGVyd2lzZVxuICovXG5cbnZhciBnZXRNaW1ldHlwZSA9IGZ1bmN0aW9uIGdldE1pbWV0eXBlKHNyYykge1xuICBpZiAoc3JjID09PSB2b2lkIDApIHtcbiAgICBzcmMgPSAnJztcbiAgfVxuXG4gIHZhciBleHQgPSBnZXRGaWxlRXh0ZW5zaW9uKHNyYyk7XG4gIHZhciBtaW1ldHlwZSA9IE1pbWV0eXBlc0tpbmRbZXh0LnRvTG93ZXJDYXNlKCldO1xuICByZXR1cm4gbWltZXR5cGUgfHwgJyc7XG59O1xuLyoqXG4gKiBGaW5kIHRoZSBtaW1lIHR5cGUgb2YgYSBnaXZlbiBzb3VyY2Ugc3RyaW5nIGlmIHBvc3NpYmxlLiBVc2VzIHRoZSBwbGF5ZXJcbiAqIHNvdXJjZSBjYWNoZS5cbiAqXG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gKiAgICAgICAgVGhlIHBsYXllciBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjXG4gKiAgICAgICAgVGhlIHNvdXJjZSBzdHJpbmdcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgIFRoZSB0eXBlIHRoYXQgd2FzIGZvdW5kXG4gKi9cblxudmFyIGZpbmRNaW1ldHlwZSA9IGZ1bmN0aW9uIGZpbmRNaW1ldHlwZShwbGF5ZXIsIHNyYykge1xuICBpZiAoIXNyYykge1xuICAgIHJldHVybiAnJztcbiAgfSAvLyAxLiBjaGVjayBmb3IgdGhlIHR5cGUgaW4gdGhlIGBzb3VyY2VgIGNhY2hlXG5cblxuICBpZiAocGxheWVyLmNhY2hlXy5zb3VyY2Uuc3JjID09PSBzcmMgJiYgcGxheWVyLmNhY2hlXy5zb3VyY2UudHlwZSkge1xuICAgIHJldHVybiBwbGF5ZXIuY2FjaGVfLnNvdXJjZS50eXBlO1xuICB9IC8vIDIuIHNlZSBpZiB3ZSBoYXZlIHRoaXMgc291cmNlIGluIG91ciBgY3VycmVudFNvdXJjZXNgIGNhY2hlXG5cblxuICB2YXIgbWF0Y2hpbmdTb3VyY2VzID0gcGxheWVyLmNhY2hlXy5zb3VyY2VzLmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzLnNyYyA9PT0gc3JjO1xuICB9KTtcblxuICBpZiAobWF0Y2hpbmdTb3VyY2VzLmxlbmd0aCkge1xuICAgIHJldHVybiBtYXRjaGluZ1NvdXJjZXNbMF0udHlwZTtcbiAgfSAvLyAzLiBsb29rIGZvciB0aGUgc3JjIHVybCBpbiBzb3VyY2UgZWxlbWVudHMgYW5kIHVzZSB0aGUgdHlwZSB0aGVyZVxuXG5cbiAgdmFyIHNvdXJjZXMgPSBwbGF5ZXIuJCQoJ3NvdXJjZScpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzID0gc291cmNlc1tpXTtcblxuICAgIGlmIChzLnR5cGUgJiYgcy5zcmMgJiYgcy5zcmMgPT09IHNyYykge1xuICAgICAgcmV0dXJuIHMudHlwZTtcbiAgICB9XG4gIH0gLy8gNC4gZmluYWxseSBmYWxsYmFjayB0byBvdXIgbGlzdCBvZiBtaW1lIHR5cGVzIGJhc2VkIG9uIHNyYyB1cmwgZXh0ZW5zaW9uXG5cblxuICByZXR1cm4gZ2V0TWltZXR5cGUoc3JjKTtcbn07XG5cbi8qKlxuICogQG1vZHVsZSBmaWx0ZXItc291cmNlXG4gKi9cbi8qKlxuICogRmlsdGVyIG91dCBzaW5nbGUgYmFkIHNvdXJjZSBvYmplY3RzIG9yIG11bHRpcGxlIHNvdXJjZSBvYmplY3RzIGluIGFuXG4gKiBhcnJheS4gQWxzbyBmbGF0dGVucyBuZXN0ZWQgc291cmNlIG9iamVjdCBhcnJheXMgaW50byBhIDEgZGltZW5zaW9uYWxcbiAqIGFycmF5IG9mIHNvdXJjZSBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7VGVjaH5Tb3VyY2VPYmplY3R8VGVjaH5Tb3VyY2VPYmplY3RbXX0gc3JjXG4gKiAgICAgICAgVGhlIHNyYyBvYmplY3QgdG8gZmlsdGVyXG4gKlxuICogQHJldHVybiB7VGVjaH5Tb3VyY2VPYmplY3RbXX1cbiAqICAgICAgICAgQW4gYXJyYXkgb2Ygc291cmNlb2JqZWN0cyBjb250YWluaW5nIG9ubHkgdmFsaWQgc291cmNlc1xuICpcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGZpbHRlclNvdXJjZSA9IGZ1bmN0aW9uIGZpbHRlclNvdXJjZShzcmMpIHtcbiAgLy8gdHJhdmVyc2UgYXJyYXlcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3JjKSkge1xuICAgIHZhciBuZXdzcmMgPSBbXTtcbiAgICBzcmMuZm9yRWFjaChmdW5jdGlvbiAoc3Jjb2JqKSB7XG4gICAgICBzcmNvYmogPSBmaWx0ZXJTb3VyY2Uoc3Jjb2JqKTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3Jjb2JqKSkge1xuICAgICAgICBuZXdzcmMgPSBuZXdzcmMuY29uY2F0KHNyY29iaik7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNyY29iaikpIHtcbiAgICAgICAgbmV3c3JjLnB1c2goc3Jjb2JqKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzcmMgPSBuZXdzcmM7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNyYyA9PT0gJ3N0cmluZycgJiYgc3JjLnRyaW0oKSkge1xuICAgIC8vIGNvbnZlcnQgc3RyaW5nIGludG8gb2JqZWN0XG4gICAgc3JjID0gW2ZpeFNvdXJjZSh7XG4gICAgICBzcmM6IHNyY1xuICAgIH0pXTtcbiAgfSBlbHNlIGlmIChpc09iamVjdChzcmMpICYmIHR5cGVvZiBzcmMuc3JjID09PSAnc3RyaW5nJyAmJiBzcmMuc3JjICYmIHNyYy5zcmMudHJpbSgpKSB7XG4gICAgLy8gc3JjIGlzIGFscmVhZHkgdmFsaWRcbiAgICBzcmMgPSBbZml4U291cmNlKHNyYyldO1xuICB9IGVsc2Uge1xuICAgIC8vIGludmFsaWQgc291cmNlLCB0dXJuIGl0IGludG8gYW4gZW1wdHkgYXJyYXlcbiAgICBzcmMgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBzcmM7XG59O1xuLyoqXG4gKiBDaGVja3Mgc3JjIG1pbWV0eXBlLCBhZGRpbmcgaXQgd2hlbiBwb3NzaWJsZVxuICpcbiAqIEBwYXJhbSB7VGVjaH5Tb3VyY2VPYmplY3R9IHNyY1xuICogICAgICAgIFRoZSBzcmMgb2JqZWN0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtUZWNoflNvdXJjZU9iamVjdH1cbiAqICAgICAgICBzcmMgT2JqZWN0IHdpdGgga25vd24gdHlwZVxuICovXG5cblxuZnVuY3Rpb24gZml4U291cmNlKHNyYykge1xuICBpZiAoIXNyYy50eXBlKSB7XG4gICAgdmFyIG1pbWV0eXBlID0gZ2V0TWltZXR5cGUoc3JjLnNyYyk7XG5cbiAgICBpZiAobWltZXR5cGUpIHtcbiAgICAgIHNyYy50eXBlID0gbWltZXR5cGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNyYztcbn1cblxuLyoqXG4gKiBUaGUgYE1lZGlhTG9hZGVyYCBpcyB0aGUgYENvbXBvbmVudGAgdGhhdCBkZWNpZGVzIHdoaWNoIHBsYXliYWNrIHRlY2hub2xvZ3kgdG8gbG9hZFxuICogd2hlbiBhIHBsYXllciBpcyBpbml0aWFsaXplZC5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgTWVkaWFMb2FkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVkaWFMb2FkZXIsIF9Db21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYXR0YWNoIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH5SZWFkeUNhbGxiYWNrfSBbcmVhZHldXG4gICAqICAgICAgICBUaGUgZnVuY3Rpb24gdGhhdCBpcyBydW4gd2hlbiB0aGlzIGNvbXBvbmVudCBpcyByZWFkeS5cbiAgICovXG4gIGZ1bmN0aW9uIE1lZGlhTG9hZGVyKHBsYXllciwgb3B0aW9ucywgcmVhZHkpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAvLyBNZWRpYUxvYWRlciBoYXMgbm8gZWxlbWVudFxuICAgIHZhciBvcHRpb25zXyA9IG1lcmdlT3B0aW9ucyh7XG4gICAgICBjcmVhdGVFbDogZmFsc2VcbiAgICB9LCBvcHRpb25zKTtcbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnNfLCByZWFkeSkgfHwgdGhpczsgLy8gSWYgdGhlcmUgYXJlIG5vIHNvdXJjZXMgd2hlbiB0aGUgcGxheWVyIGlzIGluaXRpYWxpemVkLFxuICAgIC8vIGxvYWQgdGhlIGZpcnN0IHN1cHBvcnRlZCBwbGF5YmFjayB0ZWNobm9sb2d5LlxuXG4gICAgaWYgKCFvcHRpb25zLnBsYXllck9wdGlvbnMuc291cmNlcyB8fCBvcHRpb25zLnBsYXllck9wdGlvbnMuc291cmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gb3B0aW9ucy5wbGF5ZXJPcHRpb25zLnRlY2hPcmRlcjsgaSA8IGoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRlY2hOYW1lID0gdG9UaXRsZUNhc2UoaltpXSk7XG4gICAgICAgIHZhciB0ZWNoID0gVGVjaC5nZXRUZWNoKHRlY2hOYW1lKTsgLy8gU3VwcG9ydCBvbGQgYmVoYXZpb3Igb2YgdGVjaHMgYmVpbmcgcmVnaXN0ZXJlZCBhcyBjb21wb25lbnRzLlxuICAgICAgICAvLyBSZW1vdmUgb25jZSB0aGF0IGRlcHJlY2F0ZWQgYmVoYXZpb3IgaXMgcmVtb3ZlZC5cblxuICAgICAgICBpZiAoIXRlY2hOYW1lKSB7XG4gICAgICAgICAgdGVjaCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQodGVjaE5hbWUpO1xuICAgICAgICB9IC8vIENoZWNrIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoaXMgdGVjaG5vbG9neVxuXG5cbiAgICAgICAgaWYgKHRlY2ggJiYgdGVjaC5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgcGxheWVyLmxvYWRUZWNoXyh0ZWNoTmFtZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTG9vcCB0aHJvdWdoIHBsYXliYWNrIHRlY2hub2xvZ2llcyAoSFRNTDUsIEZsYXNoKSBhbmQgY2hlY2sgZm9yIHN1cHBvcnQuXG4gICAgICAvLyBUaGVuIGxvYWQgdGhlIGJlc3Qgc291cmNlLlxuICAgICAgLy8gQSBmZXcgYXNzdW1wdGlvbnMgaGVyZTpcbiAgICAgIC8vICAgQWxsIHBsYXliYWNrIHRlY2hub2xvZ2llcyByZXNwZWN0IHByZWxvYWQgZmFsc2UuXG4gICAgICBwbGF5ZXIuc3JjKG9wdGlvbnMucGxheWVyT3B0aW9ucy5zb3VyY2VzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gTWVkaWFMb2FkZXI7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTWVkaWFMb2FkZXInLCBNZWRpYUxvYWRlcik7XG5cbi8qKlxuICogQ29tcG9uZW50IHdoaWNoIGlzIGNsaWNrYWJsZSBvciBrZXlib2FyZCBhY3Rpb25hYmxlLCBidXQgaXMgbm90IGFcbiAqIG5hdGl2ZSBIVE1MIGJ1dHRvbi5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgQ2xpY2thYmxlQ29tcG9uZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENsaWNrYWJsZUNvbXBvbmVudCwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtICB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gIHtmdW5jdGlvbn0gW29wdGlvbnMuY2xpY2tIYW5kbGVyXVxuICAgKiAgICAgICAgIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIC8gYWN0aXZhdGVkXG4gICAqL1xuICBmdW5jdGlvbiBDbGlja2FibGVDb21wb25lbnQocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuZW1pdFRhcEV2ZW50cygpO1xuXG4gICAgX3RoaXMuZW5hYmxlKCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYENsaWNrYWJsZUNvbXBvbmVudGBzIERPTSBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhZz1kaXZdXG4gICAqICAgICAgICBUaGUgZWxlbWVudCdzIG5vZGUgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wcz17fV1cbiAgICogICAgICAgIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGJlIHNldCBvbiB0aGUgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFthdHRyaWJ1dGVzPXt9XVxuICAgKiAgICAgICAgQW4gb2JqZWN0IG9mIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgc2V0IG9uIHRoZSBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgZ2V0cyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDbGlja2FibGVDb21wb25lbnQucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKHRhZywgcHJvcHMsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAodGFnID09PSB2b2lkIDApIHtcbiAgICAgIHRhZyA9ICdkaXYnO1xuICAgIH1cblxuICAgIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9wcyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChhdHRyaWJ1dGVzID09PSB2b2lkIDApIHtcbiAgICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICB9XG5cbiAgICBwcm9wcyA9IGFzc2lnbih7XG4gICAgICBpbm5lckhUTUw6ICc8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIiBjbGFzcz1cInZqcy1pY29uLXBsYWNlaG9sZGVyXCI+PC9zcGFuPicsXG4gICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRDU1NDbGFzcygpLFxuICAgICAgdGFiSW5kZXg6IDBcbiAgICB9LCBwcm9wcyk7XG5cbiAgICBpZiAodGFnID09PSAnYnV0dG9uJykge1xuICAgICAgbG9nLmVycm9yKFwiQ3JlYXRpbmcgYSBDbGlja2FibGVDb21wb25lbnQgd2l0aCBhbiBIVE1MIGVsZW1lbnQgb2YgXCIgKyB0YWcgKyBcIiBpcyBub3Qgc3VwcG9ydGVkOyB1c2UgYSBCdXR0b24gaW5zdGVhZC5cIik7XG4gICAgfSAvLyBBZGQgQVJJQSBhdHRyaWJ1dGVzIGZvciBjbGlja2FibGUgZWxlbWVudCB3aGljaCBpcyBub3QgYSBuYXRpdmUgSFRNTCBidXR0b25cblxuXG4gICAgYXR0cmlidXRlcyA9IGFzc2lnbih7XG4gICAgICByb2xlOiAnYnV0dG9uJ1xuICAgIH0sIGF0dHJpYnV0ZXMpO1xuICAgIHRoaXMudGFiSW5kZXhfID0gcHJvcHMudGFiSW5kZXg7XG5cbiAgICB2YXIgZWwgPSBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsIHRhZywgcHJvcHMsIGF0dHJpYnV0ZXMpO1xuXG4gICAgdGhpcy5jcmVhdGVDb250cm9sVGV4dEVsKGVsKTtcbiAgICByZXR1cm4gZWw7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIC8vIHJlbW92ZSBjb250cm9sVGV4dEVsXyBvbiBkaXNwb3NlXG4gICAgdGhpcy5jb250cm9sVGV4dEVsXyA9IG51bGw7XG5cbiAgICBfQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNvbnRyb2wgdGV4dCBlbGVtZW50IG9uIHRoaXMgYENsaWNrYWJsZUNvbXBvbmVudGBcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBbZWxdXG4gICAqICAgICAgICBQYXJlbnQgZWxlbWVudCBmb3IgdGhlIGNvbnRyb2wgdGV4dC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgY29udHJvbCB0ZXh0IGVsZW1lbnQgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUNvbnRyb2xUZXh0RWwgPSBmdW5jdGlvbiBjcmVhdGVDb250cm9sVGV4dEVsKGVsKSB7XG4gICAgdGhpcy5jb250cm9sVGV4dEVsXyA9IGNyZWF0ZUVsKCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWNvbnRyb2wtdGV4dCdcbiAgICB9LCB7XG4gICAgICAvLyBsZXQgdGhlIHNjcmVlbiByZWFkZXIgdXNlciBrbm93IHRoYXQgdGhlIHRleHQgb2YgdGhlIGVsZW1lbnQgbWF5IGNoYW5nZVxuICAgICAgJ2FyaWEtbGl2ZSc6ICdwb2xpdGUnXG4gICAgfSk7XG5cbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuY29udHJvbFRleHRFbF8pO1xuICAgIH1cblxuICAgIHRoaXMuY29udHJvbFRleHQodGhpcy5jb250cm9sVGV4dF8sIGVsKTtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sVGV4dEVsXztcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgbG9jYWxpemUgdGV4dCB0byB1c2UgZm9yIHRoZSBjb250cm9scyBvbiB0aGUgYENsaWNrYWJsZUNvbXBvbmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGV4dF1cbiAgICogICAgICAgIENvbnRyb2wgdGV4dCBmb3IgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBbZWw9dGhpcy5lbCgpXVxuICAgKiAgICAgICAgRWxlbWVudCB0byBzZXQgdGhlIHRpdGxlIG9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgLSBUaGUgY29udHJvbCB0ZXh0IHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb250cm9sVGV4dCA9IGZ1bmN0aW9uIGNvbnRyb2xUZXh0KHRleHQsIGVsKSB7XG4gICAgaWYgKGVsID09PSB2b2lkIDApIHtcbiAgICAgIGVsID0gdGhpcy5lbCgpO1xuICAgIH1cblxuICAgIGlmICh0ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRyb2xUZXh0XyB8fCAnTmVlZCBUZXh0JztcbiAgICB9XG5cbiAgICB2YXIgbG9jYWxpemVkVGV4dCA9IHRoaXMubG9jYWxpemUodGV4dCk7XG4gICAgdGhpcy5jb250cm9sVGV4dF8gPSB0ZXh0O1xuICAgIHRleHRDb250ZW50KHRoaXMuY29udHJvbFRleHRFbF8sIGxvY2FsaXplZFRleHQpO1xuXG4gICAgaWYgKCF0aGlzLm5vbkljb25Db250cm9sKSB7XG4gICAgICAvLyBTZXQgdGl0bGUgYXR0cmlidXRlIGlmIG9ubHkgYW4gaWNvbiBpcyBzaG93blxuICAgICAgZWwuc2V0QXR0cmlidXRlKCd0aXRsZScsIGxvY2FsaXplZFRleHQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtY29udHJvbCB2anMtYnV0dG9uIFwiICsgX0NvbXBvbmVudC5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGUgdGhpcyBgQ2xpY2thYmxlQ29tcG9uZW50YFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgaWYgKCF0aGlzLmVuYWJsZWRfKSB7XG4gICAgICB0aGlzLmVuYWJsZWRfID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1kaXNhYmxlZCcpO1xuICAgICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy50YWJJbmRleF8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCB0aGlzLnRhYkluZGV4Xyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub24oWyd0YXAnLCAnY2xpY2snXSwgdGhpcy5oYW5kbGVDbGljayk7XG4gICAgICB0aGlzLm9uKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGUgdGhpcyBgQ2xpY2thYmxlQ29tcG9uZW50YFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICB0aGlzLmVuYWJsZWRfID0gZmFsc2U7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLWRpc2FibGVkJyk7XG4gICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcblxuICAgIGlmICh0eXBlb2YgdGhpcy50YWJJbmRleF8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmVsXy5yZW1vdmVBdHRyaWJ1dGUoJ3RhYkluZGV4Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5vZmYoJ21vdXNlb3ZlcicsIHRoaXMuaGFuZGxlTW91c2VPdmVyKTtcbiAgICB0aGlzLm9mZignbW91c2VvdXQnLCB0aGlzLmhhbmRsZU1vdXNlT3V0KTtcbiAgICB0aGlzLm9mZihbJ3RhcCcsICdjbGljayddLCB0aGlzLmhhbmRsZUNsaWNrKTtcbiAgICB0aGlzLm9mZigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiBhIGBDbGlja2FibGVDb21wb25lbnRgIHJlY2VpdmVzIGFcbiAgICogYGNsaWNrYCBvciBgdGFwYCBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBgdGFwYCBvciBgY2xpY2tgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zXy5jbGlja0hhbmRsZXIpIHtcbiAgICAgIHRoaXMub3B0aW9uc18uY2xpY2tIYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiBhIGBDbGlja2FibGVDb21wb25lbnRgIHJlY2VpdmVzIGFcbiAgICogYGtleWRvd25gIGV2ZW50LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpZiB0aGUga2V5IGlzIFNwYWNlIG9yIEVudGVyLCBpdCB3aWxsIHRyaWdnZXIgYSBgY2xpY2tgIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMga2V5ZG93blxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIC8vIFN1cHBvcnQgU3BhY2Ugb3IgRW50ZXIga2V5IG9wZXJhdGlvbiB0byBmaXJlIGEgY2xpY2sgZXZlbnQuIEFsc28sXG4gICAgLy8gcHJldmVudCB0aGUgZXZlbnQgZnJvbSBwcm9wYWdhdGluZyB0aHJvdWdoIHRoZSBET00gYW5kIHRyaWdnZXJpbmdcbiAgICAvLyBQbGF5ZXIgaG90a2V5cy5cbiAgICBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnU3BhY2UnKSB8fCBrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdFbnRlcicpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBhc3Mga2V5cHJlc3MgaGFuZGxpbmcgdXAgZm9yIHVuc3VwcG9ydGVkIGtleXNcbiAgICAgIF9Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZUtleURvd24uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBDbGlja2FibGVDb21wb25lbnQ7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnQ2xpY2thYmxlQ29tcG9uZW50JywgQ2xpY2thYmxlQ29tcG9uZW50KTtcblxuLyoqXG4gKiBBIGBDbGlja2FibGVDb21wb25lbnRgIHRoYXQgaGFuZGxlcyBzaG93aW5nIHRoZSBwb3N0ZXIgaW1hZ2UgZm9yIHRoZSBwbGF5ZXIuXG4gKlxuICogQGV4dGVuZHMgQ2xpY2thYmxlQ29tcG9uZW50XG4gKi9cblxudmFyIFBvc3RlckltYWdlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ2xpY2thYmxlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFBvc3RlckltYWdlLCBfQ2xpY2thYmxlQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGF0dGFjaCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFBvc3RlckltYWdlKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NsaWNrYWJsZUNvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLnVwZGF0ZSgpO1xuXG4gICAgcGxheWVyLm9uKCdwb3N0ZXJjaGFuZ2UnLCBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy51cGRhdGUpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFuIHVwIGFuZCBkaXNwb3NlIG9mIHRoZSBgUG9zdGVySW1hZ2VgLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQb3N0ZXJJbWFnZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMucGxheWVyKCkub2ZmKCdwb3N0ZXJjaGFuZ2UnLCB0aGlzLnVwZGF0ZSk7XG5cbiAgICBfQ2xpY2thYmxlQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYFBvc3RlckltYWdlYHMgRE9NIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwkMSgpIHtcbiAgICB2YXIgZWwgPSBjcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXBvc3RlcicsXG4gICAgICAvLyBEb24ndCB3YW50IHBvc3RlciB0byBiZSB0YWJiYWJsZS5cbiAgICAgIHRhYkluZGV4OiAtMVxuICAgIH0pO1xuICAgIHJldHVybiBlbDtcbiAgfVxuICAvKipcbiAgICogQW4ge0BsaW5rIEV2ZW50VGFyZ2V0fkV2ZW50TGlzdGVuZXJ9IGZvciB7QGxpbmsgUGxheWVyI3Bvc3RlcmNoYW5nZX0gZXZlbnRzLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjcG9zdGVyY2hhbmdlXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBgUGxheWVyI3Bvc3RlcmNoYW5nZWAgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBmdW5jdGlvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGV2ZW50KSB7XG4gICAgdmFyIHVybCA9IHRoaXMucGxheWVyKCkucG9zdGVyKCk7XG4gICAgdGhpcy5zZXRTcmModXJsKTsgLy8gSWYgdGhlcmUncyBubyBwb3N0ZXIgc291cmNlIHdlIHNob3VsZCBkaXNwbGF5Om5vbmUgb24gdGhpcyBjb21wb25lbnRcbiAgICAvLyBzbyBpdCdzIG5vdCBzdGlsbCBjbGlja2FibGUgb3IgcmlnaHQtY2xpY2thYmxlXG5cbiAgICBpZiAodXJsKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIHNvdXJjZSBvZiB0aGUgYFBvc3RlckltYWdlYCBkZXBlbmRpbmcgb24gdGhlIGRpc3BsYXkgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqICAgICAgICBUaGUgVVJMIHRvIHRoZSBzb3VyY2UgZm9yIHRoZSBgUG9zdGVySW1hZ2VgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRTcmMgPSBmdW5jdGlvbiBzZXRTcmModXJsKSB7XG4gICAgdmFyIGJhY2tncm91bmRJbWFnZSA9ICcnOyAvLyBBbnkgZmFsc3kgdmFsdWUgc2hvdWxkIHN0YXkgYXMgYW4gZW1wdHkgc3RyaW5nLCBvdGhlcndpc2VcbiAgICAvLyB0aGlzIHdpbGwgdGhyb3cgYW4gZXh0cmEgZXJyb3JcblxuICAgIGlmICh1cmwpIHtcbiAgICAgIGJhY2tncm91bmRJbWFnZSA9IFwidXJsKFxcXCJcIiArIHVybCArIFwiXFxcIilcIjtcbiAgICB9XG5cbiAgICB0aGlzLmVsXy5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBiYWNrZ3JvdW5kSW1hZ2U7XG4gIH1cbiAgLyoqXG4gICAqIEFuIHtAbGluayBFdmVudFRhcmdldH5FdmVudExpc3RlbmVyfSBmb3IgY2xpY2tzIG9uIHRoZSBgUG9zdGVySW1hZ2VgLiBTZWVcbiAgICoge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudCNoYW5kbGVDbGlja30gZm9yIGluc3RhbmNlcyB3aGVyZSB0aGlzIHdpbGwgYmUgdHJpZ2dlcmVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICogQGxpc3RlbnMga2V5ZG93blxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKyAgICAgICAgVGhlIGBjbGlja2AsIGB0YXBgIG9yIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIC8vIFdlIGRvbid0IHdhbnQgYSBjbGljayB0byB0cmlnZ2VyIHBsYXliYWNrIHdoZW4gY29udHJvbHMgYXJlIGRpc2FibGVkXG4gICAgaWYgKCF0aGlzLnBsYXllcl8uY29udHJvbHMoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2VJc0VuY3J5cHRlZCA9IHRoaXMucGxheWVyXy51c2luZ1BsdWdpbignZW1lJykgJiYgdGhpcy5wbGF5ZXJfLmVtZS5zZXNzaW9ucyAmJiB0aGlzLnBsYXllcl8uZW1lLnNlc3Npb25zLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAodGhpcy5wbGF5ZXJfLnRlY2godHJ1ZSkgJiYgLy8gV2UndmUgb2JzZXJ2ZWQgYSBidWcgaW4gSUUgYW5kIEVkZ2Ugd2hlbiBwbGF5aW5nIGJhY2sgRFJNIGNvbnRlbnQgd2hlcmVcbiAgICAvLyBjYWxsaW5nIC5mb2N1cygpIG9uIHRoZSB2aWRlbyBlbGVtZW50IGNhdXNlcyB0aGUgdmlkZW8gdG8gZ28gYmxhY2ssXG4gICAgLy8gc28gd2UgYXZvaWQgaXQgaW4gdGhhdCBzcGVjaWZpYyBjYXNlXG4gICAgISgoSUVfVkVSU0lPTiB8fCBJU19FREdFKSAmJiBzb3VyY2VJc0VuY3J5cHRlZCkpIHtcbiAgICAgIHRoaXMucGxheWVyXy50ZWNoKHRydWUpLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGxheWVyXy5wYXVzZWQoKSkge1xuICAgICAgc2lsZW5jZVByb21pc2UodGhpcy5wbGF5ZXJfLnBsYXkoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxheWVyXy5wYXVzZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUG9zdGVySW1hZ2U7XG59KENsaWNrYWJsZUNvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUG9zdGVySW1hZ2UnLCBQb3N0ZXJJbWFnZSk7XG5cbnZhciBkYXJrR3JheSA9ICcjMjIyJztcbnZhciBsaWdodEdyYXkgPSAnI2NjYyc7XG52YXIgZm9udE1hcCA9IHtcbiAgbW9ub3NwYWNlOiAnbW9ub3NwYWNlJyxcbiAgc2Fuc1NlcmlmOiAnc2Fucy1zZXJpZicsXG4gIHNlcmlmOiAnc2VyaWYnLFxuICBtb25vc3BhY2VTYW5zU2VyaWY6ICdcIkFuZGFsZSBNb25vXCIsIFwiTHVjaWRhIENvbnNvbGVcIiwgbW9ub3NwYWNlJyxcbiAgbW9ub3NwYWNlU2VyaWY6ICdcIkNvdXJpZXIgTmV3XCIsIG1vbm9zcGFjZScsXG4gIHByb3BvcnRpb25hbFNhbnNTZXJpZjogJ3NhbnMtc2VyaWYnLFxuICBwcm9wb3J0aW9uYWxTZXJpZjogJ3NlcmlmJyxcbiAgY2FzdWFsOiAnXCJDb21pYyBTYW5zIE1TXCIsIEltcGFjdCwgZmFudGFzeScsXG4gIHNjcmlwdDogJ1wiTW9ub3R5cGUgQ29yc2l2YVwiLCBjdXJzaXZlJyxcbiAgc21hbGxjYXBzOiAnXCJBbmRhbGUgTW9ub1wiLCBcIkx1Y2lkYSBDb25zb2xlXCIsIG1vbm9zcGFjZSwgc2Fucy1zZXJpZidcbn07XG4vKipcbiAqIENvbnN0cnVjdCBhbiByZ2JhIGNvbG9yIGZyb20gYSBnaXZlbiBoZXggY29sb3IgY29kZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY29sb3JcbiAqICAgICAgICBIZXggbnVtYmVyIGZvciBjb2xvciwgbGlrZSAjZjBlIG9yICNmNjA0ZTIuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG9wYWNpdHlcbiAqICAgICAgICBWYWx1ZSBmb3Igb3BhY2l0eSwgMC4wIC0gMS4wLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgVGhlIHJnYmEgY29sb3IgdGhhdCB3YXMgY3JlYXRlZCwgbGlrZSAncmdiYSgyNTUsIDAsIDAsIDAuMyknLlxuICovXG5cbmZ1bmN0aW9uIGNvbnN0cnVjdENvbG9yKGNvbG9yLCBvcGFjaXR5KSB7XG4gIHZhciBoZXg7XG5cbiAgaWYgKGNvbG9yLmxlbmd0aCA9PT0gNCkge1xuICAgIC8vIGNvbG9yIGxvb2tzIGxpa2UgXCIjZjBlXCJcbiAgICBoZXggPSBjb2xvclsxXSArIGNvbG9yWzFdICsgY29sb3JbMl0gKyBjb2xvclsyXSArIGNvbG9yWzNdICsgY29sb3JbM107XG4gIH0gZWxzZSBpZiAoY29sb3IubGVuZ3RoID09PSA3KSB7XG4gICAgLy8gY29sb3IgbG9va3MgbGlrZSBcIiNmNjA0ZTJcIlxuICAgIGhleCA9IGNvbG9yLnNsaWNlKDEpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2xvciBjb2RlIHByb3ZpZGVkLCAnICsgY29sb3IgKyAnOyBtdXN0IGJlIGZvcm1hdHRlZCBhcyBlLmcuICNmMGUgb3IgI2Y2MDRlMi4nKTtcbiAgfVxuXG4gIHJldHVybiAncmdiYSgnICsgcGFyc2VJbnQoaGV4LnNsaWNlKDAsIDIpLCAxNikgKyAnLCcgKyBwYXJzZUludChoZXguc2xpY2UoMiwgNCksIDE2KSArICcsJyArIHBhcnNlSW50KGhleC5zbGljZSg0LCA2KSwgMTYpICsgJywnICsgb3BhY2l0eSArICcpJztcbn1cbi8qKlxuICogVHJ5IHRvIHVwZGF0ZSB0aGUgc3R5bGUgb2YgYSBET00gZWxlbWVudC4gU29tZSBzdHlsZSBjaGFuZ2VzIHdpbGwgdGhyb3cgYW4gZXJyb3IsXG4gKiBwYXJ0aWN1bGFybHkgaW4gSUU4LiBUaG9zZSBzaG91bGQgYmUgbm9vcHMuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogICAgICAgIFRoZSBET00gZWxlbWVudCB0byBiZSBzdHlsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlXG4gKiAgICAgICAgVGhlIENTUyBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCB0aGF0IHNob3VsZCBiZSBzdHlsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJ1bGVcbiAqICAgICAgICBUaGUgc3R5bGUgcnVsZSB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIHRvIHRoZSBwcm9wZXJ0eS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRyeVVwZGF0ZVN0eWxlKGVsLCBzdHlsZSwgcnVsZSkge1xuICB0cnkge1xuICAgIGVsLnN0eWxlW3N0eWxlXSA9IHJ1bGU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBTYXRpc2ZpZXMgbGludGVyLlxuICAgIHJldHVybjtcbiAgfVxufVxuLyoqXG4gKiBUaGUgY29tcG9uZW50IGZvciBkaXNwbGF5aW5nIHRleHQgdHJhY2sgY3Vlcy5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG5cbnZhciBUZXh0VHJhY2tEaXNwbGF5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRleHRUcmFja0Rpc3BsYXksIF9Db21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH5SZWFkeUNhbGxiYWNrfSBbcmVhZHldXG4gICAqICAgICAgICBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGBUZXh0VHJhY2tEaXNwbGF5YCBpcyByZWFkeS5cbiAgICovXG4gIGZ1bmN0aW9uIFRleHRUcmFja0Rpc3BsYXkocGxheWVyLCBvcHRpb25zLCByZWFkeSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucywgcmVhZHkpIHx8IHRoaXM7XG4gICAgdmFyIHVwZGF0ZURpc3BsYXlIYW5kbGVyID0gYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMudXBkYXRlRGlzcGxheSk7XG4gICAgcGxheWVyLm9uKCdsb2Fkc3RhcnQnLCBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy50b2dnbGVEaXNwbGF5KSk7XG4gICAgcGxheWVyLm9uKCd0ZXh0dHJhY2tjaGFuZ2UnLCB1cGRhdGVEaXNwbGF5SGFuZGxlcik7XG4gICAgcGxheWVyLm9uKCdsb2FkZWRtZXRhZGF0YScsIGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLnByZXNlbGVjdFRyYWNrKSk7IC8vIFRoaXMgdXNlZCB0byBiZSBjYWxsZWQgZHVyaW5nIHBsYXllciBpbml0LCBidXQgd2FzIGNhdXNpbmcgYW4gZXJyb3JcbiAgICAvLyBpZiBhIHRyYWNrIHNob3VsZCBzaG93IGJ5IGRlZmF1bHQgYW5kIHRoZSBkaXNwbGF5IGhhZG4ndCBsb2FkZWQgeWV0LlxuICAgIC8vIFNob3VsZCBwcm9iYWJseSBiZSBtb3ZlZCB0byBhbiBleHRlcm5hbCB0cmFjayBsb2FkZXIgd2hlbiB3ZSBzdXBwb3J0XG4gICAgLy8gdHJhY2tzIHRoYXQgZG9uJ3QgbmVlZCBhIGRpc3BsYXkuXG5cbiAgICBwbGF5ZXIucmVhZHkoYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHBsYXllci50ZWNoXyAmJiBwbGF5ZXIudGVjaF8uZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHBsYXllci5vbignZnVsbHNjcmVlbmNoYW5nZScsIHVwZGF0ZURpc3BsYXlIYW5kbGVyKTtcbiAgICAgIHBsYXllci5vbigncGxheWVycmVzaXplJywgdXBkYXRlRGlzcGxheUhhbmRsZXIpO1xuICAgICAgd2luZG93JDEuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB1cGRhdGVEaXNwbGF5SGFuZGxlcik7XG4gICAgICBwbGF5ZXIub24oJ2Rpc3Bvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3ckMS5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHVwZGF0ZURpc3BsYXlIYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHRyYWNrcyA9IHRoaXMub3B0aW9uc18ucGxheWVyT3B0aW9ucy50cmFja3MgfHwgW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMucGxheWVyXy5hZGRSZW1vdGVUZXh0VHJhY2sodHJhY2tzW2ldLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcmVzZWxlY3RUcmFjaygpO1xuICAgIH0pKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICogUHJlc2VsZWN0IGEgdHJhY2sgZm9sbG93aW5nIHRoaXMgcHJlY2VkZW5jZTpcbiAgKiAtIG1hdGNoZXMgdGhlIHByZXZpb3VzbHkgc2VsZWN0ZWQge0BsaW5rIFRleHRUcmFja30ncyBsYW5ndWFnZSBhbmQga2luZFxuICAqIC0gbWF0Y2hlcyB0aGUgcHJldmlvdXNseSBzZWxlY3RlZCB7QGxpbmsgVGV4dFRyYWNrfSdzIGxhbmd1YWdlIG9ubHlcbiAgKiAtIGlzIHRoZSBmaXJzdCBkZWZhdWx0IGNhcHRpb25zIHRyYWNrXG4gICogLSBpcyB0aGUgZmlyc3QgZGVmYXVsdCBkZXNjcmlwdGlvbnMgdHJhY2tcbiAgKlxuICAqIEBsaXN0ZW5zIFBsYXllciNsb2Fkc3RhcnRcbiAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBUZXh0VHJhY2tEaXNwbGF5LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucHJlc2VsZWN0VHJhY2sgPSBmdW5jdGlvbiBwcmVzZWxlY3RUcmFjaygpIHtcbiAgICB2YXIgbW9kZXMgPSB7XG4gICAgICBjYXB0aW9uczogMSxcbiAgICAgIHN1YnRpdGxlczogMVxuICAgIH07XG4gICAgdmFyIHRyYWNrTGlzdCA9IHRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCk7XG4gICAgdmFyIHVzZXJQcmVmID0gdGhpcy5wbGF5ZXJfLmNhY2hlXy5zZWxlY3RlZExhbmd1YWdlO1xuICAgIHZhciBmaXJzdERlc2M7XG4gICAgdmFyIGZpcnN0Q2FwdGlvbnM7XG4gICAgdmFyIHByZWZlcnJlZFRyYWNrO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0cmFjayA9IHRyYWNrTGlzdFtpXTtcblxuICAgICAgaWYgKHVzZXJQcmVmICYmIHVzZXJQcmVmLmVuYWJsZWQgJiYgdXNlclByZWYubGFuZ3VhZ2UgJiYgdXNlclByZWYubGFuZ3VhZ2UgPT09IHRyYWNrLmxhbmd1YWdlICYmIHRyYWNrLmtpbmQgaW4gbW9kZXMpIHtcbiAgICAgICAgLy8gQWx3YXlzIGNob29zZSB0aGUgdHJhY2sgdGhhdCBtYXRjaGVzIGJvdGggbGFuZ3VhZ2UgYW5kIGtpbmRcbiAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09IHVzZXJQcmVmLmtpbmQpIHtcbiAgICAgICAgICBwcmVmZXJyZWRUcmFjayA9IHRyYWNrOyAvLyBvciBjaG9vc2UgdGhlIGZpcnN0IHRyYWNrIHRoYXQgbWF0Y2hlcyBsYW5ndWFnZVxuICAgICAgICB9IGVsc2UgaWYgKCFwcmVmZXJyZWRUcmFjaykge1xuICAgICAgICAgIHByZWZlcnJlZFRyYWNrID0gdHJhY2s7XG4gICAgICAgIH0gLy8gY2xlYXIgZXZlcnl0aGluZyBpZiBvZmZUZXh0VHJhY2tNZW51SXRlbSB3YXMgY2xpY2tlZFxuXG4gICAgICB9IGVsc2UgaWYgKHVzZXJQcmVmICYmICF1c2VyUHJlZi5lbmFibGVkKSB7XG4gICAgICAgIHByZWZlcnJlZFRyYWNrID0gbnVsbDtcbiAgICAgICAgZmlyc3REZXNjID0gbnVsbDtcbiAgICAgICAgZmlyc3RDYXB0aW9ucyA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHRyYWNrW1wiZGVmYXVsdFwiXSkge1xuICAgICAgICBpZiAodHJhY2sua2luZCA9PT0gJ2Rlc2NyaXB0aW9ucycgJiYgIWZpcnN0RGVzYykge1xuICAgICAgICAgIGZpcnN0RGVzYyA9IHRyYWNrO1xuICAgICAgICB9IGVsc2UgaWYgKHRyYWNrLmtpbmQgaW4gbW9kZXMgJiYgIWZpcnN0Q2FwdGlvbnMpIHtcbiAgICAgICAgICBmaXJzdENhcHRpb25zID0gdHJhY2s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIFRoZSBwcmVmZXJyZWRUcmFjayBtYXRjaGVzIHRoZSB1c2VyIHByZWZlcmVuY2UgYW5kIHRha2VzXG4gICAgLy8gcHJlY2VkZW5jZSBvdmVyIGFsbCB0aGUgb3RoZXIgdHJhY2tzLlxuICAgIC8vIFNvLCBkaXNwbGF5IHRoZSBwcmVmZXJyZWRUcmFjayBiZWZvcmUgdGhlIGZpcnN0IGRlZmF1bHQgdHJhY2tcbiAgICAvLyBhbmQgdGhlIHN1YnRpdGxlcy9jYXB0aW9ucyB0cmFjayBiZWZvcmUgdGhlIGRlc2NyaXB0aW9ucyB0cmFja1xuXG5cbiAgICBpZiAocHJlZmVycmVkVHJhY2spIHtcbiAgICAgIHByZWZlcnJlZFRyYWNrLm1vZGUgPSAnc2hvd2luZyc7XG4gICAgfSBlbHNlIGlmIChmaXJzdENhcHRpb25zKSB7XG4gICAgICBmaXJzdENhcHRpb25zLm1vZGUgPSAnc2hvd2luZyc7XG4gICAgfSBlbHNlIGlmIChmaXJzdERlc2MpIHtcbiAgICAgIGZpcnN0RGVzYy5tb2RlID0gJ3Nob3dpbmcnO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVHVybiBkaXNwbGF5IG9mIHtAbGluayBUZXh0VHJhY2t9J3MgZnJvbSB0aGUgY3VycmVudCBzdGF0ZSBpbnRvIHRoZSBvdGhlciBzdGF0ZS5cbiAgICogVGhlcmUgYXJlIG9ubHkgdHdvIHN0YXRlczpcbiAgICogLSAnc2hvd24nXG4gICAqIC0gJ2hpZGRlbidcbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI2xvYWRzdGFydFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b2dnbGVEaXNwbGF5ID0gZnVuY3Rpb24gdG9nZ2xlRGlzcGxheSgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLnRlY2hfICYmIHRoaXMucGxheWVyXy50ZWNoXy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUge0BsaW5rIENvbXBvbmVudH0ncyBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdGV4dC10cmFjay1kaXNwbGF5J1xuICAgIH0sIHtcbiAgICAgICdhcmlhLWxpdmUnOiAnb2ZmJyxcbiAgICAgICdhcmlhLWF0b21pYyc6ICd0cnVlJ1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhciBhbGwgZGlzcGxheWVkIHtAbGluayBUZXh0VHJhY2t9cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2xlYXJEaXNwbGF5ID0gZnVuY3Rpb24gY2xlYXJEaXNwbGF5KCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93JDEuV2ViVlRUID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB3aW5kb3ckMS5XZWJWVFQucHJvY2Vzc0N1ZXMod2luZG93JDEsIFtdLCB0aGlzLmVsXyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGRpc3BsYXllZCBUZXh0VHJhY2sgd2hlbiBhIGVpdGhlciBhIHtAbGluayBQbGF5ZXIjdGV4dHRyYWNrY2hhbmdlfSBvclxuICAgKiBhIHtAbGluayBQbGF5ZXIjZnVsbHNjcmVlbmNoYW5nZX0gaXMgZmlyZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciN0ZXh0dHJhY2tjaGFuZ2VcbiAgICogQGxpc3RlbnMgUGxheWVyI2Z1bGxzY3JlZW5jaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlRGlzcGxheSA9IGZ1bmN0aW9uIHVwZGF0ZURpc3BsYXkoKSB7XG4gICAgdmFyIHRyYWNrcyA9IHRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCk7XG4gICAgdmFyIGFsbG93TXVsdGlwbGVTaG93aW5nVHJhY2tzID0gdGhpcy5vcHRpb25zXy5hbGxvd011bHRpcGxlU2hvd2luZ1RyYWNrcztcbiAgICB0aGlzLmNsZWFyRGlzcGxheSgpO1xuXG4gICAgaWYgKGFsbG93TXVsdGlwbGVTaG93aW5nVHJhY2tzKSB7XG4gICAgICB2YXIgc2hvd2luZ1RyYWNrcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdHJhY2tzLmxlbmd0aDsgKytfaSkge1xuICAgICAgICB2YXIgdHJhY2sgPSB0cmFja3NbX2ldO1xuXG4gICAgICAgIGlmICh0cmFjay5tb2RlICE9PSAnc2hvd2luZycpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNob3dpbmdUcmFja3MucHVzaCh0cmFjayk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlRm9yVHJhY2soc2hvd2luZ1RyYWNrcyk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyAgVHJhY2sgZGlzcGxheSBwcmlvcml0aXphdGlvbiBtb2RlbDogaWYgbXVsdGlwbGUgdHJhY2tzIGFyZSAnc2hvd2luZycsXG4gICAgLy8gIGRpc3BsYXkgdGhlIGZpcnN0ICdzdWJ0aXRsZXMnIG9yICdjYXB0aW9ucycgdHJhY2sgd2hpY2ggaXMgJ3Nob3dpbmcnLFxuICAgIC8vICBvdGhlcndpc2UgZGlzcGxheSB0aGUgZmlyc3QgJ2Rlc2NyaXB0aW9ucycgdHJhY2sgd2hpY2ggaXMgJ3Nob3dpbmcnXG5cblxuICAgIHZhciBkZXNjcmlwdGlvbnNUcmFjayA9IG51bGw7XG4gICAgdmFyIGNhcHRpb25zU3VidGl0bGVzVHJhY2sgPSBudWxsO1xuICAgIHZhciBpID0gdHJhY2tzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhciBfdHJhY2sgPSB0cmFja3NbaV07XG5cbiAgICAgIGlmIChfdHJhY2subW9kZSA9PT0gJ3Nob3dpbmcnKSB7XG4gICAgICAgIGlmIChfdHJhY2sua2luZCA9PT0gJ2Rlc2NyaXB0aW9ucycpIHtcbiAgICAgICAgICBkZXNjcmlwdGlvbnNUcmFjayA9IF90cmFjaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0aW9uc1N1YnRpdGxlc1RyYWNrID0gX3RyYWNrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNhcHRpb25zU3VidGl0bGVzVHJhY2spIHtcbiAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgnYXJpYS1saXZlJykgIT09ICdvZmYnKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAnb2ZmJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlRm9yVHJhY2soY2FwdGlvbnNTdWJ0aXRsZXNUcmFjayk7XG4gICAgfSBlbHNlIGlmIChkZXNjcmlwdGlvbnNUcmFjaykge1xuICAgICAgaWYgKHRoaXMuZ2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnKSAhPT0gJ2Fzc2VydGl2ZScpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdhc3NlcnRpdmUnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGVGb3JUcmFjayhkZXNjcmlwdGlvbnNUcmFjayk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTdHlsZSB7QExpbmsgVGV4dFRyYWNrfSBhY3RpdmVDdWVzIGFjY29yZGluZyB0byB7QExpbmsgVGV4dFRyYWNrU2V0dGluZ3N9LlxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja30gdHJhY2tcbiAgICogICAgICAgIFRleHQgdHJhY2sgb2JqZWN0IGNvbnRhaW5pbmcgYWN0aXZlIGN1ZXMgdG8gc3R5bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZURpc3BsYXlTdGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZURpc3BsYXlTdGF0ZSh0cmFjaykge1xuICAgIHZhciBvdmVycmlkZXMgPSB0aGlzLnBsYXllcl8udGV4dFRyYWNrU2V0dGluZ3MuZ2V0VmFsdWVzKCk7XG4gICAgdmFyIGN1ZXMgPSB0cmFjay5hY3RpdmVDdWVzO1xuICAgIHZhciBpID0gY3Vlcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YXIgY3VlID0gY3Vlc1tpXTtcblxuICAgICAgaWYgKCFjdWUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjdWVEaXYgPSBjdWUuZGlzcGxheVN0YXRlO1xuXG4gICAgICBpZiAob3ZlcnJpZGVzLmNvbG9yKSB7XG4gICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLmNvbG9yID0gb3ZlcnJpZGVzLmNvbG9yO1xuICAgICAgfVxuXG4gICAgICBpZiAob3ZlcnJpZGVzLnRleHRPcGFjaXR5KSB7XG4gICAgICAgIHRyeVVwZGF0ZVN0eWxlKGN1ZURpdi5maXJzdENoaWxkLCAnY29sb3InLCBjb25zdHJ1Y3RDb2xvcihvdmVycmlkZXMuY29sb3IgfHwgJyNmZmYnLCBvdmVycmlkZXMudGV4dE9wYWNpdHkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG92ZXJyaWRlcy5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgY3VlRGl2LmZpcnN0Q2hpbGQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gb3ZlcnJpZGVzLmJhY2tncm91bmRDb2xvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKG92ZXJyaWRlcy5iYWNrZ3JvdW5kT3BhY2l0eSkge1xuICAgICAgICB0cnlVcGRhdGVTdHlsZShjdWVEaXYuZmlyc3RDaGlsZCwgJ2JhY2tncm91bmRDb2xvcicsIGNvbnN0cnVjdENvbG9yKG92ZXJyaWRlcy5iYWNrZ3JvdW5kQ29sb3IgfHwgJyMwMDAnLCBvdmVycmlkZXMuYmFja2dyb3VuZE9wYWNpdHkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG92ZXJyaWRlcy53aW5kb3dDb2xvcikge1xuICAgICAgICBpZiAob3ZlcnJpZGVzLndpbmRvd09wYWNpdHkpIHtcbiAgICAgICAgICB0cnlVcGRhdGVTdHlsZShjdWVEaXYsICdiYWNrZ3JvdW5kQ29sb3InLCBjb25zdHJ1Y3RDb2xvcihvdmVycmlkZXMud2luZG93Q29sb3IsIG92ZXJyaWRlcy53aW5kb3dPcGFjaXR5KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VlRGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IG92ZXJyaWRlcy53aW5kb3dDb2xvcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob3ZlcnJpZGVzLmVkZ2VTdHlsZSkge1xuICAgICAgICBpZiAob3ZlcnJpZGVzLmVkZ2VTdHlsZSA9PT0gJ2Ryb3BzaGFkb3cnKSB7XG4gICAgICAgICAgY3VlRGl2LmZpcnN0Q2hpbGQuc3R5bGUudGV4dFNoYWRvdyA9IFwiMnB4IDJweCAzcHggXCIgKyBkYXJrR3JheSArIFwiLCAycHggMnB4IDRweCBcIiArIGRhcmtHcmF5ICsgXCIsIDJweCAycHggNXB4IFwiICsgZGFya0dyYXk7XG4gICAgICAgIH0gZWxzZSBpZiAob3ZlcnJpZGVzLmVkZ2VTdHlsZSA9PT0gJ3JhaXNlZCcpIHtcbiAgICAgICAgICBjdWVEaXYuZmlyc3RDaGlsZC5zdHlsZS50ZXh0U2hhZG93ID0gXCIxcHggMXB4IFwiICsgZGFya0dyYXkgKyBcIiwgMnB4IDJweCBcIiArIGRhcmtHcmF5ICsgXCIsIDNweCAzcHggXCIgKyBkYXJrR3JheTtcbiAgICAgICAgfSBlbHNlIGlmIChvdmVycmlkZXMuZWRnZVN0eWxlID09PSAnZGVwcmVzc2VkJykge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLnRleHRTaGFkb3cgPSBcIjFweCAxcHggXCIgKyBsaWdodEdyYXkgKyBcIiwgMCAxcHggXCIgKyBsaWdodEdyYXkgKyBcIiwgLTFweCAtMXB4IFwiICsgZGFya0dyYXkgKyBcIiwgMCAtMXB4IFwiICsgZGFya0dyYXk7XG4gICAgICAgIH0gZWxzZSBpZiAob3ZlcnJpZGVzLmVkZ2VTdHlsZSA9PT0gJ3VuaWZvcm0nKSB7XG4gICAgICAgICAgY3VlRGl2LmZpcnN0Q2hpbGQuc3R5bGUudGV4dFNoYWRvdyA9IFwiMCAwIDRweCBcIiArIGRhcmtHcmF5ICsgXCIsIDAgMCA0cHggXCIgKyBkYXJrR3JheSArIFwiLCAwIDAgNHB4IFwiICsgZGFya0dyYXkgKyBcIiwgMCAwIDRweCBcIiArIGRhcmtHcmF5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChvdmVycmlkZXMuZm9udFBlcmNlbnQgJiYgb3ZlcnJpZGVzLmZvbnRQZXJjZW50ICE9PSAxKSB7XG4gICAgICAgIHZhciBmb250U2l6ZSA9IHdpbmRvdyQxLnBhcnNlRmxvYXQoY3VlRGl2LnN0eWxlLmZvbnRTaXplKTtcbiAgICAgICAgY3VlRGl2LnN0eWxlLmZvbnRTaXplID0gZm9udFNpemUgKiBvdmVycmlkZXMuZm9udFBlcmNlbnQgKyAncHgnO1xuICAgICAgICBjdWVEaXYuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICBjdWVEaXYuc3R5bGUudG9wID0gJ2F1dG8nO1xuICAgICAgfVxuXG4gICAgICBpZiAob3ZlcnJpZGVzLmZvbnRGYW1pbHkgJiYgb3ZlcnJpZGVzLmZvbnRGYW1pbHkgIT09ICdkZWZhdWx0Jykge1xuICAgICAgICBpZiAob3ZlcnJpZGVzLmZvbnRGYW1pbHkgPT09ICdzbWFsbC1jYXBzJykge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLmZvbnRWYXJpYW50ID0gJ3NtYWxsLWNhcHMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250TWFwW292ZXJyaWRlcy5mb250RmFtaWx5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQWRkIGFuIHtAbGluayBUZXh0VHJhY2t9IHRvIHRvIHRoZSB7QGxpbmsgVGVjaH1zIHtAbGluayBUZXh0VHJhY2tMaXN0fS5cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2t8VGV4dFRyYWNrW119IHRyYWNrc1xuICAgKiAgICAgICAgVGV4dCB0cmFjayBvYmplY3Qgb3IgdGV4dCB0cmFjayBhcnJheSB0byBiZSBhZGRlZCB0byB0aGUgbGlzdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlRm9yVHJhY2sgPSBmdW5jdGlvbiB1cGRhdGVGb3JUcmFjayh0cmFja3MpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHJhY2tzKSkge1xuICAgICAgdHJhY2tzID0gW3RyYWNrc107XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3ckMS5XZWJWVFQgIT09ICdmdW5jdGlvbicgfHwgdHJhY2tzLmV2ZXJ5KGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgcmV0dXJuICF0cmFjay5hY3RpdmVDdWVzO1xuICAgIH0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGN1ZXMgPSBbXTsgLy8gcHVzaCBhbGwgYWN0aXZlIHRyYWNrIGN1ZXNcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdHJhY2suYWN0aXZlQ3Vlcy5sZW5ndGg7ICsraikge1xuICAgICAgICBjdWVzLnB1c2godHJhY2suYWN0aXZlQ3Vlc1tqXSk7XG4gICAgICB9XG4gICAgfSAvLyByZW1vdmVzIGFsbCBjdWVzIGJlZm9yZSBpdCBwcm9jZXNzZXMgbmV3IG9uZXNcblxuXG4gICAgd2luZG93JDEuV2ViVlRULnByb2Nlc3NDdWVzKHdpbmRvdyQxLCBjdWVzLCB0aGlzLmVsXyk7IC8vIGFkZCB1bmlxdWUgY2xhc3MgdG8gZWFjaCBsYW5ndWFnZSB0ZXh0IHRyYWNrICYgYWRkIHNldHRpbmdzIHN0eWxpbmcgaWYgbmVjZXNzYXJ5XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB0cmFja3MubGVuZ3RoOyArK19pMikge1xuICAgICAgdmFyIF90cmFjazIgPSB0cmFja3NbX2kyXTtcblxuICAgICAgZm9yICh2YXIgX2ogPSAwOyBfaiA8IF90cmFjazIuYWN0aXZlQ3Vlcy5sZW5ndGg7ICsrX2opIHtcbiAgICAgICAgdmFyIGN1ZUVsID0gX3RyYWNrMi5hY3RpdmVDdWVzW19qXS5kaXNwbGF5U3RhdGU7XG4gICAgICAgIGFkZENsYXNzKGN1ZUVsLCAndmpzLXRleHQtdHJhY2stY3VlJyk7XG4gICAgICAgIGFkZENsYXNzKGN1ZUVsLCAndmpzLXRleHQtdHJhY2stY3VlLScgKyAoX3RyYWNrMi5sYW5ndWFnZSA/IF90cmFjazIubGFuZ3VhZ2UgOiBfaTIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucGxheWVyXy50ZXh0VHJhY2tTZXR0aW5ncykge1xuICAgICAgICB0aGlzLnVwZGF0ZURpc3BsYXlTdGF0ZShfdHJhY2syKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRleHRUcmFja0Rpc3BsYXk7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVGV4dFRyYWNrRGlzcGxheScsIFRleHRUcmFja0Rpc3BsYXkpO1xuXG4vKipcbiAqIEEgbG9hZGluZyBzcGlubmVyIGZvciB1c2UgZHVyaW5nIHdhaXRpbmcvbG9hZGluZyBldmVudHMuXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIExvYWRpbmdTcGlubmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExvYWRpbmdTcGlubmVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMb2FkaW5nU3Bpbm5lcigpIHtcbiAgICByZXR1cm4gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTG9hZGluZ1NwaW5uZXIucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBMb2FkaW5nU3Bpbm5lcmBzIERPTSBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBkb20gZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsJDEoKSB7XG4gICAgdmFyIGlzQXVkaW8gPSB0aGlzLnBsYXllcl8uaXNBdWRpbygpO1xuICAgIHZhciBwbGF5ZXJUeXBlID0gdGhpcy5sb2NhbGl6ZShpc0F1ZGlvID8gJ0F1ZGlvIFBsYXllcicgOiAnVmlkZW8gUGxheWVyJyk7XG4gICAgdmFyIGNvbnRyb2xUZXh0ID0gY3JlYXRlRWwoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtY29udHJvbC10ZXh0JyxcbiAgICAgIGlubmVySFRNTDogdGhpcy5sb2NhbGl6ZSgnezF9IGlzIGxvYWRpbmcuJywgW3BsYXllclR5cGVdKVxuICAgIH0pO1xuXG4gICAgdmFyIGVsID0gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWxvYWRpbmctc3Bpbm5lcicsXG4gICAgICBkaXI6ICdsdHInXG4gICAgfSk7XG5cbiAgICBlbC5hcHBlbmRDaGlsZChjb250cm9sVGV4dCk7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuXG4gIHJldHVybiBMb2FkaW5nU3Bpbm5lcjtcbn0oQ29tcG9uZW50KTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdMb2FkaW5nU3Bpbm5lcicsIExvYWRpbmdTcGlubmVyKTtcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgYnV0dG9ucy5cbiAqXG4gKiBAZXh0ZW5kcyBDbGlja2FibGVDb21wb25lbnRcbiAqL1xuXG52YXIgQnV0dG9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ2xpY2thYmxlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJ1dHRvbiwgX0NsaWNrYWJsZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uKCkge1xuICAgIHJldHVybiBfQ2xpY2thYmxlQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCdXR0b24ucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBCdXR0b25gcyBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0YWc9XCJidXR0b25cIl1cbiAgICogICAgICAgIFRoZSBlbGVtZW50J3Mgbm9kZSB0eXBlLiBUaGlzIGFyZ3VtZW50IGlzIElHTk9SRUQ6IG5vIG1hdHRlciB3aGF0XG4gICAqICAgICAgICBpcyBwYXNzZWQsIGl0IHdpbGwgYWx3YXlzIGNyZWF0ZSBhIGBidXR0b25gIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcHM9e31dXG4gICAqICAgICAgICBBbiBvYmplY3Qgb2YgcHJvcGVydGllcyB0aGF0IHNob3VsZCBiZSBzZXQgb24gdGhlIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbYXR0cmlidXRlcz17fV1cbiAgICogICAgICAgIEFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHNldCBvbiB0aGUgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKHRhZywgcHJvcHMsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgICAgcHJvcHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoYXR0cmlidXRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgfVxuXG4gICAgdGFnID0gJ2J1dHRvbic7XG4gICAgcHJvcHMgPSBhc3NpZ24oe1xuICAgICAgaW5uZXJIVE1MOiAnPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCIgY2xhc3M9XCJ2anMtaWNvbi1wbGFjZWhvbGRlclwiPjwvc3Bhbj4nLFxuICAgICAgY2xhc3NOYW1lOiB0aGlzLmJ1aWxkQ1NTQ2xhc3MoKVxuICAgIH0sIHByb3BzKTsgLy8gQWRkIGF0dHJpYnV0ZXMgZm9yIGJ1dHRvbiBlbGVtZW50XG5cbiAgICBhdHRyaWJ1dGVzID0gYXNzaWduKHtcbiAgICAgIC8vIE5lY2Vzc2FyeSBzaW5jZSB0aGUgZGVmYXVsdCBidXR0b24gdHlwZSBpcyBcInN1Ym1pdFwiXG4gICAgICB0eXBlOiAnYnV0dG9uJ1xuICAgIH0sIGF0dHJpYnV0ZXMpO1xuICAgIHZhciBlbCA9IENvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCB0YWcsIHByb3BzLCBhdHRyaWJ1dGVzKTtcbiAgICB0aGlzLmNyZWF0ZUNvbnRyb2xUZXh0RWwoZWwpO1xuICAgIHJldHVybiBlbDtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgY2hpbGQgYENvbXBvbmVudGAgaW5zaWRlIG9mIHRoaXMgYEJ1dHRvbmAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfENvbXBvbmVudH0gY2hpbGRcbiAgICogICAgICAgIFRoZSBuYW1lIG9yIGluc3RhbmNlIG9mIGEgY2hpbGQgdG8gYWRkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIG9wdGlvbnMgdGhhdCB3aWxsIGdldCBwYXNzZWQgdG8gY2hpbGRyZW4gb2ZcbiAgICogICAgICAgIHRoZSBjaGlsZC5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKiAgICAgICAgIFRoZSBgQ29tcG9uZW50YCB0aGF0IGdldHMgYWRkZWQgYXMgYSBjaGlsZC4gV2hlbiB1c2luZyBhIHN0cmluZyB0aGVcbiAgICogICAgICAgICBgQ29tcG9uZW50YCB3aWxsIGdldCBjcmVhdGVkIGJ5IHRoaXMgcHJvY2Vzcy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiA1XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZENoaWxkID0gZnVuY3Rpb24gYWRkQ2hpbGQoY2hpbGQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICBsb2cud2FybihcIkFkZGluZyBhbiBhY3Rpb25hYmxlICh1c2VyIGNvbnRyb2xsYWJsZSkgY2hpbGQgdG8gYSBCdXR0b24gKFwiICsgY2xhc3NOYW1lICsgXCIpIGlzIG5vdCBzdXBwb3J0ZWQ7IHVzZSBhIENsaWNrYWJsZUNvbXBvbmVudCBpbnN0ZWFkLlwiKTsgLy8gQXZvaWQgdGhlIGVycm9yIG1lc3NhZ2UgZ2VuZXJhdGVkIGJ5IENsaWNrYWJsZUNvbXBvbmVudCdzIGFkZENoaWxkIG1ldGhvZFxuXG4gICAgcmV0dXJuIENvbXBvbmVudC5wcm90b3R5cGUuYWRkQ2hpbGQuY2FsbCh0aGlzLCBjaGlsZCwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGUgYEJ1dHRvbmAgZWxlbWVudCBzbyB0aGF0IGl0IGNhbiBiZSBhY3RpdmF0ZWQgb3IgY2xpY2tlZC4gVXNlIHRoaXMgd2l0aFxuICAgKiB7QGxpbmsgQnV0dG9uI2Rpc2FibGV9LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgX0NsaWNrYWJsZUNvbXBvbmVudC5wcm90b3R5cGUuZW5hYmxlLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmVsXy5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIGBCdXR0b25gIGVsZW1lbnQgc28gdGhhdCBpdCBjYW5ub3QgYmUgYWN0aXZhdGVkIG9yIGNsaWNrZWQuIFVzZSB0aGlzIHdpdGhcbiAgICoge0BsaW5rIEJ1dHRvbiNlbmFibGV9LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBfQ2xpY2thYmxlQ29tcG9uZW50LnByb3RvdHlwZS5kaXNhYmxlLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhIGBCdXR0b25gIGhhcyBmb2N1cyBhbmQgYGtleWRvd25gIGlzIHRyaWdnZXJlZCB2aWEgYSBrZXlcbiAgICogcHJlc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBnZXQgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBrZXlkb3duXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIFNwYWNlIG9yIEVudGVyIGtleSBvcGVyYXRpb24sIHdoaWNoIGlzIGhhbmRsZWQgYnkgdGhlIGJyb3dzZXIgZm9yXG4gICAgLy8gYSBidXR0b24gLSB0aG91Z2ggbm90IGZvciBpdHMgc3VwZXIgY2xhc3MsIENsaWNrYWJsZUNvbXBvbmVudC4gQWxzbyxcbiAgICAvLyBwcmV2ZW50IHRoZSBldmVudCBmcm9tIHByb3BhZ2F0aW5nIHRocm91Z2ggdGhlIERPTSBhbmQgdHJpZ2dlcmluZyBQbGF5ZXJcbiAgICAvLyBob3RrZXlzLiBXZSBkbyBub3QgcHJldmVudERlZmF1bHQgaGVyZSBiZWNhdXNlIHdlIF93YW50XyB0aGUgYnJvd3NlciB0b1xuICAgIC8vIGhhbmRsZSBpdC5cbiAgICBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnU3BhY2UnKSB8fCBrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdFbnRlcicpKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFBhc3Mga2V5cHJlc3MgaGFuZGxpbmcgdXAgZm9yIHVuc3VwcG9ydGVkIGtleXNcblxuXG4gICAgX0NsaWNrYWJsZUNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlS2V5RG93bi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgfTtcblxuICByZXR1cm4gQnV0dG9uO1xufShDbGlja2FibGVDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0J1dHRvbicsIEJ1dHRvbik7XG5cbi8qKlxuICogVGhlIGluaXRpYWwgcGxheSBidXR0b24gdGhhdCBzaG93cyBiZWZvcmUgdGhlIHZpZGVvIGhhcyBwbGF5ZWQuIFRoZSBoaWRpbmcgb2YgdGhlXG4gKiBgQmlnUGxheUJ1dHRvbmAgZ2V0IGRvbmUgdmlhIENTUyBhbmQgYFBsYXllcmAgc3RhdGVzLlxuICpcbiAqIEBleHRlbmRzIEJ1dHRvblxuICovXG5cbnZhciBCaWdQbGF5QnV0dG9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKEJpZ1BsYXlCdXR0b24sIF9CdXR0b24pO1xuXG4gIGZ1bmN0aW9uIEJpZ1BsYXlCdXR0b24ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLm1vdXNldXNlZF8gPSBmYWxzZTtcblxuICAgIF90aGlzLm9uKCdtb3VzZWRvd24nLCBfdGhpcy5oYW5kbGVNb3VzZURvd24pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuIEFsd2F5cyByZXR1cm5zICd2anMtYmlnLXBsYXktYnV0dG9uJy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmlnUGxheUJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiAndmpzLWJpZy1wbGF5LWJ1dHRvbic7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhIGBCaWdQbGF5QnV0dG9uYCBcImNsaWNrZWRcIi4gU2VlIHtAbGluayBDbGlja2FibGVDb21wb25lbnR9XG4gICAqIGZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgYSBjbGljayBjYW4gYmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGtleWRvd25gLCBgdGFwYCwgb3IgYGNsaWNrYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRhcFxuICAgKiBAbGlzdGVucyBjbGlja1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIHBsYXlQcm9taXNlID0gdGhpcy5wbGF5ZXJfLnBsYXkoKTsgLy8gZXhpdCBlYXJseSBpZiBjbGlja2VkIHZpYSB0aGUgbW91c2VcblxuICAgIGlmICh0aGlzLm1vdXNldXNlZF8gJiYgZXZlbnQuY2xpZW50WCAmJiBldmVudC5jbGllbnRZKSB7XG4gICAgICB2YXIgc291cmNlSXNFbmNyeXB0ZWQgPSB0aGlzLnBsYXllcl8udXNpbmdQbHVnaW4oJ2VtZScpICYmIHRoaXMucGxheWVyXy5lbWUuc2Vzc2lvbnMgJiYgdGhpcy5wbGF5ZXJfLmVtZS5zZXNzaW9ucy5sZW5ndGggPiAwO1xuICAgICAgc2lsZW5jZVByb21pc2UocGxheVByb21pc2UpO1xuXG4gICAgICBpZiAodGhpcy5wbGF5ZXJfLnRlY2godHJ1ZSkgJiYgLy8gV2UndmUgb2JzZXJ2ZWQgYSBidWcgaW4gSUUgYW5kIEVkZ2Ugd2hlbiBwbGF5aW5nIGJhY2sgRFJNIGNvbnRlbnQgd2hlcmVcbiAgICAgIC8vIGNhbGxpbmcgLmZvY3VzKCkgb24gdGhlIHZpZGVvIGVsZW1lbnQgY2F1c2VzIHRoZSB2aWRlbyB0byBnbyBibGFjayxcbiAgICAgIC8vIHNvIHdlIGF2b2lkIGl0IGluIHRoYXQgc3BlY2lmaWMgY2FzZVxuICAgICAgISgoSUVfVkVSU0lPTiB8fCBJU19FREdFKSAmJiBzb3VyY2VJc0VuY3J5cHRlZCkpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXJfLnRlY2godHJ1ZSkuZm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjYiA9IHRoaXMucGxheWVyXy5nZXRDaGlsZCgnY29udHJvbEJhcicpO1xuICAgIHZhciBwbGF5VG9nZ2xlID0gY2IgJiYgY2IuZ2V0Q2hpbGQoJ3BsYXlUb2dnbGUnKTtcblxuICAgIGlmICghcGxheVRvZ2dsZSkge1xuICAgICAgdGhpcy5wbGF5ZXJfLnRlY2godHJ1ZSkuZm9jdXMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGxheUZvY3VzID0gZnVuY3Rpb24gcGxheUZvY3VzKCkge1xuICAgICAgcmV0dXJuIHBsYXlUb2dnbGUuZm9jdXMoKTtcbiAgICB9O1xuXG4gICAgaWYgKGlzUHJvbWlzZShwbGF5UHJvbWlzZSkpIHtcbiAgICAgIHBsYXlQcm9taXNlLnRoZW4ocGxheUZvY3VzLCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0VGltZW91dChwbGF5Rm9jdXMsIDEpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICB0aGlzLm1vdXNldXNlZF8gPSBmYWxzZTtcblxuICAgIF9CdXR0b24ucHJvdG90eXBlLmhhbmRsZUtleURvd24uY2FsbCh0aGlzLCBldmVudCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuICAgIHRoaXMubW91c2V1c2VkXyA9IHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIEJpZ1BsYXlCdXR0b247XG59KEJ1dHRvbik7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYEJpZ1BsYXlCdXR0b25gcyBjb250cm9scy4gQWRkZWQgdG8gZm9yIGxvY2FsaXphdGlvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cbkJpZ1BsYXlCdXR0b24ucHJvdG90eXBlLmNvbnRyb2xUZXh0XyA9ICdQbGF5IFZpZGVvJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnQmlnUGxheUJ1dHRvbicsIEJpZ1BsYXlCdXR0b24pO1xuXG4vKipcbiAqIFRoZSBgQ2xvc2VCdXR0b25gIGlzIGEgYHtAbGluayBCdXR0b259YCB0aGF0IGZpcmVzIGEgYGNsb3NlYCBldmVudCB3aGVuXG4gKiBpdCBnZXRzIGNsaWNrZWQuXG4gKlxuICogQGV4dGVuZHMgQnV0dG9uXG4gKi9cblxudmFyIENsb3NlQnV0dG9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKENsb3NlQnV0dG9uLCBfQnV0dG9uKTtcblxuICAvKipcbiAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSB0aGlzIGNsYXNzLlxuICAqXG4gICogQHBhcmFtICB7UGxheWVyfSBwbGF5ZXJcbiAgKiAgICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAqXG4gICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9uc11cbiAgKiAgICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICovXG4gIGZ1bmN0aW9uIENsb3NlQnV0dG9uKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0J1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLmNvbnRyb2xUZXh0KG9wdGlvbnMgJiYgb3B0aW9ucy5jb250cm9sVGV4dCB8fCBfdGhpcy5sb2NhbGl6ZSgnQ2xvc2UnKSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgKlxuICAqIEByZXR1cm4ge3N0cmluZ31cbiAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENsb3NlQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWNsb3NlLWJ1dHRvbiBcIiArIF9CdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCB3aGVuIGEgYENsb3NlQnV0dG9uYCBnZXRzIGNsaWNrZWQuIFNlZVxuICAgKiB7QGxpbmsgQ2xpY2thYmxlQ29tcG9uZW50I2hhbmRsZUNsaWNrfSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB3aGVuXG4gICAqIHRoaXMgd2lsbCBiZSB0cmlnZ2VyZWRcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAsIGB0YXBgLCBvciBgY2xpY2tgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmVcbiAgICogICAgICAgIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgdGFwXG4gICAqIEBsaXN0ZW5zIGNsaWNrXG4gICAqIEBmaXJlcyBDbG9zZUJ1dHRvbiNjbG9zZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gdGhlIGEgYENsb3NlQnV0dG9uYCBpcyBjbGlja2VkLlxuICAgICAqXG4gICAgICogQGV2ZW50IENsb3NlQnV0dG9uI2Nsb3NlXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbYnViYmxlcz1mYWxzZV1cbiAgICAgKiAgICAgICAgICAgc2V0IHRvIGZhbHNlIHNvIHRoYXQgdGhlIGNsb3NlIGV2ZW50IGRvZXMgbm90XG4gICAgICogICAgICAgICAgIGJ1YmJsZSB1cCB0byBwYXJlbnRzIGlmIHRoZXJlIGlzIG5vIGxpc3RlbmVyXG4gICAgICovXG4gICAgdGhpcy50cmlnZ2VyKHtcbiAgICAgIHR5cGU6ICdjbG9zZScsXG4gICAgICBidWJibGVzOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBgQ2xvc2VCdXR0b25gIHJlY2VpdmVzIGFcbiAgICogYGtleWRvd25gIGV2ZW50LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpZiB0aGUga2V5IGlzIEVzYywgaXQgd2lsbCB0cmlnZ2VyIGEgYGNsaWNrYCBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICAvLyBFc2MgYnV0dG9uIHdpbGwgdHJpZ2dlciBgY2xpY2tgIGV2ZW50XG4gICAgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ0VzYycpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBhc3Mga2V5cHJlc3MgaGFuZGxpbmcgdXAgZm9yIHVuc3VwcG9ydGVkIGtleXNcbiAgICAgIF9CdXR0b24ucHJvdG90eXBlLmhhbmRsZUtleURvd24uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBDbG9zZUJ1dHRvbjtcbn0oQnV0dG9uKTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdDbG9zZUJ1dHRvbicsIENsb3NlQnV0dG9uKTtcblxuLyoqXG4gKiBCdXR0b24gdG8gdG9nZ2xlIGJldHdlZW4gcGxheSBhbmQgcGF1c2UuXG4gKlxuICogQGV4dGVuZHMgQnV0dG9uXG4gKi9cblxudmFyIFBsYXlUb2dnbGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoUGxheVRvZ2dsZSwgX0J1dHRvbik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV1cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBQbGF5VG9nZ2xlKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9CdXR0b24uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7IC8vIHNob3cgb3IgaGlkZSByZXBsYXkgaWNvblxuXG4gICAgb3B0aW9ucy5yZXBsYXkgPSBvcHRpb25zLnJlcGxheSA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMucmVwbGF5O1xuXG4gICAgX3RoaXMub24ocGxheWVyLCAncGxheScsIF90aGlzLmhhbmRsZVBsYXkpO1xuXG4gICAgX3RoaXMub24ocGxheWVyLCAncGF1c2UnLCBfdGhpcy5oYW5kbGVQYXVzZSk7XG5cbiAgICBpZiAob3B0aW9ucy5yZXBsYXkpIHtcbiAgICAgIF90aGlzLm9uKHBsYXllciwgJ2VuZGVkJywgX3RoaXMuaGFuZGxlRW5kZWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQbGF5VG9nZ2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLXBsYXktY29udHJvbCBcIiArIF9CdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCB3aGVuIGFuIGBQbGF5VG9nZ2xlYCBpcyBcImNsaWNrZWRcIi4gU2VlXG4gICAqIHtAbGluayBDbGlja2FibGVDb21wb25lbnR9IGZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgYSBjbGljayBjYW4gYmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAsIGB0YXBgLCBvciBgY2xpY2tgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmVcbiAgICogICAgICAgIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgdGFwXG4gICAqIEBsaXN0ZW5zIGNsaWNrXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLnBhdXNlZCgpKSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGxheSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGF1c2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgb25jZSBhZnRlciB0aGUgdmlkZW8gaGFzIGVuZGVkIGFuZCB0aGUgdXNlciBzZWVrcyBzbyB0aGF0XG4gICAqIHdlIGNhbiBjaGFuZ2UgdGhlIHJlcGxheSBidXR0b24gYmFjayB0byBhIHBsYXkgYnV0dG9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNzZWVrZWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlU2Vla2VkID0gZnVuY3Rpb24gaGFuZGxlU2Vla2VkKGV2ZW50KSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWVuZGVkJyk7XG5cbiAgICBpZiAodGhpcy5wbGF5ZXJfLnBhdXNlZCgpKSB7XG4gICAgICB0aGlzLmhhbmRsZVBhdXNlKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oYW5kbGVQbGF5KGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFkZCB0aGUgdmpzLXBsYXlpbmcgY2xhc3MgdG8gdGhlIGVsZW1lbnQgc28gaXQgY2FuIGNoYW5nZSBhcHBlYXJhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNwbGF5XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVBsYXkgPSBmdW5jdGlvbiBoYW5kbGVQbGF5KGV2ZW50KSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWVuZGVkJyk7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXBhdXNlZCcpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wbGF5aW5nJyk7IC8vIGNoYW5nZSB0aGUgYnV0dG9uIHRleHQgdG8gXCJQYXVzZVwiXG5cbiAgICB0aGlzLmNvbnRyb2xUZXh0KCdQYXVzZScpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgdGhlIHZqcy1wYXVzZWQgY2xhc3MgdG8gdGhlIGVsZW1lbnQgc28gaXQgY2FuIGNoYW5nZSBhcHBlYXJhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNwYXVzZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVQYXVzZSA9IGZ1bmN0aW9uIGhhbmRsZVBhdXNlKGV2ZW50KSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXBsYXlpbmcnKTtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtcGF1c2VkJyk7IC8vIGNoYW5nZSB0aGUgYnV0dG9uIHRleHQgdG8gXCJQbGF5XCJcblxuICAgIHRoaXMuY29udHJvbFRleHQoJ1BsYXknKTtcbiAgfVxuICAvKipcbiAgICogQWRkIHRoZSB2anMtZW5kZWQgY2xhc3MgdG8gdGhlIGVsZW1lbnQgc28gaXQgY2FuIGNoYW5nZSBhcHBlYXJhbmNlXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI2VuZGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUVuZGVkID0gZnVuY3Rpb24gaGFuZGxlRW5kZWQoZXZlbnQpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtcGxheWluZycpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1lbmRlZCcpOyAvLyBjaGFuZ2UgdGhlIGJ1dHRvbiB0ZXh0IHRvIFwiUmVwbGF5XCJcblxuICAgIHRoaXMuY29udHJvbFRleHQoJ1JlcGxheScpOyAvLyBvbiB0aGUgbmV4dCBzZWVrIHJlbW92ZSB0aGUgcmVwbGF5IGJ1dHRvblxuXG4gICAgdGhpcy5vbmUodGhpcy5wbGF5ZXJfLCAnc2Vla2VkJywgdGhpcy5oYW5kbGVTZWVrZWQpO1xuICB9O1xuXG4gIHJldHVybiBQbGF5VG9nZ2xlO1xufShCdXR0b24pO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBQbGF5VG9nZ2xlYHMgY29udHJvbHMuIEFkZGVkIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5QbGF5VG9nZ2xlLnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnUGxheSc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1BsYXlUb2dnbGUnLCBQbGF5VG9nZ2xlKTtcblxuLyoqXG4gKiBAZmlsZSBmb3JtYXQtdGltZS5qc1xuICogQG1vZHVsZSBmb3JtYXQtdGltZVxuICovXG5cbi8qKlxuICogRm9ybWF0IHNlY29uZHMgYXMgYSB0aW1lIHN0cmluZywgSDpNTTpTUyBvciBNOlNTLiBTdXBwbHlpbmcgYSBndWlkZSAoaW5cbiAqIHNlY29uZHMpIHdpbGwgZm9yY2UgYSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcyB0byBjb3ZlciB0aGUgbGVuZ3RoIG9mIHRoZVxuICogZ3VpZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge251bWJlcn0gc2Vjb25kc1xuICogICAgICAgICBOdW1iZXIgb2Ygc2Vjb25kcyB0byBiZSB0dXJuZWQgaW50byBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSAge251bWJlcn0gZ3VpZGVcbiAqICAgICAgICAgTnVtYmVyIChpbiBzZWNvbmRzKSB0byBtb2RlbCB0aGUgc3RyaW5nIGFmdGVyXG4gKlxuICogQHJldHVybiB7c3RyaW5nfVxuICogICAgICAgICBUaW1lIGZvcm1hdHRlZCBhcyBIOk1NOlNTIG9yIE06U1NcbiAqL1xudmFyIGRlZmF1bHRJbXBsZW1lbnRhdGlvbiA9IGZ1bmN0aW9uIGRlZmF1bHRJbXBsZW1lbnRhdGlvbihzZWNvbmRzLCBndWlkZSkge1xuICBzZWNvbmRzID0gc2Vjb25kcyA8IDAgPyAwIDogc2Vjb25kcztcbiAgdmFyIHMgPSBNYXRoLmZsb29yKHNlY29uZHMgJSA2MCk7XG4gIHZhciBtID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjAgJSA2MCk7XG4gIHZhciBoID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMzYwMCk7XG4gIHZhciBnbSA9IE1hdGguZmxvb3IoZ3VpZGUgLyA2MCAlIDYwKTtcbiAgdmFyIGdoID0gTWF0aC5mbG9vcihndWlkZSAvIDM2MDApOyAvLyBoYW5kbGUgaW52YWxpZCB0aW1lc1xuXG4gIGlmIChpc05hTihzZWNvbmRzKSB8fCBzZWNvbmRzID09PSBJbmZpbml0eSkge1xuICAgIC8vICctJyBpcyBmYWxzZSBmb3IgYWxsIHJlbGF0aW9uYWwgb3BlcmF0b3JzIChlLmcuIDwsID49KSBzbyB0aGlzIHNldHRpbmdcbiAgICAvLyB3aWxsIGFkZCB0aGUgbWluaW11bSBudW1iZXIgb2YgZmllbGRzIHNwZWNpZmllZCBieSB0aGUgZ3VpZGVcbiAgICBoID0gbSA9IHMgPSAnLSc7XG4gIH0gLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBzaG93IGhvdXJzXG5cblxuICBoID0gaCA+IDAgfHwgZ2ggPiAwID8gaCArICc6JyA6ICcnOyAvLyBJZiBob3VycyBhcmUgc2hvd2luZywgd2UgbWF5IG5lZWQgdG8gYWRkIGEgbGVhZGluZyB6ZXJvLlxuICAvLyBBbHdheXMgc2hvdyBhdCBsZWFzdCBvbmUgZGlnaXQgb2YgbWludXRlcy5cblxuICBtID0gKChoIHx8IGdtID49IDEwKSAmJiBtIDwgMTAgPyAnMCcgKyBtIDogbSkgKyAnOic7IC8vIENoZWNrIGlmIGxlYWRpbmcgemVybyBpcyBuZWVkIGZvciBzZWNvbmRzXG5cbiAgcyA9IHMgPCAxMCA/ICcwJyArIHMgOiBzO1xuICByZXR1cm4gaCArIG0gKyBzO1xufTsgLy8gSW50ZXJuYWwgcG9pbnRlciB0byB0aGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbi5cblxuXG52YXIgaW1wbGVtZW50YXRpb24gPSBkZWZhdWx0SW1wbGVtZW50YXRpb247XG4vKipcbiAqIFJlcGxhY2VzIHRoZSBkZWZhdWx0IGZvcm1hdFRpbWUgaW1wbGVtZW50YXRpb24gd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21JbXBsZW1lbnRhdGlvblxuICogICAgICAgIEEgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSB1c2VkIGluIHBsYWNlIG9mIHRoZSBkZWZhdWx0IGZvcm1hdFRpbWVcbiAqICAgICAgICBpbXBsZW1lbnRhdGlvbi4gV2lsbCByZWNlaXZlIHRoZSBjdXJyZW50IHRpbWUgaW4gc2Vjb25kcyBhbmQgdGhlXG4gKiAgICAgICAgZ3VpZGUgKGluIHNlY29uZHMpIGFzIGFyZ3VtZW50cy5cbiAqL1xuXG5mdW5jdGlvbiBzZXRGb3JtYXRUaW1lKGN1c3RvbUltcGxlbWVudGF0aW9uKSB7XG4gIGltcGxlbWVudGF0aW9uID0gY3VzdG9tSW1wbGVtZW50YXRpb247XG59XG4vKipcbiAqIFJlc2V0cyBmb3JtYXRUaW1lIHRvIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uLlxuICovXG5cbmZ1bmN0aW9uIHJlc2V0Rm9ybWF0VGltZSgpIHtcbiAgaW1wbGVtZW50YXRpb24gPSBkZWZhdWx0SW1wbGVtZW50YXRpb247XG59XG4vKipcbiAqIERlbGVnYXRlcyB0byBlaXRoZXIgdGhlIGRlZmF1bHQgdGltZSBmb3JtYXR0aW5nIGZ1bmN0aW9uIG9yIGEgY3VzdG9tXG4gKiBmdW5jdGlvbiBzdXBwbGllZCB2aWEgYHNldEZvcm1hdFRpbWVgLlxuICpcbiAqIEZvcm1hdHMgc2Vjb25kcyBhcyBhIHRpbWUgc3RyaW5nIChIOk1NOlNTIG9yIE06U1MpLiBTdXBwbHlpbmcgYVxuICogZ3VpZGUgKGluIHNlY29uZHMpIHdpbGwgZm9yY2UgYSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcyB0byBjb3ZlciB0aGVcbiAqIGxlbmd0aCBvZiB0aGUgZ3VpZGUuXG4gKlxuICogQHN0YXRpY1xuICogQGV4YW1wbGUgIGZvcm1hdFRpbWUoMTI1LCA2MDApID09PSBcIjAyOjA1XCJcbiAqIEBwYXJhbSAgICB7bnVtYmVyfSBzZWNvbmRzXG4gKiAgICAgICAgICAgTnVtYmVyIG9mIHNlY29uZHMgdG8gYmUgdHVybmVkIGludG8gYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gICAge251bWJlcn0gZ3VpZGVcbiAqICAgICAgICAgICBOdW1iZXIgKGluIHNlY29uZHMpIHRvIG1vZGVsIHRoZSBzdHJpbmcgYWZ0ZXJcbiAqXG4gKiBAcmV0dXJuICAge3N0cmluZ31cbiAqICAgICAgICAgICBUaW1lIGZvcm1hdHRlZCBhcyBIOk1NOlNTIG9yIE06U1NcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lKHNlY29uZHMsIGd1aWRlKSB7XG4gIGlmIChndWlkZSA9PT0gdm9pZCAwKSB7XG4gICAgZ3VpZGUgPSBzZWNvbmRzO1xuICB9XG5cbiAgcmV0dXJuIGltcGxlbWVudGF0aW9uKHNlY29uZHMsIGd1aWRlKTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5cyB0aW1lIGluZm9ybWF0aW9uIGFib3V0IHRoZSB2aWRlb1xuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBUaW1lRGlzcGxheSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUaW1lRGlzcGxheSwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBUaW1lRGlzcGxheShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5vbihwbGF5ZXIsIFsndGltZXVwZGF0ZScsICdlbmRlZCddLCBfdGhpcy51cGRhdGVDb250ZW50KTtcblxuICAgIF90aGlzLnVwZGF0ZVRleHROb2RlXygpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBUaW1lRGlzcGxheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwkMSgpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5idWlsZENTU0NsYXNzKCk7XG5cbiAgICB2YXIgZWwgPSBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSArIFwiIHZqcy10aW1lLWNvbnRyb2wgdmpzLWNvbnRyb2xcIixcbiAgICAgIGlubmVySFRNTDogXCI8c3BhbiBjbGFzcz1cXFwidmpzLWNvbnRyb2wtdGV4dFxcXCIgcm9sZT1cXFwicHJlc2VudGF0aW9uXFxcIj5cIiArIHRoaXMubG9jYWxpemUodGhpcy5sYWJlbFRleHRfKSArIFwiXFx4QTA8L3NwYW4+XCJcbiAgICB9KTtcblxuICAgIHRoaXMuY29udGVudEVsXyA9IGNyZWF0ZUVsKCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUgKyBcIi1kaXNwbGF5XCJcbiAgICB9LCB7XG4gICAgICAvLyB0ZWxsIHNjcmVlbiByZWFkZXJzIG5vdCB0byBhdXRvbWF0aWNhbGx5IHJlYWQgdGhlIHRpbWUgYXMgaXQgY2hhbmdlc1xuICAgICAgJ2FyaWEtbGl2ZSc6ICdvZmYnLFxuICAgICAgLy8gc3BhbiBlbGVtZW50cyBoYXZlIG5vIGltcGxpY2l0IHJvbGUsIGJ1dCBzb21lIHNjcmVlbiByZWFkZXJzIChub3RhYmx5IFZvaWNlT3ZlcilcbiAgICAgIC8vIHRyZWF0IHRoZW0gYXMgYSBicmVhayBiZXR3ZWVuIGl0ZW1zIGluIHRoZSBET00gd2hlbiB1c2luZyBhcnJvdyBrZXlzXG4gICAgICAvLyAob3IgbGVmdC10by1yaWdodCBzd2lwZXMgb24gaU9TKSB0byByZWFkIGNvbnRlbnRzIG9mIGEgcGFnZS4gVXNpbmdcbiAgICAgIC8vIHJvbGU9J3ByZXNlbnRhdGlvbicgY2F1c2VzIFZvaWNlT3ZlciB0byBOT1QgdHJlYXQgdGhpcyBzcGFuIGFzIGEgYnJlYWsuXG4gICAgICAncm9sZSc6ICdwcmVzZW50YXRpb24nXG4gICAgfSk7XG4gICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxfKTtcbiAgICByZXR1cm4gZWw7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuY29udGVudEVsXyA9IG51bGw7XG4gICAgdGhpcy50ZXh0Tm9kZV8gPSBudWxsO1xuXG4gICAgX0NvbXBvbmVudC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB0aW1lIGRpc3BsYXkgdGV4dCBub2RlIHdpdGggYSBuZXcgdGltZVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3RpbWU9MF0gdGhlIHRpbWUgdG8gdXBkYXRlIHRvXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZVRleHROb2RlXyA9IGZ1bmN0aW9uIHVwZGF0ZVRleHROb2RlXyh0aW1lKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAodGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICB0aW1lID0gMDtcbiAgICB9XG5cbiAgICB0aW1lID0gZm9ybWF0VGltZSh0aW1lKTtcblxuICAgIGlmICh0aGlzLmZvcm1hdHRlZFRpbWVfID09PSB0aW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5mb3JtYXR0ZWRUaW1lXyA9IHRpbWU7XG4gICAgdGhpcy5yZXF1ZXN0TmFtZWRBbmltYXRpb25GcmFtZSgnVGltZURpc3BsYXkjdXBkYXRlVGV4dE5vZGVfJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpczIuY29udGVudEVsXykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvbGROb2RlID0gX3RoaXMyLnRleHROb2RlXztcbiAgICAgIF90aGlzMi50ZXh0Tm9kZV8gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShfdGhpczIuZm9ybWF0dGVkVGltZV8pO1xuXG4gICAgICBpZiAoIV90aGlzMi50ZXh0Tm9kZV8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAob2xkTm9kZSkge1xuICAgICAgICBfdGhpczIuY29udGVudEVsXy5yZXBsYWNlQ2hpbGQoX3RoaXMyLnRleHROb2RlXywgb2xkTm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpczIuY29udGVudEVsXy5hcHBlbmRDaGlsZChfdGhpczIudGV4dE5vZGVfKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVG8gYmUgZmlsbGVkIG91dCBpbiB0aGUgY2hpbGQgY2xhc3MsIHNob3VsZCB1cGRhdGUgdGhlIGRpc3BsYXllZCB0aW1lXG4gICAqIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgZmFjdCB0aGF0IHRoZSBjdXJyZW50IHRpbWUgaGFzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBgdGltZXVwZGF0ZWAgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjdGltZXVwZGF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVDb250ZW50ID0gZnVuY3Rpb24gdXBkYXRlQ29udGVudChldmVudCkge307XG5cbiAgcmV0dXJuIFRpbWVEaXNwbGF5O1xufShDb21wb25lbnQpO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IGlzIGFkZGVkIHRvIHRoZSBgVGltZURpc3BsYXlgIGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuVGltZURpc3BsYXkucHJvdG90eXBlLmxhYmVsVGV4dF8gPSAnVGltZSc7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYFRpbWVEaXNwbGF5YHMgY29udHJvbHMuIEFkZGVkIHRvIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogQGRlcHJlY2F0ZWQgaW4gdjc7IGNvbnRyb2xUZXh0XyBpcyBub3QgdXNlZCBpbiBub24tYWN0aXZlIGRpc3BsYXkgQ29tcG9uZW50c1xuICovXG5cblRpbWVEaXNwbGF5LnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnVGltZSc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1RpbWVEaXNwbGF5JywgVGltZURpc3BsYXkpO1xuXG4vKipcbiAqIERpc3BsYXlzIHRoZSBjdXJyZW50IHRpbWVcbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgQ3VycmVudFRpbWVEaXNwbGF5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVGltZURpc3BsYXkpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ3VycmVudFRpbWVEaXNwbGF5LCBfVGltZURpc3BsYXkpO1xuXG4gIGZ1bmN0aW9uIEN1cnJlbnRUaW1lRGlzcGxheSgpIHtcbiAgICByZXR1cm4gX1RpbWVEaXNwbGF5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDdXJyZW50VGltZURpc3BsYXkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuICd2anMtY3VycmVudC10aW1lJztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIGN1cnJlbnQgdGltZSBkaXNwbGF5XG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBgdGltZXVwZGF0ZWAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciN0aW1ldXBkYXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZUNvbnRlbnQgPSBmdW5jdGlvbiB1cGRhdGVDb250ZW50KGV2ZW50KSB7XG4gICAgLy8gQWxsb3dzIGZvciBzbW9vdGggc2NydWJiaW5nLCB3aGVuIHBsYXllciBjYW4ndCBrZWVwIHVwLlxuICAgIHZhciB0aW1lO1xuXG4gICAgaWYgKHRoaXMucGxheWVyXy5lbmRlZCgpKSB7XG4gICAgICB0aW1lID0gdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWUgPSB0aGlzLnBsYXllcl8uc2NydWJiaW5nKCkgPyB0aGlzLnBsYXllcl8uZ2V0Q2FjaGUoKS5jdXJyZW50VGltZSA6IHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlVGV4dE5vZGVfKHRpbWUpO1xuICB9O1xuXG4gIHJldHVybiBDdXJyZW50VGltZURpc3BsYXk7XG59KFRpbWVEaXNwbGF5KTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBpcyBhZGRlZCB0byB0aGUgYEN1cnJlbnRUaW1lRGlzcGxheWAgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5DdXJyZW50VGltZURpc3BsYXkucHJvdG90eXBlLmxhYmVsVGV4dF8gPSAnQ3VycmVudCBUaW1lJztcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgQ3VycmVudFRpbWVEaXNwbGF5YHMgY29udHJvbHMuIEFkZGVkIHRvIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogQGRlcHJlY2F0ZWQgaW4gdjc7IGNvbnRyb2xUZXh0XyBpcyBub3QgdXNlZCBpbiBub24tYWN0aXZlIGRpc3BsYXkgQ29tcG9uZW50c1xuICovXG5cbkN1cnJlbnRUaW1lRGlzcGxheS5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ0N1cnJlbnQgVGltZSc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0N1cnJlbnRUaW1lRGlzcGxheScsIEN1cnJlbnRUaW1lRGlzcGxheSk7XG5cbi8qKlxuICogRGlzcGxheXMgdGhlIGR1cmF0aW9uXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIER1cmF0aW9uRGlzcGxheSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RpbWVEaXNwbGF5KSB7XG4gIF9pbmhlcml0c0xvb3NlKER1cmF0aW9uRGlzcGxheSwgX1RpbWVEaXNwbGF5KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIER1cmF0aW9uRGlzcGxheShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9UaW1lRGlzcGxheS5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpczsgLy8gd2UgZG8gbm90IHdhbnQgdG8vbmVlZCB0byB0aHJvdHRsZSBkdXJhdGlvbiBjaGFuZ2VzLFxuICAgIC8vIGFzIHRoZXkgc2hvdWxkIGFsd2F5cyBkaXNwbGF5IHRoZSBjaGFuZ2VkIGR1cmF0aW9uIGFzXG4gICAgLy8gaXQgaGFzIGNoYW5nZWRcblxuICAgIF90aGlzLm9uKHBsYXllciwgJ2R1cmF0aW9uY2hhbmdlJywgX3RoaXMudXBkYXRlQ29udGVudCk7IC8vIExpc3RlbiB0byBsb2Fkc3RhcnQgYmVjYXVzZSB0aGUgcGxheWVyIGR1cmF0aW9uIGlzIHJlc2V0IHdoZW4gYSBuZXcgbWVkaWEgZWxlbWVudCBpcyBsb2FkZWQsXG4gICAgLy8gYnV0IHRoZSBkdXJhdGlvbmNoYW5nZSBvbiB0aGUgdXNlciBhZ2VudCB3aWxsIG5vdCBmaXJlLlxuICAgIC8vIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWw1LTIwMTEwMTEzL3ZpZGVvLmh0bWwjbWVkaWEtZWxlbWVudC1sb2FkLWFsZ29yaXRobX1cblxuXG4gICAgX3RoaXMub24ocGxheWVyLCAnbG9hZHN0YXJ0JywgX3RoaXMudXBkYXRlQ29udGVudCk7IC8vIEFsc28gbGlzdGVuIGZvciB0aW1ldXBkYXRlIChpbiB0aGUgcGFyZW50KSBhbmQgbG9hZGVkbWV0YWRhdGEgYmVjYXVzZSByZW1vdmluZyB0aG9zZVxuICAgIC8vIGxpc3RlbmVycyBjb3VsZCBoYXZlIGJyb2tlbiBkZXBlbmRlbnQgYXBwbGljYXRpb25zL2xpYnJhcmllcy4gVGhlc2VcbiAgICAvLyBjYW4gbGlrZWx5IGJlIHJlbW92ZWQgZm9yIDcuMC5cblxuXG4gICAgX3RoaXMub24ocGxheWVyLCAnbG9hZGVkbWV0YWRhdGEnLCBfdGhpcy51cGRhdGVDb250ZW50KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBEdXJhdGlvbkRpc3BsYXkucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gJ3Zqcy1kdXJhdGlvbic7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBkdXJhdGlvbiB0aW1lIGRpc3BsYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBgZHVyYXRpb25jaGFuZ2VgLCBgdGltZXVwZGF0ZWAsIG9yIGBsb2FkZWRtZXRhZGF0YWAgZXZlbnQgdGhhdCBjYXVzZWRcbiAgICogICAgICAgIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjZHVyYXRpb25jaGFuZ2VcbiAgICogQGxpc3RlbnMgUGxheWVyI3RpbWV1cGRhdGVcbiAgICogQGxpc3RlbnMgUGxheWVyI2xvYWRlZG1ldGFkYXRhXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZUNvbnRlbnQgPSBmdW5jdGlvbiB1cGRhdGVDb250ZW50KGV2ZW50KSB7XG4gICAgdmFyIGR1cmF0aW9uID0gdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCk7XG4gICAgdGhpcy51cGRhdGVUZXh0Tm9kZV8oZHVyYXRpb24pO1xuICB9O1xuXG4gIHJldHVybiBEdXJhdGlvbkRpc3BsYXk7XG59KFRpbWVEaXNwbGF5KTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBpcyBhZGRlZCB0byB0aGUgYER1cmF0aW9uRGlzcGxheWAgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5EdXJhdGlvbkRpc3BsYXkucHJvdG90eXBlLmxhYmVsVGV4dF8gPSAnRHVyYXRpb24nO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBEdXJhdGlvbkRpc3BsYXlgcyBjb250cm9scy4gQWRkZWQgdG8gZm9yIGxvY2FsaXphdGlvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqXG4gKiBAZGVwcmVjYXRlZCBpbiB2NzsgY29udHJvbFRleHRfIGlzIG5vdCB1c2VkIGluIG5vbi1hY3RpdmUgZGlzcGxheSBDb21wb25lbnRzXG4gKi9cblxuRHVyYXRpb25EaXNwbGF5LnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnRHVyYXRpb24nO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdEdXJhdGlvbkRpc3BsYXknLCBEdXJhdGlvbkRpc3BsYXkpO1xuXG4vKipcbiAqIFRoZSBzZXBhcmF0b3IgYmV0d2VlbiB0aGUgY3VycmVudCB0aW1lIGFuZCBkdXJhdGlvbi5cbiAqIENhbiBiZSBoaWRkZW4gaWYgaXQncyBub3QgbmVlZGVkIGluIHRoZSBkZXNpZ24uXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIFRpbWVEaXZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVEaXZpZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUaW1lRGl2aWRlcigpIHtcbiAgICByZXR1cm4gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVGltZURpdmlkZXIucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGNvbXBvbmVudCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdGltZS1jb250cm9sIHZqcy10aW1lLWRpdmlkZXInLFxuICAgICAgaW5uZXJIVE1MOiAnPGRpdj48c3Bhbj4vPC9zcGFuPjwvZGl2PidcbiAgICB9LCB7XG4gICAgICAvLyB0aGlzIGVsZW1lbnQgYW5kIGl0cyBjb250ZW50cyBjYW4gYmUgaGlkZGVuIGZyb20gYXNzaXN0aXZlIHRlY2hzIHNpbmNlXG4gICAgICAvLyBpdCBpcyBtYWRlIGV4dHJhbmVvdXMgYnkgdGhlIGFubm91bmNlbWVudCBvZiB0aGUgY29udHJvbCB0ZXh0XG4gICAgICAvLyBmb3IgdGhlIGN1cnJlbnQgdGltZSBhbmQgZHVyYXRpb24gZGlzcGxheXNcbiAgICAgICdhcmlhLWhpZGRlbic6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gVGltZURpdmlkZXI7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVGltZURpdmlkZXInLCBUaW1lRGl2aWRlcik7XG5cbi8qKlxuICogRGlzcGxheXMgdGhlIHRpbWUgbGVmdCBpbiB0aGUgdmlkZW9cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgUmVtYWluaW5nVGltZURpc3BsYXkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UaW1lRGlzcGxheSkge1xuICBfaW5oZXJpdHNMb29zZShSZW1haW5pbmdUaW1lRGlzcGxheSwgX1RpbWVEaXNwbGF5KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFJlbWFpbmluZ1RpbWVEaXNwbGF5KHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1RpbWVEaXNwbGF5LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMub24ocGxheWVyLCAnZHVyYXRpb25jaGFuZ2UnLCBfdGhpcy51cGRhdGVDb250ZW50KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBSZW1haW5pbmdUaW1lRGlzcGxheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiAndmpzLXJlbWFpbmluZy10aW1lJztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgQ29tcG9uZW50YCdzIERPTSBlbGVtZW50IHdpdGggdGhlIFwibWludXNcIiBjaGFyYWN0ZWQgcHJlcGVuZCB0byB0aGUgdGltZVxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwkMSgpIHtcbiAgICB2YXIgZWwgPSBfVGltZURpc3BsYXkucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcyk7XG5cbiAgICBlbC5pbnNlcnRCZWZvcmUoY3JlYXRlRWwoJ3NwYW4nLCB7fSwge1xuICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZVxuICAgIH0sICctJyksIHRoaXMuY29udGVudEVsXyk7XG4gICAgcmV0dXJuIGVsO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgcmVtYWluaW5nIHRpbWUgZGlzcGxheS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGB0aW1ldXBkYXRlYCBvciBgZHVyYXRpb25jaGFuZ2VgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjdGltZXVwZGF0ZVxuICAgKiBAbGlzdGVucyBQbGF5ZXIjZHVyYXRpb25jaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlQ29udGVudCA9IGZ1bmN0aW9uIHVwZGF0ZUNvbnRlbnQoZXZlbnQpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMucGxheWVyXy5kdXJhdGlvbigpICE9PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0aW1lOyAvLyBAZGVwcmVjYXRlZCBXZSBzaG91bGQgb25seSB1c2UgcmVtYWluaW5nVGltZURpc3BsYXlcbiAgICAvLyBhcyBvZiB2aWRlby5qcyA3XG5cbiAgICBpZiAodGhpcy5wbGF5ZXJfLmVuZGVkKCkpIHtcbiAgICAgIHRpbWUgPSAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wbGF5ZXJfLnJlbWFpbmluZ1RpbWVEaXNwbGF5KSB7XG4gICAgICB0aW1lID0gdGhpcy5wbGF5ZXJfLnJlbWFpbmluZ1RpbWVEaXNwbGF5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWUgPSB0aGlzLnBsYXllcl8ucmVtYWluaW5nVGltZSgpO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlVGV4dE5vZGVfKHRpbWUpO1xuICB9O1xuXG4gIHJldHVybiBSZW1haW5pbmdUaW1lRGlzcGxheTtcbn0oVGltZURpc3BsYXkpO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IGlzIGFkZGVkIHRvIHRoZSBgUmVtYWluaW5nVGltZURpc3BsYXlgIGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuUmVtYWluaW5nVGltZURpc3BsYXkucHJvdG90eXBlLmxhYmVsVGV4dF8gPSAnUmVtYWluaW5nIFRpbWUnO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBSZW1haW5pbmdUaW1lRGlzcGxheWBzIGNvbnRyb2xzLiBBZGRlZCB0byBmb3IgbG9jYWxpemF0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBkZXByZWNhdGVkIGluIHY3OyBjb250cm9sVGV4dF8gaXMgbm90IHVzZWQgaW4gbm9uLWFjdGl2ZSBkaXNwbGF5IENvbXBvbmVudHNcbiAqL1xuXG5SZW1haW5pbmdUaW1lRGlzcGxheS5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ1JlbWFpbmluZyBUaW1lJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUmVtYWluaW5nVGltZURpc3BsYXknLCBSZW1haW5pbmdUaW1lRGlzcGxheSk7XG5cbi8qKlxuICogRGlzcGxheXMgdGhlIGxpdmUgaW5kaWNhdG9yIHdoZW4gZHVyYXRpb24gaXMgSW5maW5pdHkuXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIExpdmVEaXNwbGF5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpdmVEaXNwbGF5LCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIExpdmVEaXNwbGF5KHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLnVwZGF0ZVNob3dpbmcoKTtcblxuICAgIF90aGlzLm9uKF90aGlzLnBsYXllcigpLCAnZHVyYXRpb25jaGFuZ2UnLCBfdGhpcy51cGRhdGVTaG93aW5nKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgQ29tcG9uZW50YCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gTGl2ZURpc3BsYXkucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsJDEoKSB7XG4gICAgdmFyIGVsID0gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWxpdmUtY29udHJvbCB2anMtY29udHJvbCdcbiAgICB9KTtcblxuICAgIHRoaXMuY29udGVudEVsXyA9IGNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtbGl2ZS1kaXNwbGF5JyxcbiAgICAgIGlubmVySFRNTDogXCI8c3BhbiBjbGFzcz1cXFwidmpzLWNvbnRyb2wtdGV4dFxcXCI+XCIgKyB0aGlzLmxvY2FsaXplKCdTdHJlYW0gVHlwZScpICsgXCJcXHhBMDwvc3Bhbj5cIiArIHRoaXMubG9jYWxpemUoJ0xJVkUnKVxuICAgIH0sIHtcbiAgICAgICdhcmlhLWxpdmUnOiAnb2ZmJ1xuICAgIH0pO1xuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsXyk7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLmNvbnRlbnRFbF8gPSBudWxsO1xuXG4gICAgX0NvbXBvbmVudC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZHVyYXRpb24gdG8gc2VlIGlmIHRoZSBMaXZlRGlzcGxheSBzaG91bGQgYmUgc2hvd2luZyBvciBub3QuIFRoZW4gc2hvdy9oaWRlXG4gICAqIGl0IGFjY29yZGluZ2x5XG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSB7QGxpbmsgUGxheWVyI2R1cmF0aW9uY2hhbmdlfSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI2R1cmF0aW9uY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZVNob3dpbmcgPSBmdW5jdGlvbiB1cGRhdGVTaG93aW5nKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucGxheWVyKCkuZHVyYXRpb24oKSA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIExpdmVEaXNwbGF5O1xufShDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0xpdmVEaXNwbGF5JywgTGl2ZURpc3BsYXkpO1xuXG4vKipcbiAqIERpc3BsYXlzIHRoZSBsaXZlIGluZGljYXRvciB3aGVuIGR1cmF0aW9uIGlzIEluZmluaXR5LlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBTZWVrVG9MaXZlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFNlZWtUb0xpdmUsIF9CdXR0b24pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gU2Vla1RvTGl2ZShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CdXR0b24uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy51cGRhdGVMaXZlRWRnZVN0YXR1cygpO1xuXG4gICAgaWYgKF90aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIpIHtcbiAgICAgIF90aGlzLm9uKF90aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIsICdsaXZlZWRnZWNoYW5nZScsIF90aGlzLnVwZGF0ZUxpdmVFZGdlU3RhdHVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYENvbXBvbmVudGAncyBET00gZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFNlZWtUb0xpdmUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsJDEoKSB7XG4gICAgdmFyIGVsID0gX0J1dHRvbi5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnYnV0dG9uJywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXNlZWstdG8tbGl2ZS1jb250cm9sIHZqcy1jb250cm9sJ1xuICAgIH0pO1xuXG4gICAgdGhpcy50ZXh0RWxfID0gY3JlYXRlRWwoJ3NwYW4nLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtc2Vlay10by1saXZlLXRleHQnLFxuICAgICAgaW5uZXJIVE1MOiB0aGlzLmxvY2FsaXplKCdMSVZFJylcbiAgICB9LCB7XG4gICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZSdcbiAgICB9KTtcbiAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLnRleHRFbF8pO1xuICAgIHJldHVybiBlbDtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBzdGF0ZSBvZiB0aGlzIGJ1dHRvbiBpZiB3ZSBhcmUgYXQgdGhlIGxpdmUgZWRnZVxuICAgKiBvciBub3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlTGl2ZUVkZ2VTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVMaXZlRWRnZVN0YXR1cygpIHtcbiAgICAvLyBkZWZhdWx0IHRvIGxpdmUgZWRnZVxuICAgIGlmICghdGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyIHx8IHRoaXMucGxheWVyXy5saXZlVHJhY2tlci5hdExpdmVFZGdlKCkpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtYXQtbGl2ZS1lZGdlJyk7XG4gICAgICB0aGlzLmNvbnRyb2xUZXh0KCdTZWVrIHRvIGxpdmUsIGN1cnJlbnRseSBwbGF5aW5nIGxpdmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtYXQtbGl2ZS1lZGdlJyk7XG4gICAgICB0aGlzLmNvbnRyb2xUZXh0KCdTZWVrIHRvIGxpdmUsIGN1cnJlbnRseSBiZWhpbmQgbGl2ZScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogT24gY2xpY2sgYnJpbmcgdXMgYXMgbmVhciB0byB0aGUgbGl2ZSBwb2ludCBhcyBwb3NzaWJsZS5cbiAgICogVGhpcyByZXF1aXJlcyB0aGF0IHdlIHdhaXQgZm9yIHRoZSBuZXh0IGBsaXZlLXNlZWthYmxlLWNoYW5nZWBcbiAgICogZXZlbnQgd2hpY2ggd2lsbCBoYXBwZW4gZXZlcnkgc2VnbWVudCBsZW5ndGggc2Vjb25kcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljaygpIHtcbiAgICB0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIuc2Vla1RvTGl2ZUVkZ2UoKTtcbiAgfVxuICAvKipcbiAgICogRGlzcG9zZSBvZiB0aGUgZWxlbWVudCBhbmQgc3RvcCB0cmFja2luZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyKSB7XG4gICAgICB0aGlzLm9mZih0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIsICdsaXZlZWRnZWNoYW5nZScsIHRoaXMudXBkYXRlTGl2ZUVkZ2VTdGF0dXMpO1xuICAgIH1cblxuICAgIHRoaXMudGV4dEVsXyA9IG51bGw7XG5cbiAgICBfQnV0dG9uLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIFNlZWtUb0xpdmU7XG59KEJ1dHRvbik7XG5cblNlZWtUb0xpdmUucHJvdG90eXBlLmNvbnRyb2xUZXh0XyA9ICdTZWVrIHRvIGxpdmUsIGN1cnJlbnRseSBwbGF5aW5nIGxpdmUnO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdTZWVrVG9MaXZlJywgU2Vla1RvTGl2ZSk7XG5cbi8qKlxuICogS2VlcCBhIG51bWJlciBiZXR3ZWVuIGEgbWluIGFuZCBhIG1heCB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcbiAqICAgICAgICBUaGUgbnVtYmVyIHRvIGNsYW1wXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG1pblxuICogICAgICAgIFRoZSBtaW5pbXVtIHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4XG4gKiAgICAgICAgVGhlIG1heGltdW0gdmFsdWVcbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiAgICAgICAgIHRoZSBjbGFtcGVkIG51bWJlclxuICovXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChudW1iZXIsIG1pbiwgbWF4KSB7XG4gIG51bWJlciA9IE51bWJlcihudW1iZXIpO1xuICByZXR1cm4gTWF0aC5taW4obWF4LCBNYXRoLm1heChtaW4sIGlzTmFOKG51bWJlcikgPyBtaW4gOiBudW1iZXIpKTtcbn07XG5cbi8qKlxuICogVGhlIGJhc2UgZnVuY3Rpb25hbGl0eSBmb3IgYSBzbGlkZXIuIENhbiBiZSB2ZXJ0aWNhbCBvciBob3Jpem9udGFsLlxuICogRm9yIGluc3RhbmNlIHRoZSB2b2x1bWUgYmFyIG9yIHRoZSBzZWVrIGJhciBvbiBhIHZpZGVvIGlzIGEgc2xpZGVyLlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBTbGlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU2xpZGVyLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzc1xuICAqXG4gICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgKi9cbiAgZnVuY3Rpb24gU2xpZGVyKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpczsgLy8gU2V0IHByb3BlcnR5IG5hbWVzIHRvIGJhciB0byBtYXRjaCB3aXRoIHRoZSBjaGlsZCBTbGlkZXIgY2xhc3MgaXMgbG9va2luZyBmb3JcblxuICAgIF90aGlzLmJhciA9IF90aGlzLmdldENoaWxkKF90aGlzLm9wdGlvbnNfLmJhck5hbWUpOyAvLyBTZXQgYSBob3Jpem9udGFsIG9yIHZlcnRpY2FsIGNsYXNzIG9uIHRoZSBzbGlkZXIgZGVwZW5kaW5nIG9uIHRoZSBzbGlkZXIgdHlwZVxuXG4gICAgX3RoaXMudmVydGljYWwoISFfdGhpcy5vcHRpb25zXy52ZXJ0aWNhbCk7XG5cbiAgICBfdGhpcy5lbmFibGUoKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQXJlIGNvbnRyb2xzIGFyZSBjdXJyZW50bHkgZW5hYmxlZCBmb3IgdGhpcyBzbGlkZXIgb3Igbm90LlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIHRydWUgaWYgY29udHJvbHMgYXJlIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTbGlkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5lbmFibGVkID0gZnVuY3Rpb24gZW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbmFibGVkXztcbiAgfVxuICAvKipcbiAgICogRW5hYmxlIGNvbnRyb2xzIGZvciB0aGlzIHNsaWRlciBpZiB0aGV5IGFyZSBkaXNhYmxlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgaWYgKHRoaXMuZW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vbignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVNb3VzZURvd24pO1xuICAgIHRoaXMub24oJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vbigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XG4gICAgdGhpcy5vbignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrKTsgLy8gVE9ETzogZGVwcmVjYXRlZCwgY29udHJvbHN2aXNpYmxlIGRvZXMgbm90IHNlZW0gdG8gYmUgZmlyZWRcblxuICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLCAnY29udHJvbHN2aXNpYmxlJywgdGhpcy51cGRhdGUpO1xuXG4gICAgaWYgKHRoaXMucGxheWVyRXZlbnQpIHtcbiAgICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLCB0aGlzLnBsYXllckV2ZW50LCB0aGlzLnVwZGF0ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAwKTtcbiAgICB0aGlzLmVuYWJsZWRfID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZSBjb250cm9scyBmb3IgdGhpcyBzbGlkZXIgaWYgdGhleSBhcmUgZW5hYmxlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAoIXRoaXMuZW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IHRoaXMuYmFyLmVsXy5vd25lckRvY3VtZW50O1xuICAgIHRoaXMub2ZmKCdtb3VzZWRvd24nLCB0aGlzLmhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vZmYoJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vZmYoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xuICAgIHRoaXMub2ZmKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2spO1xuICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgJ2NvbnRyb2xzdmlzaWJsZScsIHRoaXMudXBkYXRlKTtcbiAgICB0aGlzLm9mZihkb2MsICdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgdGhpcy5vZmYoZG9jLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5vZmYoZG9jLCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub2ZmKGRvYywgJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICB0aGlzLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXG4gICAgaWYgKHRoaXMucGxheWVyRXZlbnQpIHtcbiAgICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgdGhpcy5wbGF5ZXJFdmVudCwgdGhpcy51cGRhdGUpO1xuICAgIH1cblxuICAgIHRoaXMuZW5hYmxlZF8gPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgU2xpZGVyYHMgRE9NIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBUeXBlIG9mIGVsZW1lbnQgdG8gY3JlYXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BzPXt9XVxuICAgKiAgICAgICAgTGlzdCBvZiBwcm9wZXJ0aWVzIGluIE9iamVjdCBmb3JtLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW2F0dHJpYnV0ZXM9e31dXG4gICAqICAgICAgICBsaXN0IG9mIGF0dHJpYnV0ZXMgaW4gT2JqZWN0IGZvcm0uXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwodHlwZSwgcHJvcHMsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgICAgcHJvcHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoYXR0cmlidXRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgfVxuXG4gICAgLy8gQWRkIHRoZSBzbGlkZXIgZWxlbWVudCBjbGFzcyB0byBhbGwgc3ViIGNsYXNzZXNcbiAgICBwcm9wcy5jbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyAnIHZqcy1zbGlkZXInO1xuICAgIHByb3BzID0gYXNzaWduKHtcbiAgICAgIHRhYkluZGV4OiAwXG4gICAgfSwgcHJvcHMpO1xuICAgIGF0dHJpYnV0ZXMgPSBhc3NpZ24oe1xuICAgICAgJ3JvbGUnOiAnc2xpZGVyJyxcbiAgICAgICdhcmlhLXZhbHVlbm93JzogMCxcbiAgICAgICdhcmlhLXZhbHVlbWluJzogMCxcbiAgICAgICdhcmlhLXZhbHVlbWF4JzogMTAwLFxuICAgICAgJ3RhYkluZGV4JzogMFxuICAgIH0sIGF0dHJpYnV0ZXMpO1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsIHR5cGUsIHByb3BzLCBhdHRyaWJ1dGVzKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCBldmVudHMgb24gdGhlIGBTbGlkZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgYG1vdXNlZG93bmAgb3IgYHRvdWNoc3RhcnRgIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZnVuY3Rpb25cbiAgICpcbiAgICogQGxpc3RlbnMgbW91c2Vkb3duXG4gICAqIEBsaXN0ZW5zIHRvdWNoc3RhcnRcbiAgICogQGZpcmVzIFNsaWRlciNzbGlkZXJhY3RpdmVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG4gICAgdmFyIGRvYyA9IHRoaXMuYmFyLmVsXy5vd25lckRvY3VtZW50O1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gLy8gRG8gbm90IGNhbGwgcHJldmVudERlZmF1bHQoKSBvbiB0b3VjaHN0YXJ0IGluIENocm9tZVxuICAgIC8vIHRvIGF2b2lkIGNvbnNvbGUgd2FybmluZ3MuIFVzZSBhICd0b3VjaC1hY3Rpb246IG5vbmUnIHN0eWxlXG4gICAgLy8gaW5zdGVhZCB0byBwcmV2ZW50IHVuaW50ZW50ZWQgc2Nyb2xsaW5nLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi91cGRhdGVzLzIwMTcvMDEvc2Nyb2xsaW5nLWludGVydmVudGlvblxuXG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmICFJU19DSFJPTUUpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgYmxvY2tUZXh0U2VsZWN0aW9uKCk7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXNsaWRpbmcnKTtcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgc2xpZGVyIGlzIGluIGFuIGFjdGl2ZSBzdGF0ZVxuICAgICAqXG4gICAgICogQGV2ZW50IFNsaWRlciNzbGlkZXJhY3RpdmVcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ3NsaWRlcmFjdGl2ZScpO1xuICAgIHRoaXMub24oZG9jLCAnbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub24oZG9jLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5vbihkb2MsICd0b3VjaG1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgdGhpcy5vbihkb2MsICd0b3VjaGVuZCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5oYW5kbGVNb3VzZU1vdmUoZXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgdGhlIGBtb3VzZW1vdmVgLCBgdG91Y2htb3ZlYCwgYW5kIGBtb3VzZWRvd25gIGV2ZW50cyBvbiB0aGlzIGBTbGlkZXJgLlxuICAgKiBUaGUgYG1vdXNlbW92ZWAgYW5kIGB0b3VjaG1vdmVgIGV2ZW50cyB3aWxsIG9ubHkgb25seSB0cmlnZ2VyIHRoaXMgZnVuY3Rpb24gZHVyaW5nXG4gICAqIGBtb3VzZWRvd25gIGFuZCBgdG91Y2hzdGFydGAuIFRoaXMgaXMgZHVlIHRvIHtAbGluayBTbGlkZXIjaGFuZGxlTW91c2VEb3dufSBhbmRcbiAgICoge0BsaW5rIFNsaWRlciNoYW5kbGVNb3VzZVVwfS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIGBtb3VzZWRvd25gLCBgbW91c2Vtb3ZlYCwgYHRvdWNoc3RhcnRgLCBvciBgdG91Y2htb3ZlYCBldmVudCB0aGF0IHRyaWdnZXJlZFxuICAgKiAgICAgICAgdGhpcyBmdW5jdGlvblxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZW1vdmVcbiAgICogQGxpc3RlbnMgdG91Y2htb3ZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShldmVudCkge31cbiAgLyoqXG4gICAqIEhhbmRsZSBgbW91c2V1cGAgb3IgYHRvdWNoZW5kYCBldmVudHMgb24gdGhlIGBTbGlkZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgYG1vdXNldXBgIG9yIGB0b3VjaGVuZGAgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBmdW5jdGlvbi5cbiAgICpcbiAgICogQGxpc3RlbnMgdG91Y2hlbmRcbiAgICogQGxpc3RlbnMgbW91c2V1cFxuICAgKiBAZmlyZXMgU2xpZGVyI3NsaWRlcmluYWN0aXZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKCkge1xuICAgIHZhciBkb2MgPSB0aGlzLmJhci5lbF8ub3duZXJEb2N1bWVudDtcbiAgICB1bmJsb2NrVGV4dFNlbGVjdGlvbigpO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1zbGlkaW5nJyk7XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gdGhlIHNsaWRlciBpcyBubyBsb25nZXIgaW4gYW4gYWN0aXZlIHN0YXRlLlxuICAgICAqXG4gICAgICogQGV2ZW50IFNsaWRlciNzbGlkZXJpbmFjdGl2ZVxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignc2xpZGVyaW5hY3RpdmUnKTtcbiAgICB0aGlzLm9mZihkb2MsICdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgdGhpcy5vZmYoZG9jLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5vZmYoZG9jLCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub2ZmKGRvYywgJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHByb2dyZXNzIGJhciBvZiB0aGUgYFNsaWRlcmAuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICAgVGhlIHBlcmNlbnRhZ2Ugb2YgcHJvZ3Jlc3MgdGhlIHByb2dyZXNzIGJhciByZXByZXNlbnRzIGFzIGFcbiAgICogICAgICAgICAgbnVtYmVyIGZyb20gMCB0byAxLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAvLyBJbiBWb2x1bWVCYXIgaW5pdCB3ZSBoYXZlIGEgc2V0VGltZW91dCBmb3IgdXBkYXRlIHRoYXQgcG9wcyBhbmQgdXBkYXRlXG4gICAgLy8gdG8gdGhlIGVuZCBvZiB0aGUgZXhlY3V0aW9uIHN0YWNrLiBUaGUgcGxheWVyIGlzIGRlc3Ryb3llZCBiZWZvcmUgdGhlblxuICAgIC8vIHVwZGF0ZSB3aWxsIGNhdXNlIGFuIGVycm9yXG4gICAgLy8gSWYgdGhlcmUncyBubyBiYXIuLi5cbiAgICBpZiAoIXRoaXMuZWxfIHx8ICF0aGlzLmJhcikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gY2xhbXAgcHJvZ3Jlc3MgYmV0d2VlbiAwIGFuZCAxXG4gICAgLy8gYW5kIG9ubHkgcm91bmQgdG8gZm91ciBkZWNpbWFsIHBsYWNlcywgYXMgd2Ugcm91bmQgdG8gdHdvIGJlbG93XG5cblxuICAgIHZhciBwcm9ncmVzcyA9IHRoaXMuZ2V0UHJvZ3Jlc3MoKTtcblxuICAgIGlmIChwcm9ncmVzcyA9PT0gdGhpcy5wcm9ncmVzc18pIHtcbiAgICAgIHJldHVybiBwcm9ncmVzcztcbiAgICB9XG5cbiAgICB0aGlzLnByb2dyZXNzXyA9IHByb2dyZXNzO1xuICAgIHRoaXMucmVxdWVzdE5hbWVkQW5pbWF0aW9uRnJhbWUoJ1NsaWRlciN1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBTZXQgdGhlIG5ldyBiYXIgd2lkdGggb3IgaGVpZ2h0XG4gICAgICB2YXIgc2l6ZUtleSA9IF90aGlzMi52ZXJ0aWNhbCgpID8gJ2hlaWdodCcgOiAnd2lkdGgnOyAvLyBDb252ZXJ0IHRvIGEgcGVyY2VudGFnZSBmb3IgY3NzIHZhbHVlXG5cbiAgICAgIF90aGlzMi5iYXIuZWwoKS5zdHlsZVtzaXplS2V5XSA9IChwcm9ncmVzcyAqIDEwMCkudG9GaXhlZCgyKSArICclJztcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcGVyY2VudGFnZSBvZiB0aGUgYmFyIHRoYXQgc2hvdWxkIGJlIGZpbGxlZFxuICAgKiBidXQgY2xhbXBlZCBhbmQgcm91bmRlZC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIHBlcmNlbnRhZ2UgZmlsbGVkIHRoYXQgdGhlIHNsaWRlciBpc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRQcm9ncmVzcyA9IGZ1bmN0aW9uIGdldFByb2dyZXNzKCkge1xuICAgIHJldHVybiBOdW1iZXIoY2xhbXAodGhpcy5nZXRQZXJjZW50KCksIDAsIDEpLnRvRml4ZWQoNCkpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgZGlzdGFuY2UgZm9yIHNsaWRlclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIFNsaWRlci5cbiAgICogICAgICAgICAtIHBvc2l0aW9uLnggZm9yIHZlcnRpY2FsIGBTbGlkZXJgc1xuICAgKiAgICAgICAgIC0gcG9zaXRpb24ueSBmb3IgaG9yaXpvbnRhbCBgU2xpZGVyYHNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2FsY3VsYXRlRGlzdGFuY2UgPSBmdW5jdGlvbiBjYWxjdWxhdGVEaXN0YW5jZShldmVudCkge1xuICAgIHZhciBwb3NpdGlvbiA9IGdldFBvaW50ZXJQb3NpdGlvbih0aGlzLmVsXywgZXZlbnQpO1xuXG4gICAgaWYgKHRoaXMudmVydGljYWwoKSkge1xuICAgICAgcmV0dXJuIHBvc2l0aW9uLnk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc2l0aW9uLng7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBhIGBrZXlkb3duYCBldmVudCBvbiB0aGUgYFNsaWRlcmAuIFdhdGNoZXMgZm9yIGxlZnQsIHJpZ3RoLCB1cCwgYW5kIGRvd25cbiAgICogYXJyb3cga2V5cy4gVGhpcyBmdW5jdGlvbiB3aWxsIG9ubHkgYmUgY2FsbGVkIHdoZW4gdGhlIHNsaWRlciBoYXMgZm9jdXMuIFNlZVxuICAgKiB7QGxpbmsgU2xpZGVyI2hhbmRsZUZvY3VzfSBhbmQge0BsaW5rIFNsaWRlciNoYW5kbGVCbHVyfS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIHRoZSBga2V5ZG93bmAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICAvLyBMZWZ0IGFuZCBEb3duIEFycm93c1xuICAgIGlmIChrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdMZWZ0JykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnRG93bicpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnN0ZXBCYWNrKCk7IC8vIFVwIGFuZCBSaWdodCBBcnJvd3NcbiAgICB9IGVsc2UgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ1JpZ2h0JykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnVXAnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5zdGVwRm9yd2FyZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQYXNzIGtleWRvd24gaGFuZGxpbmcgdXAgZm9yIHVuc3VwcG9ydGVkIGtleXNcbiAgICAgIF9Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZUtleURvd24uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBMaXN0ZW5lciBmb3IgY2xpY2sgZXZlbnRzIG9uIHNsaWRlciwgdXNlZCB0byBwcmV2ZW50IGNsaWNrc1xuICAgKiAgIGZyb20gYnViYmxpbmcgdXAgdG8gcGFyZW50IGVsZW1lbnRzIGxpa2UgYnV0dG9uIG1lbnVzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICogICAgICAgIEV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgb2JqZWN0IHRvIHJ1blxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICAvKipcbiAgICogR2V0L3NldCBpZiBzbGlkZXIgaXMgaG9yaXpvbnRhbCBmb3IgdmVydGljYWxcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbYm9vbF1cbiAgICogICAgICAgIC0gdHJ1ZSBpZiBzbGlkZXIgaXMgdmVydGljYWwsXG4gICAqICAgICAgICAtIGZhbHNlIGlzIGhvcml6b250YWxcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICAtIHRydWUgaWYgc2xpZGVyIGlzIHZlcnRpY2FsLCBhbmQgZ2V0dGluZ1xuICAgKiAgICAgICAgIC0gZmFsc2UgaWYgdGhlIHNsaWRlciBpcyBob3Jpem9udGFsLCBhbmQgZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by52ZXJ0aWNhbCA9IGZ1bmN0aW9uIHZlcnRpY2FsKGJvb2wpIHtcbiAgICBpZiAoYm9vbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbF8gfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy52ZXJ0aWNhbF8gPSAhIWJvb2w7XG5cbiAgICBpZiAodGhpcy52ZXJ0aWNhbF8pIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1zbGlkZXItdmVydGljYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLXNsaWRlci1ob3Jpem9udGFsJyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTbGlkZXI7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnU2xpZGVyJywgU2xpZGVyKTtcblxudmFyIHBlcmNlbnRpZnkgPSBmdW5jdGlvbiBwZXJjZW50aWZ5KHRpbWUsIGVuZCkge1xuICByZXR1cm4gY2xhbXAodGltZSAvIGVuZCAqIDEwMCwgMCwgMTAwKS50b0ZpeGVkKDIpICsgJyUnO1xufTtcbi8qKlxuICogU2hvd3MgbG9hZGluZyBwcm9ncmVzc1xuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cblxudmFyIExvYWRQcm9ncmVzc0JhciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMb2FkUHJvZ3Jlc3NCYXIsIF9Db21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gTG9hZFByb2dyZXNzQmFyKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5wYXJ0RWxzXyA9IFtdO1xuXG4gICAgX3RoaXMub24ocGxheWVyLCAncHJvZ3Jlc3MnLCBfdGhpcy51cGRhdGUpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBMb2FkUHJvZ3Jlc3NCYXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsJDEoKSB7XG4gICAgdmFyIGVsID0gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWxvYWQtcHJvZ3Jlc3MnXG4gICAgfSk7XG5cbiAgICB2YXIgd3JhcHBlciA9IGNyZWF0ZUVsKCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWNvbnRyb2wtdGV4dCdcbiAgICB9KTtcbiAgICB2YXIgbG9hZGVkVGV4dCA9IGNyZWF0ZUVsKCdzcGFuJywge1xuICAgICAgdGV4dENvbnRlbnQ6IHRoaXMubG9jYWxpemUoJ0xvYWRlZCcpXG4gICAgfSk7XG4gICAgdmFyIHNlcGFyYXRvciA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCc6ICcpO1xuICAgIHRoaXMucGVyY2VudGFnZUVsXyA9IGNyZWF0ZUVsKCdzcGFuJywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWNvbnRyb2wtdGV4dC1sb2FkZWQtcGVyY2VudGFnZScsXG4gICAgICB0ZXh0Q29udGVudDogJzAlJ1xuICAgIH0pO1xuICAgIGVsLmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobG9hZGVkVGV4dCk7XG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChzZXBhcmF0b3IpO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5wZXJjZW50YWdlRWxfKTtcbiAgICByZXR1cm4gZWw7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMucGFydEVsc18gPSBudWxsO1xuICAgIHRoaXMucGVyY2VudGFnZUVsXyA9IG51bGw7XG5cbiAgICBfQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBwcm9ncmVzcyBiYXJcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBwcm9ncmVzc2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNwcm9ncmVzc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZXZlbnQpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMucmVxdWVzdE5hbWVkQW5pbWF0aW9uRnJhbWUoJ0xvYWRQcm9ncmVzc0JhciN1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbGl2ZVRyYWNrZXIgPSBfdGhpczIucGxheWVyXy5saXZlVHJhY2tlcjtcblxuICAgICAgdmFyIGJ1ZmZlcmVkID0gX3RoaXMyLnBsYXllcl8uYnVmZmVyZWQoKTtcblxuICAgICAgdmFyIGR1cmF0aW9uID0gbGl2ZVRyYWNrZXIgJiYgbGl2ZVRyYWNrZXIuaXNMaXZlKCkgPyBsaXZlVHJhY2tlci5zZWVrYWJsZUVuZCgpIDogX3RoaXMyLnBsYXllcl8uZHVyYXRpb24oKTtcblxuICAgICAgdmFyIGJ1ZmZlcmVkRW5kID0gX3RoaXMyLnBsYXllcl8uYnVmZmVyZWRFbmQoKTtcblxuICAgICAgdmFyIGNoaWxkcmVuID0gX3RoaXMyLnBhcnRFbHNfO1xuICAgICAgdmFyIHBlcmNlbnQgPSBwZXJjZW50aWZ5KGJ1ZmZlcmVkRW5kLCBkdXJhdGlvbik7XG5cbiAgICAgIGlmIChfdGhpczIucGVyY2VudF8gIT09IHBlcmNlbnQpIHtcbiAgICAgICAgLy8gdXBkYXRlIHRoZSB3aWR0aCBvZiB0aGUgcHJvZ3Jlc3MgYmFyXG4gICAgICAgIF90aGlzMi5lbF8uc3R5bGUud2lkdGggPSBwZXJjZW50OyAvLyB1cGRhdGUgdGhlIGNvbnRyb2wtdGV4dFxuXG4gICAgICAgIHRleHRDb250ZW50KF90aGlzMi5wZXJjZW50YWdlRWxfLCBwZXJjZW50KTtcbiAgICAgICAgX3RoaXMyLnBlcmNlbnRfID0gcGVyY2VudDtcbiAgICAgIH0gLy8gYWRkIGNoaWxkIGVsZW1lbnRzIHRvIHJlcHJlc2VudCB0aGUgaW5kaXZpZHVhbCBidWZmZXJlZCB0aW1lIHJhbmdlc1xuXG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gYnVmZmVyZWQuc3RhcnQoaSk7XG4gICAgICAgIHZhciBlbmQgPSBidWZmZXJlZC5lbmQoaSk7XG4gICAgICAgIHZhciBwYXJ0ID0gY2hpbGRyZW5baV07XG5cbiAgICAgICAgaWYgKCFwYXJ0KSB7XG4gICAgICAgICAgcGFydCA9IF90aGlzMi5lbF8uYXBwZW5kQ2hpbGQoY3JlYXRlRWwoKSk7XG4gICAgICAgICAgY2hpbGRyZW5baV0gPSBwYXJ0O1xuICAgICAgICB9IC8vICBvbmx5IHVwZGF0ZSBpZiBjaGFuZ2VkXG5cblxuICAgICAgICBpZiAocGFydC5kYXRhc2V0LnN0YXJ0ID09PSBzdGFydCAmJiBwYXJ0LmRhdGFzZXQuZW5kID09PSBlbmQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnQuZGF0YXNldC5zdGFydCA9IHN0YXJ0O1xuICAgICAgICBwYXJ0LmRhdGFzZXQuZW5kID0gZW5kOyAvLyBzZXQgdGhlIHBlcmNlbnQgYmFzZWQgb24gdGhlIHdpZHRoIG9mIHRoZSBwcm9ncmVzcyBiYXIgKGJ1ZmZlcmVkRW5kKVxuXG4gICAgICAgIHBhcnQuc3R5bGUubGVmdCA9IHBlcmNlbnRpZnkoc3RhcnQsIGJ1ZmZlcmVkRW5kKTtcbiAgICAgICAgcGFydC5zdHlsZS53aWR0aCA9IHBlcmNlbnRpZnkoZW5kIC0gc3RhcnQsIGJ1ZmZlcmVkRW5kKTtcbiAgICAgIH0gLy8gcmVtb3ZlIHVudXNlZCBidWZmZXJlZCByYW5nZSBlbGVtZW50c1xuXG5cbiAgICAgIGZvciAodmFyIF9pID0gY2hpbGRyZW4ubGVuZ3RoOyBfaSA+IGJ1ZmZlcmVkLmxlbmd0aDsgX2ktLSkge1xuICAgICAgICBfdGhpczIuZWxfLnJlbW92ZUNoaWxkKGNoaWxkcmVuW19pIC0gMV0pO1xuICAgICAgfVxuXG4gICAgICBjaGlsZHJlbi5sZW5ndGggPSBidWZmZXJlZC5sZW5ndGg7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIExvYWRQcm9ncmVzc0Jhcjtcbn0oQ29tcG9uZW50KTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdMb2FkUHJvZ3Jlc3NCYXInLCBMb2FkUHJvZ3Jlc3NCYXIpO1xuXG4vKipcbiAqIFRpbWUgdG9vbHRpcHMgZGlzcGxheSBhIHRpbWUgYWJvdmUgdGhlIHByb2dyZXNzIGJhci5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgVGltZVRvb2x0aXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGltZVRvb2x0aXAsIF9Db21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSB7QGxpbmsgUGxheWVyfSB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gVGltZVRvb2x0aXAocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLnVwZGF0ZSA9IHRocm90dGxlKGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLnVwZGF0ZSksIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgdGltZSB0b29sdGlwIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVGltZVRvb2x0aXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdGltZS10b29sdGlwJ1xuICAgIH0sIHtcbiAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgdGltZSB0b29sdGlwIHJlbGF0aXZlIHRvIHRoZSBgU2Vla0JhcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZWVrQmFyUmVjdFxuICAgKiAgICAgICAgVGhlIGBDbGllbnRSZWN0YCBmb3IgdGhlIHtAbGluayBTZWVrQmFyfSBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Vla0JhclBvaW50XG4gICAqICAgICAgICBBIG51bWJlciBmcm9tIDAgdG8gMSwgcmVwcmVzZW50aW5nIGEgaG9yaXpvbnRhbCByZWZlcmVuY2UgcG9pbnRcbiAgICogICAgICAgIGZyb20gdGhlIGxlZnQgZWRnZSBvZiB0aGUge0BsaW5rIFNlZWtCYXJ9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShzZWVrQmFyUmVjdCwgc2Vla0JhclBvaW50LCBjb250ZW50KSB7XG4gICAgdmFyIHRvb2x0aXBSZWN0ID0gZmluZFBvc2l0aW9uKHRoaXMuZWxfKTtcbiAgICB2YXIgcGxheWVyUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdCh0aGlzLnBsYXllcl8uZWwoKSk7XG4gICAgdmFyIHNlZWtCYXJQb2ludFB4ID0gc2Vla0JhclJlY3Qud2lkdGggKiBzZWVrQmFyUG9pbnQ7IC8vIGRvIG5vdGhpbmcgaWYgZWl0aGVyIHJlY3QgaXNuJ3QgYXZhaWxhYmxlXG4gICAgLy8gZm9yIGV4YW1wbGUsIGlmIHRoZSBwbGF5ZXIgaXNuJ3QgaW4gdGhlIERPTSBmb3IgdGVzdGluZ1xuXG4gICAgaWYgKCFwbGF5ZXJSZWN0IHx8ICF0b29sdGlwUmVjdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVGhpcyBpcyB0aGUgc3BhY2UgbGVmdCBvZiB0aGUgYHNlZWtCYXJQb2ludGAgYXZhaWxhYmxlIHdpdGhpbiB0aGUgYm91bmRzXG4gICAgLy8gb2YgdGhlIHBsYXllci4gV2UgY2FsY3VsYXRlIGFueSBnYXAgYmV0d2VlbiB0aGUgbGVmdCBlZGdlIG9mIHRoZSBwbGF5ZXJcbiAgICAvLyBhbmQgdGhlIGxlZnQgZWRnZSBvZiB0aGUgYFNlZWtCYXJgIGFuZCBhZGQgdGhlIG51bWJlciBvZiBwaXhlbHMgaW4gdGhlXG4gICAgLy8gYFNlZWtCYXJgIGJlZm9yZSBoaXR0aW5nIHRoZSBgc2Vla0JhclBvaW50YFxuXG5cbiAgICB2YXIgc3BhY2VMZWZ0T2ZQb2ludCA9IHNlZWtCYXJSZWN0LmxlZnQgLSBwbGF5ZXJSZWN0LmxlZnQgKyBzZWVrQmFyUG9pbnRQeDsgLy8gVGhpcyBpcyB0aGUgc3BhY2UgcmlnaHQgb2YgdGhlIGBzZWVrQmFyUG9pbnRgIGF2YWlsYWJsZSB3aXRoaW4gdGhlIGJvdW5kc1xuICAgIC8vIG9mIHRoZSBwbGF5ZXIuIFdlIGNhbGN1bGF0ZSB0aGUgbnVtYmVyIG9mIHBpeGVscyBmcm9tIHRoZSBgc2Vla0JhclBvaW50YFxuICAgIC8vIHRvIHRoZSByaWdodCBlZGdlIG9mIHRoZSBgU2Vla0JhcmAgYW5kIGFkZCB0byB0aGF0IGFueSBnYXAgYmV0d2VlbiB0aGVcbiAgICAvLyByaWdodCBlZGdlIG9mIHRoZSBgU2Vla0JhcmAgYW5kIHRoZSBwbGF5ZXIuXG5cbiAgICB2YXIgc3BhY2VSaWdodE9mUG9pbnQgPSBzZWVrQmFyUmVjdC53aWR0aCAtIHNlZWtCYXJQb2ludFB4ICsgKHBsYXllclJlY3QucmlnaHQgLSBzZWVrQmFyUmVjdC5yaWdodCk7IC8vIFRoaXMgaXMgdGhlIG51bWJlciBvZiBwaXhlbHMgYnkgd2hpY2ggdGhlIHRvb2x0aXAgd2lsbCBuZWVkIHRvIGJlIHB1bGxlZFxuICAgIC8vIGZ1cnRoZXIgdG8gdGhlIHJpZ2h0IHRvIGNlbnRlciBpdCBvdmVyIHRoZSBgc2Vla0JhclBvaW50YC5cblxuICAgIHZhciBwdWxsVG9vbHRpcEJ5ID0gdG9vbHRpcFJlY3Qud2lkdGggLyAyOyAvLyBBZGp1c3QgdGhlIGBwdWxsVG9vbHRpcEJ5YCBkaXN0YW5jZSB0byB0aGUgbGVmdCBvciByaWdodCBkZXBlbmRpbmcgb25cbiAgICAvLyB0aGUgcmVzdWx0cyBvZiB0aGUgc3BhY2UgY2FsY3VsYXRpb25zIGFib3ZlLlxuXG4gICAgaWYgKHNwYWNlTGVmdE9mUG9pbnQgPCBwdWxsVG9vbHRpcEJ5KSB7XG4gICAgICBwdWxsVG9vbHRpcEJ5ICs9IHB1bGxUb29sdGlwQnkgLSBzcGFjZUxlZnRPZlBvaW50O1xuICAgIH0gZWxzZSBpZiAoc3BhY2VSaWdodE9mUG9pbnQgPCBwdWxsVG9vbHRpcEJ5KSB7XG4gICAgICBwdWxsVG9vbHRpcEJ5ID0gc3BhY2VSaWdodE9mUG9pbnQ7XG4gICAgfSAvLyBEdWUgdG8gdGhlIGltcHJlY2lzaW9uIG9mIGRlY2ltYWwvcmF0aW8gYmFzZWQgY2FsY3VsYXRpb25zIGFuZCB2YXJ5aW5nXG4gICAgLy8gcm91bmRpbmcgYmVoYXZpb3JzLCB0aGVyZSBhcmUgY2FzZXMgd2hlcmUgdGhlIHNwYWNpbmcgYWRqdXN0bWVudCBpcyBvZmZcbiAgICAvLyBieSBhIHBpeGVsIG9yIHR3by4gVGhpcyBhZGRzIGluc3VyYW5jZSB0byB0aGVzZSBjYWxjdWxhdGlvbnMuXG5cblxuICAgIGlmIChwdWxsVG9vbHRpcEJ5IDwgMCkge1xuICAgICAgcHVsbFRvb2x0aXBCeSA9IDA7XG4gICAgfSBlbHNlIGlmIChwdWxsVG9vbHRpcEJ5ID4gdG9vbHRpcFJlY3Qud2lkdGgpIHtcbiAgICAgIHB1bGxUb29sdGlwQnkgPSB0b29sdGlwUmVjdC53aWR0aDtcbiAgICB9XG5cbiAgICB0aGlzLmVsXy5zdHlsZS5yaWdodCA9IFwiLVwiICsgcHVsbFRvb2x0aXBCeSArIFwicHhcIjtcbiAgICB0aGlzLndyaXRlKGNvbnRlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBXcml0ZSB0aGUgdGltZSB0byB0aGUgdG9vbHRpcCBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAgICogICAgICAgIFRoZSBmb3JtYXR0ZWQgdGltZSBmb3IgdGhlIHRvb2x0aXAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLndyaXRlID0gZnVuY3Rpb24gd3JpdGUoY29udGVudCkge1xuICAgIHRleHRDb250ZW50KHRoaXMuZWxfLCBjb250ZW50KTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHRpbWUgdG9vbHRpcCByZWxhdGl2ZSB0byB0aGUgYFNlZWtCYXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2Vla0JhclJlY3RcbiAgICogICAgICAgIFRoZSBgQ2xpZW50UmVjdGAgZm9yIHRoZSB7QGxpbmsgU2Vla0Jhcn0gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlZWtCYXJQb2ludFxuICAgKiAgICAgICAgQSBudW1iZXIgZnJvbSAwIHRvIDEsIHJlcHJlc2VudGluZyBhIGhvcml6b250YWwgcmVmZXJlbmNlIHBvaW50XG4gICAqICAgICAgICBmcm9tIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIHtAbGluayBTZWVrQmFyfVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICAgKiAgICAgICAgVGhlIHRpbWUgdG8gdXBkYXRlIHRoZSB0b29sdGlwIHRvLCBub3QgdXNlZCBkdXJpbmcgbGl2ZSBwbGF5YmFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYlxuICAgKiAgICAgICAgQSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGR1cmluZyB0aGUgcmVxdWVzdCBhbmltYXRpb24gZnJhbWVcbiAgICogICAgICAgIGZvciB0b29sdGlwcyB0aGF0IG5lZWQgdG8gZG8gYWRkaXRpb25hbCBhbmltYXRpb25zIGZyb20gdGhlIGRlZmF1bHRcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlVGltZSA9IGZ1bmN0aW9uIHVwZGF0ZVRpbWUoc2Vla0JhclJlY3QsIHNlZWtCYXJQb2ludCwgdGltZSwgY2IpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMucmVxdWVzdE5hbWVkQW5pbWF0aW9uRnJhbWUoJ1RpbWVUb29sdGlwI3VwZGF0ZVRpbWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udGVudDtcblxuICAgICAgdmFyIGR1cmF0aW9uID0gX3RoaXMyLnBsYXllcl8uZHVyYXRpb24oKTtcblxuICAgICAgaWYgKF90aGlzMi5wbGF5ZXJfLmxpdmVUcmFja2VyICYmIF90aGlzMi5wbGF5ZXJfLmxpdmVUcmFja2VyLmlzTGl2ZSgpKSB7XG4gICAgICAgIHZhciBsaXZlV2luZG93ID0gX3RoaXMyLnBsYXllcl8ubGl2ZVRyYWNrZXIubGl2ZVdpbmRvdygpO1xuXG4gICAgICAgIHZhciBzZWNvbmRzQmVoaW5kID0gbGl2ZVdpbmRvdyAtIHNlZWtCYXJQb2ludCAqIGxpdmVXaW5kb3c7XG4gICAgICAgIGNvbnRlbnQgPSAoc2Vjb25kc0JlaGluZCA8IDEgPyAnJyA6ICctJykgKyBmb3JtYXRUaW1lKHNlY29uZHNCZWhpbmQsIGxpdmVXaW5kb3cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGVudCA9IGZvcm1hdFRpbWUodGltZSwgZHVyYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBfdGhpczIudXBkYXRlKHNlZWtCYXJSZWN0LCBzZWVrQmFyUG9pbnQsIGNvbnRlbnQpO1xuXG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgY2IoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gVGltZVRvb2x0aXA7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVGltZVRvb2x0aXAnLCBUaW1lVG9vbHRpcCk7XG5cbi8qKlxuICogVXNlZCBieSB7QGxpbmsgU2Vla0Jhcn0gdG8gZGlzcGxheSBtZWRpYSBwbGF5YmFjayBwcm9ncmVzcyBhcyBwYXJ0IG9mIHRoZVxuICoge0BsaW5rIFByb2dyZXNzQ29udHJvbH0uXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIFBsYXlQcm9ncmVzc0JhciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQbGF5UHJvZ3Jlc3NCYXIsIF9Db21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSB7QGxpbmsgUGxheWVyfSB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gUGxheVByb2dyZXNzQmFyKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy51cGRhdGUgPSB0aHJvdHRsZShiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy51cGRhdGUpLCBVUERBVEVfUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHRoZSBET00gZWxlbWVudCBmb3IgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQbGF5UHJvZ3Jlc3NCYXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtcGxheS1wcm9ncmVzcyB2anMtc2xpZGVyLWJhcidcbiAgICB9LCB7XG4gICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZSdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRW5xdWV1ZXMgdXBkYXRlcyB0byBpdHMgb3duIERPTSBhcyB3ZWxsIGFzIHRoZSBET00gb2YgaXRzXG4gICAqIHtAbGluayBUaW1lVG9vbHRpcH0gY2hpbGQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZWVrQmFyUmVjdFxuICAgKiAgICAgICAgVGhlIGBDbGllbnRSZWN0YCBmb3IgdGhlIHtAbGluayBTZWVrQmFyfSBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Vla0JhclBvaW50XG4gICAqICAgICAgICBBIG51bWJlciBmcm9tIDAgdG8gMSwgcmVwcmVzZW50aW5nIGEgaG9yaXpvbnRhbCByZWZlcmVuY2UgcG9pbnRcbiAgICogICAgICAgIGZyb20gdGhlIGxlZnQgZWRnZSBvZiB0aGUge0BsaW5rIFNlZWtCYXJ9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShzZWVrQmFyUmVjdCwgc2Vla0JhclBvaW50KSB7XG4gICAgdmFyIHRpbWVUb29sdGlwID0gdGhpcy5nZXRDaGlsZCgndGltZVRvb2x0aXAnKTtcblxuICAgIGlmICghdGltZVRvb2x0aXApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGltZSA9IHRoaXMucGxheWVyXy5zY3J1YmJpbmcoKSA/IHRoaXMucGxheWVyXy5nZXRDYWNoZSgpLmN1cnJlbnRUaW1lIDogdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCk7XG4gICAgdGltZVRvb2x0aXAudXBkYXRlVGltZShzZWVrQmFyUmVjdCwgc2Vla0JhclBvaW50LCB0aW1lKTtcbiAgfTtcblxuICByZXR1cm4gUGxheVByb2dyZXNzQmFyO1xufShDb21wb25lbnQpO1xuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgZm9yIHtAbGluayBQbGF5UHJvZ3Jlc3NCYXJ9LlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuUGxheVByb2dyZXNzQmFyLnByb3RvdHlwZS5vcHRpb25zXyA9IHtcbiAgY2hpbGRyZW46IFtdXG59OyAvLyBUaW1lIHRvb2x0aXBzIHNob3VsZCBub3QgYmUgYWRkZWQgdG8gYSBwbGF5ZXIgb24gbW9iaWxlIGRldmljZXNcblxuaWYgKCFJU19JT1MgJiYgIUlTX0FORFJPSUQpIHtcbiAgUGxheVByb2dyZXNzQmFyLnByb3RvdHlwZS5vcHRpb25zXy5jaGlsZHJlbi5wdXNoKCd0aW1lVG9vbHRpcCcpO1xufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1BsYXlQcm9ncmVzc0JhcicsIFBsYXlQcm9ncmVzc0Jhcik7XG5cbi8qKlxuICogVGhlIHtAbGluayBNb3VzZVRpbWVEaXNwbGF5fSBjb21wb25lbnQgdHJhY2tzIG1vdXNlIG1vdmVtZW50IG92ZXIgdGhlXG4gKiB7QGxpbmsgUHJvZ3Jlc3NDb250cm9sfS4gSXQgZGlzcGxheXMgYW4gaW5kaWNhdG9yIGFuZCBhIHtAbGluayBUaW1lVG9vbHRpcH1cbiAqIGluZGljYXRpbmcgdGhlIHRpbWUgd2hpY2ggaXMgcmVwcmVzZW50ZWQgYnkgYSBnaXZlbiBwb2ludCBpbiB0aGVcbiAqIHtAbGluayBQcm9ncmVzc0NvbnRyb2x9LlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBNb3VzZVRpbWVEaXNwbGF5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vdXNlVGltZURpc3BsYXksIF9Db21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSB7QGxpbmsgUGxheWVyfSB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gTW91c2VUaW1lRGlzcGxheShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMudXBkYXRlID0gdGhyb3R0bGUoYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMudXBkYXRlKSwgVVBEQVRFX1JFRlJFU0hfSU5URVJWQUwpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBET00gZWxlbWVudCBmb3IgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBNb3VzZVRpbWVEaXNwbGF5LnByb3RvdHlwZTtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLW1vdXNlLWRpc3BsYXknXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEVucXVldWVzIHVwZGF0ZXMgdG8gaXRzIG93biBET00gYXMgd2VsbCBhcyB0aGUgRE9NIG9mIGl0c1xuICAgKiB7QGxpbmsgVGltZVRvb2x0aXB9IGNoaWxkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2Vla0JhclJlY3RcbiAgICogICAgICAgIFRoZSBgQ2xpZW50UmVjdGAgZm9yIHRoZSB7QGxpbmsgU2Vla0Jhcn0gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlZWtCYXJQb2ludFxuICAgKiAgICAgICAgQSBudW1iZXIgZnJvbSAwIHRvIDEsIHJlcHJlc2VudGluZyBhIGhvcml6b250YWwgcmVmZXJlbmNlIHBvaW50XG4gICAqICAgICAgICBmcm9tIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIHtAbGluayBTZWVrQmFyfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoc2Vla0JhclJlY3QsIHNlZWtCYXJQb2ludCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHRpbWUgPSBzZWVrQmFyUG9pbnQgKiB0aGlzLnBsYXllcl8uZHVyYXRpb24oKTtcbiAgICB0aGlzLmdldENoaWxkKCd0aW1lVG9vbHRpcCcpLnVwZGF0ZVRpbWUoc2Vla0JhclJlY3QsIHNlZWtCYXJQb2ludCwgdGltZSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLmVsXy5zdHlsZS5sZWZ0ID0gc2Vla0JhclJlY3Qud2lkdGggKiBzZWVrQmFyUG9pbnQgKyBcInB4XCI7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1vdXNlVGltZURpc3BsYXk7XG59KENvbXBvbmVudCk7XG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgYE1vdXNlVGltZURpc3BsYXlgXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5Nb3VzZVRpbWVEaXNwbGF5LnByb3RvdHlwZS5vcHRpb25zXyA9IHtcbiAgY2hpbGRyZW46IFsndGltZVRvb2x0aXAnXVxufTtcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTW91c2VUaW1lRGlzcGxheScsIE1vdXNlVGltZURpc3BsYXkpO1xuXG52YXIgU1RFUF9TRUNPTkRTID0gNTsgLy8gVGhlIG11bHRpcGxpZXIgb2YgU1RFUF9TRUNPTkRTIHRoYXQgUGdVcC9QZ0Rvd24gbW92ZSB0aGUgdGltZWxpbmUuXG5cbnZhciBQQUdFX0tFWV9NVUxUSVBMSUVSID0gMTI7XG4vKipcbiAqIFNlZWsgYmFyIGFuZCBjb250YWluZXIgZm9yIHRoZSBwcm9ncmVzcyBiYXJzLiBVc2VzIHtAbGluayBQbGF5UHJvZ3Jlc3NCYXJ9XG4gKiBhcyBpdHMgYGJhcmAuXG4gKlxuICogQGV4dGVuZHMgU2xpZGVyXG4gKi9cblxudmFyIFNlZWtCYXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9TbGlkZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoU2Vla0JhciwgX1NsaWRlcik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBTZWVrQmFyKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1NsaWRlci5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLnNldEV2ZW50SGFuZGxlcnNfKCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGV2ZW50IGhhbmRsZXJzXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFNlZWtCYXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXRFdmVudEhhbmRsZXJzXyA9IGZ1bmN0aW9uIHNldEV2ZW50SGFuZGxlcnNfKCkge1xuICAgIHRoaXMudXBkYXRlXyA9IGJpbmQodGhpcywgdGhpcy51cGRhdGUpO1xuICAgIHRoaXMudXBkYXRlID0gdGhyb3R0bGUodGhpcy51cGRhdGVfLCBVUERBVEVfUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgdGhpcy5vbih0aGlzLnBsYXllcl8sIFsnZW5kZWQnLCAnZHVyYXRpb25jaGFuZ2UnLCAndGltZXVwZGF0ZSddLCB0aGlzLnVwZGF0ZSk7XG5cbiAgICBpZiAodGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyKSB7XG4gICAgICB0aGlzLm9uKHRoaXMucGxheWVyXy5saXZlVHJhY2tlciwgJ2xpdmVlZGdlY2hhbmdlJywgdGhpcy51cGRhdGUpO1xuICAgIH0gLy8gd2hlbiBwbGF5aW5nLCBsZXQncyBlbnN1cmUgd2Ugc21vb3RobHkgdXBkYXRlIHRoZSBwbGF5IHByb2dyZXNzIGJhclxuICAgIC8vIHZpYSBhbiBpbnRlcnZhbFxuXG5cbiAgICB0aGlzLnVwZGF0ZUludGVydmFsID0gbnVsbDtcbiAgICB0aGlzLm9uKHRoaXMucGxheWVyXywgWydwbGF5aW5nJ10sIHRoaXMuZW5hYmxlSW50ZXJ2YWxfKTtcbiAgICB0aGlzLm9uKHRoaXMucGxheWVyXywgWydlbmRlZCcsICdwYXVzZScsICd3YWl0aW5nJ10sIHRoaXMuZGlzYWJsZUludGVydmFsXyk7IC8vIHdlIGRvbid0IG5lZWQgdG8gdXBkYXRlIHRoZSBwbGF5IHByb2dyZXNzIGlmIHRoZSBkb2N1bWVudCBpcyBoaWRkZW4sXG4gICAgLy8gYWxzbywgdGhpcyBjYXVzZXMgdGhlIENQVSB0byBzcGlrZSBhbmQgZXZlbnR1YWxseSBjcmFzaCB0aGUgcGFnZSBvbiBJRTExLlxuXG4gICAgaWYgKCdoaWRkZW4nIGluIGRvY3VtZW50ICYmICd2aXNpYmlsaXR5U3RhdGUnIGluIGRvY3VtZW50KSB7XG4gICAgICB0aGlzLm9uKGRvY3VtZW50LCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMudG9nZ2xlVmlzaWJpbGl0eV8pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udG9nZ2xlVmlzaWJpbGl0eV8gPSBmdW5jdGlvbiB0b2dnbGVWaXNpYmlsaXR5XyhlKSB7XG4gICAgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgdGhpcy5kaXNhYmxlSW50ZXJ2YWxfKGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVuYWJsZUludGVydmFsXygpOyAvLyB3ZSBqdXN0IHN3aXRjaGVkIGJhY2sgdG8gdGhlIHBhZ2UgYW5kIHNvbWVvbmUgbWF5IGJlIGxvb2tpbmcsIHNvLCB1cGRhdGUgQVNBUFxuXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZW5hYmxlSW50ZXJ2YWxfID0gZnVuY3Rpb24gZW5hYmxlSW50ZXJ2YWxfKCkge1xuICAgIGlmICh0aGlzLnVwZGF0ZUludGVydmFsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVJbnRlcnZhbCA9IHRoaXMuc2V0SW50ZXJ2YWwodGhpcy51cGRhdGUsIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMKTtcbiAgfTtcblxuICBfcHJvdG8uZGlzYWJsZUludGVydmFsXyA9IGZ1bmN0aW9uIGRpc2FibGVJbnRlcnZhbF8oZSkge1xuICAgIGlmICh0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIgJiYgdGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyLmlzTGl2ZSgpICYmIGUgJiYgZS50eXBlICE9PSAnZW5kZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnVwZGF0ZUludGVydmFsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhckludGVydmFsKHRoaXMudXBkYXRlSW50ZXJ2YWwpO1xuICAgIHRoaXMudXBkYXRlSW50ZXJ2YWwgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfU2xpZGVyLnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtcHJvZ3Jlc3MtaG9sZGVyJ1xuICAgIH0sIHtcbiAgICAgICdhcmlhLWxhYmVsJzogdGhpcy5sb2NhbGl6ZSgnUHJvZ3Jlc3MgQmFyJylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSBwbGF5IHByb2dyZXNzIGJhciBhbmQgYWNjZXNzaWJpbGl0eVxuICAgKiBhdHRyaWJ1dGVzIHRvIHdoYXRldmVyIGlzIHBhc3NlZCBpbi5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGB0aW1ldXBkYXRlYCBvciBgZW5kZWRgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjdGltZXVwZGF0ZVxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgIFRoZSBjdXJyZW50IHBlcmNlbnQgYXQgYSBudW1iZXIgZnJvbSAwLTFcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGV2ZW50KSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgcGVyY2VudCA9IF9TbGlkZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5yZXF1ZXN0TmFtZWRBbmltYXRpb25GcmFtZSgnU2Vla0JhciN1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VycmVudFRpbWUgPSBfdGhpczIucGxheWVyXy5lbmRlZCgpID8gX3RoaXMyLnBsYXllcl8uZHVyYXRpb24oKSA6IF90aGlzMi5nZXRDdXJyZW50VGltZV8oKTtcbiAgICAgIHZhciBsaXZlVHJhY2tlciA9IF90aGlzMi5wbGF5ZXJfLmxpdmVUcmFja2VyO1xuXG4gICAgICB2YXIgZHVyYXRpb24gPSBfdGhpczIucGxheWVyXy5kdXJhdGlvbigpO1xuXG4gICAgICBpZiAobGl2ZVRyYWNrZXIgJiYgbGl2ZVRyYWNrZXIuaXNMaXZlKCkpIHtcbiAgICAgICAgZHVyYXRpb24gPSBfdGhpczIucGxheWVyXy5saXZlVHJhY2tlci5saXZlQ3VycmVudFRpbWUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzMi5wZXJjZW50XyAhPT0gcGVyY2VudCkge1xuICAgICAgICAvLyBtYWNoaW5lIHJlYWRhYmxlIHZhbHVlIG9mIHByb2dyZXNzIGJhciAocGVyY2VudGFnZSBjb21wbGV0ZSlcbiAgICAgICAgX3RoaXMyLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVub3cnLCAocGVyY2VudCAqIDEwMCkudG9GaXhlZCgyKSk7XG5cbiAgICAgICAgX3RoaXMyLnBlcmNlbnRfID0gcGVyY2VudDtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzMi5jdXJyZW50VGltZV8gIT09IGN1cnJlbnRUaW1lIHx8IF90aGlzMi5kdXJhdGlvbl8gIT09IGR1cmF0aW9uKSB7XG4gICAgICAgIC8vIGh1bWFuIHJlYWRhYmxlIHZhbHVlIG9mIHByb2dyZXNzIGJhciAodGltZSBjb21wbGV0ZSlcbiAgICAgICAgX3RoaXMyLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWV0ZXh0JywgX3RoaXMyLmxvY2FsaXplKCdwcm9ncmVzcyBiYXIgdGltaW5nOiBjdXJyZW50VGltZT17MX0gZHVyYXRpb249ezJ9JywgW2Zvcm1hdFRpbWUoY3VycmVudFRpbWUsIGR1cmF0aW9uKSwgZm9ybWF0VGltZShkdXJhdGlvbiwgZHVyYXRpb24pXSwgJ3sxfSBvZiB7Mn0nKSk7XG5cbiAgICAgICAgX3RoaXMyLmN1cnJlbnRUaW1lXyA9IGN1cnJlbnRUaW1lO1xuICAgICAgICBfdGhpczIuZHVyYXRpb25fID0gZHVyYXRpb247XG4gICAgICB9IC8vIHVwZGF0ZSB0aGUgcHJvZ3Jlc3MgYmFyIHRpbWUgdG9vbHRpcCB3aXRoIHRoZSBjdXJyZW50IHRpbWVcblxuXG4gICAgICBpZiAoX3RoaXMyLmJhcikge1xuICAgICAgICBfdGhpczIuYmFyLnVwZGF0ZShnZXRCb3VuZGluZ0NsaWVudFJlY3QoX3RoaXMyLmVsKCkpLCBfdGhpczIuZ2V0UHJvZ3Jlc3MoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBlcmNlbnQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgdmFsdWUgb2YgY3VycmVudCB0aW1lIGJ1dCBhbGxvd3MgZm9yIHNtb290aCBzY3J1YmJpbmcsXG4gICAqIHdoZW4gcGxheWVyIGNhbid0IGtlZXAgdXAuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgY3VycmVudCB0aW1lIHZhbHVlIHRvIGRpc3BsYXlcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0Q3VycmVudFRpbWVfID0gZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWVfKCkge1xuICAgIHJldHVybiB0aGlzLnBsYXllcl8uc2NydWJiaW5nKCkgPyB0aGlzLnBsYXllcl8uZ2V0Q2FjaGUoKS5jdXJyZW50VGltZSA6IHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHBlcmNlbnRhZ2Ugb2YgbWVkaWEgcGxheWVkIHNvIGZhci5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBwZXJjZW50YWdlIG9mIG1lZGlhIHBsYXllZCBzbyBmYXIgKDAgdG8gMSkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFBlcmNlbnQgPSBmdW5jdGlvbiBnZXRQZXJjZW50KCkge1xuICAgIHZhciBjdXJyZW50VGltZSA9IHRoaXMuZ2V0Q3VycmVudFRpbWVfKCk7XG4gICAgdmFyIHBlcmNlbnQ7XG4gICAgdmFyIGxpdmVUcmFja2VyID0gdGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyO1xuXG4gICAgaWYgKGxpdmVUcmFja2VyICYmIGxpdmVUcmFja2VyLmlzTGl2ZSgpKSB7XG4gICAgICBwZXJjZW50ID0gKGN1cnJlbnRUaW1lIC0gbGl2ZVRyYWNrZXIuc2Vla2FibGVTdGFydCgpKSAvIGxpdmVUcmFja2VyLmxpdmVXaW5kb3coKTsgLy8gcHJldmVudCB0aGUgcGVyY2VudCBmcm9tIGNoYW5naW5nIGF0IHRoZSBsaXZlIGVkZ2VcblxuICAgICAgaWYgKGxpdmVUcmFja2VyLmF0TGl2ZUVkZ2UoKSkge1xuICAgICAgICBwZXJjZW50ID0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVyY2VudCA9IGN1cnJlbnRUaW1lIC8gdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlcmNlbnQ7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBtb3VzZSBkb3duIG9uIHNlZWsgYmFyXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYG1vdXNlZG93bmAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIG1vdXNlZG93blxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcbiAgICBpZiAoIWlzU2luZ2xlTGVmdENsaWNrKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU3RvcCBldmVudCBwcm9wYWdhdGlvbiB0byBwcmV2ZW50IGRvdWJsZSBmaXJlIGluIHByb2dyZXNzLWNvbnRyb2wuanNcblxuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5wbGF5ZXJfLnNjcnViYmluZyh0cnVlKTtcbiAgICB0aGlzLnZpZGVvV2FzUGxheWluZyA9ICF0aGlzLnBsYXllcl8ucGF1c2VkKCk7XG4gICAgdGhpcy5wbGF5ZXJfLnBhdXNlKCk7XG5cbiAgICBfU2xpZGVyLnByb3RvdHlwZS5oYW5kbGVNb3VzZURvd24uY2FsbCh0aGlzLCBldmVudCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBtb3VzZSBtb3ZlIG9uIHNlZWsgYmFyXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYG1vdXNlbW92ZWAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIG1vdXNlbW92ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVNb3VzZU1vdmUgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmUoZXZlbnQpIHtcbiAgICBpZiAoIWlzU2luZ2xlTGVmdENsaWNrKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXdUaW1lO1xuICAgIHZhciBkaXN0YW5jZSA9IHRoaXMuY2FsY3VsYXRlRGlzdGFuY2UoZXZlbnQpO1xuICAgIHZhciBsaXZlVHJhY2tlciA9IHRoaXMucGxheWVyXy5saXZlVHJhY2tlcjtcblxuICAgIGlmICghbGl2ZVRyYWNrZXIgfHwgIWxpdmVUcmFja2VyLmlzTGl2ZSgpKSB7XG4gICAgICBuZXdUaW1lID0gZGlzdGFuY2UgKiB0aGlzLnBsYXllcl8uZHVyYXRpb24oKTsgLy8gRG9uJ3QgbGV0IHZpZGVvIGVuZCB3aGlsZSBzY3J1YmJpbmcuXG5cbiAgICAgIGlmIChuZXdUaW1lID09PSB0aGlzLnBsYXllcl8uZHVyYXRpb24oKSkge1xuICAgICAgICBuZXdUaW1lID0gbmV3VGltZSAtIDAuMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRpc3RhbmNlID49IDAuOTkpIHtcbiAgICAgICAgbGl2ZVRyYWNrZXIuc2Vla1RvTGl2ZUVkZ2UoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2Vla2FibGVTdGFydCA9IGxpdmVUcmFja2VyLnNlZWthYmxlU3RhcnQoKTtcbiAgICAgIHZhciBzZWVrYWJsZUVuZCA9IGxpdmVUcmFja2VyLmxpdmVDdXJyZW50VGltZSgpO1xuICAgICAgbmV3VGltZSA9IHNlZWthYmxlU3RhcnQgKyBkaXN0YW5jZSAqIGxpdmVUcmFja2VyLmxpdmVXaW5kb3coKTsgLy8gRG9uJ3QgbGV0IHZpZGVvIGVuZCB3aGlsZSBzY3J1YmJpbmcuXG5cbiAgICAgIGlmIChuZXdUaW1lID49IHNlZWthYmxlRW5kKSB7XG4gICAgICAgIG5ld1RpbWUgPSBzZWVrYWJsZUVuZDtcbiAgICAgIH0gLy8gQ29tcGVuc2F0ZSBmb3IgcHJlY2lzaW9uIGRpZmZlcmVuY2VzIHNvIHRoYXQgY3VycmVudFRpbWUgaXMgbm90IGxlc3NcbiAgICAgIC8vIHRoYW4gc2Vla2FibGUgc3RhcnRcblxuXG4gICAgICBpZiAobmV3VGltZSA8PSBzZWVrYWJsZVN0YXJ0KSB7XG4gICAgICAgIG5ld1RpbWUgPSBzZWVrYWJsZVN0YXJ0ICsgMC4xO1xuICAgICAgfSAvLyBPbiBhbmRyb2lkIHNlZWthYmxlRW5kIGNhbiBiZSBJbmZpbml0eSBzb21ldGltZXMsXG4gICAgICAvLyB0aGlzIHdpbGwgY2F1c2UgbmV3VGltZSB0byBiZSBJbmZpbml0eSwgd2hpY2ggaXNcbiAgICAgIC8vIG5vdCBhIHZhbGlkIGN1cnJlbnRUaW1lLlxuXG5cbiAgICAgIGlmIChuZXdUaW1lID09PSBJbmZpbml0eSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSAvLyBTZXQgbmV3IHRpbWUgKHRlbGwgcGxheWVyIHRvIHNlZWsgdG8gbmV3IHRpbWUpXG5cblxuICAgIHRoaXMucGxheWVyXy5jdXJyZW50VGltZShuZXdUaW1lKTtcbiAgfTtcblxuICBfcHJvdG8uZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIF9TbGlkZXIucHJvdG90eXBlLmVuYWJsZS5jYWxsKHRoaXMpO1xuXG4gICAgdmFyIG1vdXNlVGltZURpc3BsYXkgPSB0aGlzLmdldENoaWxkKCdtb3VzZVRpbWVEaXNwbGF5Jyk7XG5cbiAgICBpZiAoIW1vdXNlVGltZURpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtb3VzZVRpbWVEaXNwbGF5LnNob3coKTtcbiAgfTtcblxuICBfcHJvdG8uZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgX1NsaWRlci5wcm90b3R5cGUuZGlzYWJsZS5jYWxsKHRoaXMpO1xuXG4gICAgdmFyIG1vdXNlVGltZURpc3BsYXkgPSB0aGlzLmdldENoaWxkKCdtb3VzZVRpbWVEaXNwbGF5Jyk7XG5cbiAgICBpZiAoIW1vdXNlVGltZURpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtb3VzZVRpbWVEaXNwbGF5LmhpZGUoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIG1vdXNlIHVwIG9uIHNlZWsgYmFyXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYG1vdXNldXBgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZXVwXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKGV2ZW50KSB7XG4gICAgX1NsaWRlci5wcm90b3R5cGUuaGFuZGxlTW91c2VVcC5jYWxsKHRoaXMsIGV2ZW50KTsgLy8gU3RvcCBldmVudCBwcm9wYWdhdGlvbiB0byBwcmV2ZW50IGRvdWJsZSBmaXJlIGluIHByb2dyZXNzLWNvbnRyb2wuanNcblxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICB0aGlzLnBsYXllcl8uc2NydWJiaW5nKGZhbHNlKTtcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRpbWV1cGRhdGUgYmVjYXVzZSB3ZSdyZSBkb25lIHNlZWtpbmcgYW5kIHRoZSB0aW1lIGhhcyBjaGFuZ2VkLlxuICAgICAqIFRoaXMgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3IgaWYgdGhlIHBsYXllciBpcyBwYXVzZWQgdG8gdGltZSB0aGUgdGltZSBkaXNwbGF5cy5cbiAgICAgKlxuICAgICAqIEBldmVudCBUZWNoI3RpbWV1cGRhdGVcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnBsYXllcl8udHJpZ2dlcih7XG4gICAgICB0eXBlOiAndGltZXVwZGF0ZScsXG4gICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICBtYW51YWxseVRyaWdnZXJlZDogdHJ1ZVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMudmlkZW9XYXNQbGF5aW5nKSB7XG4gICAgICBzaWxlbmNlUHJvbWlzZSh0aGlzLnBsYXllcl8ucGxheSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UncmUgZG9uZSBzZWVraW5nIGFuZCB0aGUgdGltZSBoYXMgY2hhbmdlZC5cbiAgICAgIC8vIElmIHRoZSBwbGF5ZXIgaXMgcGF1c2VkLCBtYWtlIHN1cmUgd2UgZGlzcGxheSB0aGUgY29ycmVjdCB0aW1lIG9uIHRoZSBzZWVrIGJhci5cbiAgICAgIHRoaXMudXBkYXRlXygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogTW92ZSBtb3JlIHF1aWNrbHkgZmFzdCBmb3J3YXJkIGZvciBrZXlib2FyZC1vbmx5IHVzZXJzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN0ZXBGb3J3YXJkID0gZnVuY3Rpb24gc3RlcEZvcndhcmQoKSB7XG4gICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpICsgU1RFUF9TRUNPTkRTKTtcbiAgfVxuICAvKipcbiAgICogTW92ZSBtb3JlIHF1aWNrbHkgcmV3aW5kIGZvciBrZXlib2FyZC1vbmx5IHVzZXJzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN0ZXBCYWNrID0gZnVuY3Rpb24gc3RlcEJhY2soKSB7XG4gICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpIC0gU1RFUF9TRUNPTkRTKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgcGxheWJhY2sgc3RhdGUgb2YgdGhlIHBsYXllclxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gZW50ZXIgb3Igc3BhY2UgaXMgdXNlZCBvbiB0aGUgc2Vla2JhclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZFxuICAgKlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVBY3Rpb24gPSBmdW5jdGlvbiBoYW5kbGVBY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLnBhdXNlZCgpKSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGxheSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGF1c2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoaXMgU2Vla0JhciBoYXMgZm9jdXMgYW5kIGEga2V5IGdldHMgcHJlc3NlZCBkb3duLlxuICAgKiBTdXBwb3J0cyB0aGUgZm9sbG93aW5nIGtleXM6XG4gICAqXG4gICAqICAgU3BhY2Ugb3IgRW50ZXIga2V5IGZpcmUgYSBjbGljayBldmVudFxuICAgKiAgIEhvbWUga2V5IG1vdmVzIHRvIHN0YXJ0IG9mIHRoZSB0aW1lbGluZVxuICAgKiAgIEVuZCBrZXkgbW92ZXMgdG8gZW5kIG9mIHRoZSB0aW1lbGluZVxuICAgKiAgIERpZ2l0IFwiMFwiIHRocm91Z2ggXCI5XCIga2V5cyBtb3ZlIHRvIDAlLCAxMCUgLi4uIDgwJSwgOTAlIG9mIHRoZSB0aW1lbGluZVxuICAgKiAgIFBhZ2VEb3duIGtleSBtb3ZlcyBiYWNrIGEgbGFyZ2VyIHN0ZXAgdGhhbiBBcnJvd0Rvd25cbiAgICogICBQYWdlVXAga2V5IG1vdmVzIGZvcndhcmQgYSBsYXJnZSBzdGVwXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGtleWRvd25gIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBrZXlkb3duXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ1NwYWNlJykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnRW50ZXInKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5oYW5kbGVBY3Rpb24oZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnSG9tZScpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoMCk7XG4gICAgfSBlbHNlIGlmIChrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdFbmQnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5kdXJhdGlvbigpKTtcbiAgICB9IGVsc2UgaWYgKC9eWzAtOV0kLy50ZXN0KGtleWNvZGUoZXZlbnQpKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdmFyIGdvdG9GcmFjdGlvbiA9IChrZXljb2RlLmNvZGVzW2tleWNvZGUoZXZlbnQpXSAtIGtleWNvZGUuY29kZXNbJzAnXSkgKiAxMC4wIC8gMTAwLjA7XG4gICAgICB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkgKiBnb3RvRnJhY3Rpb24pO1xuICAgIH0gZWxzZSBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnUGdEbicpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCkgLSBTVEVQX1NFQ09ORFMgKiBQQUdFX0tFWV9NVUxUSVBMSUVSKTtcbiAgICB9IGVsc2UgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ1BnVXAnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpICsgU1RFUF9TRUNPTkRTICogUEFHRV9LRVlfTVVMVElQTElFUik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBhc3Mga2V5ZG93biBoYW5kbGluZyB1cCBmb3IgdW5zdXBwb3J0ZWQga2V5c1xuICAgICAgX1NsaWRlci5wcm90b3R5cGUuaGFuZGxlS2V5RG93bi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuZGlzYWJsZUludGVydmFsXygpO1xuICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgWydlbmRlZCcsICdkdXJhdGlvbmNoYW5nZScsICd0aW1ldXBkYXRlJ10sIHRoaXMudXBkYXRlKTtcblxuICAgIGlmICh0aGlzLnBsYXllcl8ubGl2ZVRyYWNrZXIpIHtcbiAgICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLmxpdmVUcmFja2VyLCAnbGl2ZWVkZ2VjaGFuZ2UnLCB0aGlzLnVwZGF0ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5vZmYodGhpcy5wbGF5ZXJfLCBbJ3BsYXlpbmcnXSwgdGhpcy5lbmFibGVJbnRlcnZhbF8pO1xuICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgWydlbmRlZCcsICdwYXVzZScsICd3YWl0aW5nJ10sIHRoaXMuZGlzYWJsZUludGVydmFsXyk7IC8vIHdlIGRvbid0IG5lZWQgdG8gdXBkYXRlIHRoZSBwbGF5IHByb2dyZXNzIGlmIHRoZSBkb2N1bWVudCBpcyBoaWRkZW4sXG4gICAgLy8gYWxzbywgdGhpcyBjYXVzZXMgdGhlIENQVSB0byBzcGlrZSBhbmQgZXZlbnR1YWxseSBjcmFzaCB0aGUgcGFnZSBvbiBJRTExLlxuXG4gICAgaWYgKCdoaWRkZW4nIGluIGRvY3VtZW50ICYmICd2aXNpYmlsaXR5U3RhdGUnIGluIGRvY3VtZW50KSB7XG4gICAgICB0aGlzLm9mZihkb2N1bWVudCwgJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLnRvZ2dsZVZpc2liaWxpdHlfKTtcbiAgICB9XG5cbiAgICBfU2xpZGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIFNlZWtCYXI7XG59KFNsaWRlcik7XG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIGBTZWVrQmFyYFxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuU2Vla0Jhci5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiBbJ2xvYWRQcm9ncmVzc0JhcicsICdwbGF5UHJvZ3Jlc3NCYXInXSxcbiAgYmFyTmFtZTogJ3BsYXlQcm9ncmVzc0Jhcidcbn07IC8vIE1vdXNlVGltZURpc3BsYXkgdG9vbHRpcHMgc2hvdWxkIG5vdCBiZSBhZGRlZCB0byBhIHBsYXllciBvbiBtb2JpbGUgZGV2aWNlc1xuXG5pZiAoIUlTX0lPUyAmJiAhSVNfQU5EUk9JRCkge1xuICBTZWVrQmFyLnByb3RvdHlwZS5vcHRpb25zXy5jaGlsZHJlbi5zcGxpY2UoMSwgMCwgJ21vdXNlVGltZURpc3BsYXknKTtcbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdTZWVrQmFyJywgU2Vla0Jhcik7XG5cbi8qKlxuICogVGhlIFByb2dyZXNzIENvbnRyb2wgY29tcG9uZW50IGNvbnRhaW5zIHRoZSBzZWVrIGJhciwgbG9hZCBwcm9ncmVzcyxcbiAqIGFuZCBwbGF5IHByb2dyZXNzLlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBQcm9ncmVzc0NvbnRyb2wgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUHJvZ3Jlc3NDb250cm9sLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFByb2dyZXNzQ29udHJvbChwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGFuZGxlTW91c2VNb3ZlID0gdGhyb3R0bGUoYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMuaGFuZGxlTW91c2VNb3ZlKSwgVVBEQVRFX1JFRlJFU0hfSU5URVJWQUwpO1xuICAgIF90aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlU2VlayA9IHRocm90dGxlKGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLmhhbmRsZU1vdXNlU2VlayksIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMKTtcblxuICAgIF90aGlzLmVuYWJsZSgpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQcm9ncmVzc0NvbnRyb2wucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtcHJvZ3Jlc3MtY29udHJvbCB2anMtY29udHJvbCdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogV2hlbiB0aGUgbW91c2UgbW92ZXMgb3ZlciB0aGUgYFByb2dyZXNzQ29udHJvbGAsIHRoZSBwb2ludGVyIHBvc2l0aW9uXG4gICAqIGdldHMgcGFzc2VkIGRvd24gdG8gdGhlIGBNb3VzZVRpbWVEaXNwbGF5YCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYG1vdXNlbW92ZWAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW4gbW91c2Vtb3ZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShldmVudCkge1xuICAgIHZhciBzZWVrQmFyID0gdGhpcy5nZXRDaGlsZCgnc2Vla0JhcicpO1xuXG4gICAgaWYgKCFzZWVrQmFyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBsYXlQcm9ncmVzc0JhciA9IHNlZWtCYXIuZ2V0Q2hpbGQoJ3BsYXlQcm9ncmVzc0JhcicpO1xuICAgIHZhciBtb3VzZVRpbWVEaXNwbGF5ID0gc2Vla0Jhci5nZXRDaGlsZCgnbW91c2VUaW1lRGlzcGxheScpO1xuXG4gICAgaWYgKCFwbGF5UHJvZ3Jlc3NCYXIgJiYgIW1vdXNlVGltZURpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2Vla0JhckVsID0gc2Vla0Jhci5lbCgpO1xuICAgIHZhciBzZWVrQmFyUmVjdCA9IGZpbmRQb3NpdGlvbihzZWVrQmFyRWwpO1xuICAgIHZhciBzZWVrQmFyUG9pbnQgPSBnZXRQb2ludGVyUG9zaXRpb24oc2Vla0JhckVsLCBldmVudCkueDsgLy8gVGhlIGRlZmF1bHQgc2tpbiBoYXMgYSBnYXAgb24gZWl0aGVyIHNpZGUgb2YgdGhlIGBTZWVrQmFyYC4gVGhpcyBtZWFuc1xuICAgIC8vIHRoYXQgaXQncyBwb3NzaWJsZSB0byB0cmlnZ2VyIHRoaXMgYmVoYXZpb3Igb3V0c2lkZSB0aGUgYm91bmRhcmllcyBvZlxuICAgIC8vIHRoZSBgU2Vla0JhcmAuIFRoaXMgZW5zdXJlcyB3ZSBzdGF5IHdpdGhpbiBpdCBhdCBhbGwgdGltZXMuXG5cbiAgICBzZWVrQmFyUG9pbnQgPSBjbGFtcChzZWVrQmFyUG9pbnQsIDAsIDEpO1xuXG4gICAgaWYgKG1vdXNlVGltZURpc3BsYXkpIHtcbiAgICAgIG1vdXNlVGltZURpc3BsYXkudXBkYXRlKHNlZWtCYXJSZWN0LCBzZWVrQmFyUG9pbnQpO1xuICAgIH1cblxuICAgIGlmIChwbGF5UHJvZ3Jlc3NCYXIpIHtcbiAgICAgIHBsYXlQcm9ncmVzc0Jhci51cGRhdGUoc2Vla0JhclJlY3QsIHNlZWtCYXIuZ2V0UHJvZ3Jlc3MoKSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBIHRocm90dGxlZCB2ZXJzaW9uIG9mIHRoZSB7QGxpbmsgUHJvZ3Jlc3NDb250cm9sI2hhbmRsZU1vdXNlU2Vla30gbGlzdGVuZXIuXG4gICAqXG4gICAqIEBtZXRob2QgUHJvZ3Jlc3NDb250cm9sI3Rocm90dGxlZEhhbmRsZU1vdXNlU2Vla1xuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBtb3VzZW1vdmVgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVuIG1vdXNlbW92ZVxuICAgKiBAbGlzdGVuIHRvdWNobW92ZVxuICAgKi9cblxuICAvKipcbiAgICogSGFuZGxlIGBtb3VzZW1vdmVgIG9yIGB0b3VjaG1vdmVgIGV2ZW50cyBvbiB0aGUgYFByb2dyZXNzQ29udHJvbGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBmdW5jdGlvblxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZW1vdmVcbiAgICogQGxpc3RlbnMgdG91Y2htb3ZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlU2VlayA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlU2VlayhldmVudCkge1xuICAgIHZhciBzZWVrQmFyID0gdGhpcy5nZXRDaGlsZCgnc2Vla0JhcicpO1xuXG4gICAgaWYgKHNlZWtCYXIpIHtcbiAgICAgIHNlZWtCYXIuaGFuZGxlTW91c2VNb3ZlKGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFyZSBjb250cm9scyBhcmUgY3VycmVudGx5IGVuYWJsZWQgZm9yIHRoaXMgcHJvZ3Jlc3MgY29udHJvbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICB0cnVlIGlmIGNvbnRyb2xzIGFyZSBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW5hYmxlZCA9IGZ1bmN0aW9uIGVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5hYmxlZF87XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGUgYWxsIGNvbnRyb2xzIG9uIHRoZSBwcm9ncmVzcyBjb250cm9sIGFuZCBpdHMgY2hpbGRyZW5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgdGhpcy5jaGlsZHJlbigpLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQuZGlzYWJsZSAmJiBjaGlsZC5kaXNhYmxlKCk7XG4gICAgfSk7XG5cbiAgICBpZiAoIXRoaXMuZW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vZmYoWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCddLCB0aGlzLmhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vZmYodGhpcy5lbF8sICdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgdGhpcy5oYW5kbGVNb3VzZVVwKCk7XG4gICAgdGhpcy5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICB0aGlzLmVuYWJsZWRfID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZSBhbGwgY29udHJvbHMgb24gdGhlIHByb2dyZXNzIGNvbnRyb2wgYW5kIGl0cyBjaGlsZHJlblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgdGhpcy5jaGlsZHJlbigpLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQuZW5hYmxlICYmIGNoaWxkLmVuYWJsZSgpO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuZW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vbihbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0J10sIHRoaXMuaGFuZGxlTW91c2VEb3duKTtcbiAgICB0aGlzLm9uKHRoaXMuZWxfLCAnbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgdGhpcy5lbmFibGVkXyA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAgZXZlbnRzIG9uIHRoZSBgUHJvZ3Jlc3NDb250cm9sYC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGlzIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBsaXN0ZW5zIG1vdXNlZG93blxuICAgKiBAbGlzdGVucyB0b3VjaHN0YXJ0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuICAgIHZhciBkb2MgPSB0aGlzLmVsXy5vd25lckRvY3VtZW50O1xuICAgIHZhciBzZWVrQmFyID0gdGhpcy5nZXRDaGlsZCgnc2Vla0JhcicpO1xuXG4gICAgaWYgKHNlZWtCYXIpIHtcbiAgICAgIHNlZWtCYXIuaGFuZGxlTW91c2VEb3duKGV2ZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLm9uKGRvYywgJ21vdXNlbW92ZScsIHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VTZWVrKTtcbiAgICB0aGlzLm9uKGRvYywgJ3RvdWNobW92ZScsIHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VTZWVrKTtcbiAgICB0aGlzLm9uKGRvYywgJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIHRoaXMub24oZG9jLCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYG1vdXNldXBgIG9yIGB0b3VjaGVuZGAgZXZlbnRzIG9uIHRoZSBgUHJvZ3Jlc3NDb250cm9sYC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIGBtb3VzZXVwYCBvciBgdG91Y2hlbmRgIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRvdWNoZW5kXG4gICAqIEBsaXN0ZW5zIG1vdXNldXBcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlTW91c2VVcCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlVXAoZXZlbnQpIHtcbiAgICB2YXIgZG9jID0gdGhpcy5lbF8ub3duZXJEb2N1bWVudDtcbiAgICB2YXIgc2Vla0JhciA9IHRoaXMuZ2V0Q2hpbGQoJ3NlZWtCYXInKTtcblxuICAgIGlmIChzZWVrQmFyKSB7XG4gICAgICBzZWVrQmFyLmhhbmRsZU1vdXNlVXAoZXZlbnQpO1xuICAgIH1cblxuICAgIHRoaXMub2ZmKGRvYywgJ21vdXNlbW92ZScsIHRoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VTZWVrKTtcbiAgICB0aGlzLm9mZihkb2MsICd0b3VjaG1vdmUnLCB0aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlU2Vlayk7XG4gICAgdGhpcy5vZmYoZG9jLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5vZmYoZG9jLCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICB9O1xuXG4gIHJldHVybiBQcm9ncmVzc0NvbnRyb2w7XG59KENvbXBvbmVudCk7XG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgYFByb2dyZXNzQ29udHJvbGBcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuXG5cblByb2dyZXNzQ29udHJvbC5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiBbJ3NlZWtCYXInXVxufTtcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUHJvZ3Jlc3NDb250cm9sJywgUHJvZ3Jlc3NDb250cm9sKTtcblxuLyoqXG4gKiBUb2dnbGUgUGljdHVyZS1pbi1QaWN0dXJlIG1vZGVcbiAqXG4gKiBAZXh0ZW5kcyBCdXR0b25cbiAqL1xuXG52YXIgUGljdHVyZUluUGljdHVyZVRvZ2dsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0J1dHRvbikge1xuICBfaW5oZXJpdHNMb29zZShQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlLCBfQnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI2VudGVycGljdHVyZWlucGljdHVyZVxuICAgKiBAbGlzdGVucyBQbGF5ZXIjbGVhdmVwaWN0dXJlaW5waWN0dXJlXG4gICAqL1xuICBmdW5jdGlvbiBQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0J1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLm9uKHBsYXllciwgWydlbnRlcnBpY3R1cmVpbnBpY3R1cmUnLCAnbGVhdmVwaWN0dXJlaW5waWN0dXJlJ10sIF90aGlzLmhhbmRsZVBpY3R1cmVJblBpY3R1cmVDaGFuZ2UpO1xuXG4gICAgX3RoaXMub24ocGxheWVyLCBbJ2Rpc2FibGVwaWN0dXJlaW5waWN0dXJlY2hhbmdlZCcsICdsb2FkZWRtZXRhZGF0YSddLCBfdGhpcy5oYW5kbGVQaWN0dXJlSW5QaWN0dXJlRW5hYmxlZENoYW5nZSk7IC8vIFRPRE86IERlYWN0aXZhdGUgYnV0dG9uIG9uIHBsYXllciBlbXB0aWVkIGV2ZW50LlxuXG5cbiAgICBfdGhpcy5kaXNhYmxlKCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBET00gYGNsYXNzTmFtZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgRE9NIGBjbGFzc05hbWVgIGZvciB0aGlzIG9iamVjdC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUGljdHVyZUluUGljdHVyZVRvZ2dsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1waWN0dXJlLWluLXBpY3R1cmUtY29udHJvbCBcIiArIF9CdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlcyBvciBkaXNhYmxlcyBidXR0b24gYmFzZWQgb24gZG9jdW1lbnQucGljdHVyZUluUGljdHVyZUVuYWJsZWQgcHJvcGVydHkgdmFsdWVcbiAgICogb3Igb24gdmFsdWUgcmV0dXJuZWQgYnkgcGxheWVyLmRpc2FibGVQaWN0dXJlSW5QaWN0dXJlKCkgbWV0aG9kLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVQaWN0dXJlSW5QaWN0dXJlRW5hYmxlZENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZVBpY3R1cmVJblBpY3R1cmVFbmFibGVkQ2hhbmdlKCkge1xuICAgIGlmIChkb2N1bWVudC5waWN0dXJlSW5QaWN0dXJlRW5hYmxlZCAmJiB0aGlzLnBsYXllcl8uZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUoKSA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuZW5hYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBlbnRlcnBpY3R1cmVpbnBpY3R1cmUgYW5kIGxlYXZlcGljdHVyZWlucGljdHVyZSBvbiB0aGUgcGxheWVyIGFuZCBjaGFuZ2UgY29udHJvbCB0ZXh0IGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUge0BsaW5rIFBsYXllciNlbnRlcnBpY3R1cmVpbnBpY3R1cmV9IG9yIHtAbGluayBQbGF5ZXIjbGVhdmVwaWN0dXJlaW5waWN0dXJlfSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNlbnRlcnBpY3R1cmVpbnBpY3R1cmVcbiAgICogQGxpc3RlbnMgUGxheWVyI2xlYXZlcGljdHVyZWlucGljdHVyZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVQaWN0dXJlSW5QaWN0dXJlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlUGljdHVyZUluUGljdHVyZUNoYW5nZShldmVudCkge1xuICAgIGlmICh0aGlzLnBsYXllcl8uaXNJblBpY3R1cmVJblBpY3R1cmUoKSkge1xuICAgICAgdGhpcy5jb250cm9sVGV4dCgnRXhpdCBQaWN0dXJlLWluLVBpY3R1cmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250cm9sVGV4dCgnUGljdHVyZS1pbi1QaWN0dXJlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5oYW5kbGVQaWN0dXJlSW5QaWN0dXJlRW5hYmxlZENoYW5nZSgpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gYW4gYFBpY3R1cmVJblBpY3R1cmVUb2dnbGVgIGlzIFwiY2xpY2tlZFwiLiBTZWVcbiAgICoge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudH0gZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCBhIGNsaWNrIGNhbiBiZS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCwgYHRhcGAsIG9yIGBjbGlja2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmICghdGhpcy5wbGF5ZXJfLmlzSW5QaWN0dXJlSW5QaWN0dXJlKCkpIHtcbiAgICAgIHRoaXMucGxheWVyXy5yZXF1ZXN0UGljdHVyZUluUGljdHVyZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllcl8uZXhpdFBpY3R1cmVJblBpY3R1cmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFBpY3R1cmVJblBpY3R1cmVUb2dnbGU7XG59KEJ1dHRvbik7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYFBpY3R1cmVJblBpY3R1cmVUb2dnbGVgcyBjb250cm9scy4gQWRkZWQgZm9yIGxvY2FsaXphdGlvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cblBpY3R1cmVJblBpY3R1cmVUb2dnbGUucHJvdG90eXBlLmNvbnRyb2xUZXh0XyA9ICdQaWN0dXJlLWluLVBpY3R1cmUnO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdQaWN0dXJlSW5QaWN0dXJlVG9nZ2xlJywgUGljdHVyZUluUGljdHVyZVRvZ2dsZSk7XG5cbi8qKlxuICogVG9nZ2xlIGZ1bGxzY3JlZW4gdmlkZW9cbiAqXG4gKiBAZXh0ZW5kcyBCdXR0b25cbiAqL1xuXG52YXIgRnVsbHNjcmVlblRvZ2dsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0J1dHRvbikge1xuICBfaW5oZXJpdHNMb29zZShGdWxsc2NyZWVuVG9nZ2xlLCBfQnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIEZ1bGxzY3JlZW5Ub2dnbGUocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMub24ocGxheWVyLCAnZnVsbHNjcmVlbmNoYW5nZScsIF90aGlzLmhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UpO1xuXG4gICAgaWYgKGRvY3VtZW50W3BsYXllci5mc0FwaV8uZnVsbHNjcmVlbkVuYWJsZWRdID09PSBmYWxzZSkge1xuICAgICAgX3RoaXMuZGlzYWJsZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBGdWxsc2NyZWVuVG9nZ2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWZ1bGxzY3JlZW4tY29udHJvbCBcIiArIF9CdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBmdWxsc2NyZWVuY2hhbmdlIG9uIHRoZSBwbGF5ZXIgYW5kIGNoYW5nZSBjb250cm9sIHRleHQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSB7QGxpbmsgUGxheWVyI2Z1bGxzY3JlZW5jaGFuZ2V9IGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmVcbiAgICogICAgICAgIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI2Z1bGxzY3JlZW5jaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlRnVsbHNjcmVlbkNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLmlzRnVsbHNjcmVlbigpKSB7XG4gICAgICB0aGlzLmNvbnRyb2xUZXh0KCdOb24tRnVsbHNjcmVlbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRyb2xUZXh0KCdGdWxsc2NyZWVuJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gYW4gYEZ1bGxzY3JlZW5Ub2dnbGVgIGlzIFwiY2xpY2tlZFwiLiBTZWVcbiAgICoge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudH0gZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCBhIGNsaWNrIGNhbiBiZS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCwgYHRhcGAsIG9yIGBjbGlja2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmICghdGhpcy5wbGF5ZXJfLmlzRnVsbHNjcmVlbigpKSB7XG4gICAgICB0aGlzLnBsYXllcl8ucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXJfLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBGdWxsc2NyZWVuVG9nZ2xlO1xufShCdXR0b24pO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBGdWxsc2NyZWVuVG9nZ2xlYHMgY29udHJvbHMuIEFkZGVkIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5GdWxsc2NyZWVuVG9nZ2xlLnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnRnVsbHNjcmVlbic7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0Z1bGxzY3JlZW5Ub2dnbGUnLCBGdWxsc2NyZWVuVG9nZ2xlKTtcblxuLyoqXG4gKiBDaGVjayBpZiB2b2x1bWUgY29udHJvbCBpcyBzdXBwb3J0ZWQgYW5kIGlmIGl0IGlzbid0IGhpZGUgdGhlXG4gKiBgQ29tcG9uZW50YCB0aGF0IHdhcyBwYXNzZWQgIHVzaW5nIHRoZSBgdmpzLWhpZGRlbmAgY2xhc3MuXG4gKlxuICogQHBhcmFtIHtDb21wb25lbnR9IHNlbGZcbiAqICAgICAgICBUaGUgY29tcG9uZW50IHRoYXQgc2hvdWxkIGJlIGhpZGRlbiBpZiB2b2x1bWUgaXMgdW5zdXBwb3J0ZWRcbiAqXG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gKiAgICAgICAgQSByZWZlcmVuY2UgdG8gdGhlIHBsYXllclxuICpcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBjaGVja1ZvbHVtZVN1cHBvcnQgPSBmdW5jdGlvbiBjaGVja1ZvbHVtZVN1cHBvcnQoc2VsZiwgcGxheWVyKSB7XG4gIC8vIGhpZGUgdm9sdW1lIGNvbnRyb2xzIHdoZW4gdGhleSdyZSBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IHRlY2hcbiAgaWYgKHBsYXllci50ZWNoXyAmJiAhcGxheWVyLnRlY2hfLmZlYXR1cmVzVm9sdW1lQ29udHJvbCkge1xuICAgIHNlbGYuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgfVxuXG4gIHNlbGYub24ocGxheWVyLCAnbG9hZHN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGxheWVyLnRlY2hfLmZlYXR1cmVzVm9sdW1lQ29udHJvbCkge1xuICAgICAgc2VsZi5hZGRDbGFzcygndmpzLWhpZGRlbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnJlbW92ZUNsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogU2hvd3Mgdm9sdW1lIGxldmVsXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIFZvbHVtZUxldmVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFZvbHVtZUxldmVsLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBWb2x1bWVMZXZlbCgpIHtcbiAgICByZXR1cm4gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVm9sdW1lTGV2ZWwucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy12b2x1bWUtbGV2ZWwnLFxuICAgICAgaW5uZXJIVE1MOiAnPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+PC9zcGFuPidcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gVm9sdW1lTGV2ZWw7XG59KENvbXBvbmVudCk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVm9sdW1lTGV2ZWwnLCBWb2x1bWVMZXZlbCk7XG5cbi8qKlxuICogVGhlIGJhciB0aGF0IGNvbnRhaW5zIHRoZSB2b2x1bWUgbGV2ZWwgYW5kIGNhbiBiZSBjbGlja2VkIG9uIHRvIGFkanVzdCB0aGUgbGV2ZWxcbiAqXG4gKiBAZXh0ZW5kcyBTbGlkZXJcbiAqL1xuXG52YXIgVm9sdW1lQmFyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU2xpZGVyKSB7XG4gIF9pbmhlcml0c0xvb3NlKFZvbHVtZUJhciwgX1NsaWRlcik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBWb2x1bWVCYXIocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfU2xpZGVyLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMub24oJ3NsaWRlcmFjdGl2ZScsIF90aGlzLnVwZGF0ZUxhc3RWb2x1bWVfKTtcblxuICAgIF90aGlzLm9uKHBsYXllciwgJ3ZvbHVtZWNoYW5nZScsIF90aGlzLnVwZGF0ZUFSSUFBdHRyaWJ1dGVzKTtcblxuICAgIHBsYXllci5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMudXBkYXRlQVJJQUF0dHJpYnV0ZXMoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYENvbXBvbmVudGAncyBET00gZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFZvbHVtZUJhci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIF9TbGlkZXIucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy12b2x1bWUtYmFyIHZqcy1zbGlkZXItYmFyJ1xuICAgIH0sIHtcbiAgICAgICdhcmlhLWxhYmVsJzogdGhpcy5sb2NhbGl6ZSgnVm9sdW1lIExldmVsJyksXG4gICAgICAnYXJpYS1saXZlJzogJ3BvbGl0ZSdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIG1vdXNlIGRvd24gb24gdm9sdW1lIGJhclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBtb3VzZWRvd25gIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG4gICAgaWYgKCFpc1NpbmdsZUxlZnRDbGljayhldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfU2xpZGVyLnByb3RvdHlwZS5oYW5kbGVNb3VzZURvd24uY2FsbCh0aGlzLCBldmVudCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBtb3ZlbWVudCBldmVudHMgb24gdGhlIHtAbGluayBWb2x1bWVNZW51QnV0dG9ufS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgbW91c2Vtb3ZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShldmVudCkge1xuICAgIGlmICghaXNTaW5nbGVMZWZ0Q2xpY2soZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja011dGVkKCk7XG4gICAgdGhpcy5wbGF5ZXJfLnZvbHVtZSh0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKGV2ZW50KSk7XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBwbGF5ZXIgaXMgbXV0ZWQgdW5tdXRlIGl0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jaGVja011dGVkID0gZnVuY3Rpb24gY2hlY2tNdXRlZCgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLm11dGVkKCkpIHtcbiAgICAgIHRoaXMucGxheWVyXy5tdXRlZChmYWxzZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgcGVyY2VudCBvZiB2b2x1bWUgbGV2ZWxcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFZvbHVtZSBsZXZlbCBwZXJjZW50IGFzIGEgZGVjaW1hbCBudW1iZXIuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFBlcmNlbnQgPSBmdW5jdGlvbiBnZXRQZXJjZW50KCkge1xuICAgIGlmICh0aGlzLnBsYXllcl8ubXV0ZWQoKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGxheWVyXy52b2x1bWUoKTtcbiAgfVxuICAvKipcbiAgICogSW5jcmVhc2Ugdm9sdW1lIGxldmVsIGZvciBrZXlib2FyZCB1c2Vyc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zdGVwRm9yd2FyZCA9IGZ1bmN0aW9uIHN0ZXBGb3J3YXJkKCkge1xuICAgIHRoaXMuY2hlY2tNdXRlZCgpO1xuICAgIHRoaXMucGxheWVyXy52b2x1bWUodGhpcy5wbGF5ZXJfLnZvbHVtZSgpICsgMC4xKTtcbiAgfVxuICAvKipcbiAgICogRGVjcmVhc2Ugdm9sdW1lIGxldmVsIGZvciBrZXlib2FyZCB1c2Vyc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zdGVwQmFjayA9IGZ1bmN0aW9uIHN0ZXBCYWNrKCkge1xuICAgIHRoaXMuY2hlY2tNdXRlZCgpO1xuICAgIHRoaXMucGxheWVyXy52b2x1bWUodGhpcy5wbGF5ZXJfLnZvbHVtZSgpIC0gMC4xKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIEFSSUEgYWNjZXNzaWJpbGl0eSBhdHRyaWJ1dGVzXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBgdm9sdW1lY2hhbmdlYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI3ZvbHVtZWNoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVBUklBQXR0cmlidXRlcyA9IGZ1bmN0aW9uIHVwZGF0ZUFSSUFBdHRyaWJ1dGVzKGV2ZW50KSB7XG4gICAgdmFyIGFyaWFWYWx1ZSA9IHRoaXMucGxheWVyXy5tdXRlZCgpID8gMCA6IHRoaXMudm9sdW1lQXNQZXJjZW50YWdlXygpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS12YWx1ZW5vdycsIGFyaWFWYWx1ZSk7XG4gICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVldGV4dCcsIGFyaWFWYWx1ZSArICclJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHBsYXllciB2b2x1bWUgYXMgYSBwZXJjZW50YWdlXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnZvbHVtZUFzUGVyY2VudGFnZV8gPSBmdW5jdGlvbiB2b2x1bWVBc1BlcmNlbnRhZ2VfKCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHRoaXMucGxheWVyXy52b2x1bWUoKSAqIDEwMCk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gdXNlciBzdGFydHMgZHJhZ2dpbmcgdGhlIFZvbHVtZUJhciwgc3RvcmUgdGhlIHZvbHVtZSBhbmQgbGlzdGVuIGZvclxuICAgKiB0aGUgZW5kIG9mIHRoZSBkcmFnLiBXaGVuIHRoZSBkcmFnIGVuZHMsIGlmIHRoZSB2b2x1bWUgd2FzIHNldCB0byB6ZXJvLFxuICAgKiBzZXQgbGFzdFZvbHVtZSB0byB0aGUgc3RvcmVkIHZvbHVtZS5cbiAgICpcbiAgICogQGxpc3RlbnMgc2xpZGVyYWN0aXZlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZUxhc3RWb2x1bWVfID0gZnVuY3Rpb24gdXBkYXRlTGFzdFZvbHVtZV8oKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgdm9sdW1lQmVmb3JlRHJhZyA9IHRoaXMucGxheWVyXy52b2x1bWUoKTtcbiAgICB0aGlzLm9uZSgnc2xpZGVyaW5hY3RpdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMyLnBsYXllcl8udm9sdW1lKCkgPT09IDApIHtcbiAgICAgICAgX3RoaXMyLnBsYXllcl8ubGFzdFZvbHVtZV8odm9sdW1lQmVmb3JlRHJhZyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFZvbHVtZUJhcjtcbn0oU2xpZGVyKTtcbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIGZvciB0aGUgYFZvbHVtZUJhcmBcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuXG5cblZvbHVtZUJhci5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiBbJ3ZvbHVtZUxldmVsJ10sXG4gIGJhck5hbWU6ICd2b2x1bWVMZXZlbCdcbn07XG4vKipcbiAqIENhbGwgdGhlIHVwZGF0ZSBldmVudCBmb3IgdGhpcyBTbGlkZXIgd2hlbiB0aGlzIGV2ZW50IGhhcHBlbnMgb24gdGhlIHBsYXllci5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5cblZvbHVtZUJhci5wcm90b3R5cGUucGxheWVyRXZlbnQgPSAndm9sdW1lY2hhbmdlJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVm9sdW1lQmFyJywgVm9sdW1lQmFyKTtcblxuLyoqXG4gKiBUaGUgY29tcG9uZW50IGZvciBjb250cm9sbGluZyB0aGUgdm9sdW1lIGxldmVsXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIFZvbHVtZUNvbnRyb2wgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVm9sdW1lQ29udHJvbCwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV1cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBWb2x1bWVDb250cm9sKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBvcHRpb25zLnZlcnRpY2FsID0gb3B0aW9ucy52ZXJ0aWNhbCB8fCBmYWxzZTsgLy8gUGFzcyB0aGUgdmVydGljYWwgb3B0aW9uIGRvd24gdG8gdGhlIFZvbHVtZUJhciBpZlxuICAgIC8vIHRoZSBWb2x1bWVCYXIgaXMgdHVybmVkIG9uLlxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnZvbHVtZUJhciA9PT0gJ3VuZGVmaW5lZCcgfHwgaXNQbGFpbihvcHRpb25zLnZvbHVtZUJhcikpIHtcbiAgICAgIG9wdGlvbnMudm9sdW1lQmFyID0gb3B0aW9ucy52b2x1bWVCYXIgfHwge307XG4gICAgICBvcHRpb25zLnZvbHVtZUJhci52ZXJ0aWNhbCA9IG9wdGlvbnMudmVydGljYWw7XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzOyAvLyBoaWRlIHRoaXMgY29udHJvbCBpZiB2b2x1bWUgc3VwcG9ydCBpcyBtaXNzaW5nXG5cbiAgICBjaGVja1ZvbHVtZVN1cHBvcnQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBsYXllcik7XG4gICAgX3RoaXMudGhyb3R0bGVkSGFuZGxlTW91c2VNb3ZlID0gdGhyb3R0bGUoYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMuaGFuZGxlTW91c2VNb3ZlKSwgVVBEQVRFX1JFRlJFU0hfSU5URVJWQUwpO1xuXG4gICAgX3RoaXMub24oJ21vdXNlZG93bicsIF90aGlzLmhhbmRsZU1vdXNlRG93bik7XG5cbiAgICBfdGhpcy5vbigndG91Y2hzdGFydCcsIF90aGlzLmhhbmRsZU1vdXNlRG93bik7IC8vIHdoaWxlIHRoZSBzbGlkZXIgaXMgYWN0aXZlICh0aGUgbW91c2UgaGFzIGJlZW4gcHJlc3NlZCBkb3duIGFuZFxuICAgIC8vIGlzIGRyYWdnaW5nKSBvciBpbiBmb2N1cyB3ZSBkbyBub3Qgd2FudCB0byBoaWRlIHRoZSBWb2x1bWVCYXJcblxuXG4gICAgX3RoaXMub24oX3RoaXMudm9sdW1lQmFyLCBbJ2ZvY3VzJywgJ3NsaWRlcmFjdGl2ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy52b2x1bWVCYXIuYWRkQ2xhc3MoJ3Zqcy1zbGlkZXItYWN0aXZlJyk7XG5cbiAgICAgIF90aGlzLmFkZENsYXNzKCd2anMtc2xpZGVyLWFjdGl2ZScpO1xuXG4gICAgICBfdGhpcy50cmlnZ2VyKCdzbGlkZXJhY3RpdmUnKTtcbiAgICB9KTtcblxuICAgIF90aGlzLm9uKF90aGlzLnZvbHVtZUJhciwgWydibHVyJywgJ3NsaWRlcmluYWN0aXZlJ10sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnZvbHVtZUJhci5yZW1vdmVDbGFzcygndmpzLXNsaWRlci1hY3RpdmUnKTtcblxuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1zbGlkZXItYWN0aXZlJyk7XG5cbiAgICAgIF90aGlzLnRyaWdnZXIoJ3NsaWRlcmluYWN0aXZlJyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYENvbXBvbmVudGAncyBET00gZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFZvbHVtZUNvbnRyb2wucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHZhciBvcmllbnRhdGlvbkNsYXNzID0gJ3Zqcy12b2x1bWUtaG9yaXpvbnRhbCc7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zXy52ZXJ0aWNhbCkge1xuICAgICAgb3JpZW50YXRpb25DbGFzcyA9ICd2anMtdm9sdW1lLXZlcnRpY2FsJztcbiAgICB9XG5cbiAgICByZXR1cm4gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiBcInZqcy12b2x1bWUtY29udHJvbCB2anMtY29udHJvbCBcIiArIG9yaWVudGF0aW9uQ2xhc3NcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCBldmVudHMgb24gdGhlIGBWb2x1bWVDb250cm9sYC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGlzIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBsaXN0ZW5zIG1vdXNlZG93blxuICAgKiBAbGlzdGVucyB0b3VjaHN0YXJ0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuICAgIHZhciBkb2MgPSB0aGlzLmVsXy5vd25lckRvY3VtZW50O1xuICAgIHRoaXMub24oZG9jLCAnbW91c2Vtb3ZlJywgdGhpcy50aHJvdHRsZWRIYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub24oZG9jLCAndG91Y2htb3ZlJywgdGhpcy50aHJvdHRsZWRIYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub24oZG9jLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5vbihkb2MsICd0b3VjaGVuZCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBgbW91c2V1cGAgb3IgYHRvdWNoZW5kYCBldmVudHMgb24gdGhlIGBWb2x1bWVDb250cm9sYC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIGBtb3VzZXVwYCBvciBgdG91Y2hlbmRgIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRvdWNoZW5kXG4gICAqIEBsaXN0ZW5zIG1vdXNldXBcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlTW91c2VVcCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlVXAoZXZlbnQpIHtcbiAgICB2YXIgZG9jID0gdGhpcy5lbF8ub3duZXJEb2N1bWVudDtcbiAgICB0aGlzLm9mZihkb2MsICdtb3VzZW1vdmUnLCB0aGlzLnRocm90dGxlZEhhbmRsZU1vdXNlTW92ZSk7XG4gICAgdGhpcy5vZmYoZG9jLCAndG91Y2htb3ZlJywgdGhpcy50aHJvdHRsZWRIYW5kbGVNb3VzZU1vdmUpO1xuICAgIHRoaXMub2ZmKGRvYywgJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIHRoaXMub2ZmKGRvYywgJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCBldmVudHMgb24gdGhlIGBWb2x1bWVDb250cm9sYC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGlzIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBsaXN0ZW5zIG1vdXNlZG93blxuICAgKiBAbGlzdGVucyB0b3VjaHN0YXJ0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShldmVudCkge1xuICAgIHRoaXMudm9sdW1lQmFyLmhhbmRsZU1vdXNlTW92ZShldmVudCk7XG4gIH07XG5cbiAgcmV0dXJuIFZvbHVtZUNvbnRyb2w7XG59KENvbXBvbmVudCk7XG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIGBWb2x1bWVDb250cm9sYFxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuVm9sdW1lQ29udHJvbC5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiBbJ3ZvbHVtZUJhciddXG59O1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdWb2x1bWVDb250cm9sJywgVm9sdW1lQ29udHJvbCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgbXV0aW5nIHZvbHVtZSBpcyBzdXBwb3J0ZWQgYW5kIGlmIGl0IGlzbid0IGhpZGUgdGhlIG11dGUgdG9nZ2xlXG4gKiBidXR0b24uXG4gKlxuICogQHBhcmFtIHtDb21wb25lbnR9IHNlbGZcbiAqICAgICAgICBBIHJlZmVyZW5jZSB0byB0aGUgbXV0ZSB0b2dnbGUgYnV0dG9uXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICogICAgICAgIEEgcmVmZXJlbmNlIHRvIHRoZSBwbGF5ZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgY2hlY2tNdXRlU3VwcG9ydCA9IGZ1bmN0aW9uIGNoZWNrTXV0ZVN1cHBvcnQoc2VsZiwgcGxheWVyKSB7XG4gIC8vIGhpZGUgbXV0ZSB0b2dnbGUgYnV0dG9uIGlmIGl0J3Mgbm90IHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCB0ZWNoXG4gIGlmIChwbGF5ZXIudGVjaF8gJiYgIXBsYXllci50ZWNoXy5mZWF0dXJlc011dGVDb250cm9sKSB7XG4gICAgc2VsZi5hZGRDbGFzcygndmpzLWhpZGRlbicpO1xuICB9XG5cbiAgc2VsZi5vbihwbGF5ZXIsICdsb2Fkc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFwbGF5ZXIudGVjaF8uZmVhdHVyZXNNdXRlQ29udHJvbCkge1xuICAgICAgc2VsZi5hZGRDbGFzcygndmpzLWhpZGRlbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnJlbW92ZUNsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogQSBidXR0b24gY29tcG9uZW50IGZvciBtdXRpbmcgdGhlIGF1ZGlvLlxuICpcbiAqIEBleHRlbmRzIEJ1dHRvblxuICovXG5cbnZhciBNdXRlVG9nZ2xlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKE11dGVUb2dnbGUsIF9CdXR0b24pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gTXV0ZVRvZ2dsZShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CdXR0b24uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7IC8vIGhpZGUgdGhpcyBjb250cm9sIGlmIHZvbHVtZSBzdXBwb3J0IGlzIG1pc3NpbmdcblxuICAgIGNoZWNrTXV0ZVN1cHBvcnQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBsYXllcik7XG5cbiAgICBfdGhpcy5vbihwbGF5ZXIsIFsnbG9hZHN0YXJ0JywgJ3ZvbHVtZWNoYW5nZSddLCBfdGhpcy51cGRhdGUpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IE11dGVUb2dnbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZENTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtbXV0ZS1jb250cm9sIFwiICsgX0J1dHRvbi5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gYW4gYE11dGVUb2dnbGVgIGlzIFwiY2xpY2tlZFwiLiBTZWVcbiAgICoge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudH0gZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCBhIGNsaWNrIGNhbiBiZS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCwgYHRhcGAsIG9yIGBjbGlja2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciB2b2wgPSB0aGlzLnBsYXllcl8udm9sdW1lKCk7XG4gICAgdmFyIGxhc3RWb2x1bWUgPSB0aGlzLnBsYXllcl8ubGFzdFZvbHVtZV8oKTtcblxuICAgIGlmICh2b2wgPT09IDApIHtcbiAgICAgIHZhciB2b2x1bWVUb1NldCA9IGxhc3RWb2x1bWUgPCAwLjEgPyAwLjEgOiBsYXN0Vm9sdW1lO1xuICAgICAgdGhpcy5wbGF5ZXJfLnZvbHVtZSh2b2x1bWVUb1NldCk7XG4gICAgICB0aGlzLnBsYXllcl8ubXV0ZWQoZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllcl8ubXV0ZWQodGhpcy5wbGF5ZXJfLm11dGVkKCkgPyBmYWxzZSA6IHRydWUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBgTXV0ZVRvZ2dsZWAgYnV0dG9uIGJhc2VkIG9uIHRoZSBzdGF0ZSBvZiBgdm9sdW1lYCBhbmQgYG11dGVkYFxuICAgKiBvbiB0aGUgcGxheWVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUge0BsaW5rIFBsYXllciNsb2Fkc3RhcnR9IGV2ZW50IGlmIHRoaXMgZnVuY3Rpb24gd2FzIGNhbGxlZFxuICAgKiAgICAgICAgdGhyb3VnaCBhbiBldmVudC5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI2xvYWRzdGFydFxuICAgKiBAbGlzdGVucyBQbGF5ZXIjdm9sdW1lY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShldmVudCkge1xuICAgIHRoaXMudXBkYXRlSWNvbl8oKTtcbiAgICB0aGlzLnVwZGF0ZUNvbnRyb2xUZXh0XygpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIGBNdXRlVG9nZ2xlYCBpY29uLlxuICAgKlxuICAgKiBQb3NzaWJsZSBzdGF0ZXMgKGdpdmVuIGBsZXZlbGAgdmFyaWFibGUgYmVsb3cpOlxuICAgKiAtIDA6IGNyb3NzZWQgb3V0XG4gICAqIC0gMTogemVybyBiYXJzIG9mIHZvbHVtZVxuICAgKiAtIDI6IG9uZSBiYXIgb2Ygdm9sdW1lXG4gICAqIC0gMzogdHdvIGJhcnMgb2Ygdm9sdW1lXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZUljb25fID0gZnVuY3Rpb24gdXBkYXRlSWNvbl8oKSB7XG4gICAgdmFyIHZvbCA9IHRoaXMucGxheWVyXy52b2x1bWUoKTtcbiAgICB2YXIgbGV2ZWwgPSAzOyAvLyBpbiBpT1Mgd2hlbiBhIHBsYXllciBpcyBsb2FkZWQgd2l0aCBtdXRlZCBhdHRyaWJ1dGVcbiAgICAvLyBhbmQgdm9sdW1lIGlzIGNoYW5nZWQgd2l0aCBhIG5hdGl2ZSBtdXRlIGJ1dHRvblxuICAgIC8vIHdlIHdhbnQgdG8gbWFrZSBzdXJlIG11dGVkIHN0YXRlIGlzIHVwZGF0ZWRcblxuICAgIGlmIChJU19JT1MgJiYgdGhpcy5wbGF5ZXJfLnRlY2hfICYmIHRoaXMucGxheWVyXy50ZWNoXy5lbF8pIHtcbiAgICAgIHRoaXMucGxheWVyXy5tdXRlZCh0aGlzLnBsYXllcl8udGVjaF8uZWxfLm11dGVkKTtcbiAgICB9XG5cbiAgICBpZiAodm9sID09PSAwIHx8IHRoaXMucGxheWVyXy5tdXRlZCgpKSB7XG4gICAgICBsZXZlbCA9IDA7XG4gICAgfSBlbHNlIGlmICh2b2wgPCAwLjMzKSB7XG4gICAgICBsZXZlbCA9IDE7XG4gICAgfSBlbHNlIGlmICh2b2wgPCAwLjY3KSB7XG4gICAgICBsZXZlbCA9IDI7XG4gICAgfSAvLyBUT0RPIGltcHJvdmUgbXV0ZWQgaWNvbiBjbGFzc2VzXG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICByZW1vdmVDbGFzcyh0aGlzLmVsXywgXCJ2anMtdm9sLVwiICsgaSk7XG4gICAgfVxuXG4gICAgYWRkQ2xhc3ModGhpcy5lbF8sIFwidmpzLXZvbC1cIiArIGxldmVsKTtcbiAgfVxuICAvKipcbiAgICogSWYgYG11dGVkYCBoYXMgY2hhbmdlZCBvbiB0aGUgcGxheWVyLCB1cGRhdGUgdGhlIGNvbnRyb2wgdGV4dFxuICAgKiAoYHRpdGxlYCBhdHRyaWJ1dGUgb24gYHZqcy1tdXRlLWNvbnRyb2xgIGVsZW1lbnQgYW5kIGNvbnRlbnQgb2ZcbiAgICogYHZqcy1jb250cm9sLXRleHRgIGVsZW1lbnQpLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVDb250cm9sVGV4dF8gPSBmdW5jdGlvbiB1cGRhdGVDb250cm9sVGV4dF8oKSB7XG4gICAgdmFyIHNvdW5kT2ZmID0gdGhpcy5wbGF5ZXJfLm11dGVkKCkgfHwgdGhpcy5wbGF5ZXJfLnZvbHVtZSgpID09PSAwO1xuICAgIHZhciB0ZXh0ID0gc291bmRPZmYgPyAnVW5tdXRlJyA6ICdNdXRlJztcblxuICAgIGlmICh0aGlzLmNvbnRyb2xUZXh0KCkgIT09IHRleHQpIHtcbiAgICAgIHRoaXMuY29udHJvbFRleHQodGV4dCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBNdXRlVG9nZ2xlO1xufShCdXR0b24pO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBNdXRlVG9nZ2xlYHMgY29udHJvbHMuIEFkZGVkIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5NdXRlVG9nZ2xlLnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnTXV0ZSc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ011dGVUb2dnbGUnLCBNdXRlVG9nZ2xlKTtcblxuLyoqXG4gKiBBIENvbXBvbmVudCB0byBjb250YWluIHRoZSBNdXRlVG9nZ2xlIGFuZCBWb2x1bWVDb250cm9sIHNvIHRoYXRcbiAqIHRoZXkgY2FuIHdvcmsgdG9nZXRoZXIuXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cblxudmFyIFZvbHVtZVBhbmVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFZvbHVtZVBhbmVsLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFZvbHVtZVBhbmVsKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuaW5saW5lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgb3B0aW9ucy5pbmxpbmUgPSBvcHRpb25zLmlubGluZTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy5pbmxpbmUgPSB0cnVlO1xuICAgIH0gLy8gcGFzcyB0aGUgaW5saW5lIG9wdGlvbiBkb3duIHRvIHRoZSBWb2x1bWVDb250cm9sIGFzIHZlcnRpY2FsIGlmXG4gICAgLy8gdGhlIFZvbHVtZUNvbnRyb2wgaXMgb24uXG5cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy52b2x1bWVDb250cm9sID09PSAndW5kZWZpbmVkJyB8fCBpc1BsYWluKG9wdGlvbnMudm9sdW1lQ29udHJvbCkpIHtcbiAgICAgIG9wdGlvbnMudm9sdW1lQ29udHJvbCA9IG9wdGlvbnMudm9sdW1lQ29udHJvbCB8fCB7fTtcbiAgICAgIG9wdGlvbnMudm9sdW1lQ29udHJvbC52ZXJ0aWNhbCA9ICFvcHRpb25zLmlubGluZTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5vbihwbGF5ZXIsIFsnbG9hZHN0YXJ0J10sIF90aGlzLnZvbHVtZVBhbmVsU3RhdGVfKTtcblxuICAgIF90aGlzLm9uKF90aGlzLm11dGVUb2dnbGUsICdrZXl1cCcsIF90aGlzLmhhbmRsZUtleVByZXNzKTtcblxuICAgIF90aGlzLm9uKF90aGlzLnZvbHVtZUNvbnRyb2wsICdrZXl1cCcsIF90aGlzLmhhbmRsZVZvbHVtZUNvbnRyb2xLZXlVcCk7XG5cbiAgICBfdGhpcy5vbigna2V5ZG93bicsIF90aGlzLmhhbmRsZUtleVByZXNzKTtcblxuICAgIF90aGlzLm9uKCdtb3VzZW92ZXInLCBfdGhpcy5oYW5kbGVNb3VzZU92ZXIpO1xuXG4gICAgX3RoaXMub24oJ21vdXNlb3V0JywgX3RoaXMuaGFuZGxlTW91c2VPdXQpOyAvLyB3aGlsZSB0aGUgc2xpZGVyIGlzIGFjdGl2ZSAodGhlIG1vdXNlIGhhcyBiZWVuIHByZXNzZWQgZG93biBhbmRcbiAgICAvLyBpcyBkcmFnZ2luZykgd2UgZG8gbm90IHdhbnQgdG8gaGlkZSB0aGUgVm9sdW1lQmFyXG5cblxuICAgIF90aGlzLm9uKF90aGlzLnZvbHVtZUNvbnRyb2wsIFsnc2xpZGVyYWN0aXZlJ10sIF90aGlzLnNsaWRlckFjdGl2ZV8pO1xuXG4gICAgX3RoaXMub24oX3RoaXMudm9sdW1lQ29udHJvbCwgWydzbGlkZXJpbmFjdGl2ZSddLCBfdGhpcy5zbGlkZXJJbmFjdGl2ZV8pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgdmpzLXNsaWRlci1hY3RpdmUgY2xhc3MgdG8gdGhlIFZvbHVtZVBhbmVsXG4gICAqXG4gICAqIEBsaXN0ZW5zIFZvbHVtZUNvbnRyb2wjc2xpZGVyYWN0aXZlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFZvbHVtZVBhbmVsLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2xpZGVyQWN0aXZlXyA9IGZ1bmN0aW9uIHNsaWRlckFjdGl2ZV8oKSB7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXNsaWRlci1hY3RpdmUnKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyB2anMtc2xpZGVyLWFjdGl2ZSBjbGFzcyB0byB0aGUgVm9sdW1lUGFuZWxcbiAgICpcbiAgICogQGxpc3RlbnMgVm9sdW1lQ29udHJvbCNzbGlkZXJpbmFjdGl2ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zbGlkZXJJbmFjdGl2ZV8gPSBmdW5jdGlvbiBzbGlkZXJJbmFjdGl2ZV8oKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXNsaWRlci1hY3RpdmUnKTtcbiAgfVxuICAvKipcbiAgICogQWRkcyB2anMtaGlkZGVuIG9yIHZqcy1tdXRlLXRvZ2dsZS1vbmx5IHRvIHRoZSBWb2x1bWVQYW5lbFxuICAgKiBkZXBlbmRpbmcgb24gTXV0ZVRvZ2dsZSBhbmQgVm9sdW1lQ29udHJvbCBzdGF0ZVxuICAgKlxuICAgKiBAbGlzdGVucyBQbGF5ZXIjbG9hZHN0YXJ0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnZvbHVtZVBhbmVsU3RhdGVfID0gZnVuY3Rpb24gdm9sdW1lUGFuZWxTdGF0ZV8oKSB7XG4gICAgLy8gaGlkZSB2b2x1bWUgcGFuZWwgaWYgbmVpdGhlciB2b2x1bWUgY29udHJvbCBvciBtdXRlIHRvZ2dsZVxuICAgIC8vIGFyZSBkaXNwbGF5ZWRcbiAgICBpZiAodGhpcy52b2x1bWVDb250cm9sLmhhc0NsYXNzKCd2anMtaGlkZGVuJykgJiYgdGhpcy5tdXRlVG9nZ2xlLmhhc0NsYXNzKCd2anMtaGlkZGVuJykpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICB9IC8vIGlmIG9ubHkgbXV0ZSB0b2dnbGUgaXMgdmlzaWJsZSB3ZSBkb24ndCB3YW50XG4gICAgLy8gdm9sdW1lIHBhbmVsIGV4cGFuZGluZyB3aGVuIGhvdmVyZWQgb3IgYWN0aXZlXG5cblxuICAgIGlmICh0aGlzLnZvbHVtZUNvbnRyb2wuaGFzQ2xhc3MoJ3Zqcy1oaWRkZW4nKSAmJiAhdGhpcy5tdXRlVG9nZ2xlLmhhc0NsYXNzKCd2anMtaGlkZGVuJykpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1tdXRlLXRvZ2dsZS1vbmx5Jyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHZhciBvcmllbnRhdGlvbkNsYXNzID0gJ3Zqcy12b2x1bWUtcGFuZWwtaG9yaXpvbnRhbCc7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9uc18uaW5saW5lKSB7XG4gICAgICBvcmllbnRhdGlvbkNsYXNzID0gJ3Zqcy12b2x1bWUtcGFuZWwtdmVydGljYWwnO1xuICAgIH1cblxuICAgIHJldHVybiBfQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVFbC5jYWxsKHRoaXMsICdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6IFwidmpzLXZvbHVtZS1wYW5lbCB2anMtY29udHJvbCBcIiArIG9yaWVudGF0aW9uQ2xhc3NcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRGlzcG9zZSBvZiB0aGUgYHZvbHVtZS1wYW5lbGAgYW5kIGFsbCBjaGlsZCBjb21wb25lbnRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLmhhbmRsZU1vdXNlT3V0KCk7XG5cbiAgICBfQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXMgYGtleXVwYCBldmVudHMgb24gdGhlIGBWb2x1bWVDb250cm9sYCwgbG9va2luZyBmb3IgRVNDLCB3aGljaCBjbG9zZXNcbiAgICogdGhlIHZvbHVtZSBwYW5lbCBhbmQgc2V0cyBmb2N1cyBvbiBgTXV0ZVRvZ2dsZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGtleXVwYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMga2V5dXBcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVm9sdW1lQ29udHJvbEtleVVwID0gZnVuY3Rpb24gaGFuZGxlVm9sdW1lQ29udHJvbEtleVVwKGV2ZW50KSB7XG4gICAgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ0VzYycpKSB7XG4gICAgICB0aGlzLm11dGVUb2dnbGUuZm9jdXMoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhIGBWb2x1bWVQYW5lbGAgZ2FpbnMgaG92ZXIgdmlhIGEgYG1vdXNlb3ZlcmAgZXZlbnQuXG4gICAqIFR1cm5zIG9uIGxpc3RlbmluZyBmb3IgYG1vdXNlb3ZlcmAgZXZlbnQuIFdoZW4gdGhleSBoYXBwZW4gaXRcbiAgICogY2FsbHMgYHRoaXMuaGFuZGxlTW91c2VPdmVyYC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBgbW91c2VvdmVyYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgbW91c2VvdmVyXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlT3ZlciA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlT3ZlcihldmVudCkge1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1ob3ZlcicpO1xuICAgIG9uKGRvY3VtZW50LCAna2V5dXAnLCBiaW5kKHRoaXMsIHRoaXMuaGFuZGxlS2V5UHJlc3MpKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCB3aGVuIGEgYFZvbHVtZVBhbmVsYCBnYWlucyBob3ZlciB2aWEgYSBgbW91c2VvdXRgIGV2ZW50LlxuICAgKiBUdXJucyBvbiBsaXN0ZW5pbmcgZm9yIGBtb3VzZW91dGAgZXZlbnQuIFdoZW4gdGhleSBoYXBwZW4gaXRcbiAgICogY2FsbHMgYHRoaXMuaGFuZGxlTW91c2VPdXRgLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBtb3VzZW91dGAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIG1vdXNlb3V0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlT3V0ID0gZnVuY3Rpb24gaGFuZGxlTW91c2VPdXQoZXZlbnQpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtaG92ZXInKTtcbiAgICBvZmYoZG9jdW1lbnQsICdrZXl1cCcsIGJpbmQodGhpcywgdGhpcy5oYW5kbGVLZXlQcmVzcykpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIGBrZXl1cGAgZXZlbnQgb24gdGhlIGRvY3VtZW50IG9yIGBrZXlkb3duYCBldmVudCBvbiB0aGUgYFZvbHVtZVBhbmVsYCxcbiAgICogbG9va2luZyBmb3IgRVNDLCB3aGljaCBoaWRlcyB0aGUgYFZvbHVtZUNvbnRyb2xgLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGtleXByZXNzIHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleWRvd24gfCBrZXl1cFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVLZXlQcmVzcyA9IGZ1bmN0aW9uIGhhbmRsZUtleVByZXNzKGV2ZW50KSB7XG4gICAgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ0VzYycpKSB7XG4gICAgICB0aGlzLmhhbmRsZU1vdXNlT3V0KCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBWb2x1bWVQYW5lbDtcbn0oQ29tcG9uZW50KTtcbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIGZvciB0aGUgYFZvbHVtZUNvbnRyb2xgXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5Wb2x1bWVQYW5lbC5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiBbJ211dGVUb2dnbGUnLCAndm9sdW1lQ29udHJvbCddXG59O1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdWb2x1bWVQYW5lbCcsIFZvbHVtZVBhbmVsKTtcblxuLyoqXG4gKiBUaGUgTWVudSBjb21wb25lbnQgaXMgdXNlZCB0byBidWlsZCBwb3B1cCBtZW51cywgaW5jbHVkaW5nIHN1YnRpdGxlIGFuZFxuICogY2FwdGlvbnMgc2VsZWN0aW9uIG1lbnVzLlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBNZW51ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbnUsIF9Db21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgdGhlIHBsYXllciB0aGF0IHRoaXMgY29tcG9uZW50IHNob3VsZCBhdHRhY2ggdG9cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgT2JqZWN0IG9mIG9wdGlvbiBuYW1lcyBhbmQgdmFsdWVzXG4gICAqXG4gICAqL1xuICBmdW5jdGlvbiBNZW51KHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBfdGhpcy5tZW51QnV0dG9uXyA9IG9wdGlvbnMubWVudUJ1dHRvbjtcbiAgICB9XG5cbiAgICBfdGhpcy5mb2N1c2VkQ2hpbGRfID0gLTE7XG5cbiAgICBfdGhpcy5vbigna2V5ZG93bicsIF90aGlzLmhhbmRsZUtleURvd24pOyAvLyBBbGwgdGhlIG1lbnUgaXRlbSBpbnN0YW5jZXMgc2hhcmUgdGhlIHNhbWUgYmx1ciBoYW5kbGVyIHByb3ZpZGVkIGJ5IHRoZSBtZW51IGNvbnRhaW5lci5cblxuXG4gICAgX3RoaXMuYm91bmRIYW5kbGVCbHVyXyA9IGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLmhhbmRsZUJsdXIpO1xuICAgIF90aGlzLmJvdW5kSGFuZGxlVGFwQ2xpY2tfID0gYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMuaGFuZGxlVGFwQ2xpY2spO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkIGV2ZW50IGxpc3RlbmVycyB0byB0aGUge0BsaW5rIE1lbnVJdGVtfS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudFxuICAgKiAgICAgICAgVGhlIGluc3RhbmNlIG9mIHRoZSBgTWVudUl0ZW1gIHRvIGFkZCBsaXN0ZW5lcnMgdG8uXG4gICAqXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IE1lbnUucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGRFdmVudExpc3RlbmVyRm9ySXRlbSA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJGb3JJdGVtKGNvbXBvbmVudCkge1xuICAgIGlmICghKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbXBvbmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm9uKGNvbXBvbmVudCwgJ2JsdXInLCB0aGlzLmJvdW5kSGFuZGxlQmx1cl8pO1xuICAgIHRoaXMub24oY29tcG9uZW50LCBbJ3RhcCcsICdjbGljayddLCB0aGlzLmJvdW5kSGFuZGxlVGFwQ2xpY2tfKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSB7QGxpbmsgTWVudUl0ZW19LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50XG4gICAqICAgICAgICBUaGUgaW5zdGFuY2Ugb2YgdGhlIGBNZW51SXRlbWAgdG8gcmVtb3ZlIGxpc3RlbmVycy5cbiAgICpcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlRXZlbnRMaXN0ZW5lckZvckl0ZW0gPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyRm9ySXRlbShjb21wb25lbnQpIHtcbiAgICBpZiAoIShjb21wb25lbnQgaW5zdGFuY2VvZiBDb21wb25lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vZmYoY29tcG9uZW50LCAnYmx1cicsIHRoaXMuYm91bmRIYW5kbGVCbHVyXyk7XG4gICAgdGhpcy5vZmYoY29tcG9uZW50LCBbJ3RhcCcsICdjbGljayddLCB0aGlzLmJvdW5kSGFuZGxlVGFwQ2xpY2tfKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgaW5kaXJlY3RseSB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gYWRkZWRcbiAgICogYmVmb3JlIHRoZSBjb21wb25lbnQgYWRkcyB0byB0aGUgbmV3IG1lbnUgaW5zdGFuY2UgYnkgYGFkZEl0ZW1gLlxuICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBvcmlnaW5hbCBtZW51IGluc3RhbmNlIHdpbGwgcmVtb3ZlIHRoZSBjb21wb25lbnRcbiAgICogYnkgY2FsbGluZyBgcmVtb3ZlQ2hpbGRgLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50XG4gICAqICAgICAgICBUaGUgaW5zdGFuY2Ugb2YgdGhlIGBNZW51SXRlbWBcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZChjb21wb25lbnQpIHtcbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbXBvbmVudCA9IHRoaXMuZ2V0Q2hpbGQoY29tcG9uZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJGb3JJdGVtKGNvbXBvbmVudCk7XG5cbiAgICBfQ29tcG9uZW50LnByb3RvdHlwZS5yZW1vdmVDaGlsZC5jYWxsKHRoaXMsIGNvbXBvbmVudCk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHtAbGluayBNZW51SXRlbX0gdG8gdGhlIG1lbnUuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30gY29tcG9uZW50XG4gICAqICAgICAgICBUaGUgbmFtZSBvciBpbnN0YW5jZSBvZiB0aGUgYE1lbnVJdGVtYCB0byBhZGQuXG4gICAqXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZEl0ZW0gPSBmdW5jdGlvbiBhZGRJdGVtKGNvbXBvbmVudCkge1xuICAgIHZhciBjaGlsZENvbXBvbmVudCA9IHRoaXMuYWRkQ2hpbGQoY29tcG9uZW50KTtcblxuICAgIGlmIChjaGlsZENvbXBvbmVudCkge1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyRm9ySXRlbShjaGlsZENvbXBvbmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBNZW51YHMgRE9NIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgdGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsJDEoKSB7XG4gICAgdmFyIGNvbnRlbnRFbFR5cGUgPSB0aGlzLm9wdGlvbnNfLmNvbnRlbnRFbFR5cGUgfHwgJ3VsJztcbiAgICB0aGlzLmNvbnRlbnRFbF8gPSBjcmVhdGVFbChjb250ZW50RWxUeXBlLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtbWVudS1jb250ZW50J1xuICAgIH0pO1xuICAgIHRoaXMuY29udGVudEVsXy5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbWVudScpO1xuXG4gICAgdmFyIGVsID0gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnZGl2Jywge1xuICAgICAgYXBwZW5kOiB0aGlzLmNvbnRlbnRFbF8sXG4gICAgICBjbGFzc05hbWU6ICd2anMtbWVudSdcbiAgICB9KTtcblxuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsXyk7IC8vIFByZXZlbnQgY2xpY2tzIGZyb20gYnViYmxpbmcgdXAuIE5lZWRlZCBmb3IgTWVudSBCdXR0b25zLFxuICAgIC8vIHdoZXJlIGEgY2xpY2sgb24gdGhlIHBhcmVudCBpcyBzaWduaWZpY2FudFxuXG4gICAgb24oZWwsICdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuICAgIHJldHVybiBlbDtcbiAgfTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5jb250ZW50RWxfID0gbnVsbDtcbiAgICB0aGlzLmJvdW5kSGFuZGxlQmx1cl8gPSBudWxsO1xuICAgIHRoaXMuYm91bmRIYW5kbGVUYXBDbGlja18gPSBudWxsO1xuXG4gICAgX0NvbXBvbmVudC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIGBNZW51SXRlbWAgbG9zZXMgZm9jdXMuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGJsdXJgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBibHVyXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7IC8vIENsb3NlIG1lbnUgcG9wdXAgd2hlbiBhIHVzZXIgY2xpY2tzIG91dHNpZGUgdGhlIG1lbnVcblxuICAgIGlmICghdGhpcy5jaGlsZHJlbigpLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmVsKCkgPT09IHJlbGF0ZWRUYXJnZXQ7XG4gICAgfSkpIHtcbiAgICAgIHZhciBidG4gPSB0aGlzLm1lbnVCdXR0b25fO1xuXG4gICAgICBpZiAoYnRuICYmIGJ0bi5idXR0b25QcmVzc2VkXyAmJiByZWxhdGVkVGFyZ2V0ICE9PSBidG4uZWwoKS5maXJzdENoaWxkKSB7XG4gICAgICAgIGJ0bi51bnByZXNzQnV0dG9uKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIGBNZW51SXRlbWAgZ2V0cyBjbGlja2VkIG9yIHRhcHBlZC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBgY2xpY2tgIG9yIGB0YXBgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBjbGljayx0YXBcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGFwQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVUYXBDbGljayhldmVudCkge1xuICAgIC8vIFVucHJlc3MgdGhlIGFzc29jaWF0ZWQgTWVudUJ1dHRvbiwgYW5kIG1vdmUgZm9jdXMgYmFjayB0byBpdFxuICAgIGlmICh0aGlzLm1lbnVCdXR0b25fKSB7XG4gICAgICB0aGlzLm1lbnVCdXR0b25fLnVucHJlc3NCdXR0b24oKTtcbiAgICAgIHZhciBjaGlsZENvbXBvbmVudHMgPSB0aGlzLmNoaWxkcmVuKCk7XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShjaGlsZENvbXBvbmVudHMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGZvdW5kQ29tcG9uZW50ID0gY2hpbGRDb21wb25lbnRzLmZpbHRlcihmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQuZWwoKSA9PT0gZXZlbnQudGFyZ2V0O1xuICAgICAgfSlbMF07XG5cbiAgICAgIGlmICghZm91bmRDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBkb24ndCBmb2N1cyBtZW51IGJ1dHRvbiBpZiBpdGVtIGlzIGEgY2FwdGlvbiBzZXR0aW5ncyBpdGVtXG4gICAgICAvLyBiZWNhdXNlIGZvY3VzIHdpbGwgbW92ZSBlbHNld2hlcmVcblxuXG4gICAgICBpZiAoZm91bmRDb21wb25lbnQubmFtZSgpICE9PSAnQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0nKSB7XG4gICAgICAgIHRoaXMubWVudUJ1dHRvbl8uZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBhIGBrZXlkb3duYCBldmVudCBvbiB0aGlzIG1lbnUuIFRoaXMgbGlzdGVuZXIgaXMgYWRkZWQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgQSBga2V5ZG93bmAgZXZlbnQgdGhhdCBoYXBwZW5lZCBvbiB0aGUgbWVudS5cbiAgICpcbiAgICogQGxpc3RlbnMga2V5ZG93blxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIC8vIExlZnQgYW5kIERvd24gQXJyb3dzXG4gICAgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ0xlZnQnKSB8fCBrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdEb3duJykpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMuc3RlcEZvcndhcmQoKTsgLy8gVXAgYW5kIFJpZ2h0IEFycm93c1xuICAgIH0gZWxzZSBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnUmlnaHQnKSB8fCBrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdVcCcpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLnN0ZXBCYWNrKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBNb3ZlIHRvIG5leHQgKGxvd2VyKSBtZW51IGl0ZW0gZm9yIGtleWJvYXJkIHVzZXJzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zdGVwRm9yd2FyZCA9IGZ1bmN0aW9uIHN0ZXBGb3J3YXJkKCkge1xuICAgIHZhciBzdGVwQ2hpbGQgPSAwO1xuXG4gICAgaWYgKHRoaXMuZm9jdXNlZENoaWxkXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdGVwQ2hpbGQgPSB0aGlzLmZvY3VzZWRDaGlsZF8gKyAxO1xuICAgIH1cblxuICAgIHRoaXMuZm9jdXMoc3RlcENoaWxkKTtcbiAgfVxuICAvKipcbiAgICogTW92ZSB0byBwcmV2aW91cyAoaGlnaGVyKSBtZW51IGl0ZW0gZm9yIGtleWJvYXJkIHVzZXJzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zdGVwQmFjayA9IGZ1bmN0aW9uIHN0ZXBCYWNrKCkge1xuICAgIHZhciBzdGVwQ2hpbGQgPSAwO1xuXG4gICAgaWYgKHRoaXMuZm9jdXNlZENoaWxkXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdGVwQ2hpbGQgPSB0aGlzLmZvY3VzZWRDaGlsZF8gLSAxO1xuICAgIH1cblxuICAgIHRoaXMuZm9jdXMoc3RlcENoaWxkKTtcbiAgfVxuICAvKipcbiAgICogU2V0IGZvY3VzIG9uIGEge0BsaW5rIE1lbnVJdGVtfSBpbiB0aGUgYE1lbnVgLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdHxzdHJpbmd9IFtpdGVtPTBdXG4gICAqICAgICAgICBJbmRleCBvZiBjaGlsZCBpdGVtIHNldCBmb2N1cyBvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZm9jdXMgPSBmdW5jdGlvbiBmb2N1cyhpdGVtKSB7XG4gICAgaWYgKGl0ZW0gPT09IHZvaWQgMCkge1xuICAgICAgaXRlbSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbigpLnNsaWNlKCk7XG4gICAgdmFyIGhhdmVUaXRsZSA9IGNoaWxkcmVuLmxlbmd0aCAmJiBjaGlsZHJlblswXS5jbGFzc05hbWUgJiYgL3Zqcy1tZW51LXRpdGxlLy50ZXN0KGNoaWxkcmVuWzBdLmNsYXNzTmFtZSk7XG5cbiAgICBpZiAoaGF2ZVRpdGxlKSB7XG4gICAgICBjaGlsZHJlbi5zaGlmdCgpO1xuICAgIH1cblxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoaXRlbSA8IDApIHtcbiAgICAgICAgaXRlbSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW0gPj0gY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIGl0ZW0gPSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmZvY3VzZWRDaGlsZF8gPSBpdGVtO1xuICAgICAgY2hpbGRyZW5baXRlbV0uZWxfLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBNZW51O1xufShDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ01lbnUnLCBNZW51KTtcblxuLyoqXG4gKiBBIGBNZW51QnV0dG9uYCBjbGFzcyBmb3IgYW55IHBvcHVwIHtAbGluayBNZW51fS5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgTWVudUJ1dHRvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW51QnV0dG9uLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIE1lbnVCdXR0b24ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5tZW51QnV0dG9uXyA9IG5ldyBCdXR0b24ocGxheWVyLCBvcHRpb25zKTtcblxuICAgIF90aGlzLm1lbnVCdXR0b25fLmNvbnRyb2xUZXh0KF90aGlzLmNvbnRyb2xUZXh0Xyk7XG5cbiAgICBfdGhpcy5tZW51QnV0dG9uXy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLWhhc3BvcHVwJywgJ3RydWUnKTsgLy8gQWRkIGJ1aWxkQ1NTQ2xhc3MgdmFsdWVzIHRvIHRoZSBidXR0b24sIG5vdCB0aGUgd3JhcHBlclxuXG5cbiAgICB2YXIgYnV0dG9uQ2xhc3MgPSBCdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MoKTtcbiAgICBfdGhpcy5tZW51QnV0dG9uXy5lbF8uY2xhc3NOYW1lID0gX3RoaXMuYnVpbGRDU1NDbGFzcygpICsgJyAnICsgYnV0dG9uQ2xhc3M7XG5cbiAgICBfdGhpcy5tZW51QnV0dG9uXy5yZW1vdmVDbGFzcygndmpzLWNvbnRyb2wnKTtcblxuICAgIF90aGlzLmFkZENoaWxkKF90aGlzLm1lbnVCdXR0b25fKTtcblxuICAgIF90aGlzLnVwZGF0ZSgpO1xuXG4gICAgX3RoaXMuZW5hYmxlZF8gPSB0cnVlO1xuXG4gICAgX3RoaXMub24oX3RoaXMubWVudUJ1dHRvbl8sICd0YXAnLCBfdGhpcy5oYW5kbGVDbGljayk7XG5cbiAgICBfdGhpcy5vbihfdGhpcy5tZW51QnV0dG9uXywgJ2NsaWNrJywgX3RoaXMuaGFuZGxlQ2xpY2spO1xuXG4gICAgX3RoaXMub24oX3RoaXMubWVudUJ1dHRvbl8sICdrZXlkb3duJywgX3RoaXMuaGFuZGxlS2V5RG93bik7XG5cbiAgICBfdGhpcy5vbihfdGhpcy5tZW51QnV0dG9uXywgJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5hZGRDbGFzcygndmpzLWhvdmVyJyk7XG5cbiAgICAgIF90aGlzLm1lbnUuc2hvdygpO1xuXG4gICAgICBvbihkb2N1bWVudCwgJ2tleXVwJywgYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMuaGFuZGxlTWVudUtleVVwKSk7XG4gICAgfSk7XG5cbiAgICBfdGhpcy5vbignbW91c2VsZWF2ZScsIF90aGlzLmhhbmRsZU1vdXNlTGVhdmUpO1xuXG4gICAgX3RoaXMub24oJ2tleWRvd24nLCBfdGhpcy5oYW5kbGVTdWJtZW51S2V5RG93bik7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgbWVudSBiYXNlZCBvbiB0aGUgY3VycmVudCBzdGF0ZSBvZiBpdHMgaXRlbXMuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IE1lbnVCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIG1lbnUgPSB0aGlzLmNyZWF0ZU1lbnUoKTtcblxuICAgIGlmICh0aGlzLm1lbnUpIHtcbiAgICAgIHRoaXMubWVudS5kaXNwb3NlKCk7XG4gICAgICB0aGlzLnJlbW92ZUNoaWxkKHRoaXMubWVudSk7XG4gICAgfVxuXG4gICAgdGhpcy5tZW51ID0gbWVudTtcbiAgICB0aGlzLmFkZENoaWxkKG1lbnUpO1xuICAgIC8qKlxuICAgICAqIFRyYWNrIHRoZSBzdGF0ZSBvZiB0aGUgbWVudSBidXR0b25cbiAgICAgKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmJ1dHRvblByZXNzZWRfID0gZmFsc2U7XG4gICAgdGhpcy5tZW51QnV0dG9uXy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG5cbiAgICBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA8PSB0aGlzLmhpZGVUaHJlc2hvbGRfKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIG1lbnUgYW5kIGFkZCBhbGwgaXRlbXMgdG8gaXQuXG4gICAqXG4gICAqIEByZXR1cm4ge01lbnV9XG4gICAqICAgICAgICAgVGhlIGNvbnN0cnVjdGVkIG1lbnVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlTWVudSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbnUoKSB7XG4gICAgdmFyIG1lbnUgPSBuZXcgTWVudSh0aGlzLnBsYXllcl8sIHtcbiAgICAgIG1lbnVCdXR0b246IHRoaXNcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBIaWRlIHRoZSBtZW51IGlmIHRoZSBudW1iZXIgb2YgaXRlbXMgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoaXMgdGhyZXNob2xkLiBUaGlzIGRlZmF1bHRzXG4gICAgICogdG8gMCBhbmQgd2hlbmV2ZXIgd2UgYWRkIGl0ZW1zIHdoaWNoIGNhbiBiZSBoaWRkZW4gdG8gdGhlIG1lbnUgd2UnbGwgaW5jcmVtZW50IGl0LiBXZSBsaXN0XG4gICAgICogaXQgaGVyZSBiZWNhdXNlIGV2ZXJ5IHRpbWUgd2UgcnVuIGBjcmVhdGVNZW51YCB3ZSBuZWVkIHRvIHJlc2V0IHRoZSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuXG4gICAgdGhpcy5oaWRlVGhyZXNob2xkXyA9IDA7IC8vIEFkZCBhIHRpdGxlIGxpc3QgaXRlbSB0byB0aGUgdG9wXG5cbiAgICBpZiAodGhpcy5vcHRpb25zXy50aXRsZSkge1xuICAgICAgdmFyIHRpdGxlRWwgPSBjcmVhdGVFbCgnbGknLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3Zqcy1tZW51LXRpdGxlJyxcbiAgICAgICAgaW5uZXJIVE1MOiB0b1RpdGxlQ2FzZSh0aGlzLm9wdGlvbnNfLnRpdGxlKSxcbiAgICAgICAgdGFiSW5kZXg6IC0xXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaGlkZVRocmVzaG9sZF8gKz0gMTtcbiAgICAgIHZhciB0aXRsZUNvbXBvbmVudCA9IG5ldyBDb21wb25lbnQodGhpcy5wbGF5ZXJfLCB7XG4gICAgICAgIGVsOiB0aXRsZUVsXG4gICAgICB9KTtcbiAgICAgIG1lbnUuYWRkSXRlbSh0aXRsZUNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5pdGVtcyA9IHRoaXMuY3JlYXRlSXRlbXMoKTtcblxuICAgIGlmICh0aGlzLml0ZW1zKSB7XG4gICAgICAvLyBBZGQgbWVudSBpdGVtcyB0byB0aGUgbWVudVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1lbnUuYWRkSXRlbSh0aGlzLml0ZW1zW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWVudTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBsaXN0IG9mIG1lbnUgaXRlbXMuIFNwZWNpZmljIHRvIGVhY2ggc3ViY2xhc3MuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVJdGVtcyA9IGZ1bmN0aW9uIGNyZWF0ZUl0ZW1zKCkge31cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYE1lbnVCdXR0b25zYHMgRE9NIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCBnZXRzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZFdyYXBwZXJDU1NDbGFzcygpXG4gICAgfSwge30pO1xuICB9XG4gIC8qKlxuICAgKiBBbGxvdyBzdWIgY29tcG9uZW50cyB0byBzdGFjayBDU1MgY2xhc3MgbmFtZXMgZm9yIHRoZSB3cmFwcGVyIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBjb25zdHJ1Y3RlZCB3cmFwcGVyIERPTSBgY2xhc3NOYW1lYFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5idWlsZFdyYXBwZXJDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkV3JhcHBlckNTU0NsYXNzKCkge1xuICAgIHZhciBtZW51QnV0dG9uQ2xhc3MgPSAndmpzLW1lbnUtYnV0dG9uJzsgLy8gSWYgdGhlIGlubGluZSBvcHRpb24gaXMgcGFzc2VkLCB3ZSB3YW50IHRvIHVzZSBkaWZmZXJlbnQgc3R5bGVzIGFsdG9nZXRoZXIuXG5cbiAgICBpZiAodGhpcy5vcHRpb25zXy5pbmxpbmUgPT09IHRydWUpIHtcbiAgICAgIG1lbnVCdXR0b25DbGFzcyArPSAnLWlubGluZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbnVCdXR0b25DbGFzcyArPSAnLXBvcHVwJztcbiAgICB9IC8vIFRPRE86IEZpeCB0aGUgQ1NTIHNvIHRoYXQgdGhpcyBpc24ndCBuZWNlc3NhcnlcblxuXG4gICAgdmFyIGJ1dHRvbkNsYXNzID0gQnV0dG9uLnByb3RvdHlwZS5idWlsZENTU0NsYXNzKCk7XG4gICAgcmV0dXJuIFwidmpzLW1lbnUtYnV0dG9uIFwiICsgbWVudUJ1dHRvbkNsYXNzICsgXCIgXCIgKyBidXR0b25DbGFzcyArIFwiIFwiICsgX0NvbXBvbmVudC5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHZhciBtZW51QnV0dG9uQ2xhc3MgPSAndmpzLW1lbnUtYnV0dG9uJzsgLy8gSWYgdGhlIGlubGluZSBvcHRpb24gaXMgcGFzc2VkLCB3ZSB3YW50IHRvIHVzZSBkaWZmZXJlbnQgc3R5bGVzIGFsdG9nZXRoZXIuXG5cbiAgICBpZiAodGhpcy5vcHRpb25zXy5pbmxpbmUgPT09IHRydWUpIHtcbiAgICAgIG1lbnVCdXR0b25DbGFzcyArPSAnLWlubGluZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbnVCdXR0b25DbGFzcyArPSAnLXBvcHVwJztcbiAgICB9XG5cbiAgICByZXR1cm4gXCJ2anMtbWVudS1idXR0b24gXCIgKyBtZW51QnV0dG9uQ2xhc3MgKyBcIiBcIiArIF9Db21wb25lbnQucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgbG9jYWxpemVkIGNvbnRyb2wgdGV4dCB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgYWNjZXNzaWJpbGl0eS5cbiAgICpcbiAgICogPiBOT1RFOiBUaGlzIHdpbGwgY29tZSBmcm9tIHRoZSBpbnRlcm5hbCBgbWVudUJ1dHRvbl9gIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGV4dF1cbiAgICogICAgICAgIENvbnRyb2wgdGV4dCBmb3IgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBbZWw9dGhpcy5tZW51QnV0dG9uXy5lbCgpXVxuICAgKiAgICAgICAgRWxlbWVudCB0byBzZXQgdGhlIHRpdGxlIG9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgLSBUaGUgY29udHJvbCB0ZXh0IHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb250cm9sVGV4dCA9IGZ1bmN0aW9uIGNvbnRyb2xUZXh0KHRleHQsIGVsKSB7XG4gICAgaWYgKGVsID09PSB2b2lkIDApIHtcbiAgICAgIGVsID0gdGhpcy5tZW51QnV0dG9uXy5lbCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm1lbnVCdXR0b25fLmNvbnRyb2xUZXh0KHRleHQsIGVsKTtcbiAgfVxuICAvKipcbiAgICogRGlzcG9zZSBvZiB0aGUgYG1lbnUtYnV0dG9uYCBhbmQgYWxsIGNoaWxkIGNvbXBvbmVudHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuaGFuZGxlTW91c2VMZWF2ZSgpO1xuXG4gICAgX0NvbXBvbmVudC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYSBjbGljayBvbiBhIGBNZW51QnV0dG9uYC5cbiAgICogU2VlIHtAbGluayBDbGlja2FibGVDb21wb25lbnQjaGFuZGxlQ2xpY2t9IGZvciBpbnN0YW5jZXMgd2hlcmUgdGhpcyBpcyBjYWxsZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYGtleWRvd25gLCBgdGFwYCwgb3IgYGNsaWNrYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRhcFxuICAgKiBAbGlzdGVucyBjbGlja1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuYnV0dG9uUHJlc3NlZF8pIHtcbiAgICAgIHRoaXMudW5wcmVzc0J1dHRvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByZXNzQnV0dG9uKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYG1vdXNlbGVhdmVgIGZvciBgTWVudUJ1dHRvbmAuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBUaGUgYG1vdXNlbGVhdmVgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBtb3VzZWxlYXZlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1vdXNlTGVhdmUgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZUxlYXZlKGV2ZW50KSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWhvdmVyJyk7XG4gICAgb2ZmKGRvY3VtZW50LCAna2V5dXAnLCBiaW5kKHRoaXMsIHRoaXMuaGFuZGxlTWVudUtleVVwKSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgZm9jdXMgdG8gdGhlIGFjdHVhbCBidXR0b24sIG5vdCB0byB0aGlzIGVsZW1lbnRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZm9jdXMgPSBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICB0aGlzLm1lbnVCdXR0b25fLmZvY3VzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgZm9jdXMgZnJvbSB0aGUgYWN0dWFsIGJ1dHRvbiwgbm90IHRoaXMgZWxlbWVudFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5ibHVyID0gZnVuY3Rpb24gYmx1cigpIHtcbiAgICB0aGlzLm1lbnVCdXR0b25fLmJsdXIoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHRhYiwgZXNjYXBlLCBkb3duIGFycm93LCBhbmQgdXAgYXJyb3cga2V5cyBmb3IgYE1lbnVCdXR0b25gLiBTZWVcbiAgICoge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudCNoYW5kbGVLZXlEb3dufSBmb3IgaW5zdGFuY2VzIHdoZXJlIHRoaXMgaXMgY2FsbGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMga2V5ZG93blxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIC8vIEVzY2FwZSBvciBUYWIgdW5wcmVzcyB0aGUgJ2J1dHRvbidcbiAgICBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnRXNjJykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnVGFiJykpIHtcbiAgICAgIGlmICh0aGlzLmJ1dHRvblByZXNzZWRfKSB7XG4gICAgICAgIHRoaXMudW5wcmVzc0J1dHRvbigpO1xuICAgICAgfSAvLyBEb24ndCBwcmV2ZW50RGVmYXVsdCBmb3IgVGFiIGtleSAtIHdlIHN0aWxsIHdhbnQgdG8gbG9zZSBmb2N1c1xuXG5cbiAgICAgIGlmICgha2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnVGFiJykpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gU2V0IGZvY3VzIGJhY2sgdG8gdGhlIG1lbnUgYnV0dG9uJ3MgYnV0dG9uXG5cbiAgICAgICAgdGhpcy5tZW51QnV0dG9uXy5mb2N1cygpO1xuICAgICAgfSAvLyBVcCBBcnJvdyBvciBEb3duIEFycm93IGFsc28gJ3ByZXNzJyB0aGUgYnV0dG9uIHRvIG9wZW4gdGhlIG1lbnVcblxuICAgIH0gZWxzZSBpZiAoa2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCAnVXAnKSB8fCBrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdEb3duJykpIHtcbiAgICAgIGlmICghdGhpcy5idXR0b25QcmVzc2VkXykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnByZXNzQnV0dG9uKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYSBga2V5dXBgIGV2ZW50IG9uIGEgYE1lbnVCdXR0b25gLiBUaGUgbGlzdGVuZXIgZm9yIHRoaXMgaXMgYWRkZWQgaW5cbiAgICogdGhlIGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgS2V5IHByZXNzIGV2ZW50XG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleXVwXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZU1lbnVLZXlVcCA9IGZ1bmN0aW9uIGhhbmRsZU1lbnVLZXlVcChldmVudCkge1xuICAgIC8vIEVzY2FwZSBoaWRlcyBwb3B1cCBtZW51XG4gICAgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ0VzYycpIHx8IGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ1RhYicpKSB7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtaG92ZXInKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIG5hbWUgbm93IGRlbGVnYXRlcyB0byBgaGFuZGxlU3VibWVudUtleURvd25gLiBUaGlzIG1lYW5zXG4gICAqIGFueW9uZSBjYWxsaW5nIGBoYW5kbGVTdWJtZW51S2V5UHJlc3NgIHdpbGwgbm90IHNlZSB0aGVpciBtZXRob2QgY2FsbHNcbiAgICogc3RvcCB3b3JraW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVTdWJtZW51S2V5UHJlc3MgPSBmdW5jdGlvbiBoYW5kbGVTdWJtZW51S2V5UHJlc3MoZXZlbnQpIHtcbiAgICB0aGlzLmhhbmRsZVN1Ym1lbnVLZXlEb3duKGV2ZW50KTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGEgYGtleWRvd25gIGV2ZW50IG9uIGEgc3ViLW1lbnUuIFRoZSBsaXN0ZW5lciBmb3IgdGhpcyBpcyBhZGRlZCBpblxuICAgKiB0aGUgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICBLZXkgcHJlc3MgZXZlbnRcbiAgICpcbiAgICogQGxpc3RlbnMga2V5ZG93blxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVTdWJtZW51S2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZVN1Ym1lbnVLZXlEb3duKGV2ZW50KSB7XG4gICAgLy8gRXNjYXBlIG9yIFRhYiB1bnByZXNzIHRoZSAnYnV0dG9uJ1xuICAgIGlmIChrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdFc2MnKSB8fCBrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdUYWInKSkge1xuICAgICAgaWYgKHRoaXMuYnV0dG9uUHJlc3NlZF8pIHtcbiAgICAgICAgdGhpcy51bnByZXNzQnV0dG9uKCk7XG4gICAgICB9IC8vIERvbid0IHByZXZlbnREZWZhdWx0IGZvciBUYWIga2V5IC0gd2Ugc3RpbGwgd2FudCB0byBsb3NlIGZvY3VzXG5cblxuICAgICAgaWYgKCFrZXljb2RlLmlzRXZlbnRLZXkoZXZlbnQsICdUYWInKSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBTZXQgZm9jdXMgYmFjayB0byB0aGUgbWVudSBidXR0b24ncyBidXR0b25cblxuICAgICAgICB0aGlzLm1lbnVCdXR0b25fLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBQdXQgdGhlIGN1cnJlbnQgYE1lbnVCdXR0b25gIGludG8gYSBwcmVzc2VkIHN0YXRlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcmVzc0J1dHRvbiA9IGZ1bmN0aW9uIHByZXNzQnV0dG9uKCkge1xuICAgIGlmICh0aGlzLmVuYWJsZWRfKSB7XG4gICAgICB0aGlzLmJ1dHRvblByZXNzZWRfID0gdHJ1ZTtcbiAgICAgIHRoaXMubWVudS5zaG93KCk7XG4gICAgICB0aGlzLm1lbnUubG9ja1Nob3dpbmcoKTtcbiAgICAgIHRoaXMubWVudUJ1dHRvbl8uZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7IC8vIHNldCB0aGUgZm9jdXMgaW50byB0aGUgc3VibWVudSwgZXhjZXB0IG9uIGlPUyB3aGVyZSBpdCBpcyByZXN1bHRpbmcgaW5cbiAgICAgIC8vIHVuZGVzaXJlZCBzY3JvbGxpbmcgYmVoYXZpb3Igd2hlbiB0aGUgcGxheWVyIGlzIGluIGFuIGlmcmFtZVxuXG4gICAgICBpZiAoSVNfSU9TICYmIGlzSW5GcmFtZSgpKSB7XG4gICAgICAgIC8vIFJldHVybiBlYXJseSBzbyB0aGF0IHRoZSBtZW51IGlzbid0IGZvY3VzZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1lbnUuZm9jdXMoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFRha2UgdGhlIGN1cnJlbnQgYE1lbnVCdXR0b25gIG91dCBvZiBhIHByZXNzZWQgc3RhdGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVucHJlc3NCdXR0b24gPSBmdW5jdGlvbiB1bnByZXNzQnV0dG9uKCkge1xuICAgIGlmICh0aGlzLmVuYWJsZWRfKSB7XG4gICAgICB0aGlzLmJ1dHRvblByZXNzZWRfID0gZmFsc2U7XG4gICAgICB0aGlzLm1lbnUudW5sb2NrU2hvd2luZygpO1xuICAgICAgdGhpcy5tZW51LmhpZGUoKTtcbiAgICAgIHRoaXMubWVudUJ1dHRvbl8uZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgYE1lbnVCdXR0b25gLiBEb24ndCBhbGxvdyBpdCB0byBiZSBjbGlja2VkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICB0aGlzLnVucHJlc3NCdXR0b24oKTtcbiAgICB0aGlzLmVuYWJsZWRfID0gZmFsc2U7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLWRpc2FibGVkJyk7XG4gICAgdGhpcy5tZW51QnV0dG9uXy5kaXNhYmxlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGUgYE1lbnVCdXR0b25gLiBBbGxvdyBpdCB0byBiZSBjbGlja2VkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgdGhpcy5lbmFibGVkXyA9IHRydWU7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWRpc2FibGVkJyk7XG4gICAgdGhpcy5tZW51QnV0dG9uXy5lbmFibGUoKTtcbiAgfTtcblxuICByZXR1cm4gTWVudUJ1dHRvbjtcbn0oQ29tcG9uZW50KTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdNZW51QnV0dG9uJywgTWVudUJ1dHRvbik7XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGJ1dHRvbnMgdGhhdCB0b2dnbGUgc3BlY2lmaWMgIHRyYWNrIHR5cGVzIChlLmcuIHN1YnRpdGxlcykuXG4gKlxuICogQGV4dGVuZHMgTWVudUJ1dHRvblxuICovXG5cbnZhciBUcmFja0J1dHRvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01lbnVCdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhY2tCdXR0b24sIF9NZW51QnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFRyYWNrQnV0dG9uKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciB0cmFja3MgPSBvcHRpb25zLnRyYWNrcztcbiAgICBfdGhpcyA9IF9NZW51QnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgaWYgKF90aGlzLml0ZW1zLmxlbmd0aCA8PSAxKSB7XG4gICAgICBfdGhpcy5oaWRlKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0cmFja3MpIHtcbiAgICAgIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgdXBkYXRlSGFuZGxlciA9IGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLnVwZGF0ZSk7XG4gICAgdHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoJ3JlbW92ZXRyYWNrJywgdXBkYXRlSGFuZGxlcik7XG4gICAgdHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgdXBkYXRlSGFuZGxlcik7XG5cbiAgICBfdGhpcy5wbGF5ZXJfLm9uKCdyZWFkeScsIHVwZGF0ZUhhbmRsZXIpO1xuXG4gICAgX3RoaXMucGxheWVyXy5vbignZGlzcG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZW1vdmV0cmFjaycsIHVwZGF0ZUhhbmRsZXIpO1xuICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgdXBkYXRlSGFuZGxlcik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gVHJhY2tCdXR0b247XG59KE1lbnVCdXR0b24pO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1RyYWNrQnV0dG9uJywgVHJhY2tCdXR0b24pO1xuXG4vKipcbiAqIEBmaWxlIG1lbnUta2V5cy5qc1xuICovXG5cbi8qKlxuICAqIEFsbCBrZXlzIHVzZWQgZm9yIG9wZXJhdGlvbiBvZiBhIG1lbnUgKGBNZW51QnV0dG9uYCwgYE1lbnVgLCBhbmQgYE1lbnVJdGVtYClcbiAgKiBOb3RlIHRoYXQgJ0VudGVyJyBhbmQgJ1NwYWNlJyBhcmUgbm90IGluY2x1ZGVkIGhlcmUgKG90aGVyd2lzZSB0aGV5IHdvdWxkXG4gICogcHJldmVudCB0aGUgYE1lbnVCdXR0b25gIGFuZCBgTWVudUl0ZW1gIGZyb20gYmVpbmcga2V5Ym9hcmQtY2xpY2thYmxlKVxuICAqIEB0eXBlZGVmIE1lbnVLZXlzXG4gICogQGFycmF5XG4gICovXG52YXIgTWVudUtleXMgPSBbJ1RhYicsICdFc2MnLCAnVXAnLCAnRG93bicsICdSaWdodCcsICdMZWZ0J107XG5cbi8qKlxuICogVGhlIGNvbXBvbmVudCBmb3IgYSBtZW51IGl0ZW0uIGA8bGk+YFxuICpcbiAqIEBleHRlbmRzIENsaWNrYWJsZUNvbXBvbmVudFxuICovXG5cbnZhciBNZW51SXRlbSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NsaWNrYWJsZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW51SXRlbSwgX0NsaWNrYWJsZUNvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gTWVudUl0ZW0ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ2xpY2thYmxlQ29tcG9uZW50LmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLnNlbGVjdGFibGUgPSBvcHRpb25zLnNlbGVjdGFibGU7XG4gICAgX3RoaXMuaXNTZWxlY3RlZF8gPSBvcHRpb25zLnNlbGVjdGVkIHx8IGZhbHNlO1xuICAgIF90aGlzLm11bHRpU2VsZWN0YWJsZSA9IG9wdGlvbnMubXVsdGlTZWxlY3RhYmxlO1xuXG4gICAgX3RoaXMuc2VsZWN0ZWQoX3RoaXMuaXNTZWxlY3RlZF8pO1xuXG4gICAgaWYgKF90aGlzLnNlbGVjdGFibGUpIHtcbiAgICAgIGlmIChfdGhpcy5tdWx0aVNlbGVjdGFibGUpIHtcbiAgICAgICAgX3RoaXMuZWxfLnNldEF0dHJpYnV0ZSgncm9sZScsICdtZW51aXRlbWNoZWNrYm94Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdyb2xlJywgJ21lbnVpdGVtcmFkaW8nKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMuZWxfLnNldEF0dHJpYnV0ZSgncm9sZScsICdtZW51aXRlbScpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgTWVudUl0ZW0ncyBET00gZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3R5cGU9bGldXG4gICAqICAgICAgICBFbGVtZW50J3Mgbm9kZSB0eXBlLCBub3QgYWN0dWFsbHkgdXNlZCwgYWx3YXlzIHNldCB0byBgbGlgLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BzPXt9XVxuICAgKiAgICAgICAgQW4gb2JqZWN0IG9mIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbYXR0cnM9e31dXG4gICAqICAgICAgICBBbiBvYmplY3Qgb2YgYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gTWVudUl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKHR5cGUsIHByb3BzLCBhdHRycykge1xuICAgIC8vIFRoZSBjb250cm9sIGlzIHRleHR1YWwsIG5vdCBqdXN0IGFuIGljb25cbiAgICB0aGlzLm5vbkljb25Db250cm9sID0gdHJ1ZTtcbiAgICByZXR1cm4gX0NsaWNrYWJsZUNvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnbGknLCBhc3NpZ24oe1xuICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUtaXRlbScsXG4gICAgICBpbm5lckhUTUw6IFwiPHNwYW4gY2xhc3M9XFxcInZqcy1tZW51LWl0ZW0tdGV4dFxcXCI+XCIgKyB0aGlzLmxvY2FsaXplKHRoaXMub3B0aW9uc18ubGFiZWwpICsgXCI8L3NwYW4+XCIsXG4gICAgICB0YWJJbmRleDogLTFcbiAgICB9LCBwcm9wcyksIGF0dHJzKTtcbiAgfVxuICAvKipcbiAgICogSWdub3JlIGtleXMgd2hpY2ggYXJlIHVzZWQgYnkgdGhlIG1lbnUsIGJ1dCBwYXNzIGFueSBvdGhlciBvbmVzIHVwLiBTZWVcbiAgICoge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudCNoYW5kbGVLZXlEb3dufSBmb3IgaW5zdGFuY2VzIHdoZXJlIHRoaXMgaXMgY2FsbGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMga2V5ZG93blxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIGlmICghTWVudUtleXMuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5Y29kZS5pc0V2ZW50S2V5KGV2ZW50LCBrZXkpO1xuICAgIH0pKSB7XG4gICAgICAvLyBQYXNzIGtleWRvd24gaGFuZGxpbmcgdXAgZm9yIHVudXNlZCBrZXlzXG4gICAgICBfQ2xpY2thYmxlQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVLZXlEb3duLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQW55IGNsaWNrIG9uIGEgYE1lbnVJdGVtYCBwdXRzIGl0IGludG8gdGhlIHNlbGVjdGVkIHN0YXRlLlxuICAgKiBTZWUge0BsaW5rIENsaWNrYWJsZUNvbXBvbmVudCNoYW5kbGVDbGlja30gZm9yIGluc3RhbmNlcyB3aGVyZSB0aGlzIGlzIGNhbGxlZC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAsIGB0YXBgLCBvciBgY2xpY2tgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmVcbiAgICogICAgICAgIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgdGFwXG4gICAqIEBsaXN0ZW5zIGNsaWNrXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICB0aGlzLnNlbGVjdGVkKHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIHN0YXRlIGZvciB0aGlzIG1lbnUgaXRlbSBhcyBzZWxlY3RlZCBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2VsZWN0ZWRcbiAgICogICAgICAgIGlmIHRoZSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQgb3Igbm90XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNlbGVjdGVkID0gZnVuY3Rpb24gc2VsZWN0ZWQoX3NlbGVjdGVkKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0YWJsZSkge1xuICAgICAgaWYgKF9zZWxlY3RlZCkge1xuICAgICAgICB0aGlzLmFkZENsYXNzKCd2anMtc2VsZWN0ZWQnKTtcbiAgICAgICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLWNoZWNrZWQnLCAndHJ1ZScpOyAvLyBhcmlhLWNoZWNrZWQgaXNuJ3QgZnVsbHkgc3VwcG9ydGVkIGJ5IGJyb3dzZXJzL3NjcmVlbiByZWFkZXJzLFxuICAgICAgICAvLyBzbyBpbmRpY2F0ZSBzZWxlY3RlZCBzdGF0ZSB0byBzY3JlZW4gcmVhZGVyIGluIHRoZSBjb250cm9sIHRleHQuXG5cbiAgICAgICAgdGhpcy5jb250cm9sVGV4dCgnLCBzZWxlY3RlZCcpO1xuICAgICAgICB0aGlzLmlzU2VsZWN0ZWRfID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1zZWxlY3RlZCcpO1xuICAgICAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtY2hlY2tlZCcsICdmYWxzZScpOyAvLyBJbmRpY2F0ZSB1bi1zZWxlY3RlZCBzdGF0ZSB0byBzY3JlZW4gcmVhZGVyXG5cbiAgICAgICAgdGhpcy5jb250cm9sVGV4dCgnJyk7XG4gICAgICAgIHRoaXMuaXNTZWxlY3RlZF8gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIE1lbnVJdGVtO1xufShDbGlja2FibGVDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ01lbnVJdGVtJywgTWVudUl0ZW0pO1xuXG4vKipcbiAqIFRoZSBzcGVjaWZpYyBtZW51IGl0ZW0gdHlwZSBmb3Igc2VsZWN0aW5nIGEgbGFuZ3VhZ2Ugd2l0aGluIGEgdGV4dCB0cmFjayBraW5kXG4gKlxuICogQGV4dGVuZHMgTWVudUl0ZW1cbiAqL1xuXG52YXIgVGV4dFRyYWNrTWVudUl0ZW0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9NZW51SXRlbSkge1xuICBfaW5oZXJpdHNMb29zZShUZXh0VHJhY2tNZW51SXRlbSwgX01lbnVJdGVtKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFRleHRUcmFja01lbnVJdGVtKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciB0cmFjayA9IG9wdGlvbnMudHJhY2s7XG4gICAgdmFyIHRyYWNrcyA9IHBsYXllci50ZXh0VHJhY2tzKCk7IC8vIE1vZGlmeSBvcHRpb25zIGZvciBwYXJlbnQgTWVudUl0ZW0gY2xhc3MncyBpbml0LlxuXG4gICAgb3B0aW9ucy5sYWJlbCA9IHRyYWNrLmxhYmVsIHx8IHRyYWNrLmxhbmd1YWdlIHx8ICdVbmtub3duJztcbiAgICBvcHRpb25zLnNlbGVjdGVkID0gdHJhY2subW9kZSA9PT0gJ3Nob3dpbmcnO1xuICAgIF90aGlzID0gX01lbnVJdGVtLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLnRyYWNrID0gdHJhY2s7IC8vIERldGVybWluZSB0aGUgcmVsZXZhbnQga2luZChzKSBvZiB0cmFja3MgZm9yIHRoaXMgY29tcG9uZW50IGFuZCBmaWx0ZXJcbiAgICAvLyBvdXQgZW1wdHkga2luZHMuXG5cbiAgICBfdGhpcy5raW5kcyA9IChvcHRpb25zLmtpbmRzIHx8IFtvcHRpb25zLmtpbmQgfHwgX3RoaXMudHJhY2sua2luZF0pLmZpbHRlcihCb29sZWFuKTtcblxuICAgIHZhciBjaGFuZ2VIYW5kbGVyID0gZnVuY3Rpb24gY2hhbmdlSGFuZGxlcigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5oYW5kbGVUcmFja3NDaGFuZ2UuYXBwbHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIGFyZ3MpO1xuICAgIH07XG5cbiAgICB2YXIgc2VsZWN0ZWRMYW5ndWFnZUNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbiBzZWxlY3RlZExhbmd1YWdlQ2hhbmdlSGFuZGxlcigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmhhbmRsZVNlbGVjdGVkTGFuZ3VhZ2VDaGFuZ2UuYXBwbHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIGFyZ3MpO1xuICAgIH07XG5cbiAgICBwbGF5ZXIub24oWydsb2Fkc3RhcnQnLCAndGV4dHRyYWNrY2hhbmdlJ10sIGNoYW5nZUhhbmRsZXIpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyKTtcbiAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0ZWRsYW5ndWFnZWNoYW5nZScsIHNlbGVjdGVkTGFuZ3VhZ2VDaGFuZ2VIYW5kbGVyKTtcblxuICAgIF90aGlzLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgcGxheWVyLm9mZihbJ2xvYWRzdGFydCcsICd0ZXh0dHJhY2tjaGFuZ2UnXSwgY2hhbmdlSGFuZGxlcik7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgY2hhbmdlSGFuZGxlcik7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2VsZWN0ZWRsYW5ndWFnZWNoYW5nZScsIHNlbGVjdGVkTGFuZ3VhZ2VDaGFuZ2VIYW5kbGVyKTtcbiAgICB9KTsgLy8gaU9TNyBkb2Vzbid0IGRpc3BhdGNoIGNoYW5nZSBldmVudHMgdG8gVGV4dFRyYWNrTGlzdHMgd2hlbiBhblxuICAgIC8vIGFzc29jaWF0ZWQgdHJhY2sncyBtb2RlIGNoYW5nZXMuIFdpdGhvdXQgc29tZXRoaW5nIGxpa2VcbiAgICAvLyBPYmplY3Qub2JzZXJ2ZSgpIChhbHNvIG5vdCBwcmVzZW50IG9uIGlPUzcpLCBpdCdzIG5vdFxuICAgIC8vIHBvc3NpYmxlIHRvIGRldGVjdCBjaGFuZ2VzIHRvIHRoZSBtb2RlIGF0dHJpYnV0ZSBhbmQgcG9seWZpbGxcbiAgICAvLyB0aGUgY2hhbmdlIGV2ZW50LiBBcyBhIHBvb3Igc3Vic3RpdHV0ZSwgd2UgbWFudWFsbHkgZGlzcGF0Y2hcbiAgICAvLyBjaGFuZ2UgZXZlbnRzIHdoZW5ldmVyIHRoZSBjb250cm9scyBtb2RpZnkgdGhlIG1vZGUuXG5cblxuICAgIGlmICh0cmFja3Mub25jaGFuZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGV2ZW50O1xuXG4gICAgICBfdGhpcy5vbihbJ3RhcCcsICdjbGljayddLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93JDEuRXZlbnQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gQW5kcm9pZCAyLjMgdGhyb3dzIGFuIElsbGVnYWwgQ29uc3RydWN0b3IgZXJyb3IgZm9yIHdpbmRvdy5FdmVudFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBldmVudCA9IG5ldyB3aW5kb3ckMS5FdmVudCgnY2hhbmdlJyk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7Ly8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgICAgIGV2ZW50LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFja3MuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICB9KTtcbiAgICB9IC8vIHNldCB0aGUgZGVmYXVsdCBzdGF0ZSBiYXNlZCBvbiBjdXJyZW50IHRyYWNrc1xuXG5cbiAgICBfdGhpcy5oYW5kbGVUcmFja3NDaGFuZ2UoKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCB3aGVuIGFuIGBUZXh0VHJhY2tNZW51SXRlbWAgaXMgXCJjbGlja2VkXCIuIFNlZVxuICAgKiB7QGxpbmsgQ2xpY2thYmxlQ29tcG9uZW50fSBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IGEgY2xpY2sgY2FuIGJlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCwgYHRhcGAsIG9yIGBjbGlja2AgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZVxuICAgKiAgICAgICAgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyB0YXBcbiAgICogQGxpc3RlbnMgY2xpY2tcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVGV4dFRyYWNrTWVudUl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIHJlZmVyZW5jZVRyYWNrID0gdGhpcy50cmFjaztcbiAgICB2YXIgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtcblxuICAgIF9NZW51SXRlbS5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzLCBldmVudCk7XG5cbiAgICBpZiAoIXRyYWNrcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07IC8vIElmIHRoZSB0cmFjayBmcm9tIHRoZSB0ZXh0IHRyYWNrcyBsaXN0IGlzIG5vdCBvZiB0aGUgcmlnaHQga2luZCxcbiAgICAgIC8vIHNraXAgaXQuIFdlIGRvIG5vdCB3YW50IHRvIGFmZmVjdCB0cmFja3Mgb2YgaW5jb21wYXRpYmxlIGtpbmQocykuXG5cbiAgICAgIGlmICh0aGlzLmtpbmRzLmluZGV4T2YodHJhY2sua2luZCkgPT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBJZiB0aGlzIHRleHQgdHJhY2sgaXMgdGhlIGNvbXBvbmVudCdzIHRyYWNrIGFuZCBpdCBpcyBub3Qgc2hvd2luZyxcbiAgICAgIC8vIHNldCBpdCB0byBzaG93aW5nLlxuXG5cbiAgICAgIGlmICh0cmFjayA9PT0gcmVmZXJlbmNlVHJhY2spIHtcbiAgICAgICAgaWYgKHRyYWNrLm1vZGUgIT09ICdzaG93aW5nJykge1xuICAgICAgICAgIHRyYWNrLm1vZGUgPSAnc2hvd2luZyc7XG4gICAgICAgIH0gLy8gSWYgdGhpcyB0ZXh0IHRyYWNrIGlzIG5vdCB0aGUgY29tcG9uZW50J3MgdHJhY2sgYW5kIGl0IGlzIG5vdFxuICAgICAgICAvLyBkaXNhYmxlZCwgc2V0IGl0IHRvIGRpc2FibGVkLlxuXG4gICAgICB9IGVsc2UgaWYgKHRyYWNrLm1vZGUgIT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgdHJhY2subW9kZSA9ICdkaXNhYmxlZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgdGV4dCB0cmFjayBsaXN0IGNoYW5nZVxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBjaGFuZ2VgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgKlxuICAgKiBAbGlzdGVucyBUZXh0VHJhY2tMaXN0I2NoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUcmFja3NDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVUcmFja3NDaGFuZ2UoZXZlbnQpIHtcbiAgICB2YXIgc2hvdWxkQmVTZWxlY3RlZCA9IHRoaXMudHJhY2subW9kZSA9PT0gJ3Nob3dpbmcnOyAvLyBQcmV2ZW50IHJlZHVuZGFudCBzZWxlY3RlZCgpIGNhbGxzIGJlY2F1c2UgdGhleSBtYXkgY2F1c2VcbiAgICAvLyBzY3JlZW4gcmVhZGVycyB0byByZWFkIHRoZSBhcHBlbmRlZCBjb250cm9sIHRleHQgdW5uZWNlc3NhcmlseVxuXG4gICAgaWYgKHNob3VsZEJlU2VsZWN0ZWQgIT09IHRoaXMuaXNTZWxlY3RlZF8pIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQoc2hvdWxkQmVTZWxlY3RlZCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5oYW5kbGVTZWxlY3RlZExhbmd1YWdlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlU2VsZWN0ZWRMYW5ndWFnZUNoYW5nZShldmVudCkge1xuICAgIGlmICh0aGlzLnRyYWNrLm1vZGUgPT09ICdzaG93aW5nJykge1xuICAgICAgdmFyIHNlbGVjdGVkTGFuZ3VhZ2UgPSB0aGlzLnBsYXllcl8uY2FjaGVfLnNlbGVjdGVkTGFuZ3VhZ2U7IC8vIERvbid0IHJlcGxhY2UgdGhlIGtpbmQgb2YgdHJhY2sgYWNyb3NzIHRoZSBzYW1lIGxhbmd1YWdlXG5cbiAgICAgIGlmIChzZWxlY3RlZExhbmd1YWdlICYmIHNlbGVjdGVkTGFuZ3VhZ2UuZW5hYmxlZCAmJiBzZWxlY3RlZExhbmd1YWdlLmxhbmd1YWdlID09PSB0aGlzLnRyYWNrLmxhbmd1YWdlICYmIHNlbGVjdGVkTGFuZ3VhZ2Uua2luZCAhPT0gdGhpcy50cmFjay5raW5kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wbGF5ZXJfLmNhY2hlXy5zZWxlY3RlZExhbmd1YWdlID0ge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBsYW5ndWFnZTogdGhpcy50cmFjay5sYW5ndWFnZSxcbiAgICAgICAga2luZDogdGhpcy50cmFjay5raW5kXG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSB0byB0cmFjayBvYmplY3Qgb24gZGlzcG9zZVxuICAgIHRoaXMudHJhY2sgPSBudWxsO1xuXG4gICAgX01lbnVJdGVtLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIFRleHRUcmFja01lbnVJdGVtO1xufShNZW51SXRlbSk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVGV4dFRyYWNrTWVudUl0ZW0nLCBUZXh0VHJhY2tNZW51SXRlbSk7XG5cbi8qKlxuICogQSBzcGVjaWFsIG1lbnUgaXRlbSBmb3IgdHVybmluZyBvZiBhIHNwZWNpZmljIHR5cGUgb2YgdGV4dCB0cmFja1xuICpcbiAqIEBleHRlbmRzIFRleHRUcmFja01lbnVJdGVtXG4gKi9cblxudmFyIE9mZlRleHRUcmFja01lbnVJdGVtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVGV4dFRyYWNrTWVudUl0ZW0pIHtcbiAgX2luaGVyaXRzTG9vc2UoT2ZmVGV4dFRyYWNrTWVudUl0ZW0sIF9UZXh0VHJhY2tNZW51SXRlbSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBPZmZUZXh0VHJhY2tNZW51SXRlbShwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICAvLyBDcmVhdGUgcHNldWRvIHRyYWNrIGluZm9cbiAgICAvLyBSZXF1aXJlcyBvcHRpb25zWydraW5kJ11cbiAgICBvcHRpb25zLnRyYWNrID0ge1xuICAgICAgcGxheWVyOiBwbGF5ZXIsXG4gICAgICAvLyBpdCBpcyBubyBsb25nZXIgbmVjZXNzYXJ5IHRvIHN0b3JlIGBraW5kYCBvciBga2luZHNgIG9uIHRoZSB0cmFjayBpdHNlbGZcbiAgICAgIC8vIHNpbmNlIHRoZXkgYXJlIG5vdyBzdG9yZWQgaW4gdGhlIGBraW5kc2AgcHJvcGVydHkgb2YgYWxsIGluc3RhbmNlcyBvZlxuICAgICAgLy8gVGV4dFRyYWNrTWVudUl0ZW0sIGJ1dCB0aGlzIHdpbGwgcmVtYWluIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAga2luZDogb3B0aW9ucy5raW5kLFxuICAgICAga2luZHM6IG9wdGlvbnMua2luZHMsXG4gICAgICBcImRlZmF1bHRcIjogZmFsc2UsXG4gICAgICBtb2RlOiAnZGlzYWJsZWQnXG4gICAgfTtcblxuICAgIGlmICghb3B0aW9ucy5raW5kcykge1xuICAgICAgb3B0aW9ucy5raW5kcyA9IFtvcHRpb25zLmtpbmRdO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmxhYmVsKSB7XG4gICAgICBvcHRpb25zLnRyYWNrLmxhYmVsID0gb3B0aW9ucy5sYWJlbDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy50cmFjay5sYWJlbCA9IG9wdGlvbnMua2luZHMuam9pbignIGFuZCAnKSArICcgb2ZmJztcbiAgICB9IC8vIE1lbnVJdGVtIGlzIHNlbGVjdGFibGVcblxuXG4gICAgb3B0aW9ucy5zZWxlY3RhYmxlID0gdHJ1ZTsgLy8gTWVudUl0ZW0gaXMgTk9UIG11bHRpU2VsZWN0YWJsZSAoaS5lLiBvbmx5IG9uZSBjYW4gYmUgbWFya2VkIFwic2VsZWN0ZWRcIiBhdCBhIHRpbWUpXG5cbiAgICBvcHRpb25zLm11bHRpU2VsZWN0YWJsZSA9IGZhbHNlO1xuICAgIHJldHVybiBfVGV4dFRyYWNrTWVudUl0ZW0uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSB0ZXh0IHRyYWNrIGNoYW5nZVxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IE9mZlRleHRUcmFja01lbnVJdGVtLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlVHJhY2tzQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlVHJhY2tzQ2hhbmdlKGV2ZW50KSB7XG4gICAgdmFyIHRyYWNrcyA9IHRoaXMucGxheWVyKCkudGV4dFRyYWNrcygpO1xuICAgIHZhciBzaG91bGRCZVNlbGVjdGVkID0gdHJ1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdHJhY2tzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW2ldO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zXy5raW5kcy5pbmRleE9mKHRyYWNrLmtpbmQpID4gLTEgJiYgdHJhY2subW9kZSA9PT0gJ3Nob3dpbmcnKSB7XG4gICAgICAgIHNob3VsZEJlU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSAvLyBQcmV2ZW50IHJlZHVuZGFudCBzZWxlY3RlZCgpIGNhbGxzIGJlY2F1c2UgdGhleSBtYXkgY2F1c2VcbiAgICAvLyBzY3JlZW4gcmVhZGVycyB0byByZWFkIHRoZSBhcHBlbmRlZCBjb250cm9sIHRleHQgdW5uZWNlc3NhcmlseVxuXG5cbiAgICBpZiAoc2hvdWxkQmVTZWxlY3RlZCAhPT0gdGhpcy5pc1NlbGVjdGVkXykge1xuICAgICAgdGhpcy5zZWxlY3RlZChzaG91bGRCZVNlbGVjdGVkKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZVNlbGVjdGVkTGFuZ3VhZ2VDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVTZWxlY3RlZExhbmd1YWdlQ2hhbmdlKGV2ZW50KSB7XG4gICAgdmFyIHRyYWNrcyA9IHRoaXMucGxheWVyKCkudGV4dFRyYWNrcygpO1xuICAgIHZhciBhbGxIaWRkZW4gPSB0cnVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0cmFja3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07XG5cbiAgICAgIGlmIChbJ2NhcHRpb25zJywgJ2Rlc2NyaXB0aW9ucycsICdzdWJ0aXRsZXMnXS5pbmRleE9mKHRyYWNrLmtpbmQpID4gLTEgJiYgdHJhY2subW9kZSA9PT0gJ3Nob3dpbmcnKSB7XG4gICAgICAgIGFsbEhpZGRlbiA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWxsSGlkZGVuKSB7XG4gICAgICB0aGlzLnBsYXllcl8uY2FjaGVfLnNlbGVjdGVkTGFuZ3VhZ2UgPSB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gT2ZmVGV4dFRyYWNrTWVudUl0ZW07XG59KFRleHRUcmFja01lbnVJdGVtKTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdPZmZUZXh0VHJhY2tNZW51SXRlbScsIE9mZlRleHRUcmFja01lbnVJdGVtKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgYnV0dG9ucyB0aGF0IHRvZ2dsZSBzcGVjaWZpYyB0ZXh0IHRyYWNrIHR5cGVzIChlLmcuIHN1YnRpdGxlcylcbiAqXG4gKiBAZXh0ZW5kcyBNZW51QnV0dG9uXG4gKi9cblxudmFyIFRleHRUcmFja0J1dHRvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RyYWNrQnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRleHRUcmFja0J1dHRvbiwgX1RyYWNrQnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFRleHRUcmFja0J1dHRvbihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgb3B0aW9ucy50cmFja3MgPSBwbGF5ZXIudGV4dFRyYWNrcygpO1xuICAgIHJldHVybiBfVHJhY2tCdXR0b24uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG1lbnUgaXRlbSBmb3IgZWFjaCB0ZXh0IHRyYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7VGV4dFRyYWNrTWVudUl0ZW1bXX0gW2l0ZW1zPVtdXVxuICAgKiAgICAgICAgRXhpc3RpbmcgYXJyYXkgb2YgaXRlbXMgdG8gdXNlIGR1cmluZyBjcmVhdGlvblxuICAgKlxuICAgKiBAcmV0dXJuIHtUZXh0VHJhY2tNZW51SXRlbVtdfVxuICAgKiAgICAgICAgIEFycmF5IG9mIG1lbnUgaXRlbXMgdGhhdCB3ZXJlIGNyZWF0ZWRcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVGV4dFRyYWNrQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY3JlYXRlSXRlbXMgPSBmdW5jdGlvbiBjcmVhdGVJdGVtcyhpdGVtcywgVHJhY2tNZW51SXRlbSkge1xuICAgIGlmIChpdGVtcyA9PT0gdm9pZCAwKSB7XG4gICAgICBpdGVtcyA9IFtdO1xuICAgIH1cblxuICAgIGlmIChUcmFja01lbnVJdGVtID09PSB2b2lkIDApIHtcbiAgICAgIFRyYWNrTWVudUl0ZW0gPSBUZXh0VHJhY2tNZW51SXRlbTtcbiAgICB9XG5cbiAgICAvLyBMYWJlbCBpcyBhbiBvdmVycmlkZSBmb3IgdGhlIFt0cmFja10gb2ZmIGxhYmVsXG4gICAgLy8gVVNlZCB0byBsb2NhbGlzZSBjYXB0aW9ucy9zdWJ0aXRsZXNcbiAgICB2YXIgbGFiZWw7XG5cbiAgICBpZiAodGhpcy5sYWJlbF8pIHtcbiAgICAgIGxhYmVsID0gdGhpcy5sYWJlbF8gKyBcIiBvZmZcIjtcbiAgICB9IC8vIEFkZCBhbiBPRkYgbWVudSBpdGVtIHRvIHR1cm4gYWxsIHRyYWNrcyBvZmZcblxuXG4gICAgaXRlbXMucHVzaChuZXcgT2ZmVGV4dFRyYWNrTWVudUl0ZW0odGhpcy5wbGF5ZXJfLCB7XG4gICAgICBraW5kczogdGhpcy5raW5kc18sXG4gICAgICBraW5kOiB0aGlzLmtpbmRfLFxuICAgICAgbGFiZWw6IGxhYmVsXG4gICAgfSkpO1xuICAgIHRoaXMuaGlkZVRocmVzaG9sZF8gKz0gMTtcbiAgICB2YXIgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLmtpbmRzXykpIHtcbiAgICAgIHRoaXMua2luZHNfID0gW3RoaXMua2luZF9dO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07IC8vIG9ubHkgYWRkIHRyYWNrcyB0aGF0IGFyZSBvZiBhbiBhcHByb3ByaWF0ZSBraW5kIGFuZCBoYXZlIGEgbGFiZWxcblxuICAgICAgaWYgKHRoaXMua2luZHNfLmluZGV4T2YodHJhY2sua2luZCkgPiAtMSkge1xuICAgICAgICB2YXIgaXRlbSA9IG5ldyBUcmFja01lbnVJdGVtKHRoaXMucGxheWVyXywge1xuICAgICAgICAgIHRyYWNrOiB0cmFjayxcbiAgICAgICAgICBraW5kczogdGhpcy5raW5kc18sXG4gICAgICAgICAga2luZDogdGhpcy5raW5kXyxcbiAgICAgICAgICAvLyBNZW51SXRlbSBpcyBzZWxlY3RhYmxlXG4gICAgICAgICAgc2VsZWN0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAvLyBNZW51SXRlbSBpcyBOT1QgbXVsdGlTZWxlY3RhYmxlIChpLmUuIG9ubHkgb25lIGNhbiBiZSBtYXJrZWQgXCJzZWxlY3RlZFwiIGF0IGEgdGltZSlcbiAgICAgICAgICBtdWx0aVNlbGVjdGFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBpdGVtLmFkZENsYXNzKFwidmpzLVwiICsgdHJhY2sua2luZCArIFwiLW1lbnUtaXRlbVwiKTtcbiAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbXM7XG4gIH07XG5cbiAgcmV0dXJuIFRleHRUcmFja0J1dHRvbjtcbn0oVHJhY2tCdXR0b24pO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1RleHRUcmFja0J1dHRvbicsIFRleHRUcmFja0J1dHRvbik7XG5cbi8qKlxuICogVGhlIGNoYXB0ZXIgdHJhY2sgbWVudSBpdGVtXG4gKlxuICogQGV4dGVuZHMgTWVudUl0ZW1cbiAqL1xuXG52YXIgQ2hhcHRlcnNUcmFja01lbnVJdGVtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWVudUl0ZW0pIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2hhcHRlcnNUcmFja01lbnVJdGVtLCBfTWVudUl0ZW0pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gQ2hhcHRlcnNUcmFja01lbnVJdGVtKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciB0cmFjayA9IG9wdGlvbnMudHJhY2s7XG4gICAgdmFyIGN1ZSA9IG9wdGlvbnMuY3VlO1xuICAgIHZhciBjdXJyZW50VGltZSA9IHBsYXllci5jdXJyZW50VGltZSgpOyAvLyBNb2RpZnkgb3B0aW9ucyBmb3IgcGFyZW50IE1lbnVJdGVtIGNsYXNzJ3MgaW5pdC5cblxuICAgIG9wdGlvbnMuc2VsZWN0YWJsZSA9IHRydWU7XG4gICAgb3B0aW9ucy5tdWx0aVNlbGVjdGFibGUgPSBmYWxzZTtcbiAgICBvcHRpb25zLmxhYmVsID0gY3VlLnRleHQ7XG4gICAgb3B0aW9ucy5zZWxlY3RlZCA9IGN1ZS5zdGFydFRpbWUgPD0gY3VycmVudFRpbWUgJiYgY3VycmVudFRpbWUgPCBjdWUuZW5kVGltZTtcbiAgICBfdGhpcyA9IF9NZW51SXRlbS5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy50cmFjayA9IHRyYWNrO1xuICAgIF90aGlzLmN1ZSA9IGN1ZTtcbiAgICB0cmFjay5hZGRFdmVudExpc3RlbmVyKCdjdWVjaGFuZ2UnLCBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy51cGRhdGUpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhbiBgQ2hhcHRlcnNUcmFja01lbnVJdGVtYCBpcyBcImNsaWNrZWRcIi4gU2VlXG4gICAqIHtAbGluayBDbGlja2FibGVDb21wb25lbnR9IGZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgYSBjbGljayBjYW4gYmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAsIGB0YXBgLCBvciBgY2xpY2tgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmVcbiAgICogICAgICAgIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgdGFwXG4gICAqIEBsaXN0ZW5zIGNsaWNrXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENoYXB0ZXJzVHJhY2tNZW51SXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBfTWVudUl0ZW0ucHJvdG90eXBlLmhhbmRsZUNsaWNrLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5jdWUuc3RhcnRUaW1lKTtcbiAgICB0aGlzLnVwZGF0ZSh0aGlzLmN1ZS5zdGFydFRpbWUpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgY2hhcHRlciBtZW51IGl0ZW1cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgVGhlIGBjdWVjaGFuZ2VgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuLlxuICAgKlxuICAgKiBAbGlzdGVucyBUZXh0VHJhY2sjY3VlY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShldmVudCkge1xuICAgIHZhciBjdWUgPSB0aGlzLmN1ZTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTsgLy8gdmpzLmxvZyhjdXJyZW50VGltZSwgY3VlLnN0YXJ0VGltZSk7XG5cbiAgICB0aGlzLnNlbGVjdGVkKGN1ZS5zdGFydFRpbWUgPD0gY3VycmVudFRpbWUgJiYgY3VycmVudFRpbWUgPCBjdWUuZW5kVGltZSk7XG4gIH07XG5cbiAgcmV0dXJuIENoYXB0ZXJzVHJhY2tNZW51SXRlbTtcbn0oTWVudUl0ZW0pO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0NoYXB0ZXJzVHJhY2tNZW51SXRlbScsIENoYXB0ZXJzVHJhY2tNZW51SXRlbSk7XG5cbi8qKlxuICogVGhlIGJ1dHRvbiBjb21wb25lbnQgZm9yIHRvZ2dsaW5nIGFuZCBzZWxlY3RpbmcgY2hhcHRlcnNcbiAqIENoYXB0ZXJzIGFjdCBtdWNoIGRpZmZlcmVudGx5IHRoYW4gb3RoZXIgdGV4dCB0cmFja3NcbiAqIEN1ZXMgYXJlIG5hdmlnYXRpb24gdnMuIG90aGVyIHRyYWNrcyBvZiBhbHRlcm5hdGl2ZSBsYW5ndWFnZXNcbiAqXG4gKiBAZXh0ZW5kcyBUZXh0VHJhY2tCdXR0b25cbiAqL1xuXG52YXIgQ2hhcHRlcnNCdXR0b24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UZXh0VHJhY2tCdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2hhcHRlcnNCdXR0b24sIF9UZXh0VHJhY2tCdXR0b24pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH5SZWFkeUNhbGxiYWNrfSBbcmVhZHldXG4gICAqICAgICAgICBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoaXMgZnVuY3Rpb24gaXMgcmVhZHkuXG4gICAqL1xuICBmdW5jdGlvbiBDaGFwdGVyc0J1dHRvbihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB7XG4gICAgcmV0dXJuIF9UZXh0VHJhY2tCdXR0b24uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB8fCB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENoYXB0ZXJzQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWNoYXB0ZXJzLWJ1dHRvbiBcIiArIF9UZXh0VHJhY2tCdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uYnVpbGRXcmFwcGVyQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZFdyYXBwZXJDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtY2hhcHRlcnMtYnV0dG9uIFwiICsgX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBtZW51IGJhc2VkIG9uIHRoZSBjdXJyZW50IHN0YXRlIG9mIGl0cyBpdGVtcy5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gW2V2ZW50XVxuICAgKiAgICAgICAgQW4gZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFRleHRUcmFja0xpc3QjYWRkdHJhY2tcbiAgICogQGxpc3RlbnMgVGV4dFRyYWNrTGlzdCNyZW1vdmV0cmFja1xuICAgKiBAbGlzdGVucyBUZXh0VHJhY2tMaXN0I2NoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMudHJhY2tfIHx8IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnYWRkdHJhY2snIHx8IGV2ZW50LnR5cGUgPT09ICdyZW1vdmV0cmFjaycpKSB7XG4gICAgICB0aGlzLnNldFRyYWNrKHRoaXMuZmluZENoYXB0ZXJzVHJhY2soKSk7XG4gICAgfVxuXG4gICAgX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGZvciB0aGUgY2hhcHRlcnMgYnV0dG9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja30gdHJhY2tcbiAgICogICAgICAgIFRoZSBuZXcgdHJhY2sgdG8gc2VsZWN0LiBOb3RoaW5nIHdpbGwgY2hhbmdlIGlmIHRoaXMgaXMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZFxuICAgKiAgICAgICAgdHJhY2suXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldFRyYWNrID0gZnVuY3Rpb24gc2V0VHJhY2sodHJhY2spIHtcbiAgICBpZiAodGhpcy50cmFja18gPT09IHRyYWNrKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnVwZGF0ZUhhbmRsZXJfKSB7XG4gICAgICB0aGlzLnVwZGF0ZUhhbmRsZXJfID0gdGhpcy51cGRhdGUuYmluZCh0aGlzKTtcbiAgICB9IC8vIGhlcmUgdGhpcy50cmFja18gcmVmZXJzIHRvIHRoZSBvbGQgdHJhY2sgaW5zdGFuY2VcblxuXG4gICAgaWYgKHRoaXMudHJhY2tfKSB7XG4gICAgICB2YXIgcmVtb3RlVGV4dFRyYWNrRWwgPSB0aGlzLnBsYXllcl8ucmVtb3RlVGV4dFRyYWNrRWxzKCkuZ2V0VHJhY2tFbGVtZW50QnlUcmFja18odGhpcy50cmFja18pO1xuXG4gICAgICBpZiAocmVtb3RlVGV4dFRyYWNrRWwpIHtcbiAgICAgICAgcmVtb3RlVGV4dFRyYWNrRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMudXBkYXRlSGFuZGxlcl8pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRyYWNrXyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy50cmFja18gPSB0cmFjazsgLy8gaGVyZSB0aGlzLnRyYWNrXyByZWZlcnMgdG8gdGhlIG5ldyB0cmFjayBpbnN0YW5jZVxuXG4gICAgaWYgKHRoaXMudHJhY2tfKSB7XG4gICAgICB0aGlzLnRyYWNrXy5tb2RlID0gJ2hpZGRlbic7XG5cbiAgICAgIHZhciBfcmVtb3RlVGV4dFRyYWNrRWwgPSB0aGlzLnBsYXllcl8ucmVtb3RlVGV4dFRyYWNrRWxzKCkuZ2V0VHJhY2tFbGVtZW50QnlUcmFja18odGhpcy50cmFja18pO1xuXG4gICAgICBpZiAoX3JlbW90ZVRleHRUcmFja0VsKSB7XG4gICAgICAgIF9yZW1vdGVUZXh0VHJhY2tFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy51cGRhdGVIYW5kbGVyXyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBGaW5kIHRoZSB0cmFjayBvYmplY3QgdGhhdCBpcyBjdXJyZW50bHkgaW4gdXNlIGJ5IHRoaXMgQ2hhcHRlcnNCdXR0b25cbiAgICpcbiAgICogQHJldHVybiB7VGV4dFRyYWNrfHVuZGVmaW5lZH1cbiAgICogICAgICAgICBUaGUgY3VycmVudCB0cmFjayBvciB1bmRlZmluZWQgaWYgbm9uZSB3YXMgZm91bmQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZpbmRDaGFwdGVyc1RyYWNrID0gZnVuY3Rpb24gZmluZENoYXB0ZXJzVHJhY2soKSB7XG4gICAgdmFyIHRyYWNrcyA9IHRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCkgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gdHJhY2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAvLyBXZSB3aWxsIGFsd2F5cyBjaG9vc2UgdGhlIGxhc3QgdHJhY2sgYXMgb3VyIGNoYXB0ZXJzVHJhY2tcbiAgICAgIHZhciB0cmFjayA9IHRyYWNrc1tpXTtcblxuICAgICAgaWYgKHRyYWNrLmtpbmQgPT09IHRoaXMua2luZF8pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBjYXB0aW9uIGZvciB0aGUgQ2hhcHRlcnNCdXR0b24gYmFzZWQgb24gdGhlIHRyYWNrIGxhYmVsLiBUaGlzIHdpbGwgYWxzb1xuICAgKiB1c2UgdGhlIGN1cnJlbnQgdHJhY2tzIGxvY2FsaXplZCBraW5kIGFzIGEgZmFsbGJhY2sgaWYgYSBsYWJlbCBkb2VzIG5vdCBleGlzdC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSB0cmFja3MgY3VycmVudCBsYWJlbCBvciB0aGUgbG9jYWxpemVkIHRyYWNrIGtpbmQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldE1lbnVDYXB0aW9uID0gZnVuY3Rpb24gZ2V0TWVudUNhcHRpb24oKSB7XG4gICAgaWYgKHRoaXMudHJhY2tfICYmIHRoaXMudHJhY2tfLmxhYmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFja18ubGFiZWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubG9jYWxpemUodG9UaXRsZUNhc2UodGhpcy5raW5kXykpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgbWVudSBmcm9tIGNoYXB0ZXIgdHJhY2tcbiAgICpcbiAgICogQHJldHVybiB7TWVudX1cbiAgICogICAgICAgICBOZXcgbWVudSBmb3IgdGhlIGNoYXB0ZXIgYnV0dG9uc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVNZW51ID0gZnVuY3Rpb24gY3JlYXRlTWVudSgpIHtcbiAgICB0aGlzLm9wdGlvbnNfLnRpdGxlID0gdGhpcy5nZXRNZW51Q2FwdGlvbigpO1xuICAgIHJldHVybiBfVGV4dFRyYWNrQnV0dG9uLnByb3RvdHlwZS5jcmVhdGVNZW51LmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG1lbnUgaXRlbSBmb3IgZWFjaCB0ZXh0IHRyYWNrXG4gICAqXG4gICAqIEByZXR1cm4ge1RleHRUcmFja01lbnVJdGVtW119XG4gICAqICAgICAgICAgQXJyYXkgb2YgbWVudSBpdGVtc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVJdGVtcyA9IGZ1bmN0aW9uIGNyZWF0ZUl0ZW1zKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgaWYgKCF0aGlzLnRyYWNrXykge1xuICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cblxuICAgIHZhciBjdWVzID0gdGhpcy50cmFja18uY3VlcztcblxuICAgIGlmICghY3Vlcykge1xuICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY3Vlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjdWUgPSBjdWVzW2ldO1xuICAgICAgdmFyIG1pID0gbmV3IENoYXB0ZXJzVHJhY2tNZW51SXRlbSh0aGlzLnBsYXllcl8sIHtcbiAgICAgICAgdHJhY2s6IHRoaXMudHJhY2tfLFxuICAgICAgICBjdWU6IGN1ZVxuICAgICAgfSk7XG4gICAgICBpdGVtcy5wdXNoKG1pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbXM7XG4gIH07XG5cbiAgcmV0dXJuIENoYXB0ZXJzQnV0dG9uO1xufShUZXh0VHJhY2tCdXR0b24pO1xuLyoqXG4gKiBga2luZGAgb2YgVGV4dFRyYWNrIHRvIGxvb2sgZm9yIHRvIGFzc29jaWF0ZSBpdCB3aXRoIHRoaXMgbWVudS5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cbkNoYXB0ZXJzQnV0dG9uLnByb3RvdHlwZS5raW5kXyA9ICdjaGFwdGVycyc7XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYENoYXB0ZXJzQnV0dG9uYHMgY29udHJvbHMuIEFkZGVkIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuQ2hhcHRlcnNCdXR0b24ucHJvdG90eXBlLmNvbnRyb2xUZXh0XyA9ICdDaGFwdGVycyc7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0NoYXB0ZXJzQnV0dG9uJywgQ2hhcHRlcnNCdXR0b24pO1xuXG4vKipcbiAqIFRoZSBidXR0b24gY29tcG9uZW50IGZvciB0b2dnbGluZyBhbmQgc2VsZWN0aW5nIGRlc2NyaXB0aW9uc1xuICpcbiAqIEBleHRlbmRzIFRleHRUcmFja0J1dHRvblxuICovXG5cbnZhciBEZXNjcmlwdGlvbnNCdXR0b24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UZXh0VHJhY2tCdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoRGVzY3JpcHRpb25zQnV0dG9uLCBfVGV4dFRyYWNrQnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtDb21wb25lbnR+UmVhZHlDYWxsYmFja30gW3JlYWR5XVxuICAgKiAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGlzIGNvbXBvbmVudCBpcyByZWFkeS5cbiAgICovXG4gIGZ1bmN0aW9uIERlc2NyaXB0aW9uc0J1dHRvbihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfVGV4dFRyYWNrQnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zLCByZWFkeSkgfHwgdGhpcztcbiAgICB2YXIgdHJhY2tzID0gcGxheWVyLnRleHRUcmFja3MoKTtcbiAgICB2YXIgY2hhbmdlSGFuZGxlciA9IGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLmhhbmRsZVRyYWNrc0NoYW5nZSk7XG4gICAgdHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGNoYW5nZUhhbmRsZXIpO1xuXG4gICAgX3RoaXMub24oJ2Rpc3Bvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgY2hhbmdlSGFuZGxlcik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSB0ZXh0IHRyYWNrIGNoYW5nZVxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gcnVuXG4gICAqXG4gICAqIEBsaXN0ZW5zIFRleHRUcmFja0xpc3QjY2hhbmdlXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IERlc2NyaXB0aW9uc0J1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZVRyYWNrc0NoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZVRyYWNrc0NoYW5nZShldmVudCkge1xuICAgIHZhciB0cmFja3MgPSB0aGlzLnBsYXllcigpLnRleHRUcmFja3MoKTtcbiAgICB2YXIgZGlzYWJsZWQgPSBmYWxzZTsgLy8gQ2hlY2sgd2hldGhlciBhIHRyYWNrIG9mIGEgZGlmZmVyZW50IGtpbmQgaXMgc2hvd2luZ1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0cmFja3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07XG5cbiAgICAgIGlmICh0cmFjay5raW5kICE9PSB0aGlzLmtpbmRfICYmIHRyYWNrLm1vZGUgPT09ICdzaG93aW5nJykge1xuICAgICAgICBkaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gLy8gSWYgYW5vdGhlciB0cmFjayBpcyBzaG93aW5nLCBkaXNhYmxlIHRoaXMgbWVudSBidXR0b25cblxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbmFibGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBET00gYGNsYXNzTmFtZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgRE9NIGBjbGFzc05hbWVgIGZvciB0aGlzIG9iamVjdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWRlc2NyaXB0aW9ucy1idXR0b24gXCIgKyBfVGV4dFRyYWNrQnV0dG9uLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmJ1aWxkV3JhcHBlckNTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRXcmFwcGVyQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWRlc2NyaXB0aW9ucy1idXR0b24gXCIgKyBfVGV4dFRyYWNrQnV0dG9uLnByb3RvdHlwZS5idWlsZFdyYXBwZXJDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBEZXNjcmlwdGlvbnNCdXR0b247XG59KFRleHRUcmFja0J1dHRvbik7XG4vKipcbiAqIGBraW5kYCBvZiBUZXh0VHJhY2sgdG8gbG9vayBmb3IgdG8gYXNzb2NpYXRlIGl0IHdpdGggdGhpcyBtZW51LlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuRGVzY3JpcHRpb25zQnV0dG9uLnByb3RvdHlwZS5raW5kXyA9ICdkZXNjcmlwdGlvbnMnO1xuLyoqXG4gKiBUaGUgdGV4dCB0aGF0IHNob3VsZCBkaXNwbGF5IG92ZXIgdGhlIGBEZXNjcmlwdGlvbnNCdXR0b25gcyBjb250cm9scy4gQWRkZWQgZm9yIGxvY2FsaXphdGlvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5EZXNjcmlwdGlvbnNCdXR0b24ucHJvdG90eXBlLmNvbnRyb2xUZXh0XyA9ICdEZXNjcmlwdGlvbnMnO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdEZXNjcmlwdGlvbnNCdXR0b24nLCBEZXNjcmlwdGlvbnNCdXR0b24pO1xuXG4vKipcbiAqIFRoZSBidXR0b24gY29tcG9uZW50IGZvciB0b2dnbGluZyBhbmQgc2VsZWN0aW5nIHN1YnRpdGxlc1xuICpcbiAqIEBleHRlbmRzIFRleHRUcmFja0J1dHRvblxuICovXG5cbnZhciBTdWJ0aXRsZXNCdXR0b24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UZXh0VHJhY2tCdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoU3VidGl0bGVzQnV0dG9uLCBfVGV4dFRyYWNrQnV0dG9uKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtDb21wb25lbnR+UmVhZHlDYWxsYmFja30gW3JlYWR5XVxuICAgKiAgICAgICAgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGlzIGNvbXBvbmVudCBpcyByZWFkeS5cbiAgICovXG4gIGZ1bmN0aW9uIFN1YnRpdGxlc0J1dHRvbihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB7XG4gICAgcmV0dXJuIF9UZXh0VHJhY2tCdXR0b24uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB8fCB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN1YnRpdGxlc0J1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1zdWJ0aXRsZXMtYnV0dG9uIFwiICsgX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5idWlsZFdyYXBwZXJDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkV3JhcHBlckNTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1zdWJ0aXRsZXMtYnV0dG9uIFwiICsgX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gU3VidGl0bGVzQnV0dG9uO1xufShUZXh0VHJhY2tCdXR0b24pO1xuLyoqXG4gKiBga2luZGAgb2YgVGV4dFRyYWNrIHRvIGxvb2sgZm9yIHRvIGFzc29jaWF0ZSBpdCB3aXRoIHRoaXMgbWVudS5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cblN1YnRpdGxlc0J1dHRvbi5wcm90b3R5cGUua2luZF8gPSAnc3VidGl0bGVzJztcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgU3VidGl0bGVzQnV0dG9uYHMgY29udHJvbHMuIEFkZGVkIGZvciBsb2NhbGl6YXRpb24uXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuU3VidGl0bGVzQnV0dG9uLnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnU3VidGl0bGVzJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnU3VidGl0bGVzQnV0dG9uJywgU3VidGl0bGVzQnV0dG9uKTtcblxuLyoqXG4gKiBUaGUgbWVudSBpdGVtIGZvciBjYXB0aW9uIHRyYWNrIHNldHRpbmdzIG1lbnVcbiAqXG4gKiBAZXh0ZW5kcyBUZXh0VHJhY2tNZW51SXRlbVxuICovXG5cbnZhciBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RleHRUcmFja01lbnVJdGVtKSB7XG4gIF9pbmhlcml0c0xvb3NlKENhcHRpb25TZXR0aW5nc01lbnVJdGVtLCBfVGV4dFRyYWNrTWVudUl0ZW0pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgb3B0aW9ucy50cmFjayA9IHtcbiAgICAgIHBsYXllcjogcGxheWVyLFxuICAgICAga2luZDogb3B0aW9ucy5raW5kLFxuICAgICAgbGFiZWw6IG9wdGlvbnMua2luZCArICcgc2V0dGluZ3MnLFxuICAgICAgc2VsZWN0YWJsZTogZmFsc2UsXG4gICAgICBcImRlZmF1bHRcIjogZmFsc2UsXG4gICAgICBtb2RlOiAnZGlzYWJsZWQnXG4gICAgfTsgLy8gQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0gaGFzIG5vIGNvbmNlcHQgb2YgJ3NlbGVjdGVkJ1xuXG4gICAgb3B0aW9ucy5zZWxlY3RhYmxlID0gZmFsc2U7XG4gICAgb3B0aW9ucy5uYW1lID0gJ0NhcHRpb25TZXR0aW5nc01lbnVJdGVtJztcbiAgICBfdGhpcyA9IF9UZXh0VHJhY2tNZW51SXRlbS5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcblxuICAgIF90aGlzLmFkZENsYXNzKCd2anMtdGV4dHRyYWNrLXNldHRpbmdzJyk7XG5cbiAgICBfdGhpcy5jb250cm9sVGV4dCgnLCBvcGVucyAnICsgb3B0aW9ucy5raW5kICsgJyBzZXR0aW5ncyBkaWFsb2cnKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCB3aGVuIGFuIGBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbWAgaXMgXCJjbGlja2VkXCIuIFNlZVxuICAgKiB7QGxpbmsgQ2xpY2thYmxlQ29tcG9uZW50fSBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IGEgY2xpY2sgY2FuIGJlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYGtleWRvd25gLCBgdGFwYCwgb3IgYGNsaWNrYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRhcFxuICAgKiBAbGlzdGVucyBjbGlja1xuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICB0aGlzLnBsYXllcigpLmdldENoaWxkKCd0ZXh0VHJhY2tTZXR0aW5ncycpLm9wZW4oKTtcbiAgfTtcblxuICByZXR1cm4gQ2FwdGlvblNldHRpbmdzTWVudUl0ZW07XG59KFRleHRUcmFja01lbnVJdGVtKTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdDYXB0aW9uU2V0dGluZ3NNZW51SXRlbScsIENhcHRpb25TZXR0aW5nc01lbnVJdGVtKTtcblxuLyoqXG4gKiBUaGUgYnV0dG9uIGNvbXBvbmVudCBmb3IgdG9nZ2xpbmcgYW5kIHNlbGVjdGluZyBjYXB0aW9uc1xuICpcbiAqIEBleHRlbmRzIFRleHRUcmFja0J1dHRvblxuICovXG5cbnZhciBDYXB0aW9uc0J1dHRvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RleHRUcmFja0J1dHRvbikge1xuICBfaW5oZXJpdHNMb29zZShDYXB0aW9uc0J1dHRvbiwgX1RleHRUcmFja0J1dHRvbik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29tcG9uZW50flJlYWR5Q2FsbGJhY2t9IFtyZWFkeV1cbiAgICogICAgICAgIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgcmVhZHkuXG4gICAqL1xuICBmdW5jdGlvbiBDYXB0aW9uc0J1dHRvbihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB7XG4gICAgcmV0dXJuIF9UZXh0VHJhY2tCdXR0b24uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB8fCB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENhcHRpb25zQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWNhcHRpb25zLWJ1dHRvbiBcIiArIF9UZXh0VHJhY2tCdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uYnVpbGRXcmFwcGVyQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZFdyYXBwZXJDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtY2FwdGlvbnMtYnV0dG9uIFwiICsgX1RleHRUcmFja0J1dHRvbi5wcm90b3R5cGUuYnVpbGRXcmFwcGVyQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGNhcHRpb24gbWVudSBpdGVtc1xuICAgKlxuICAgKiBAcmV0dXJuIHtDYXB0aW9uU2V0dGluZ3NNZW51SXRlbVtdfVxuICAgKiAgICAgICAgIFRoZSBhcnJheSBvZiBjdXJyZW50IG1lbnUgaXRlbXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUl0ZW1zID0gZnVuY3Rpb24gY3JlYXRlSXRlbXMoKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICBpZiAoISh0aGlzLnBsYXllcigpLnRlY2hfICYmIHRoaXMucGxheWVyKCkudGVjaF8uZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzKSAmJiB0aGlzLnBsYXllcigpLmdldENoaWxkKCd0ZXh0VHJhY2tTZXR0aW5ncycpKSB7XG4gICAgICBpdGVtcy5wdXNoKG5ldyBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbSh0aGlzLnBsYXllcl8sIHtcbiAgICAgICAga2luZDogdGhpcy5raW5kX1xuICAgICAgfSkpO1xuICAgICAgdGhpcy5oaWRlVGhyZXNob2xkXyArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBfVGV4dFRyYWNrQnV0dG9uLnByb3RvdHlwZS5jcmVhdGVJdGVtcy5jYWxsKHRoaXMsIGl0ZW1zKTtcbiAgfTtcblxuICByZXR1cm4gQ2FwdGlvbnNCdXR0b247XG59KFRleHRUcmFja0J1dHRvbik7XG4vKipcbiAqIGBraW5kYCBvZiBUZXh0VHJhY2sgdG8gbG9vayBmb3IgdG8gYXNzb2NpYXRlIGl0IHdpdGggdGhpcyBtZW51LlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuQ2FwdGlvbnNCdXR0b24ucHJvdG90eXBlLmtpbmRfID0gJ2NhcHRpb25zJztcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgQ2FwdGlvbnNCdXR0b25gcyBjb250cm9scy4gQWRkZWQgZm9yIGxvY2FsaXphdGlvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5DYXB0aW9uc0J1dHRvbi5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ0NhcHRpb25zJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnQ2FwdGlvbnNCdXR0b24nLCBDYXB0aW9uc0J1dHRvbik7XG5cbi8qKlxuICogU3Vic0NhcHNNZW51SXRlbSBoYXMgYW4gW2NjXSBpY29uIHRvIGRpc3Rpbmd1aXNoIGNhcHRpb25zIGZyb20gc3VidGl0bGVzXG4gKiBpbiB0aGUgU3Vic0NhcHNNZW51LlxuICpcbiAqIEBleHRlbmRzIFRleHRUcmFja01lbnVJdGVtXG4gKi9cblxudmFyIFN1YnNDYXBzTWVudUl0ZW0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UZXh0VHJhY2tNZW51SXRlbSkge1xuICBfaW5oZXJpdHNMb29zZShTdWJzQ2Fwc01lbnVJdGVtLCBfVGV4dFRyYWNrTWVudUl0ZW0pO1xuXG4gIGZ1bmN0aW9uIFN1YnNDYXBzTWVudUl0ZW0oKSB7XG4gICAgcmV0dXJuIF9UZXh0VHJhY2tNZW51SXRlbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic0NhcHNNZW51SXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwodHlwZSwgcHJvcHMsIGF0dHJzKSB7XG4gICAgdmFyIGlubmVySFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcInZqcy1tZW51LWl0ZW0tdGV4dFxcXCI+XCIgKyB0aGlzLmxvY2FsaXplKHRoaXMub3B0aW9uc18ubGFiZWwpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9uc18udHJhY2sua2luZCA9PT0gJ2NhcHRpb25zJykge1xuICAgICAgaW5uZXJIVE1MICs9IFwiXFxuICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcInZqcy1pY29uLXBsYWNlaG9sZGVyXFxcIj48L3NwYW4+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwidmpzLWNvbnRyb2wtdGV4dFxcXCI+IFwiICsgdGhpcy5sb2NhbGl6ZSgnQ2FwdGlvbnMnKSArIFwiPC9zcGFuPlxcbiAgICAgIFwiO1xuICAgIH1cblxuICAgIGlubmVySFRNTCArPSAnPC9zcGFuPic7XG5cbiAgICB2YXIgZWwgPSBfVGV4dFRyYWNrTWVudUl0ZW0ucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgdHlwZSwgYXNzaWduKHtcbiAgICAgIGlubmVySFRNTDogaW5uZXJIVE1MXG4gICAgfSwgcHJvcHMpLCBhdHRycyk7XG5cbiAgICByZXR1cm4gZWw7XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNDYXBzTWVudUl0ZW07XG59KFRleHRUcmFja01lbnVJdGVtKTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdTdWJzQ2Fwc01lbnVJdGVtJywgU3Vic0NhcHNNZW51SXRlbSk7XG5cbi8qKlxuICogVGhlIGJ1dHRvbiBjb21wb25lbnQgZm9yIHRvZ2dsaW5nIGFuZCBzZWxlY3RpbmcgY2FwdGlvbnMgYW5kL29yIHN1YnRpdGxlc1xuICpcbiAqIEBleHRlbmRzIFRleHRUcmFja0J1dHRvblxuICovXG5cbnZhciBTdWJzQ2Fwc0J1dHRvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RleHRUcmFja0J1dHRvbikge1xuICBfaW5oZXJpdHNMb29zZShTdWJzQ2Fwc0J1dHRvbiwgX1RleHRUcmFja0J1dHRvbik7XG5cbiAgZnVuY3Rpb24gU3Vic0NhcHNCdXR0b24ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIF90aGlzID0gX1RleHRUcmFja0J1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpczsgLy8gQWx0aG91Z2ggTm9ydGggQW1lcmljYSB1c2VzIFwiY2FwdGlvbnNcIiBpbiBtb3N0IGNhc2VzIGZvclxuICAgIC8vIFwiY2FwdGlvbnMgYW5kIHN1YnRpdGxlc1wiIG90aGVyIGxvY2FsZXMgdXNlIFwic3VidGl0bGVzXCJcblxuICAgIF90aGlzLmxhYmVsXyA9ICdzdWJ0aXRsZXMnO1xuXG4gICAgaWYgKFsnZW4nLCAnZW4tdXMnLCAnZW4tY2EnLCAnZnItY2EnXS5pbmRleE9mKF90aGlzLnBsYXllcl8ubGFuZ3VhZ2VfKSA+IC0xKSB7XG4gICAgICBfdGhpcy5sYWJlbF8gPSAnY2FwdGlvbnMnO1xuICAgIH1cblxuICAgIF90aGlzLm1lbnVCdXR0b25fLmNvbnRyb2xUZXh0KHRvVGl0bGVDYXNlKF90aGlzLmxhYmVsXykpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN1YnNDYXBzQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLXN1YnMtY2Fwcy1idXR0b24gXCIgKyBfVGV4dFRyYWNrQnV0dG9uLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmJ1aWxkV3JhcHBlckNTU0NsYXNzID0gZnVuY3Rpb24gYnVpbGRXcmFwcGVyQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLXN1YnMtY2Fwcy1idXR0b24gXCIgKyBfVGV4dFRyYWNrQnV0dG9uLnByb3RvdHlwZS5idWlsZFdyYXBwZXJDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgY2FwdGlvbi9zdWJ0aXRsZXMgbWVudSBpdGVtc1xuICAgKlxuICAgKiBAcmV0dXJuIHtDYXB0aW9uU2V0dGluZ3NNZW51SXRlbVtdfVxuICAgKiAgICAgICAgIFRoZSBhcnJheSBvZiBjdXJyZW50IG1lbnUgaXRlbXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUl0ZW1zID0gZnVuY3Rpb24gY3JlYXRlSXRlbXMoKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICBpZiAoISh0aGlzLnBsYXllcigpLnRlY2hfICYmIHRoaXMucGxheWVyKCkudGVjaF8uZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzKSAmJiB0aGlzLnBsYXllcigpLmdldENoaWxkKCd0ZXh0VHJhY2tTZXR0aW5ncycpKSB7XG4gICAgICBpdGVtcy5wdXNoKG5ldyBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbSh0aGlzLnBsYXllcl8sIHtcbiAgICAgICAga2luZDogdGhpcy5sYWJlbF9cbiAgICAgIH0pKTtcbiAgICAgIHRoaXMuaGlkZVRocmVzaG9sZF8gKz0gMTtcbiAgICB9XG5cbiAgICBpdGVtcyA9IF9UZXh0VHJhY2tCdXR0b24ucHJvdG90eXBlLmNyZWF0ZUl0ZW1zLmNhbGwodGhpcywgaXRlbXMsIFN1YnNDYXBzTWVudUl0ZW0pO1xuICAgIHJldHVybiBpdGVtcztcbiAgfTtcblxuICByZXR1cm4gU3Vic0NhcHNCdXR0b247XG59KFRleHRUcmFja0J1dHRvbik7XG4vKipcbiAqIGBraW5kYHMgb2YgVGV4dFRyYWNrIHRvIGxvb2sgZm9yIHRvIGFzc29jaWF0ZSBpdCB3aXRoIHRoaXMgbWVudS5cbiAqXG4gKiBAdHlwZSB7YXJyYXl9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuU3Vic0NhcHNCdXR0b24ucHJvdG90eXBlLmtpbmRzXyA9IFsnY2FwdGlvbnMnLCAnc3VidGl0bGVzJ107XG4vKipcbiAqIFRoZSB0ZXh0IHRoYXQgc2hvdWxkIGRpc3BsYXkgb3ZlciB0aGUgYFN1YnNDYXBzQnV0dG9uYHMgY29udHJvbHMuXG4gKlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblN1YnNDYXBzQnV0dG9uLnByb3RvdHlwZS5jb250cm9sVGV4dF8gPSAnU3VidGl0bGVzJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnU3Vic0NhcHNCdXR0b24nLCBTdWJzQ2Fwc0J1dHRvbik7XG5cbi8qKlxuICogQW4ge0BsaW5rIEF1ZGlvVHJhY2t9IHtAbGluayBNZW51SXRlbX1cbiAqXG4gKiBAZXh0ZW5kcyBNZW51SXRlbVxuICovXG5cbnZhciBBdWRpb1RyYWNrTWVudUl0ZW0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9NZW51SXRlbSkge1xuICBfaW5oZXJpdHNMb29zZShBdWRpb1RyYWNrTWVudUl0ZW0sIF9NZW51SXRlbSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBBdWRpb1RyYWNrTWVudUl0ZW0ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIHRyYWNrID0gb3B0aW9ucy50cmFjaztcbiAgICB2YXIgdHJhY2tzID0gcGxheWVyLmF1ZGlvVHJhY2tzKCk7IC8vIE1vZGlmeSBvcHRpb25zIGZvciBwYXJlbnQgTWVudUl0ZW0gY2xhc3MncyBpbml0LlxuXG4gICAgb3B0aW9ucy5sYWJlbCA9IHRyYWNrLmxhYmVsIHx8IHRyYWNrLmxhbmd1YWdlIHx8ICdVbmtub3duJztcbiAgICBvcHRpb25zLnNlbGVjdGVkID0gdHJhY2suZW5hYmxlZDtcbiAgICBfdGhpcyA9IF9NZW51SXRlbS5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy50cmFjayA9IHRyYWNrO1xuXG4gICAgX3RoaXMuYWRkQ2xhc3MoXCJ2anMtXCIgKyB0cmFjay5raW5kICsgXCItbWVudS1pdGVtXCIpO1xuXG4gICAgdmFyIGNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbiBjaGFuZ2VIYW5kbGVyKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmhhbmRsZVRyYWNrc0NoYW5nZS5hcHBseShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgYXJncyk7XG4gICAgfTtcblxuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyKTtcblxuICAgIF90aGlzLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgdHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGNoYW5nZUhhbmRsZXIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEF1ZGlvVHJhY2tNZW51SXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwodHlwZSwgcHJvcHMsIGF0dHJzKSB7XG4gICAgdmFyIGlubmVySFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcInZqcy1tZW51LWl0ZW0tdGV4dFxcXCI+XCIgKyB0aGlzLmxvY2FsaXplKHRoaXMub3B0aW9uc18ubGFiZWwpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9uc18udHJhY2sua2luZCA9PT0gJ21haW4tZGVzYycpIHtcbiAgICAgIGlubmVySFRNTCArPSBcIlxcbiAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJ2anMtaWNvbi1wbGFjZWhvbGRlclxcXCI+PC9zcGFuPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInZqcy1jb250cm9sLXRleHRcXFwiPiBcIiArIHRoaXMubG9jYWxpemUoJ0Rlc2NyaXB0aW9ucycpICsgXCI8L3NwYW4+XFxuICAgICAgXCI7XG4gICAgfVxuXG4gICAgaW5uZXJIVE1MICs9ICc8L3NwYW4+JztcblxuICAgIHZhciBlbCA9IF9NZW51SXRlbS5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCB0eXBlLCBhc3NpZ24oe1xuICAgICAgaW5uZXJIVE1MOiBpbm5lckhUTUxcbiAgICB9LCBwcm9wcyksIGF0dHJzKTtcblxuICAgIHJldHVybiBlbDtcbiAgfVxuICAvKipcbiAgICogVGhpcyBnZXRzIGNhbGxlZCB3aGVuIGFuIGBBdWRpb1RyYWNrTWVudUl0ZW0gaXMgXCJjbGlja2VkXCIuIFNlZSB7QGxpbmsgQ2xpY2thYmxlQ29tcG9uZW50fVxuICAgKiBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IGEgY2xpY2sgY2FuIGJlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYGtleWRvd25gLCBgdGFwYCwgb3IgYGNsaWNrYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRhcFxuICAgKiBAbGlzdGVucyBjbGlja1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIHRyYWNrcyA9IHRoaXMucGxheWVyXy5hdWRpb1RyYWNrcygpO1xuXG4gICAgX01lbnVJdGVtLnByb3RvdHlwZS5oYW5kbGVDbGljay5jYWxsKHRoaXMsIGV2ZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0cmFja3NbaV07XG4gICAgICB0cmFjay5lbmFibGVkID0gdHJhY2sgPT09IHRoaXMudHJhY2s7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYW55IHtAbGluayBBdWRpb1RyYWNrfSBjaGFuZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSB7QGxpbmsgQXVkaW9UcmFja0xpc3QjY2hhbmdlfSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgQXVkaW9UcmFja0xpc3QjY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRyYWNrc0NoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZVRyYWNrc0NoYW5nZShldmVudCkge1xuICAgIHRoaXMuc2VsZWN0ZWQodGhpcy50cmFjay5lbmFibGVkKTtcbiAgfTtcblxuICByZXR1cm4gQXVkaW9UcmFja01lbnVJdGVtO1xufShNZW51SXRlbSk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnQXVkaW9UcmFja01lbnVJdGVtJywgQXVkaW9UcmFja01lbnVJdGVtKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgYnV0dG9ucyB0aGF0IHRvZ2dsZSBzcGVjaWZpYyB7QGxpbmsgQXVkaW9UcmFja30gdHlwZXMuXG4gKlxuICogQGV4dGVuZHMgVHJhY2tCdXR0b25cbiAqL1xuXG52YXIgQXVkaW9UcmFja0J1dHRvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RyYWNrQnV0dG9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKEF1ZGlvVHJhY2tCdXR0b24sIF9UcmFja0J1dHRvbik7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgVGhlIGBQbGF5ZXJgIHRoYXQgdGhpcyBjbGFzcyBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV1cbiAgICogICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBBdWRpb1RyYWNrQnV0dG9uKHBsYXllciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBvcHRpb25zLnRyYWNrcyA9IHBsYXllci5hdWRpb1RyYWNrcygpO1xuICAgIHJldHVybiBfVHJhY2tCdXR0b24uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBET00gYGNsYXNzTmFtZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgRE9NIGBjbGFzc05hbWVgIGZvciB0aGlzIG9iamVjdC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQXVkaW9UcmFja0J1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1hdWRpby1idXR0b24gXCIgKyBfVHJhY2tCdXR0b24ucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uYnVpbGRXcmFwcGVyQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZFdyYXBwZXJDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gXCJ2anMtYXVkaW8tYnV0dG9uIFwiICsgX1RyYWNrQnV0dG9uLnByb3RvdHlwZS5idWlsZFdyYXBwZXJDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBtZW51IGl0ZW0gZm9yIGVhY2ggYXVkaW8gdHJhY2tcbiAgICpcbiAgICogQHBhcmFtIHtBdWRpb1RyYWNrTWVudUl0ZW1bXX0gW2l0ZW1zPVtdXVxuICAgKiAgICAgICAgQW4gYXJyYXkgb2YgZXhpc3RpbmcgbWVudSBpdGVtcyB0byB1c2UuXG4gICAqXG4gICAqIEByZXR1cm4ge0F1ZGlvVHJhY2tNZW51SXRlbVtdfVxuICAgKiAgICAgICAgIEFuIGFycmF5IG9mIG1lbnUgaXRlbXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlSXRlbXMgPSBmdW5jdGlvbiBjcmVhdGVJdGVtcyhpdGVtcykge1xuICAgIGlmIChpdGVtcyA9PT0gdm9pZCAwKSB7XG4gICAgICBpdGVtcyA9IFtdO1xuICAgIH1cblxuICAgIC8vIGlmIHRoZXJlJ3Mgb25seSBvbmUgYXVkaW8gdHJhY2ssIHRoZXJlIG5vIHBvaW50IGluIHNob3dpbmcgaXRcbiAgICB0aGlzLmhpZGVUaHJlc2hvbGRfID0gMTtcbiAgICB2YXIgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLmF1ZGlvVHJhY2tzKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW2ldO1xuICAgICAgaXRlbXMucHVzaChuZXcgQXVkaW9UcmFja01lbnVJdGVtKHRoaXMucGxheWVyXywge1xuICAgICAgICB0cmFjazogdHJhY2ssXG4gICAgICAgIC8vIE1lbnVJdGVtIGlzIHNlbGVjdGFibGVcbiAgICAgICAgc2VsZWN0YWJsZTogdHJ1ZSxcbiAgICAgICAgLy8gTWVudUl0ZW0gaXMgTk9UIG11bHRpU2VsZWN0YWJsZSAoaS5lLiBvbmx5IG9uZSBjYW4gYmUgbWFya2VkIFwic2VsZWN0ZWRcIiBhdCBhIHRpbWUpXG4gICAgICAgIG11bHRpU2VsZWN0YWJsZTogZmFsc2VcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbXM7XG4gIH07XG5cbiAgcmV0dXJuIEF1ZGlvVHJhY2tCdXR0b247XG59KFRyYWNrQnV0dG9uKTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgQXVkaW9UcmFja0J1dHRvbmBzIGNvbnRyb2xzLiBBZGRlZCBmb3IgbG9jYWxpemF0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuQXVkaW9UcmFja0J1dHRvbi5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ0F1ZGlvIFRyYWNrJztcbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnQXVkaW9UcmFja0J1dHRvbicsIEF1ZGlvVHJhY2tCdXR0b24pO1xuXG4vKipcbiAqIFRoZSBzcGVjaWZpYyBtZW51IGl0ZW0gdHlwZSBmb3Igc2VsZWN0aW5nIGEgcGxheWJhY2sgcmF0ZS5cbiAqXG4gKiBAZXh0ZW5kcyBNZW51SXRlbVxuICovXG5cbnZhciBQbGF5YmFja1JhdGVNZW51SXRlbSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01lbnVJdGVtKSB7XG4gIF9pbmhlcml0c0xvb3NlKFBsYXliYWNrUmF0ZU1lbnVJdGVtLCBfTWVudUl0ZW0pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gUGxheWJhY2tSYXRlTWVudUl0ZW0ocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIGxhYmVsID0gb3B0aW9ucy5yYXRlO1xuICAgIHZhciByYXRlID0gcGFyc2VGbG9hdChsYWJlbCwgMTApOyAvLyBNb2RpZnkgb3B0aW9ucyBmb3IgcGFyZW50IE1lbnVJdGVtIGNsYXNzJ3MgaW5pdC5cblxuICAgIG9wdGlvbnMubGFiZWwgPSBsYWJlbDtcbiAgICBvcHRpb25zLnNlbGVjdGVkID0gcmF0ZSA9PT0gMTtcbiAgICBvcHRpb25zLnNlbGVjdGFibGUgPSB0cnVlO1xuICAgIG9wdGlvbnMubXVsdGlTZWxlY3RhYmxlID0gZmFsc2U7XG4gICAgX3RoaXMgPSBfTWVudUl0ZW0uY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMubGFiZWwgPSBsYWJlbDtcbiAgICBfdGhpcy5yYXRlID0gcmF0ZTtcblxuICAgIF90aGlzLm9uKHBsYXllciwgJ3JhdGVjaGFuZ2UnLCBfdGhpcy51cGRhdGUpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGdldHMgY2FsbGVkIHdoZW4gYW4gYFBsYXliYWNrUmF0ZU1lbnVJdGVtYCBpcyBcImNsaWNrZWRcIi4gU2VlXG4gICAqIHtAbGluayBDbGlja2FibGVDb21wb25lbnR9IGZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgYSBjbGljayBjYW4gYmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAsIGB0YXBgLCBvciBgY2xpY2tgIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gYmVcbiAgICogICAgICAgIGNhbGxlZC5cbiAgICpcbiAgICogQGxpc3RlbnMgdGFwXG4gICAqIEBsaXN0ZW5zIGNsaWNrXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFBsYXliYWNrUmF0ZU1lbnVJdGVtLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIF9NZW51SXRlbS5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzKTtcblxuICAgIHRoaXMucGxheWVyKCkucGxheWJhY2tSYXRlKHRoaXMucmF0ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgUGxheWJhY2tSYXRlTWVudUl0ZW0gd2hlbiB0aGUgcGxheWJhY2tyYXRlIGNoYW5nZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBgcmF0ZWNoYW5nZWAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNyYXRlY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShldmVudCkge1xuICAgIHRoaXMuc2VsZWN0ZWQodGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUoKSA9PT0gdGhpcy5yYXRlKTtcbiAgfTtcblxuICByZXR1cm4gUGxheWJhY2tSYXRlTWVudUl0ZW07XG59KE1lbnVJdGVtKTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgUGxheWJhY2tSYXRlTWVudUl0ZW1gcyBjb250cm9scy4gQWRkZWQgZm9yIGxvY2FsaXphdGlvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuXG5cblBsYXliYWNrUmF0ZU1lbnVJdGVtLnByb3RvdHlwZS5jb250ZW50RWxUeXBlID0gJ2J1dHRvbic7XG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1BsYXliYWNrUmF0ZU1lbnVJdGVtJywgUGxheWJhY2tSYXRlTWVudUl0ZW0pO1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgZm9yIGNvbnRyb2xsaW5nIHRoZSBwbGF5YmFjayByYXRlLlxuICpcbiAqIEBleHRlbmRzIE1lbnVCdXR0b25cbiAqL1xuXG52YXIgUGxheWJhY2tSYXRlTWVudUJ1dHRvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01lbnVCdXR0b24pIHtcbiAgX2luaGVyaXRzTG9vc2UoUGxheWJhY2tSYXRlTWVudUJ1dHRvbiwgX01lbnVCdXR0b24pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBUaGUga2V5L3ZhbHVlIHN0b3JlIG9mIHBsYXllciBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gUGxheWJhY2tSYXRlTWVudUJ1dHRvbihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9NZW51QnV0dG9uLmNhbGwodGhpcywgcGxheWVyLCBvcHRpb25zKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMudXBkYXRlVmlzaWJpbGl0eSgpO1xuXG4gICAgX3RoaXMudXBkYXRlTGFiZWwoKTtcblxuICAgIF90aGlzLm9uKHBsYXllciwgJ2xvYWRzdGFydCcsIF90aGlzLnVwZGF0ZVZpc2liaWxpdHkpO1xuXG4gICAgX3RoaXMub24ocGxheWVyLCAncmF0ZWNoYW5nZScsIF90aGlzLnVwZGF0ZUxhYmVsKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgQ29tcG9uZW50YCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIGVsZW1lbnQgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUGxheWJhY2tSYXRlTWVudUJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwkMSgpIHtcbiAgICB2YXIgZWwgPSBfTWVudUJ1dHRvbi5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubGFiZWxFbF8gPSBjcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXBsYXliYWNrLXJhdGUtdmFsdWUnLFxuICAgICAgaW5uZXJIVE1MOiAnMXgnXG4gICAgfSk7XG4gICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5sYWJlbEVsXyk7XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLmxhYmVsRWxfID0gbnVsbDtcblxuICAgIF9NZW51QnV0dG9uLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBET00gYGNsYXNzTmFtZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgRE9NIGBjbGFzc05hbWVgIGZvciB0aGlzIG9iamVjdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLXBsYXliYWNrLXJhdGUgXCIgKyBfTWVudUJ1dHRvbi5wcm90b3R5cGUuYnVpbGRDU1NDbGFzcy5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5idWlsZFdyYXBwZXJDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkV3JhcHBlckNTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1wbGF5YmFjay1yYXRlIFwiICsgX01lbnVCdXR0b24ucHJvdG90eXBlLmJ1aWxkV3JhcHBlckNTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgcGxheWJhY2sgcmF0ZSBtZW51XG4gICAqXG4gICAqIEByZXR1cm4ge01lbnV9XG4gICAqICAgICAgICAgTWVudSBvYmplY3QgcG9wdWxhdGVkIHdpdGgge0BsaW5rIFBsYXliYWNrUmF0ZU1lbnVJdGVtfXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlTWVudSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbnUoKSB7XG4gICAgdmFyIG1lbnUgPSBuZXcgTWVudSh0aGlzLnBsYXllcigpKTtcbiAgICB2YXIgcmF0ZXMgPSB0aGlzLnBsYXliYWNrUmF0ZXMoKTtcblxuICAgIGlmIChyYXRlcykge1xuICAgICAgZm9yICh2YXIgaSA9IHJhdGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIG1lbnUuYWRkQ2hpbGQobmV3IFBsYXliYWNrUmF0ZU1lbnVJdGVtKHRoaXMucGxheWVyKCksIHtcbiAgICAgICAgICByYXRlOiByYXRlc1tpXSArICd4J1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbnU7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgQVJJQSBhY2Nlc3NpYmlsaXR5IGF0dHJpYnV0ZXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlQVJJQUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiB1cGRhdGVBUklBQXR0cmlidXRlcygpIHtcbiAgICAvLyBDdXJyZW50IHBsYXliYWNrIHJhdGVcbiAgICB0aGlzLmVsKCkuc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVlbm93JywgdGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUoKSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBhbiBgUGxheWJhY2tSYXRlTWVudUJ1dHRvbmAgaXMgXCJjbGlja2VkXCIuIFNlZVxuICAgKiB7QGxpbmsgQ2xpY2thYmxlQ29tcG9uZW50fSBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IGEgY2xpY2sgY2FuIGJlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgYGtleWRvd25gLCBgdGFwYCwgb3IgYGNsaWNrYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlXG4gICAqICAgICAgICBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIHRhcFxuICAgKiBAbGlzdGVucyBjbGlja1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgLy8gc2VsZWN0IG5leHQgcmF0ZSBvcHRpb25cbiAgICB2YXIgY3VycmVudFJhdGUgPSB0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSgpO1xuICAgIHZhciByYXRlcyA9IHRoaXMucGxheWJhY2tSYXRlcygpOyAvLyB0aGlzIHdpbGwgc2VsZWN0IGZpcnN0IG9uZSBpZiB0aGUgbGFzdCBvbmUgY3VycmVudGx5IHNlbGVjdGVkXG5cbiAgICB2YXIgbmV3UmF0ZSA9IHJhdGVzWzBdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJhdGVzW2ldID4gY3VycmVudFJhdGUpIHtcbiAgICAgICAgbmV3UmF0ZSA9IHJhdGVzW2ldO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZShuZXdSYXRlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHBvc3NpYmxlIHBsYXliYWNrIHJhdGVzXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKiAgICAgICAgIEFsbCBwb3NzaWJsZSBwbGF5YmFjayByYXRlc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wbGF5YmFja1JhdGVzID0gZnVuY3Rpb24gcGxheWJhY2tSYXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zXy5wbGF5YmFja1JhdGVzIHx8IHRoaXMub3B0aW9uc18ucGxheWVyT3B0aW9ucyAmJiB0aGlzLm9wdGlvbnNfLnBsYXllck9wdGlvbnMucGxheWJhY2tSYXRlcztcbiAgfVxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgcGxheWJhY2sgcmF0ZXMgaXMgc3VwcG9ydGVkIGJ5IHRoZSB0ZWNoXG4gICAqIGFuZCBhbiBhcnJheSBvZiBwbGF5YmFjayByYXRlcyBleGlzdHNcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICBXaGV0aGVyIGNoYW5naW5nIHBsYXliYWNrIHJhdGUgaXMgc3VwcG9ydGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBsYXliYWNrUmF0ZVN1cHBvcnRlZCA9IGZ1bmN0aW9uIHBsYXliYWNrUmF0ZVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIoKS50ZWNoXyAmJiB0aGlzLnBsYXllcigpLnRlY2hfLmZlYXR1cmVzUGxheWJhY2tSYXRlICYmIHRoaXMucGxheWJhY2tSYXRlcygpICYmIHRoaXMucGxheWJhY2tSYXRlcygpLmxlbmd0aCA+IDA7XG4gIH1cbiAgLyoqXG4gICAqIEhpZGUgcGxheWJhY2sgcmF0ZSBjb250cm9scyB3aGVuIHRoZXkncmUgbm8gcGxheWJhY2sgcmF0ZSBvcHRpb25zIHRvIHNlbGVjdFxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBbZXZlbnRdXG4gICAqICAgICAgICBUaGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBydW4uXG4gICAqXG4gICAqIEBsaXN0ZW5zIFBsYXllciNsb2Fkc3RhcnRcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlVmlzaWJpbGl0eSA9IGZ1bmN0aW9uIHVwZGF0ZVZpc2liaWxpdHkoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wbGF5YmFja1JhdGVTdXBwb3J0ZWQoKSkge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWhpZGRlbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgYnV0dG9uIGxhYmVsIHdoZW4gcmF0ZSBjaGFuZ2VkXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IFtldmVudF1cbiAgICogICAgICAgIFRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIHJ1bi5cbiAgICpcbiAgICogQGxpc3RlbnMgUGxheWVyI3JhdGVjaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlTGFiZWwgPSBmdW5jdGlvbiB1cGRhdGVMYWJlbChldmVudCkge1xuICAgIGlmICh0aGlzLnBsYXliYWNrUmF0ZVN1cHBvcnRlZCgpKSB7XG4gICAgICB0aGlzLmxhYmVsRWxfLmlubmVySFRNTCA9IHRoaXMucGxheWVyKCkucGxheWJhY2tSYXRlKCkgKyAneCc7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBQbGF5YmFja1JhdGVNZW51QnV0dG9uO1xufShNZW51QnV0dG9uKTtcbi8qKlxuICogVGhlIHRleHQgdGhhdCBzaG91bGQgZGlzcGxheSBvdmVyIHRoZSBgRnVsbHNjcmVlblRvZ2dsZWBzIGNvbnRyb2xzLiBBZGRlZCBmb3IgbG9jYWxpemF0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuUGxheWJhY2tSYXRlTWVudUJ1dHRvbi5wcm90b3R5cGUuY29udHJvbFRleHRfID0gJ1BsYXliYWNrIFJhdGUnO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdQbGF5YmFja1JhdGVNZW51QnV0dG9uJywgUGxheWJhY2tSYXRlTWVudUJ1dHRvbik7XG5cbi8qKlxuICogSnVzdCBhbiBlbXB0eSBzcGFjZXIgZWxlbWVudCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIGFwcGVuZCBwb2ludCBmb3IgcGx1Z2lucywgZXRjLlxuICogQWxzbyBjYW4gYmUgdXNlZCB0byBjcmVhdGUgc3BhY2UgYmV0d2VlbiBlbGVtZW50cyB3aGVuIG5lY2Vzc2FyeS5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgU3BhY2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFNwYWNlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3BhY2VyKCkge1xuICAgIHJldHVybiBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTcGFjZXIucHJvdG90eXBlO1xuXG4gIC8qKlxuICAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBET00gYGNsYXNzTmFtZWAuXG4gICpcbiAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICogICAgICAgICBUaGUgRE9NIGBjbGFzc05hbWVgIGZvciB0aGlzIG9iamVjdC5cbiAgKi9cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1zcGFjZXIgXCIgKyBfQ29tcG9uZW50LnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYENvbXBvbmVudGAncyBET00gZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENTU0NsYXNzKClcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3BhY2VyO1xufShDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1NwYWNlcicsIFNwYWNlcik7XG5cbi8qKlxuICogU3BhY2VyIHNwZWNpZmljYWxseSBtZWFudCB0byBiZSB1c2VkIGFzIGFuIGluc2VydGlvbiBwb2ludCBmb3IgbmV3IHBsdWdpbnMsIGV0Yy5cbiAqXG4gKiBAZXh0ZW5kcyBTcGFjZXJcbiAqL1xuXG52YXIgQ3VzdG9tQ29udHJvbFNwYWNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1NwYWNlcikge1xuICBfaW5oZXJpdHNMb29zZShDdXN0b21Db250cm9sU3BhY2VyLCBfU3BhY2VyKTtcblxuICBmdW5jdGlvbiBDdXN0b21Db250cm9sU3BhY2VyKCkge1xuICAgIHJldHVybiBfU3BhY2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDdXN0b21Db250cm9sU3BhY2VyLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQnVpbGRzIHRoZSBkZWZhdWx0IERPTSBgY2xhc3NOYW1lYC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBET00gYGNsYXNzTmFtZWAgZm9yIHRoaXMgb2JqZWN0LlxuICAgKi9cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBcInZqcy1jdXN0b20tY29udHJvbC1zcGFjZXIgXCIgKyBfU3BhY2VyLnByb3RvdHlwZS5idWlsZENTU0NsYXNzLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYENvbXBvbmVudGAncyBET00gZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgdmFyIGVsID0gX1NwYWNlci5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCB7XG4gICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRDU1NDbGFzcygpXG4gICAgfSk7IC8vIE5vLWZsZXgvdGFibGUtY2VsbCBtb2RlIHJlcXVpcmVzIHRoZXJlIGJlIHNvbWUgY29udGVudFxuICAgIC8vIGluIHRoZSBjZWxsIHRvIGZpbGwgdGhlIHJlbWFpbmluZyBzcGFjZSBvZiB0aGUgdGFibGUuXG5cblxuICAgIGVsLmlubmVySFRNTCA9IFwiXFx4QTBcIjtcbiAgICByZXR1cm4gZWw7XG4gIH07XG5cbiAgcmV0dXJuIEN1c3RvbUNvbnRyb2xTcGFjZXI7XG59KFNwYWNlcik7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnQ3VzdG9tQ29udHJvbFNwYWNlcicsIEN1c3RvbUNvbnRyb2xTcGFjZXIpO1xuXG4vKipcbiAqIENvbnRhaW5lciBvZiBtYWluIGNvbnRyb2xzLlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5cbnZhciBDb250cm9sQmFyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENvbnRyb2xCYXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbnRyb2xCYXIoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENvbnRyb2xCYXIucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBDb21wb25lbnRgJ3MgRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgX3Byb3RvLmNyZWF0ZUVsID0gZnVuY3Rpb24gY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jb250cm9sLWJhcicsXG4gICAgICBkaXI6ICdsdHInXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIENvbnRyb2xCYXI7XG59KENvbXBvbmVudCk7XG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBmb3IgYENvbnRyb2xCYXJgXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5Db250cm9sQmFyLnByb3RvdHlwZS5vcHRpb25zXyA9IHtcbiAgY2hpbGRyZW46IFsncGxheVRvZ2dsZScsICd2b2x1bWVQYW5lbCcsICdjdXJyZW50VGltZURpc3BsYXknLCAndGltZURpdmlkZXInLCAnZHVyYXRpb25EaXNwbGF5JywgJ3Byb2dyZXNzQ29udHJvbCcsICdsaXZlRGlzcGxheScsICdzZWVrVG9MaXZlJywgJ3JlbWFpbmluZ1RpbWVEaXNwbGF5JywgJ2N1c3RvbUNvbnRyb2xTcGFjZXInLCAncGxheWJhY2tSYXRlTWVudUJ1dHRvbicsICdjaGFwdGVyc0J1dHRvbicsICdkZXNjcmlwdGlvbnNCdXR0b24nLCAnc3Vic0NhcHNCdXR0b24nLCAnYXVkaW9UcmFja0J1dHRvbicsICdmdWxsc2NyZWVuVG9nZ2xlJ11cbn07XG5cbmlmICgnZXhpdFBpY3R1cmVJblBpY3R1cmUnIGluIGRvY3VtZW50KSB7XG4gIENvbnRyb2xCYXIucHJvdG90eXBlLm9wdGlvbnNfLmNoaWxkcmVuLnNwbGljZShDb250cm9sQmFyLnByb3RvdHlwZS5vcHRpb25zXy5jaGlsZHJlbi5sZW5ndGggLSAxLCAwLCAncGljdHVyZUluUGljdHVyZVRvZ2dsZScpO1xufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0NvbnRyb2xCYXInLCBDb250cm9sQmFyKTtcblxuLyoqXG4gKiBBIGRpc3BsYXkgdGhhdCBpbmRpY2F0ZXMgYW4gZXJyb3IgaGFzIG9jY3VycmVkLiBUaGlzIG1lYW5zIHRoYXQgdGhlIHZpZGVvXG4gKiBpcyB1bnBsYXlhYmxlLlxuICpcbiAqIEBleHRlbmRzIE1vZGFsRGlhbG9nXG4gKi9cblxudmFyIEVycm9yRGlzcGxheSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01vZGFsRGlhbG9nKSB7XG4gIF9pbmhlcml0c0xvb3NlKEVycm9yRGlzcGxheSwgX01vZGFsRGlhbG9nKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgIFRoZSBrZXkvdmFsdWUgc3RvcmUgb2YgcGxheWVyIG9wdGlvbnMuXG4gICAqL1xuICBmdW5jdGlvbiBFcnJvckRpc3BsYXkocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfTW9kYWxEaWFsb2cuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5vbihwbGF5ZXIsICdlcnJvcicsIF90aGlzLm9wZW4pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGRlZmF1bHQgRE9NIGBjbGFzc05hbWVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIERPTSBgY2xhc3NOYW1lYCBmb3IgdGhpcyBvYmplY3QuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFNpbmNlIHZlcnNpb24gNS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gRXJyb3JEaXNwbGF5LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGRDU1NDbGFzcyA9IGZ1bmN0aW9uIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFwidmpzLWVycm9yLWRpc3BsYXkgXCIgKyBfTW9kYWxEaWFsb2cucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgbG9jYWxpemVkIGVycm9yIG1lc3NhZ2UgYmFzZWQgb24gdGhlIGBQbGF5ZXJgcyBlcnJvci5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBgUGxheWVyYHMgZXJyb3IgbWVzc2FnZSBsb2NhbGl6ZWQgb3IgYW4gZW1wdHkgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb250ZW50ID0gZnVuY3Rpb24gY29udGVudCgpIHtcbiAgICB2YXIgZXJyb3IgPSB0aGlzLnBsYXllcigpLmVycm9yKCk7XG4gICAgcmV0dXJuIGVycm9yID8gdGhpcy5sb2NhbGl6ZShlcnJvci5tZXNzYWdlKSA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBFcnJvckRpc3BsYXk7XG59KE1vZGFsRGlhbG9nKTtcbi8qKlxuICogVGhlIGRlZmF1bHQgb3B0aW9ucyBmb3IgYW4gYEVycm9yRGlzcGxheWAuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbkVycm9yRGlzcGxheS5wcm90b3R5cGUub3B0aW9uc18gPSBfZXh0ZW5kcyh7fSwgTW9kYWxEaWFsb2cucHJvdG90eXBlLm9wdGlvbnNfLCB7XG4gIHBhdXNlT25PcGVuOiBmYWxzZSxcbiAgZmlsbEFsd2F5czogdHJ1ZSxcbiAgdGVtcG9yYXJ5OiBmYWxzZSxcbiAgdW5jbG9zZWFibGU6IHRydWVcbn0pO1xuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdFcnJvckRpc3BsYXknLCBFcnJvckRpc3BsYXkpO1xuXG52YXIgTE9DQUxfU1RPUkFHRV9LRVkgPSAndmpzLXRleHQtdHJhY2stc2V0dGluZ3MnO1xudmFyIENPTE9SX0JMQUNLID0gWycjMDAwJywgJ0JsYWNrJ107XG52YXIgQ09MT1JfQkxVRSA9IFsnIzAwRicsICdCbHVlJ107XG52YXIgQ09MT1JfQ1lBTiA9IFsnIzBGRicsICdDeWFuJ107XG52YXIgQ09MT1JfR1JFRU4gPSBbJyMwRjAnLCAnR3JlZW4nXTtcbnZhciBDT0xPUl9NQUdFTlRBID0gWycjRjBGJywgJ01hZ2VudGEnXTtcbnZhciBDT0xPUl9SRUQgPSBbJyNGMDAnLCAnUmVkJ107XG52YXIgQ09MT1JfV0hJVEUgPSBbJyNGRkYnLCAnV2hpdGUnXTtcbnZhciBDT0xPUl9ZRUxMT1cgPSBbJyNGRjAnLCAnWWVsbG93J107XG52YXIgT1BBQ0lUWV9PUEFRVUUgPSBbJzEnLCAnT3BhcXVlJ107XG52YXIgT1BBQ0lUWV9TRU1JID0gWycwLjUnLCAnU2VtaS1UcmFuc3BhcmVudCddO1xudmFyIE9QQUNJVFlfVFJBTlMgPSBbJzAnLCAnVHJhbnNwYXJlbnQnXTsgLy8gQ29uZmlndXJhdGlvbiBmb3IgdGhlIHZhcmlvdXMgPHNlbGVjdD4gZWxlbWVudHMgaW4gdGhlIERPTSBvZiB0aGlzIGNvbXBvbmVudC5cbi8vXG4vLyBQb3NzaWJsZSBrZXlzIGluY2x1ZGU6XG4vL1xuLy8gYGRlZmF1bHRgOlxuLy8gICBUaGUgZGVmYXVsdCBvcHRpb24gaW5kZXguIE9ubHkgbmVlZHMgdG8gYmUgcHJvdmlkZWQgaWYgbm90IHplcm8uXG4vLyBgcGFyc2VyYDpcbi8vICAgQSBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIHBhcnNlIHRoZSB2YWx1ZSBmcm9tIHRoZSBzZWxlY3RlZCBvcHRpb24gaW5cbi8vICAgYSBjdXN0b21pemVkIHdheS5cbi8vIGBzZWxlY3RvcmA6XG4vLyAgIFRoZSBzZWxlY3RvciB1c2VkIHRvIGZpbmQgdGhlIGFzc29jaWF0ZWQgPHNlbGVjdD4gZWxlbWVudC5cblxudmFyIHNlbGVjdENvbmZpZ3MgPSB7XG4gIGJhY2tncm91bmRDb2xvcjoge1xuICAgIHNlbGVjdG9yOiAnLnZqcy1iZy1jb2xvciA+IHNlbGVjdCcsXG4gICAgaWQ6ICdjYXB0aW9ucy1iYWNrZ3JvdW5kLWNvbG9yLSVzJyxcbiAgICBsYWJlbDogJ0NvbG9yJyxcbiAgICBvcHRpb25zOiBbQ09MT1JfQkxBQ0ssIENPTE9SX1dISVRFLCBDT0xPUl9SRUQsIENPTE9SX0dSRUVOLCBDT0xPUl9CTFVFLCBDT0xPUl9ZRUxMT1csIENPTE9SX01BR0VOVEEsIENPTE9SX0NZQU5dXG4gIH0sXG4gIGJhY2tncm91bmRPcGFjaXR5OiB7XG4gICAgc2VsZWN0b3I6ICcudmpzLWJnLW9wYWNpdHkgPiBzZWxlY3QnLFxuICAgIGlkOiAnY2FwdGlvbnMtYmFja2dyb3VuZC1vcGFjaXR5LSVzJyxcbiAgICBsYWJlbDogJ1RyYW5zcGFyZW5jeScsXG4gICAgb3B0aW9uczogW09QQUNJVFlfT1BBUVVFLCBPUEFDSVRZX1NFTUksIE9QQUNJVFlfVFJBTlNdXG4gIH0sXG4gIGNvbG9yOiB7XG4gICAgc2VsZWN0b3I6ICcudmpzLWZnLWNvbG9yID4gc2VsZWN0JyxcbiAgICBpZDogJ2NhcHRpb25zLWZvcmVncm91bmQtY29sb3ItJXMnLFxuICAgIGxhYmVsOiAnQ29sb3InLFxuICAgIG9wdGlvbnM6IFtDT0xPUl9XSElURSwgQ09MT1JfQkxBQ0ssIENPTE9SX1JFRCwgQ09MT1JfR1JFRU4sIENPTE9SX0JMVUUsIENPTE9SX1lFTExPVywgQ09MT1JfTUFHRU5UQSwgQ09MT1JfQ1lBTl1cbiAgfSxcbiAgZWRnZVN0eWxlOiB7XG4gICAgc2VsZWN0b3I6ICcudmpzLWVkZ2Utc3R5bGUgPiBzZWxlY3QnLFxuICAgIGlkOiAnJXMnLFxuICAgIGxhYmVsOiAnVGV4dCBFZGdlIFN0eWxlJyxcbiAgICBvcHRpb25zOiBbWydub25lJywgJ05vbmUnXSwgWydyYWlzZWQnLCAnUmFpc2VkJ10sIFsnZGVwcmVzc2VkJywgJ0RlcHJlc3NlZCddLCBbJ3VuaWZvcm0nLCAnVW5pZm9ybSddLCBbJ2Ryb3BzaGFkb3cnLCAnRHJvcHNoYWRvdyddXVxuICB9LFxuICBmb250RmFtaWx5OiB7XG4gICAgc2VsZWN0b3I6ICcudmpzLWZvbnQtZmFtaWx5ID4gc2VsZWN0JyxcbiAgICBpZDogJ2NhcHRpb25zLWZvbnQtZmFtaWx5LSVzJyxcbiAgICBsYWJlbDogJ0ZvbnQgRmFtaWx5JyxcbiAgICBvcHRpb25zOiBbWydwcm9wb3J0aW9uYWxTYW5zU2VyaWYnLCAnUHJvcG9ydGlvbmFsIFNhbnMtU2VyaWYnXSwgWydtb25vc3BhY2VTYW5zU2VyaWYnLCAnTW9ub3NwYWNlIFNhbnMtU2VyaWYnXSwgWydwcm9wb3J0aW9uYWxTZXJpZicsICdQcm9wb3J0aW9uYWwgU2VyaWYnXSwgWydtb25vc3BhY2VTZXJpZicsICdNb25vc3BhY2UgU2VyaWYnXSwgWydjYXN1YWwnLCAnQ2FzdWFsJ10sIFsnc2NyaXB0JywgJ1NjcmlwdCddLCBbJ3NtYWxsLWNhcHMnLCAnU21hbGwgQ2FwcyddXVxuICB9LFxuICBmb250UGVyY2VudDoge1xuICAgIHNlbGVjdG9yOiAnLnZqcy1mb250LXBlcmNlbnQgPiBzZWxlY3QnLFxuICAgIGlkOiAnY2FwdGlvbnMtZm9udC1zaXplLSVzJyxcbiAgICBsYWJlbDogJ0ZvbnQgU2l6ZScsXG4gICAgb3B0aW9uczogW1snMC41MCcsICc1MCUnXSwgWycwLjc1JywgJzc1JSddLCBbJzEuMDAnLCAnMTAwJSddLCBbJzEuMjUnLCAnMTI1JSddLCBbJzEuNTAnLCAnMTUwJSddLCBbJzEuNzUnLCAnMTc1JSddLCBbJzIuMDAnLCAnMjAwJSddLCBbJzMuMDAnLCAnMzAwJSddLCBbJzQuMDAnLCAnNDAwJSddXSxcbiAgICBcImRlZmF1bHRcIjogMixcbiAgICBwYXJzZXI6IGZ1bmN0aW9uIHBhcnNlcih2KSB7XG4gICAgICByZXR1cm4gdiA9PT0gJzEuMDAnID8gbnVsbCA6IE51bWJlcih2KTtcbiAgICB9XG4gIH0sXG4gIHRleHRPcGFjaXR5OiB7XG4gICAgc2VsZWN0b3I6ICcudmpzLXRleHQtb3BhY2l0eSA+IHNlbGVjdCcsXG4gICAgaWQ6ICdjYXB0aW9ucy1mb3JlZ3JvdW5kLW9wYWNpdHktJXMnLFxuICAgIGxhYmVsOiAnVHJhbnNwYXJlbmN5JyxcbiAgICBvcHRpb25zOiBbT1BBQ0lUWV9PUEFRVUUsIE9QQUNJVFlfU0VNSV1cbiAgfSxcbiAgLy8gT3B0aW9ucyBmb3IgdGhpcyBvYmplY3QgYXJlIGRlZmluZWQgYmVsb3cuXG4gIHdpbmRvd0NvbG9yOiB7XG4gICAgc2VsZWN0b3I6ICcudmpzLXdpbmRvdy1jb2xvciA+IHNlbGVjdCcsXG4gICAgaWQ6ICdjYXB0aW9ucy13aW5kb3ctY29sb3ItJXMnLFxuICAgIGxhYmVsOiAnQ29sb3InXG4gIH0sXG4gIC8vIE9wdGlvbnMgZm9yIHRoaXMgb2JqZWN0IGFyZSBkZWZpbmVkIGJlbG93LlxuICB3aW5kb3dPcGFjaXR5OiB7XG4gICAgc2VsZWN0b3I6ICcudmpzLXdpbmRvdy1vcGFjaXR5ID4gc2VsZWN0JyxcbiAgICBpZDogJ2NhcHRpb25zLXdpbmRvdy1vcGFjaXR5LSVzJyxcbiAgICBsYWJlbDogJ1RyYW5zcGFyZW5jeScsXG4gICAgb3B0aW9uczogW09QQUNJVFlfVFJBTlMsIE9QQUNJVFlfU0VNSSwgT1BBQ0lUWV9PUEFRVUVdXG4gIH1cbn07XG5zZWxlY3RDb25maWdzLndpbmRvd0NvbG9yLm9wdGlvbnMgPSBzZWxlY3RDb25maWdzLmJhY2tncm91bmRDb2xvci5vcHRpb25zO1xuLyoqXG4gKiBHZXQgdGhlIGFjdHVhbCB2YWx1ZSBvZiBhbiBvcHRpb24uXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZVxuICogICAgICAgICBUaGUgdmFsdWUgdG8gZ2V0XG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb259IFtwYXJzZXJdXG4gKiAgICAgICAgIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGFkanVzdCB0aGUgdmFsdWUuXG4gKlxuICogQHJldHVybiB7TWl4ZWR9XG4gKiAgICAgICAgIC0gV2lsbCBiZSBgdW5kZWZpbmVkYCBpZiBubyB2YWx1ZSBleGlzdHNcbiAqICAgICAgICAgLSBXaWxsIGJlIGB1bmRlZmluZWRgIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBcIm5vbmVcIi5cbiAqICAgICAgICAgLSBXaWxsIGJlIHRoZSBhY3R1YWwgdmFsdWUgb3RoZXJ3aXNlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VPcHRpb25WYWx1ZSh2YWx1ZSwgcGFyc2VyKSB7XG4gIGlmIChwYXJzZXIpIHtcbiAgICB2YWx1ZSA9IHBhcnNlcih2YWx1ZSk7XG4gIH1cblxuICBpZiAodmFsdWUgJiYgdmFsdWUgIT09ICdub25lJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0ZWQgPG9wdGlvbj4gZWxlbWVudCB3aXRoaW4gYSA8c2VsZWN0PiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR9IGVsXG4gKiAgICAgICAgIHRoZSBlbGVtZW50IHRvIGxvb2sgaW5cbiAqXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gW3BhcnNlcl1cbiAqICAgICAgICAgT3B0aW9uYWwgZnVuY3Rpb24gdG8gYWRqdXN0IHRoZSB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqICAgICAgICAgLSBXaWxsIGJlIGB1bmRlZmluZWRgIGlmIG5vIHZhbHVlIGV4aXN0c1xuICogICAgICAgICAtIFdpbGwgYmUgYHVuZGVmaW5lZGAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIFwibm9uZVwiLlxuICogICAgICAgICAtIFdpbGwgYmUgdGhlIGFjdHVhbCB2YWx1ZSBvdGhlcndpc2UuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFNlbGVjdGVkT3B0aW9uVmFsdWUoZWwsIHBhcnNlcikge1xuICB2YXIgdmFsdWUgPSBlbC5vcHRpb25zW2VsLm9wdGlvbnMuc2VsZWN0ZWRJbmRleF0udmFsdWU7XG4gIHJldHVybiBwYXJzZU9wdGlvblZhbHVlKHZhbHVlLCBwYXJzZXIpO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBzZWxlY3RlZCA8b3B0aW9uPiBlbGVtZW50IHdpdGhpbiBhIDxzZWxlY3Q+IGVsZW1lbnQgYmFzZWQgb24gYVxuICogZ2l2ZW4gdmFsdWUuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogICAgICAgIFRoZSBlbGVtZW50IHRvIGxvb2sgaW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgICAgICAgdGhlIHByb3BlcnR5IHRvIGxvb2sgb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3BhcnNlcl1cbiAqICAgICAgICBPcHRpb25hbCBmdW5jdGlvbiB0byBhZGp1c3QgdGhlIHZhbHVlIGJlZm9yZSBjb21wYXJpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkT3B0aW9uKGVsLCB2YWx1ZSwgcGFyc2VyKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocGFyc2VPcHRpb25WYWx1ZShlbC5vcHRpb25zW2ldLnZhbHVlLCBwYXJzZXIpID09PSB2YWx1ZSkge1xuICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogTWFuaXB1bGF0ZSBUZXh0IFRyYWNrcyBzZXR0aW5ncy5cbiAqXG4gKiBAZXh0ZW5kcyBNb2RhbERpYWxvZ1xuICovXG5cblxudmFyIFRleHRUcmFja1NldHRpbmdzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTW9kYWxEaWFsb2cpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGV4dFRyYWNrU2V0dGluZ3MsIF9Nb2RhbERpYWxvZyk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllclxuICAgKiAgICAgICAgIFRoZSBgUGxheWVyYCB0aGF0IHRoaXMgY2xhc3Mgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFRleHRUcmFja1NldHRpbmdzKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIG9wdGlvbnMudGVtcG9yYXJ5ID0gZmFsc2U7XG4gICAgX3RoaXMgPSBfTW9kYWxEaWFsb2cuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMudXBkYXRlRGlzcGxheSA9IGJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLnVwZGF0ZURpc3BsYXkpOyAvLyBmaWxsIHRoZSBtb2RhbCBhbmQgcHJldGVuZCB3ZSBoYXZlIG9wZW5lZCBpdFxuXG4gICAgX3RoaXMuZmlsbCgpO1xuXG4gICAgX3RoaXMuaGFzQmVlbk9wZW5lZF8gPSBfdGhpcy5oYXNCZWVuRmlsbGVkXyA9IHRydWU7XG4gICAgX3RoaXMuZW5kRGlhbG9nID0gY3JlYXRlRWwoJ3AnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtY29udHJvbC10ZXh0JyxcbiAgICAgIHRleHRDb250ZW50OiBfdGhpcy5sb2NhbGl6ZSgnRW5kIG9mIGRpYWxvZyB3aW5kb3cuJylcbiAgICB9KTtcblxuICAgIF90aGlzLmVsKCkuYXBwZW5kQ2hpbGQoX3RoaXMuZW5kRGlhbG9nKTtcblxuICAgIF90aGlzLnNldERlZmF1bHRzKCk7IC8vIEdyYWIgYHBlcnNpc3RUZXh0VHJhY2tTZXR0aW5nc2AgZnJvbSB0aGUgcGxheWVyIG9wdGlvbnMgaWYgbm90IHBhc3NlZCBpbiBjaGlsZCBvcHRpb25zXG5cblxuICAgIGlmIChvcHRpb25zLnBlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBfdGhpcy5vcHRpb25zXy5wZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3MgPSBfdGhpcy5vcHRpb25zXy5wbGF5ZXJPcHRpb25zLnBlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncztcbiAgICB9XG5cbiAgICBfdGhpcy5vbihfdGhpcy4kKCcudmpzLWRvbmUtYnV0dG9uJyksICdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNhdmVTZXR0aW5ncygpO1xuXG4gICAgICBfdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgX3RoaXMub24oX3RoaXMuJCgnLnZqcy1kZWZhdWx0LWJ1dHRvbicpLCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXREZWZhdWx0cygpO1xuXG4gICAgICBfdGhpcy51cGRhdGVEaXNwbGF5KCk7XG4gICAgfSk7XG5cbiAgICBlYWNoKHNlbGVjdENvbmZpZ3MsIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgIF90aGlzLm9uKF90aGlzLiQoY29uZmlnLnNlbGVjdG9yKSwgJ2NoYW5nZScsIF90aGlzLnVwZGF0ZURpc3BsYXkpO1xuICAgIH0pO1xuXG4gICAgaWYgKF90aGlzLm9wdGlvbnNfLnBlcnNpc3RUZXh0VHJhY2tTZXR0aW5ncykge1xuICAgICAgX3RoaXMucmVzdG9yZVNldHRpbmdzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRleHRUcmFja1NldHRpbmdzLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5lbmREaWFsb2cgPSBudWxsO1xuXG4gICAgX01vZGFsRGlhbG9nLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIDxzZWxlY3Q+IGVsZW1lbnQgd2l0aCBjb25maWd1cmVkIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogICAgICAgIENvbmZpZ3VyYXRpb24ga2V5IHRvIHVzZSBkdXJpbmcgY3JlYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBBbiBIVE1MIHN0cmluZy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlRWxTZWxlY3RfID0gZnVuY3Rpb24gY3JlYXRlRWxTZWxlY3RfKGtleSwgbGVnZW5kSWQsIHR5cGUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmIChsZWdlbmRJZCA9PT0gdm9pZCAwKSB7XG4gICAgICBsZWdlbmRJZCA9ICcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSB2b2lkIDApIHtcbiAgICAgIHR5cGUgPSAnbGFiZWwnO1xuICAgIH1cblxuICAgIHZhciBjb25maWcgPSBzZWxlY3RDb25maWdzW2tleV07XG4gICAgdmFyIGlkID0gY29uZmlnLmlkLnJlcGxhY2UoJyVzJywgdGhpcy5pZF8pO1xuICAgIHZhciBzZWxlY3RMYWJlbGxlZGJ5SWRzID0gW2xlZ2VuZElkLCBpZF0uam9pbignICcpLnRyaW0oKTtcbiAgICByZXR1cm4gW1wiPFwiICsgdHlwZSArIFwiIGlkPVxcXCJcIiArIGlkICsgXCJcXFwiIGNsYXNzPVxcXCJcIiArICh0eXBlID09PSAnbGFiZWwnID8gJ3Zqcy1sYWJlbCcgOiAnJykgKyBcIlxcXCI+XCIsIHRoaXMubG9jYWxpemUoY29uZmlnLmxhYmVsKSwgXCI8L1wiICsgdHlwZSArIFwiPlwiLCBcIjxzZWxlY3QgYXJpYS1sYWJlbGxlZGJ5PVxcXCJcIiArIHNlbGVjdExhYmVsbGVkYnlJZHMgKyBcIlxcXCI+XCJdLmNvbmNhdChjb25maWcub3B0aW9ucy5tYXAoZnVuY3Rpb24gKG8pIHtcbiAgICAgIHZhciBvcHRpb25JZCA9IGlkICsgJy0nICsgb1sxXS5yZXBsYWNlKC9cXFcrL2csICcnKTtcbiAgICAgIHJldHVybiBbXCI8b3B0aW9uIGlkPVxcXCJcIiArIG9wdGlvbklkICsgXCJcXFwiIHZhbHVlPVxcXCJcIiArIG9bMF0gKyBcIlxcXCIgXCIsIFwiYXJpYS1sYWJlbGxlZGJ5PVxcXCJcIiArIHNlbGVjdExhYmVsbGVkYnlJZHMgKyBcIiBcIiArIG9wdGlvbklkICsgXCJcXFwiPlwiLCBfdGhpczIubG9jYWxpemUob1sxXSksICc8L29wdGlvbj4nXS5qb2luKCcnKTtcbiAgICB9KSkuY29uY2F0KCc8L3NlbGVjdD4nKS5qb2luKCcnKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGZvcmVncm91bmQgY29sb3IgZWxlbWVudCBmb3IgdGhlIGNvbXBvbmVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgQW4gSFRNTCBzdHJpbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsRmdDb2xvcl8gPSBmdW5jdGlvbiBjcmVhdGVFbEZnQ29sb3JfKCkge1xuICAgIHZhciBsZWdlbmRJZCA9IFwiY2FwdGlvbnMtdGV4dC1sZWdlbmQtXCIgKyB0aGlzLmlkXztcbiAgICByZXR1cm4gWyc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtZmctY29sb3IgdmpzLXRyYWNrLXNldHRpbmdcIj4nLCBcIjxsZWdlbmQgaWQ9XFxcIlwiICsgbGVnZW5kSWQgKyBcIlxcXCI+XCIsIHRoaXMubG9jYWxpemUoJ1RleHQnKSwgJzwvbGVnZW5kPicsIHRoaXMuY3JlYXRlRWxTZWxlY3RfKCdjb2xvcicsIGxlZ2VuZElkKSwgJzxzcGFuIGNsYXNzPVwidmpzLXRleHQtb3BhY2l0eSB2anMtb3BhY2l0eVwiPicsIHRoaXMuY3JlYXRlRWxTZWxlY3RfKCd0ZXh0T3BhY2l0eScsIGxlZ2VuZElkKSwgJzwvc3Bhbj4nLCAnPC9maWVsZHNldD4nXS5qb2luKCcnKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGJhY2tncm91bmQgY29sb3IgZWxlbWVudCBmb3IgdGhlIGNvbXBvbmVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgQW4gSFRNTCBzdHJpbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsQmdDb2xvcl8gPSBmdW5jdGlvbiBjcmVhdGVFbEJnQ29sb3JfKCkge1xuICAgIHZhciBsZWdlbmRJZCA9IFwiY2FwdGlvbnMtYmFja2dyb3VuZC1cIiArIHRoaXMuaWRfO1xuICAgIHJldHVybiBbJzxmaWVsZHNldCBjbGFzcz1cInZqcy1iZy1jb2xvciB2anMtdHJhY2stc2V0dGluZ1wiPicsIFwiPGxlZ2VuZCBpZD1cXFwiXCIgKyBsZWdlbmRJZCArIFwiXFxcIj5cIiwgdGhpcy5sb2NhbGl6ZSgnQmFja2dyb3VuZCcpLCAnPC9sZWdlbmQ+JywgdGhpcy5jcmVhdGVFbFNlbGVjdF8oJ2JhY2tncm91bmRDb2xvcicsIGxlZ2VuZElkKSwgJzxzcGFuIGNsYXNzPVwidmpzLWJnLW9wYWNpdHkgdmpzLW9wYWNpdHlcIj4nLCB0aGlzLmNyZWF0ZUVsU2VsZWN0XygnYmFja2dyb3VuZE9wYWNpdHknLCBsZWdlbmRJZCksICc8L3NwYW4+JywgJzwvZmllbGRzZXQ+J10uam9pbignJyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSB3aW5kb3cgY29sb3IgZWxlbWVudCBmb3IgdGhlIGNvbXBvbmVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgQW4gSFRNTCBzdHJpbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsV2luQ29sb3JfID0gZnVuY3Rpb24gY3JlYXRlRWxXaW5Db2xvcl8oKSB7XG4gICAgdmFyIGxlZ2VuZElkID0gXCJjYXB0aW9ucy13aW5kb3ctXCIgKyB0aGlzLmlkXztcbiAgICByZXR1cm4gWyc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtd2luZG93LWNvbG9yIHZqcy10cmFjay1zZXR0aW5nXCI+JywgXCI8bGVnZW5kIGlkPVxcXCJcIiArIGxlZ2VuZElkICsgXCJcXFwiPlwiLCB0aGlzLmxvY2FsaXplKCdXaW5kb3cnKSwgJzwvbGVnZW5kPicsIHRoaXMuY3JlYXRlRWxTZWxlY3RfKCd3aW5kb3dDb2xvcicsIGxlZ2VuZElkKSwgJzxzcGFuIGNsYXNzPVwidmpzLXdpbmRvdy1vcGFjaXR5IHZqcy1vcGFjaXR5XCI+JywgdGhpcy5jcmVhdGVFbFNlbGVjdF8oJ3dpbmRvd09wYWNpdHknLCBsZWdlbmRJZCksICc8L3NwYW4+JywgJzwvZmllbGRzZXQ+J10uam9pbignJyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBjb2xvciBlbGVtZW50cyBmb3IgdGhlIGNvbXBvbmVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlRWxDb2xvcnNfID0gZnVuY3Rpb24gY3JlYXRlRWxDb2xvcnNfKCkge1xuICAgIHJldHVybiBjcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXRyYWNrLXNldHRpbmdzLWNvbG9ycycsXG4gICAgICBpbm5lckhUTUw6IFt0aGlzLmNyZWF0ZUVsRmdDb2xvcl8oKSwgdGhpcy5jcmVhdGVFbEJnQ29sb3JfKCksIHRoaXMuY3JlYXRlRWxXaW5Db2xvcl8oKV0uam9pbignJylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGZvbnQgZWxlbWVudHMgZm9yIHRoZSBjb21wb25lbnRcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbEZvbnRfID0gZnVuY3Rpb24gY3JlYXRlRWxGb250XygpIHtcbiAgICByZXR1cm4gY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy10cmFjay1zZXR0aW5ncy1mb250JyxcbiAgICAgIGlubmVySFRNTDogWyc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtZm9udC1wZXJjZW50IHZqcy10cmFjay1zZXR0aW5nXCI+JywgdGhpcy5jcmVhdGVFbFNlbGVjdF8oJ2ZvbnRQZXJjZW50JywgJycsICdsZWdlbmQnKSwgJzwvZmllbGRzZXQ+JywgJzxmaWVsZHNldCBjbGFzcz1cInZqcy1lZGdlLXN0eWxlIHZqcy10cmFjay1zZXR0aW5nXCI+JywgdGhpcy5jcmVhdGVFbFNlbGVjdF8oJ2VkZ2VTdHlsZScsICcnLCAnbGVnZW5kJyksICc8L2ZpZWxkc2V0PicsICc8ZmllbGRzZXQgY2xhc3M9XCJ2anMtZm9udC1mYW1pbHkgdmpzLXRyYWNrLXNldHRpbmdcIj4nLCB0aGlzLmNyZWF0ZUVsU2VsZWN0XygnZm9udEZhbWlseScsICcnLCAnbGVnZW5kJyksICc8L2ZpZWxkc2V0PiddLmpvaW4oJycpXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBjb250cm9scyBmb3IgdGhlIGNvbXBvbmVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKiAgICAgICAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZUVsQ29udHJvbHNfID0gZnVuY3Rpb24gY3JlYXRlRWxDb250cm9sc18oKSB7XG4gICAgdmFyIGRlZmF1bHRzRGVzY3JpcHRpb24gPSB0aGlzLmxvY2FsaXplKCdyZXN0b3JlIGFsbCBzZXR0aW5ncyB0byB0aGUgZGVmYXVsdCB2YWx1ZXMnKTtcbiAgICByZXR1cm4gY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy10cmFjay1zZXR0aW5ncy1jb250cm9scycsXG4gICAgICBpbm5lckhUTUw6IFtcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwidmpzLWRlZmF1bHQtYnV0dG9uXFxcIiB0aXRsZT1cXFwiXCIgKyBkZWZhdWx0c0Rlc2NyaXB0aW9uICsgXCJcXFwiPlwiLCB0aGlzLmxvY2FsaXplKCdSZXNldCcpLCBcIjxzcGFuIGNsYXNzPVxcXCJ2anMtY29udHJvbC10ZXh0XFxcIj4gXCIgKyBkZWZhdWx0c0Rlc2NyaXB0aW9uICsgXCI8L3NwYW4+XCIsICc8L2J1dHRvbj4nLCBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwidmpzLWRvbmUtYnV0dG9uXFxcIj5cIiArIHRoaXMubG9jYWxpemUoJ0RvbmUnKSArIFwiPC9idXR0b24+XCJdLmpvaW4oJycpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbnRlbnQgPSBmdW5jdGlvbiBjb250ZW50KCkge1xuICAgIHJldHVybiBbdGhpcy5jcmVhdGVFbENvbG9yc18oKSwgdGhpcy5jcmVhdGVFbEZvbnRfKCksIHRoaXMuY3JlYXRlRWxDb250cm9sc18oKV07XG4gIH07XG5cbiAgX3Byb3RvLmxhYmVsID0gZnVuY3Rpb24gbGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxpemUoJ0NhcHRpb24gU2V0dGluZ3MgRGlhbG9nJyk7XG4gIH07XG5cbiAgX3Byb3RvLmRlc2NyaXB0aW9uID0gZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxpemUoJ0JlZ2lubmluZyBvZiBkaWFsb2cgd2luZG93LiBFc2NhcGUgd2lsbCBjYW5jZWwgYW5kIGNsb3NlIHRoZSB3aW5kb3cuJyk7XG4gIH07XG5cbiAgX3Byb3RvLmJ1aWxkQ1NTQ2xhc3MgPSBmdW5jdGlvbiBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBfTW9kYWxEaWFsb2cucHJvdG90eXBlLmJ1aWxkQ1NTQ2xhc3MuY2FsbCh0aGlzKSArICcgdmpzLXRleHQtdHJhY2stc2V0dGluZ3MnO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGFuIG9iamVjdCBvZiB0ZXh0IHRyYWNrIHNldHRpbmdzIChvciBudWxsKS5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiAgICAgICAgIEFuIG9iamVjdCB3aXRoIGNvbmZpZyB2YWx1ZXMgcGFyc2VkIGZyb20gdGhlIERPTSBvciBsb2NhbFN0b3JhZ2UuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFZhbHVlcyA9IGZ1bmN0aW9uIGdldFZhbHVlcygpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHJldHVybiByZWR1Y2Uoc2VsZWN0Q29uZmlncywgZnVuY3Rpb24gKGFjY3VtLCBjb25maWcsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0U2VsZWN0ZWRPcHRpb25WYWx1ZShfdGhpczMuJChjb25maWcuc2VsZWN0b3IpLCBjb25maWcucGFyc2VyKTtcblxuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWNjdW1ba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjdW07XG4gICAgfSwge30pO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRleHQgdHJhY2sgc2V0dGluZ3MgZnJvbSBhbiBvYmplY3Qgb2YgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzXG4gICAqICAgICAgICBBbiBvYmplY3Qgd2l0aCBjb25maWcgdmFsdWVzIHBhcnNlZCBmcm9tIHRoZSBET00gb3IgbG9jYWxTdG9yYWdlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRWYWx1ZXMgPSBmdW5jdGlvbiBzZXRWYWx1ZXModmFsdWVzKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBlYWNoKHNlbGVjdENvbmZpZ3MsIGZ1bmN0aW9uIChjb25maWcsIGtleSkge1xuICAgICAgc2V0U2VsZWN0ZWRPcHRpb24oX3RoaXM0LiQoY29uZmlnLnNlbGVjdG9yKSwgdmFsdWVzW2tleV0sIGNvbmZpZy5wYXJzZXIpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGFsbCBgPHNlbGVjdD5gIGVsZW1lbnRzIHRvIHRoZWlyIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIHNldERlZmF1bHRzKCkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgZWFjaChzZWxlY3RDb25maWdzLCBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICB2YXIgaW5kZXggPSBjb25maWcuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/IGNvbmZpZ1tcImRlZmF1bHRcIl0gOiAwO1xuICAgICAgX3RoaXM1LiQoY29uZmlnLnNlbGVjdG9yKS5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlc3RvcmUgdGV4dHRyYWNrIHNldHRpbmdzIGZyb20gbG9jYWxTdG9yYWdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc3RvcmVTZXR0aW5ncyA9IGZ1bmN0aW9uIHJlc3RvcmVTZXR0aW5ncygpIHtcbiAgICB2YXIgdmFsdWVzO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhbHVlcyA9IEpTT04ucGFyc2Uod2luZG93JDEubG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVkpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy53YXJuKGVycik7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlcykge1xuICAgICAgdGhpcy5zZXRWYWx1ZXModmFsdWVzKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNhdmUgdGV4dCB0cmFjayBzZXR0aW5ncyB0byBsb2NhbFN0b3JhZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2F2ZVNldHRpbmdzID0gZnVuY3Rpb24gc2F2ZVNldHRpbmdzKCkge1xuICAgIGlmICghdGhpcy5vcHRpb25zXy5wZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVzID0gdGhpcy5nZXRWYWx1ZXMoKTtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXModmFsdWVzKS5sZW5ndGgpIHtcbiAgICAgICAgd2luZG93JDEubG9jYWxTdG9yYWdlLnNldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHZhbHVlcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93JDEubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oTE9DQUxfU1RPUkFHRV9LRVkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLndhcm4oZXJyKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBkaXNwbGF5IG9mIHRleHQgdHJhY2sgc2V0dGluZ3NcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlRGlzcGxheSA9IGZ1bmN0aW9uIHVwZGF0ZURpc3BsYXkoKSB7XG4gICAgdmFyIHR0RGlzcGxheSA9IHRoaXMucGxheWVyXy5nZXRDaGlsZCgndGV4dFRyYWNrRGlzcGxheScpO1xuXG4gICAgaWYgKHR0RGlzcGxheSkge1xuICAgICAgdHREaXNwbGF5LnVwZGF0ZURpc3BsYXkoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIGNvbmRpdGlvbmFsbHkgYmx1ciB0aGUgZWxlbWVudCBhbmQgcmVmb2N1cyB0aGUgY2FwdGlvbnMgYnV0dG9uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvbmRpdGlvbmFsQmx1cl8gPSBmdW5jdGlvbiBjb25kaXRpb25hbEJsdXJfKCkge1xuICAgIHRoaXMucHJldmlvdXNseUFjdGl2ZUVsXyA9IG51bGw7XG4gICAgdmFyIGNiID0gdGhpcy5wbGF5ZXJfLmNvbnRyb2xCYXI7XG4gICAgdmFyIHN1YnNDYXBzQnRuID0gY2IgJiYgY2Iuc3Vic0NhcHNCdXR0b247XG4gICAgdmFyIGNjQnRuID0gY2IgJiYgY2IuY2FwdGlvbnNCdXR0b247XG5cbiAgICBpZiAoc3Vic0NhcHNCdG4pIHtcbiAgICAgIHN1YnNDYXBzQnRuLmZvY3VzKCk7XG4gICAgfSBlbHNlIGlmIChjY0J0bikge1xuICAgICAgY2NCdG4uZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRleHRUcmFja1NldHRpbmdzO1xufShNb2RhbERpYWxvZyk7XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnVGV4dFRyYWNrU2V0dGluZ3MnLCBUZXh0VHJhY2tTZXR0aW5ncyk7XG5cbi8qKlxuICogQSBSZXNpemUgTWFuYWdlci4gSXQgaXMgaW4gY2hhcmdlIG9mIHRyaWdnZXJpbmcgYHBsYXllcnJlc2l6ZWAgb24gdGhlIHBsYXllciBpbiB0aGUgcmlnaHQgY29uZGl0aW9ucy5cbiAqXG4gKiBJdCdsbCBlaXRoZXIgY3JlYXRlIGFuIGlmcmFtZSBhbmQgdXNlIGEgZGVib3VuY2VkIHJlc2l6ZSBoYW5kbGVyIG9uIGl0IG9yIHVzZSB0aGUgbmV3IHtAbGluayBodHRwczovL3dpY2cuZ2l0aHViLmlvL1Jlc2l6ZU9ic2VydmVyL3xSZXNpemVPYnNlcnZlcn0uXG4gKlxuICogSWYgdGhlIFJlc2l6ZU9ic2VydmVyIGlzIGF2YWlsYWJsZSBuYXRpdmVseSwgaXQgd2lsbCBiZSB1c2VkLiBBIHBvbHlmaWxsIGNhbiBiZSBwYXNzZWQgaW4gYXMgYW4gb3B0aW9uLlxuICogSWYgYSBgcGxheWVycmVzaXplYCBldmVudCBpcyBub3QgbmVlZGVkLCB0aGUgUmVzaXplTWFuYWdlciBjb21wb25lbnQgY2FuIGJlIHJlbW92ZWQgZnJvbSB0aGUgcGxheWVyLCBzZWUgdGhlIGV4YW1wbGUgYmVsb3cuXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5Ib3cgdG8gZGlzYWJsZSB0aGUgcmVzaXplIG1hbmFnZXI8L2NhcHRpb24+XG4gKiBjb25zdCBwbGF5ZXIgPSB2aWRlb2pzKCcjdmlkJywge1xuICogICByZXNpemVNYW5hZ2VyOiBmYWxzZVxuICogfSk7XG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9SZXNpemVPYnNlcnZlci98UmVzaXplT2JzZXJ2ZXIgc3BlY2lmaWNhdGlvbn1cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgUmVzaXplTWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSZXNpemVNYW5hZ2VyLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBSZXNpemVNYW5hZ2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBSZXNpemVNYW5hZ2VyIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5SZXNpemVPYnNlcnZlcl1cbiAgICogICAgICAgIEEgcG9seWZpbGwgZm9yIFJlc2l6ZU9ic2VydmVyIGNhbiBiZSBwYXNzZWQgaW4gaGVyZS5cbiAgICogICAgICAgIElmIHRoaXMgaXMgc2V0IHRvIG51bGwgaXQgd2lsbCBpZ25vcmUgdGhlIG5hdGl2ZSBSZXNpemVPYnNlcnZlciBhbmQgZmFsbCBiYWNrIHRvIHRoZSBpZnJhbWUgZmFsbGJhY2suXG4gICAqL1xuICBmdW5jdGlvbiBSZXNpemVNYW5hZ2VyKHBsYXllciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBSRVNJWkVfT0JTRVJWRVJfQVZBSUxBQkxFID0gb3B0aW9ucy5SZXNpemVPYnNlcnZlciB8fCB3aW5kb3ckMS5SZXNpemVPYnNlcnZlcjsgLy8gaWYgYG51bGxgIHdhcyBwYXNzZWQsIHdlIHdhbnQgdG8gZGlzYWJsZSB0aGUgUmVzaXplT2JzZXJ2ZXJcblxuICAgIGlmIChvcHRpb25zLlJlc2l6ZU9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICBSRVNJWkVfT0JTRVJWRVJfQVZBSUxBQkxFID0gZmFsc2U7XG4gICAgfSAvLyBPbmx5IGNyZWF0ZSBhbiBlbGVtZW50IHdoZW4gUmVzaXplT2JzZXJ2ZXIgaXNuJ3QgYXZhaWxhYmxlXG5cblxuICAgIHZhciBvcHRpb25zXyA9IG1lcmdlT3B0aW9ucyh7XG4gICAgICBjcmVhdGVFbDogIVJFU0laRV9PQlNFUlZFUl9BVkFJTEFCTEUsXG4gICAgICByZXBvcnRUb3VjaEFjdGl2aXR5OiBmYWxzZVxuICAgIH0sIG9wdGlvbnMpO1xuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9uc18pIHx8IHRoaXM7XG4gICAgX3RoaXMuUmVzaXplT2JzZXJ2ZXIgPSBvcHRpb25zLlJlc2l6ZU9ic2VydmVyIHx8IHdpbmRvdyQxLlJlc2l6ZU9ic2VydmVyO1xuICAgIF90aGlzLmxvYWRMaXN0ZW5lcl8gPSBudWxsO1xuICAgIF90aGlzLnJlc2l6ZU9ic2VydmVyXyA9IG51bGw7XG4gICAgX3RoaXMuZGVib3VuY2VkSGFuZGxlcl8gPSBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5yZXNpemVIYW5kbGVyKCk7XG4gICAgfSwgMTAwLCBmYWxzZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuXG4gICAgaWYgKFJFU0laRV9PQlNFUlZFUl9BVkFJTEFCTEUpIHtcbiAgICAgIF90aGlzLnJlc2l6ZU9ic2VydmVyXyA9IG5ldyBfdGhpcy5SZXNpemVPYnNlcnZlcihfdGhpcy5kZWJvdW5jZWRIYW5kbGVyXyk7XG5cbiAgICAgIF90aGlzLnJlc2l6ZU9ic2VydmVyXy5vYnNlcnZlKHBsYXllci5lbCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMubG9hZExpc3RlbmVyXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5lbF8gfHwgIV90aGlzLmVsXy5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlYm91bmNlZEhhbmRsZXJfID0gX3RoaXMuZGVib3VuY2VkSGFuZGxlcl87XG5cbiAgICAgICAgdmFyIHVubG9hZExpc3RlbmVyXyA9IF90aGlzLnVubG9hZExpc3RlbmVyXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvZmYodGhpcywgJ3Jlc2l6ZScsIGRlYm91bmNlZEhhbmRsZXJfKTtcbiAgICAgICAgICBvZmYodGhpcywgJ3VubG9hZCcsIHVubG9hZExpc3RlbmVyXyk7XG4gICAgICAgICAgdW5sb2FkTGlzdGVuZXJfID0gbnVsbDtcbiAgICAgICAgfTsgLy8gc2FmYXJpIGFuZCBlZGdlIGNhbiB1bmxvYWQgdGhlIGlmcmFtZSBiZWZvcmUgcmVzaXplbWFuYWdlciBkaXNwb3NlXG4gICAgICAgIC8vIHdlIGhhdmUgdG8gZGlzcG9zZSBvZiBldmVudCBoYW5kbGVycyBjb3JyZWN0bHkgYmVmb3JlIHRoYXQgaGFwcGVuc1xuXG5cbiAgICAgICAgb24oX3RoaXMuZWxfLmNvbnRlbnRXaW5kb3csICd1bmxvYWQnLCB1bmxvYWRMaXN0ZW5lcl8pO1xuICAgICAgICBvbihfdGhpcy5lbF8uY29udGVudFdpbmRvdywgJ3Jlc2l6ZScsIGRlYm91bmNlZEhhbmRsZXJfKTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLm9uZSgnbG9hZCcsIF90aGlzLmxvYWRMaXN0ZW5lcl8pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZXNpemVNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gX0NvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlRWwuY2FsbCh0aGlzLCAnaWZyYW1lJywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXJlc2l6ZS1tYW5hZ2VyJyxcbiAgICAgIHRhYkluZGV4OiAtMVxuICAgIH0sIHtcbiAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIHJlc2l6ZSBpcyB0cmlnZ2VyZWQgb24gdGhlIGlmcmFtZSBvciBhIHJlc2l6ZSBpcyBvYnNlcnZlZCB2aWEgdGhlIFJlc2l6ZU9ic2VydmVyXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjcGxheWVycmVzaXplXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbiByZXNpemVIYW5kbGVyKCkge1xuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBwbGF5ZXIgc2l6ZSBoYXMgY2hhbmdlZFxuICAgICAqXG4gICAgICogQGV2ZW50IFBsYXllciNwbGF5ZXJyZXNpemVcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG4gICAgLy8gbWFrZSBzdXJlIHBsYXllciBpcyBzdGlsbCBhcm91bmQgdG8gdHJpZ2dlclxuICAgIC8vIHByZXZlbnRzIHRoaXMgZnJvbSBjYXVzaW5nIGFuIGVycm9yIGFmdGVyIGRpc3Bvc2VcbiAgICBpZiAoIXRoaXMucGxheWVyXyB8fCAhdGhpcy5wbGF5ZXJfLnRyaWdnZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBsYXllcl8udHJpZ2dlcigncGxheWVycmVzaXplJyk7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGlmICh0aGlzLmRlYm91bmNlZEhhbmRsZXJfKSB7XG4gICAgICB0aGlzLmRlYm91bmNlZEhhbmRsZXJfLmNhbmNlbCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlc2l6ZU9ic2VydmVyXykge1xuICAgICAgaWYgKHRoaXMucGxheWVyXy5lbCgpKSB7XG4gICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXJfLnVub2JzZXJ2ZSh0aGlzLnBsYXllcl8uZWwoKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXJfLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb2FkTGlzdGVuZXJfKSB7XG4gICAgICB0aGlzLm9mZignbG9hZCcsIHRoaXMubG9hZExpc3RlbmVyXyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZWxfICYmIHRoaXMuZWxfLmNvbnRlbnRXaW5kb3cgJiYgdGhpcy51bmxvYWRMaXN0ZW5lcl8pIHtcbiAgICAgIHRoaXMudW5sb2FkTGlzdGVuZXJfLmNhbGwodGhpcy5lbF8uY29udGVudFdpbmRvdyk7XG4gICAgfVxuXG4gICAgdGhpcy5SZXNpemVPYnNlcnZlciA9IG51bGw7XG4gICAgdGhpcy5yZXNpemVPYnNlcnZlciA9IG51bGw7XG4gICAgdGhpcy5kZWJvdW5jZWRIYW5kbGVyXyA9IG51bGw7XG4gICAgdGhpcy5sb2FkTGlzdGVuZXJfID0gbnVsbDtcblxuICAgIF9Db21wb25lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gUmVzaXplTWFuYWdlcjtcbn0oQ29tcG9uZW50KTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdSZXNpemVNYW5hZ2VyJywgUmVzaXplTWFuYWdlcik7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgdHJhY2tpbmdUaHJlc2hvbGQ6IDMwLFxuICBsaXZlVG9sZXJhbmNlOiAxNVxufTtcbi8qXG4gIHRyYWNrIHdoZW4gd2UgYXJlIGF0IHRoZSBsaXZlIGVkZ2UsIGFuZCBvdGhlciBoZWxwZXJzIGZvciBsaXZlIHBsYXliYWNrICovXG5cbi8qKlxuICogQSBjbGFzcyBmb3IgY2hlY2tpbmcgbGl2ZSBjdXJyZW50IHRpbWUgYW5kIGRldGVybWluaW5nIHdoZW4gdGhlIHBsYXllclxuICogaXMgYXQgb3IgYmVoaW5kIHRoZSBsaXZlIGVkZ2UuXG4gKi9cblxudmFyIExpdmVUcmFja2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpdmVUcmFja2VyLCBfQ29tcG9uZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gICAqICAgICAgICBUaGUgYFBsYXllcmAgdGhhdCB0aGlzIGNsYXNzIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnRyYWNraW5nVGhyZXNob2xkPTMwXVxuICAgKiAgICAgICAgTnVtYmVyIG9mIHNlY29uZHMgb2YgbGl2ZSB3aW5kb3cgKHNlZWthYmxlRW5kIC0gc2Vla2FibGVTdGFydCkgdGhhdFxuICAgKiAgICAgICAgbWVkaWEgbmVlZHMgdG8gaGF2ZSBiZWZvcmUgdGhlIGxpdmV1aSB3aWxsIGJlIHNob3duLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubGl2ZVRvbGVyYW5jZT0xNV1cbiAgICogICAgICAgIE51bWJlciBvZiBzZWNvbmRzIGJlaGluZCBsaXZlIHRoYXQgd2UgaGF2ZSB0byBiZVxuICAgKiAgICAgICAgYmVmb3JlIHdlIHdpbGwgYmUgY29uc2lkZXJlZCBub24tbGl2ZS4gTm90ZSB0aGF0IHRoaXMgd2lsbCBvbmx5XG4gICAqICAgICAgICBiZSB1c2VkIHdoZW4gcGxheWluZyBhdCB0aGUgbGl2ZSBlZGdlLiBUaGlzIGFsbG93cyBsYXJnZSBzZWVrYWJsZSBlbmRcbiAgICogICAgICAgIGNoYW5nZXMgdG8gbm90IGVmZmVjdCB3ZXRoZXIgd2UgYXJlIGxpdmUgb3Igbm90LlxuICAgKi9cbiAgZnVuY3Rpb24gTGl2ZVRyYWNrZXIocGxheWVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgLy8gTGl2ZVRyYWNrZXIgZG9lcyBub3QgbmVlZCBhbiBlbGVtZW50XG4gICAgdmFyIG9wdGlvbnNfID0gbWVyZ2VPcHRpb25zKGRlZmF1bHRzLCBvcHRpb25zLCB7XG4gICAgICBjcmVhdGVFbDogZmFsc2VcbiAgICB9KTtcbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwbGF5ZXIsIG9wdGlvbnNfKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMucmVzZXRfKCk7XG5cbiAgICBfdGhpcy5vbihfdGhpcy5wbGF5ZXJfLCAnZHVyYXRpb25jaGFuZ2UnLCBfdGhpcy5oYW5kbGVEdXJhdGlvbmNoYW5nZSk7IC8vIHdlIGRvbid0IG5lZWQgdG8gdHJhY2sgbGl2ZSBwbGF5YmFjayBpZiB0aGUgZG9jdW1lbnQgaXMgaGlkZGVuLFxuICAgIC8vIGFsc28sIHRyYWNraW5nIHdoZW4gdGhlIGRvY3VtZW50IGlzIGhpZGRlbiBjYW5cbiAgICAvLyBjYXVzZSB0aGUgQ1BVIHRvIHNwaWtlIGFuZCBldmVudHVhbGx5IGNyYXNoIHRoZSBwYWdlIG9uIElFMTEuXG5cblxuICAgIGlmIChJRV9WRVJTSU9OICYmICdoaWRkZW4nIGluIGRvY3VtZW50ICYmICd2aXNpYmlsaXR5U3RhdGUnIGluIGRvY3VtZW50KSB7XG4gICAgICBfdGhpcy5vbihkb2N1bWVudCwgJ3Zpc2liaWxpdHljaGFuZ2UnLCBfdGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIHRvZ2dsZSB0cmFja2luZyBiYXNlZCBvbiBkb2N1bWVudCB2aXNpYmxpbGl0eVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBMaXZlVHJhY2tlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICAgIGlmICh0aGlzLnBsYXllcl8uZHVyYXRpb24oKSAhPT0gSW5maW5pdHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICB0aGlzLnN0b3BUcmFja2luZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXJ0VHJhY2tpbmcoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIGFsbCB0aGUgZnVuY3Rpb25hbGl0eSBmb3IgdHJhY2tpbmcgd2hlbiBzZWVrIGVuZCBjaGFuZ2VzXG4gICAqIGFuZCBmb3IgdHJhY2tpbmcgaG93IGZhciBwYXN0IHNlZWsgZW5kIHdlIHNob3VsZCBiZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50cmFja0xpdmVfID0gZnVuY3Rpb24gdHJhY2tMaXZlXygpIHtcbiAgICB2YXIgc2Vla2FibGUgPSB0aGlzLnBsYXllcl8uc2Vla2FibGUoKTsgLy8gc2tpcCB1bmRlZmluZWQgc2Vla2FibGVcblxuICAgIGlmICghc2Vla2FibGUgfHwgIXNlZWthYmxlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXdUaW1lID0gTnVtYmVyKHdpbmRvdyQxLnBlcmZvcm1hbmNlLm5vdygpLnRvRml4ZWQoNCkpO1xuICAgIHZhciBkZWx0YVRpbWUgPSB0aGlzLmxhc3RUaW1lXyA9PT0gLTEgPyAwIDogKG5ld1RpbWUgLSB0aGlzLmxhc3RUaW1lXykgLyAxMDAwO1xuICAgIHRoaXMubGFzdFRpbWVfID0gbmV3VGltZTtcbiAgICB0aGlzLnBhc3RTZWVrRW5kXyA9IHRoaXMucGFzdFNlZWtFbmQoKSArIGRlbHRhVGltZTtcbiAgICB2YXIgbGl2ZUN1cnJlbnRUaW1lID0gdGhpcy5saXZlQ3VycmVudFRpbWUoKTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTsgLy8gd2UgYXJlIGJlaGluZCBsaXZlIGlmIGFueSBhcmUgdHJ1ZVxuICAgIC8vIDEuIHRoZSBwbGF5ZXIgaXMgcGF1c2VkXG4gICAgLy8gMi4gdGhlIHVzZXIgc2Vla2VkIHRvIGEgbG9jYXRpb24gMiBzZWNvbmRzIGF3YXkgZnJvbSBsaXZlXG4gICAgLy8gMy4gdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBsaXZlIGFuZCBjdXJyZW50IHRpbWUgaXMgZ3JlYXRlclxuICAgIC8vICAgIGxpdmVUb2xlcmFuY2Ugd2hpY2ggZGVmYXVsdHMgdG8gMTVzXG5cbiAgICB2YXIgaXNCZWhpbmQgPSB0aGlzLnBsYXllcl8ucGF1c2VkKCkgfHwgdGhpcy5zZWVrZWRCZWhpbmRMaXZlXyB8fCBNYXRoLmFicyhsaXZlQ3VycmVudFRpbWUgLSBjdXJyZW50VGltZSkgPiB0aGlzLm9wdGlvbnNfLmxpdmVUb2xlcmFuY2U7IC8vIHdlIGNhbm5vdCBiZSBiZWhpbmQgaWZcbiAgICAvLyAxLiB1bnRpbCB3ZSBoYXZlIG5vdCBzZWVuIGEgdGltZXVwZGF0ZSB5ZXRcbiAgICAvLyAyLiBsaXZlQ3VycmVudFRpbWUgaXMgSW5maW5pdHksIHdoaWNoIGhhcHBlbnMgb24gQW5kcm9pZFxuXG4gICAgaWYgKCF0aGlzLnRpbWV1cGRhdGVTZWVuXyB8fCBsaXZlQ3VycmVudFRpbWUgPT09IEluZmluaXR5KSB7XG4gICAgICBpc0JlaGluZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpc0JlaGluZCAhPT0gdGhpcy5iZWhpbmRMaXZlRWRnZV8pIHtcbiAgICAgIHRoaXMuYmVoaW5kTGl2ZUVkZ2VfID0gaXNCZWhpbmQ7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2xpdmVlZGdlY2hhbmdlJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBoYW5kbGUgYSBkdXJhdGlvbmNoYW5nZSBldmVudCBvbiB0aGUgcGxheWVyXG4gICAqIGFuZCBzdGFydC9zdG9wIHRyYWNraW5nIGFjY29yZGluZ2x5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVEdXJhdGlvbmNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUR1cmF0aW9uY2hhbmdlKCkge1xuICAgIGlmICh0aGlzLnBsYXllcl8uZHVyYXRpb24oKSA9PT0gSW5maW5pdHkgJiYgdGhpcy5saXZlV2luZG93KCkgPj0gdGhpcy5vcHRpb25zXy50cmFja2luZ1RocmVzaG9sZCkge1xuICAgICAgaWYgKHRoaXMucGxheWVyXy5vcHRpb25zXy5saXZldWkpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXJfLmFkZENsYXNzKCd2anMtbGl2ZXVpJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhcnRUcmFja2luZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllcl8ucmVtb3ZlQ2xhc3MoJ3Zqcy1saXZldWknKTtcbiAgICAgIHRoaXMuc3RvcFRyYWNraW5nKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBzdGFydCB0cmFja2luZyBsaXZlIHBsYXliYWNrXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN0YXJ0VHJhY2tpbmcgPSBmdW5jdGlvbiBzdGFydFRyYWNraW5nKCkge1xuICAgIGlmICh0aGlzLmlzVHJhY2tpbmcoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgd2UgaGF2ZW4ndCBzZWVuIGEgdGltZXVwZGF0ZSwgd2UgbmVlZCB0byBjaGVjayB3aGV0aGVyIHBsYXliYWNrXG4gICAgLy8gYmVnYW4gYmVmb3JlIHRoaXMgY29tcG9uZW50IHN0YXJ0ZWQgdHJhY2tpbmcuIFRoaXMgY2FuIGhhcHBlbiBjb21tb25seVxuICAgIC8vIHdoZW4gdXNpbmcgYXV0b3BsYXkuXG5cblxuICAgIGlmICghdGhpcy50aW1ldXBkYXRlU2Vlbl8pIHtcbiAgICAgIHRoaXMudGltZXVwZGF0ZVNlZW5fID0gdGhpcy5wbGF5ZXJfLmhhc1N0YXJ0ZWQoKTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNraW5nSW50ZXJ2YWxfID0gdGhpcy5zZXRJbnRlcnZhbCh0aGlzLnRyYWNrTGl2ZV8sIFVQREFURV9SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICB0aGlzLnRyYWNrTGl2ZV8oKTtcbiAgICB0aGlzLm9uKHRoaXMucGxheWVyXywgWydwbGF5JywgJ3BhdXNlJ10sIHRoaXMudHJhY2tMaXZlXyk7XG5cbiAgICBpZiAoIXRoaXMudGltZXVwZGF0ZVNlZW5fKSB7XG4gICAgICB0aGlzLm9uZSh0aGlzLnBsYXllcl8sICdwbGF5JywgdGhpcy5oYW5kbGVQbGF5KTtcbiAgICAgIHRoaXMub25lKHRoaXMucGxheWVyXywgJ3RpbWV1cGRhdGUnLCB0aGlzLmhhbmRsZUZpcnN0VGltZXVwZGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLCAnc2Vla2VkJywgdGhpcy5oYW5kbGVTZWVrZWQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogaGFuZGxlIHRoZSBmaXJzdCB0aW1ldXBkYXRlIG9uIHRoZSBwbGF5ZXIgaWYgaXQgd2Fzbid0IGFscmVhZHkgcGxheWluZ1xuICAgKiB3aGVuIGxpdmUgdHJhY2tlciBzdGFydGVkIHRyYWNraW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVGaXJzdFRpbWV1cGRhdGUgPSBmdW5jdGlvbiBoYW5kbGVGaXJzdFRpbWV1cGRhdGUoKSB7XG4gICAgdGhpcy50aW1ldXBkYXRlU2Vlbl8gPSB0cnVlO1xuICAgIHRoaXMub24odGhpcy5wbGF5ZXJfLCAnc2Vla2VkJywgdGhpcy5oYW5kbGVTZWVrZWQpO1xuICB9XG4gIC8qKlxuICAgKiBLZWVwIHRyYWNrIG9mIHdoYXQgdGltZSBhIHNlZWsgc3RhcnRzLCBhbmQgbGlzdGVuIGZvciBzZWVrZWRcbiAgICogdG8gZmluZCB3aGVyZSBhIHNlZWsgZW5kcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlU2Vla2VkID0gZnVuY3Rpb24gaGFuZGxlU2Vla2VkKCkge1xuICAgIHZhciB0aW1lRGlmZiA9IE1hdGguYWJzKHRoaXMubGl2ZUN1cnJlbnRUaW1lKCkgLSB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKSk7XG4gICAgdGhpcy5zZWVrZWRCZWhpbmRMaXZlXyA9IHRoaXMuc2tpcE5leHRTZWVrZWRfID8gZmFsc2UgOiB0aW1lRGlmZiA+IDI7XG4gICAgdGhpcy5za2lwTmV4dFNlZWtlZF8gPSBmYWxzZTtcbiAgICB0aGlzLnRyYWNrTGl2ZV8oKTtcbiAgfVxuICAvKipcbiAgICogaGFuZGxlIHRoZSBmaXJzdCBwbGF5IG9uIHRoZSBwbGF5ZXIsIGFuZCBtYWtlIHN1cmUgdGhhdCB3ZSBzZWVrXG4gICAqIHJpZ2h0IHRvIHRoZSBsaXZlIGVkZ2UuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVBsYXkgPSBmdW5jdGlvbiBoYW5kbGVQbGF5KCkge1xuICAgIHRoaXMub25lKHRoaXMucGxheWVyXywgJ3RpbWV1cGRhdGUnLCB0aGlzLnNlZWtUb0xpdmVFZGdlKTtcbiAgfVxuICAvKipcbiAgICogU3RvcCB0cmFja2luZywgYW5kIHNldCBhbGwgaW50ZXJuYWwgdmFyaWFibGVzIHRvXG4gICAqIHRoZWlyIGluaXRpYWwgdmFsdWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0XyA9IGZ1bmN0aW9uIHJlc2V0XygpIHtcbiAgICB0aGlzLmxhc3RUaW1lXyA9IC0xO1xuICAgIHRoaXMucGFzdFNlZWtFbmRfID0gMDtcbiAgICB0aGlzLmxhc3RTZWVrRW5kXyA9IC0xO1xuICAgIHRoaXMuYmVoaW5kTGl2ZUVkZ2VfID0gdHJ1ZTtcbiAgICB0aGlzLnRpbWV1cGRhdGVTZWVuXyA9IGZhbHNlO1xuICAgIHRoaXMuc2Vla2VkQmVoaW5kTGl2ZV8gPSBmYWxzZTtcbiAgICB0aGlzLnNraXBOZXh0U2Vla2VkXyA9IGZhbHNlO1xuICAgIHRoaXMuY2xlYXJJbnRlcnZhbCh0aGlzLnRyYWNraW5nSW50ZXJ2YWxfKTtcbiAgICB0aGlzLnRyYWNraW5nSW50ZXJ2YWxfID0gbnVsbDtcbiAgICB0aGlzLm9mZih0aGlzLnBsYXllcl8sIFsncGxheScsICdwYXVzZSddLCB0aGlzLnRyYWNrTGl2ZV8pO1xuICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgJ3NlZWtlZCcsIHRoaXMuaGFuZGxlU2Vla2VkKTtcbiAgICB0aGlzLm9mZih0aGlzLnBsYXllcl8sICdwbGF5JywgdGhpcy5oYW5kbGVQbGF5KTtcbiAgICB0aGlzLm9mZih0aGlzLnBsYXllcl8sICd0aW1ldXBkYXRlJywgdGhpcy5oYW5kbGVGaXJzdFRpbWV1cGRhdGUpO1xuICAgIHRoaXMub2ZmKHRoaXMucGxheWVyXywgJ3RpbWV1cGRhdGUnLCB0aGlzLnNlZWtUb0xpdmVFZGdlKTtcbiAgfVxuICAvKipcbiAgICogc3RvcCB0cmFja2luZyBsaXZlIHBsYXliYWNrXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN0b3BUcmFja2luZyA9IGZ1bmN0aW9uIHN0b3BUcmFja2luZygpIHtcbiAgICBpZiAoIXRoaXMuaXNUcmFja2luZygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yZXNldF8oKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2xpdmVlZGdlY2hhbmdlJyk7XG4gIH1cbiAgLyoqXG4gICAqIEEgaGVscGVyIHRvIGdldCB0aGUgcGxheWVyIHNlZWthYmxlIGVuZFxuICAgKiBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gbnVsbCBjaGVjayBldmVyeXdoZXJlXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgZnVydGhlc3Qgc2Vla2FibGUgZW5kIG9yIEluZmluaXR5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZWVrYWJsZUVuZCA9IGZ1bmN0aW9uIHNlZWthYmxlRW5kKCkge1xuICAgIHZhciBzZWVrYWJsZSA9IHRoaXMucGxheWVyXy5zZWVrYWJsZSgpO1xuICAgIHZhciBzZWVrYWJsZUVuZHMgPSBbXTtcbiAgICB2YXIgaSA9IHNlZWthYmxlID8gc2Vla2FibGUubGVuZ3RoIDogMDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHNlZWthYmxlRW5kcy5wdXNoKHNlZWthYmxlLmVuZChpKSk7XG4gICAgfSAvLyBncmFiIHRoZSBmdXJ0aGVzdCBzZWVrYWJsZSBlbmQgYWZ0ZXIgc29ydGluZywgb3IgaWYgdGhlcmUgYXJlIG5vbmVcbiAgICAvLyBkZWZhdWx0IHRvIEluZmluaXR5XG5cblxuICAgIHJldHVybiBzZWVrYWJsZUVuZHMubGVuZ3RoID8gc2Vla2FibGVFbmRzLnNvcnQoKVtzZWVrYWJsZUVuZHMubGVuZ3RoIC0gMV0gOiBJbmZpbml0eTtcbiAgfVxuICAvKipcbiAgICogQSBoZWxwZXIgdG8gZ2V0IHRoZSBwbGF5ZXIgc2Vla2FibGUgc3RhcnRcbiAgICogc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIG51bGwgY2hlY2sgZXZlcnl3aGVyZVxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIGVhcmxpZXN0IHNlZWthYmxlIHN0YXJ0IG9yIDAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNlZWthYmxlU3RhcnQgPSBmdW5jdGlvbiBzZWVrYWJsZVN0YXJ0KCkge1xuICAgIHZhciBzZWVrYWJsZSA9IHRoaXMucGxheWVyXy5zZWVrYWJsZSgpO1xuICAgIHZhciBzZWVrYWJsZVN0YXJ0cyA9IFtdO1xuICAgIHZhciBpID0gc2Vla2FibGUgPyBzZWVrYWJsZS5sZW5ndGggOiAwO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgc2Vla2FibGVTdGFydHMucHVzaChzZWVrYWJsZS5zdGFydChpKSk7XG4gICAgfSAvLyBncmFiIHRoZSBmaXJzdCBzZWVrYWJsZSBzdGFydCBhZnRlciBzb3J0aW5nLCBvciBpZiB0aGVyZSBhcmUgbm9uZVxuICAgIC8vIGRlZmF1bHQgdG8gMFxuXG5cbiAgICByZXR1cm4gc2Vla2FibGVTdGFydHMubGVuZ3RoID8gc2Vla2FibGVTdGFydHMuc29ydCgpWzBdIDogMDtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBsaXZlIHRpbWUgd2luZG93IGFrYVxuICAgKiB0aGUgYW1vdW50IG9mIHRpbWUgYmV0d2VlbiBzZWVrYWJsZSBzdGFydCBhbmRcbiAgICogbGl2ZSBjdXJyZW50IHRpbWUuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgYW1vdW50IG9mIHNlY29uZHMgdGhhdCBhcmUgc2Vla2FibGUgaW5cbiAgICogICAgICAgICB0aGUgbGl2ZSB2aWRlby5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubGl2ZVdpbmRvdyA9IGZ1bmN0aW9uIGxpdmVXaW5kb3coKSB7XG4gICAgdmFyIGxpdmVDdXJyZW50VGltZSA9IHRoaXMubGl2ZUN1cnJlbnRUaW1lKCk7XG5cbiAgICBpZiAobGl2ZUN1cnJlbnRUaW1lID09PSBJbmZpbml0eSkge1xuICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgIH1cblxuICAgIHJldHVybiBsaXZlQ3VycmVudFRpbWUgLSB0aGlzLnNlZWthYmxlU3RhcnQoKTtcbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgcGxheWVyIGlzIGxpdmUsIG9ubHkgY2hlY2tzIGlmIHRoaXMgY29tcG9uZW50XG4gICAqIGlzIHRyYWNraW5nIGxpdmUgcGxheWJhY2sgb3Igbm90XG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgV2V0aGVyIGxpdmVUcmFja2VyIGlzIHRyYWNraW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmlzTGl2ZSA9IGZ1bmN0aW9uIGlzTGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1RyYWNraW5nKCk7XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgY3VycmVudFRpbWUgaXMgYXQgdGhlIGxpdmUgZWRnZSBhbmQgd29uJ3QgZmFsbCBiZWhpbmRcbiAgICogb24gZWFjaCBzZWVrYWJsZWVuZGNoYW5nZVxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIFdldGhlciBwbGF5YmFjayBpcyBhdCB0aGUgbGl2ZSBlZGdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmF0TGl2ZUVkZ2UgPSBmdW5jdGlvbiBhdExpdmVFZGdlKCkge1xuICAgIHJldHVybiAhdGhpcy5iZWhpbmRMaXZlRWRnZSgpO1xuICB9XG4gIC8qKlxuICAgKiBnZXQgd2hhdCB3ZSBleHBlY3QgdGhlIGxpdmUgY3VycmVudCB0aW1lIHRvIGJlXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgZXhwZWN0ZWQgbGl2ZSBjdXJyZW50IHRpbWVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ubGl2ZUN1cnJlbnRUaW1lID0gZnVuY3Rpb24gbGl2ZUN1cnJlbnRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhc3RTZWVrRW5kKCkgKyB0aGlzLnNlZWthYmxlRW5kKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0aGF0IGhhdmUgb2NjdXJlZCBhZnRlciBzZWVrYWJsZSBlbmRcbiAgICogY2hhbmdlZC4gVGhpcyB3aWxsIGJlIHJlc2V0IHRvIDAgb25jZSBzZWVrYWJsZSBlbmQgY2hhbmdlcy5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFNlY29uZHMgcGFzdCB0aGUgY3VycmVudCBzZWVrYWJsZSBlbmRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFzdFNlZWtFbmQgPSBmdW5jdGlvbiBwYXN0U2Vla0VuZCgpIHtcbiAgICB2YXIgc2Vla2FibGVFbmQgPSB0aGlzLnNlZWthYmxlRW5kKCk7XG5cbiAgICBpZiAodGhpcy5sYXN0U2Vla0VuZF8gIT09IC0xICYmIHNlZWthYmxlRW5kICE9PSB0aGlzLmxhc3RTZWVrRW5kXykge1xuICAgICAgdGhpcy5wYXN0U2Vla0VuZF8gPSAwO1xuICAgIH1cblxuICAgIHRoaXMubGFzdFNlZWtFbmRfID0gc2Vla2FibGVFbmQ7XG4gICAgcmV0dXJuIHRoaXMucGFzdFNlZWtFbmRfO1xuICB9XG4gIC8qKlxuICAgKiBJZiB3ZSBhcmUgY3VycmVudGx5IGJlaGluZCB0aGUgbGl2ZSBlZGdlLCBha2EgY3VycmVudFRpbWUgd2lsbCBiZVxuICAgKiBiZWhpbmQgb24gYSBzZWVrYWJsZWVuZGNoYW5nZVxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIElmIHdlIGFyZSBiZWhpbmQgdGhlIGxpdmUgZWRnZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5iZWhpbmRMaXZlRWRnZSA9IGZ1bmN0aW9uIGJlaGluZExpdmVFZGdlKCkge1xuICAgIHJldHVybiB0aGlzLmJlaGluZExpdmVFZGdlXztcbiAgfVxuICAvKipcbiAgICogV2V0aGVyIGxpdmUgdHJhY2tlciBpcyBjdXJyZW50bHkgdHJhY2tpbmcgb3Igbm90LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pc1RyYWNraW5nID0gZnVuY3Rpb24gaXNUcmFja2luZygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMudHJhY2tpbmdJbnRlcnZhbF8gPT09ICdudW1iZXInO1xuICB9XG4gIC8qKlxuICAgKiBTZWVrIHRvIHRoZSBsaXZlIGVkZ2UgaWYgd2UgYXJlIGJlaGluZCB0aGUgbGl2ZSBlZGdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNlZWtUb0xpdmVFZGdlID0gZnVuY3Rpb24gc2Vla1RvTGl2ZUVkZ2UoKSB7XG4gICAgdGhpcy5zZWVrZWRCZWhpbmRMaXZlXyA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuYXRMaXZlRWRnZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBza2lwTmV4dFNlZWtlZF9cblxuXG4gICAgdGhpcy5za2lwTmV4dFNlZWtlZF8gPSB0cnVlO1xuICAgIHRoaXMucGxheWVyXy5jdXJyZW50VGltZSh0aGlzLmxpdmVDdXJyZW50VGltZSgpKTtcbiAgfVxuICAvKipcbiAgICogRGlzcG9zZSBvZiBsaXZlVHJhY2tlclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLm9mZihkb2N1bWVudCwgJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xuICAgIHRoaXMuc3RvcFRyYWNraW5nKCk7XG5cbiAgICBfQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIExpdmVUcmFja2VyO1xufShDb21wb25lbnQpO1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0xpdmVUcmFja2VyJywgTGl2ZVRyYWNrZXIpO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBmaXJlIGEgc291cmNlc2V0IHdoZW4gdGhlcmUgaXMgc29tZXRoaW5nXG4gKiBzaW1pbGFyIHRvIGBtZWRpYUVsLmxvYWQoKWAgYmVpbmcgY2FsbGVkLiBJdCB3aWxsIHRyeSB0byBmaW5kIHRoZSBzb3VyY2UgdmlhXG4gKiB0aGUgYHNyY2AgYXR0cmlidXRlIGFuZCB0aGVuIHRoZSBgPHNvdXJjZT5gIGVsZW1lbnRzLiBJdCB3aWxsIHRoZW4gZmlyZSBgc291cmNlc2V0YFxuICogd2l0aCB0aGUgc291cmNlIHRoYXQgd2FzIGZvdW5kIG9yIGVtcHR5IHN0cmluZyBpZiB3ZSBjYW5ub3Qga25vdy4gSWYgaXQgY2Fubm90XG4gKiBmaW5kIGEgc291cmNlIHRoZW4gYHNvdXJjZXNldGAgd2lsbCBub3QgYmUgZmlyZWQuXG4gKlxuICogQHBhcmFtIHtIdG1sNX0gdGVjaFxuICogICAgICAgIFRoZSB0ZWNoIG9iamVjdCB0aGF0IHNvdXJjZXNldCB3YXMgc2V0dXAgb25cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICByZXR1cm5zIGZhbHNlIGlmIHRoZSBzb3VyY2VzZXQgd2FzIG5vdCBmaXJlZCBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKi9cblxudmFyIHNvdXJjZXNldExvYWQgPSBmdW5jdGlvbiBzb3VyY2VzZXRMb2FkKHRlY2gpIHtcbiAgdmFyIGVsID0gdGVjaC5lbCgpOyAvLyBpZiBgZWwuc3JjYCBpcyBzZXQsIHRoYXQgc291cmNlIHdpbGwgYmUgbG9hZGVkLlxuXG4gIGlmIChlbC5oYXNBdHRyaWJ1dGUoJ3NyYycpKSB7XG4gICAgdGVjaC50cmlnZ2VyU291cmNlc2V0KGVsLnNyYyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIFNpbmNlIHRoZXJlIGlzbid0IGEgc3JjIHByb3BlcnR5IG9uIHRoZSBtZWRpYSBlbGVtZW50LCBzb3VyY2UgZWxlbWVudHMgd2lsbCBiZSB1c2VkIGZvclxuICAgKiBpbXBsZW1lbnRpbmcgdGhlIHNvdXJjZSBzZWxlY3Rpb24gYWxnb3JpdGhtLiBUaGlzIGhhcHBlbnMgYXN5bmNocm9ub3VzbHkgYW5kXG4gICAqIGZvciBtb3N0IGNhc2VzIHdlcmUgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBzb3VyY2Ugd2UgY2Fubm90IHRlbGwgd2hhdCBzb3VyY2Ugd2lsbFxuICAgKiBiZSBsb2FkZWQsIHdpdGhvdXQgcmUtaW1wbGVtZW50aW5nIHRoZSBzb3VyY2Ugc2VsZWN0aW9uIGFsZ29yaXRobS4gQXQgdGhpcyB0aW1lIHdlIGFyZSBub3RcbiAgICogZ29pbmcgdG8gZG8gdGhhdC4gVGhlcmUgYXJlIHRocmVlIHNwZWNpYWwgY2FzZXMgdGhhdCB3ZSBkbyBoYW5kbGUgaGVyZSB0aG91Z2g6XG4gICAqXG4gICAqIDEuIElmIHRoZXJlIGFyZSBubyBzb3VyY2VzLCBkbyBub3QgZmlyZSBgc291cmNlc2V0YC5cbiAgICogMi4gSWYgdGhlcmUgaXMgb25seSBvbmUgYDxzb3VyY2U+YCB3aXRoIGEgYHNyY2AgcHJvcGVydHkvYXR0cmlidXRlIHRoYXQgaXMgb3VyIGBzcmNgXG4gICAqIDMuIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgYDxzb3VyY2U+YCBidXQgYWxsIG9mIHRoZW0gaGF2ZSB0aGUgc2FtZSBgc3JjYCB1cmwuXG4gICAqICAgIFRoYXQgd2lsbCBiZSBvdXIgc3JjLlxuICAgKi9cblxuXG4gIHZhciBzb3VyY2VzID0gdGVjaC4kJCgnc291cmNlJyk7XG4gIHZhciBzcmNVcmxzID0gW107XG4gIHZhciBzcmMgPSAnJzsgLy8gaWYgdGhlcmUgYXJlIG5vIHNvdXJjZXMsIGRvIG5vdCBmaXJlIHNvdXJjZXNldFxuXG4gIGlmICghc291cmNlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gb25seSBjb3VudCB2YWxpZC9ub24tZHVwbGljYXRlIHNvdXJjZSBlbGVtZW50c1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHVybCA9IHNvdXJjZXNbaV0uc3JjO1xuXG4gICAgaWYgKHVybCAmJiBzcmNVcmxzLmluZGV4T2YodXJsKSA9PT0gLTEpIHtcbiAgICAgIHNyY1VybHMucHVzaCh1cmwpO1xuICAgIH1cbiAgfSAvLyB0aGVyZSB3ZXJlIG5vIHZhbGlkIHNvdXJjZXNcblxuXG4gIGlmICghc3JjVXJscy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gdGhlcmUgaXMgb25seSBvbmUgdmFsaWQgc291cmNlIGVsZW1lbnQgdXJsXG4gIC8vIHVzZSB0aGF0XG5cblxuICBpZiAoc3JjVXJscy5sZW5ndGggPT09IDEpIHtcbiAgICBzcmMgPSBzcmNVcmxzWzBdO1xuICB9XG5cbiAgdGVjaC50cmlnZ2VyU291cmNlc2V0KHNyYyk7XG4gIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogb3VyIGltcGxlbWVudGF0aW9uIG9mIGFuIGBpbm5lckhUTUxgIGRlc2NyaXB0b3IgZm9yIGJyb3dzZXJzXG4gKiB0aGF0IGRvIG5vdCBoYXZlIG9uZS5cbiAqL1xuXG5cbnZhciBpbm5lckhUTUxEZXNjcmlwdG9yUG9seWZpbGwgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdpbm5lckhUTUwnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lTm9kZSh0cnVlKS5pbm5lckhUTUw7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHYpIHtcbiAgICAvLyBtYWtlIGEgZHVtbXkgbm9kZSB0byB1c2UgaW5uZXJIVE1MIG9uXG4gICAgdmFyIGR1bW15ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpOyAvLyBzZXQgaW5uZXJIVE1MIHRvIHRoZSB2YWx1ZSBwcm92aWRlZFxuXG4gICAgZHVtbXkuaW5uZXJIVE1MID0gdjsgLy8gbWFrZSBhIGRvY3VtZW50IGZyYWdtZW50IHRvIGhvbGQgdGhlIG5vZGVzIGZyb20gZHVtbXlcblxuICAgIHZhciBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOyAvLyBjb3B5IGFsbCBvZiB0aGUgbm9kZXMgY3JlYXRlZCBieSB0aGUgaW5uZXJIVE1MIG9uIGR1bW15XG4gICAgLy8gdG8gdGhlIGRvY3VtZW50IGZyYWdtZW50XG5cbiAgICB3aGlsZSAoZHVtbXkuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQoZHVtbXkuY2hpbGROb2Rlc1swXSk7XG4gICAgfSAvLyByZW1vdmUgY29udGVudFxuXG5cbiAgICB0aGlzLmlubmVyVGV4dCA9ICcnOyAvLyBub3cgd2UgYWRkIGFsbCBvZiB0aGF0IGh0bWwgaW4gb25lIGJ5IGFwcGVuZGluZyB0aGVcbiAgICAvLyBkb2N1bWVudCBmcmFnbWVudC4gVGhpcyBpcyBob3cgaW5uZXJIVE1MIGRvZXMgaXQuXG5cbiAgICB3aW5kb3ckMS5FbGVtZW50LnByb3RvdHlwZS5hcHBlbmRDaGlsZC5jYWxsKHRoaXMsIGRvY0ZyYWcpOyAvLyB0aGVuIHJldHVybiB0aGUgcmVzdWx0IHRoYXQgaW5uZXJIVE1MJ3Mgc2V0dGVyIHdvdWxkXG5cbiAgICByZXR1cm4gdGhpcy5pbm5lckhUTUw7XG4gIH1cbn0pO1xuLyoqXG4gKiBHZXQgYSBwcm9wZXJ0eSBkZXNjcmlwdG9yIGdpdmVuIGEgbGlzdCBvZiBwcmlvcml0aWVzIGFuZCB0aGVcbiAqIHByb3BlcnR5IHRvIGdldC5cbiAqL1xuXG52YXIgZ2V0RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldERlc2NyaXB0b3IocHJpb3JpdHksIHByb3ApIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW9yaXR5Lmxlbmd0aDsgaSsrKSB7XG4gICAgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJpb3JpdHlbaV0sIHByb3ApO1xuXG4gICAgaWYgKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5zZXQgJiYgZGVzY3JpcHRvci5nZXQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgZ2V0SW5uZXJIVE1MRGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldElubmVySFRNTERlc2NyaXB0b3IodGVjaCkge1xuICByZXR1cm4gZ2V0RGVzY3JpcHRvcihbdGVjaC5lbCgpLCB3aW5kb3ckMS5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSwgd2luZG93JDEuRWxlbWVudC5wcm90b3R5cGUsIGlubmVySFRNTERlc2NyaXB0b3JQb2x5ZmlsbF0sICdpbm5lckhUTUwnKTtcbn07XG4vKipcbiAqIFBhdGNoZXMgYnJvd3NlciBpbnRlcm5hbCBmdW5jdGlvbnMgc28gdGhhdCB3ZSBjYW4gdGVsbCBzeW5jaHJvbm91c2x5XG4gKiBpZiBhIGA8c291cmNlPmAgd2FzIGFwcGVuZGVkIHRvIHRoZSBtZWRpYSBlbGVtZW50LiBGb3Igc29tZSByZWFzb24gdGhpc1xuICogY2F1c2VzIGEgYHNvdXJjZXNldGAgaWYgdGhlIHRoZSBtZWRpYSBlbGVtZW50IGlzIHJlYWR5IGFuZCBoYXMgbm8gc291cmNlLlxuICogVGhpcyBoYXBwZW5zIHdoZW46XG4gKiAtIFRoZSBwYWdlIGhhcyBqdXN0IGxvYWRlZCBhbmQgdGhlIG1lZGlhIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhIHNvdXJjZS5cbiAqIC0gVGhlIG1lZGlhIGVsZW1lbnQgd2FzIGVtcHRpZWQgb2YgYWxsIHNvdXJjZXMsIHRoZW4gYGxvYWQoKWAgd2FzIGNhbGxlZC5cbiAqXG4gKiBJdCBkb2VzIHRoaXMgYnkgcGF0Y2hpbmcgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMvcHJvcGVydGllcyB3aGVuIHRoZXkgYXJlIHN1cHBvcnRlZDpcbiAqXG4gKiAtIGBhcHBlbmQoKWAgLSBjYW4gYmUgdXNlZCB0byBhZGQgYSBgPHNvdXJjZT5gIGVsZW1lbnQgdG8gdGhlIG1lZGlhIGVsZW1lbnRcbiAqIC0gYGFwcGVuZENoaWxkKClgIC0gY2FuIGJlIHVzZWQgdG8gYWRkIGEgYDxzb3VyY2U+YCBlbGVtZW50IHRvIHRoZSBtZWRpYSBlbGVtZW50XG4gKiAtIGBpbnNlcnRBZGphY2VudEhUTUwoKWAgLSAgY2FuIGJlIHVzZWQgdG8gYWRkIGEgYDxzb3VyY2U+YCBlbGVtZW50IHRvIHRoZSBtZWRpYSBlbGVtZW50XG4gKiAtIGBpbm5lckhUTUxgIC0gIGNhbiBiZSB1c2VkIHRvIGFkZCBhIGA8c291cmNlPmAgZWxlbWVudCB0byB0aGUgbWVkaWEgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7SHRtbDV9IHRlY2hcbiAqICAgICAgICBUaGUgdGVjaCBvYmplY3QgdGhhdCBzb3VyY2VzZXQgaXMgYmVpbmcgc2V0dXAgb24uXG4gKi9cblxuXG52YXIgZmlyc3RTb3VyY2VXYXRjaCA9IGZ1bmN0aW9uIGZpcnN0U291cmNlV2F0Y2godGVjaCkge1xuICB2YXIgZWwgPSB0ZWNoLmVsKCk7IC8vIG1ha2Ugc3VyZSBmaXJzdFNvdXJjZVdhdGNoIGlzbid0IHNldHVwIHR3aWNlLlxuXG4gIGlmIChlbC5yZXNldFNvdXJjZVdhdGNoXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBvbGQgPSB7fTtcbiAgdmFyIGlubmVyRGVzY3JpcHRvciA9IGdldElubmVySFRNTERlc2NyaXB0b3IodGVjaCk7XG5cbiAgdmFyIGFwcGVuZFdyYXBwZXIgPSBmdW5jdGlvbiBhcHBlbmRXcmFwcGVyKGFwcGVuZEZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmV0dmFsID0gYXBwZW5kRm4uYXBwbHkoZWwsIGFyZ3MpO1xuICAgICAgc291cmNlc2V0TG9hZCh0ZWNoKTtcbiAgICAgIHJldHVybiByZXR2YWw7XG4gICAgfTtcbiAgfTtcblxuICBbJ2FwcGVuZCcsICdhcHBlbmRDaGlsZCcsICdpbnNlcnRBZGphY2VudEhUTUwnXS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgaWYgKCFlbFtrXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gc3RvcmUgdGhlIG9sZCBmdW5jdGlvblxuXG5cbiAgICBvbGRba10gPSBlbFtrXTsgLy8gY2FsbCB0aGUgb2xkIGZ1bmN0aW9uIHdpdGggYSBzb3VyY2VzZXQgaWYgYSBzb3VyY2VcbiAgICAvLyB3YXMgbG9hZGVkXG5cbiAgICBlbFtrXSA9IGFwcGVuZFdyYXBwZXIob2xkW2tdKTtcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ2lubmVySFRNTCcsIG1lcmdlT3B0aW9ucyhpbm5lckRlc2NyaXB0b3IsIHtcbiAgICBzZXQ6IGFwcGVuZFdyYXBwZXIoaW5uZXJEZXNjcmlwdG9yLnNldClcbiAgfSkpO1xuXG4gIGVsLnJlc2V0U291cmNlV2F0Y2hfID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlc2V0U291cmNlV2F0Y2hfID0gbnVsbDtcbiAgICBPYmplY3Qua2V5cyhvbGQpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgIGVsW2tdID0gb2xkW2tdO1xuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ2lubmVySFRNTCcsIGlubmVyRGVzY3JpcHRvcik7XG4gIH07IC8vIG9uIHRoZSBmaXJzdCBzb3VyY2VzZXQsIHdlIG5lZWQgdG8gcmV2ZXJ0IG91ciBjaGFuZ2VzXG5cblxuICB0ZWNoLm9uZSgnc291cmNlc2V0JywgZWwucmVzZXRTb3VyY2VXYXRjaF8pO1xufTtcbi8qKlxuICogb3VyIGltcGxlbWVudGF0aW9uIG9mIGEgYHNyY2AgZGVzY3JpcHRvciBmb3IgYnJvd3NlcnNcbiAqIHRoYXQgZG8gbm90IGhhdmUgb25lLlxuICovXG5cblxudmFyIHNyY0Rlc2NyaXB0b3JQb2x5ZmlsbCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3NyYycsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlKCdzcmMnKSkge1xuICAgICAgcmV0dXJuIGdldEFic29sdXRlVVJMKHdpbmRvdyQxLkVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZS5jYWxsKHRoaXMsICdzcmMnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh2KSB7XG4gICAgd2luZG93JDEuRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlLmNhbGwodGhpcywgJ3NyYycsIHYpO1xuICAgIHJldHVybiB2O1xuICB9XG59KTtcblxudmFyIGdldFNyY0Rlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRTcmNEZXNjcmlwdG9yKHRlY2gpIHtcbiAgcmV0dXJuIGdldERlc2NyaXB0b3IoW3RlY2guZWwoKSwgd2luZG93JDEuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUsIHNyY0Rlc2NyaXB0b3JQb2x5ZmlsbF0sICdzcmMnKTtcbn07XG4vKipcbiAqIHNldHVwIGBzb3VyY2VzZXRgIGhhbmRsaW5nIG9uIHRoZSBgSHRtbDVgIHRlY2guIFRoaXMgZnVuY3Rpb25cbiAqIHBhdGNoZXMgdGhlIGZvbGxvd2luZyBlbGVtZW50IHByb3BlcnRpZXMvZnVuY3Rpb25zOlxuICpcbiAqIC0gYHNyY2AgLSB0byBkZXRlcm1pbmUgd2hlbiBgc3JjYCBpcyBzZXRcbiAqIC0gYHNldEF0dHJpYnV0ZSgpYCAtIHRvIGRldGVybWluZSB3aGVuIGBzcmNgIGlzIHNldFxuICogLSBgbG9hZCgpYCAtIHRoaXMgcmUtdHJpZ2dlcnMgdGhlIHNvdXJjZSBzZWxlY3Rpb24gYWxnb3JpdGhtLCBhbmQgY2FuXG4gKiAgICAgICAgICAgICAgY2F1c2UgYSBzb3VyY2VzZXQuXG4gKlxuICogSWYgdGhlcmUgaXMgbm8gc291cmNlIHdoZW4gd2UgYXJlIGFkZGluZyBgc291cmNlc2V0YCBzdXBwb3J0IG9yIGR1cmluZyBhIGBsb2FkKClgXG4gKiB3ZSBhbHNvIHBhdGNoIHRoZSBmdW5jdGlvbnMgbGlzdGVkIGluIGBmaXJzdFNvdXJjZVdhdGNoYC5cbiAqXG4gKiBAcGFyYW0ge0h0bWw1fSB0ZWNoXG4gKiAgICAgICAgVGhlIHRlY2ggdG8gcGF0Y2hcbiAqL1xuXG5cbnZhciBzZXR1cFNvdXJjZXNldCA9IGZ1bmN0aW9uIHNldHVwU291cmNlc2V0KHRlY2gpIHtcbiAgaWYgKCF0ZWNoLmZlYXR1cmVzU291cmNlc2V0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGVsID0gdGVjaC5lbCgpOyAvLyBtYWtlIHN1cmUgc291cmNlc2V0IGlzbid0IHNldHVwIHR3aWNlLlxuXG4gIGlmIChlbC5yZXNldFNvdXJjZXNldF8pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc3JjRGVzY3JpcHRvciA9IGdldFNyY0Rlc2NyaXB0b3IodGVjaCk7XG4gIHZhciBvbGRTZXRBdHRyaWJ1dGUgPSBlbC5zZXRBdHRyaWJ1dGU7XG4gIHZhciBvbGRMb2FkID0gZWwubG9hZDtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAnc3JjJywgbWVyZ2VPcHRpb25zKHNyY0Rlc2NyaXB0b3IsIHtcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2KSB7XG4gICAgICB2YXIgcmV0dmFsID0gc3JjRGVzY3JpcHRvci5zZXQuY2FsbChlbCwgdik7IC8vIHdlIHVzZSB0aGUgZ2V0dGVyIGhlcmUgdG8gZ2V0IHRoZSBhY3R1YWwgdmFsdWUgc2V0IG9uIHNyY1xuXG4gICAgICB0ZWNoLnRyaWdnZXJTb3VyY2VzZXQoZWwuc3JjKTtcbiAgICAgIHJldHVybiByZXR2YWw7XG4gICAgfVxuICB9KSk7XG5cbiAgZWwuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKG4sIHYpIHtcbiAgICB2YXIgcmV0dmFsID0gb2xkU2V0QXR0cmlidXRlLmNhbGwoZWwsIG4sIHYpO1xuXG4gICAgaWYgKC9zcmMvaS50ZXN0KG4pKSB7XG4gICAgICB0ZWNoLnRyaWdnZXJTb3VyY2VzZXQoZWwuc3JjKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0dmFsO1xuICB9O1xuXG4gIGVsLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJldHZhbCA9IG9sZExvYWQuY2FsbChlbCk7IC8vIGlmIGxvYWQgd2FzIGNhbGxlZCwgYnV0IHRoZXJlIHdhcyBubyBzb3VyY2UgdG8gZmlyZVxuICAgIC8vIHNvdXJjZXNldCBvbi4gV2UgaGF2ZSB0byB3YXRjaCBmb3IgYSBzb3VyY2UgYXBwZW5kXG4gICAgLy8gYXMgdGhhdCBjYW4gdHJpZ2dlciBhIGBzb3VyY2VzZXRgIHdoZW4gdGhlIG1lZGlhIGVsZW1lbnRcbiAgICAvLyBoYXMgbm8gc291cmNlXG5cbiAgICBpZiAoIXNvdXJjZXNldExvYWQodGVjaCkpIHtcbiAgICAgIHRlY2gudHJpZ2dlclNvdXJjZXNldCgnJyk7XG4gICAgICBmaXJzdFNvdXJjZVdhdGNoKHRlY2gpO1xuICAgIH1cblxuICAgIHJldHVybiByZXR2YWw7XG4gIH07XG5cbiAgaWYgKGVsLmN1cnJlbnRTcmMpIHtcbiAgICB0ZWNoLnRyaWdnZXJTb3VyY2VzZXQoZWwuY3VycmVudFNyYyk7XG4gIH0gZWxzZSBpZiAoIXNvdXJjZXNldExvYWQodGVjaCkpIHtcbiAgICBmaXJzdFNvdXJjZVdhdGNoKHRlY2gpO1xuICB9XG5cbiAgZWwucmVzZXRTb3VyY2VzZXRfID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlc2V0U291cmNlc2V0XyA9IG51bGw7XG4gICAgZWwubG9hZCA9IG9sZExvYWQ7XG4gICAgZWwuc2V0QXR0cmlidXRlID0gb2xkU2V0QXR0cmlidXRlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ3NyYycsIHNyY0Rlc2NyaXB0b3IpO1xuXG4gICAgaWYgKGVsLnJlc2V0U291cmNlV2F0Y2hfKSB7XG4gICAgICBlbC5yZXNldFNvdXJjZVdhdGNoXygpO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogT2JqZWN0LmRlZmluZVByb3BlcnR5IGJ1dCBcImxhenlcIiwgd2hpY2ggbWVhbnMgdGhhdCB0aGUgdmFsdWUgaXMgb25seSBzZXQgYWZ0ZXJcbiAqIGl0IHJldHJpZXZlZCB0aGUgZmlyc3QgdGltZSwgcmF0aGVyIHRoYW4gYmVpbmcgc2V0IHJpZ2h0IGF3YXkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiB0aGUgb2JqZWN0IHRvIHNldCB0aGUgcHJvcGVydHkgb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSBmb3IgdGhlIHByb3BlcnR5IHRvIHNldFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZ2V0VmFsdWUgdGhlIGZ1bmN0aW9uIHVzZWQgdG8gZ2V0IHRoZSB2YWx1ZSB3aGVuIGl0IGlzIG5lZWRlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2V0dGVyIHdldGhlciBhIHNldHRlciBzaG9vdWxkIGJlIGFsbG93ZWQgb3Igbm90XG4gKi9cbnZhciBkZWZpbmVMYXp5UHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVMYXp5UHJvcGVydHkob2JqLCBrZXksIGdldFZhbHVlLCBzZXR0ZXIpIHtcbiAgaWYgKHNldHRlciA9PT0gdm9pZCAwKSB7XG4gICAgc2V0dGVyID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzZXQgPSBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKCk7XG4gICAgICBzZXQodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBpZiAoc2V0dGVyKSB7XG4gICAgb3B0aW9ucy5zZXQgPSBzZXQ7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogSFRNTDUgTWVkaWEgQ29udHJvbGxlciAtIFdyYXBwZXIgZm9yIEhUTUw1IE1lZGlhIEFQSVxuICpcbiAqIEBtaXhlcyBUZWNoflNvdXJjZUhhbmRsZXJBZGRpdGlvbnNcbiAqIEBleHRlbmRzIFRlY2hcbiAqL1xuXG52YXIgSHRtbDUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9UZWNoKSB7XG4gIF9pbmhlcml0c0xvb3NlKEh0bWw1LCBfVGVjaCk7XG5cbiAgLyoqXG4gICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgVGVjaC5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgKiAgICAgICAgVGhlIGtleS92YWx1ZSBzdG9yZSBvZiBwbGF5ZXIgb3B0aW9ucy5cbiAgKlxuICAqIEBwYXJhbSB7Q29tcG9uZW50flJlYWR5Q2FsbGJhY2t9IHJlYWR5XG4gICogICAgICAgIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgYEhUTUw1YCBUZWNoIGlzIHJlYWR5LlxuICAqL1xuICBmdW5jdGlvbiBIdG1sNShvcHRpb25zLCByZWFkeSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1RlY2guY2FsbCh0aGlzLCBvcHRpb25zLCByZWFkeSkgfHwgdGhpcztcbiAgICB2YXIgc291cmNlID0gb3B0aW9ucy5zb3VyY2U7XG4gICAgdmFyIGNyb3Nzb3JpZ2luVHJhY2tzID0gZmFsc2U7IC8vIFNldCB0aGUgc291cmNlIGlmIG9uZSBpcyBwcm92aWRlZFxuICAgIC8vIDEpIENoZWNrIGlmIHRoZSBzb3VyY2UgaXMgbmV3IChpZiBub3QsIHdlIHdhbnQgdG8ga2VlcCB0aGUgb3JpZ2luYWwgc28gcGxheWJhY2sgaXNuJ3QgaW50ZXJydXB0ZWQpXG4gICAgLy8gMikgQ2hlY2sgdG8gc2VlIGlmIHRoZSBuZXR3b3JrIHN0YXRlIG9mIHRoZSB0YWcgd2FzIGZhaWxlZCBhdCBpbml0LCBhbmQgaWYgc28sIHJlc2V0IHRoZSBzb3VyY2VcbiAgICAvLyBhbnl3YXkgc28gdGhlIGVycm9yIGdldHMgZmlyZWQuXG5cbiAgICBpZiAoc291cmNlICYmIChfdGhpcy5lbF8uY3VycmVudFNyYyAhPT0gc291cmNlLnNyYyB8fCBvcHRpb25zLnRhZyAmJiBvcHRpb25zLnRhZy5pbml0TmV0d29ya1N0YXRlXyA9PT0gMykpIHtcbiAgICAgIF90aGlzLnNldFNvdXJjZShzb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5oYW5kbGVMYXRlSW5pdF8oX3RoaXMuZWxfKTtcbiAgICB9IC8vIHNldHVwIHNvdXJjZXNldCBhZnRlciBsYXRlIHNvdXJjZXNldC9pbml0XG5cblxuICAgIGlmIChvcHRpb25zLmVuYWJsZVNvdXJjZXNldCkge1xuICAgICAgX3RoaXMuc2V0dXBTb3VyY2VzZXRIYW5kbGluZ18oKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuZWxfLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgdmFyIG5vZGVzID0gX3RoaXMuZWxfLmNoaWxkTm9kZXM7XG4gICAgICB2YXIgbm9kZXNMZW5ndGggPSBub2Rlcy5sZW5ndGg7XG4gICAgICB2YXIgcmVtb3ZlTm9kZXMgPSBbXTtcblxuICAgICAgd2hpbGUgKG5vZGVzTGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tub2Rlc0xlbmd0aF07XG4gICAgICAgIHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAobm9kZU5hbWUgPT09ICd0cmFjaycpIHtcbiAgICAgICAgICBpZiAoIV90aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykge1xuICAgICAgICAgICAgLy8gRW1wdHkgdmlkZW8gdGFnIHRyYWNrcyBzbyB0aGUgYnVpbHQtaW4gcGxheWVyIGRvZXNuJ3QgdXNlIHRoZW0gYWxzby5cbiAgICAgICAgICAgIC8vIFRoaXMgbWF5IG5vdCBiZSBmYXN0IGVub3VnaCB0byBzdG9wIEhUTUw1IGJyb3dzZXJzIGZyb20gcmVhZGluZyB0aGUgdGFnc1xuICAgICAgICAgICAgLy8gc28gd2UnbGwgbmVlZCB0byB0dXJuIG9mZiBhbnkgZGVmYXVsdCB0cmFja3MgaWYgd2UncmUgbWFudWFsbHkgZG9pbmdcbiAgICAgICAgICAgIC8vIGNhcHRpb25zIGFuZCBzdWJ0aXRsZXMuIHZpZGVvRWxlbWVudC50ZXh0VHJhY2tzXG4gICAgICAgICAgICByZW1vdmVOb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzdG9yZSBIVE1MVHJhY2tFbGVtZW50IGFuZCBUZXh0VHJhY2sgdG8gcmVtb3RlIGxpc3RcbiAgICAgICAgICAgIF90aGlzLnJlbW90ZVRleHRUcmFja0VscygpLmFkZFRyYWNrRWxlbWVudF8obm9kZSk7XG5cbiAgICAgICAgICAgIF90aGlzLnJlbW90ZVRleHRUcmFja3MoKS5hZGRUcmFjayhub2RlLnRyYWNrKTtcblxuICAgICAgICAgICAgX3RoaXMudGV4dFRyYWNrcygpLmFkZFRyYWNrKG5vZGUudHJhY2spO1xuXG4gICAgICAgICAgICBpZiAoIWNyb3Nzb3JpZ2luVHJhY2tzICYmICFfdGhpcy5lbF8uaGFzQXR0cmlidXRlKCdjcm9zc29yaWdpbicpICYmIGlzQ3Jvc3NPcmlnaW4obm9kZS5zcmMpKSB7XG4gICAgICAgICAgICAgIGNyb3Nzb3JpZ2luVHJhY2tzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdmVOb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBfdGhpcy5lbF8ucmVtb3ZlQ2hpbGQocmVtb3ZlTm9kZXNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnByb3h5TmF0aXZlVHJhY2tzXygpO1xuXG4gICAgaWYgKF90aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyAmJiBjcm9zc29yaWdpblRyYWNrcykge1xuICAgICAgbG9nLndhcm4oJ1RleHQgVHJhY2tzIGFyZSBiZWluZyBsb2FkZWQgZnJvbSBhbm90aGVyIG9yaWdpbiBidXQgdGhlIGNyb3Nzb3JpZ2luIGF0dHJpYnV0ZSBpc25cXCd0IHVzZWQuXFxuJyArICdUaGlzIG1heSBwcmV2ZW50IHRleHQgdHJhY2tzIGZyb20gbG9hZGluZy4nKTtcbiAgICB9IC8vIHByZXZlbnQgaU9TIFNhZmFyaSBmcm9tIGRpc2FibGluZyBtZXRhZGF0YSB0ZXh0IHRyYWNrcyBkdXJpbmcgbmF0aXZlIHBsYXliYWNrXG5cblxuICAgIF90aGlzLnJlc3RvcmVNZXRhZGF0YVRyYWNrc0luSU9TTmF0aXZlUGxheWVyXygpOyAvLyBEZXRlcm1pbmUgaWYgbmF0aXZlIGNvbnRyb2xzIHNob3VsZCBiZSB1c2VkXG4gICAgLy8gT3VyIGdvYWwgc2hvdWxkIGJlIHRvIGdldCB0aGUgY3VzdG9tIGNvbnRyb2xzIG9uIG1vYmlsZSBzb2xpZCBldmVyeXdoZXJlXG4gICAgLy8gc28gd2UgY2FuIHJlbW92ZSB0aGlzIGFsbCB0b2dldGhlci4gUmlnaHQgbm93IHRoaXMgd2lsbCBibG9jayBjdXN0b21cbiAgICAvLyBjb250cm9scyBvbiB0b3VjaCBlbmFibGVkIGxhcHRvcHMgbGlrZSB0aGUgQ2hyb21lIFBpeGVsXG5cblxuICAgIGlmICgoVE9VQ0hfRU5BQkxFRCB8fCBJU19JUEhPTkUgfHwgSVNfTkFUSVZFX0FORFJPSUQpICYmIG9wdGlvbnMubmF0aXZlQ29udHJvbHNGb3JUb3VjaCA9PT0gdHJ1ZSkge1xuICAgICAgX3RoaXMuc2V0Q29udHJvbHModHJ1ZSk7XG4gICAgfSAvLyBvbiBpT1MsIHdlIHdhbnQgdG8gcHJveHkgYHdlYmtpdGJlZ2luZnVsbHNjcmVlbmAgYW5kIGB3ZWJraXRlbmRmdWxsc2NyZWVuYFxuICAgIC8vIGludG8gYSBgZnVsbHNjcmVlbmNoYW5nZWAgZXZlbnRcblxuXG4gICAgX3RoaXMucHJveHlXZWJraXRGdWxsc2NyZWVuXygpO1xuXG4gICAgX3RoaXMudHJpZ2dlclJlYWR5KCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIERpc3Bvc2Ugb2YgYEhUTUw1YCBtZWRpYSBlbGVtZW50IGFuZCByZW1vdmUgYWxsIHRyYWNrcy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSHRtbDUucHJvdG90eXBlO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5lbF8gJiYgdGhpcy5lbF8ucmVzZXRTb3VyY2VzZXRfKSB7XG4gICAgICB0aGlzLmVsXy5yZXNldFNvdXJjZXNldF8oKTtcbiAgICB9XG5cbiAgICBIdG1sNS5kaXNwb3NlTWVkaWFFbGVtZW50KHRoaXMuZWxfKTtcbiAgICB0aGlzLm9wdGlvbnNfID0gbnVsbDsgLy8gdGVjaCB3aWxsIGhhbmRsZSBjbGVhcmluZyBvZiB0aGUgZW11bGF0ZWQgdHJhY2sgbGlzdFxuXG4gICAgX1RlY2gucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogTW9kaWZ5IHRoZSBtZWRpYSBlbGVtZW50IHNvIHRoYXQgd2UgY2FuIGRldGVjdCB3aGVuXG4gICAqIHRoZSBzb3VyY2UgaXMgY2hhbmdlZC4gRmlyZXMgYHNvdXJjZXNldGAganVzdCBhZnRlciB0aGUgc291cmNlIGhhcyBjaGFuZ2VkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldHVwU291cmNlc2V0SGFuZGxpbmdfID0gZnVuY3Rpb24gc2V0dXBTb3VyY2VzZXRIYW5kbGluZ18oKSB7XG4gICAgc2V0dXBTb3VyY2VzZXQodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gYSBjYXB0aW9ucyB0cmFjayBpcyBlbmFibGVkIGluIHRoZSBpT1MgU2FmYXJpIG5hdGl2ZSBwbGF5ZXIsIGFsbCBvdGhlclxuICAgKiB0cmFja3MgYXJlIGRpc2FibGVkIChpbmNsdWRpbmcgbWV0YWRhdGEgdHJhY2tzKSwgd2hpY2ggbnVsbHMgYWxsIG9mIHRoZWlyXG4gICAqIGFzc29jaWF0ZWQgY3VlIHBvaW50cy4gVGhpcyB3aWxsIHJlc3RvcmUgbWV0YWRhdGEgdHJhY2tzIHRvIHRoZWlyIHByZS1mdWxsc2NyZWVuXG4gICAqIHN0YXRlIGluIHRob3NlIGNhc2VzIHNvIHRoYXQgY3VlIHBvaW50cyBhcmUgbm90IG5lZWRsZXNzbHkgbG9zdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzdG9yZU1ldGFkYXRhVHJhY2tzSW5JT1NOYXRpdmVQbGF5ZXJfID0gZnVuY3Rpb24gcmVzdG9yZU1ldGFkYXRhVHJhY2tzSW5JT1NOYXRpdmVQbGF5ZXJfKCkge1xuICAgIHZhciB0ZXh0VHJhY2tzID0gdGhpcy50ZXh0VHJhY2tzKCk7XG4gICAgdmFyIG1ldGFkYXRhVHJhY2tzUHJlRnVsbHNjcmVlblN0YXRlOyAvLyBjYXB0dXJlcyBhIHNuYXBzaG90IG9mIGV2ZXJ5IG1ldGFkYXRhIHRyYWNrJ3MgY3VycmVudCBzdGF0ZVxuXG4gICAgdmFyIHRha2VNZXRhZGF0YVRyYWNrU25hcHNob3QgPSBmdW5jdGlvbiB0YWtlTWV0YWRhdGFUcmFja1NuYXBzaG90KCkge1xuICAgICAgbWV0YWRhdGFUcmFja3NQcmVGdWxsc2NyZWVuU3RhdGUgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0VHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0cmFjayA9IHRleHRUcmFja3NbaV07XG5cbiAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09ICdtZXRhZGF0YScpIHtcbiAgICAgICAgICBtZXRhZGF0YVRyYWNrc1ByZUZ1bGxzY3JlZW5TdGF0ZS5wdXNoKHtcbiAgICAgICAgICAgIHRyYWNrOiB0cmFjayxcbiAgICAgICAgICAgIHN0b3JlZE1vZGU6IHRyYWNrLm1vZGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07IC8vIHNuYXBzaG90IGVhY2ggbWV0YWRhdGEgdHJhY2sncyBpbml0aWFsIHN0YXRlLCBhbmQgdXBkYXRlIHRoZSBzbmFwc2hvdFxuICAgIC8vIGVhY2ggdGltZSB0aGVyZSBpcyBhIHRyYWNrICdjaGFuZ2UnIGV2ZW50XG5cblxuICAgIHRha2VNZXRhZGF0YVRyYWNrU25hcHNob3QoKTtcbiAgICB0ZXh0VHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRha2VNZXRhZGF0YVRyYWNrU25hcHNob3QpO1xuICAgIHRoaXMub24oJ2Rpc3Bvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGV4dFRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0YWtlTWV0YWRhdGFUcmFja1NuYXBzaG90KTtcbiAgICB9KTtcblxuICAgIHZhciByZXN0b3JlVHJhY2tNb2RlID0gZnVuY3Rpb24gcmVzdG9yZVRyYWNrTW9kZSgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWV0YWRhdGFUcmFja3NQcmVGdWxsc2NyZWVuU3RhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN0b3JlZFRyYWNrID0gbWV0YWRhdGFUcmFja3NQcmVGdWxsc2NyZWVuU3RhdGVbaV07XG5cbiAgICAgICAgaWYgKHN0b3JlZFRyYWNrLnRyYWNrLm1vZGUgPT09ICdkaXNhYmxlZCcgJiYgc3RvcmVkVHJhY2sudHJhY2subW9kZSAhPT0gc3RvcmVkVHJhY2suc3RvcmVkTW9kZSkge1xuICAgICAgICAgIHN0b3JlZFRyYWNrLnRyYWNrLm1vZGUgPSBzdG9yZWRUcmFjay5zdG9yZWRNb2RlO1xuICAgICAgICB9XG4gICAgICB9IC8vIHdlIG9ubHkgd2FudCB0aGlzIGhhbmRsZXIgdG8gYmUgZXhlY3V0ZWQgb24gdGhlIGZpcnN0ICdjaGFuZ2UnIGV2ZW50XG5cblxuICAgICAgdGV4dFRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCByZXN0b3JlVHJhY2tNb2RlKTtcbiAgICB9OyAvLyB3aGVuIHdlIGVudGVyIGZ1bGxzY3JlZW4gcGxheWJhY2ssIHN0b3AgdXBkYXRpbmcgdGhlIHNuYXBzaG90IGFuZFxuICAgIC8vIHJlc3RvcmUgYWxsIHRyYWNrIG1vZGVzIHRvIHRoZWlyIHByZS1mdWxsc2NyZWVuIHN0YXRlXG5cblxuICAgIHRoaXMub24oJ3dlYmtpdGJlZ2luZnVsbHNjcmVlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRleHRUcmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGFrZU1ldGFkYXRhVHJhY2tTbmFwc2hvdCk7IC8vIHJlbW92ZSB0aGUgbGlzdGVuZXIgYmVmb3JlIGFkZGluZyBpdCBqdXN0IGluIGNhc2UgaXQgd2Fzbid0IHByZXZpb3VzbHkgcmVtb3ZlZFxuXG4gICAgICB0ZXh0VHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHJlc3RvcmVUcmFja01vZGUpO1xuICAgICAgdGV4dFRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCByZXN0b3JlVHJhY2tNb2RlKTtcbiAgICB9KTsgLy8gc3RhcnQgdXBkYXRpbmcgdGhlIHNuYXBzaG90IGFnYWluIGFmdGVyIGxlYXZpbmcgZnVsbHNjcmVlblxuXG4gICAgdGhpcy5vbignd2Via2l0ZW5kZnVsbHNjcmVlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHJlbW92ZSB0aGUgbGlzdGVuZXIgYmVmb3JlIGFkZGluZyBpdCBqdXN0IGluIGNhc2UgaXQgd2Fzbid0IHByZXZpb3VzbHkgcmVtb3ZlZFxuICAgICAgdGV4dFRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0YWtlTWV0YWRhdGFUcmFja1NuYXBzaG90KTtcbiAgICAgIHRleHRUcmFja3MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGFrZU1ldGFkYXRhVHJhY2tTbmFwc2hvdCk7IC8vIHJlbW92ZSB0aGUgcmVzdG9yZVRyYWNrTW9kZSBoYW5kbGVyIGluIGNhc2UgaXQgd2Fzbid0IHRyaWdnZXJlZCBkdXJpbmcgZnVsbHNjcmVlbiBwbGF5YmFja1xuXG4gICAgICB0ZXh0VHJhY2tzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHJlc3RvcmVUcmFja01vZGUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGZvcmNlIG92ZXJyaWRlIG9mIHRyYWNrcyBmb3IgdGhlIGdpdmVuIHR5cGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUcmFjayB0eXBlIHRvIG92ZXJyaWRlLCBwb3NzaWJsZSB2YWx1ZXMgaW5jbHVkZSAnQXVkaW8nLFxuICAgKiAnVmlkZW8nLCBhbmQgJ1RleHQnLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG92ZXJyaWRlIC0gSWYgc2V0IHRvIHRydWUgbmF0aXZlIGF1ZGlvL3ZpZGVvIHdpbGwgYmUgb3ZlcnJpZGRlbixcbiAgICogb3RoZXJ3aXNlIG5hdGl2ZSBhdWRpby92aWRlbyB3aWxsIHBvdGVudGlhbGx5IGJlIHVzZWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm92ZXJyaWRlTmF0aXZlXyA9IGZ1bmN0aW9uIG92ZXJyaWRlTmF0aXZlXyh0eXBlLCBvdmVycmlkZSkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gYmVoYXZpb3JhbCBjaGFuZ2UgZG9uJ3QgYWRkL3JlbW92ZSBsaXN0ZW5lcnNcbiAgICBpZiAob3ZlcnJpZGUgIT09IHRoaXNbXCJmZWF0dXJlc05hdGl2ZVwiICsgdHlwZSArIFwiVHJhY2tzXCJdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxvd2VyQ2FzZVR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAodGhpc1tsb3dlckNhc2VUeXBlICsgXCJUcmFja3NMaXN0ZW5lcnNfXCJdKSB7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzW2xvd2VyQ2FzZVR5cGUgKyBcIlRyYWNrc0xpc3RlbmVyc19cIl0pLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICB2YXIgZWxUcmFja3MgPSBfdGhpczIuZWwoKVtsb3dlckNhc2VUeXBlICsgXCJUcmFja3NcIl07XG5cbiAgICAgICAgZWxUcmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIF90aGlzMltsb3dlckNhc2VUeXBlICsgXCJUcmFja3NMaXN0ZW5lcnNfXCJdW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpc1tcImZlYXR1cmVzTmF0aXZlXCIgKyB0eXBlICsgXCJUcmFja3NcIl0gPSAhb3ZlcnJpZGU7XG4gICAgdGhpc1tsb3dlckNhc2VUeXBlICsgXCJUcmFja3NMaXN0ZW5lcnNfXCJdID0gbnVsbDtcbiAgICB0aGlzLnByb3h5TmF0aXZlVHJhY2tzRm9yVHlwZV8obG93ZXJDYXNlVHlwZSk7XG4gIH1cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gZm9yY2Ugb3ZlcnJpZGUgb2YgbmF0aXZlIGF1ZGlvIHRyYWNrcy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBvdmVycmlkZSAtIElmIHNldCB0byB0cnVlIG5hdGl2ZSBhdWRpbyB3aWxsIGJlIG92ZXJyaWRkZW4sXG4gICAqIG90aGVyd2lzZSBuYXRpdmUgYXVkaW8gd2lsbCBwb3RlbnRpYWxseSBiZSB1c2VkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vdmVycmlkZU5hdGl2ZUF1ZGlvVHJhY2tzID0gZnVuY3Rpb24gb3ZlcnJpZGVOYXRpdmVBdWRpb1RyYWNrcyhvdmVycmlkZSkge1xuICAgIHRoaXMub3ZlcnJpZGVOYXRpdmVfKCdBdWRpbycsIG92ZXJyaWRlKTtcbiAgfVxuICAvKipcbiAgICogQXR0ZW1wdCB0byBmb3JjZSBvdmVycmlkZSBvZiBuYXRpdmUgdmlkZW8gdHJhY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG92ZXJyaWRlIC0gSWYgc2V0IHRvIHRydWUgbmF0aXZlIHZpZGVvIHdpbGwgYmUgb3ZlcnJpZGRlbixcbiAgICogb3RoZXJ3aXNlIG5hdGl2ZSB2aWRlbyB3aWxsIHBvdGVudGlhbGx5IGJlIHVzZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm92ZXJyaWRlTmF0aXZlVmlkZW9UcmFja3MgPSBmdW5jdGlvbiBvdmVycmlkZU5hdGl2ZVZpZGVvVHJhY2tzKG92ZXJyaWRlKSB7XG4gICAgdGhpcy5vdmVycmlkZU5hdGl2ZV8oJ1ZpZGVvJywgb3ZlcnJpZGUpO1xuICB9XG4gIC8qKlxuICAgKiBQcm94eSBuYXRpdmUgdHJhY2sgbGlzdCBldmVudHMgZm9yIHRoZSBnaXZlbiB0eXBlIHRvIG91ciB0cmFja1xuICAgKiBsaXN0cyBpZiB0aGUgYnJvd3NlciB3ZSBhcmUgcGxheWluZyBpbiBzdXBwb3J0cyB0aGF0IHR5cGUgb2YgdHJhY2sgbGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUcmFjayB0eXBlOyB2YWx1ZXMgaW5jbHVkZSAnYXVkaW8nLCAndmlkZW8nLCBhbmQgJ3RleHQnXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnByb3h5TmF0aXZlVHJhY2tzRm9yVHlwZV8gPSBmdW5jdGlvbiBwcm94eU5hdGl2ZVRyYWNrc0ZvclR5cGVfKG5hbWUpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBwcm9wcyA9IE5PUk1BTFtuYW1lXTtcbiAgICB2YXIgZWxUcmFja3MgPSB0aGlzLmVsKClbcHJvcHMuZ2V0dGVyTmFtZV07XG4gICAgdmFyIHRlY2hUcmFja3MgPSB0aGlzW3Byb3BzLmdldHRlck5hbWVdKCk7XG5cbiAgICBpZiAoIXRoaXNbXCJmZWF0dXJlc05hdGl2ZVwiICsgcHJvcHMuY2FwaXRhbE5hbWUgKyBcIlRyYWNrc1wiXSB8fCAhZWxUcmFja3MgfHwgIWVsVHJhY2tzLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0ge1xuICAgICAgY2hhbmdlOiBmdW5jdGlvbiBjaGFuZ2UoZSkge1xuICAgICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogJ2NoYW5nZScsXG4gICAgICAgICAgdGFyZ2V0OiB0ZWNoVHJhY2tzLFxuICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IHRlY2hUcmFja3MsXG4gICAgICAgICAgc3JjRWxlbWVudDogdGVjaFRyYWNrc1xuICAgICAgICB9O1xuICAgICAgICB0ZWNoVHJhY2tzLnRyaWdnZXIoZXZlbnQpOyAvLyBpZiB3ZSBhcmUgYSB0ZXh0IHRyYWNrIGNoYW5nZSBldmVudCwgd2Ugc2hvdWxkIGFsc28gbm90aWZ5IHRoZVxuICAgICAgICAvLyByZW1vdGUgdGV4dCB0cmFjayBsaXN0LiBUaGlzIGNhbiBwb3RlbnRpYWxseSBjYXVzZSBhIGZhbHNlIHBvc2l0aXZlXG4gICAgICAgIC8vIGlmIHdlIHdlcmUgdG8gZ2V0IGEgY2hhbmdlIGV2ZW50IG9uIGEgbm9uLXJlbW90ZSB0cmFjayBhbmRcbiAgICAgICAgLy8gd2UgdHJpZ2dlcmVkIHRoZSBldmVudCBvbiB0aGUgcmVtb3RlIHRleHQgdHJhY2sgbGlzdCB3aGljaCBkb2Vzbid0XG4gICAgICAgIC8vIGNvbnRhaW4gdGhhdCB0cmFjay4gSG93ZXZlciwgYmVzdCBwcmFjdGljZXMgbWVhbiBsb29waW5nIHRocm91Z2ggdGhlXG4gICAgICAgIC8vIGxpc3Qgb2YgdHJhY2tzIGFuZCBzZWFyY2hpbmcgZm9yIHRoZSBhcHByb3ByaWF0ZSBtb2RlIHZhbHVlLCBzbyxcbiAgICAgICAgLy8gdGhpcyBzaG91bGRuJ3QgcG9zZSBhbiBpc3N1ZVxuXG4gICAgICAgIGlmIChuYW1lID09PSAndGV4dCcpIHtcbiAgICAgICAgICBfdGhpczNbUkVNT1RFLnJlbW90ZVRleHQuZ2V0dGVyTmFtZV0oKS50cmlnZ2VyKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFkZHRyYWNrOiBmdW5jdGlvbiBhZGR0cmFjayhlKSB7XG4gICAgICAgIHRlY2hUcmFja3MuYWRkVHJhY2soZS50cmFjayk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZldHJhY2s6IGZ1bmN0aW9uIHJlbW92ZXRyYWNrKGUpIHtcbiAgICAgICAgdGVjaFRyYWNrcy5yZW1vdmVUcmFjayhlLnRyYWNrKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlbW92ZU9sZFRyYWNrcyA9IGZ1bmN0aW9uIHJlbW92ZU9sZFRyYWNrcygpIHtcbiAgICAgIHZhciByZW1vdmVUcmFja3MgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZWNoVHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZWxUcmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBpZiAoZWxUcmFja3Nbal0gPT09IHRlY2hUcmFja3NbaV0pIHtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICByZW1vdmVUcmFja3MucHVzaCh0ZWNoVHJhY2tzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB3aGlsZSAocmVtb3ZlVHJhY2tzLmxlbmd0aCkge1xuICAgICAgICB0ZWNoVHJhY2tzLnJlbW92ZVRyYWNrKHJlbW92ZVRyYWNrcy5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpc1twcm9wcy5nZXR0ZXJOYW1lICsgJ0xpc3RlbmVyc18nXSA9IGxpc3RlbmVycztcbiAgICBPYmplY3Qua2V5cyhsaXN0ZW5lcnMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2V2ZW50TmFtZV07XG4gICAgICBlbFRyYWNrcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgICBfdGhpczMub24oJ2Rpc3Bvc2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZWxUcmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICAgIH0pO1xuICAgIH0pOyAvLyBSZW1vdmUgKG5hdGl2ZSkgdHJhY2tzIHRoYXQgYXJlIG5vdCB1c2VkIGFueW1vcmVcblxuICAgIHRoaXMub24oJ2xvYWRzdGFydCcsIHJlbW92ZU9sZFRyYWNrcyk7XG4gICAgdGhpcy5vbignZGlzcG9zZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gX3RoaXMzLm9mZignbG9hZHN0YXJ0JywgcmVtb3ZlT2xkVHJhY2tzKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUHJveHkgYWxsIG5hdGl2ZSB0cmFjayBsaXN0IGV2ZW50cyB0byBvdXIgdHJhY2sgbGlzdHMgaWYgdGhlIGJyb3dzZXIgd2UgYXJlIHBsYXlpbmdcbiAgICogaW4gc3VwcG9ydHMgdGhhdCB0eXBlIG9mIHRyYWNrIGxpc3QuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnByb3h5TmF0aXZlVHJhY2tzXyA9IGZ1bmN0aW9uIHByb3h5TmF0aXZlVHJhY2tzXygpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIE5PUk1BTC5uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBfdGhpczQucHJveHlOYXRpdmVUcmFja3NGb3JUeXBlXyhuYW1lKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBgSHRtbDVgIFRlY2gncyBET00gZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICogICAgICAgICBUaGUgZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlRWwgPSBmdW5jdGlvbiBjcmVhdGVFbCgpIHtcbiAgICB2YXIgZWwgPSB0aGlzLm9wdGlvbnNfLnRhZzsgLy8gQ2hlY2sgaWYgdGhpcyBicm93c2VyIHN1cHBvcnRzIG1vdmluZyB0aGUgZWxlbWVudCBpbnRvIHRoZSBib3guXG4gICAgLy8gT24gdGhlIGlQaG9uZSB2aWRlbyB3aWxsIGJyZWFrIGlmIHlvdSBtb3ZlIHRoZSBlbGVtZW50LFxuICAgIC8vIFNvIHdlIGhhdmUgdG8gY3JlYXRlIGEgYnJhbmQgbmV3IGVsZW1lbnQuXG4gICAgLy8gSWYgd2UgaW5nZXN0ZWQgdGhlIHBsYXllciBkaXYsIHdlIGRvIG5vdCBuZWVkIHRvIG1vdmUgdGhlIG1lZGlhIGVsZW1lbnQuXG5cbiAgICBpZiAoIWVsIHx8ICEodGhpcy5vcHRpb25zXy5wbGF5ZXJFbEluZ2VzdCB8fCB0aGlzLm1vdmluZ01lZGlhRWxlbWVudEluRE9NKSkge1xuICAgICAgLy8gSWYgdGhlIG9yaWdpbmFsIHRhZyBpcyBzdGlsbCB0aGVyZSwgY2xvbmUgYW5kIHJlbW92ZSBpdC5cbiAgICAgIGlmIChlbCkge1xuICAgICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAgICAgaWYgKGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjbG9uZSwgZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgSHRtbDUuZGlzcG9zZU1lZGlhRWxlbWVudChlbCk7XG4gICAgICAgIGVsID0gY2xvbmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7IC8vIGRldGVybWluZSBpZiBuYXRpdmUgY29udHJvbHMgc2hvdWxkIGJlIHVzZWRcblxuICAgICAgICB2YXIgdGFnQXR0cmlidXRlcyA9IHRoaXMub3B0aW9uc18udGFnICYmIGdldEF0dHJpYnV0ZXModGhpcy5vcHRpb25zXy50YWcpO1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IG1lcmdlT3B0aW9ucyh7fSwgdGFnQXR0cmlidXRlcyk7XG5cbiAgICAgICAgaWYgKCFUT1VDSF9FTkFCTEVEIHx8IHRoaXMub3B0aW9uc18ubmF0aXZlQ29udHJvbHNGb3JUb3VjaCAhPT0gdHJ1ZSkge1xuICAgICAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzLmNvbnRyb2xzO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0QXR0cmlidXRlcyhlbCwgYXNzaWduKGF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICBpZDogdGhpcy5vcHRpb25zXy50ZWNoSWQsXG4gICAgICAgICAgXCJjbGFzc1wiOiAndmpzLXRlY2gnXG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgZWwucGxheWVySWQgPSB0aGlzLm9wdGlvbnNfLnBsYXllcklkO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zXy5wcmVsb2FkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgc2V0QXR0cmlidXRlKGVsLCAncHJlbG9hZCcsIHRoaXMub3B0aW9uc18ucHJlbG9hZCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9uc18uZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZWwuZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgPSB0aGlzLm9wdGlvbnNfLmRpc2FibGVQaWN0dXJlSW5QaWN0dXJlO1xuICAgIH0gLy8gVXBkYXRlIHNwZWNpZmljIHRhZyBzZXR0aW5ncywgaW4gY2FzZSB0aGV5IHdlcmUgb3ZlcnJpZGRlblxuICAgIC8vIGBhdXRvcGxheWAgaGFzIHRvIGJlICpsYXN0KiBzbyB0aGF0IGBtdXRlZGAgYW5kIGBwbGF5c2lubGluZWAgYXJlIHByZXNlbnRcbiAgICAvLyB3aGVuIGlPUy9TYWZhcmkgb3Igb3RoZXIgYnJvd3NlcnMgYXR0ZW1wdCB0byBhdXRvcGxheS5cblxuXG4gICAgdmFyIHNldHRpbmdzQXR0cnMgPSBbJ2xvb3AnLCAnbXV0ZWQnLCAncGxheXNpbmxpbmUnLCAnYXV0b3BsYXknXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0dGluZ3NBdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGF0dHIgPSBzZXR0aW5nc0F0dHJzW2ldO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5vcHRpb25zX1thdHRyXTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgc2V0QXR0cmlidXRlKGVsLCBhdHRyLCBhdHRyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVBdHRyaWJ1dGUoZWwsIGF0dHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxbYXR0cl0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZWw7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBiZSB0cmlnZ2VyZWQgaWYgdGhlIGxvYWRzdGFydCBldmVudCBoYXMgYWxyZWFkeSBmaXJlZCwgYmVmb3JlIHZpZGVvanMgd2FzXG4gICAqIHJlYWR5LiBUd28ga25vd24gZXhhbXBsZXMgb2Ygd2hlbiB0aGlzIGNhbiBoYXBwZW4gYXJlOlxuICAgKiAxLiBJZiB3ZSdyZSBsb2FkaW5nIHRoZSBwbGF5YmFjayBvYmplY3QgYWZ0ZXIgaXQgaGFzIHN0YXJ0ZWQgbG9hZGluZ1xuICAgKiAyLiBUaGUgbWVkaWEgaXMgYWxyZWFkeSBwbGF5aW5nIHRoZSAob2Z0ZW4gd2l0aCBhdXRvcGxheSBvbikgdGhlblxuICAgKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgZmlyZSBhbm90aGVyIGxvYWRzdGFydCBzbyB0aGF0IHZpZGVvanMgY2FuIGNhdGNodXAuXG4gICAqXG4gICAqIEBmaXJlcyBUZWNoI2xvYWRzdGFydFxuICAgKlxuICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gICAqICAgICAgICAgcmV0dXJucyBub3RoaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVMYXRlSW5pdF8gPSBmdW5jdGlvbiBoYW5kbGVMYXRlSW5pdF8oZWwpIHtcbiAgICBpZiAoZWwubmV0d29ya1N0YXRlID09PSAwIHx8IGVsLm5ldHdvcmtTdGF0ZSA9PT0gMykge1xuICAgICAgLy8gVGhlIHZpZGVvIGVsZW1lbnQgaGFzbid0IHN0YXJ0ZWQgbG9hZGluZyB0aGUgc291cmNlIHlldFxuICAgICAgLy8gb3IgZGlkbid0IGZpbmQgYSBzb3VyY2VcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWwucmVhZHlTdGF0ZSA9PT0gMCkge1xuICAgICAgLy8gTmV0d29ya1N0YXRlIGlzIHNldCBzeW5jaHJvbm91c2x5IEJVVCBsb2Fkc3RhcnQgaXMgZmlyZWQgYXQgdGhlXG4gICAgICAvLyBlbmQgb2YgdGhlIGN1cnJlbnQgc3RhY2ssIHVzdWFsbHkgYmVmb3JlIHNldEludGVydmFsKGZuLCAwKS5cbiAgICAgIC8vIFNvIGF0IHRoaXMgcG9pbnQgd2Uga25vdyBsb2Fkc3RhcnQgbWF5IGhhdmUgYWxyZWFkeSBmaXJlZCBvciBpc1xuICAgICAgLy8gYWJvdXQgdG8gZmlyZSwgYW5kIGVpdGhlciB3YXkgdGhlIHBsYXllciBoYXNuJ3Qgc2VlbiBpdCB5ZXQuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGZpcmUgbG9hZHN0YXJ0IHByZW1hdHVyZWx5IGhlcmUgYW5kIGNhdXNlIGFcbiAgICAgIC8vIGRvdWJsZSBsb2Fkc3RhcnQgc28gd2UnbGwgd2FpdCBhbmQgc2VlIGlmIGl0IGhhcHBlbnMgYmV0d2VlbiBub3dcbiAgICAgIC8vIGFuZCB0aGUgbmV4dCBsb29wLCBhbmQgZmlyZSBpdCBpZiBub3QuXG4gICAgICAvLyBIT1dFVkVSLCB3ZSBhbHNvIHdhbnQgdG8gbWFrZSBzdXJlIGl0IGZpcmVzIGJlZm9yZSBsb2FkZWRtZXRhZGF0YVxuICAgICAgLy8gd2hpY2ggY291bGQgYWxzbyBoYXBwZW4gYmV0d2VlbiBub3cgYW5kIHRoZSBuZXh0IGxvb3AsIHNvIHdlJ2xsXG4gICAgICAvLyB3YXRjaCBmb3IgdGhhdCBhbHNvLlxuICAgICAgdmFyIGxvYWRzdGFydEZpcmVkID0gZmFsc2U7XG5cbiAgICAgIHZhciBzZXRMb2Fkc3RhcnRGaXJlZCA9IGZ1bmN0aW9uIHNldExvYWRzdGFydEZpcmVkKCkge1xuICAgICAgICBsb2Fkc3RhcnRGaXJlZCA9IHRydWU7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLm9uKCdsb2Fkc3RhcnQnLCBzZXRMb2Fkc3RhcnRGaXJlZCk7XG5cbiAgICAgIHZhciB0cmlnZ2VyTG9hZHN0YXJ0ID0gZnVuY3Rpb24gdHJpZ2dlckxvYWRzdGFydCgpIHtcbiAgICAgICAgLy8gV2UgZGlkIG1pc3MgdGhlIG9yaWdpbmFsIGxvYWRzdGFydC4gTWFrZSBzdXJlIHRoZSBwbGF5ZXJcbiAgICAgICAgLy8gc2VlcyBsb2Fkc3RhcnQgYmVmb3JlIGxvYWRlZG1ldGFkYXRhXG4gICAgICAgIGlmICghbG9hZHN0YXJ0RmlyZWQpIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2xvYWRzdGFydCcpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLm9uKCdsb2FkZWRtZXRhZGF0YScsIHRyaWdnZXJMb2Fkc3RhcnQpO1xuICAgICAgdGhpcy5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub2ZmKCdsb2Fkc3RhcnQnLCBzZXRMb2Fkc3RhcnRGaXJlZCk7XG4gICAgICAgIHRoaXMub2ZmKCdsb2FkZWRtZXRhZGF0YScsIHRyaWdnZXJMb2Fkc3RhcnQpO1xuXG4gICAgICAgIGlmICghbG9hZHN0YXJ0RmlyZWQpIHtcbiAgICAgICAgICAvLyBXZSBkaWQgbWlzcyB0aGUgb3JpZ2luYWwgbmF0aXZlIGxvYWRzdGFydC4gRmlyZSBpdCBub3cuXG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdsb2Fkc3RhcnQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGcm9tIGhlcmUgb24gd2Uga25vdyB0aGF0IGxvYWRzdGFydCBhbHJlYWR5IGZpcmVkIGFuZCB3ZSBtaXNzZWQgaXQuXG4gICAgLy8gVGhlIG90aGVyIHJlYWR5U3RhdGUgZXZlbnRzIGFyZW4ndCBhcyBtdWNoIG9mIGEgcHJvYmxlbSBpZiB3ZSBkb3VibGVcbiAgICAvLyB0aGVtLCBzbyBub3QgZ29pbmcgdG8gZ28gdG8gYXMgbXVjaCB0cm91YmxlIGFzIGxvYWRzdGFydCB0byBwcmV2ZW50XG4gICAgLy8gdGhhdCB1bmxlc3Mgd2UgZmluZCByZWFzb24gdG8uXG5cblxuICAgIHZhciBldmVudHNUb1RyaWdnZXIgPSBbJ2xvYWRzdGFydCddOyAvLyBsb2FkZWRtZXRhZGF0YTogbmV3bHkgZXF1YWwgdG8gSEFWRV9NRVRBREFUQSAoMSkgb3IgZ3JlYXRlclxuXG4gICAgZXZlbnRzVG9UcmlnZ2VyLnB1c2goJ2xvYWRlZG1ldGFkYXRhJyk7IC8vIGxvYWRlZGRhdGE6IG5ld2x5IGluY3JlYXNlZCB0byBIQVZFX0NVUlJFTlRfREFUQSAoMikgb3IgZ3JlYXRlclxuXG4gICAgaWYgKGVsLnJlYWR5U3RhdGUgPj0gMikge1xuICAgICAgZXZlbnRzVG9UcmlnZ2VyLnB1c2goJ2xvYWRlZGRhdGEnKTtcbiAgICB9IC8vIGNhbnBsYXk6IG5ld2x5IGluY3JlYXNlZCB0byBIQVZFX0ZVVFVSRV9EQVRBICgzKSBvciBncmVhdGVyXG5cblxuICAgIGlmIChlbC5yZWFkeVN0YXRlID49IDMpIHtcbiAgICAgIGV2ZW50c1RvVHJpZ2dlci5wdXNoKCdjYW5wbGF5Jyk7XG4gICAgfSAvLyBjYW5wbGF5dGhyb3VnaDogbmV3bHkgZXF1YWwgdG8gSEFWRV9FTk9VR0hfREFUQSAoNClcblxuXG4gICAgaWYgKGVsLnJlYWR5U3RhdGUgPj0gNCkge1xuICAgICAgZXZlbnRzVG9UcmlnZ2VyLnB1c2goJ2NhbnBsYXl0aHJvdWdoJyk7XG4gICAgfSAvLyBXZSBzdGlsbCBuZWVkIHRvIGdpdmUgdGhlIHBsYXllciB0aW1lIHRvIGFkZCBldmVudCBsaXN0ZW5lcnNcblxuXG4gICAgdGhpcy5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICBldmVudHNUb1RyaWdnZXIuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICB0aGlzLnRyaWdnZXIodHlwZSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2V0IHdoZXRoZXIgd2UgYXJlIHNjcnViYmluZyBvciBub3QuXG4gICAqIFRoaXMgaXMgdXNlZCB0byBkZWNpZGUgd2hldGhlciB3ZSBzaG91bGQgdXNlIGBmYXN0U2Vla2Agb3Igbm90LlxuICAgKiBgZmFzdFNlZWtgIGlzIHVzZWQgdG8gcHJvdmlkZSB0cmljayBwbGF5IG9uIFNhZmFyaSBicm93c2Vycy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1NjcnViYmluZ1xuICAgKiAgICAgICAgICAgICAgICAgIC0gdHJ1ZSBmb3Igd2UgYXJlIGN1cnJlbnRseSBzY3J1YmJpbmdcbiAgICogICAgICAgICAgICAgICAgICAtIGZhbHNlIGZvciB3ZSBhcmUgbm8gbG9uZ2VyIHNjcnViYmluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRTY3J1YmJpbmcgPSBmdW5jdGlvbiBzZXRTY3J1YmJpbmcoaXNTY3J1YmJpbmcpIHtcbiAgICB0aGlzLmlzU2NydWJiaW5nXyA9IGlzU2NydWJiaW5nO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgY3VycmVudCB0aW1lIGZvciB0aGUgYEhUTUw1YCB0ZWNoLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kc1xuICAgKiAgICAgICAgU2V0IHRoZSBjdXJyZW50IHRpbWUgb2YgdGhlIG1lZGlhIHRvIHRoaXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldEN1cnJlbnRUaW1lID0gZnVuY3Rpb24gc2V0Q3VycmVudFRpbWUoc2Vjb25kcykge1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5pc1NjcnViYmluZ18gJiYgdGhpcy5lbF8uZmFzdFNlZWsgJiYgSVNfQU5ZX1NBRkFSSSkge1xuICAgICAgICB0aGlzLmVsXy5mYXN0U2VlayhzZWNvbmRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxfLmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2coZSwgJ1ZpZGVvIGlzIG5vdCByZWFkeS4gKFZpZGVvLmpzKScpOyAvLyB0aGlzLndhcm5pbmcoVmlkZW9KUy53YXJuaW5ncy52aWRlb05vdFJlYWR5KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBkdXJhdGlvbiBvZiB0aGUgSFRNTDUgbWVkaWEgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBkdXJhdGlvbiBvZiB0aGUgbWVkaWEgb3IgMCBpZiB0aGVyZSBpcyBubyBkdXJhdGlvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbigpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIC8vIEFuZHJvaWQgQ2hyb21lIHdpbGwgcmVwb3J0IGR1cmF0aW9uIGFzIEluZmluaXR5IGZvciBWT0QgSExTIHVudGlsIGFmdGVyXG4gICAgLy8gcGxheWJhY2sgaGFzIHN0YXJ0ZWQsIHdoaWNoIHRyaWdnZXJzIHRoZSBsaXZlIGRpc3BsYXkgZXJyb25lb3VzbHkuXG4gICAgLy8gUmV0dXJuIE5hTiBpZiBwbGF5YmFjayBoYXMgbm90IHN0YXJ0ZWQgYW5kIHRyaWdnZXIgYSBkdXJhdGlvbnVwZGF0ZSBvbmNlXG4gICAgLy8gdGhlIGR1cmF0aW9uIGNhbiBiZSByZWxpYWJseSBrbm93bi5cbiAgICBpZiAodGhpcy5lbF8uZHVyYXRpb24gPT09IEluZmluaXR5ICYmIElTX0FORFJPSUQgJiYgSVNfQ0hST01FICYmIHRoaXMuZWxfLmN1cnJlbnRUaW1lID09PSAwKSB7XG4gICAgICAvLyBXYWl0IGZvciB0aGUgZmlyc3QgYHRpbWV1cGRhdGVgIHdpdGggY3VycmVudFRpbWUgPiAwIC0gdGhlcmUgbWF5IGJlXG4gICAgICAvLyBzZXZlcmFsIHdpdGggMFxuICAgICAgdmFyIGNoZWNrUHJvZ3Jlc3MgPSBmdW5jdGlvbiBjaGVja1Byb2dyZXNzKCkge1xuICAgICAgICBpZiAoX3RoaXM1LmVsXy5jdXJyZW50VGltZSA+IDApIHtcbiAgICAgICAgICAvLyBUcmlnZ2VyIGR1cmF0aW9uY2hhbmdlIGZvciBnZW51aW5lbHkgbGl2ZSB2aWRlb1xuICAgICAgICAgIGlmIChfdGhpczUuZWxfLmR1cmF0aW9uID09PSBJbmZpbml0eSkge1xuICAgICAgICAgICAgX3RoaXM1LnRyaWdnZXIoJ2R1cmF0aW9uY2hhbmdlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXM1Lm9mZigndGltZXVwZGF0ZScsIGNoZWNrUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLm9uKCd0aW1ldXBkYXRlJywgY2hlY2tQcm9ncmVzcyk7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVsXy5kdXJhdGlvbiB8fCBOYU47XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCB3aWR0aCBvZiB0aGUgSFRNTDUgbWVkaWEgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSB3aWR0aCBvZiB0aGUgSFRNTDUgbWVkaWEgZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2lkdGggPSBmdW5jdGlvbiB3aWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbF8ub2Zmc2V0V2lkdGg7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBoZWlnaHQgb2YgdGhlIEhUTUw1IG1lZGlhIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgaGVpZ2h0IG9mIHRoZSBIVE1MNSBtZWRpYSBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oZWlnaHQgPSBmdW5jdGlvbiBoZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfLm9mZnNldEhlaWdodDtcbiAgfVxuICAvKipcbiAgICogUHJveHkgaU9TIGB3ZWJraXRiZWdpbmZ1bGxzY3JlZW5gIGFuZCBgd2Via2l0ZW5kZnVsbHNjcmVlbmAgaW50b1xuICAgKiBgZnVsbHNjcmVlbmNoYW5nZWAgZXZlbnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBmaXJlcyBmdWxsc2NyZWVuY2hhbmdlXG4gICAqIEBsaXN0ZW5zIHdlYmtpdGVuZGZ1bGxzY3JlZW5cbiAgICogQGxpc3RlbnMgd2Via2l0YmVnaW5mdWxsc2NyZWVuXG4gICAqIEBsaXN0ZW5zIHdlYmtpdGJlZ2luZnVsbHNjcmVlblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm94eVdlYmtpdEZ1bGxzY3JlZW5fID0gZnVuY3Rpb24gcHJveHlXZWJraXRGdWxsc2NyZWVuXygpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIGlmICghKCd3ZWJraXREaXNwbGF5aW5nRnVsbHNjcmVlbicgaW4gdGhpcy5lbF8pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGVuZEZuID0gZnVuY3Rpb24gZW5kRm4oKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCB7XG4gICAgICAgIGlzRnVsbHNjcmVlbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgYmVnaW5GbiA9IGZ1bmN0aW9uIGJlZ2luRm4oKSB7XG4gICAgICBpZiAoJ3dlYmtpdFByZXNlbnRhdGlvbk1vZGUnIGluIHRoaXMuZWxfICYmIHRoaXMuZWxfLndlYmtpdFByZXNlbnRhdGlvbk1vZGUgIT09ICdwaWN0dXJlLWluLXBpY3R1cmUnKSB7XG4gICAgICAgIHRoaXMub25lKCd3ZWJraXRlbmRmdWxsc2NyZWVuJywgZW5kRm4pO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCB7XG4gICAgICAgICAgaXNGdWxsc2NyZWVuOiB0cnVlLFxuICAgICAgICAgIC8vIHNldCBhIGZsYWcgaW4gY2FzZSBhbm90aGVyIHRlY2ggdHJpZ2dlcnMgZnVsbHNjcmVlbmNoYW5nZVxuICAgICAgICAgIG5hdGl2ZUlPU0Z1bGxzY3JlZW46IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMub24oJ3dlYmtpdGJlZ2luZnVsbHNjcmVlbicsIGJlZ2luRm4pO1xuICAgIHRoaXMub24oJ2Rpc3Bvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczYub2ZmKCd3ZWJraXRiZWdpbmZ1bGxzY3JlZW4nLCBiZWdpbkZuKTtcblxuICAgICAgX3RoaXM2Lm9mZignd2Via2l0ZW5kZnVsbHNjcmVlbicsIGVuZEZuKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgZnVsbHNjcmVlbiBpcyBzdXBwb3J0ZWQgb24gdGhlIGN1cnJlbnQgcGxheWJhY2sgZGV2aWNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIC0gVHJ1ZSBpZiBmdWxsc2NyZWVuIGlzIHN1cHBvcnRlZC5cbiAgICogICAgICAgICAtIEZhbHNlIGlmIGZ1bGxzY3JlZW4gaXMgbm90IHN1cHBvcnRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3VwcG9ydHNGdWxsU2NyZWVuID0gZnVuY3Rpb24gc3VwcG9ydHNGdWxsU2NyZWVuKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5lbF8ud2Via2l0RW50ZXJGdWxsU2NyZWVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdXNlckFnZW50ID0gd2luZG93JDEubmF2aWdhdG9yICYmIHdpbmRvdyQxLm5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7IC8vIFNlZW1zIHRvIGJlIGJyb2tlbiBpbiBDaHJvbWl1bS9DaHJvbWUgJiYgU2FmYXJpIGluIExlb3BhcmRcblxuICAgICAgaWYgKC9BbmRyb2lkLy50ZXN0KHVzZXJBZ2VudCkgfHwgIS9DaHJvbWV8TWFjIE9TIFggMTAuNS8udGVzdCh1c2VyQWdlbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogUmVxdWVzdCB0aGF0IHRoZSBgSFRNTDVgIFRlY2ggZW50ZXIgZnVsbHNjcmVlbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW50ZXJGdWxsU2NyZWVuID0gZnVuY3Rpb24gZW50ZXJGdWxsU2NyZWVuKCkge1xuICAgIHZhciB2aWRlbyA9IHRoaXMuZWxfO1xuXG4gICAgaWYgKHZpZGVvLnBhdXNlZCAmJiB2aWRlby5uZXR3b3JrU3RhdGUgPD0gdmlkZW8uSEFWRV9NRVRBREFUQSkge1xuICAgICAgLy8gYXR0ZW1wdCB0byBwcmltZSB0aGUgdmlkZW8gZWxlbWVudCBmb3IgcHJvZ3JhbW1hdGljIGFjY2Vzc1xuICAgICAgLy8gdGhpcyBpc24ndCBuZWNlc3Nhcnkgb24gdGhlIGRlc2t0b3AgYnV0IHNob3VsZG4ndCBodXJ0XG4gICAgICBzaWxlbmNlUHJvbWlzZSh0aGlzLmVsXy5wbGF5KCkpOyAvLyBwbGF5aW5nIGFuZCBwYXVzaW5nIHN5bmNocm9ub3VzbHkgZHVyaW5nIHRoZSB0cmFuc2l0aW9uIHRvIGZ1bGxzY3JlZW5cbiAgICAgIC8vIGNhbiBnZXQgaU9TIH42LjEgZGV2aWNlcyBpbnRvIGEgcGxheS9wYXVzZSBsb29wXG5cbiAgICAgIHRoaXMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZpZGVvLnBhdXNlKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2aWRlby53ZWJraXRFbnRlckZ1bGxTY3JlZW4oKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignZnVsbHNjcmVlbmVycm9yJywgZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB2aWRlby53ZWJraXRFbnRlckZ1bGxTY3JlZW4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdmdWxsc2NyZWVuZXJyb3InLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlcXVlc3QgdGhhdCB0aGUgYEhUTUw1YCBUZWNoIGV4aXQgZnVsbHNjcmVlbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhpdEZ1bGxTY3JlZW4gPSBmdW5jdGlvbiBleGl0RnVsbFNjcmVlbigpIHtcbiAgICBpZiAoIXRoaXMuZWxfLndlYmtpdERpc3BsYXlpbmdGdWxsc2NyZWVuKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5lcnJvcicsIG5ldyBFcnJvcignVGhlIHZpZGVvIGlzIG5vdCBmdWxsc2NyZWVuJykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZWxfLndlYmtpdEV4aXRGdWxsU2NyZWVuKCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGZsb2F0aW5nIHZpZGVvIHdpbmRvdyBhbHdheXMgb24gdG9wIG9mIG90aGVyIHdpbmRvd3Mgc28gdGhhdCB1c2VycyBtYXlcbiAgICogY29udGludWUgY29uc3VtaW5nIG1lZGlhIHdoaWxlIHRoZXkgaW50ZXJhY3Qgd2l0aCBvdGhlciBjb250ZW50IHNpdGVzLCBvclxuICAgKiBhcHBsaWNhdGlvbnMgb24gdGhlaXIgZGV2aWNlLlxuICAgKlxuICAgKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3dpY2cuZ2l0aHViLmlvL3BpY3R1cmUtaW4tcGljdHVyZX1cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogICAgICAgICBBIHByb21pc2Ugd2l0aCBhIFBpY3R1cmUtaW4tUGljdHVyZSB3aW5kb3cuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlID0gZnVuY3Rpb24gcmVxdWVzdFBpY3R1cmVJblBpY3R1cmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfLnJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEEgZ2V0dGVyL3NldHRlciBmb3IgdGhlIGBIdG1sNWAgVGVjaCdzIHNvdXJjZSBvYmplY3QuXG4gICAqID4gTm90ZTogUGxlYXNlIHVzZSB7QGxpbmsgSHRtbDUjc2V0U291cmNlfVxuICAgKlxuICAgKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fSBbc3JjXVxuICAgKiAgICAgICAgVGhlIHNvdXJjZSBvYmplY3QgeW91IHdhbnQgdG8gc2V0IG9uIHRoZSBgSFRNTDVgIHRlY2hzIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge1RlY2h+U291cmNlT2JqZWN0fHVuZGVmaW5lZH1cbiAgICogICAgICAgICAtIFRoZSBjdXJyZW50IHNvdXJjZSBvYmplY3Qgd2hlbiBhIHNvdXJjZSBpcyBub3QgcGFzc2VkIGluLlxuICAgKiAgICAgICAgIC0gdW5kZWZpbmVkIHdoZW4gc2V0dGluZ1xuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBTaW5jZSB2ZXJzaW9uIDUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNyYyA9IGZ1bmN0aW9uIHNyYyhfc3JjKSB7XG4gICAgaWYgKF9zcmMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxfLnNyYztcbiAgICB9IC8vIFNldHRpbmcgc3JjIHRocm91Z2ggYHNyY2AgaW5zdGVhZCBvZiBgc2V0U3JjYCB3aWxsIGJlIGRlcHJlY2F0ZWRcblxuXG4gICAgdGhpcy5zZXRTcmMoX3NyYyk7XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSB0ZWNoIGJ5IHJlbW92aW5nIGFsbCBzb3VyY2VzIGFuZCB0aGVuIGNhbGxpbmdcbiAgICoge0BsaW5rIEh0bWw1LnJlc2V0TWVkaWFFbGVtZW50fS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBIdG1sNS5yZXNldE1lZGlhRWxlbWVudCh0aGlzLmVsXyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBzb3VyY2Ugb24gdGhlIGBIVE1MNWAgVGVjaC4gRmFsbHMgYmFjayB0byByZXR1cm5pbmcgdGhlIHNvdXJjZSBmcm9tXG4gICAqIHRoZSBIVE1MNSBtZWRpYSBlbGVtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtUZWNoflNvdXJjZU9iamVjdH1cbiAgICogICAgICAgICBUaGUgY3VycmVudCBzb3VyY2Ugb2JqZWN0IGZyb20gdGhlIEhUTUw1IHRlY2guIFdpdGggYSBmYWxsYmFjayB0byB0aGVcbiAgICogICAgICAgICBlbGVtZW50cyBzb3VyY2UuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnRTcmMgPSBmdW5jdGlvbiBjdXJyZW50U3JjKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRTb3VyY2VfKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50U291cmNlXy5zcmM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWxfLmN1cnJlbnRTcmM7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBjb250cm9scyBhdHRyaWJ1dGUgZm9yIHRoZSBIVE1MNSBtZWRpYSBFbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsXG4gICAqICAgICAgICBWYWx1ZSB0byBzZXQgdGhlIGNvbnRyb2xzIGF0dHJpYnV0ZSB0b1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRDb250cm9scyA9IGZ1bmN0aW9uIHNldENvbnRyb2xzKHZhbCkge1xuICAgIHRoaXMuZWxfLmNvbnRyb2xzID0gISF2YWw7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmV0dXJucyBhIHJlbW90ZSB7QGxpbmsgVGV4dFRyYWNrfSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBraW5kXG4gICAqICAgICAgICBgVGV4dFRyYWNrYCBraW5kIChzdWJ0aXRsZXMsIGNhcHRpb25zLCBkZXNjcmlwdGlvbnMsIGNoYXB0ZXJzLCBvciBtZXRhZGF0YSlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsYWJlbF1cbiAgICogICAgICAgIExhYmVsIHRvIGlkZW50aWZ5IHRoZSB0ZXh0IHRyYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2VdXG4gICAqICAgICAgICBUd28gbGV0dGVyIGxhbmd1YWdlIGFiYnJldmlhdGlvblxuICAgKlxuICAgKiBAcmV0dXJuIHtUZXh0VHJhY2t9XG4gICAqICAgICAgICAgVGhlIFRleHRUcmFjayB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkVGV4dFRyYWNrID0gZnVuY3Rpb24gYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSkge1xuICAgIGlmICghdGhpcy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MpIHtcbiAgICAgIHJldHVybiBfVGVjaC5wcm90b3R5cGUuYWRkVGV4dFRyYWNrLmNhbGwodGhpcywga2luZCwgbGFiZWwsIGxhbmd1YWdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbF8uYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgZWl0aGVyIG5hdGl2ZSBUZXh0VHJhY2sgb3IgYW4gZW11bGF0ZWQgVGV4dFRyYWNrIGRlcGVuZGluZ1xuICAgKiBvbiB0aGUgdmFsdWUgb2YgYGZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrc2BcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIFRoZSBvYmplY3Qgc2hvdWxkIGNvbnRhaW4gdGhlIG9wdGlvbnMgdG8gaW5pdGlhbGl6ZSB0aGUgVGV4dFRyYWNrIHdpdGguXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5raW5kXVxuICAgKiAgICAgICAgYFRleHRUcmFja2Aga2luZCAoc3VidGl0bGVzLCBjYXB0aW9ucywgZGVzY3JpcHRpb25zLCBjaGFwdGVycywgb3IgbWV0YWRhdGEpLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFiZWxdXG4gICAqICAgICAgICBMYWJlbCB0byBpZGVudGlmeSB0aGUgdGV4dCB0cmFja1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFuZ3VhZ2VdXG4gICAqICAgICAgICBUd28gbGV0dGVyIGxhbmd1YWdlIGFiYnJldmlhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZhdWx0XVxuICAgKiAgICAgICAgRGVmYXVsdCB0aGlzIHRyYWNrIHRvIG9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWRdXG4gICAqICAgICAgICBUaGUgaW50ZXJuYWwgaWQgdG8gYXNzaWduIHRoaXMgdHJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zcmNdXG4gICAqICAgICAgICBBIHNvdXJjZSB1cmwgZm9yIHRoZSB0cmFjay5cbiAgICpcbiAgICogQHJldHVybiB7SFRNTFRyYWNrRWxlbWVudH1cbiAgICogICAgICAgICBUaGUgdHJhY2sgZWxlbWVudCB0aGF0IGdldHMgY3JlYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUmVtb3RlVGV4dFRyYWNrID0gZnVuY3Rpb24gY3JlYXRlUmVtb3RlVGV4dFRyYWNrKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzKSB7XG4gICAgICByZXR1cm4gX1RlY2gucHJvdG90eXBlLmNyZWF0ZVJlbW90ZVRleHRUcmFjay5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBodG1sVHJhY2tFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHJhY2snKTtcblxuICAgIGlmIChvcHRpb25zLmtpbmQpIHtcbiAgICAgIGh0bWxUcmFja0VsZW1lbnQua2luZCA9IG9wdGlvbnMua2luZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5sYWJlbCkge1xuICAgICAgaHRtbFRyYWNrRWxlbWVudC5sYWJlbCA9IG9wdGlvbnMubGFiZWw7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubGFuZ3VhZ2UgfHwgb3B0aW9ucy5zcmNsYW5nKSB7XG4gICAgICBodG1sVHJhY2tFbGVtZW50LnNyY2xhbmcgPSBvcHRpb25zLmxhbmd1YWdlIHx8IG9wdGlvbnMuc3JjbGFuZztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9uc1tcImRlZmF1bHRcIl0pIHtcbiAgICAgIGh0bWxUcmFja0VsZW1lbnRbXCJkZWZhdWx0XCJdID0gb3B0aW9uc1tcImRlZmF1bHRcIl07XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaWQpIHtcbiAgICAgIGh0bWxUcmFja0VsZW1lbnQuaWQgPSBvcHRpb25zLmlkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNyYykge1xuICAgICAgaHRtbFRyYWNrRWxlbWVudC5zcmMgPSBvcHRpb25zLnNyYztcbiAgICB9XG5cbiAgICByZXR1cm4gaHRtbFRyYWNrRWxlbWVudDtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIHJlbW90ZSB0ZXh0IHRyYWNrIG9iamVjdCBhbmQgcmV0dXJucyBhbiBodG1sIHRyYWNrIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFRoZSBvYmplY3Qgc2hvdWxkIGNvbnRhaW4gdmFsdWVzIGZvclxuICAgKiBraW5kLCBsYW5ndWFnZSwgbGFiZWwsIGFuZCBzcmMgKGxvY2F0aW9uIG9mIHRoZSBXZWJWVFQgZmlsZSlcbiAgICogQHBhcmFtIHtib29sZWFufSBbbWFudWFsQ2xlYW51cD10cnVlXSBpZiBzZXQgdG8gZmFsc2UsIHRoZSBUZXh0VHJhY2sgd2lsbCBiZVxuICAgKiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgZnJvbSB0aGUgdmlkZW8gZWxlbWVudCB3aGVuZXZlciB0aGUgc291cmNlIGNoYW5nZXNcbiAgICogQHJldHVybiB7SFRNTFRyYWNrRWxlbWVudH0gQW4gSHRtbCBUcmFjayBFbGVtZW50LlxuICAgKiBUaGlzIGNhbiBiZSBhbiBlbXVsYXRlZCB7QGxpbmsgSFRNTFRyYWNrRWxlbWVudH0gb3IgYSBuYXRpdmUgb25lLlxuICAgKiBAZGVwcmVjYXRlZCBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgXCJtYW51YWxDbGVhbnVwXCIgcGFyYW1ldGVyIHdpbGwgZGVmYXVsdFxuICAgKiB0byBcImZhbHNlXCIgaW4gdXBjb21pbmcgdmVyc2lvbnMgb2YgVmlkZW8uanNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUmVtb3RlVGV4dFRyYWNrID0gZnVuY3Rpb24gYWRkUmVtb3RlVGV4dFRyYWNrKG9wdGlvbnMsIG1hbnVhbENsZWFudXApIHtcbiAgICB2YXIgaHRtbFRyYWNrRWxlbWVudCA9IF9UZWNoLnByb3RvdHlwZS5hZGRSZW1vdGVUZXh0VHJhY2suY2FsbCh0aGlzLCBvcHRpb25zLCBtYW51YWxDbGVhbnVwKTtcblxuICAgIGlmICh0aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykge1xuICAgICAgdGhpcy5lbCgpLmFwcGVuZENoaWxkKGh0bWxUcmFja0VsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBodG1sVHJhY2tFbGVtZW50O1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVtb3RlIGBUZXh0VHJhY2tgIGZyb20gYFRleHRUcmFja0xpc3RgIG9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0ge1RleHRUcmFja30gdHJhY2tcbiAgICogICAgICAgIGBUZXh0VHJhY2tgIG9iamVjdCB0byByZW1vdmVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlUmVtb3RlVGV4dFRyYWNrID0gZnVuY3Rpb24gcmVtb3ZlUmVtb3RlVGV4dFRyYWNrKHRyYWNrKSB7XG4gICAgX1RlY2gucHJvdG90eXBlLnJlbW92ZVJlbW90ZVRleHRUcmFjay5jYWxsKHRoaXMsIHRyYWNrKTtcblxuICAgIGlmICh0aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykge1xuICAgICAgdmFyIHRyYWNrcyA9IHRoaXMuJCQoJ3RyYWNrJyk7XG4gICAgICB2YXIgaSA9IHRyYWNrcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKHRyYWNrID09PSB0cmFja3NbaV0gfHwgdHJhY2sgPT09IHRyYWNrc1tpXS50cmFjaykge1xuICAgICAgICAgIHRoaXMuZWwoKS5yZW1vdmVDaGlsZCh0cmFja3NbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXRzIGF2YWlsYWJsZSBtZWRpYSBwbGF5YmFjayBxdWFsaXR5IG1ldHJpY3MgYXMgc3BlY2lmaWVkIGJ5IHRoZSBXM0MncyBNZWRpYVxuICAgKiBQbGF5YmFjayBRdWFsaXR5IEFQSS5cbiAgICpcbiAgICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9tZWRpYS1wbGF5YmFjay1xdWFsaXR5fVxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqICAgICAgICAgQW4gb2JqZWN0IHdpdGggc3VwcG9ydGVkIG1lZGlhIHBsYXliYWNrIHF1YWxpdHkgbWV0cmljc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eSA9IGZ1bmN0aW9uIGdldFZpZGVvUGxheWJhY2tRdWFsaXR5KCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5lbCgpLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbCgpLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5KCk7XG4gICAgfVxuXG4gICAgdmFyIHZpZGVvUGxheWJhY2tRdWFsaXR5ID0ge307XG5cbiAgICBpZiAodHlwZW9mIHRoaXMuZWwoKS53ZWJraXREcm9wcGVkRnJhbWVDb3VudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXMuZWwoKS53ZWJraXREZWNvZGVkRnJhbWVDb3VudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZpZGVvUGxheWJhY2tRdWFsaXR5LmRyb3BwZWRWaWRlb0ZyYW1lcyA9IHRoaXMuZWwoKS53ZWJraXREcm9wcGVkRnJhbWVDb3VudDtcbiAgICAgIHZpZGVvUGxheWJhY2tRdWFsaXR5LnRvdGFsVmlkZW9GcmFtZXMgPSB0aGlzLmVsKCkud2Via2l0RGVjb2RlZEZyYW1lQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdyQxLnBlcmZvcm1hbmNlICYmIHR5cGVvZiB3aW5kb3ckMS5wZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZpZGVvUGxheWJhY2tRdWFsaXR5LmNyZWF0aW9uVGltZSA9IHdpbmRvdyQxLnBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH0gZWxzZSBpZiAod2luZG93JDEucGVyZm9ybWFuY2UgJiYgd2luZG93JDEucGVyZm9ybWFuY2UudGltaW5nICYmIHR5cGVvZiB3aW5kb3ckMS5wZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0ID09PSAnbnVtYmVyJykge1xuICAgICAgdmlkZW9QbGF5YmFja1F1YWxpdHkuY3JlYXRpb25UaW1lID0gd2luZG93JDEuRGF0ZS5ub3coKSAtIHdpbmRvdyQxLnBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZGVvUGxheWJhY2tRdWFsaXR5O1xuICB9O1xuXG4gIHJldHVybiBIdG1sNTtcbn0oVGVjaCk7XG4vKiBIVE1MNSBTdXBwb3J0IFRlc3RpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4vKipcbiAqIEVsZW1lbnQgZm9yIHRlc3RpbmcgYnJvd3NlciBIVE1MNSBtZWRpYSBjYXBhYmlsaXRpZXNcbiAqXG4gKiBAdHlwZSB7RWxlbWVudH1cbiAqIEBjb25zdGFudFxuICogQHByaXZhdGVcbiAqL1xuXG5cbmRlZmluZUxhenlQcm9wZXJ0eShIdG1sNSwgJ1RFU1RfVklEJywgZnVuY3Rpb24gKCkge1xuICBpZiAoIWlzUmVhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgdmFyIHRyYWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHJhY2snKTtcbiAgdHJhY2sua2luZCA9ICdjYXB0aW9ucyc7XG4gIHRyYWNrLnNyY2xhbmcgPSAnZW4nO1xuICB0cmFjay5sYWJlbCA9ICdFbmdsaXNoJztcbiAgdmlkZW8uYXBwZW5kQ2hpbGQodHJhY2spO1xuICByZXR1cm4gdmlkZW87XG59KTtcbi8qKlxuICogQ2hlY2sgaWYgSFRNTDUgbWVkaWEgaXMgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci9kZXZpY2UuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUcnVlIGlmIEhUTUw1IG1lZGlhIGlzIHN1cHBvcnRlZC5cbiAqICAgICAgICAgLSBGYWxzZSBpZiBIVE1MNSBtZWRpYSBpcyBub3Qgc3VwcG9ydGVkLlxuICovXG5cbkh0bWw1LmlzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICAvLyBJRSB3aXRoIG5vIE1lZGlhIFBsYXllciBpcyBhIExJQVIhICgjOTg0KVxuICB0cnkge1xuICAgIEh0bWw1LlRFU1RfVklELnZvbHVtZSA9IDAuNTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiAhIShIdG1sNS5URVNUX1ZJRCAmJiBIdG1sNS5URVNUX1ZJRC5jYW5QbGF5VHlwZSk7XG59O1xuLyoqXG4gKiBDaGVjayBpZiB0aGUgdGVjaCBjYW4gc3VwcG9ydCB0aGUgZ2l2ZW4gdHlwZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiAgICAgICAgVGhlIG1pbWV0eXBlIHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICdwcm9iYWJseScsICdtYXliZScsIG9yICcnIChlbXB0eSBzdHJpbmcpXG4gKi9cblxuXG5IdG1sNS5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHJldHVybiBIdG1sNS5URVNUX1ZJRC5jYW5QbGF5VHlwZSh0eXBlKTtcbn07XG4vKipcbiAqIENoZWNrIGlmIHRoZSB0ZWNoIGNhbiBzdXBwb3J0IHRoZSBnaXZlbiBzb3VyY2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3JjT2JqXG4gKiAgICAgICAgVGhlIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiAgICAgICAgVGhlIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSB0ZWNoXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICdwcm9iYWJseScsICdtYXliZScsIG9yICcnIChlbXB0eSBzdHJpbmcpXG4gKi9cblxuXG5IdG1sNS5jYW5QbGF5U291cmNlID0gZnVuY3Rpb24gKHNyY09iaiwgb3B0aW9ucykge1xuICByZXR1cm4gSHRtbDUuY2FuUGxheVR5cGUoc3JjT2JqLnR5cGUpO1xufTtcbi8qKlxuICogQ2hlY2sgaWYgdGhlIHZvbHVtZSBjYW4gYmUgY2hhbmdlZCBpbiB0aGlzIGJyb3dzZXIvZGV2aWNlLlxuICogVm9sdW1lIGNhbm5vdCBiZSBjaGFuZ2VkIGluIGEgbG90IG9mIG1vYmlsZSBkZXZpY2VzLlxuICogU3BlY2lmaWNhbGx5LCBpdCBjYW4ndCBiZSBjaGFuZ2VkIGZyb20gMSBvbiBpT1MuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUcnVlIGlmIHZvbHVtZSBjYW4gYmUgY29udHJvbGxlZFxuICogICAgICAgICAtIEZhbHNlIG90aGVyd2lzZVxuICovXG5cblxuSHRtbDUuY2FuQ29udHJvbFZvbHVtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gSUUgd2lsbCBlcnJvciBpZiBXaW5kb3dzIE1lZGlhIFBsYXllciBub3QgaW5zdGFsbGVkICMzMzE1XG4gIHRyeSB7XG4gICAgdmFyIHZvbHVtZSA9IEh0bWw1LlRFU1RfVklELnZvbHVtZTtcbiAgICBIdG1sNS5URVNUX1ZJRC52b2x1bWUgPSB2b2x1bWUgLyAyICsgMC4xO1xuICAgIHJldHVybiB2b2x1bWUgIT09IEh0bWw1LlRFU1RfVklELnZvbHVtZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbi8qKlxuICogQ2hlY2sgaWYgdGhlIHZvbHVtZSBjYW4gYmUgbXV0ZWQgaW4gdGhpcyBicm93c2VyL2RldmljZS5cbiAqIFNvbWUgZGV2aWNlcywgZS5nLiBpT1MsIGRvbid0IGFsbG93IGNoYW5naW5nIHZvbHVtZVxuICogYnV0IHBlcm1pdHMgbXV0aW5nL3VubXV0aW5nLlxuICpcbiAqIEByZXR1cm4ge2JvbGVhbn1cbiAqICAgICAgLSBUcnVlIGlmIHZvbHVtZSBjYW4gYmUgbXV0ZWRcbiAqICAgICAgLSBGYWxzZSBvdGhlcndpc2VcbiAqL1xuXG5cbkh0bWw1LmNhbk11dGVWb2x1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIG11dGVkID0gSHRtbDUuVEVTVF9WSUQubXV0ZWQ7IC8vIGluIHNvbWUgdmVyc2lvbnMgb2YgaU9TIG11dGVkIHByb3BlcnR5IGRvZXNuJ3QgYWx3YXlzXG4gICAgLy8gd29yaywgc28gd2Ugd2FudCB0byBzZXQgYm90aCBwcm9wZXJ0eSBhbmQgYXR0cmlidXRlXG5cbiAgICBIdG1sNS5URVNUX1ZJRC5tdXRlZCA9ICFtdXRlZDtcblxuICAgIGlmIChIdG1sNS5URVNUX1ZJRC5tdXRlZCkge1xuICAgICAgc2V0QXR0cmlidXRlKEh0bWw1LlRFU1RfVklELCAnbXV0ZWQnLCAnbXV0ZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlQXR0cmlidXRlKEh0bWw1LlRFU1RfVklELCAnbXV0ZWQnLCAnbXV0ZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbXV0ZWQgIT09IEh0bWw1LlRFU1RfVklELm11dGVkO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuLyoqXG4gKiBDaGVjayBpZiB0aGUgcGxheWJhY2sgcmF0ZSBjYW4gYmUgY2hhbmdlZCBpbiB0aGlzIGJyb3dzZXIvZGV2aWNlLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIC0gVHJ1ZSBpZiBwbGF5YmFjayByYXRlIGNhbiBiZSBjb250cm9sbGVkXG4gKiAgICAgICAgIC0gRmFsc2Ugb3RoZXJ3aXNlXG4gKi9cblxuXG5IdG1sNS5jYW5Db250cm9sUGxheWJhY2tSYXRlID0gZnVuY3Rpb24gKCkge1xuICAvLyBQbGF5YmFjayByYXRlIEFQSSBpcyBpbXBsZW1lbnRlZCBpbiBBbmRyb2lkIENocm9tZSwgYnV0IGRvZXNuJ3QgZG8gYW55dGhpbmdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvdmlkZW8uanMvaXNzdWVzLzMxODBcbiAgaWYgKElTX0FORFJPSUQgJiYgSVNfQ0hST01FICYmIENIUk9NRV9WRVJTSU9OIDwgNTgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSUUgd2lsbCBlcnJvciBpZiBXaW5kb3dzIE1lZGlhIFBsYXllciBub3QgaW5zdGFsbGVkICMzMzE1XG5cblxuICB0cnkge1xuICAgIHZhciBwbGF5YmFja1JhdGUgPSBIdG1sNS5URVNUX1ZJRC5wbGF5YmFja1JhdGU7XG4gICAgSHRtbDUuVEVTVF9WSUQucGxheWJhY2tSYXRlID0gcGxheWJhY2tSYXRlIC8gMiArIDAuMTtcbiAgICByZXR1cm4gcGxheWJhY2tSYXRlICE9PSBIdG1sNS5URVNUX1ZJRC5wbGF5YmFja1JhdGU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG4vKipcbiAqIENoZWNrIGlmIHdlIGNhbiBvdmVycmlkZSBhIHZpZGVvL2F1ZGlvIGVsZW1lbnRzIGF0dHJpYnV0ZXMsIHdpdGhcbiAqIE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICAtIFRydWUgaWYgYnVpbHRpbiBhdHRyaWJ1dGVzIGNhbiBiZSBvdmVycmlkZGVuXG4gKiAgICAgICAgIC0gRmFsc2Ugb3RoZXJ3aXNlXG4gKi9cblxuXG5IdG1sNS5jYW5PdmVycmlkZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGlmIHdlIGNhbm5vdCBvdmVyd3JpdGUgdGhlIHNyYy9pbm5lckhUTUwgcHJvcGVydHksIHRoZXJlIGlzIG5vIHN1cHBvcnRcbiAgLy8gaU9TIDcgc2FmYXJpIGZvciBpbnN0YW5jZSBjYW5ub3QgZG8gdGhpcy5cbiAgdHJ5IHtcbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpLCAnc3JjJywge1xuICAgICAgZ2V0OiBub29wLFxuICAgICAgc2V0OiBub29wXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyksICdzcmMnLCB7XG4gICAgICBnZXQ6IG5vb3AsXG4gICAgICBzZXQ6IG5vb3BcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKSwgJ2lubmVySFRNTCcsIHtcbiAgICAgIGdldDogbm9vcCxcbiAgICAgIHNldDogbm9vcFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpLCAnaW5uZXJIVE1MJywge1xuICAgICAgZ2V0OiBub29wLFxuICAgICAgc2V0OiBub29wXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiBuYXRpdmUgYFRleHRUcmFja2BzIGFyZSBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyL2RldmljZS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICAtIFRydWUgaWYgbmF0aXZlIGBUZXh0VHJhY2tgcyBhcmUgc3VwcG9ydGVkLlxuICogICAgICAgICAtIEZhbHNlIG90aGVyd2lzZVxuICovXG5cblxuSHRtbDUuc3VwcG9ydHNOYXRpdmVUZXh0VHJhY2tzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gSVNfQU5ZX1NBRkFSSSB8fCBJU19JT1MgJiYgSVNfQ0hST01FO1xufTtcbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIG5hdGl2ZSBgVmlkZW9UcmFja2BzIGFyZSBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyL2RldmljZVxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgLSBUcnVlIGlmIG5hdGl2ZSBgVmlkZW9UcmFja2BzIGFyZSBzdXBwb3J0ZWQuXG4gKiAgICAgICAgLSBGYWxzZSBvdGhlcndpc2VcbiAqL1xuXG5cbkh0bWw1LnN1cHBvcnRzTmF0aXZlVmlkZW9UcmFja3MgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIShIdG1sNS5URVNUX1ZJRCAmJiBIdG1sNS5URVNUX1ZJRC52aWRlb1RyYWNrcyk7XG59O1xuLyoqXG4gKiBDaGVjayB0byBzZWUgaWYgbmF0aXZlIGBBdWRpb1RyYWNrYHMgYXJlIHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIvZGV2aWNlXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAtIFRydWUgaWYgbmF0aXZlIGBBdWRpb1RyYWNrYHMgYXJlIHN1cHBvcnRlZC5cbiAqICAgICAgICAtIEZhbHNlIG90aGVyd2lzZVxuICovXG5cblxuSHRtbDUuc3VwcG9ydHNOYXRpdmVBdWRpb1RyYWNrcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhKEh0bWw1LlRFU1RfVklEICYmIEh0bWw1LlRFU1RfVklELmF1ZGlvVHJhY2tzKTtcbn07XG4vKipcbiAqIEFuIGFycmF5IG9mIGV2ZW50cyBhdmFpbGFibGUgb24gdGhlIEh0bWw1IHRlY2guXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xuXG5cbkh0bWw1LkV2ZW50cyA9IFsnbG9hZHN0YXJ0JywgJ3N1c3BlbmQnLCAnYWJvcnQnLCAnZXJyb3InLCAnZW1wdGllZCcsICdzdGFsbGVkJywgJ2xvYWRlZG1ldGFkYXRhJywgJ2xvYWRlZGRhdGEnLCAnY2FucGxheScsICdjYW5wbGF5dGhyb3VnaCcsICdwbGF5aW5nJywgJ3dhaXRpbmcnLCAnc2Vla2luZycsICdzZWVrZWQnLCAnZW5kZWQnLCAnZHVyYXRpb25jaGFuZ2UnLCAndGltZXVwZGF0ZScsICdwcm9ncmVzcycsICdwbGF5JywgJ3BhdXNlJywgJ3JhdGVjaGFuZ2UnLCAncmVzaXplJywgJ3ZvbHVtZWNoYW5nZSddO1xuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIHZvbHVtZSBjb250cm9sLlxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICogQGRlZmF1bHQge0BsaW5rIEh0bWw1LmNhbkNvbnRyb2xWb2x1bWV9XG4gKi9cblxuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYFRlY2hgIHN1cHBvcnRzIG11dGluZyB2b2x1bWUuXG4gKlxuICogQHR5cGUge2JvbGVhbn1cbiAqIEBkZWZhdWx0IHtAbGluayBIdG1sNS5jYW5NdXRlVm9sdW1lfVxuICovXG5cbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBUZWNoYCBzdXBwb3J0cyBjaGFuZ2luZyB0aGUgc3BlZWQgYXQgd2hpY2ggdGhlIG1lZGlhXG4gKiBwbGF5cy4gRXhhbXBsZXM6XG4gKiAgIC0gU2V0IHBsYXllciB0byBwbGF5IDJ4ICh0d2ljZSkgYXMgZmFzdFxuICogICAtIFNldCBwbGF5ZXIgdG8gcGxheSAwLjV4IChoYWxmKSBhcyBmYXN0XG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVmYXVsdCB7QGxpbmsgSHRtbDUuY2FuQ29udHJvbFBsYXliYWNrUmF0ZX1cbiAqL1xuXG4vKipcbiAqIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBgVGVjaGAgc3VwcG9ydHMgdGhlIGBzb3VyY2VzZXRgIGV2ZW50LlxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICogQGRlZmF1bHRcbiAqL1xuXG4vKipcbiAqIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBgSFRNTDVgIHRlY2ggY3VycmVudGx5IHN1cHBvcnRzIG5hdGl2ZSBgVGV4dFRyYWNrYHMuXG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVmYXVsdCB7QGxpbmsgSHRtbDUuc3VwcG9ydHNOYXRpdmVUZXh0VHJhY2tzfVxuICovXG5cbi8qKlxuICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBIVE1MNWAgdGVjaCBjdXJyZW50bHkgc3VwcG9ydHMgbmF0aXZlIGBWaWRlb1RyYWNrYHMuXG4gKlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVmYXVsdCB7QGxpbmsgSHRtbDUuc3VwcG9ydHNOYXRpdmVWaWRlb1RyYWNrc31cbiAqL1xuXG4vKipcbiAqIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBgSFRNTDVgIHRlY2ggY3VycmVudGx5IHN1cHBvcnRzIG5hdGl2ZSBgQXVkaW9UcmFja2BzLlxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICogQGRlZmF1bHQge0BsaW5rIEh0bWw1LnN1cHBvcnRzTmF0aXZlQXVkaW9UcmFja3N9XG4gKi9cblxuW1snZmVhdHVyZXNWb2x1bWVDb250cm9sJywgJ2NhbkNvbnRyb2xWb2x1bWUnXSwgWydmZWF0dXJlc011dGVDb250cm9sJywgJ2Nhbk11dGVWb2x1bWUnXSwgWydmZWF0dXJlc1BsYXliYWNrUmF0ZScsICdjYW5Db250cm9sUGxheWJhY2tSYXRlJ10sIFsnZmVhdHVyZXNTb3VyY2VzZXQnLCAnY2FuT3ZlcnJpZGVBdHRyaWJ1dGVzJ10sIFsnZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzJywgJ3N1cHBvcnRzTmF0aXZlVGV4dFRyYWNrcyddLCBbJ2ZlYXR1cmVzTmF0aXZlVmlkZW9UcmFja3MnLCAnc3VwcG9ydHNOYXRpdmVWaWRlb1RyYWNrcyddLCBbJ2ZlYXR1cmVzTmF0aXZlQXVkaW9UcmFja3MnLCAnc3VwcG9ydHNOYXRpdmVBdWRpb1RyYWNrcyddXS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBrZXkgPSBfcmVmWzBdLFxuICAgICAgZm4gPSBfcmVmWzFdO1xuICBkZWZpbmVMYXp5UHJvcGVydHkoSHRtbDUucHJvdG90eXBlLCBrZXksIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gSHRtbDVbZm5dKCk7XG4gIH0sIHRydWUpO1xufSk7XG4vKipcbiAqIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBgSFRNTDVgIHRlY2ggY3VycmVudGx5IHN1cHBvcnRzIHRoZSBtZWRpYSBlbGVtZW50XG4gKiBtb3ZpbmcgaW4gdGhlIERPTS4gaU9TIGJyZWFrcyBpZiB5b3UgbW92ZSB0aGUgbWVkaWEgZWxlbWVudCwgc28gdGhpcyBpcyBzZXQgdGhpcyB0b1xuICogZmFsc2UgdGhlcmUuIEV2ZXJ5d2hlcmUgZWxzZSB0aGlzIHNob3VsZCBiZSB0cnVlLlxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICogQGRlZmF1bHRcbiAqL1xuXG5IdG1sNS5wcm90b3R5cGUubW92aW5nTWVkaWFFbGVtZW50SW5ET00gPSAhSVNfSU9TOyAvLyBUT0RPOiBQcmV2aW91cyBjb21tZW50OiBObyBsb25nZXIgYXBwZWFycyB0byBiZSB1c2VkLiBDYW4gcHJvYmFibHkgYmUgcmVtb3ZlZC5cbi8vICAgICAgIElzIHRoaXMgdHJ1ZT9cblxuLyoqXG4gKiBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYEhUTUw1YCB0ZWNoIGN1cnJlbnRseSBzdXBwb3J0cyBhdXRvbWF0aWMgbWVkaWEgcmVzaXplXG4gKiB3aGVuIGdvaW5nIGludG8gZnVsbHNjcmVlbi5cbiAqXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuSHRtbDUucHJvdG90eXBlLmZlYXR1cmVzRnVsbHNjcmVlblJlc2l6ZSA9IHRydWU7XG4vKipcbiAqIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBgSFRNTDVgIHRlY2ggY3VycmVudGx5IHN1cHBvcnRzIHRoZSBwcm9ncmVzcyBldmVudC5cbiAqIElmIHRoaXMgaXMgZmFsc2UsIG1hbnVhbCBgcHJvZ3Jlc3NgIGV2ZW50cyB3aWxsIGJlIHRyaWdnZXJlZCBpbnN0ZWFkLlxuICpcbiAqIEB0eXBlIHtib29sZWFufVxuICogQGRlZmF1bHRcbiAqL1xuXG5IdG1sNS5wcm90b3R5cGUuZmVhdHVyZXNQcm9ncmVzc0V2ZW50cyA9IHRydWU7XG4vKipcbiAqIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBgSFRNTDVgIHRlY2ggY3VycmVudGx5IHN1cHBvcnRzIHRoZSB0aW1ldXBkYXRlIGV2ZW50LlxuICogSWYgdGhpcyBpcyBmYWxzZSwgbWFudWFsIGB0aW1ldXBkYXRlYCBldmVudHMgd2lsbCBiZSB0cmlnZ2VyZWQgaW5zdGVhZC5cbiAqXG4gKiBAZGVmYXVsdFxuICovXG5cbkh0bWw1LnByb3RvdHlwZS5mZWF0dXJlc1RpbWV1cGRhdGVFdmVudHMgPSB0cnVlOyAvLyBIVE1MNSBGZWF0dXJlIGRldGVjdGlvbiBhbmQgRGV2aWNlIEZpeGVzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgY2FuUGxheVR5cGU7XG5cbkh0bWw1LnBhdGNoQ2FuUGxheVR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIEFuZHJvaWQgNC4wIGFuZCBhYm92ZSBjYW4gcGxheSBITFMgdG8gc29tZSBleHRlbnQgYnV0IGl0IHJlcG9ydHMgYmVpbmcgdW5hYmxlIHRvIGRvIHNvXG4gIC8vIEZpcmVmb3ggYW5kIENocm9tZSByZXBvcnQgY29ycmVjdGx5XG4gIGlmIChBTkRST0lEX1ZFUlNJT04gPj0gNC4wICYmICFJU19GSVJFRk9YICYmICFJU19DSFJPTUUpIHtcbiAgICBjYW5QbGF5VHlwZSA9IEh0bWw1LlRFU1RfVklEICYmIEh0bWw1LlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZTtcblxuICAgIEh0bWw1LlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICB2YXIgbXBlZ3VybFJFID0gL15hcHBsaWNhdGlvblxcLyg/OngtfHZuZFxcLmFwcGxlXFwuKW1wZWd1cmwvaTtcblxuICAgICAgaWYgKHR5cGUgJiYgbXBlZ3VybFJFLnRlc3QodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuICdtYXliZSc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYW5QbGF5VHlwZS5jYWxsKHRoaXMsIHR5cGUpO1xuICAgIH07XG4gIH1cbn07XG5cbkh0bWw1LnVucGF0Y2hDYW5QbGF5VHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHIgPSBIdG1sNS5URVNUX1ZJRC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuY2FuUGxheVR5cGU7XG5cbiAgaWYgKGNhblBsYXlUeXBlKSB7XG4gICAgSHRtbDUuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlID0gY2FuUGxheVR5cGU7XG4gIH1cblxuICByZXR1cm4gcjtcbn07IC8vIGJ5IGRlZmF1bHQsIHBhdGNoIHRoZSBtZWRpYSBlbGVtZW50XG5cblxuSHRtbDUucGF0Y2hDYW5QbGF5VHlwZSgpO1xuXG5IdG1sNS5kaXNwb3NlTWVkaWFFbGVtZW50ID0gZnVuY3Rpb24gKGVsKSB7XG4gIGlmICghZWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWwucGFyZW50Tm9kZSkge1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9IC8vIHJlbW92ZSBhbnkgY2hpbGQgdHJhY2sgb3Igc291cmNlIG5vZGVzIHRvIHByZXZlbnQgdGhlaXIgbG9hZGluZ1xuXG5cbiAgd2hpbGUgKGVsLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIGVsLnJlbW92ZUNoaWxkKGVsLmZpcnN0Q2hpbGQpO1xuICB9IC8vIHJlbW92ZSBhbnkgc3JjIHJlZmVyZW5jZS4gbm90IHNldHRpbmcgYHNyYz0nJ2AgYmVjYXVzZSB0aGF0IGNhdXNlcyBhIHdhcm5pbmdcbiAgLy8gaW4gZmlyZWZveFxuXG5cbiAgZWwucmVtb3ZlQXR0cmlidXRlKCdzcmMnKTsgLy8gZm9yY2UgdGhlIG1lZGlhIGVsZW1lbnQgdG8gdXBkYXRlIGl0cyBsb2FkaW5nIHN0YXRlIGJ5IGNhbGxpbmcgbG9hZCgpXG4gIC8vIGhvd2V2ZXIgSUUgb24gV2luZG93cyA3TiBoYXMgYSBidWcgdGhhdCB0aHJvd3MgYW4gZXJyb3Igc28gbmVlZCBhIHRyeS9jYXRjaCAoIzc5MylcblxuICBpZiAodHlwZW9mIGVsLmxvYWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyB3cmFwcGluZyBpbiBhbiBpaWZlIHNvIGl0J3Mgbm90IGRlb3B0aW1pemVkICgjMTA2MCNkaXNjdXNzaW9uX3IxMDMyNDQ3MylcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZWwubG9hZCgpO1xuICAgICAgfSBjYXRjaCAoZSkgey8vIG5vdCBzdXBwb3J0ZWRcbiAgICAgIH1cbiAgICB9KSgpO1xuICB9XG59O1xuXG5IdG1sNS5yZXNldE1lZGlhRWxlbWVudCA9IGZ1bmN0aW9uIChlbCkge1xuICBpZiAoIWVsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNvdXJjZXMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKCdzb3VyY2UnKTtcbiAgdmFyIGkgPSBzb3VyY2VzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgZWwucmVtb3ZlQ2hpbGQoc291cmNlc1tpXSk7XG4gIH0gLy8gcmVtb3ZlIGFueSBzcmMgcmVmZXJlbmNlLlxuICAvLyBub3Qgc2V0dGluZyBgc3JjPScnYCBiZWNhdXNlIHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cblxuICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3NyYycpO1xuXG4gIGlmICh0eXBlb2YgZWwubG9hZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIHdyYXBwaW5nIGluIGFuIGlpZmUgc28gaXQncyBub3QgZGVvcHRpbWl6ZWQgKCMxMDYwI2Rpc2N1c3Npb25fcjEwMzI0NDczKVxuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBlbC5sb2FkKCk7XG4gICAgICB9IGNhdGNoIChlKSB7Ly8gc2F0aXNmeSBsaW50ZXJcbiAgICAgIH1cbiAgICB9KSgpO1xuICB9XG59O1xuLyogTmF0aXZlIEhUTUw1IGVsZW1lbnQgcHJvcGVydHkgd3JhcHBpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8vIFdyYXAgbmF0aXZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aXRoIGdldHRlcnMgdGhhdCBjaGVjayBib3RoIHByb3BlcnR5IGFuZCBhdHRyaWJ1dGVcbi8vIFRoZSBsaXN0IGlzIGFzIGZvbGxvd2VkOlxuLy8gbXV0ZWQsIGRlZmF1bHRNdXRlZCwgYXV0b3BsYXksIGNvbnRyb2xzLCBsb29wLCBwbGF5c2lubGluZVxuXG5cbltcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgbXV0ZWRgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGBtdXRlZGAgaW5kaWNhdGVzXG4gKiB0aGF0IHRoZSB2b2x1bWUgZm9yIHRoZSBtZWRpYSBzaG91bGQgYmUgc2V0IHRvIHNpbGVudC4gVGhpcyBkb2VzIG5vdCBhY3R1YWxseSBjaGFuZ2VcbiAqIHRoZSBgdm9sdW1lYCBhdHRyaWJ1dGUuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNtdXRlZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUcnVlIGlmIHRoZSB2YWx1ZSBvZiBgdm9sdW1lYCBzaG91bGQgYmUgaWdub3JlZCBhbmQgdGhlIGF1ZGlvIHNldCB0byBzaWxlbnQuXG4gKiAgICAgICAgIC0gRmFsc2UgaWYgdGhlIHZhbHVlIG9mIGB2b2x1bWVgIHNob3VsZCBiZSB1c2VkLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtbXV0ZWR9XG4gKi9cbidtdXRlZCcsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYGRlZmF1bHRNdXRlZGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYGRlZmF1bHRNdXRlZGAgaW5kaWNhdGVzXG4gKiB3aGV0aGVyIHRoZSBtZWRpYSBzaG91bGQgc3RhcnQgbXV0ZWQgb3Igbm90LiBPbmx5IGNoYW5nZXMgdGhlIGRlZmF1bHQgc3RhdGUgb2YgdGhlXG4gKiBtZWRpYS4gYG11dGVkYCBhbmQgYGRlZmF1bHRNdXRlZGAgY2FuIGhhdmUgZGlmZmVyZW50IHZhbHVlcy4ge0BsaW5rIEh0bWw1I211dGVkfSBpbmRpY2F0ZXMgdGhlXG4gKiBjdXJyZW50IHN0YXRlLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjZGVmYXVsdE11dGVkXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICAtIFRoZSB2YWx1ZSBvZiBgZGVmYXVsdE11dGVkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LlxuICogICAgICAgICAtIFRydWUgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBzdGFydCBtdXRlZC5cbiAqICAgICAgICAgLSBGYWxzZSBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgc2hvdWxkIG5vdCBzdGFydCBtdXRlZFxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtZGVmYXVsdG11dGVkfVxuICovXG4nZGVmYXVsdE11dGVkJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgYXV0b3BsYXlgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGBhdXRvcGxheWAgaW5kaWNhdGVzXG4gKiB0aGF0IHRoZSBtZWRpYSBzaG91bGQgc3RhcnQgdG8gcGxheSBhcyBzb29uIGFzIHRoZSBwYWdlIGlzIHJlYWR5LlxuICpcbiAqIEBtZXRob2QgSHRtbDUjYXV0b3BsYXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIC0gVGhlIHZhbHVlIG9mIGBhdXRvcGxheWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC5cbiAqICAgICAgICAgLSBUcnVlIGluZGljYXRlcyB0aGF0IHRoZSBtZWRpYSBzaG91bGQgc3RhcnQgYXMgc29vbiBhcyB0aGUgcGFnZSBsb2Fkcy5cbiAqICAgICAgICAgLSBGYWxzZSBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgc2hvdWxkIG5vdCBzdGFydCBhcyBzb29uIGFzIHRoZSBwYWdlIGxvYWRzLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNhdHRyLW1lZGlhLWF1dG9wbGF5fVxuICovXG4nYXV0b3BsYXknLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBjb250cm9sc2AgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYGNvbnRyb2xzYCBpbmRpY2F0ZXNcbiAqIHdoZXRoZXIgdGhlIG5hdGl2ZSBtZWRpYSBjb250cm9scyBzaG91bGQgYmUgc2hvd24gb3IgaGlkZGVuLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjY29udHJvbHNcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIC0gVGhlIHZhbHVlIG9mIGBjb250cm9sc2AgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC5cbiAqICAgICAgICAgLSBUcnVlIGluZGljYXRlcyB0aGF0IG5hdGl2ZSBjb250cm9scyBzaG91bGQgYmUgc2hvd2luZy5cbiAqICAgICAgICAgLSBGYWxzZSBpbmRpY2F0ZXMgdGhhdCBuYXRpdmUgY29udHJvbHMgc2hvdWxkIGJlIGhpZGRlbi5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjYXR0ci1tZWRpYS1jb250cm9sc31cbiAqL1xuJ2NvbnRyb2xzJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgbG9vcGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYGxvb3BgIGluZGljYXRlc1xuICogdGhhdCB0aGUgbWVkaWEgc2hvdWxkIHJldHVybiB0byB0aGUgc3RhcnQgb2YgdGhlIG1lZGlhIGFuZCBjb250aW51ZSBwbGF5aW5nIG9uY2VcbiAqIGl0IHJlYWNoZXMgdGhlIGVuZC5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I2xvb3BcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIC0gVGhlIHZhbHVlIG9mIGBsb29wYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LlxuICogICAgICAgICAtIFRydWUgaW5kaWNhdGVzIHRoYXQgcGxheWJhY2sgc2hvdWxkIHNlZWsgYmFjayB0byBzdGFydCBvbmNlXG4gKiAgICAgICAgICAgdGhlIGVuZCBvZiBhIG1lZGlhIGlzIHJlYWNoZWQuXG4gKiAgICAgICAgIC0gRmFsc2UgaW5kaWNhdGVzIHRoYXQgcGxheWJhY2sgc2hvdWxkIG5vdCBsb29wIGJhY2sgdG8gdGhlIHN0YXJ0IHdoZW4gdGhlXG4gKiAgICAgICAgICAgZW5kIG9mIHRoZSBtZWRpYSBpcyByZWFjaGVkLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNhdHRyLW1lZGlhLWxvb3B9XG4gKi9cbidsb29wJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgcGxheXNpbmxpbmVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGBwbGF5c2lubGluZWAgaW5kaWNhdGVzXG4gKiB0byB0aGUgYnJvd3NlciB0aGF0IG5vbi1mdWxsc2NyZWVuIHBsYXliYWNrIGlzIHByZWZlcnJlZCB3aGVuIGZ1bGxzY3JlZW5cbiAqIHBsYXliYWNrIGlzIHRoZSBuYXRpdmUgZGVmYXVsdCwgc3VjaCBhcyBpbiBpT1MgU2FmYXJpLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjcGxheXNpbmxpbmVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIC0gVGhlIHZhbHVlIG9mIGBwbGF5c2lubGluZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC5cbiAqICAgICAgICAgLSBUcnVlIGluZGljYXRlcyB0aGF0IHRoZSBtZWRpYSBzaG91bGQgcGxheSBpbmxpbmUuXG4gKiAgICAgICAgIC0gRmFsc2UgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBub3QgcGxheSBpbmxpbmUuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jYXR0ci12aWRlby1wbGF5c2lubGluZX1cbiAqL1xuJ3BsYXlzaW5saW5lJ10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBIdG1sNS5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxfW3Byb3BdIHx8IHRoaXMuZWxfLmhhc0F0dHJpYnV0ZShwcm9wKTtcbiAgfTtcbn0pOyAvLyBXcmFwIG5hdGl2ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2l0aCBzZXR0ZXJzIHRoYXQgc2V0IGJvdGggcHJvcGVydHkgYW5kIGF0dHJpYnV0ZVxuLy8gVGhlIGxpc3QgaXMgYXMgZm9sbG93ZWQ6XG4vLyBzZXRNdXRlZCwgc2V0RGVmYXVsdE11dGVkLCBzZXRBdXRvcGxheSwgc2V0TG9vcCwgc2V0UGxheXNpbmxpbmVcbi8vIHNldENvbnRyb2xzIGlzIHNwZWNpYWwtY2FzZWQgYWJvdmVcblxuW1xuLyoqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGBtdXRlZGAgb24gdGhlIG1lZGlhIGVsZW1lbnQuIGBtdXRlZGAgaW5kaWNhdGVzIHRoYXQgdGhlIGN1cnJlbnRcbiAqIGF1ZGlvIGxldmVsIHNob3VsZCBiZSBzaWxlbnQuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNzZXRNdXRlZFxuICogQHBhcmFtIHtib29sZWFufSBtdXRlZFxuICogICAgICAgIC0gVHJ1ZSBpZiB0aGUgYXVkaW8gc2hvdWxkIGJlIHNldCB0byBzaWxlbnRcbiAqICAgICAgICAtIEZhbHNlIG90aGVyd2lzZVxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtbXV0ZWR9XG4gKi9cbidtdXRlZCcsXG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYGRlZmF1bHRNdXRlZGAgb24gdGhlIG1lZGlhIGVsZW1lbnQuIGBkZWZhdWx0TXV0ZWRgIGluZGljYXRlcyB0aGF0IHRoZSBjdXJyZW50XG4gKiBhdWRpbyBsZXZlbCBzaG91bGQgYmUgc2lsZW50LCBidXQgd2lsbCBvbmx5IGVmZmVjdCB0aGUgbXV0ZWQgbGV2ZWwgb24gaW5pdGlhbCBwbGF5YmFjay4uXG4gKlxuICogQG1ldGhvZCBIdG1sNS5wcm90b3R5cGUuc2V0RGVmYXVsdE11dGVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGRlZmF1bHRNdXRlZFxuICogICAgICAgIC0gVHJ1ZSBpZiB0aGUgYXVkaW8gc2hvdWxkIGJlIHNldCB0byBzaWxlbnRcbiAqICAgICAgICAtIEZhbHNlIG90aGVyd2lzZVxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtZGVmYXVsdG11dGVkfVxuICovXG4nZGVmYXVsdE11dGVkJyxcbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBgYXV0b3BsYXlgIG9uIHRoZSBtZWRpYSBlbGVtZW50LiBgYXV0b3BsYXlgIGluZGljYXRlc1xuICogdGhhdCB0aGUgbWVkaWEgc2hvdWxkIHN0YXJ0IHRvIHBsYXkgYXMgc29vbiBhcyB0aGUgcGFnZSBpcyByZWFkeS5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3NldEF1dG9wbGF5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGF1dG9wbGF5XG4gKiAgICAgICAgIC0gVHJ1ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgc2hvdWxkIHN0YXJ0IGFzIHNvb24gYXMgdGhlIHBhZ2UgbG9hZHMuXG4gKiAgICAgICAgIC0gRmFsc2UgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBub3Qgc3RhcnQgYXMgc29vbiBhcyB0aGUgcGFnZSBsb2Fkcy5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjYXR0ci1tZWRpYS1hdXRvcGxheX1cbiAqL1xuJ2F1dG9wbGF5Jyxcbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBgbG9vcGAgb24gdGhlIG1lZGlhIGVsZW1lbnQuIGBsb29wYCBpbmRpY2F0ZXNcbiAqIHRoYXQgdGhlIG1lZGlhIHNob3VsZCByZXR1cm4gdG8gdGhlIHN0YXJ0IG9mIHRoZSBtZWRpYSBhbmQgY29udGludWUgcGxheWluZyBvbmNlXG4gKiBpdCByZWFjaGVzIHRoZSBlbmQuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNzZXRMb29wXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGxvb3BcbiAqICAgICAgICAgLSBUcnVlIGluZGljYXRlcyB0aGF0IHBsYXliYWNrIHNob3VsZCBzZWVrIGJhY2sgdG8gc3RhcnQgb25jZVxuICogICAgICAgICAgIHRoZSBlbmQgb2YgYSBtZWRpYSBpcyByZWFjaGVkLlxuICogICAgICAgICAtIEZhbHNlIGluZGljYXRlcyB0aGF0IHBsYXliYWNrIHNob3VsZCBub3QgbG9vcCBiYWNrIHRvIHRoZSBzdGFydCB3aGVuIHRoZVxuICogICAgICAgICAgIGVuZCBvZiB0aGUgbWVkaWEgaXMgcmVhY2hlZC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjYXR0ci1tZWRpYS1sb29wfVxuICovXG4nbG9vcCcsXG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYHBsYXlzaW5saW5lYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgcGxheXNpbmxpbmVgIGluZGljYXRlc1xuICogdG8gdGhlIGJyb3dzZXIgdGhhdCBub24tZnVsbHNjcmVlbiBwbGF5YmFjayBpcyBwcmVmZXJyZWQgd2hlbiBmdWxsc2NyZWVuXG4gKiBwbGF5YmFjayBpcyB0aGUgbmF0aXZlIGRlZmF1bHQsIHN1Y2ggYXMgaW4gaU9TIFNhZmFyaS5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3NldFBsYXlzaW5saW5lXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHBsYXlzaW5saW5lXG4gKiAgICAgICAgIC0gVHJ1ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgc2hvdWxkIHBsYXkgaW5saW5lLlxuICogICAgICAgICAtIEZhbHNlIGluZGljYXRlcyB0aGF0IHRoZSBtZWRpYSBzaG91bGQgbm90IHBsYXkgaW5saW5lLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2F0dHItdmlkZW8tcGxheXNpbmxpbmV9XG4gKi9cbidwbGF5c2lubGluZSddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgSHRtbDUucHJvdG90eXBlWydzZXQnICsgdG9UaXRsZUNhc2UocHJvcCldID0gZnVuY3Rpb24gKHYpIHtcbiAgICB0aGlzLmVsX1twcm9wXSA9IHY7XG5cbiAgICBpZiAodikge1xuICAgICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKHByb3AsIHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsXy5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9O1xufSk7IC8vIFdyYXAgbmF0aXZlIHByb3BlcnRpZXMgd2l0aCBhIGdldHRlclxuLy8gVGhlIGxpc3QgaXMgYXMgZm9sbG93ZWRcbi8vIHBhdXNlZCwgY3VycmVudFRpbWUsIGJ1ZmZlcmVkLCB2b2x1bWUsIHBvc3RlciwgcHJlbG9hZCwgZXJyb3IsIHNlZWtpbmdcbi8vIHNlZWthYmxlLCBlbmRlZCwgcGxheWJhY2tSYXRlLCBkZWZhdWx0UGxheWJhY2tSYXRlLCBkaXNhYmxlUGljdHVyZUluUGljdHVyZVxuLy8gcGxheWVkLCBuZXR3b3JrU3RhdGUsIHJlYWR5U3RhdGUsIHZpZGVvV2lkdGgsIHZpZGVvSGVpZ2h0LCBjcm9zc09yaWdpblxuXG5bXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYHBhdXNlZGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYHBhdXNlZGAgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIG1lZGlhIGVsZW1lbnRcbiAqIGlzIGN1cnJlbnRseSBwYXVzZWQgb3Igbm90LlxuICpcbiAqIEBtZXRob2QgSHRtbDUjcGF1c2VkXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYHBhdXNlZGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXBhdXNlZH1cbiAqL1xuJ3BhdXNlZCcsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYGN1cnJlbnRUaW1lYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgY3VycmVudFRpbWVgIGluZGljYXRlc1xuICogdGhlIGN1cnJlbnQgc2Vjb25kIHRoYXQgdGhlIG1lZGlhIGlzIGF0IGluIHBsYXliYWNrLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjY3VycmVudFRpbWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGBjdXJyZW50VGltZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLWN1cnJlbnR0aW1lfVxuICovXG4nY3VycmVudFRpbWUnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBidWZmZXJlZGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYGJ1ZmZlcmVkYCBpcyBhIGBUaW1lUmFuZ2VgXG4gKiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBwYXJ0cyBvZiB0aGUgbWVkaWEgdGhhdCBhcmUgYWxyZWFkeSBkb3dubG9hZGVkIGFuZFxuICogYXZhaWxhYmxlIGZvciBwbGF5YmFjay5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I2J1ZmZlcmVkXG4gKiBAcmV0dXJuIHtUaW1lUmFuZ2V9XG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBgYnVmZmVyZWRgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1idWZmZXJlZH1cbiAqL1xuJ2J1ZmZlcmVkJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgdm9sdW1lYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgdm9sdW1lYCBpbmRpY2F0ZXNcbiAqIHRoZSBjdXJyZW50IHBsYXliYWNrIHZvbHVtZSBvZiBhdWRpbyBmb3IgYSBtZWRpYS4gYHZvbHVtZWAgd2lsbCBiZSBhIHZhbHVlIGZyb20gMFxuICogKHNpbGVudCkgdG8gMSAobG91ZGVzdCBhbmQgZGVmYXVsdCkuXG4gKlxuICogQG1ldGhvZCBIdG1sNSN2b2x1bWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGB2b2x1bWVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIFZhbHVlIHdpbGwgYmUgYmV0d2VlbiAwLTEuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1hLXZvbHVtZX1cbiAqL1xuJ3ZvbHVtZScsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYHBvc3RlcmAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYHBvc3RlcmAgaW5kaWNhdGVzXG4gKiB0aGF0IHRoZSB1cmwgb2YgYW4gaW1hZ2UgZmlsZSB0aGF0IGNhbi93aWxsIGJlIHNob3duIHdoZW4gbm8gbWVkaWEgZGF0YSBpcyBhdmFpbGFibGUuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNwb3N0ZXJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGBwb3N0ZXJgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIFZhbHVlIHdpbGwgYmUgYSB1cmwgdG8gYW5cbiAqICAgICAgICAgaW1hZ2UuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2F0dHItdmlkZW8tcG9zdGVyfVxuICovXG4ncG9zdGVyJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgcHJlbG9hZGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYHByZWxvYWRgIGluZGljYXRlc1xuICogd2hhdCBzaG91bGQgZG93bmxvYWQgYmVmb3JlIHRoZSBtZWRpYSBpcyBpbnRlcmFjdGVkIHdpdGguIEl0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmdcbiAqIHZhbHVlczpcbiAqIC0gbm9uZTogbm90aGluZyBzaG91bGQgYmUgZG93bmxvYWRlZFxuICogLSBtZXRhZGF0YTogcG9zdGVyIGFuZCB0aGUgZmlyc3QgZmV3IGZyYW1lcyBvZiB0aGUgbWVkaWEgbWF5IGJlIGRvd25sb2FkZWQgdG8gZ2V0XG4gKiAgIG1lZGlhIGRpbWVuc2lvbnMgYW5kIG90aGVyIG1ldGFkYXRhXG4gKiAtIGF1dG86IGFsbG93IHRoZSBtZWRpYSBhbmQgbWV0YWRhdGEgZm9yIHRoZSBtZWRpYSB0byBiZSBkb3dubG9hZGVkIGJlZm9yZVxuICogICAgaW50ZXJhY3Rpb25cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3ByZWxvYWRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGBwcmVsb2FkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBXaWxsIGJlICdub25lJywgJ21ldGFkYXRhJyxcbiAqICAgICAgICAgb3IgJ2F1dG8nLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNhdHRyLW1lZGlhLXByZWxvYWR9XG4gKi9cbidwcmVsb2FkJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiB0aGUgYGVycm9yYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgZXJyb3JgIGluZGljYXRlcyBhbnlcbiAqIE1lZGlhRXJyb3IgdGhhdCBtYXkgaGF2ZSBvY2N1cnJlZCBkdXJpbmcgcGxheWJhY2suIElmIGVycm9yIHJldHVybnMgbnVsbCB0aGVyZSBpcyBub1xuICogY3VycmVudCBlcnJvci5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I2Vycm9yXG4gKiBAcmV0dXJuIHtNZWRpYUVycm9yfG51bGx9XG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBgZXJyb3JgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIFdpbGwgYmUgYE1lZGlhRXJyb3JgIGlmIHRoZXJlXG4gKiAgICAgICAgIGlzIGEgY3VycmVudCBlcnJvciBhbmQgbnVsbCBvdGhlcndpc2UuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1lcnJvcn1cbiAqL1xuJ2Vycm9yJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgc2Vla2luZ2AgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYHNlZWtpbmdgIGluZGljYXRlcyB3aGV0aGVyIHRoZVxuICogbWVkaWEgaXMgY3VycmVudGx5IHNlZWtpbmcgdG8gYSBuZXcgcG9zaXRpb24gb3Igbm90LlxuICpcbiAqIEBtZXRob2QgSHRtbDUjc2Vla2luZ1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgLSBUaGUgdmFsdWUgb2YgYHNlZWtpbmdgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuXG4gKiAgICAgICAgIC0gVHJ1ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgaXMgY3VycmVudGx5IHNlZWtpbmcgdG8gYSBuZXcgcG9zaXRpb24uXG4gKiAgICAgICAgIC0gRmFsc2UgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIGlzIG5vdCBzZWVraW5nIHRvIGEgbmV3IHBvc2l0aW9uIGF0IHRoaXMgdGltZS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXNlZWtpbmd9XG4gKi9cbidzZWVraW5nJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgc2Vla2FibGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGBzZWVrYWJsZWAgcmV0dXJucyBhXG4gKiBgVGltZVJhbmdlYCBvYmplY3QgaW5kaWNhdGluZyByYW5nZXMgb2YgdGltZSB0aGF0IGNhbiBjdXJyZW50bHkgYmUgYHNlZWtlZGAgdG8uXG4gKlxuICogQG1ldGhvZCBIdG1sNSNzZWVrYWJsZVxuICogQHJldHVybiB7VGltZVJhbmdlfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYHNlZWthYmxlYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBBIGBUaW1lUmFuZ2VgIG9iamVjdFxuICogICAgICAgICBpbmRpY2F0aW5nIHRoZSBjdXJyZW50IHJhbmdlcyBvZiB0aW1lIHRoYXQgY2FuIGJlIHNlZWtlZCB0by5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXNlZWthYmxlfVxuICovXG4nc2Vla2FibGUnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBlbmRlZGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYGVuZGVkYCBpbmRpY2F0ZXMgd2hldGhlclxuICogdGhlIG1lZGlhIGhhcyByZWFjaGVkIHRoZSBlbmQgb3Igbm90LlxuICpcbiAqIEBtZXRob2QgSHRtbDUjZW5kZWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIC0gVGhlIHZhbHVlIG9mIGBlbmRlZGAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC5cbiAqICAgICAgICAgLSBUcnVlIGluZGljYXRlcyB0aGF0IHRoZSBtZWRpYSBoYXMgZW5kZWQuXG4gKiAgICAgICAgIC0gRmFsc2UgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIGhhcyBub3QgZW5kZWQuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1lbmRlZH1cbiAqL1xuJ2VuZGVkJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgcGxheWJhY2tSYXRlYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgcGxheWJhY2tSYXRlYCBpbmRpY2F0ZXNcbiAqIHRoZSByYXRlIGF0IHdoaWNoIHRoZSBtZWRpYSBpcyBjdXJyZW50bHkgcGxheWluZyBiYWNrLiBFeGFtcGxlczpcbiAqICAgLSBpZiBwbGF5YmFja1JhdGUgaXMgc2V0IHRvIDIsIG1lZGlhIHdpbGwgcGxheSB0d2ljZSBhcyBmYXN0LlxuICogICAtIGlmIHBsYXliYWNrUmF0ZSBpcyBzZXQgdG8gMC41LCBtZWRpYSB3aWxsIHBsYXkgaGFsZiBhcyBmYXN0LlxuICpcbiAqIEBtZXRob2QgSHRtbDUjcGxheWJhY2tSYXRlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBgcGxheWJhY2tSYXRlYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBBIG51bWJlciBpbmRpY2F0aW5nXG4gKiAgICAgICAgIHRoZSBjdXJyZW50IHBsYXliYWNrIHNwZWVkIG9mIHRoZSBtZWRpYSwgd2hlcmUgMSBpcyBub3JtYWwgc3BlZWQuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1wbGF5YmFja3JhdGV9XG4gKi9cbidwbGF5YmFja1JhdGUnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBkZWZhdWx0UGxheWJhY2tSYXRlYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgZGVmYXVsdFBsYXliYWNrUmF0ZWAgaW5kaWNhdGVzXG4gKiB0aGUgcmF0ZSBhdCB3aGljaCB0aGUgbWVkaWEgaXMgY3VycmVudGx5IHBsYXlpbmcgYmFjay4gVGhpcyB2YWx1ZSB3aWxsIG5vdCBpbmRpY2F0ZSB0aGUgY3VycmVudFxuICogYHBsYXliYWNrUmF0ZWAgYWZ0ZXIgcGxheWJhY2sgaGFzIHN0YXJ0ZWQsIHVzZSB7QGxpbmsgSHRtbDUjcGxheWJhY2tSYXRlfSBmb3IgdGhhdC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqICAgLSBpZiBkZWZhdWx0UGxheWJhY2tSYXRlIGlzIHNldCB0byAyLCBtZWRpYSB3aWxsIHBsYXkgdHdpY2UgYXMgZmFzdC5cbiAqICAgLSBpZiBkZWZhdWx0UGxheWJhY2tSYXRlIGlzIHNldCB0byAwLjUsIG1lZGlhIHdpbGwgcGxheSBoYWxmIGFzIGZhc3QuXG4gKlxuICogQG1ldGhvZCBIdG1sNS5wcm90b3R5cGUuZGVmYXVsdFBsYXliYWNrUmF0ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYGRlZmF1bHRQbGF5YmFja1JhdGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIEEgbnVtYmVyIGluZGljYXRpbmdcbiAqICAgICAgICAgdGhlIGN1cnJlbnQgcGxheWJhY2sgc3BlZWQgb2YgdGhlIG1lZGlhLCB3aGVyZSAxIGlzIG5vcm1hbCBzcGVlZC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXBsYXliYWNrcmF0ZX1cbiAqL1xuJ2RlZmF1bHRQbGF5YmFja1JhdGUnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mICdkaXNhYmxlUGljdHVyZUluUGljdHVyZScgZnJvbSB0aGUgdmlkZW8gZWxlbWVudC5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I2Rpc2FibGVQaWN0dXJlSW5QaWN0dXJlXG4gKiBAcmV0dXJuIHtib29sZWFufSB2YWx1ZVxuICogICAgICAgICAtIFRoZSB2YWx1ZSBvZiBgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmVgIGZyb20gdGhlIHZpZGVvIGVsZW1lbnQuXG4gKiAgICAgICAgIC0gVHJ1ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgdmlkZW8gY2FuJ3QgYmUgcGxheWVkIGluIFBpY3R1cmUtSW4tUGljdHVyZSBtb2RlXG4gKiAgICAgICAgIC0gRmFsc2UgaW5kaWNhdGVzIHRoYXQgdGhlIHZpZGVvIGNhbiBiZSBwbGF5ZWQgaW4gUGljdHVyZS1Jbi1QaWN0dXJlIG1vZGVcbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3czYy5naXRodWIuaW8vcGljdHVyZS1pbi1waWN0dXJlLyNkaXNhYmxlLXBpcH1cbiAqL1xuJ2Rpc2FibGVQaWN0dXJlSW5QaWN0dXJlJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgcGxheWVkYCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50LiBgcGxheWVkYCByZXR1cm5zIGEgYFRpbWVSYW5nZWBcbiAqIG9iamVjdCByZXByZXNlbnRpbmcgcG9pbnRzIGluIHRoZSBtZWRpYSB0aW1lbGluZSB0aGF0IGhhdmUgYmVlbiBwbGF5ZWQuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNwbGF5ZWRcbiAqIEByZXR1cm4ge1RpbWVSYW5nZX1cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGBwbGF5ZWRgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIEEgYFRpbWVSYW5nZWAgb2JqZWN0IGluZGljYXRpbmdcbiAqICAgICAgICAgdGhlIHJhbmdlcyBvZiB0aW1lIHRoYXQgaGF2ZSBiZWVuIHBsYXllZC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXBsYXllZH1cbiAqL1xuJ3BsYXllZCcsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYG5ldHdvcmtTdGF0ZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYG5ldHdvcmtTdGF0ZWAgaW5kaWNhdGVzXG4gKiB0aGUgY3VycmVudCBuZXR3b3JrIHN0YXRlLiBJdCByZXR1cm5zIGFuIGVudW1lcmF0aW9uIGZyb20gdGhlIGZvbGxvd2luZyBsaXN0OlxuICogLSAwOiBORVRXT1JLX0VNUFRZXG4gKiAtIDE6IE5FVFdPUktfSURMRVxuICogLSAyOiBORVRXT1JLX0xPQURJTkdcbiAqIC0gMzogTkVUV09SS19OT19TT1VSQ0VcbiAqXG4gKiBAbWV0aG9kIEh0bWw1I25ldHdvcmtTdGF0ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYG5ldHdvcmtTdGF0ZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gVGhpcyB3aWxsIGJlIGEgbnVtYmVyXG4gKiAgICAgICAgIGZyb20gdGhlIGxpc3QgaW4gdGhlIGRlc2NyaXB0aW9uLlxuICpcbiAqIEBzZWUgW1NwZWNdIHtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLW5ldHdvcmtzdGF0ZX1cbiAqL1xuJ25ldHdvcmtTdGF0ZScsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYHJlYWR5U3RhdGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIGByZWFkeVN0YXRlYCBpbmRpY2F0ZXNcbiAqIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBtZWRpYSBlbGVtZW50LiBJdCByZXR1cm5zIGFuIGVudW1lcmF0aW9uIGZyb20gdGhlXG4gKiBmb2xsb3dpbmcgbGlzdDpcbiAqIC0gMDogSEFWRV9OT1RISU5HXG4gKiAtIDE6IEhBVkVfTUVUQURBVEFcbiAqIC0gMjogSEFWRV9DVVJSRU5UX0RBVEFcbiAqIC0gMzogSEFWRV9GVVRVUkVfREFUQVxuICogLSA0OiBIQVZFX0VOT1VHSF9EQVRBXG4gKlxuICogQG1ldGhvZCBIdG1sNSNyZWFkeVN0YXRlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiAgICAgICAgIFRoZSB2YWx1ZSBvZiBgcmVhZHlTdGF0ZWAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gVGhpcyB3aWxsIGJlIGEgbnVtYmVyXG4gKiAgICAgICAgIGZyb20gdGhlIGxpc3QgaW4gdGhlIGRlc2NyaXB0aW9uLlxuICpcbiAqIEBzZWUgW1NwZWNdIHtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjcmVhZHktc3RhdGVzfVxuICovXG4ncmVhZHlTdGF0ZScsXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYHZpZGVvV2lkdGhgIGZyb20gdGhlIHZpZGVvIGVsZW1lbnQuIGB2aWRlb1dpZHRoYCBpbmRpY2F0ZXNcbiAqIHRoZSBjdXJyZW50IHdpZHRoIG9mIHRoZSB2aWRlbyBpbiBjc3MgcGl4ZWxzLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjdmlkZW9XaWR0aFxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYHZpZGVvV2lkdGhgIGZyb20gdGhlIHZpZGVvIGVsZW1lbnQuIFRoaXMgd2lsbCBiZSBhIG51bWJlclxuICogICAgICAgICBpbiBjc3MgcGl4ZWxzLlxuICpcbiAqIEBzZWUgW1NwZWNdIHtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLXZpZGVvLXZpZGVvd2lkdGh9XG4gKi9cbid2aWRlb1dpZHRoJyxcbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBgdmlkZW9IZWlnaHRgIGZyb20gdGhlIHZpZGVvIGVsZW1lbnQuIGB2aWRlb0hlaWdodGAgaW5kaWNhdGVzXG4gKiB0aGUgY3VycmVudCBoZWlnaHQgb2YgdGhlIHZpZGVvIGluIGNzcyBwaXhlbHMuXG4gKlxuICogQG1ldGhvZCBIdG1sNSN2aWRlb0hlaWdodFxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYHZpZGVvSGVpZ2h0YCBmcm9tIHRoZSB2aWRlbyBlbGVtZW50LiBUaGlzIHdpbGwgYmUgYSBudW1iZXJcbiAqICAgICAgICAgaW4gY3NzIHBpeGVscy5cbiAqXG4gKiBAc2VlIFtTcGVjXSB7QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS12aWRlby12aWRlb3dpZHRofVxuICovXG4ndmlkZW9IZWlnaHQnLFxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGBjcm9zc09yaWdpbmAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYGNyb3NzT3JpZ2luYCBpbmRpY2F0ZXNcbiAqIHRvIHRoZSBicm93c2VyIHRoYXQgc2hvdWxkIHNlbnQgdGhlIGNvb2tpZXMgYWxvbmcgd2l0aCB0aGUgcmVxdWVzdHMgZm9yIHRoZVxuICogZGlmZmVyZW50IGFzc2V0cy9wbGF5bGlzdHNcbiAqXG4gKiBAbWV0aG9kIEh0bWw1I2Nyb3NzT3JpZ2luXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgIC0gYW5vbnltb3VzIGluZGljYXRlcyB0aGF0IHRoZSBtZWRpYSBzaG91bGQgbm90IHNlbnQgY29va2llcy5cbiAqICAgICAgICAgLSB1c2UtY3JlZGVudGlhbHMgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBzZW50IGNvb2tpZXMgYWxvbmcgdGhlIHJlcXVlc3RzLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2F0dHItbWVkaWEtY3Jvc3NvcmlnaW59XG4gKi9cbidjcm9zc09yaWdpbiddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgSHRtbDUucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmVsX1twcm9wXTtcbiAgfTtcbn0pOyAvLyBXcmFwIG5hdGl2ZSBwcm9wZXJ0aWVzIHdpdGggYSBzZXR0ZXIgaW4gdGhpcyBmb3JtYXQ6XG4vLyBzZXQgKyB0b1RpdGxlQ2FzZShuYW1lKVxuLy8gVGhlIGxpc3QgaXMgYXMgZm9sbG93czpcbi8vIHNldFZvbHVtZSwgc2V0U3JjLCBzZXRQb3N0ZXIsIHNldFByZWxvYWQsIHNldFBsYXliYWNrUmF0ZSwgc2V0RGVmYXVsdFBsYXliYWNrUmF0ZSxcbi8vIHNldERpc2FibGVQaWN0dXJlSW5QaWN0dXJlLCBzZXRDcm9zc09yaWdpblxuXG5bXG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYHZvbHVtZWAgb24gdGhlIG1lZGlhIGVsZW1lbnQuIGB2b2x1bWVgIGluZGljYXRlcyB0aGUgY3VycmVudFxuICogYXVkaW8gbGV2ZWwgYXMgYSBwZXJjZW50YWdlIGluIGRlY2ltYWwgZm9ybS4gVGhpcyBtZWFucyB0aGF0IDEgaXMgMTAwJSwgMC41IGlzIDUwJSwgYW5kXG4gKiBzbyBvbi5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3NldFZvbHVtZVxuICogQHBhcmFtIHtudW1iZXJ9IHBlcmNlbnRBc0RlY2ltYWxcbiAqICAgICAgICBUaGUgdm9sdW1lIHBlcmNlbnQgYXMgYSBkZWNpbWFsLiBWYWxpZCByYW5nZSBpcyBmcm9tIDAtMS5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLWEtdm9sdW1lfVxuICovXG4ndm9sdW1lJyxcbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBgc3JjYCBvbiB0aGUgbWVkaWEgZWxlbWVudC4gYHNyY2AgaW5kaWNhdGVzIHRoZSBjdXJyZW50XG4gKiB7QGxpbmsgVGVjaH5Tb3VyY2VPYmplY3R9IGZvciB0aGUgbWVkaWEuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNzZXRTcmNcbiAqIEBwYXJhbSB7VGVjaH5Tb3VyY2VPYmplY3R9IHNyY1xuICogICAgICAgIFRoZSBzb3VyY2Ugb2JqZWN0IHRvIHNldCBhcyB0aGUgY3VycmVudCBzb3VyY2UuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1zcmN9XG4gKi9cbidzcmMnLFxuLyoqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGBwb3N0ZXJgIG9uIHRoZSBtZWRpYSBlbGVtZW50LiBgcG9zdGVyYCBpcyB0aGUgdXJsIHRvXG4gKiBhbiBpbWFnZSBmaWxlIHRoYXQgY2FuL3dpbGwgYmUgc2hvd24gd2hlbiBubyBtZWRpYSBkYXRhIGlzIGF2YWlsYWJsZS5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3NldFBvc3RlclxuICogQHBhcmFtIHtzdHJpbmd9IHBvc3RlclxuICogICAgICAgIFRoZSB1cmwgdG8gYW4gaW1hZ2UgdGhhdCBzaG91bGQgYmUgdXNlZCBhcyB0aGUgYHBvc3RlcmAgZm9yIHRoZSBtZWRpYVxuICogICAgICAgIGVsZW1lbnQuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2F0dHItbWVkaWEtcG9zdGVyfVxuICovXG4ncG9zdGVyJyxcbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBgcHJlbG9hZGAgb24gdGhlIG1lZGlhIGVsZW1lbnQuIGBwcmVsb2FkYCBpbmRpY2F0ZXNcbiAqIHdoYXQgc2hvdWxkIGRvd25sb2FkIGJlZm9yZSB0aGUgbWVkaWEgaXMgaW50ZXJhY3RlZCB3aXRoLiBJdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nXG4gKiB2YWx1ZXM6XG4gKiAtIG5vbmU6IG5vdGhpbmcgc2hvdWxkIGJlIGRvd25sb2FkZWRcbiAqIC0gbWV0YWRhdGE6IHBvc3RlciBhbmQgdGhlIGZpcnN0IGZldyBmcmFtZXMgb2YgdGhlIG1lZGlhIG1heSBiZSBkb3dubG9hZGVkIHRvIGdldFxuICogICBtZWRpYSBkaW1lbnNpb25zIGFuZCBvdGhlciBtZXRhZGF0YVxuICogLSBhdXRvOiBhbGxvdyB0aGUgbWVkaWEgYW5kIG1ldGFkYXRhIGZvciB0aGUgbWVkaWEgdG8gYmUgZG93bmxvYWRlZCBiZWZvcmVcbiAqICAgIGludGVyYWN0aW9uXG4gKlxuICogQG1ldGhvZCBIdG1sNSNzZXRQcmVsb2FkXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlbG9hZFxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYHByZWxvYWRgIHRvIHNldCBvbiB0aGUgbWVkaWEgZWxlbWVudC4gTXVzdCBiZSAnbm9uZScsICdtZXRhZGF0YScsXG4gKiAgICAgICAgIG9yICdhdXRvJy5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjYXR0ci1tZWRpYS1wcmVsb2FkfVxuICovXG4ncHJlbG9hZCcsXG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYHBsYXliYWNrUmF0ZWAgb24gdGhlIG1lZGlhIGVsZW1lbnQuIGBwbGF5YmFja1JhdGVgIGluZGljYXRlc1xuICogdGhlIHJhdGUgYXQgd2hpY2ggdGhlIG1lZGlhIHNob3VsZCBwbGF5IGJhY2suIEV4YW1wbGVzOlxuICogICAtIGlmIHBsYXliYWNrUmF0ZSBpcyBzZXQgdG8gMiwgbWVkaWEgd2lsbCBwbGF5IHR3aWNlIGFzIGZhc3QuXG4gKiAgIC0gaWYgcGxheWJhY2tSYXRlIGlzIHNldCB0byAwLjUsIG1lZGlhIHdpbGwgcGxheSBoYWxmIGFzIGZhc3QuXG4gKlxuICogQG1ldGhvZCBIdG1sNSNzZXRQbGF5YmFja1JhdGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqICAgICAgICAgVGhlIHZhbHVlIG9mIGBwbGF5YmFja1JhdGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIEEgbnVtYmVyIGluZGljYXRpbmdcbiAqICAgICAgICAgdGhlIGN1cnJlbnQgcGxheWJhY2sgc3BlZWQgb2YgdGhlIG1lZGlhLCB3aGVyZSAxIGlzIG5vcm1hbCBzcGVlZC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXBsYXliYWNrcmF0ZX1cbiAqL1xuJ3BsYXliYWNrUmF0ZScsXG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYGRlZmF1bHRQbGF5YmFja1JhdGVgIG9uIHRoZSBtZWRpYSBlbGVtZW50LiBgZGVmYXVsdFBsYXliYWNrUmF0ZWAgaW5kaWNhdGVzXG4gKiB0aGUgcmF0ZSBhdCB3aGljaCB0aGUgbWVkaWEgc2hvdWxkIHBsYXkgYmFjayB1cG9uIGluaXRpYWwgc3RhcnR1cC4gQ2hhbmdpbmcgdGhpcyB2YWx1ZVxuICogYWZ0ZXIgYSB2aWRlbyBoYXMgc3RhcnRlZCB3aWxsIGRvIG5vdGhpbmcuIEluc3RlYWQgeW91IHNob3VsZCB1c2VkIHtAbGluayBIdG1sNSNzZXRQbGF5YmFja1JhdGV9LlxuICpcbiAqIEV4YW1wbGUgVmFsdWVzOlxuICogICAtIGlmIHBsYXliYWNrUmF0ZSBpcyBzZXQgdG8gMiwgbWVkaWEgd2lsbCBwbGF5IHR3aWNlIGFzIGZhc3QuXG4gKiAgIC0gaWYgcGxheWJhY2tSYXRlIGlzIHNldCB0byAwLjUsIG1lZGlhIHdpbGwgcGxheSBoYWxmIGFzIGZhc3QuXG4gKlxuICogQG1ldGhvZCBIdG1sNS5wcm90b3R5cGUuc2V0RGVmYXVsdFBsYXliYWNrUmF0ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBUaGUgdmFsdWUgb2YgYGRlZmF1bHRQbGF5YmFja1JhdGVgIGZyb20gdGhlIG1lZGlhIGVsZW1lbnQuIEEgbnVtYmVyIGluZGljYXRpbmdcbiAqICAgICAgICAgdGhlIGN1cnJlbnQgcGxheWJhY2sgc3BlZWQgb2YgdGhlIG1lZGlhLCB3aGVyZSAxIGlzIG5vcm1hbCBzcGVlZC5cbiAqXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLWRlZmF1bHRwbGF5YmFja3JhdGV9XG4gKi9cbidkZWZhdWx0UGxheWJhY2tSYXRlJyxcbi8qKlxuICogUHJldmVudHMgdGhlIGJyb3dzZXIgZnJvbSBzdWdnZXN0aW5nIGEgUGljdHVyZS1pbi1QaWN0dXJlIGNvbnRleHQgbWVudVxuICogb3IgdG8gcmVxdWVzdCBQaWN0dXJlLWluLVBpY3R1cmUgYXV0b21hdGljYWxseSBpbiBzb21lIGNhc2VzLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjc2V0RGlzYWJsZVBpY3R1cmVJblBpY3R1cmVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAqICAgICAgICAgVGhlIHRydWUgdmFsdWUgd2lsbCBkaXNhYmxlIFBpY3R1cmUtaW4tUGljdHVyZSBtb2RlLlxuICpcbiAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9waWN0dXJlLWluLXBpY3R1cmUvI2Rpc2FibGUtcGlwfVxuICovXG4nZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUnLFxuLyoqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGBjcm9zc09yaWdpbmAgZnJvbSB0aGUgbWVkaWEgZWxlbWVudC4gYGNyb3NzT3JpZ2luYCBpbmRpY2F0ZXNcbiAqIHRvIHRoZSBicm93c2VyIHRoYXQgc2hvdWxkIHNlbnQgdGhlIGNvb2tpZXMgYWxvbmcgd2l0aCB0aGUgcmVxdWVzdHMgZm9yIHRoZVxuICogZGlmZmVyZW50IGFzc2V0cy9wbGF5bGlzdHNcbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3NldENyb3NzT3JpZ2luXG4gKiBAcGFyYW0ge3N0cmluZ30gY3Jvc3NPcmlnaW5cbiAqICAgICAgICAgLSBhbm9ueW1vdXMgaW5kaWNhdGVzIHRoYXQgdGhlIG1lZGlhIHNob3VsZCBub3Qgc2VudCBjb29raWVzLlxuICogICAgICAgICAtIHVzZS1jcmVkZW50aWFscyBpbmRpY2F0ZXMgdGhhdCB0aGUgbWVkaWEgc2hvdWxkIHNlbnQgY29va2llcyBhbG9uZyB0aGUgcmVxdWVzdHMuXG4gKlxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jYXR0ci1tZWRpYS1jcm9zc29yaWdpbn1cbiAqL1xuJ2Nyb3NzT3JpZ2luJ10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBIdG1sNS5wcm90b3R5cGVbJ3NldCcgKyB0b1RpdGxlQ2FzZShwcm9wKV0gPSBmdW5jdGlvbiAodikge1xuICAgIHRoaXMuZWxfW3Byb3BdID0gdjtcbiAgfTtcbn0pOyAvLyB3cmFwIG5hdGl2ZSBmdW5jdGlvbnMgd2l0aCBhIGZ1bmN0aW9uXG4vLyBUaGUgbGlzdCBpcyBhcyBmb2xsb3dzOlxuLy8gcGF1c2UsIGxvYWQsIHBsYXlcblxuW1xuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBtZWRpYSBlbGVtZW50cyBgcGF1c2VgIGZ1bmN0aW9uLiBUaGlzIHdpbGwgY2FsbCB0aGUgYEhUTUw1YFxuICogbWVkaWEgZWxlbWVudHMgYHBhdXNlYCBmdW5jdGlvbi5cbiAqXG4gKiBAbWV0aG9kIEh0bWw1I3BhdXNlXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLXBhdXNlfVxuICovXG4ncGF1c2UnLFxuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBtZWRpYSBlbGVtZW50cyBgbG9hZGAgZnVuY3Rpb24uIFRoaXMgd2lsbCBjYWxsIHRoZSBgSFRNTDVgc1xuICogbWVkaWEgZWxlbWVudCBgbG9hZGAgZnVuY3Rpb24uXG4gKlxuICogQG1ldGhvZCBIdG1sNSNsb2FkXG4gKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjZG9tLW1lZGlhLWxvYWR9XG4gKi9cbidsb2FkJyxcbi8qKlxuICogQSB3cmFwcGVyIGFyb3VuZCB0aGUgbWVkaWEgZWxlbWVudHMgYHBsYXlgIGZ1bmN0aW9uLiBUaGlzIHdpbGwgY2FsbCB0aGUgYEhUTUw1YHNcbiAqIG1lZGlhIGVsZW1lbnQgYHBsYXlgIGZ1bmN0aW9uLlxuICpcbiAqIEBtZXRob2QgSHRtbDUjcGxheVxuICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1wbGF5fVxuICovXG4ncGxheSddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgSHRtbDUucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmVsX1twcm9wXSgpO1xuICB9O1xufSk7XG5UZWNoLndpdGhTb3VyY2VIYW5kbGVycyhIdG1sNSk7XG4vKipcbiAqIE5hdGl2ZSBzb3VyY2UgaGFuZGxlciBmb3IgSHRtbDUsIHNpbXBseSBwYXNzZXMgdGhlIHNvdXJjZSB0byB0aGUgbWVkaWEgZWxlbWVudC5cbiAqXG4gKiBAcHJvcGVydHkge1RlY2h+U291cmNlT2JqZWN0fSBzb3VyY2VcbiAqICAgICAgICBUaGUgc291cmNlIG9iamVjdFxuICpcbiAqIEBwcm9wZXJ0eSB7SHRtbDV9IHRlY2hcbiAqICAgICAgICBUaGUgaW5zdGFuY2Ugb2YgdGhlIEhUTUw1IHRlY2guXG4gKi9cblxuSHRtbDUubmF0aXZlU291cmNlSGFuZGxlciA9IHt9O1xuLyoqXG4gKiBDaGVjayBpZiB0aGUgbWVkaWEgZWxlbWVudCBjYW4gcGxheSB0aGUgZ2l2ZW4gbWltZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiAgICAgICAgVGhlIG1pbWV0eXBlIHRvIGNoZWNrXG4gKlxuICogQHJldHVybiB7c3RyaW5nfVxuICogICAgICAgICAncHJvYmFibHknLCAnbWF5YmUnLCBvciAnJyAoZW1wdHkgc3RyaW5nKVxuICovXG5cbkh0bWw1Lm5hdGl2ZVNvdXJjZUhhbmRsZXIuY2FuUGxheVR5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAvLyBJRSB3aXRob3V0IE1lZGlhUGxheWVyIHRocm93cyBhbiBlcnJvciAoIzUxOSlcbiAgdHJ5IHtcbiAgICByZXR1cm4gSHRtbDUuVEVTVF9WSUQuY2FuUGxheVR5cGUodHlwZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn07XG4vKipcbiAqIENoZWNrIGlmIHRoZSBtZWRpYSBlbGVtZW50IGNhbiBoYW5kbGUgYSBzb3VyY2UgbmF0aXZlbHkuXG4gKlxuICogQHBhcmFtIHtUZWNoflNvdXJjZU9iamVjdH0gc291cmNlXG4gKiAgICAgICAgIFRoZSBzb3VyY2Ugb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogICAgICAgICBPcHRpb25zIHRvIGJlIHBhc3NlZCB0byB0aGUgdGVjaC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiAgICAgICAgICdwcm9iYWJseScsICdtYXliZScsIG9yICcnIChlbXB0eSBzdHJpbmcpLlxuICovXG5cblxuSHRtbDUubmF0aXZlU291cmNlSGFuZGxlci5jYW5IYW5kbGVTb3VyY2UgPSBmdW5jdGlvbiAoc291cmNlLCBvcHRpb25zKSB7XG4gIC8vIElmIGEgdHlwZSB3YXMgcHJvdmlkZWQgd2Ugc2hvdWxkIHJlbHkgb24gdGhhdFxuICBpZiAoc291cmNlLnR5cGUpIHtcbiAgICByZXR1cm4gSHRtbDUubmF0aXZlU291cmNlSGFuZGxlci5jYW5QbGF5VHlwZShzb3VyY2UudHlwZSk7IC8vIElmIG5vIHR5cGUsIGZhbGwgYmFjayB0byBjaGVja2luZyAndmlkZW8vW0VYVEVOU0lPTl0nXG4gIH0gZWxzZSBpZiAoc291cmNlLnNyYykge1xuICAgIHZhciBleHQgPSBnZXRGaWxlRXh0ZW5zaW9uKHNvdXJjZS5zcmMpO1xuICAgIHJldHVybiBIdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyLmNhblBsYXlUeXBlKFwidmlkZW8vXCIgKyBleHQpO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufTtcbi8qKlxuICogUGFzcyB0aGUgc291cmNlIHRvIHRoZSBuYXRpdmUgbWVkaWEgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fSBzb3VyY2VcbiAqICAgICAgICBUaGUgc291cmNlIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7SHRtbDV9IHRlY2hcbiAqICAgICAgICBUaGUgaW5zdGFuY2Ugb2YgdGhlIEh0bWw1IHRlY2hcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiAgICAgICAgVGhlIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgc291cmNlXG4gKi9cblxuXG5IdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyLmhhbmRsZVNvdXJjZSA9IGZ1bmN0aW9uIChzb3VyY2UsIHRlY2gsIG9wdGlvbnMpIHtcbiAgdGVjaC5zZXRTcmMoc291cmNlLnNyYyk7XG59O1xuLyoqXG4gKiBBIG5vb3AgZm9yIHRoZSBuYXRpdmUgZGlzcG9zZSBmdW5jdGlvbiwgYXMgY2xlYW51cCBpcyBub3QgbmVlZGVkLlxuICovXG5cblxuSHRtbDUubmF0aXZlU291cmNlSGFuZGxlci5kaXNwb3NlID0gZnVuY3Rpb24gKCkge307IC8vIFJlZ2lzdGVyIHRoZSBuYXRpdmUgc291cmNlIGhhbmRsZXJcblxuXG5IdG1sNS5yZWdpc3RlclNvdXJjZUhhbmRsZXIoSHRtbDUubmF0aXZlU291cmNlSGFuZGxlcik7XG5UZWNoLnJlZ2lzdGVyVGVjaCgnSHRtbDUnLCBIdG1sNSk7XG5cbi8vIG9uIHRoZSBwbGF5ZXIgd2hlbiB0aGV5IGhhcHBlblxuXG52YXIgVEVDSF9FVkVOVFNfUkVUUklHR0VSID0gW1xuLyoqXG4gKiBGaXJlZCB3aGlsZSB0aGUgdXNlciBhZ2VudCBpcyBkb3dubG9hZGluZyBtZWRpYSBkYXRhLlxuICpcbiAqIEBldmVudCBQbGF5ZXIjcHJvZ3Jlc3NcbiAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAqL1xuXG4vKipcbiAqIFJldHJpZ2dlciB0aGUgYHByb2dyZXNzYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG1ldGhvZCBQbGF5ZXIjaGFuZGxlVGVjaFByb2dyZXNzX1xuICogQGZpcmVzIFBsYXllciNwcm9ncmVzc1xuICogQGxpc3RlbnMgVGVjaCNwcm9ncmVzc1xuICovXG4ncHJvZ3Jlc3MnLFxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZSBsb2FkaW5nIG9mIGFuIGF1ZGlvL3ZpZGVvIGlzIGFib3J0ZWQuXG4gKlxuICogQGV2ZW50IFBsYXllciNhYm9ydFxuICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICovXG5cbi8qKlxuICogUmV0cmlnZ2VyIHRoZSBgYWJvcnRgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbWV0aG9kIFBsYXllciNoYW5kbGVUZWNoQWJvcnRfXG4gKiBAZmlyZXMgUGxheWVyI2Fib3J0XG4gKiBAbGlzdGVucyBUZWNoI2Fib3J0XG4gKi9cbidhYm9ydCcsXG4vKipcbiAqIEZpcmVzIHdoZW4gdGhlIGJyb3dzZXIgaXMgaW50ZW50aW9uYWxseSBub3QgZ2V0dGluZyBtZWRpYSBkYXRhLlxuICpcbiAqIEBldmVudCBQbGF5ZXIjc3VzcGVuZFxuICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICovXG5cbi8qKlxuICogUmV0cmlnZ2VyIHRoZSBgc3VzcGVuZGAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBtZXRob2QgUGxheWVyI2hhbmRsZVRlY2hTdXNwZW5kX1xuICogQGZpcmVzIFBsYXllciNzdXNwZW5kXG4gKiBAbGlzdGVucyBUZWNoI3N1c3BlbmRcbiAqL1xuJ3N1c3BlbmQnLFxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZSBjdXJyZW50IHBsYXlsaXN0IGlzIGVtcHR5LlxuICpcbiAqIEBldmVudCBQbGF5ZXIjZW1wdGllZFxuICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICovXG5cbi8qKlxuICogUmV0cmlnZ2VyIHRoZSBgZW1wdGllZGAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBtZXRob2QgUGxheWVyI2hhbmRsZVRlY2hFbXB0aWVkX1xuICogQGZpcmVzIFBsYXllciNlbXB0aWVkXG4gKiBAbGlzdGVucyBUZWNoI2VtcHRpZWRcbiAqL1xuJ2VtcHRpZWQnLFxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZSBicm93c2VyIGlzIHRyeWluZyB0byBnZXQgbWVkaWEgZGF0YSwgYnV0IGRhdGEgaXMgbm90IGF2YWlsYWJsZS5cbiAqXG4gKiBAZXZlbnQgUGxheWVyI3N0YWxsZWRcbiAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAqL1xuXG4vKipcbiAqIFJldHJpZ2dlciB0aGUgYHN0YWxsZWRgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbWV0aG9kIFBsYXllciNoYW5kbGVUZWNoU3RhbGxlZF9cbiAqIEBmaXJlcyBQbGF5ZXIjc3RhbGxlZFxuICogQGxpc3RlbnMgVGVjaCNzdGFsbGVkXG4gKi9cbidzdGFsbGVkJyxcbi8qKlxuICogRmlyZXMgd2hlbiB0aGUgYnJvd3NlciBoYXMgbG9hZGVkIG1ldGEgZGF0YSBmb3IgdGhlIGF1ZGlvL3ZpZGVvLlxuICpcbiAqIEBldmVudCBQbGF5ZXIjbG9hZGVkbWV0YWRhdGFcbiAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAqL1xuXG4vKipcbiAqIFJldHJpZ2dlciB0aGUgYHN0YWxsZWRgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbWV0aG9kIFBsYXllciNoYW5kbGVUZWNoTG9hZGVkbWV0YWRhdGFfXG4gKiBAZmlyZXMgUGxheWVyI2xvYWRlZG1ldGFkYXRhXG4gKiBAbGlzdGVucyBUZWNoI2xvYWRlZG1ldGFkYXRhXG4gKi9cbidsb2FkZWRtZXRhZGF0YScsXG4vKipcbiAqIEZpcmVzIHdoZW4gdGhlIGJyb3dzZXIgaGFzIGxvYWRlZCB0aGUgY3VycmVudCBmcmFtZSBvZiB0aGUgYXVkaW8vdmlkZW8uXG4gKlxuICogQGV2ZW50IFBsYXllciNsb2FkZWRkYXRhXG4gKiBAdHlwZSB7ZXZlbnR9XG4gKi9cblxuLyoqXG4gKiBSZXRyaWdnZXIgdGhlIGBsb2FkZWRkYXRhYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG1ldGhvZCBQbGF5ZXIjaGFuZGxlVGVjaExvYWRkZWRkYXRhX1xuICogQGZpcmVzIFBsYXllciNsb2FkZWRkYXRhXG4gKiBAbGlzdGVucyBUZWNoI2xvYWRlZGRhdGFcbiAqL1xuJ2xvYWRlZGRhdGEnLFxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uIGhhcyBjaGFuZ2VkLlxuICpcbiAqIEBldmVudCBQbGF5ZXIjdGltZXVwZGF0ZVxuICogQHR5cGUge2V2ZW50fVxuICovXG5cbi8qKlxuICogUmV0cmlnZ2VyIHRoZSBgdGltZXVwZGF0ZWAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBtZXRob2QgUGxheWVyI2hhbmRsZVRlY2hUaW1lVXBkYXRlX1xuICogQGZpcmVzIFBsYXllciN0aW1ldXBkYXRlXG4gKiBAbGlzdGVucyBUZWNoI3RpbWV1cGRhdGVcbiAqL1xuJ3RpbWV1cGRhdGUnLFxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZSB2aWRlbydzIGludHJpbnNpYyBkaW1lbnNpb25zIGNoYW5nZVxuICpcbiAqIEBldmVudCBQbGF5ZXIjcmVzaXplXG4gKiBAdHlwZSB7ZXZlbnR9XG4gKi9cblxuLyoqXG4gKiBSZXRyaWdnZXIgdGhlIGByZXNpemVgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbWV0aG9kIFBsYXllciNoYW5kbGVUZWNoUmVzaXplX1xuICogQGZpcmVzIFBsYXllciNyZXNpemVcbiAqIEBsaXN0ZW5zIFRlY2gjcmVzaXplXG4gKi9cbidyZXNpemUnLFxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZSB2b2x1bWUgaGFzIGJlZW4gY2hhbmdlZFxuICpcbiAqIEBldmVudCBQbGF5ZXIjdm9sdW1lY2hhbmdlXG4gKiBAdHlwZSB7ZXZlbnR9XG4gKi9cblxuLyoqXG4gKiBSZXRyaWdnZXIgdGhlIGB2b2x1bWVjaGFuZ2VgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbWV0aG9kIFBsYXllciNoYW5kbGVUZWNoVm9sdW1lY2hhbmdlX1xuICogQGZpcmVzIFBsYXllciN2b2x1bWVjaGFuZ2VcbiAqIEBsaXN0ZW5zIFRlY2gjdm9sdW1lY2hhbmdlXG4gKi9cbid2b2x1bWVjaGFuZ2UnLFxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZSB0ZXh0IHRyYWNrIGhhcyBiZWVuIGNoYW5nZWRcbiAqXG4gKiBAZXZlbnQgUGxheWVyI3RleHR0cmFja2NoYW5nZVxuICogQHR5cGUge2V2ZW50fVxuICovXG5cbi8qKlxuICogUmV0cmlnZ2VyIHRoZSBgdGV4dHRyYWNrY2hhbmdlYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG1ldGhvZCBQbGF5ZXIjaGFuZGxlVGVjaFRleHR0cmFja2NoYW5nZV9cbiAqIEBmaXJlcyBQbGF5ZXIjdGV4dHRyYWNrY2hhbmdlXG4gKiBAbGlzdGVucyBUZWNoI3RleHR0cmFja2NoYW5nZVxuICovXG4ndGV4dHRyYWNrY2hhbmdlJ107IC8vIGV2ZW50cyB0byBxdWV1ZSB3aGVuIHBsYXliYWNrIHJhdGUgaXMgemVyb1xuLy8gdGhpcyBpcyBhIGhhc2ggZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgbWFwcGluZyBub24tY2FtZWwtY2FzZWQgZXZlbnQgbmFtZXNcbi8vIHRvIGNhbWVsLWNhc2VkIGZ1bmN0aW9uIG5hbWVzXG5cbnZhciBURUNIX0VWRU5UU19RVUVVRSA9IHtcbiAgY2FucGxheTogJ0NhblBsYXknLFxuICBjYW5wbGF5dGhyb3VnaDogJ0NhblBsYXlUaHJvdWdoJyxcbiAgcGxheWluZzogJ1BsYXlpbmcnLFxuICBzZWVrZWQ6ICdTZWVrZWQnXG59O1xudmFyIEJSRUFLUE9JTlRfT1JERVIgPSBbJ3RpbnknLCAneHNtYWxsJywgJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZScsICd4bGFyZ2UnLCAnaHVnZSddO1xudmFyIEJSRUFLUE9JTlRfQ0xBU1NFUyA9IHt9OyAvLyBncmVwOiB2anMtbGF5b3V0LXRpbnlcbi8vIGdyZXA6IHZqcy1sYXlvdXQteC1zbWFsbFxuLy8gZ3JlcDogdmpzLWxheW91dC1zbWFsbFxuLy8gZ3JlcDogdmpzLWxheW91dC1tZWRpdW1cbi8vIGdyZXA6IHZqcy1sYXlvdXQtbGFyZ2Vcbi8vIGdyZXA6IHZqcy1sYXlvdXQteC1sYXJnZVxuLy8gZ3JlcDogdmpzLWxheW91dC1odWdlXG5cbkJSRUFLUE9JTlRfT1JERVIuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICB2YXIgdiA9IGsuY2hhckF0KDApID09PSAneCcgPyBcIngtXCIgKyBrLnN1YnN0cmluZygxKSA6IGs7XG4gIEJSRUFLUE9JTlRfQ0xBU1NFU1trXSA9IFwidmpzLWxheW91dC1cIiArIHY7XG59KTtcbnZhciBERUZBVUxUX0JSRUFLUE9JTlRTID0ge1xuICB0aW55OiAyMTAsXG4gIHhzbWFsbDogMzIwLFxuICBzbWFsbDogNDI1LFxuICBtZWRpdW06IDc2OCxcbiAgbGFyZ2U6IDE0NDAsXG4gIHhsYXJnZTogMjU2MCxcbiAgaHVnZTogSW5maW5pdHlcbn07XG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIHRoZSBgUGxheWVyYCBjbGFzcyBpcyBjcmVhdGVkIHdoZW4gYW55IG9mIHRoZSBWaWRlby5qcyBzZXR1cCBtZXRob2RzXG4gKiBhcmUgdXNlZCB0byBpbml0aWFsaXplIGEgdmlkZW8uXG4gKlxuICogQWZ0ZXIgYW4gaW5zdGFuY2UgaGFzIGJlZW4gY3JlYXRlZCBpdCBjYW4gYmUgYWNjZXNzZWQgZ2xvYmFsbHkgaW4gdHdvIHdheXM6XG4gKiAxLiBCeSBjYWxsaW5nIGB2aWRlb2pzKCdleGFtcGxlX3ZpZGVvXzEnKTtgXG4gKiAyLiBCeSB1c2luZyBpdCBkaXJlY3RseSB2aWEgIGB2aWRlb2pzLnBsYXllcnMuZXhhbXBsZV92aWRlb18xO2BcbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuXG52YXIgUGxheWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFBsYXllciwgX0NvbXBvbmVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhZ1xuICAgKiAgICAgICAgVGhlIG9yaWdpbmFsIHZpZGVvIERPTSBlbGVtZW50IHVzZWQgZm9yIGNvbmZpZ3VyaW5nIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogICAgICAgIE9iamVjdCBvZiBvcHRpb24gbmFtZXMgYW5kIHZhbHVlcy5cbiAgICpcbiAgICogQHBhcmFtIHtDb21wb25lbnR+UmVhZHlDYWxsYmFja30gW3JlYWR5XVxuICAgKiAgICAgICAgUmVhZHkgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBQbGF5ZXIodGFnLCBvcHRpb25zLCByZWFkeSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIC8vIE1ha2Ugc3VyZSB0YWcgSUQgZXhpc3RzXG4gICAgdGFnLmlkID0gdGFnLmlkIHx8IG9wdGlvbnMuaWQgfHwgXCJ2anNfdmlkZW9fXCIgKyBuZXdHVUlEKCk7IC8vIFNldCBPcHRpb25zXG4gICAgLy8gVGhlIG9wdGlvbnMgYXJndW1lbnQgb3ZlcnJpZGVzIG9wdGlvbnMgc2V0IGluIHRoZSB2aWRlbyB0YWdcbiAgICAvLyB3aGljaCBvdmVycmlkZXMgZ2xvYmFsbHkgc2V0IG9wdGlvbnMuXG4gICAgLy8gVGhpcyBsYXR0ZXIgcGFydCBjb2luY2lkZXMgd2l0aCB0aGUgbG9hZCBvcmRlclxuICAgIC8vICh0YWcgbXVzdCBleGlzdCBiZWZvcmUgUGxheWVyKVxuXG4gICAgb3B0aW9ucyA9IGFzc2lnbihQbGF5ZXIuZ2V0VGFnU2V0dGluZ3ModGFnKSwgb3B0aW9ucyk7IC8vIERlbGF5IHRoZSBpbml0aWFsaXphdGlvbiBvZiBjaGlsZHJlbiBiZWNhdXNlIHdlIG5lZWQgdG8gc2V0IHVwXG4gICAgLy8gcGxheWVyIHByb3BlcnRpZXMgZmlyc3QsIGFuZCBjYW4ndCB1c2UgYHRoaXNgIGJlZm9yZSBgc3VwZXIoKWBcblxuICAgIG9wdGlvbnMuaW5pdENoaWxkcmVuID0gZmFsc2U7IC8vIFNhbWUgd2l0aCBjcmVhdGluZyB0aGUgZWxlbWVudFxuXG4gICAgb3B0aW9ucy5jcmVhdGVFbCA9IGZhbHNlOyAvLyBkb24ndCBhdXRvIG1peGluIHRoZSBldmVudGVkIG1peGluXG5cbiAgICBvcHRpb25zLmV2ZW50ZWQgPSBmYWxzZTsgLy8gd2UgZG9uJ3Qgd2FudCB0aGUgcGxheWVyIHRvIHJlcG9ydCB0b3VjaCBhY3Rpdml0eSBvbiBpdHNlbGZcbiAgICAvLyBzZWUgZW5hYmxlVG91Y2hBY3Rpdml0eSBpbiBDb21wb25lbnRcblxuICAgIG9wdGlvbnMucmVwb3J0VG91Y2hBY3Rpdml0eSA9IGZhbHNlOyAvLyBJZiBsYW5ndWFnZSBpcyBub3Qgc2V0LCBnZXQgdGhlIGNsb3Nlc3QgbGFuZyBhdHRyaWJ1dGVcblxuICAgIGlmICghb3B0aW9ucy5sYW5ndWFnZSkge1xuICAgICAgaWYgKHR5cGVvZiB0YWcuY2xvc2VzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgY2xvc2VzdCA9IHRhZy5jbG9zZXN0KCdbbGFuZ10nKTtcblxuICAgICAgICBpZiAoY2xvc2VzdCAmJiBjbG9zZXN0LmdldEF0dHJpYnV0ZSkge1xuICAgICAgICAgIG9wdGlvbnMubGFuZ3VhZ2UgPSBjbG9zZXN0LmdldEF0dHJpYnV0ZSgnbGFuZycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRhZztcblxuICAgICAgICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgaWYgKGdldEF0dHJpYnV0ZXMoZWxlbWVudCkuaGFzT3duUHJvcGVydHkoJ2xhbmcnKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5sYW5ndWFnZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdsYW5nJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBSdW4gYmFzZSBjb21wb25lbnQgaW5pdGlhbGl6aW5nIHdpdGggbmV3IG9wdGlvbnNcblxuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgbnVsbCwgb3B0aW9ucywgcmVhZHkpIHx8IHRoaXM7IC8vIENyZWF0ZSBib3VuZCBtZXRob2RzIGZvciBkb2N1bWVudCBsaXN0ZW5lcnMuXG5cbiAgICBfdGhpcy5ib3VuZERvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV8gPSBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy5kb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2VfKTtcbiAgICBfdGhpcy5ib3VuZEZ1bGxXaW5kb3dPbkVzY0tleV8gPSBiaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy5mdWxsV2luZG93T25Fc2NLZXkpOyAvLyBkZWZhdWx0IGlzRnVsbHNjcmVlbl8gdG8gZmFsc2VcblxuICAgIF90aGlzLmlzRnVsbHNjcmVlbl8gPSBmYWxzZTsgLy8gY3JlYXRlIGxvZ2dlclxuXG4gICAgX3RoaXMubG9nID0gY3JlYXRlTG9nZ2VyJDEoX3RoaXMuaWRfKTsgLy8gSG9sZCBvdXIgb3duIHJlZmVyZW5jZSB0byBmdWxsc2NyZWVuIGFwaSBzbyBpdCBjYW4gYmUgbW9ja2VkIGluIHRlc3RzXG5cbiAgICBfdGhpcy5mc0FwaV8gPSBGdWxsc2NyZWVuQXBpOyAvLyBUcmFja3Mgd2hlbiBhIHRlY2ggY2hhbmdlcyB0aGUgcG9zdGVyXG5cbiAgICBfdGhpcy5pc1Bvc3RlckZyb21UZWNoXyA9IGZhbHNlOyAvLyBIb2xkcyBjYWxsYmFjayBpbmZvIHRoYXQgZ2V0cyBxdWV1ZWQgd2hlbiBwbGF5YmFjayByYXRlIGlzIHplcm9cbiAgICAvLyBhbmQgYSBzZWVrIGlzIGhhcHBlbmluZ1xuXG4gICAgX3RoaXMucXVldWVkQ2FsbGJhY2tzXyA9IFtdOyAvLyBUdXJuIG9mZiBBUEkgYWNjZXNzIGJlY2F1c2Ugd2UncmUgbG9hZGluZyBhIG5ldyB0ZWNoIHRoYXQgbWlnaHQgbG9hZCBhc3luY2hyb25vdXNseVxuXG4gICAgX3RoaXMuaXNSZWFkeV8gPSBmYWxzZTsgLy8gSW5pdCBzdGF0ZSBoYXNTdGFydGVkX1xuXG4gICAgX3RoaXMuaGFzU3RhcnRlZF8gPSBmYWxzZTsgLy8gSW5pdCBzdGF0ZSB1c2VyQWN0aXZlX1xuXG4gICAgX3RoaXMudXNlckFjdGl2ZV8gPSBmYWxzZTsgLy8gSW5pdCBkZWJ1Z0VuYWJsZWRfXG5cbiAgICBfdGhpcy5kZWJ1Z0VuYWJsZWRfID0gZmFsc2U7IC8vIGlmIHRoZSBnbG9iYWwgb3B0aW9uIG9iamVjdCB3YXMgYWNjaWRlbnRhbGx5IGJsb3duIGF3YXkgYnlcbiAgICAvLyBzb21lb25lLCBiYWlsIGVhcmx5IHdpdGggYW4gaW5mb3JtYXRpdmUgZXJyb3JcblxuICAgIGlmICghX3RoaXMub3B0aW9uc18gfHwgIV90aGlzLm9wdGlvbnNfLnRlY2hPcmRlciB8fCAhX3RoaXMub3B0aW9uc18udGVjaE9yZGVyLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0ZWNoT3JkZXIgc3BlY2lmaWVkLiBEaWQgeW91IG92ZXJ3cml0ZSAnICsgJ3ZpZGVvanMub3B0aW9ucyBpbnN0ZWFkIG9mIGp1c3QgY2hhbmdpbmcgdGhlICcgKyAncHJvcGVydGllcyB5b3Ugd2FudCB0byBvdmVycmlkZT8nKTtcbiAgICB9IC8vIFN0b3JlIHRoZSBvcmlnaW5hbCB0YWcgdXNlZCB0byBzZXQgb3B0aW9uc1xuXG5cbiAgICBfdGhpcy50YWcgPSB0YWc7IC8vIFN0b3JlIHRoZSB0YWcgYXR0cmlidXRlcyB1c2VkIHRvIHJlc3RvcmUgaHRtbDUgZWxlbWVudFxuXG4gICAgX3RoaXMudGFnQXR0cmlidXRlcyA9IHRhZyAmJiBnZXRBdHRyaWJ1dGVzKHRhZyk7IC8vIFVwZGF0ZSBjdXJyZW50IGxhbmd1YWdlXG5cbiAgICBfdGhpcy5sYW5ndWFnZShfdGhpcy5vcHRpb25zXy5sYW5ndWFnZSk7IC8vIFVwZGF0ZSBTdXBwb3J0ZWQgTGFuZ3VhZ2VzXG5cblxuICAgIGlmIChvcHRpb25zLmxhbmd1YWdlcykge1xuICAgICAgLy8gTm9ybWFsaXNlIHBsYXllciBvcHRpb24gbGFuZ3VhZ2VzIHRvIGxvd2VyY2FzZVxuICAgICAgdmFyIGxhbmd1YWdlc1RvTG93ZXIgPSB7fTtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9wdGlvbnMubGFuZ3VhZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGxhbmd1YWdlc1RvTG93ZXJbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IG9wdGlvbnMubGFuZ3VhZ2VzW25hbWVdO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5sYW5ndWFnZXNfID0gbGFuZ3VhZ2VzVG9Mb3dlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMubGFuZ3VhZ2VzXyA9IFBsYXllci5wcm90b3R5cGUub3B0aW9uc18ubGFuZ3VhZ2VzO1xuICAgIH1cblxuICAgIF90aGlzLnJlc2V0Q2FjaGVfKCk7IC8vIFNldCBwb3N0ZXJcblxuXG4gICAgX3RoaXMucG9zdGVyXyA9IG9wdGlvbnMucG9zdGVyIHx8ICcnOyAvLyBTZXQgY29udHJvbHNcblxuICAgIF90aGlzLmNvbnRyb2xzXyA9ICEhb3B0aW9ucy5jb250cm9sczsgLy8gT3JpZ2luYWwgdGFnIHNldHRpbmdzIHN0b3JlZCBpbiBvcHRpb25zXG4gICAgLy8gbm93IHJlbW92ZSBpbW1lZGlhdGVseSBzbyBuYXRpdmUgY29udHJvbHMgZG9uJ3QgZmxhc2guXG4gICAgLy8gTWF5IGJlIHR1cm5lZCBiYWNrIG9uIGJ5IEhUTUw1IHRlY2ggaWYgbmF0aXZlQ29udHJvbHNGb3JUb3VjaCBpcyB0cnVlXG5cbiAgICB0YWcuY29udHJvbHMgPSBmYWxzZTtcbiAgICB0YWcucmVtb3ZlQXR0cmlidXRlKCdjb250cm9scycpO1xuICAgIF90aGlzLmNoYW5naW5nU3JjXyA9IGZhbHNlO1xuICAgIF90aGlzLnBsYXlDYWxsYmFja3NfID0gW107XG4gICAgX3RoaXMucGxheVRlcm1pbmF0ZWRRdWV1ZV8gPSBbXTsgLy8gdGhlIGF0dHJpYnV0ZSBvdmVycmlkZXMgdGhlIG9wdGlvblxuXG4gICAgaWYgKHRhZy5oYXNBdHRyaWJ1dGUoJ2F1dG9wbGF5JykpIHtcbiAgICAgIF90aGlzLmF1dG9wbGF5KHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvdGhlcndpc2UgdXNlIHRoZSBzZXR0ZXIgdG8gdmFsaWRhdGUgYW5kXG4gICAgICAvLyBzZXQgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgICBfdGhpcy5hdXRvcGxheShfdGhpcy5vcHRpb25zXy5hdXRvcGxheSk7XG4gICAgfSAvLyBjaGVjayBwbHVnaW5zXG5cblxuICAgIGlmIChvcHRpb25zLnBsdWdpbnMpIHtcbiAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMucGx1Z2lucykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIF90aGlzW25hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGx1Z2luIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZG9lcyBub3QgZXhpc3RcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKlxuICAgICAqIFN0b3JlIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBzY3J1YmJpbmdcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdXNlciBpcyBzY3J1YmJpbmdcbiAgICAgKi9cblxuXG4gICAgX3RoaXMuc2NydWJiaW5nXyA9IGZhbHNlO1xuICAgIF90aGlzLmVsXyA9IF90aGlzLmNyZWF0ZUVsKCk7IC8vIE1ha2UgdGhpcyBhbiBldmVudGVkIG9iamVjdCBhbmQgdXNlIGBlbF9gIGFzIGl0cyBldmVudCBidXMuXG5cbiAgICBldmVudGVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB7XG4gICAgICBldmVudEJ1c0tleTogJ2VsXydcbiAgICB9KTsgLy8gbGlzdGVuIHRvIGRvY3VtZW50IGFuZCBwbGF5ZXIgZnVsbHNjcmVlbmNoYW5nZSBoYW5kbGVycyBzbyB3ZSByZWNlaXZlIHRob3NlIGV2ZW50c1xuICAgIC8vIGJlZm9yZSBhIHVzZXIgY2FuIHJlY2VpdmUgdGhlbSBzbyB3ZSBjYW4gdXBkYXRlIGlzRnVsbHNjcmVlbiBhcHByb3ByaWF0ZWx5LlxuICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHdlIGxpc3RlbiB0byBmdWxsc2NyZWVuY2hhbmdlIGV2ZW50cyBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIHRvIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gb3VyIGlzRnVsbHNjcmVlbiBtZXRob2QgaXMgdXBkYXRlZCBwcm9wZXJseSBmb3IgaW50ZXJuYWwgY29tcG9uZW50cyBhcyB3ZWxsIGFzIGV4dGVybmFsLlxuXG4gICAgaWYgKF90aGlzLmZzQXBpXy5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgb24oZG9jdW1lbnQsIF90aGlzLmZzQXBpXy5mdWxsc2NyZWVuY2hhbmdlLCBfdGhpcy5ib3VuZERvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV8pO1xuXG4gICAgICBfdGhpcy5vbihfdGhpcy5mc0FwaV8uZnVsbHNjcmVlbmNoYW5nZSwgX3RoaXMuYm91bmREb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2VfKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuZmx1aWRfKSB7XG4gICAgICBfdGhpcy5vbigncGxheWVycmVzZXQnLCBfdGhpcy51cGRhdGVTdHlsZUVsXyk7XG4gICAgfSAvLyBXZSBhbHNvIHdhbnQgdG8gcGFzcyB0aGUgb3JpZ2luYWwgcGxheWVyIG9wdGlvbnMgdG8gZWFjaCBjb21wb25lbnQgYW5kIHBsdWdpblxuICAgIC8vIGFzIHdlbGwgc28gdGhleSBkb24ndCBuZWVkIHRvIHJlYWNoIGJhY2sgaW50byB0aGUgcGxheWVyIGZvciBvcHRpb25zIGxhdGVyLlxuICAgIC8vIFdlIGFsc28gbmVlZCB0byBkbyBhbm90aGVyIGNvcHkgb2YgdGhpcy5vcHRpb25zXyBzbyB3ZSBkb24ndCBlbmQgdXAgd2l0aFxuICAgIC8vIGFuIGluZmluaXRlIGxvb3AuXG5cblxuICAgIHZhciBwbGF5ZXJPcHRpb25zQ29weSA9IG1lcmdlT3B0aW9ucyhfdGhpcy5vcHRpb25zXyk7IC8vIExvYWQgcGx1Z2luc1xuXG4gICAgaWYgKG9wdGlvbnMucGx1Z2lucykge1xuICAgICAgT2JqZWN0LmtleXMob3B0aW9ucy5wbHVnaW5zKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIF90aGlzW25hbWVdKG9wdGlvbnMucGx1Z2luc1tuYW1lXSk7XG4gICAgICB9KTtcbiAgICB9IC8vIEVuYWJsZSBkZWJ1ZyBtb2RlIHRvIGZpcmUgZGVidWdvbiBldmVudCBmb3IgYWxsIHBsdWdpbnMuXG5cblxuICAgIGlmIChvcHRpb25zLmRlYnVnKSB7XG4gICAgICBfdGhpcy5kZWJ1Zyh0cnVlKTtcbiAgICB9XG5cbiAgICBfdGhpcy5vcHRpb25zXy5wbGF5ZXJPcHRpb25zID0gcGxheWVyT3B0aW9uc0NvcHk7XG4gICAgX3RoaXMubWlkZGxld2FyZV8gPSBbXTtcblxuICAgIF90aGlzLmluaXRDaGlsZHJlbigpOyAvLyBTZXQgaXNBdWRpbyBiYXNlZCBvbiB3aGV0aGVyIG9yIG5vdCBhbiBhdWRpbyB0YWcgd2FzIHVzZWRcblxuXG4gICAgX3RoaXMuaXNBdWRpbyh0YWcubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2F1ZGlvJyk7IC8vIFVwZGF0ZSBjb250cm9scyBjbGFzc05hbWUuIENhbid0IGRvIHRoaXMgd2hlbiB0aGUgY29udHJvbHMgYXJlIGluaXRpYWxseVxuICAgIC8vIHNldCBiZWNhdXNlIHRoZSBlbGVtZW50IGRvZXNuJ3QgZXhpc3QgeWV0LlxuXG5cbiAgICBpZiAoX3RoaXMuY29udHJvbHMoKSkge1xuICAgICAgX3RoaXMuYWRkQ2xhc3MoJ3Zqcy1jb250cm9scy1lbmFibGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmFkZENsYXNzKCd2anMtY29udHJvbHMtZGlzYWJsZWQnKTtcbiAgICB9IC8vIFNldCBBUklBIGxhYmVsIGFuZCByZWdpb24gcm9sZSBkZXBlbmRpbmcgb24gcGxheWVyIHR5cGVcblxuXG4gICAgX3RoaXMuZWxfLnNldEF0dHJpYnV0ZSgncm9sZScsICdyZWdpb24nKTtcblxuICAgIGlmIChfdGhpcy5pc0F1ZGlvKCkpIHtcbiAgICAgIF90aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBfdGhpcy5sb2NhbGl6ZSgnQXVkaW8gUGxheWVyJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgX3RoaXMubG9jYWxpemUoJ1ZpZGVvIFBsYXllcicpKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMuaXNBdWRpbygpKSB7XG4gICAgICBfdGhpcy5hZGRDbGFzcygndmpzLWF1ZGlvJyk7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLmZsZXhOb3RTdXBwb3J0ZWRfKCkpIHtcbiAgICAgIF90aGlzLmFkZENsYXNzKCd2anMtbm8tZmxleCcpO1xuICAgIH0gLy8gVE9ETzogTWFrZSB0aGlzIHNtYXJ0ZXIuIFRvZ2dsZSB1c2VyIHN0YXRlIGJldHdlZW4gdG91Y2hpbmcvbW91c2luZ1xuICAgIC8vIHVzaW5nIGV2ZW50cywgc2luY2UgZGV2aWNlcyBjYW4gaGF2ZSBib3RoIHRvdWNoIGFuZCBtb3VzZSBldmVudHMuXG4gICAgLy8gVE9ETzogTWFrZSB0aGlzIGNoZWNrIGJlIHBlcmZvcm1lZCBhZ2FpbiB3aGVuIHRoZSB3aW5kb3cgc3dpdGNoZXMgYmV0d2VlbiBtb25pdG9yc1xuICAgIC8vIChTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvdmlkZW8uanMvaXNzdWVzLzU2ODMpXG5cblxuICAgIGlmIChUT1VDSF9FTkFCTEVEKSB7XG4gICAgICBfdGhpcy5hZGRDbGFzcygndmpzLXRvdWNoLWVuYWJsZWQnKTtcbiAgICB9IC8vIGlPUyBTYWZhcmkgaGFzIGJyb2tlbiBob3ZlciBoYW5kbGluZ1xuXG5cbiAgICBpZiAoIUlTX0lPUykge1xuICAgICAgX3RoaXMuYWRkQ2xhc3MoJ3Zqcy13b3JraW5naG92ZXInKTtcbiAgICB9IC8vIE1ha2UgcGxheWVyIGVhc2lseSBmaW5kYWJsZSBieSBJRFxuXG5cbiAgICBQbGF5ZXIucGxheWVyc1tfdGhpcy5pZF9dID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyk7IC8vIEFkZCBhIG1ham9yIHZlcnNpb24gY2xhc3MgdG8gYWlkIGNzcyBpbiBwbHVnaW5zXG5cbiAgICB2YXIgbWFqb3JWZXJzaW9uID0gdmVyc2lvbi5zcGxpdCgnLicpWzBdO1xuXG4gICAgX3RoaXMuYWRkQ2xhc3MoXCJ2anMtdlwiICsgbWFqb3JWZXJzaW9uKTsgLy8gV2hlbiB0aGUgcGxheWVyIGlzIGZpcnN0IGluaXRpYWxpemVkLCB0cmlnZ2VyIGFjdGl2aXR5IHNvIGNvbXBvbmVudHNcbiAgICAvLyBsaWtlIHRoZSBjb250cm9sIGJhciBzaG93IHRoZW1zZWx2ZXMgaWYgbmVlZGVkXG5cblxuICAgIF90aGlzLnVzZXJBY3RpdmUodHJ1ZSk7XG5cbiAgICBfdGhpcy5yZXBvcnRVc2VyQWN0aXZpdHkoKTtcblxuICAgIF90aGlzLm9uZSgncGxheScsIF90aGlzLmxpc3RlbkZvclVzZXJBY3Rpdml0eV8pO1xuXG4gICAgX3RoaXMub24oJ3N0YWdlY2xpY2snLCBfdGhpcy5oYW5kbGVTdGFnZUNsaWNrXyk7XG5cbiAgICBfdGhpcy5vbigna2V5ZG93bicsIF90aGlzLmhhbmRsZUtleURvd24pO1xuXG4gICAgX3RoaXMuYnJlYWtwb2ludHMoX3RoaXMub3B0aW9uc18uYnJlYWtwb2ludHMpO1xuXG4gICAgX3RoaXMucmVzcG9uc2l2ZShfdGhpcy5vcHRpb25zXy5yZXNwb25zaXZlKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIHZpZGVvIHBsYXllciBhbmQgZG9lcyBhbnkgbmVjZXNzYXJ5IGNsZWFudXAuXG4gICAqXG4gICAqIFRoaXMgaXMgZXNwZWNpYWxseSBoZWxwZnVsIGlmIHlvdSBhcmUgZHluYW1pY2FsbHkgYWRkaW5nIGFuZCByZW1vdmluZyB2aWRlb3NcbiAgICogdG8vZnJvbSB0aGUgRE9NLlxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI2Rpc3Bvc2VcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUGxheWVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgcGxheWVyIGlzIGJlaW5nIGRpc3Bvc2VkIG9mLlxuICAgICAqXG4gICAgICogQGV2ZW50IFBsYXllciNkaXNwb3NlXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuICAgIHRoaXMudHJpZ2dlcignZGlzcG9zZScpOyAvLyBwcmV2ZW50IGRpc3Bvc2UgZnJvbSBiZWluZyBjYWxsZWQgdHdpY2VcblxuICAgIHRoaXMub2ZmKCdkaXNwb3NlJyk7IC8vIE1ha2Ugc3VyZSBhbGwgcGxheWVyLXNwZWNpZmljIGRvY3VtZW50IGxpc3RlbmVycyBhcmUgdW5ib3VuZC4gVGhpcyBpc1xuXG4gICAgb2ZmKGRvY3VtZW50LCB0aGlzLmZzQXBpXy5mdWxsc2NyZWVuY2hhbmdlLCB0aGlzLmJvdW5kRG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlXyk7XG4gICAgb2ZmKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuYm91bmRGdWxsV2luZG93T25Fc2NLZXlfKTtcblxuICAgIGlmICh0aGlzLnN0eWxlRWxfICYmIHRoaXMuc3R5bGVFbF8ucGFyZW50Tm9kZSkge1xuICAgICAgdGhpcy5zdHlsZUVsXy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc3R5bGVFbF8pO1xuICAgICAgdGhpcy5zdHlsZUVsXyA9IG51bGw7XG4gICAgfSAvLyBLaWxsIHJlZmVyZW5jZSB0byB0aGlzIHBsYXllclxuXG5cbiAgICBQbGF5ZXIucGxheWVyc1t0aGlzLmlkX10gPSBudWxsO1xuXG4gICAgaWYgKHRoaXMudGFnICYmIHRoaXMudGFnLnBsYXllcikge1xuICAgICAgdGhpcy50YWcucGxheWVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbF8gJiYgdGhpcy5lbF8ucGxheWVyKSB7XG4gICAgICB0aGlzLmVsXy5wbGF5ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRlY2hfKSB7XG4gICAgICB0aGlzLnRlY2hfLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuaXNQb3N0ZXJGcm9tVGVjaF8gPSBmYWxzZTtcbiAgICAgIHRoaXMucG9zdGVyXyA9ICcnO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBsYXllckVsSW5nZXN0Xykge1xuICAgICAgdGhpcy5wbGF5ZXJFbEluZ2VzdF8gPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRhZykge1xuICAgICAgdGhpcy50YWcgPSBudWxsO1xuICAgIH1cblxuICAgIGNsZWFyQ2FjaGVGb3JQbGF5ZXIodGhpcyk7IC8vIHJlbW92ZSBhbGwgZXZlbnQgaGFuZGxlcnMgZm9yIHRyYWNrIGxpc3RzXG4gICAgLy8gYWxsIHRyYWNrcyBhbmQgdHJhY2sgbGlzdGVuZXJzIGFyZSByZW1vdmVkIG9uXG4gICAgLy8gdGVjaCBkaXNwb3NlXG5cbiAgICBBTEwubmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHByb3BzID0gQUxMW25hbWVdO1xuXG4gICAgICB2YXIgbGlzdCA9IF90aGlzMltwcm9wcy5nZXR0ZXJOYW1lXSgpOyAvLyBpZiBpdCBpcyBub3QgYSBuYXRpdmUgbGlzdFxuICAgICAgLy8gd2UgaGF2ZSB0byBtYW51YWxseSByZW1vdmUgZXZlbnQgbGlzdGVuZXJzXG5cblxuICAgICAgaWYgKGxpc3QgJiYgbGlzdC5vZmYpIHtcbiAgICAgICAgbGlzdC5vZmYoKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gdGhlIGFjdHVhbCAuZWxfIGlzIHJlbW92ZWQgaGVyZVxuXG4gICAgX0NvbXBvbmVudC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGBQbGF5ZXJgJ3MgRE9NIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqICAgICAgICAgVGhlIERPTSBlbGVtZW50IHRoYXQgZ2V0cyBjcmVhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVFbCA9IGZ1bmN0aW9uIGNyZWF0ZUVsKCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZztcbiAgICB2YXIgZWw7XG4gICAgdmFyIHBsYXllckVsSW5nZXN0ID0gdGhpcy5wbGF5ZXJFbEluZ2VzdF8gPSB0YWcucGFyZW50Tm9kZSAmJiB0YWcucGFyZW50Tm9kZS5oYXNBdHRyaWJ1dGUgJiYgdGFnLnBhcmVudE5vZGUuaGFzQXR0cmlidXRlKCdkYXRhLXZqcy1wbGF5ZXInKTtcbiAgICB2YXIgZGl2RW1iZWQgPSB0aGlzLnRhZy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd2aWRlby1qcyc7XG5cbiAgICBpZiAocGxheWVyRWxJbmdlc3QpIHtcbiAgICAgIGVsID0gdGhpcy5lbF8gPSB0YWcucGFyZW50Tm9kZTtcbiAgICB9IGVsc2UgaWYgKCFkaXZFbWJlZCkge1xuICAgICAgZWwgPSB0aGlzLmVsXyA9IF9Db21wb25lbnQucHJvdG90eXBlLmNyZWF0ZUVsLmNhbGwodGhpcywgJ2RpdicpO1xuICAgIH0gLy8gQ29weSBvdmVyIGFsbCB0aGUgYXR0cmlidXRlcyBmcm9tIHRoZSB0YWcsIGluY2x1ZGluZyBJRCBhbmQgY2xhc3NcbiAgICAvLyBJRCB3aWxsIG5vdyByZWZlcmVuY2UgcGxheWVyIGJveCwgbm90IHRoZSB2aWRlbyB0YWdcblxuXG4gICAgdmFyIGF0dHJzID0gZ2V0QXR0cmlidXRlcyh0YWcpO1xuXG4gICAgaWYgKGRpdkVtYmVkKSB7XG4gICAgICBlbCA9IHRoaXMuZWxfID0gdGFnO1xuICAgICAgdGFnID0gdGhpcy50YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuXG4gICAgICB3aGlsZSAoZWwuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHRhZy5hcHBlbmRDaGlsZChlbC5maXJzdENoaWxkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXNDbGFzcyhlbCwgJ3ZpZGVvLWpzJykpIHtcbiAgICAgICAgYWRkQ2xhc3MoZWwsICd2aWRlby1qcycpO1xuICAgICAgfVxuXG4gICAgICBlbC5hcHBlbmRDaGlsZCh0YWcpO1xuICAgICAgcGxheWVyRWxJbmdlc3QgPSB0aGlzLnBsYXllckVsSW5nZXN0XyA9IGVsOyAvLyBtb3ZlIHByb3BlcnRpZXMgb3ZlciBmcm9tIG91ciBjdXN0b20gYHZpZGVvLWpzYCBlbGVtZW50XG4gICAgICAvLyB0byBvdXIgbmV3IGB2aWRlb2AgZWxlbWVudC4gVGhpcyB3aWxsIG1vdmUgdGhpbmdzIGxpa2VcbiAgICAgIC8vIGBzcmNgIG9yIGBjb250cm9sc2AgdGhhdCB3ZXJlIHNldCB2aWEganMgYmVmb3JlIHRoZSBwbGF5ZXJcbiAgICAgIC8vIHdhcyBpbml0aWFsaXplZC5cblxuICAgICAgT2JqZWN0LmtleXMoZWwpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0YWdba10gPSBlbFtrXTtcbiAgICAgICAgfSBjYXRjaCAoZSkgey8vIHdlIGdvdCBhIGEgcHJvcGVydHkgbGlrZSBvdXRlckhUTUwgd2hpY2ggd2UgY2FuJ3QgYWN0dWFsbHkgY29weSwgaWdub3JlIGl0XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gLy8gc2V0IHRhYmluZGV4IHRvIC0xIHRvIHJlbW92ZSB0aGUgdmlkZW8gZWxlbWVudCBmcm9tIHRoZSBmb2N1cyBvcmRlclxuXG5cbiAgICB0YWcuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgIGF0dHJzLnRhYmluZGV4ID0gJy0xJzsgLy8gV29ya2Fyb3VuZCBmb3IgIzQ1ODMgKEpBV1MrSUUgZG9lc24ndCBhbm5vdW5jZSBCUEIgb3IgcGxheSBidXR0b24pLCBhbmRcbiAgICAvLyBmb3IgdGhlIHNhbWUgaXNzdWUgd2l0aCBDaHJvbWUgKG9uIFdpbmRvd3MpIHdpdGggSkFXUy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0ZyZWVkb21TY2llbnRpZmljL1ZGTy1zdGFuZGFyZHMtc3VwcG9ydC9pc3N1ZXMvNzhcbiAgICAvLyBOb3RlIHRoYXQgd2UgY2FuJ3QgZGV0ZWN0IGlmIEpBV1MgaXMgYmVpbmcgdXNlZCwgYnV0IHRoaXMgQVJJQSBhdHRyaWJ1dGVcbiAgICAvLyAgZG9lc24ndCBjaGFuZ2UgYmVoYXZpb3Igb2YgSUUxMSBvciBDaHJvbWUgaWYgSkFXUyBpcyBub3QgYmVpbmcgdXNlZFxuXG4gICAgaWYgKElFX1ZFUlNJT04gfHwgSVNfQ0hST01FICYmIElTX1dJTkRPV1MpIHtcbiAgICAgIHRhZy5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYXBwbGljYXRpb24nKTtcbiAgICAgIGF0dHJzLnJvbGUgPSAnYXBwbGljYXRpb24nO1xuICAgIH0gLy8gUmVtb3ZlIHdpZHRoL2hlaWdodCBhdHRycyBmcm9tIHRhZyBzbyBDU1MgY2FuIG1ha2UgaXQgMTAwJSB3aWR0aC9oZWlnaHRcblxuXG4gICAgdGFnLnJlbW92ZUF0dHJpYnV0ZSgnd2lkdGgnKTtcbiAgICB0YWcucmVtb3ZlQXR0cmlidXRlKCdoZWlnaHQnKTtcblxuICAgIGlmICgnd2lkdGgnIGluIGF0dHJzKSB7XG4gICAgICBkZWxldGUgYXR0cnMud2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKCdoZWlnaHQnIGluIGF0dHJzKSB7XG4gICAgICBkZWxldGUgYXR0cnMuaGVpZ2h0O1xuICAgIH1cblxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAvLyBkb24ndCBjb3B5IG92ZXIgdGhlIGNsYXNzIGF0dHJpYnV0ZSB0byB0aGUgcGxheWVyIGVsZW1lbnQgd2hlbiB3ZSdyZSBpbiBhIGRpdiBlbWJlZFxuICAgICAgLy8gdGhlIGNsYXNzIGlzIGFscmVhZHkgc2V0IHVwIHByb3Blcmx5IGluIHRoZSBkaXZFbWJlZCBjYXNlXG4gICAgICAvLyBhbmQgd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYHZpZGVvLWpzYCBjbGFzcyBkb2Vzbid0IGdldCBsb3N0XG4gICAgICBpZiAoIShkaXZFbWJlZCAmJiBhdHRyID09PSAnY2xhc3MnKSkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGl2RW1iZWQpIHtcbiAgICAgICAgdGFnLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSk7XG4gICAgICB9XG4gICAgfSk7IC8vIFVwZGF0ZSB0YWcgaWQvY2xhc3MgZm9yIHVzZSBhcyBIVE1MNSBwbGF5YmFjayB0ZWNoXG4gICAgLy8gTWlnaHQgdGhpbmsgd2Ugc2hvdWxkIGRvIHRoaXMgYWZ0ZXIgZW1iZWRkaW5nIGluIGNvbnRhaW5lciBzbyAudmpzLXRlY2ggY2xhc3NcbiAgICAvLyBkb2Vzbid0IGZsYXNoIDEwMCUgd2lkdGgvaGVpZ2h0LCBidXQgY2xhc3Mgb25seSBhcHBsaWVzIHdpdGggLnZpZGVvLWpzIHBhcmVudFxuXG4gICAgdGFnLnBsYXllcklkID0gdGFnLmlkO1xuICAgIHRhZy5pZCArPSAnX2h0bWw1X2FwaSc7XG4gICAgdGFnLmNsYXNzTmFtZSA9ICd2anMtdGVjaCc7IC8vIE1ha2UgcGxheWVyIGZpbmRhYmxlIG9uIGVsZW1lbnRzXG5cbiAgICB0YWcucGxheWVyID0gZWwucGxheWVyID0gdGhpczsgLy8gRGVmYXVsdCBzdGF0ZSBvZiB2aWRlbyBpcyBwYXVzZWRcblxuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wYXVzZWQnKTsgLy8gQWRkIGEgc3R5bGUgZWxlbWVudCBpbiB0aGUgcGxheWVyIHRoYXQgd2UnbGwgdXNlIHRvIHNldCB0aGUgd2lkdGgvaGVpZ2h0XG4gICAgLy8gb2YgdGhlIHBsYXllciBpbiBhIHdheSB0aGF0J3Mgc3RpbGwgb3ZlcnJpZGVhYmxlIGJ5IENTUywganVzdCBsaWtlIHRoZVxuICAgIC8vIHZpZGVvIGVsZW1lbnRcblxuICAgIGlmICh3aW5kb3ckMS5WSURFT0pTX05PX0RZTkFNSUNfU1RZTEUgIT09IHRydWUpIHtcbiAgICAgIHRoaXMuc3R5bGVFbF8gPSBjcmVhdGVTdHlsZUVsZW1lbnQoJ3Zqcy1zdHlsZXMtZGltZW5zaW9ucycpO1xuICAgICAgdmFyIGRlZmF1bHRzU3R5bGVFbCA9ICQoJy52anMtc3R5bGVzLWRlZmF1bHRzJyk7XG4gICAgICB2YXIgaGVhZCA9ICQoJ2hlYWQnKTtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHRoaXMuc3R5bGVFbF8sIGRlZmF1bHRzU3R5bGVFbCA/IGRlZmF1bHRzU3R5bGVFbC5uZXh0U2libGluZyA6IGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgdGhpcy5maWxsXyA9IGZhbHNlO1xuICAgIHRoaXMuZmx1aWRfID0gZmFsc2U7IC8vIFBhc3MgaW4gdGhlIHdpZHRoL2hlaWdodC9hc3BlY3RSYXRpbyBvcHRpb25zIHdoaWNoIHdpbGwgdXBkYXRlIHRoZSBzdHlsZSBlbFxuXG4gICAgdGhpcy53aWR0aCh0aGlzLm9wdGlvbnNfLndpZHRoKTtcbiAgICB0aGlzLmhlaWdodCh0aGlzLm9wdGlvbnNfLmhlaWdodCk7XG4gICAgdGhpcy5maWxsKHRoaXMub3B0aW9uc18uZmlsbCk7XG4gICAgdGhpcy5mbHVpZCh0aGlzLm9wdGlvbnNfLmZsdWlkKTtcbiAgICB0aGlzLmFzcGVjdFJhdGlvKHRoaXMub3B0aW9uc18uYXNwZWN0UmF0aW8pOyAvLyBzdXBwb3J0IGJvdGggY3Jvc3NPcmlnaW4gYW5kIGNyb3Nzb3JpZ2luIHRvIHJlZHVjZSBjb25mdXNpb24gYW5kIGlzc3VlcyBhcm91bmQgdGhlIG5hbWVcblxuICAgIHRoaXMuY3Jvc3NPcmlnaW4odGhpcy5vcHRpb25zXy5jcm9zc09yaWdpbiB8fCB0aGlzLm9wdGlvbnNfLmNyb3Nzb3JpZ2luKTsgLy8gSGlkZSBhbnkgbGlua3Mgd2l0aGluIHRoZSB2aWRlby9hdWRpbyB0YWcsXG4gICAgLy8gYmVjYXVzZSBJRSBkb2Vzbid0IGhpZGUgdGhlbSBjb21wbGV0ZWx5IGZyb20gc2NyZWVuIHJlYWRlcnMuXG5cbiAgICB2YXIgbGlua3MgPSB0YWcuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaW5rRWwgPSBsaW5rcy5pdGVtKGkpO1xuICAgICAgYWRkQ2xhc3MobGlua0VsLCAndmpzLWhpZGRlbicpO1xuICAgICAgbGlua0VsLnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJ2hpZGRlbicpO1xuICAgIH0gLy8gaW5zZXJ0RWxGaXJzdCBzZWVtcyB0byBjYXVzZSB0aGUgbmV0d29ya1N0YXRlIHRvIGZsaWNrZXIgZnJvbSAzIHRvIDIsIHNvXG4gICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgb3JpZ2luYWwgZm9yIGxhdGVyIHNvIHdlIGNhbiBrbm93IGlmIHRoZSBzb3VyY2Ugb3JpZ2luYWxseSBmYWlsZWRcblxuXG4gICAgdGFnLmluaXROZXR3b3JrU3RhdGVfID0gdGFnLm5ldHdvcmtTdGF0ZTsgLy8gV3JhcCB2aWRlbyB0YWcgaW4gZGl2IChlbC9ib3gpIGNvbnRhaW5lclxuXG4gICAgaWYgKHRhZy5wYXJlbnROb2RlICYmICFwbGF5ZXJFbEluZ2VzdCkge1xuICAgICAgdGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCB0YWcpO1xuICAgIH0gLy8gaW5zZXJ0IHRoZSB0YWcgYXMgdGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBwbGF5ZXIgZWxlbWVudFxuICAgIC8vIHRoZW4gbWFudWFsbHkgYWRkIGl0IHRvIHRoZSBjaGlsZHJlbiBhcnJheSBzbyB0aGF0IHRoaXMuYWRkQ2hpbGRcbiAgICAvLyB3aWxsIHdvcmsgcHJvcGVybHkgZm9yIG90aGVyIGNvbXBvbmVudHNcbiAgICAvL1xuICAgIC8vIEJyZWFrcyBpUGhvbmUsIGZpeGVkIGluIEhUTUw1IHNldHVwLlxuXG5cbiAgICBwcmVwZW5kVG8odGFnLCBlbCk7XG4gICAgdGhpcy5jaGlsZHJlbl8udW5zaGlmdCh0YWcpOyAvLyBTZXQgbGFuZyBhdHRyIG9uIHBsYXllciB0byBlbnN1cmUgQ1NTIDpsYW5nKCkgaW4gY29uc2lzdGVudCB3aXRoIHBsYXllclxuICAgIC8vIGlmIGl0J3MgYmVlbiBzZXQgdG8gc29tZXRoaW5nIGRpZmZlcmVudCB0byB0aGUgZG9jXG5cbiAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2xhbmcnLCB0aGlzLmxhbmd1YWdlXyk7XG4gICAgdGhpcy5lbF8gPSBlbDtcbiAgICByZXR1cm4gZWw7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGBQbGF5ZXJgJ3MgY3Jvc3NPcmlnaW4gb3B0aW9uLiBGb3IgdGhlIEhUTUw1IHBsYXllciwgdGhpc1xuICAgKiBzZXRzIHRoZSBgY3Jvc3NPcmlnaW5gIHByb3BlcnR5IG9uIHRoZSBgPHZpZGVvPmAgdGFnIHRvIGNvbnRyb2wgdGhlIENPUlNcbiAgICogYmVoYXZpb3IuXG4gICAqXG4gICAqIEBzZWUgW1ZpZGVvIEVsZW1lbnQgQXR0cmlidXRlc117QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3ZpZGVvI2F0dHItY3Jvc3NvcmlnaW59XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdmFsdWVdXG4gICAqICAgICAgICBUaGUgdmFsdWUgdG8gc2V0IHRoZSBgUGxheWVyYCdzIGNyb3NzT3JpZ2luIHRvLiBJZiBhbiBhcmd1bWVudCBpc1xuICAgKiAgICAgICAgZ2l2ZW4sIG11c3QgYmUgb25lIG9mIGBhbm9ueW1vdXNgIG9yIGB1c2UtY3JlZGVudGlhbHNgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgKiAgICAgICAgIC0gVGhlIGN1cnJlbnQgY3Jvc3NPcmlnaW4gdmFsdWUgb2YgdGhlIGBQbGF5ZXJgIHdoZW4gZ2V0dGluZy5cbiAgICogICAgICAgICAtIHVuZGVmaW5lZCB3aGVuIHNldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3Jvc3NPcmlnaW4gPSBmdW5jdGlvbiBjcm9zc09yaWdpbih2YWx1ZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRlY2hHZXRfKCdjcm9zc09yaWdpbicpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSAhPT0gJ2Fub255bW91cycgJiYgdmFsdWUgIT09ICd1c2UtY3JlZGVudGlhbHMnKSB7XG4gICAgICBsb2cud2FybihcImNyb3NzT3JpZ2luIG11c3QgYmUgXFxcImFub255bW91c1xcXCIgb3IgXFxcInVzZS1jcmVkZW50aWFsc1xcXCIsIGdpdmVuIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudGVjaENhbGxfKCdzZXRDcm9zc09yaWdpbicsIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIEEgZ2V0dGVyL3NldHRlciBmb3IgdGhlIGBQbGF5ZXJgJ3Mgd2lkdGguIFJldHVybnMgdGhlIHBsYXllcidzIGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqIFRvIGdldCB0aGUgY3VycmVudCB3aWR0aCB1c2UgYGN1cnJlbnRXaWR0aCgpYC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt2YWx1ZV1cbiAgICogICAgICAgIFRoZSB2YWx1ZSB0byBzZXQgdGhlIGBQbGF5ZXJgJ3Mgd2lkdGggdG8uXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgY3VycmVudCB3aWR0aCBvZiB0aGUgYFBsYXllcmAgd2hlbiBnZXR0aW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by53aWR0aCA9IGZ1bmN0aW9uIHdpZHRoKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZGltZW5zaW9uKCd3aWR0aCcsIHZhbHVlKTtcbiAgfVxuICAvKipcbiAgICogQSBnZXR0ZXIvc2V0dGVyIGZvciB0aGUgYFBsYXllcmAncyBoZWlnaHQuIFJldHVybnMgdGhlIHBsYXllcidzIGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqIFRvIGdldCB0aGUgY3VycmVudCBoZWlnaHQgdXNlIGBjdXJyZW50aGVpZ2h0KClgLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3ZhbHVlXVxuICAgKiAgICAgICAgVGhlIHZhbHVlIHRvIHNldCB0aGUgYFBsYXllcmAncyBoZWlndGggdG8uXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgY3VycmVudCBoZWlnaHQgb2YgdGhlIGBQbGF5ZXJgIHdoZW4gZ2V0dGluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGVpZ2h0ID0gZnVuY3Rpb24gaGVpZ2h0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZGltZW5zaW9uKCdoZWlnaHQnLCB2YWx1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEEgZ2V0dGVyL3NldHRlciBmb3IgdGhlIGBQbGF5ZXJgJ3Mgd2lkdGggJiBoZWlnaHQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaW1lbnNpb25cbiAgICogICAgICAgIFRoaXMgc3RyaW5nIGNhbiBiZTpcbiAgICogICAgICAgIC0gJ3dpZHRoJ1xuICAgKiAgICAgICAgLSAnaGVpZ2h0J1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3ZhbHVlXVxuICAgKiAgICAgICAgVmFsdWUgZm9yIGRpbWVuc2lvbiBzcGVjaWZpZWQgaW4gdGhlIGZpcnN0IGFyZ3VtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIGRpbWVuc2lvbiBhcmd1bWVudHMgdmFsdWUgd2hlbiBnZXR0aW5nICh3aWR0aC9oZWlnaHQpLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaW1lbnNpb24gPSBmdW5jdGlvbiBkaW1lbnNpb24oX2RpbWVuc2lvbiwgdmFsdWUpIHtcbiAgICB2YXIgcHJpdkRpbWVuc2lvbiA9IF9kaW1lbnNpb24gKyAnXyc7XG5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXNbcHJpdkRpbWVuc2lvbl0gfHwgMDtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSAnYXV0bycpIHtcbiAgICAgIC8vIElmIGFuIGVtcHR5IHN0cmluZyBpcyBnaXZlbiwgcmVzZXQgdGhlIGRpbWVuc2lvbiB0byBiZSBhdXRvbWF0aWNcbiAgICAgIHRoaXNbcHJpdkRpbWVuc2lvbl0gPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnVwZGF0ZVN0eWxlRWxfKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFZhbCA9IHBhcnNlRmxvYXQodmFsdWUpO1xuXG4gICAgaWYgKGlzTmFOKHBhcnNlZFZhbCkpIHtcbiAgICAgIGxvZy5lcnJvcihcIkltcHJvcGVyIHZhbHVlIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIHN1cHBsaWVkIGZvciBmb3IgXCIgKyBfZGltZW5zaW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzW3ByaXZEaW1lbnNpb25dID0gcGFyc2VkVmFsO1xuICAgIHRoaXMudXBkYXRlU3R5bGVFbF8oKTtcbiAgfVxuICAvKipcbiAgICogQSBnZXR0ZXIvc2V0dGVyL3RvZ2dsZXIgZm9yIHRoZSB2anMtZmx1aWQgYGNsYXNzTmFtZWAgb24gdGhlIGBQbGF5ZXJgLlxuICAgKlxuICAgKiBUdXJuaW5nIHRoaXMgb24gd2lsbCB0dXJuIG9mZiBmaWxsIG1vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Jvb2xdXG4gICAqICAgICAgICAtIEEgdmFsdWUgb2YgdHJ1ZSBhZGRzIHRoZSBjbGFzcy5cbiAgICogICAgICAgIC0gQSB2YWx1ZSBvZiBmYWxzZSByZW1vdmVzIHRoZSBjbGFzcy5cbiAgICogICAgICAgIC0gTm8gdmFsdWUgd2lsbCBiZSBhIGdldHRlci5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gICAqICAgICAgICAgLSBUaGUgdmFsdWUgb2YgZmx1aWQgd2hlbiBnZXR0aW5nLlxuICAgKiAgICAgICAgIC0gYHVuZGVmaW5lZGAgd2hlbiBzZXR0aW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mbHVpZCA9IGZ1bmN0aW9uIGZsdWlkKGJvb2wpIHtcbiAgICBpZiAoYm9vbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmZsdWlkXztcbiAgICB9XG5cbiAgICB0aGlzLmZsdWlkXyA9ICEhYm9vbDtcblxuICAgIGlmIChpc0V2ZW50ZWQodGhpcykpIHtcbiAgICAgIHRoaXMub2ZmKCdwbGF5ZXJyZXNldCcsIHRoaXMudXBkYXRlU3R5bGVFbF8pO1xuICAgIH1cblxuICAgIGlmIChib29sKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtZmx1aWQnKTtcbiAgICAgIHRoaXMuZmlsbChmYWxzZSk7XG4gICAgICBhZGRFdmVudGVkQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9uKCdwbGF5ZXJyZXNldCcsIHRoaXMudXBkYXRlU3R5bGVFbF8pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1mbHVpZCcpO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3R5bGVFbF8oKTtcbiAgfVxuICAvKipcbiAgICogQSBnZXR0ZXIvc2V0dGVyL3RvZ2dsZXIgZm9yIHRoZSB2anMtZmlsbCBgY2xhc3NOYW1lYCBvbiB0aGUgYFBsYXllcmAuXG4gICAqXG4gICAqIFR1cm5pbmcgdGhpcyBvbiB3aWxsIHR1cm4gb2ZmIGZsdWlkIG1vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Jvb2xdXG4gICAqICAgICAgICAtIEEgdmFsdWUgb2YgdHJ1ZSBhZGRzIHRoZSBjbGFzcy5cbiAgICogICAgICAgIC0gQSB2YWx1ZSBvZiBmYWxzZSByZW1vdmVzIHRoZSBjbGFzcy5cbiAgICogICAgICAgIC0gTm8gdmFsdWUgd2lsbCBiZSBhIGdldHRlci5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gICAqICAgICAgICAgLSBUaGUgdmFsdWUgb2YgZmx1aWQgd2hlbiBnZXR0aW5nLlxuICAgKiAgICAgICAgIC0gYHVuZGVmaW5lZGAgd2hlbiBzZXR0aW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5maWxsID0gZnVuY3Rpb24gZmlsbChib29sKSB7XG4gICAgaWYgKGJvb2wgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5maWxsXztcbiAgICB9XG5cbiAgICB0aGlzLmZpbGxfID0gISFib29sO1xuXG4gICAgaWYgKGJvb2wpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1maWxsJyk7XG4gICAgICB0aGlzLmZsdWlkKGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWZpbGwnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldC9TZXQgdGhlIGFzcGVjdCByYXRpb1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3JhdGlvXVxuICAgKiAgICAgICAgQXNwZWN0IHJhdGlvIGZvciBwbGF5ZXJcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfHVuZGVmaW5lZH1cbiAgICogICAgICAgICByZXR1cm5zIHRoZSBjdXJyZW50IGFzcGVjdCByYXRpbyB3aGVuIGdldHRpbmdcbiAgICovXG5cbiAgLyoqXG4gICAqIEEgZ2V0dGVyL3NldHRlciBmb3IgdGhlIGBQbGF5ZXJgJ3MgYXNwZWN0IHJhdGlvLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3JhdGlvXVxuICAgKiAgICAgICAgVGhlIHZhbHVlIHRvIHNldCB0aGUgYFBsYXllcmAncyBhc3BlY3QgcmF0aW8gdG8uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ3x1bmRlZmluZWR9XG4gICAqICAgICAgICAgLSBUaGUgY3VycmVudCBhc3BlY3QgcmF0aW8gb2YgdGhlIGBQbGF5ZXJgIHdoZW4gZ2V0dGluZy5cbiAgICogICAgICAgICAtIHVuZGVmaW5lZCB3aGVuIHNldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYXNwZWN0UmF0aW8gPSBmdW5jdGlvbiBhc3BlY3RSYXRpbyhyYXRpbykge1xuICAgIGlmIChyYXRpbyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5hc3BlY3RSYXRpb187XG4gICAgfSAvLyBDaGVjayBmb3Igd2lkdGg6aGVpZ2h0IGZvcm1hdFxuXG5cbiAgICBpZiAoIS9eXFxkK1xcOlxcZCskLy50ZXN0KHJhdGlvKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbXByb3BlciB2YWx1ZSBzdXBwbGllZCBmb3IgYXNwZWN0IHJhdGlvLiBUaGUgZm9ybWF0IHNob3VsZCBiZSB3aWR0aDpoZWlnaHQsIGZvciBleGFtcGxlIDE2OjkuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5hc3BlY3RSYXRpb18gPSByYXRpbzsgLy8gV2UncmUgYXNzdW1pbmcgaWYgeW91IHNldCBhbiBhc3BlY3QgcmF0aW8geW91IHdhbnQgZmx1aWQgbW9kZSxcbiAgICAvLyBiZWNhdXNlIGluIGZpeGVkIG1vZGUgeW91IGNvdWxkIGNhbGN1bGF0ZSB3aWR0aCBhbmQgaGVpZ2h0IHlvdXJzZWxmLlxuXG4gICAgdGhpcy5mbHVpZCh0cnVlKTtcbiAgICB0aGlzLnVwZGF0ZVN0eWxlRWxfKCk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBzdHlsZXMgb2YgdGhlIGBQbGF5ZXJgIGVsZW1lbnQgKGhlaWdodCwgd2lkdGggYW5kIGFzcGVjdCByYXRpbykuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBsaXN0ZW5zIFRlY2gjbG9hZGVkbWV0YWRhdGFcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlU3R5bGVFbF8gPSBmdW5jdGlvbiB1cGRhdGVTdHlsZUVsXygpIHtcbiAgICBpZiAod2luZG93JDEuVklERU9KU19OT19EWU5BTUlDX1NUWUxFID09PSB0cnVlKSB7XG4gICAgICB2YXIgX3dpZHRoID0gdHlwZW9mIHRoaXMud2lkdGhfID09PSAnbnVtYmVyJyA/IHRoaXMud2lkdGhfIDogdGhpcy5vcHRpb25zXy53aWR0aDtcblxuICAgICAgdmFyIF9oZWlnaHQgPSB0eXBlb2YgdGhpcy5oZWlnaHRfID09PSAnbnVtYmVyJyA/IHRoaXMuaGVpZ2h0XyA6IHRoaXMub3B0aW9uc18uaGVpZ2h0O1xuXG4gICAgICB2YXIgdGVjaEVsID0gdGhpcy50ZWNoXyAmJiB0aGlzLnRlY2hfLmVsKCk7XG5cbiAgICAgIGlmICh0ZWNoRWwpIHtcbiAgICAgICAgaWYgKF93aWR0aCA+PSAwKSB7XG4gICAgICAgICAgdGVjaEVsLndpZHRoID0gX3dpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9oZWlnaHQgPj0gMCkge1xuICAgICAgICAgIHRlY2hFbC5oZWlnaHQgPSBfaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgd2lkdGg7XG4gICAgdmFyIGhlaWdodDtcbiAgICB2YXIgYXNwZWN0UmF0aW87XG4gICAgdmFyIGlkQ2xhc3M7IC8vIFRoZSBhc3BlY3QgcmF0aW8gaXMgZWl0aGVyIHVzZWQgZGlyZWN0bHkgb3IgdG8gY2FsY3VsYXRlIHdpZHRoIGFuZCBoZWlnaHQuXG5cbiAgICBpZiAodGhpcy5hc3BlY3RSYXRpb18gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmFzcGVjdFJhdGlvXyAhPT0gJ2F1dG8nKSB7XG4gICAgICAvLyBVc2UgYW55IGFzcGVjdFJhdGlvIHRoYXQncyBiZWVuIHNwZWNpZmljYWxseSBzZXRcbiAgICAgIGFzcGVjdFJhdGlvID0gdGhpcy5hc3BlY3RSYXRpb187XG4gICAgfSBlbHNlIGlmICh0aGlzLnZpZGVvV2lkdGgoKSA+IDApIHtcbiAgICAgIC8vIE90aGVyd2lzZSB0cnkgdG8gZ2V0IHRoZSBhc3BlY3QgcmF0aW8gZnJvbSB0aGUgdmlkZW8gbWV0YWRhdGFcbiAgICAgIGFzcGVjdFJhdGlvID0gdGhpcy52aWRlb1dpZHRoKCkgKyAnOicgKyB0aGlzLnZpZGVvSGVpZ2h0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9yIHVzZSBhIGRlZmF1bHQuIFRoZSB2aWRlbyBlbGVtZW50J3MgaXMgMjoxLCBidXQgMTY6OSBpcyBtb3JlIGNvbW1vbi5cbiAgICAgIGFzcGVjdFJhdGlvID0gJzE2OjknO1xuICAgIH0gLy8gR2V0IHRoZSByYXRpbyBhcyBhIGRlY2ltYWwgd2UgY2FuIHVzZSB0byBjYWxjdWxhdGUgZGltZW5zaW9uc1xuXG5cbiAgICB2YXIgcmF0aW9QYXJ0cyA9IGFzcGVjdFJhdGlvLnNwbGl0KCc6Jyk7XG4gICAgdmFyIHJhdGlvTXVsdGlwbGllciA9IHJhdGlvUGFydHNbMV0gLyByYXRpb1BhcnRzWzBdO1xuXG4gICAgaWYgKHRoaXMud2lkdGhfICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFVzZSBhbnkgd2lkdGggdGhhdCdzIGJlZW4gc3BlY2lmaWNhbGx5IHNldFxuICAgICAgd2lkdGggPSB0aGlzLndpZHRoXztcbiAgICB9IGVsc2UgaWYgKHRoaXMuaGVpZ2h0XyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBPciBjYWx1bGF0ZSB0aGUgd2lkdGggZnJvbSB0aGUgYXNwZWN0IHJhdGlvIGlmIGEgaGVpZ2h0IGhhcyBiZWVuIHNldFxuICAgICAgd2lkdGggPSB0aGlzLmhlaWdodF8gLyByYXRpb011bHRpcGxpZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9yIHVzZSB0aGUgdmlkZW8ncyBtZXRhZGF0YSwgb3IgdXNlIHRoZSB2aWRlbyBlbCdzIGRlZmF1bHQgb2YgMzAwXG4gICAgICB3aWR0aCA9IHRoaXMudmlkZW9XaWR0aCgpIHx8IDMwMDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oZWlnaHRfICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFVzZSBhbnkgaGVpZ2h0IHRoYXQncyBiZWVuIHNwZWNpZmljYWxseSBzZXRcbiAgICAgIGhlaWdodCA9IHRoaXMuaGVpZ2h0XztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIGNhbGN1bGF0ZSB0aGUgaGVpZ2h0IGZyb20gdGhlIHJhdGlvIGFuZCB0aGUgd2lkdGhcbiAgICAgIGhlaWdodCA9IHdpZHRoICogcmF0aW9NdWx0aXBsaWVyO1xuICAgIH0gLy8gRW5zdXJlIHRoZSBDU1MgY2xhc3MgaXMgdmFsaWQgYnkgc3RhcnRpbmcgd2l0aCBhbiBhbHBoYSBjaGFyYWN0ZXJcblxuXG4gICAgaWYgKC9eW15hLXpBLVpdLy50ZXN0KHRoaXMuaWQoKSkpIHtcbiAgICAgIGlkQ2xhc3MgPSAnZGltZW5zaW9ucy0nICsgdGhpcy5pZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZENsYXNzID0gdGhpcy5pZCgpICsgJy1kaW1lbnNpb25zJztcbiAgICB9IC8vIEVuc3VyZSB0aGUgcmlnaHQgY2xhc3MgaXMgc3RpbGwgb24gdGhlIHBsYXllciBmb3IgdGhlIHN0eWxlIGVsZW1lbnRcblxuXG4gICAgdGhpcy5hZGRDbGFzcyhpZENsYXNzKTtcbiAgICBzZXRUZXh0Q29udGVudCh0aGlzLnN0eWxlRWxfLCBcIlxcbiAgICAgIC5cIiArIGlkQ2xhc3MgKyBcIiB7XFxuICAgICAgICB3aWR0aDogXCIgKyB3aWR0aCArIFwicHg7XFxuICAgICAgICBoZWlnaHQ6IFwiICsgaGVpZ2h0ICsgXCJweDtcXG4gICAgICB9XFxuXFxuICAgICAgLlwiICsgaWRDbGFzcyArIFwiLnZqcy1mbHVpZCB7XFxuICAgICAgICBwYWRkaW5nLXRvcDogXCIgKyByYXRpb011bHRpcGxpZXIgKiAxMDAgKyBcIiU7XFxuICAgICAgfVxcbiAgICBcIik7XG4gIH1cbiAgLyoqXG4gICAqIExvYWQvQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHBsYXliYWNrIHtAbGluayBUZWNofSBpbmNsdWRpbmcgZWxlbWVudFxuICAgKiBhbmQgQVBJIG1ldGhvZHMuIFRoZW4gYXBwZW5kIHRoZSBgVGVjaGAgZWxlbWVudCBpbiBgUGxheWVyYCBhcyBhIGNoaWxkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGVjaE5hbWVcbiAgICogICAgICAgIG5hbWUgb2YgdGhlIHBsYXliYWNrIHRlY2hub2xvZ3lcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZVxuICAgKiAgICAgICAgdmlkZW8gc291cmNlXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxvYWRUZWNoXyA9IGZ1bmN0aW9uIGxvYWRUZWNoXyh0ZWNoTmFtZSwgc291cmNlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAvLyBQYXVzZSBhbmQgcmVtb3ZlIGN1cnJlbnQgcGxheWJhY2sgdGVjaG5vbG9neVxuICAgIGlmICh0aGlzLnRlY2hfKSB7XG4gICAgICB0aGlzLnVubG9hZFRlY2hfKCk7XG4gICAgfVxuXG4gICAgdmFyIHRpdGxlVGVjaE5hbWUgPSB0b1RpdGxlQ2FzZSh0ZWNoTmFtZSk7XG4gICAgdmFyIGNhbWVsVGVjaE5hbWUgPSB0ZWNoTmFtZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHRlY2hOYW1lLnNsaWNlKDEpOyAvLyBnZXQgcmlkIG9mIHRoZSBIVE1MNSB2aWRlbyB0YWcgYXMgc29vbiBhcyB3ZSBhcmUgdXNpbmcgYW5vdGhlciB0ZWNoXG5cbiAgICBpZiAodGl0bGVUZWNoTmFtZSAhPT0gJ0h0bWw1JyAmJiB0aGlzLnRhZykge1xuICAgICAgVGVjaC5nZXRUZWNoKCdIdG1sNScpLmRpc3Bvc2VNZWRpYUVsZW1lbnQodGhpcy50YWcpO1xuICAgICAgdGhpcy50YWcucGxheWVyID0gbnVsbDtcbiAgICAgIHRoaXMudGFnID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLnRlY2hOYW1lXyA9IHRpdGxlVGVjaE5hbWU7IC8vIFR1cm4gb2ZmIEFQSSBhY2Nlc3MgYmVjYXVzZSB3ZSdyZSBsb2FkaW5nIGEgbmV3IHRlY2ggdGhhdCBtaWdodCBsb2FkIGFzeW5jaHJvbm91c2x5XG5cbiAgICB0aGlzLmlzUmVhZHlfID0gZmFsc2U7IC8vIGlmIGF1dG9wbGF5IGlzIGEgc3RyaW5nIHdlIHBhc3MgZmFsc2UgdG8gdGhlIHRlY2hcbiAgICAvLyBiZWNhdXNlIHRoZSBwbGF5ZXIgaXMgZ29pbmcgdG8gaGFuZGxlIGF1dG9wbGF5IG9uIGBsb2Fkc3RhcnRgXG5cbiAgICB2YXIgYXV0b3BsYXkgPSB0eXBlb2YgdGhpcy5hdXRvcGxheSgpID09PSAnc3RyaW5nJyA/IGZhbHNlIDogdGhpcy5hdXRvcGxheSgpOyAvLyBHcmFiIHRlY2gtc3BlY2lmaWMgb3B0aW9ucyBmcm9tIHBsYXllciBvcHRpb25zIGFuZCBhZGQgc291cmNlIGFuZCBwYXJlbnQgZWxlbWVudCB0byB1c2UuXG5cbiAgICB2YXIgdGVjaE9wdGlvbnMgPSB7XG4gICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgIGF1dG9wbGF5OiBhdXRvcGxheSxcbiAgICAgICduYXRpdmVDb250cm9sc0ZvclRvdWNoJzogdGhpcy5vcHRpb25zXy5uYXRpdmVDb250cm9sc0ZvclRvdWNoLFxuICAgICAgJ3BsYXllcklkJzogdGhpcy5pZCgpLFxuICAgICAgJ3RlY2hJZCc6IHRoaXMuaWQoKSArIFwiX1wiICsgY2FtZWxUZWNoTmFtZSArIFwiX2FwaVwiLFxuICAgICAgJ3BsYXlzaW5saW5lJzogdGhpcy5vcHRpb25zXy5wbGF5c2lubGluZSxcbiAgICAgICdwcmVsb2FkJzogdGhpcy5vcHRpb25zXy5wcmVsb2FkLFxuICAgICAgJ2xvb3AnOiB0aGlzLm9wdGlvbnNfLmxvb3AsXG4gICAgICAnZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUnOiB0aGlzLm9wdGlvbnNfLmRpc2FibGVQaWN0dXJlSW5QaWN0dXJlLFxuICAgICAgJ211dGVkJzogdGhpcy5vcHRpb25zXy5tdXRlZCxcbiAgICAgICdwb3N0ZXInOiB0aGlzLnBvc3RlcigpLFxuICAgICAgJ2xhbmd1YWdlJzogdGhpcy5sYW5ndWFnZSgpLFxuICAgICAgJ3BsYXllckVsSW5nZXN0JzogdGhpcy5wbGF5ZXJFbEluZ2VzdF8gfHwgZmFsc2UsXG4gICAgICAndnR0LmpzJzogdGhpcy5vcHRpb25zX1sndnR0LmpzJ10sXG4gICAgICAnY2FuT3ZlcnJpZGVQb3N0ZXInOiAhIXRoaXMub3B0aW9uc18udGVjaENhbk92ZXJyaWRlUG9zdGVyLFxuICAgICAgJ2VuYWJsZVNvdXJjZXNldCc6IHRoaXMub3B0aW9uc18uZW5hYmxlU291cmNlc2V0LFxuICAgICAgJ1Byb21pc2UnOiB0aGlzLm9wdGlvbnNfLlByb21pc2VcbiAgICB9O1xuICAgIEFMTC5uYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgcHJvcHMgPSBBTExbbmFtZV07XG4gICAgICB0ZWNoT3B0aW9uc1twcm9wcy5nZXR0ZXJOYW1lXSA9IF90aGlzM1twcm9wcy5wcml2YXRlTmFtZV07XG4gICAgfSk7XG4gICAgYXNzaWduKHRlY2hPcHRpb25zLCB0aGlzLm9wdGlvbnNfW3RpdGxlVGVjaE5hbWVdKTtcbiAgICBhc3NpZ24odGVjaE9wdGlvbnMsIHRoaXMub3B0aW9uc19bY2FtZWxUZWNoTmFtZV0pO1xuICAgIGFzc2lnbih0ZWNoT3B0aW9ucywgdGhpcy5vcHRpb25zX1t0ZWNoTmFtZS50b0xvd2VyQ2FzZSgpXSk7XG5cbiAgICBpZiAodGhpcy50YWcpIHtcbiAgICAgIHRlY2hPcHRpb25zLnRhZyA9IHRoaXMudGFnO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2UgJiYgc291cmNlLnNyYyA9PT0gdGhpcy5jYWNoZV8uc3JjICYmIHRoaXMuY2FjaGVfLmN1cnJlbnRUaW1lID4gMCkge1xuICAgICAgdGVjaE9wdGlvbnMuc3RhcnRUaW1lID0gdGhpcy5jYWNoZV8uY3VycmVudFRpbWU7XG4gICAgfSAvLyBJbml0aWFsaXplIHRlY2ggaW5zdGFuY2VcblxuXG4gICAgdmFyIFRlY2hDbGFzcyA9IFRlY2guZ2V0VGVjaCh0ZWNoTmFtZSk7XG5cbiAgICBpZiAoIVRlY2hDbGFzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gVGVjaCBuYW1lZCAnXCIgKyB0aXRsZVRlY2hOYW1lICsgXCInIGV4aXN0cyEgJ1wiICsgdGl0bGVUZWNoTmFtZSArIFwiJyBzaG91bGQgYmUgcmVnaXN0ZXJlZCB1c2luZyB2aWRlb2pzLnJlZ2lzdGVyVGVjaCgpJ1wiKTtcbiAgICB9XG5cbiAgICB0aGlzLnRlY2hfID0gbmV3IFRlY2hDbGFzcyh0ZWNoT3B0aW9ucyk7IC8vIHBsYXllci50cmlnZ2VyUmVhZHkgaXMgYWx3YXlzIGFzeW5jLCBzbyBkb24ndCBuZWVkIHRoaXMgdG8gYmUgYXN5bmNcblxuICAgIHRoaXMudGVjaF8ucmVhZHkoYmluZCh0aGlzLCB0aGlzLmhhbmRsZVRlY2hSZWFkeV8pLCB0cnVlKTtcbiAgICB0ZXh0VHJhY2tDb252ZXJ0ZXIuanNvblRvVGV4dFRyYWNrcyh0aGlzLnRleHRUcmFja3NKc29uXyB8fCBbXSwgdGhpcy50ZWNoXyk7IC8vIExpc3RlbiB0byBhbGwgSFRNTDUtZGVmaW5lZCBldmVudHMgYW5kIHRyaWdnZXIgdGhlbSBvbiB0aGUgcGxheWVyXG5cbiAgICBURUNIX0VWRU5UU19SRVRSSUdHRVIuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzMy5vbihfdGhpczMudGVjaF8sIGV2ZW50LCBfdGhpczNbXCJoYW5kbGVUZWNoXCIgKyB0b1RpdGxlQ2FzZShldmVudCkgKyBcIl9cIl0pO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKFRFQ0hfRVZFTlRTX1FVRVVFKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMzLm9uKF90aGlzMy50ZWNoXywgZXZlbnQsIGZ1bmN0aW9uIChldmVudE9iaikge1xuICAgICAgICBpZiAoX3RoaXMzLnRlY2hfLnBsYXliYWNrUmF0ZSgpID09PSAwICYmIF90aGlzMy50ZWNoXy5zZWVraW5nKCkpIHtcbiAgICAgICAgICBfdGhpczMucXVldWVkQ2FsbGJhY2tzXy5wdXNoKHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBfdGhpczNbXCJoYW5kbGVUZWNoXCIgKyBURUNIX0VWRU5UU19RVUVVRVtldmVudF0gKyBcIl9cIl0uYmluZChfdGhpczMpLFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50T2JqXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczNbXCJoYW5kbGVUZWNoXCIgKyBURUNIX0VWRU5UU19RVUVVRVtldmVudF0gKyBcIl9cIl0oZXZlbnRPYmopO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnbG9hZHN0YXJ0JywgdGhpcy5oYW5kbGVUZWNoTG9hZFN0YXJ0Xyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnc291cmNlc2V0JywgdGhpcy5oYW5kbGVUZWNoU291cmNlc2V0Xyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnd2FpdGluZycsIHRoaXMuaGFuZGxlVGVjaFdhaXRpbmdfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdlbmRlZCcsIHRoaXMuaGFuZGxlVGVjaEVuZGVkXyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnc2Vla2luZycsIHRoaXMuaGFuZGxlVGVjaFNlZWtpbmdfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdwbGF5JywgdGhpcy5oYW5kbGVUZWNoUGxheV8pO1xuICAgIHRoaXMub24odGhpcy50ZWNoXywgJ2ZpcnN0cGxheScsIHRoaXMuaGFuZGxlVGVjaEZpcnN0UGxheV8pO1xuICAgIHRoaXMub24odGhpcy50ZWNoXywgJ3BhdXNlJywgdGhpcy5oYW5kbGVUZWNoUGF1c2VfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdkdXJhdGlvbmNoYW5nZScsIHRoaXMuaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnZnVsbHNjcmVlbmNoYW5nZScsIHRoaXMuaGFuZGxlVGVjaEZ1bGxzY3JlZW5DaGFuZ2VfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdmdWxsc2NyZWVuZXJyb3InLCB0aGlzLmhhbmRsZVRlY2hGdWxsc2NyZWVuRXJyb3JfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdlbnRlcnBpY3R1cmVpbnBpY3R1cmUnLCB0aGlzLmhhbmRsZVRlY2hFbnRlclBpY3R1cmVJblBpY3R1cmVfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdsZWF2ZXBpY3R1cmVpbnBpY3R1cmUnLCB0aGlzLmhhbmRsZVRlY2hMZWF2ZVBpY3R1cmVJblBpY3R1cmVfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdlcnJvcicsIHRoaXMuaGFuZGxlVGVjaEVycm9yXyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAnbG9hZGVkbWV0YWRhdGEnLCB0aGlzLnVwZGF0ZVN0eWxlRWxfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdwb3N0ZXJjaGFuZ2UnLCB0aGlzLmhhbmRsZVRlY2hQb3N0ZXJDaGFuZ2VfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICd0ZXh0ZGF0YScsIHRoaXMuaGFuZGxlVGVjaFRleHREYXRhXyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAncmF0ZWNoYW5nZScsIHRoaXMuaGFuZGxlVGVjaFJhdGVDaGFuZ2VfKTtcbiAgICB0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHModGhpcy50ZWNoR2V0XygnY29udHJvbHMnKSk7XG5cbiAgICBpZiAodGhpcy5jb250cm9scygpICYmICF0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKSkge1xuICAgICAgdGhpcy5hZGRUZWNoQ29udHJvbHNMaXN0ZW5lcnNfKCk7XG4gICAgfSAvLyBBZGQgdGhlIHRlY2ggZWxlbWVudCBpbiB0aGUgRE9NIGlmIGl0IHdhcyBub3QgYWxyZWFkeSB0aGVyZVxuICAgIC8vIE1ha2Ugc3VyZSB0byBub3QgaW5zZXJ0IHRoZSBvcmlnaW5hbCB2aWRlbyBlbGVtZW50IGlmIHVzaW5nIEh0bWw1XG5cblxuICAgIGlmICh0aGlzLnRlY2hfLmVsKCkucGFyZW50Tm9kZSAhPT0gdGhpcy5lbCgpICYmICh0aXRsZVRlY2hOYW1lICE9PSAnSHRtbDUnIHx8ICF0aGlzLnRhZykpIHtcbiAgICAgIHByZXBlbmRUbyh0aGlzLnRlY2hfLmVsKCksIHRoaXMuZWwoKSk7XG4gICAgfSAvLyBHZXQgcmlkIG9mIHRoZSBvcmlnaW5hbCB2aWRlbyB0YWcgcmVmZXJlbmNlIGFmdGVyIHRoZSBmaXJzdCB0ZWNoIGlzIGxvYWRlZFxuXG5cbiAgICBpZiAodGhpcy50YWcpIHtcbiAgICAgIHRoaXMudGFnLnBsYXllciA9IG51bGw7XG4gICAgICB0aGlzLnRhZyA9IG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVbmxvYWQgYW5kIGRpc3Bvc2Ugb2YgdGhlIGN1cnJlbnQgcGxheWJhY2sge0BsaW5rIFRlY2h9LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51bmxvYWRUZWNoXyA9IGZ1bmN0aW9uIHVubG9hZFRlY2hfKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgLy8gU2F2ZSB0aGUgY3VycmVudCB0ZXh0IHRyYWNrcyBzbyB0aGF0IHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0ZXh0IHRyYWNrcyB3aXRoIHRoZSBuZXh0IHRlY2hcbiAgICBBTEwubmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHByb3BzID0gQUxMW25hbWVdO1xuICAgICAgX3RoaXM0W3Byb3BzLnByaXZhdGVOYW1lXSA9IF90aGlzNFtwcm9wcy5nZXR0ZXJOYW1lXSgpO1xuICAgIH0pO1xuICAgIHRoaXMudGV4dFRyYWNrc0pzb25fID0gdGV4dFRyYWNrQ29udmVydGVyLnRleHRUcmFja3NUb0pzb24odGhpcy50ZWNoXyk7XG4gICAgdGhpcy5pc1JlYWR5XyA9IGZhbHNlO1xuICAgIHRoaXMudGVjaF8uZGlzcG9zZSgpO1xuICAgIHRoaXMudGVjaF8gPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLmlzUG9zdGVyRnJvbVRlY2hfKSB7XG4gICAgICB0aGlzLnBvc3Rlcl8gPSAnJztcbiAgICAgIHRoaXMudHJpZ2dlcigncG9zdGVyY2hhbmdlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5pc1Bvc3RlckZyb21UZWNoXyA9IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQge0BsaW5rIFRlY2h9LlxuICAgKiBJdCB3aWxsIHByaW50IGEgd2FybmluZyBieSBkZWZhdWx0IGFib3V0IHRoZSBkYW5nZXIgb2YgdXNpbmcgdGhlIHRlY2ggZGlyZWN0bHlcbiAgICogYnV0IGFueSBhcmd1bWVudCB0aGF0IGlzIHBhc3NlZCBpbiB3aWxsIHNpbGVuY2UgdGhlIHdhcm5pbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gW3NhZmV0eV1cbiAgICogICAgICAgIEFueXRoaW5nIHBhc3NlZCBpbiB0byBzaWxlbmNlIHRoZSB3YXJuaW5nXG4gICAqXG4gICAqIEByZXR1cm4ge1RlY2h9XG4gICAqICAgICAgICAgVGhlIFRlY2hcbiAgICovXG4gIDtcblxuICBfcHJvdG8udGVjaCA9IGZ1bmN0aW9uIHRlY2goc2FmZXR5KSB7XG4gICAgaWYgKHNhZmV0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsb2cud2FybignVXNpbmcgdGhlIHRlY2ggZGlyZWN0bHkgY2FuIGJlIGRhbmdlcm91cy4gSSBob3BlIHlvdSBrbm93IHdoYXQgeW91XFwncmUgZG9pbmcuXFxuJyArICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvdmlkZW8uanMvaXNzdWVzLzI2MTcgZm9yIG1vcmUgaW5mby5cXG4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZWNoXztcbiAgfVxuICAvKipcbiAgICogU2V0IHVwIGNsaWNrIGFuZCB0b3VjaCBsaXN0ZW5lcnMgZm9yIHRoZSBwbGF5YmFjayBlbGVtZW50XG4gICAqXG4gICAqIC0gT24gZGVza3RvcHM6IGEgY2xpY2sgb24gdGhlIHZpZGVvIGl0c2VsZiB3aWxsIHRvZ2dsZSBwbGF5YmFja1xuICAgKiAtIE9uIG1vYmlsZSBkZXZpY2VzOiBhIGNsaWNrIG9uIHRoZSB2aWRlbyB0b2dnbGVzIGNvbnRyb2xzXG4gICAqICAgd2hpY2ggaXMgZG9uZSBieSB0b2dnbGluZyB0aGUgdXNlciBzdGF0ZSBiZXR3ZWVuIGFjdGl2ZSBhbmRcbiAgICogICBpbmFjdGl2ZVxuICAgKiAtIEEgdGFwIGNhbiBzaWduYWwgdGhhdCBhIHVzZXIgaGFzIGJlY29tZSBhY3RpdmUgb3IgaGFzIGJlY29tZSBpbmFjdGl2ZVxuICAgKiAgIGUuZy4gYSBxdWljayB0YXAgb24gYW4gaVBob25lIG1vdmllIHNob3VsZCByZXZlYWwgdGhlIGNvbnRyb2xzLiBBbm90aGVyXG4gICAqICAgcXVpY2sgdGFwIHNob3VsZCBoaWRlIHRoZW0gYWdhaW4gKHNpZ25hbGluZyB0aGUgdXNlciBpcyBpbiBhbiBpbmFjdGl2ZVxuICAgKiAgIHZpZXdpbmcgc3RhdGUpXG4gICAqIC0gSW4gYWRkaXRpb24gdG8gdGhpcywgd2Ugc3RpbGwgd2FudCB0aGUgdXNlciB0byBiZSBjb25zaWRlcmVkIGluYWN0aXZlIGFmdGVyXG4gICAqICAgYSBmZXcgc2Vjb25kcyBvZiBpbmFjdGl2aXR5LlxuICAgKlxuICAgKiA+IE5vdGU6IHRoZSBvbmx5IHBhcnQgb2YgaU9TIGludGVyYWN0aW9uIHdlIGNhbid0IG1pbWljIHdpdGggdGhpcyBzZXR1cFxuICAgKiBpcyBhIHRvdWNoIGFuZCBob2xkIG9uIHRoZSB2aWRlbyBlbGVtZW50IGNvdW50aW5nIGFzIGFjdGl2aXR5IGluIG9yZGVyIHRvXG4gICAqIGtlZXAgdGhlIGNvbnRyb2xzIHNob3dpbmcsIGJ1dCB0aGF0IHNob3VsZG4ndCBiZSBhbiBpc3N1ZS4gQSB0b3VjaCBhbmQgaG9sZFxuICAgKiBvbiBhbnkgY29udHJvbHMgd2lsbCBzdGlsbCBrZWVwIHRoZSB1c2VyIGFjdGl2ZVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRUZWNoQ29udHJvbHNMaXN0ZW5lcnNfID0gZnVuY3Rpb24gYWRkVGVjaENvbnRyb2xzTGlzdGVuZXJzXygpIHtcbiAgICAvLyBNYWtlIHN1cmUgdG8gcmVtb3ZlIGFsbCB0aGUgcHJldmlvdXMgbGlzdGVuZXJzIGluIGNhc2Ugd2UgYXJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICB0aGlzLnJlbW92ZVRlY2hDb250cm9sc0xpc3RlbmVyc18oKTsgLy8gU29tZSBicm93c2VycyAoQ2hyb21lICYgSUUpIGRvbid0IHRyaWdnZXIgYSBjbGljayBvbiBhIGZsYXNoIHN3ZiwgYnV0IGRvXG4gICAgLy8gdHJpZ2dlciBtb3VzZWRvd24vdXAuXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDQ0NTYyL2phdmFzY3JpcHQtb25jbGljay1ldmVudC1vdmVyLWZsYXNoLW9iamVjdFxuICAgIC8vIEFueSB0b3VjaCBldmVudHMgYXJlIHNldCB0byBibG9jayB0aGUgbW91c2Vkb3duIGV2ZW50IGZyb20gaGFwcGVuaW5nXG5cbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdtb3VzZXVwJywgdGhpcy5oYW5kbGVUZWNoQ2xpY2tfKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaF8sICdkYmxjbGljaycsIHRoaXMuaGFuZGxlVGVjaERvdWJsZUNsaWNrXyk7IC8vIElmIHRoZSBjb250cm9scyB3ZXJlIGhpZGRlbiB3ZSBkb24ndCB3YW50IHRoYXQgdG8gY2hhbmdlIHdpdGhvdXQgYSB0YXAgZXZlbnRcbiAgICAvLyBzbyB3ZSdsbCBjaGVjayBpZiB0aGUgY29udHJvbHMgd2VyZSBhbHJlYWR5IHNob3dpbmcgYmVmb3JlIHJlcG9ydGluZyB1c2VyXG4gICAgLy8gYWN0aXZpdHlcblxuICAgIHRoaXMub24odGhpcy50ZWNoXywgJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRlY2hUb3VjaFN0YXJ0Xyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVUZWNoVG91Y2hNb3ZlXyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2hfLCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZVRlY2hUb3VjaEVuZF8pOyAvLyBUaGUgdGFwIGxpc3RlbmVyIG5lZWRzIHRvIGNvbWUgYWZ0ZXIgdGhlIHRvdWNoZW5kIGxpc3RlbmVyIGJlY2F1c2UgdGhlIHRhcFxuICAgIC8vIGxpc3RlbmVyIGNhbmNlbHMgb3V0IGFueSByZXBvcnRlZFVzZXJBY3Rpdml0eSB3aGVuIHNldHRpbmcgdXNlckFjdGl2ZShmYWxzZSlcblxuICAgIHRoaXMub24odGhpcy50ZWNoXywgJ3RhcCcsIHRoaXMuaGFuZGxlVGVjaFRhcF8pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGxpc3RlbmVycyB1c2VkIGZvciBjbGljayBhbmQgdGFwIGNvbnRyb2xzLiBUaGlzIGlzIG5lZWRlZCBmb3JcbiAgICogdG9nZ2xpbmcgdG8gY29udHJvbHMgZGlzYWJsZWQsIHdoZXJlIGEgdGFwL3RvdWNoIHNob3VsZCBkbyBub3RoaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVUZWNoQ29udHJvbHNMaXN0ZW5lcnNfID0gZnVuY3Rpb24gcmVtb3ZlVGVjaENvbnRyb2xzTGlzdGVuZXJzXygpIHtcbiAgICAvLyBXZSBkb24ndCB3YW50IHRvIGp1c3QgdXNlIGB0aGlzLm9mZigpYCBiZWNhdXNlIHRoZXJlIG1pZ2h0IGJlIG90aGVyIG5lZWRlZFxuICAgIC8vIGxpc3RlbmVycyBhZGRlZCBieSB0ZWNocyB0aGF0IGV4dGVuZCB0aGlzLlxuICAgIHRoaXMub2ZmKHRoaXMudGVjaF8sICd0YXAnLCB0aGlzLmhhbmRsZVRlY2hUYXBfKTtcbiAgICB0aGlzLm9mZih0aGlzLnRlY2hfLCAndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlVGVjaFRvdWNoU3RhcnRfKTtcbiAgICB0aGlzLm9mZih0aGlzLnRlY2hfLCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVUZWNoVG91Y2hNb3ZlXyk7XG4gICAgdGhpcy5vZmYodGhpcy50ZWNoXywgJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVUZWNoVG91Y2hFbmRfKTtcbiAgICB0aGlzLm9mZih0aGlzLnRlY2hfLCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlVGVjaENsaWNrXyk7XG4gICAgdGhpcy5vZmYodGhpcy50ZWNoXywgJ2RibGNsaWNrJywgdGhpcy5oYW5kbGVUZWNoRG91YmxlQ2xpY2tfKTtcbiAgfVxuICAvKipcbiAgICogUGxheWVyIHdhaXRzIGZvciB0aGUgdGVjaCB0byBiZSByZWFkeVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoUmVhZHlfID0gZnVuY3Rpb24gaGFuZGxlVGVjaFJlYWR5XygpIHtcbiAgICB0aGlzLnRyaWdnZXJSZWFkeSgpOyAvLyBLZWVwIHRoZSBzYW1lIHZvbHVtZSBhcyBiZWZvcmVcblxuICAgIGlmICh0aGlzLmNhY2hlXy52b2x1bWUpIHtcbiAgICAgIHRoaXMudGVjaENhbGxfKCdzZXRWb2x1bWUnLCB0aGlzLmNhY2hlXy52b2x1bWUpO1xuICAgIH0gLy8gTG9vayBpZiB0aGUgdGVjaCBmb3VuZCBhIGhpZ2hlciByZXNvbHV0aW9uIHBvc3RlciB3aGlsZSBsb2FkaW5nXG5cblxuICAgIHRoaXMuaGFuZGxlVGVjaFBvc3RlckNoYW5nZV8oKTsgLy8gVXBkYXRlIHRoZSBkdXJhdGlvbiBpZiBhdmFpbGFibGVcblxuICAgIHRoaXMuaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWdnZXIgdGhlIGBsb2Fkc3RhcnRgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LiBUaGlzXG4gICAqIGZ1bmN0aW9uIHdpbGwgYWxzbyB0cmlnZ2VyIHtAbGluayBQbGF5ZXIjZmlyc3RwbGF5fSBpZiBpdCBpcyB0aGUgZmlyc3QgbG9hZHN0YXJ0XG4gICAqIGZvciBhIHZpZGVvLlxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI2xvYWRzdGFydFxuICAgKiBAZmlyZXMgUGxheWVyI2ZpcnN0cGxheVxuICAgKiBAbGlzdGVucyBUZWNoI2xvYWRzdGFydFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoTG9hZFN0YXJ0XyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hMb2FkU3RhcnRfKCkge1xuICAgIC8vIFRPRE86IFVwZGF0ZSB0byB1c2UgYGVtcHRpZWRgIGV2ZW50IGluc3RlYWQuIFNlZSAjMTI3Ny5cbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZW5kZWQnKTtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtc2Vla2luZycpOyAvLyByZXNldCB0aGUgZXJyb3Igc3RhdGVcblxuICAgIHRoaXMuZXJyb3IobnVsbCk7IC8vIFVwZGF0ZSB0aGUgZHVyYXRpb25cblxuICAgIHRoaXMuaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXygpOyAvLyBJZiBpdCdzIGFscmVhZHkgcGxheWluZyB3ZSB3YW50IHRvIHRyaWdnZXIgYSBmaXJzdHBsYXkgZXZlbnQgbm93LlxuICAgIC8vIFRoZSBmaXJzdHBsYXkgZXZlbnQgcmVsaWVzIG9uIGJvdGggdGhlIHBsYXkgYW5kIGxvYWRzdGFydCBldmVudHNcbiAgICAvLyB3aGljaCBjYW4gaGFwcGVuIGluIGFueSBvcmRlciBmb3IgYSBuZXcgc291cmNlXG5cbiAgICBpZiAoIXRoaXMucGF1c2VkKCkpIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZWQgd2hlbiB0aGUgdXNlciBhZ2VudCBiZWdpbnMgbG9va2luZyBmb3IgbWVkaWEgZGF0YVxuICAgICAgICpcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjbG9hZHN0YXJ0XG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cbiAgICAgIHRoaXMudHJpZ2dlcignbG9hZHN0YXJ0Jyk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2ZpcnN0cGxheScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXNldCB0aGUgaGFzU3RhcnRlZCBzdGF0ZVxuICAgICAgdGhpcy5oYXNTdGFydGVkKGZhbHNlKTtcbiAgICAgIHRoaXMudHJpZ2dlcignbG9hZHN0YXJ0Jyk7XG4gICAgfSAvLyBhdXRvcGxheSBoYXBwZW5zIGFmdGVyIGxvYWRzdGFydCBmb3IgdGhlIGJyb3dzZXIsXG4gICAgLy8gc28gd2UgbWltaWMgdGhhdCBiZWhhdmlvclxuXG5cbiAgICB0aGlzLm1hbnVhbEF1dG9wbGF5Xyh0aGlzLmF1dG9wbGF5KCkpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYXV0b3BsYXkgc3RyaW5nIHZhbHVlcywgcmF0aGVyIHRoYW4gdGhlIHR5cGljYWwgYm9vbGVhblxuICAgKiB2YWx1ZXMgdGhhdCBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGUgdGVjaC4gTm90ZSB0aGF0IHRoaXMgaXMgbm90XG4gICAqIHBhcnQgb2YgYW55IHNwZWNpZmljYXRpb24uIFZhbGlkIHZhbHVlcyBhbmQgd2hhdCB0aGV5IGRvIGNhbiBiZVxuICAgKiBmb3VuZCBvbiB0aGUgYXV0b3BsYXkgZ2V0dGVyIGF0IFBsYXllciNhdXRvcGxheSgpXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm1hbnVhbEF1dG9wbGF5XyA9IGZ1bmN0aW9uIG1hbnVhbEF1dG9wbGF5Xyh0eXBlKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMudGVjaF8gfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG11dGVkID0gZnVuY3Rpb24gbXV0ZWQoKSB7XG4gICAgICB2YXIgcHJldmlvdXNseU11dGVkID0gX3RoaXM1Lm11dGVkKCk7XG5cbiAgICAgIF90aGlzNS5tdXRlZCh0cnVlKTtcblxuICAgICAgdmFyIHJlc3RvcmVNdXRlZCA9IGZ1bmN0aW9uIHJlc3RvcmVNdXRlZCgpIHtcbiAgICAgICAgX3RoaXM1Lm11dGVkKHByZXZpb3VzbHlNdXRlZCk7XG4gICAgICB9OyAvLyByZXN0b3JlIG11dGVkIG9uIHBsYXkgdGVybWluYXRhdGlvblxuXG5cbiAgICAgIF90aGlzNS5wbGF5VGVybWluYXRlZFF1ZXVlXy5wdXNoKHJlc3RvcmVNdXRlZCk7XG5cbiAgICAgIHZhciBtdXRlZFByb21pc2UgPSBfdGhpczUucGxheSgpO1xuXG4gICAgICBpZiAoIWlzUHJvbWlzZShtdXRlZFByb21pc2UpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG11dGVkUHJvbWlzZVtcImNhdGNoXCJdKHJlc3RvcmVNdXRlZCk7XG4gICAgfTtcblxuICAgIHZhciBwcm9taXNlOyAvLyBpZiBtdXRlZCBkZWZhdWx0cyB0byB0cnVlXG4gICAgLy8gdGhlIG9ubHkgdGhpbmcgd2UgY2FuIGRvIGlzIGNhbGwgcGxheVxuXG4gICAgaWYgKHR5cGUgPT09ICdhbnknICYmIHRoaXMubXV0ZWQoKSAhPT0gdHJ1ZSkge1xuICAgICAgcHJvbWlzZSA9IHRoaXMucGxheSgpO1xuXG4gICAgICBpZiAoaXNQcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlW1wiY2F0Y2hcIl0obXV0ZWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ211dGVkJyAmJiB0aGlzLm11dGVkKCkgIT09IHRydWUpIHtcbiAgICAgIHByb21pc2UgPSBtdXRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlID0gdGhpcy5wbGF5KCk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzNS50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ2F1dG9wbGF5LXN1Y2Nlc3MnLFxuICAgICAgICBhdXRvcGxheTogdHlwZVxuICAgICAgfSk7XG4gICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXM1LnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAnYXV0b3BsYXktZmFpbHVyZScsXG4gICAgICAgIGF1dG9wbGF5OiB0eXBlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBpbnRlcm5hbCBzb3VyY2UgY2FjaGVzIHNvIHRoYXQgd2UgcmV0dXJuIHRoZSBjb3JyZWN0IHNvdXJjZSBmcm9tXG4gICAqIGBzcmMoKWAsIGBjdXJyZW50U291cmNlKClgLCBhbmQgYGN1cnJlbnRTb3VyY2VzKClgLlxuICAgKlxuICAgKiA+IE5vdGU6IGBjdXJyZW50U291cmNlc2Agd2lsbCBub3QgYmUgdXBkYXRlZCBpZiB0aGUgc291cmNlIHRoYXQgaXMgcGFzc2VkIGluIGV4aXN0c1xuICAgKiAgICAgICAgIGluIHRoZSBjdXJyZW50IGBjdXJyZW50U291cmNlc2AgY2FjaGUuXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7VGVjaH5Tb3VyY2VPYmplY3R9IHNyY09ialxuICAgKiAgICAgICAgQSBzdHJpbmcgb3Igb2JqZWN0IHNvdXJjZSB0byB1cGRhdGUgb3VyIGNhY2hlcyB0by5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlU291cmNlQ2FjaGVzXyA9IGZ1bmN0aW9uIHVwZGF0ZVNvdXJjZUNhY2hlc18oc3JjT2JqKSB7XG4gICAgaWYgKHNyY09iaiA9PT0gdm9pZCAwKSB7XG4gICAgICBzcmNPYmogPSAnJztcbiAgICB9XG5cbiAgICB2YXIgc3JjID0gc3JjT2JqO1xuICAgIHZhciB0eXBlID0gJyc7XG5cbiAgICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHNyYyA9IHNyY09iai5zcmM7XG4gICAgICB0eXBlID0gc3JjT2JqLnR5cGU7XG4gICAgfSAvLyBtYWtlIHN1cmUgYWxsIHRoZSBjYWNoZXMgYXJlIHNldCB0byBkZWZhdWx0IHZhbHVlc1xuICAgIC8vIHRvIHByZXZlbnQgbnVsbCBjaGVja2luZ1xuXG5cbiAgICB0aGlzLmNhY2hlXy5zb3VyY2UgPSB0aGlzLmNhY2hlXy5zb3VyY2UgfHwge307XG4gICAgdGhpcy5jYWNoZV8uc291cmNlcyA9IHRoaXMuY2FjaGVfLnNvdXJjZXMgfHwgW107IC8vIHRyeSB0byBnZXQgdGhlIHR5cGUgb2YgdGhlIHNyYyB0aGF0IHdhcyBwYXNzZWQgaW5cblxuICAgIGlmIChzcmMgJiYgIXR5cGUpIHtcbiAgICAgIHR5cGUgPSBmaW5kTWltZXR5cGUodGhpcywgc3JjKTtcbiAgICB9IC8vIHVwZGF0ZSBgY3VycmVudFNvdXJjZWAgY2FjaGUgYWx3YXlzXG5cblxuICAgIHRoaXMuY2FjaGVfLnNvdXJjZSA9IG1lcmdlT3B0aW9ucyh7fSwgc3JjT2JqLCB7XG4gICAgICBzcmM6IHNyYyxcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9KTtcbiAgICB2YXIgbWF0Y2hpbmdTb3VyY2VzID0gdGhpcy5jYWNoZV8uc291cmNlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLnNyYyAmJiBzLnNyYyA9PT0gc3JjO1xuICAgIH0pO1xuICAgIHZhciBzb3VyY2VFbFNvdXJjZXMgPSBbXTtcbiAgICB2YXIgc291cmNlRWxzID0gdGhpcy4kJCgnc291cmNlJyk7XG4gICAgdmFyIG1hdGNoaW5nU291cmNlRWxzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZUVscy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZU9iaiA9IGdldEF0dHJpYnV0ZXMoc291cmNlRWxzW2ldKTtcbiAgICAgIHNvdXJjZUVsU291cmNlcy5wdXNoKHNvdXJjZU9iaik7XG5cbiAgICAgIGlmIChzb3VyY2VPYmouc3JjICYmIHNvdXJjZU9iai5zcmMgPT09IHNyYykge1xuICAgICAgICBtYXRjaGluZ1NvdXJjZUVscy5wdXNoKHNvdXJjZU9iai5zcmMpO1xuICAgICAgfVxuICAgIH0gLy8gaWYgd2UgaGF2ZSBtYXRjaGluZyBzb3VyY2UgZWxzIGJ1dCBub3QgbWF0Y2hpbmcgc291cmNlc1xuICAgIC8vIHRoZSBjdXJyZW50IHNvdXJjZSBjYWNoZSBpcyBub3QgdXAgdG8gZGF0ZVxuXG5cbiAgICBpZiAobWF0Y2hpbmdTb3VyY2VFbHMubGVuZ3RoICYmICFtYXRjaGluZ1NvdXJjZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmNhY2hlXy5zb3VyY2VzID0gc291cmNlRWxTb3VyY2VzOyAvLyBpZiB3ZSBkb24ndCBoYXZlIG1hdGNoaW5nIHNvdXJjZSBvciBzb3VyY2UgZWxzIHNldCB0aGVcbiAgICAgIC8vIHNvdXJjZXMgY2FjaGUgdG8gdGhlIGBjdXJyZW50U291cmNlYCBjYWNoZVxuICAgIH0gZWxzZSBpZiAoIW1hdGNoaW5nU291cmNlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuY2FjaGVfLnNvdXJjZXMgPSBbdGhpcy5jYWNoZV8uc291cmNlXTtcbiAgICB9IC8vIHVwZGF0ZSB0aGUgdGVjaCBgc3JjYCBjYWNoZVxuXG5cbiAgICB0aGlzLmNhY2hlXy5zcmMgPSBzcmM7XG4gIH1cbiAgLyoqXG4gICAqICpFWFBFUklNRU5UQUwqIEZpcmVkIHdoZW4gdGhlIHNvdXJjZSBpcyBzZXQgb3IgY2hhbmdlZCBvbiB0aGUge0BsaW5rIFRlY2h9XG4gICAqIGNhdXNpbmcgdGhlIG1lZGlhIGVsZW1lbnQgdG8gcmVsb2FkLlxuICAgKlxuICAgKiBJdCB3aWxsIGZpcmUgZm9yIHRoZSBpbml0aWFsIHNvdXJjZSBhbmQgZWFjaCBzdWJzZXF1ZW50IHNvdXJjZS5cbiAgICogVGhpcyBldmVudCBpcyBhIGN1c3RvbSBldmVudCBmcm9tIFZpZGVvLmpzIGFuZCBpcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogVGhlIGV2ZW50IG9iamVjdCBmb3IgdGhpcyBldmVudCBjb250YWlucyBhIGBzcmNgIHByb3BlcnR5IHRoYXQgd2lsbCBjb250YWluIHRoZSBzb3VyY2VcbiAgICogdGhhdCB3YXMgYXZhaWxhYmxlIHdoZW4gdGhlIGV2ZW50IHdhcyB0cmlnZ2VyZWQuIFRoaXMgaXMgZ2VuZXJhbGx5IG9ubHkgbmVjZXNzYXJ5IGlmIFZpZGVvLmpzXG4gICAqIGlzIHN3aXRjaGluZyB0ZWNocyB3aGlsZSB0aGUgc291cmNlIHdhcyBiZWluZyBjaGFuZ2VkLlxuICAgKlxuICAgKiBJdCBpcyBhbHNvIGZpcmVkIHdoZW4gYGxvYWRgIGlzIGNhbGxlZCBvbiB0aGUgcGxheWVyIChvciBtZWRpYSBlbGVtZW50KVxuICAgKiBiZWNhdXNlIHRoZSB7QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbWVkaWEuaHRtbCNkb20tbWVkaWEtbG9hZHxzcGVjaWZpY2F0aW9uIGZvciBgbG9hZGB9XG4gICAqIHNheXMgdGhhdCB0aGUgcmVzb3VyY2Ugc2VsZWN0aW9uIGFsZ29yaXRobSBuZWVkcyB0byBiZSBhYm9ydGVkIGFuZCByZXN0YXJ0ZWQuXG4gICAqIEluIHRoaXMgY2FzZSwgaXQgaXMgdmVyeSBsaWtlbHkgdGhhdCB0aGUgYHNyY2AgcHJvcGVydHkgd2lsbCBiZSBzZXQgdG8gdGhlXG4gICAqIGVtcHR5IHN0cmluZyBgXCJcImAgdG8gaW5kaWNhdGUgd2UgZG8gbm90IGtub3cgd2hhdCB0aGUgc291cmNlIHdpbGwgYmUgYnV0XG4gICAqIHRoYXQgaXQgaXMgY2hhbmdpbmcuXG4gICAqXG4gICAqICpUaGlzIGV2ZW50IGlzIGN1cnJlbnRseSBzdGlsbCBleHBlcmltZW50YWwgYW5kIG1heSBjaGFuZ2UgaW4gbWlub3IgcmVsZWFzZXMuKlxuICAgKiBfX1RvIHVzZSB0aGlzLCBwYXNzIGBlbmFibGVTb3VyY2VzZXRgIG9wdGlvbiB0byB0aGUgcGxheWVyLl9fXG4gICAqXG4gICAqIEBldmVudCBQbGF5ZXIjc291cmNlc2V0XG4gICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICogQHByb3Age3N0cmluZ30gc3JjXG4gICAqICAgICAgICAgICAgICAgIFRoZSBzb3VyY2UgdXJsIGF2YWlsYWJsZSB3aGVuIHRoZSBgc291cmNlc2V0YCB3YXMgdHJpZ2dlcmVkLlxuICAgKiAgICAgICAgICAgICAgICBJdCB3aWxsIGJlIGFuIGVtcHR5IHN0cmluZyBpZiB3ZSBjYW5ub3Qga25vdyB3aGF0IHRoZSBzb3VyY2UgaXNcbiAgICogICAgICAgICAgICAgICAgYnV0IGtub3cgdGhhdCB0aGUgc291cmNlIHdpbGwgY2hhbmdlLlxuICAgKi9cblxuICAvKipcbiAgICogUmV0cmlnZ2VyIHRoZSBgc291cmNlc2V0YCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNzb3VyY2VzZXRcbiAgICogQGxpc3RlbnMgVGVjaCNzb3VyY2VzZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaFNvdXJjZXNldF8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoU291cmNlc2V0XyhldmVudCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgLy8gb25seSB1cGRhdGUgdGhlIHNvdXJjZSBjYWNoZSB3aGVuIHRoZSBzb3VyY2VcbiAgICAvLyB3YXMgbm90IHVwZGF0ZWQgdXNpbmcgdGhlIHBsYXllciBhcGlcbiAgICBpZiAoIXRoaXMuY2hhbmdpbmdTcmNfKSB7XG4gICAgICB2YXIgdXBkYXRlU291cmNlQ2FjaGVzID0gZnVuY3Rpb24gdXBkYXRlU291cmNlQ2FjaGVzKHNyYykge1xuICAgICAgICByZXR1cm4gX3RoaXM2LnVwZGF0ZVNvdXJjZUNhY2hlc18oc3JjKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBwbGF5ZXJTcmMgPSB0aGlzLmN1cnJlbnRTb3VyY2UoKS5zcmM7XG4gICAgICB2YXIgZXZlbnRTcmMgPSBldmVudC5zcmM7IC8vIGlmIHdlIGhhdmUgYSBwbGF5ZXJTcmMgdGhhdCBpcyBub3QgYSBibG9iLCBhbmQgYSB0ZWNoIHNyYyB0aGF0IGlzIGEgYmxvYlxuXG4gICAgICBpZiAocGxheWVyU3JjICYmICEvXmJsb2I6Ly50ZXN0KHBsYXllclNyYykgJiYgL15ibG9iOi8udGVzdChldmVudFNyYykpIHtcbiAgICAgICAgLy8gaWYgYm90aCB0aGUgdGVjaCBzb3VyY2UgYW5kIHRoZSBwbGF5ZXIgc291cmNlIHdlcmUgdXBkYXRlZCB3ZSBhc3N1bWVcbiAgICAgICAgLy8gc29tZXRoaW5nIGxpa2UgQHZpZGVvanMvaHR0cC1zdHJlYW1pbmcgZGlkIHRoZSBzb3VyY2VzZXQgYW5kIHNraXAgdXBkYXRpbmcgdGhlIHNvdXJjZSBjYWNoZS5cbiAgICAgICAgaWYgKCF0aGlzLmxhc3RTb3VyY2VfIHx8IHRoaXMubGFzdFNvdXJjZV8udGVjaCAhPT0gZXZlbnRTcmMgJiYgdGhpcy5sYXN0U291cmNlXy5wbGF5ZXIgIT09IHBsYXllclNyYykge1xuICAgICAgICAgIHVwZGF0ZVNvdXJjZUNhY2hlcyA9IGZ1bmN0aW9uIHVwZGF0ZVNvdXJjZUNhY2hlcygpIHt9O1xuICAgICAgICB9XG4gICAgICB9IC8vIHVwZGF0ZSB0aGUgc291cmNlIHRvIHRoZSBpbml0aWFsIHNvdXJjZSByaWdodCBhd2F5XG4gICAgICAvLyBpbiBzb21lIGNhc2VzIHRoaXMgd2lsbCBiZSBlbXB0eSBzdHJpbmdcblxuXG4gICAgICB1cGRhdGVTb3VyY2VDYWNoZXMoZXZlbnRTcmMpOyAvLyBpZiB0aGUgYHNvdXJjZXNldGAgYHNyY2Agd2FzIGFuIGVtcHR5IHN0cmluZ1xuICAgICAgLy8gd2FpdCBmb3IgYSBgbG9hZHN0YXJ0YCB0byB1cGRhdGUgdGhlIGNhY2hlIHRvIGBjdXJyZW50U3JjYC5cbiAgICAgIC8vIElmIGEgc291cmNlc2V0IGhhcHBlbnMgYmVmb3JlIGEgYGxvYWRzdGFydGAsIHdlIHJlc2V0IHRoZSBzdGF0ZVxuXG4gICAgICBpZiAoIWV2ZW50LnNyYykge1xuICAgICAgICB0aGlzLnRlY2hfLmFueShbJ3NvdXJjZXNldCcsICdsb2Fkc3RhcnQnXSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAvLyBpZiBhIHNvdXJjZXNldCBoYXBwZW5zIGJlZm9yZSBhIGBsb2Fkc3RhcnRgIHRoZXJlXG4gICAgICAgICAgLy8gaXMgbm90aGluZyB0byBkbyBhcyB0aGlzIGBoYW5kbGVUZWNoU291cmNlc2V0X2BcbiAgICAgICAgICAvLyB3aWxsIGJlIGNhbGxlZCBhZ2FpbiBhbmQgdGhpcyB3aWxsIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ3NvdXJjZXNldCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdGVjaFNyYyA9IF90aGlzNi50ZWNoR2V0KCdjdXJyZW50U3JjJyk7XG5cbiAgICAgICAgICBfdGhpczYubGFzdFNvdXJjZV8udGVjaCA9IHRlY2hTcmM7XG5cbiAgICAgICAgICBfdGhpczYudXBkYXRlU291cmNlQ2FjaGVzXyh0ZWNoU3JjKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0U291cmNlXyA9IHtcbiAgICAgIHBsYXllcjogdGhpcy5jdXJyZW50U291cmNlKCkuc3JjLFxuICAgICAgdGVjaDogZXZlbnQuc3JjXG4gICAgfTtcbiAgICB0aGlzLnRyaWdnZXIoe1xuICAgICAgc3JjOiBldmVudC5zcmMsXG4gICAgICB0eXBlOiAnc291cmNlc2V0J1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGQvcmVtb3ZlIHRoZSB2anMtaGFzLXN0YXJ0ZWQgY2xhc3NcbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNmaXJzdHBsYXlcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSByZXF1ZXN0XG4gICAqICAgICAgICAtIHRydWU6IGFkZHMgdGhlIGNsYXNzXG4gICAqICAgICAgICAtIGZhbHNlOiByZW1vdmUgdGhlIGNsYXNzXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgdGhlIGJvb2xlYW4gdmFsdWUgb2YgaGFzU3RhcnRlZF9cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFzU3RhcnRlZCA9IGZ1bmN0aW9uIGhhc1N0YXJ0ZWQocmVxdWVzdCkge1xuICAgIGlmIChyZXF1ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGFjdCBhcyBnZXR0ZXIsIGlmIHdlIGhhdmUgbm8gcmVxdWVzdCB0byBjaGFuZ2VcbiAgICAgIHJldHVybiB0aGlzLmhhc1N0YXJ0ZWRfO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0ID09PSB0aGlzLmhhc1N0YXJ0ZWRfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5oYXNTdGFydGVkXyA9IHJlcXVlc3Q7XG5cbiAgICBpZiAodGhpcy5oYXNTdGFydGVkXykge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWhhcy1zdGFydGVkJyk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2ZpcnN0cGxheScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtaGFzLXN0YXJ0ZWQnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW5ldmVyIHRoZSBtZWRpYSBiZWdpbnMgb3IgcmVzdW1lcyBwbGF5YmFja1xuICAgKlxuICAgKiBAc2VlIFtTcGVjXXtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjZG9tLW1lZGlhLXBsYXl9XG4gICAqIEBmaXJlcyBQbGF5ZXIjcGxheVxuICAgKiBAbGlzdGVucyBUZWNoI3BsYXlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaFBsYXlfID0gZnVuY3Rpb24gaGFuZGxlVGVjaFBsYXlfKCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1lbmRlZCcpO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1wYXVzZWQnKTtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtcGxheWluZycpOyAvLyBoaWRlIHRoZSBwb3N0ZXIgd2hlbiB0aGUgdXNlciBoaXRzIHBsYXlcblxuICAgIHRoaXMuaGFzU3RhcnRlZCh0cnVlKTtcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbmV2ZXIgYW4ge0BsaW5rIFRlY2gjcGxheX0gZXZlbnQgaGFwcGVucy4gSW5kaWNhdGVzIHRoYXRcbiAgICAgKiBwbGF5YmFjayBoYXMgc3RhcnRlZCBvciByZXN1bWVkLlxuICAgICAqXG4gICAgICogQGV2ZW50IFBsYXllciNwbGF5XG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdwbGF5Jyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHJpZ2dlciB0aGUgYHJhdGVjaGFuZ2VgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICAgKlxuICAgKiBJZiB0aGVyZSB3ZXJlIGFueSBldmVudHMgcXVldWVkIHdoaWxlIHRoZSBwbGF5YmFjayByYXRlIHdhcyB6ZXJvLCBmaXJlXG4gICAqIHRob3NlIGV2ZW50cyBub3cuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBtZXRob2QgUGxheWVyI2hhbmRsZVRlY2hSYXRlQ2hhbmdlX1xuICAgKiBAZmlyZXMgUGxheWVyI3JhdGVjaGFuZ2VcbiAgICogQGxpc3RlbnMgVGVjaCNyYXRlY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hSYXRlQ2hhbmdlXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hSYXRlQ2hhbmdlXygpIHtcbiAgICBpZiAodGhpcy50ZWNoXy5wbGF5YmFja1JhdGUoKSA+IDAgJiYgdGhpcy5jYWNoZV8ubGFzdFBsYXliYWNrUmF0ZSA9PT0gMCkge1xuICAgICAgdGhpcy5xdWV1ZWRDYWxsYmFja3NfLmZvckVhY2goZnVuY3Rpb24gKHF1ZXVlZCkge1xuICAgICAgICByZXR1cm4gcXVldWVkLmNhbGxiYWNrKHF1ZXVlZC5ldmVudCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucXVldWVkQ2FsbGJhY2tzXyA9IFtdO1xuICAgIH1cblxuICAgIHRoaXMuY2FjaGVfLmxhc3RQbGF5YmFja1JhdGUgPSB0aGlzLnRlY2hfLnBsYXliYWNrUmF0ZSgpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsYXlpbmcgc3BlZWQgb2YgdGhlIGF1ZGlvL3ZpZGVvIGlzIGNoYW5nZWRcbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjcmF0ZWNoYW5nZVxuICAgICAqIEB0eXBlIHtldmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcigncmF0ZWNoYW5nZScpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWdnZXIgdGhlIGB3YWl0aW5nYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogQGZpcmVzIFBsYXllciN3YWl0aW5nXG4gICAqIEBsaXN0ZW5zIFRlY2gjd2FpdGluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoV2FpdGluZ18gPSBmdW5jdGlvbiBoYW5kbGVUZWNoV2FpdGluZ18oKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICB0aGlzLmFkZENsYXNzKCd2anMtd2FpdGluZycpO1xuICAgIC8qKlxuICAgICAqIEEgcmVhZHlTdGF0ZSBjaGFuZ2Ugb24gdGhlIERPTSBlbGVtZW50IGhhcyBjYXVzZWQgcGxheWJhY2sgdG8gc3RvcC5cbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjd2FpdGluZ1xuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignd2FpdGluZycpOyAvLyBCcm93c2VycyBtYXkgZW1pdCBhIHRpbWV1cGRhdGUgZXZlbnQgYWZ0ZXIgYSB3YWl0aW5nIGV2ZW50LiBJbiBvcmRlciB0byBwcmV2ZW50XG4gICAgLy8gcHJlbWF0dXJlIHJlbW92YWwgb2YgdGhlIHdhaXRpbmcgY2xhc3MsIHdhaXQgZm9yIHRoZSB0aW1lIHRvIGNoYW5nZS5cblxuICAgIHZhciB0aW1lV2hlbldhaXRpbmcgPSB0aGlzLmN1cnJlbnRUaW1lKCk7XG5cbiAgICB2YXIgdGltZVVwZGF0ZUxpc3RlbmVyID0gZnVuY3Rpb24gdGltZVVwZGF0ZUxpc3RlbmVyKCkge1xuICAgICAgaWYgKHRpbWVXaGVuV2FpdGluZyAhPT0gX3RoaXM3LmN1cnJlbnRUaW1lKCkpIHtcbiAgICAgICAgX3RoaXM3LnJlbW92ZUNsYXNzKCd2anMtd2FpdGluZycpO1xuXG4gICAgICAgIF90aGlzNy5vZmYoJ3RpbWV1cGRhdGUnLCB0aW1lVXBkYXRlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9uKCd0aW1ldXBkYXRlJywgdGltZVVwZGF0ZUxpc3RlbmVyKTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlnZ2VyIHRoZSBgY2FucGxheWAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gICAqID4gTm90ZTogVGhpcyBpcyBub3QgY29uc2lzdGVudCBiZXR3ZWVuIGJyb3dzZXJzLiBTZWUgIzEzNTFcbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNjYW5wbGF5XG4gICAqIEBsaXN0ZW5zIFRlY2gjY2FucGxheVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoQ2FuUGxheV8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoQ2FuUGxheV8oKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXdhaXRpbmcnKTtcbiAgICAvKipcbiAgICAgKiBUaGUgbWVkaWEgaGFzIGEgcmVhZHlTdGF0ZSBvZiBIQVZFX0ZVVFVSRV9EQVRBIG9yIGdyZWF0ZXIuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI2NhbnBsYXlcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ2NhbnBsYXknKTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlnZ2VyIHRoZSBgY2FucGxheXRocm91Z2hgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI2NhbnBsYXl0aHJvdWdoXG4gICAqIEBsaXN0ZW5zIFRlY2gjY2FucGxheXRocm91Z2hcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaENhblBsYXlUaHJvdWdoXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hDYW5QbGF5VGhyb3VnaF8oKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXdhaXRpbmcnKTtcbiAgICAvKipcbiAgICAgKiBUaGUgbWVkaWEgaGFzIGEgcmVhZHlTdGF0ZSBvZiBIQVZFX0VOT1VHSF9EQVRBIG9yIGdyZWF0ZXIuIFRoaXMgbWVhbnMgdGhhdCB0aGVcbiAgICAgKiBlbnRpcmUgbWVkaWEgZmlsZSBjYW4gYmUgcGxheWVkIHdpdGhvdXQgYnVmZmVyaW5nLlxuICAgICAqXG4gICAgICogQGV2ZW50IFBsYXllciNjYW5wbGF5dGhyb3VnaFxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignY2FucGxheXRocm91Z2gnKTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlnZ2VyIHRoZSBgcGxheWluZ2AgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjcGxheWluZ1xuICAgKiBAbGlzdGVucyBUZWNoI3BsYXlpbmdcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaFBsYXlpbmdfID0gZnVuY3Rpb24gaGFuZGxlVGVjaFBsYXlpbmdfKCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy13YWl0aW5nJyk7XG4gICAgLyoqXG4gICAgICogVGhlIG1lZGlhIGlzIG5vIGxvbmdlciBibG9ja2VkIGZyb20gcGxheWJhY2ssIGFuZCBoYXMgc3RhcnRlZCBwbGF5aW5nLlxuICAgICAqXG4gICAgICogQGV2ZW50IFBsYXllciNwbGF5aW5nXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdwbGF5aW5nJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHJpZ2dlciB0aGUgYHNlZWtpbmdgIGV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZCBieSB0aGUge0BsaW5rIFRlY2h9LlxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI3NlZWtpbmdcbiAgICogQGxpc3RlbnMgVGVjaCNzZWVraW5nXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hTZWVraW5nXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hTZWVraW5nXygpIHtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtc2Vla2luZycpO1xuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW5ldmVyIHRoZSBwbGF5ZXIgaXMganVtcGluZyB0byBhIG5ldyB0aW1lXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI3NlZWtpbmdcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ3NlZWtpbmcnKTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlnZ2VyIHRoZSBgc2Vla2VkYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNzZWVrZWRcbiAgICogQGxpc3RlbnMgVGVjaCNzZWVrZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaFNlZWtlZF8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoU2Vla2VkXygpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtc2Vla2luZycpO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1lbmRlZCcpO1xuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIHBsYXllciBoYXMgZmluaXNoZWQganVtcGluZyB0byBhIG5ldyB0aW1lXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI3NlZWtlZFxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignc2Vla2VkJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHJpZ2dlciB0aGUgYGZpcnN0cGxheWAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjZmlyc3RwbGF5XG4gICAqIEBsaXN0ZW5zIFRlY2gjZmlyc3RwbGF5XG4gICAqIEBkZXByZWNhdGVkIEFzIG9mIDYuMCBmaXJzdHBsYXkgZXZlbnQgaXMgZGVwcmVjYXRlZC5cbiAgICogICAgICAgICAgICAgQXMgb2YgNi4wIHBhc3NpbmcgdGhlIGBzdGFydHRpbWVgIG9wdGlvbiB0byB0aGUgcGxheWVyIGFuZCB0aGUgZmlyc3RwbGF5IGV2ZW50IGFyZSBkZXByZWNhdGVkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoRmlyc3RQbGF5XyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hGaXJzdFBsYXlfKCkge1xuICAgIC8vIElmIHRoZSBmaXJzdCBzdGFydHRpbWUgYXR0cmlidXRlIGlzIHNwZWNpZmllZFxuICAgIC8vIHRoZW4gd2Ugd2lsbCBzdGFydCBhdCB0aGUgZ2l2ZW4gb2Zmc2V0IGluIHNlY29uZHNcbiAgICBpZiAodGhpcy5vcHRpb25zXy5zdGFydHRpbWUpIHtcbiAgICAgIGxvZy53YXJuKCdQYXNzaW5nIHRoZSBgc3RhcnR0aW1lYCBvcHRpb24gdG8gdGhlIHBsYXllciB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gNi4wJyk7XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lKHRoaXMub3B0aW9uc18uc3RhcnR0aW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLmFkZENsYXNzKCd2anMtaGFzLXN0YXJ0ZWQnKTtcbiAgICAvKipcbiAgICAgKiBGaXJlZCB0aGUgZmlyc3QgdGltZSBhIHZpZGVvIGlzIHBsYXllZC4gTm90IHBhcnQgb2YgdGhlIEhMUyBzcGVjLCBhbmQgdGhpcyBpc1xuICAgICAqIHByb2JhYmx5IG5vdCB0aGUgYmVzdCBpbXBsZW1lbnRhdGlvbiB5ZXQsIHNvIHVzZSBzcGFyaW5nbHkuIElmIHlvdSBkb24ndCBoYXZlIGFcbiAgICAgKiByZWFzb24gdG8gcHJldmVudCBwbGF5YmFjaywgdXNlIGBteVBsYXllci5vbmUoJ3BsYXknKTtgIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI2ZpcnN0cGxheVxuICAgICAqIEBkZXByZWNhdGVkIEFzIG9mIDYuMCBmaXJzdHBsYXkgZXZlbnQgaXMgZGVwcmVjYXRlZC5cbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ2ZpcnN0cGxheScpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWdnZXIgdGhlIGBwYXVzZWAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjcGF1c2VcbiAgICogQGxpc3RlbnMgVGVjaCNwYXVzZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoUGF1c2VfID0gZnVuY3Rpb24gaGFuZGxlVGVjaFBhdXNlXygpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtcGxheWluZycpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wYXVzZWQnKTtcbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuZXZlciB0aGUgbWVkaWEgaGFzIGJlZW4gcGF1c2VkXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI3BhdXNlXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdwYXVzZScpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWdnZXIgdGhlIGBlbmRlZGAgZXZlbnQgdGhhdCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSB7QGxpbmsgVGVjaH0uXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjZW5kZWRcbiAgICogQGxpc3RlbnMgVGVjaCNlbmRlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoRW5kZWRfID0gZnVuY3Rpb24gaGFuZGxlVGVjaEVuZGVkXygpIHtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtZW5kZWQnKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnNfLmxvb3ApIHtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUoMCk7XG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnBhdXNlZCgpKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIGVuZCBvZiB0aGUgbWVkaWEgcmVzb3VyY2UgaXMgcmVhY2hlZCAoY3VycmVudFRpbWUgPT0gZHVyYXRpb24pXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI2VuZGVkXG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG5cbiAgICB0aGlzLnRyaWdnZXIoJ2VuZGVkJyk7XG4gIH1cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW4gdGhlIGR1cmF0aW9uIG9mIHRoZSBtZWRpYSByZXNvdXJjZSBpcyBmaXJzdCBrbm93biBvciBjaGFuZ2VkXG4gICAqXG4gICAqIEBsaXN0ZW5zIFRlY2gjZHVyYXRpb25jaGFuZ2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hEdXJhdGlvbkNoYW5nZV8oKSB7XG4gICAgdGhpcy5kdXJhdGlvbih0aGlzLnRlY2hHZXRfKCdkdXJhdGlvbicpKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGEgY2xpY2sgb24gdGhlIG1lZGlhIGVsZW1lbnQgdG8gcGxheS9wYXVzZVxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgdGhlIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgZnVuY3Rpb24gdG8gdHJpZ2dlclxuICAgKlxuICAgKiBAbGlzdGVucyBUZWNoI21vdXNldXBcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaENsaWNrXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hDbGlja18oZXZlbnQpIHtcbiAgICBpZiAoIWlzU2luZ2xlTGVmdENsaWNrKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gV2hlbiBjb250cm9scyBhcmUgZGlzYWJsZWQgYSBjbGljayBzaG91bGQgbm90IHRvZ2dsZSBwbGF5YmFjayBiZWNhdXNlXG4gICAgLy8gdGhlIGNsaWNrIGlzIGNvbnNpZGVyZWQgYSBjb250cm9sXG5cblxuICAgIGlmICghdGhpcy5jb250cm9sc18pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wYXVzZWQoKSkge1xuICAgICAgc2lsZW5jZVByb21pc2UodGhpcy5wbGF5KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYSBkb3VibGUtY2xpY2sgb24gdGhlIG1lZGlhIGVsZW1lbnQgdG8gZW50ZXIvZXhpdCBmdWxsc2NyZWVuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICB0aGUgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byB0cmlnZ2VyXG4gICAqXG4gICAqIEBsaXN0ZW5zIFRlY2gjZGJsY2xpY2tcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaERvdWJsZUNsaWNrXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hEb3VibGVDbGlja18oZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuY29udHJvbHNfKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyB3ZSBkbyBub3Qgd2FudCB0byB0b2dnbGUgZnVsbHNjcmVlbiBzdGF0ZVxuICAgIC8vIHdoZW4gZG91YmxlLWNsaWNraW5nIGluc2lkZSBhIGNvbnRyb2wgYmFyIG9yIGEgbW9kYWxcblxuXG4gICAgdmFyIGluQWxsb3dlZEVscyA9IEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwodGhpcy4kJCgnLnZqcy1jb250cm9sLWJhciwgLnZqcy1tb2RhbC1kaWFsb2cnKSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gZWwuY29udGFpbnMoZXZlbnQudGFyZ2V0KTtcbiAgICB9KTtcblxuICAgIGlmICghaW5BbGxvd2VkRWxzKSB7XG4gICAgICAvKlxuICAgICAgICogb3B0aW9ucy51c2VyQWN0aW9ucy5kb3VibGVDbGlja1xuICAgICAgICpcbiAgICAgICAqIElmIGB1bmRlZmluZWRgIG9yIGB0cnVlYCwgZG91YmxlLWNsaWNrIHRvZ2dsZXMgZnVsbHNjcmVlbiBpZiBjb250cm9scyBhcmUgcHJlc2VudFxuICAgICAgICogU2V0IHRvIGBmYWxzZWAgdG8gZGlzYWJsZSBkb3VibGUtY2xpY2sgaGFuZGxpbmdcbiAgICAgICAqIFNldCB0byBhIGZ1bmN0aW9uIHRvIHN1YnN0aXR1dGUgYW4gZXh0ZXJuYWwgZG91YmxlLWNsaWNrIGhhbmRsZXJcbiAgICAgICAqL1xuICAgICAgaWYgKHRoaXMub3B0aW9uc18gPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zID09PSB1bmRlZmluZWQgfHwgdGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucy5kb3VibGVDbGljayA9PT0gdW5kZWZpbmVkIHx8IHRoaXMub3B0aW9uc18udXNlckFjdGlvbnMuZG91YmxlQ2xpY2sgIT09IGZhbHNlKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNfICE9PSB1bmRlZmluZWQgJiYgdGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmRvdWJsZUNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zXy51c2VyQWN0aW9ucy5kb3VibGVDbGljay5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRnVsbHNjcmVlbigpKSB7XG4gICAgICAgICAgdGhpcy5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGEgdGFwIG9uIHRoZSBtZWRpYSBlbGVtZW50LiBJdCB3aWxsIHRvZ2dsZSB0aGUgdXNlclxuICAgKiBhY3Rpdml0eSBzdGF0ZSwgd2hpY2ggaGlkZXMgYW5kIHNob3dzIHRoZSBjb250cm9scy5cbiAgICpcbiAgICogQGxpc3RlbnMgVGVjaCN0YXBcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaFRhcF8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoVGFwXygpIHtcbiAgICB0aGlzLnVzZXJBY3RpdmUoIXRoaXMudXNlckFjdGl2ZSgpKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHRvdWNoIHRvIHN0YXJ0XG4gICAqXG4gICAqIEBsaXN0ZW5zIFRlY2gjdG91Y2hzdGFydFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoVG91Y2hTdGFydF8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoVG91Y2hTdGFydF8oKSB7XG4gICAgdGhpcy51c2VyV2FzQWN0aXZlID0gdGhpcy51c2VyQWN0aXZlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSB0b3VjaCB0byBtb3ZlXG4gICAqXG4gICAqIEBsaXN0ZW5zIFRlY2gjdG91Y2htb3ZlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hUb3VjaE1vdmVfID0gZnVuY3Rpb24gaGFuZGxlVGVjaFRvdWNoTW92ZV8oKSB7XG4gICAgaWYgKHRoaXMudXNlcldhc0FjdGl2ZSkge1xuICAgICAgdGhpcy5yZXBvcnRVc2VyQWN0aXZpdHkoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSB0b3VjaCB0byBlbmRcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIHRoZSB0b3VjaGVuZCBldmVudCB0aGF0IHRyaWdnZXJlZFxuICAgKiAgICAgICAgdGhpcyBmdW5jdGlvblxuICAgKlxuICAgKiBAbGlzdGVucyBUZWNoI3RvdWNoZW5kXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hUb3VjaEVuZF8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoVG91Y2hFbmRfKGV2ZW50KSB7XG4gICAgLy8gU3RvcCB0aGUgbW91c2UgZXZlbnRzIGZyb20gYWxzbyBoYXBwZW5pbmdcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIC8qKlxuICAgKiBuYXRpdmUgY2xpY2sgZXZlbnRzIG9uIHRoZSBTV0YgYXJlbid0IHRyaWdnZXJlZCBvbiBJRTExLCBXaW44LjFSVFxuICAgKiB1c2Ugc3RhZ2VjbGljayBldmVudHMgdHJpZ2dlcmVkIGZyb20gaW5zaWRlIHRoZSBTV0YgaW5zdGVhZFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAbGlzdGVucyBzdGFnZWNsaWNrXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVN0YWdlQ2xpY2tfID0gZnVuY3Rpb24gaGFuZGxlU3RhZ2VDbGlja18oKSB7XG4gICAgdGhpcy5yZXBvcnRVc2VyQWN0aXZpdHkoKTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9nZ2xlRnVsbHNjcmVlbkNsYXNzXyA9IGZ1bmN0aW9uIHRvZ2dsZUZ1bGxzY3JlZW5DbGFzc18oKSB7XG4gICAgaWYgKHRoaXMuaXNGdWxsc2NyZWVuKCkpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1mdWxsc2NyZWVuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1mdWxsc2NyZWVuJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiB3aGVuIHRoZSBkb2N1bWVudCBmc2NoYW5nZSBldmVudCB0cmlnZ2VycyBpdCBjYWxscyB0aGlzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRvY3VtZW50RnVsbHNjcmVlbkNoYW5nZV8gPSBmdW5jdGlvbiBkb2N1bWVudEZ1bGxzY3JlZW5DaGFuZ2VfKGUpIHtcbiAgICB2YXIgdGFyZ2V0UGxheWVyID0gZS50YXJnZXQucGxheWVyOyAvLyBpZiBhbm90aGVyIHBsYXllciB3YXMgZnVsbHNjcmVlblxuICAgIC8vIGRvIGEgbnVsbCBjaGVjayBmb3IgdGFyZ2V0UGxheWVyIGJlY2F1c2Ugb2xkZXIgZmlyZWZveCdzIHdvdWxkIHB1dCBkb2N1bWVudCBhcyBlLnRhcmdldFxuXG4gICAgaWYgKHRhcmdldFBsYXllciAmJiB0YXJnZXRQbGF5ZXIgIT09IHRoaXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZWwgPSB0aGlzLmVsKCk7XG4gICAgdmFyIGlzRnMgPSBkb2N1bWVudFt0aGlzLmZzQXBpXy5mdWxsc2NyZWVuRWxlbWVudF0gPT09IGVsO1xuXG4gICAgaWYgKCFpc0ZzICYmIGVsLm1hdGNoZXMpIHtcbiAgICAgIGlzRnMgPSBlbC5tYXRjaGVzKCc6JyArIHRoaXMuZnNBcGlfLmZ1bGxzY3JlZW4pO1xuICAgIH0gZWxzZSBpZiAoIWlzRnMgJiYgZWwubXNNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgIGlzRnMgPSBlbC5tc01hdGNoZXNTZWxlY3RvcignOicgKyB0aGlzLmZzQXBpXy5mdWxsc2NyZWVuKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzRnVsbHNjcmVlbihpc0ZzKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIFRlY2ggRnVsbHNjcmVlbiBDaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIHRoZSBmdWxsc2NyZWVuY2hhbmdlIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICogICAgICAgIHRoZSBkYXRhIHRoYXQgd2FzIHNlbnQgd2l0aCB0aGUgZXZlbnRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQGxpc3RlbnMgVGVjaCNmdWxsc2NyZWVuY2hhbmdlXG4gICAqIEBmaXJlcyBQbGF5ZXIjZnVsbHNjcmVlbmNoYW5nZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoRnVsbHNjcmVlbkNoYW5nZV8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoRnVsbHNjcmVlbkNoYW5nZV8oZXZlbnQsIGRhdGEpIHtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgaWYgKGRhdGEubmF0aXZlSU9TRnVsbHNjcmVlbikge1xuICAgICAgICB0aGlzLnRvZ2dsZUNsYXNzKCd2anMtaW9zLW5hdGl2ZS1mcycpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmlzRnVsbHNjcmVlbihkYXRhLmlzRnVsbHNjcmVlbik7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5oYW5kbGVUZWNoRnVsbHNjcmVlbkVycm9yXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hGdWxsc2NyZWVuRXJyb3JfKGV2ZW50LCBlcnIpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5lcnJvcicsIGVycik7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvZ2dsZVBpY3R1cmVJblBpY3R1cmVDbGFzc18gPSBmdW5jdGlvbiB0b2dnbGVQaWN0dXJlSW5QaWN0dXJlQ2xhc3NfKCkge1xuICAgIGlmICh0aGlzLmlzSW5QaWN0dXJlSW5QaWN0dXJlKCkpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1waWN0dXJlLWluLXBpY3R1cmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXBpY3R1cmUtaW4tcGljdHVyZScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlIFRlY2ggRW50ZXIgUGljdHVyZS1pbi1QaWN0dXJlLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgdGhlIGVudGVycGljdHVyZWlucGljdHVyZSBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGlzIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBsaXN0ZW5zIFRlY2gjZW50ZXJwaWN0dXJlaW5waWN0dXJlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hFbnRlclBpY3R1cmVJblBpY3R1cmVfID0gZnVuY3Rpb24gaGFuZGxlVGVjaEVudGVyUGljdHVyZUluUGljdHVyZV8oZXZlbnQpIHtcbiAgICB0aGlzLmlzSW5QaWN0dXJlSW5QaWN0dXJlKHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgVGVjaCBMZWF2ZSBQaWN0dXJlLWluLVBpY3R1cmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR+RXZlbnR9IGV2ZW50XG4gICAqICAgICAgICB0aGUgbGVhdmVwaWN0dXJlaW5waWN0dXJlIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZnVuY3Rpb25cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQGxpc3RlbnMgVGVjaCNsZWF2ZXBpY3R1cmVpbnBpY3R1cmVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlVGVjaExlYXZlUGljdHVyZUluUGljdHVyZV8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoTGVhdmVQaWN0dXJlSW5QaWN0dXJlXyhldmVudCkge1xuICAgIHRoaXMuaXNJblBpY3R1cmVJblBpY3R1cmUoZmFsc2UpO1xuICB9XG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgbG9hZGluZyBvZiBhbiBhdWRpby92aWRlby5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQGxpc3RlbnMgVGVjaCNlcnJvclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoRXJyb3JfID0gZnVuY3Rpb24gaGFuZGxlVGVjaEVycm9yXygpIHtcbiAgICB2YXIgZXJyb3IgPSB0aGlzLnRlY2hfLmVycm9yKCk7XG4gICAgdGhpcy5lcnJvcihlcnJvcik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHJpZ2dlciB0aGUgYHRleHRkYXRhYCBldmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIHtAbGluayBUZWNofS5cbiAgICpcbiAgICogQGZpcmVzIFBsYXllciN0ZXh0ZGF0YVxuICAgKiBAbGlzdGVucyBUZWNoI3RleHRkYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVRlY2hUZXh0RGF0YV8gPSBmdW5jdGlvbiBoYW5kbGVUZWNoVGV4dERhdGFfKCkge1xuICAgIHZhciBkYXRhID0gbnVsbDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgZGF0YSA9IGFyZ3VtZW50c1sxXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB3ZSBnZXQgYSB0ZXh0ZGF0YSBldmVudCBmcm9tIHRlY2hcbiAgICAgKlxuICAgICAqIEBldmVudCBQbGF5ZXIjdGV4dGRhdGFcbiAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cblxuICAgIHRoaXMudHJpZ2dlcigndGV4dGRhdGEnLCBkYXRhKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9iamVjdCBmb3IgY2FjaGVkIHZhbHVlcy5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiAgICAgICAgIGdldCB0aGUgY3VycmVudCBvYmplY3QgY2FjaGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0Q2FjaGUgPSBmdW5jdGlvbiBnZXRDYWNoZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZV87XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgY2FjaGUgb2JqZWN0LlxuICAgKlxuICAgKiBVc2luZyB0aGlzIGZ1bmN0aW9uIG91dHNpZGUgdGhlIHBsYXllciBjb25zdHJ1Y3RvciBvciByZXNldCBtZXRob2QgbWF5XG4gICAqIGhhdmUgdW5pbnRlbmRlZCBzaWRlLWVmZmVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0Q2FjaGVfID0gZnVuY3Rpb24gcmVzZXRDYWNoZV8oKSB7XG4gICAgdGhpcy5jYWNoZV8gPSB7XG4gICAgICAvLyBSaWdodCBub3csIHRoZSBjdXJyZW50VGltZSBpcyBub3QgX3JlYWxseV8gY2FjaGVkIGJlY2F1c2UgaXQgaXMgYWx3YXlzXG4gICAgICAvLyByZXRyaWV2ZWQgZnJvbSB0aGUgdGVjaCAoc2VlOiBjdXJyZW50VGltZSkuIEhvd2V2ZXIsIGZvciBjb21wbGV0ZW5lc3MsXG4gICAgICAvLyB3ZSBzZXQgaXQgdG8gemVybyBoZXJlIHRvIGVuc3VyZSB0aGF0IGlmIHdlIGRvIHN0YXJ0IGFjdHVhbGx5IGNhY2hpbmdcbiAgICAgIC8vIGl0LCB3ZSByZXNldCBpdCBhbG9uZyB3aXRoIGV2ZXJ5dGhpbmcgZWxzZS5cbiAgICAgIGN1cnJlbnRUaW1lOiAwLFxuICAgICAgaW5pdFRpbWU6IDAsXG4gICAgICBpbmFjdGl2aXR5VGltZW91dDogdGhpcy5vcHRpb25zXy5pbmFjdGl2aXR5VGltZW91dCxcbiAgICAgIGR1cmF0aW9uOiBOYU4sXG4gICAgICBsYXN0Vm9sdW1lOiAxLFxuICAgICAgbGFzdFBsYXliYWNrUmF0ZTogdGhpcy5kZWZhdWx0UGxheWJhY2tSYXRlKCksXG4gICAgICBtZWRpYTogbnVsbCxcbiAgICAgIHNyYzogJycsXG4gICAgICBzb3VyY2U6IHt9LFxuICAgICAgc291cmNlczogW10sXG4gICAgICB2b2x1bWU6IDFcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBQYXNzIHZhbHVlcyB0byB0aGUgcGxheWJhY2sgdGVjaFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW21ldGhvZF1cbiAgICogICAgICAgIHRoZSBtZXRob2QgdG8gY2FsbFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYXJnXG4gICAqICAgICAgICB0aGUgYXJndW1lbnQgdG8gcGFzc1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50ZWNoQ2FsbF8gPSBmdW5jdGlvbiB0ZWNoQ2FsbF8obWV0aG9kLCBhcmcpIHtcbiAgICAvLyBJZiBpdCdzIG5vdCByZWFkeSB5ZXQsIGNhbGwgbWV0aG9kIHdoZW4gaXQgaXNcbiAgICB0aGlzLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChtZXRob2QgaW4gYWxsb3dlZFNldHRlcnMpIHtcbiAgICAgICAgcmV0dXJuIHNldCh0aGlzLm1pZGRsZXdhcmVfLCB0aGlzLnRlY2hfLCBtZXRob2QsIGFyZyk7XG4gICAgICB9IGVsc2UgaWYgKG1ldGhvZCBpbiBhbGxvd2VkTWVkaWF0b3JzKSB7XG4gICAgICAgIHJldHVybiBtZWRpYXRlKHRoaXMubWlkZGxld2FyZV8sIHRoaXMudGVjaF8sIG1ldGhvZCwgYXJnKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMudGVjaF8pIHtcbiAgICAgICAgICB0aGlzLnRlY2hfW21ldGhvZF0oYXJnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2coZSk7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBjYWxscyBjYW4ndCB3YWl0IGZvciB0aGUgdGVjaCwgYW5kIHNvbWV0aW1lcyBkb24ndCBuZWVkIHRvLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAqICAgICAgICBUZWNoIG1ldGhvZFxuICAgKlxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbnx1bmRlZmluZWR9XG4gICAqICAgICAgICAgdGhlIG1ldGhvZCBvciB1bmRlZmluZWRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8udGVjaEdldF8gPSBmdW5jdGlvbiB0ZWNoR2V0XyhtZXRob2QpIHtcbiAgICBpZiAoIXRoaXMudGVjaF8gfHwgIXRoaXMudGVjaF8uaXNSZWFkeV8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobWV0aG9kIGluIGFsbG93ZWRHZXR0ZXJzKSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMubWlkZGxld2FyZV8sIHRoaXMudGVjaF8sIG1ldGhvZCk7XG4gICAgfSBlbHNlIGlmIChtZXRob2QgaW4gYWxsb3dlZE1lZGlhdG9ycykge1xuICAgICAgcmV0dXJuIG1lZGlhdGUodGhpcy5taWRkbGV3YXJlXywgdGhpcy50ZWNoXywgbWV0aG9kKTtcbiAgICB9IC8vIEZsYXNoIGxpa2VzIHRvIGRpZSBhbmQgcmVsb2FkIHdoZW4geW91IGhpZGUgb3IgcmVwb3NpdGlvbiBpdC5cbiAgICAvLyBJbiB0aGVzZSBjYXNlcyB0aGUgb2JqZWN0IG1ldGhvZHMgZ28gYXdheSBhbmQgd2UgZ2V0IGVycm9ycy5cbiAgICAvLyBXaGVuIHRoYXQgaGFwcGVucyB3ZSdsbCBjYXRjaCB0aGUgZXJyb3JzIGFuZCBpbmZvcm0gdGVjaCB0aGF0IGl0J3Mgbm90IHJlYWR5IGFueSBtb3JlLlxuXG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMudGVjaF9bbWV0aG9kXSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFdoZW4gYnVpbGRpbmcgYWRkaXRpb25hbCB0ZWNoIGxpYnMsIGFuIGV4cGVjdGVkIG1ldGhvZCBtYXkgbm90IGJlIGRlZmluZWQgeWV0XG4gICAgICBpZiAodGhpcy50ZWNoX1ttZXRob2RdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG9nKFwiVmlkZW8uanM6IFwiICsgbWV0aG9kICsgXCIgbWV0aG9kIG5vdCBkZWZpbmVkIGZvciBcIiArIHRoaXMudGVjaE5hbWVfICsgXCIgcGxheWJhY2sgdGVjaG5vbG9neS5cIiwgZSk7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9IC8vIFdoZW4gYSBtZXRob2QgaXNuJ3QgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QgaXQgdGhyb3dzIGEgVHlwZUVycm9yXG5cblxuICAgICAgaWYgKGUubmFtZSA9PT0gJ1R5cGVFcnJvcicpIHtcbiAgICAgICAgbG9nKFwiVmlkZW8uanM6IFwiICsgbWV0aG9kICsgXCIgdW5hdmFpbGFibGUgb24gXCIgKyB0aGlzLnRlY2hOYW1lXyArIFwiIHBsYXliYWNrIHRlY2hub2xvZ3kgZWxlbWVudC5cIiwgZSk7XG4gICAgICAgIHRoaXMudGVjaF8uaXNSZWFkeV8gPSBmYWxzZTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0gLy8gSWYgZXJyb3IgdW5rbm93biwganVzdCBsb2cgYW5kIHRocm93XG5cblxuICAgICAgbG9nKGUpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gYmVnaW4gcGxheWJhY2sgYXQgdGhlIGZpcnN0IG9wcG9ydHVuaXR5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfHVuZGVmaW5lZH1cbiAgICogICAgICAgICBSZXR1cm5zIGEgcHJvbWlzZSBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBQcm9taXNlcyAob3Igb25lXG4gICAqICAgICAgICAgd2FzIHBhc3NlZCBpbiBhcyBhbiBvcHRpb24pLiBUaGlzIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCBvblxuICAgKiAgICAgICAgIHRoZSByZXR1cm4gdmFsdWUgb2YgcGxheS4gSWYgdGhpcyBpcyB1bmRlZmluZWQgaXQgd2lsbCBmdWxmaWxsIHRoZVxuICAgKiAgICAgICAgIHByb21pc2UgY2hhaW4gb3RoZXJ3aXNlIHRoZSBwcm9taXNlIGNoYWluIHdpbGwgYmUgZnVsZmlsbGVkIHdoZW5cbiAgICogICAgICAgICB0aGUgcHJvbWlzZSBmcm9tIHBsYXkgaXMgZnVsZmlsbGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wbGF5ID0gZnVuY3Rpb24gcGxheSgpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIHZhciBQcm9taXNlQ2xhc3MgPSB0aGlzLm9wdGlvbnNfLlByb21pc2UgfHwgd2luZG93JDEuUHJvbWlzZTtcblxuICAgIGlmIChQcm9taXNlQ2xhc3MpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNsYXNzKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIF90aGlzOC5wbGF5XyhyZXNvbHZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBsYXlfKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBhY3R1YWwgbG9naWMgZm9yIHBsYXksIHRha2VzIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIHJlc29sdmVkIG9uIHRoZVxuICAgKiByZXR1cm4gdmFsdWUgb2YgcGxheS4gVGhpcyBhbGxvd3MgdXMgdG8gcmVzb2x2ZSB0byB0aGUgcGxheSBwcm9taXNlIGlmIHRoZXJlXG4gICAqIGlzIG9uZSBvbiBtb2Rlcm4gYnJvd3NlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja11cbiAgICogICAgICAgIFRoZSBjYWxsYmFjayB0aGF0IHNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGUgdGVjaHMgcGxheSBpcyBhY3R1YWxseSBjYWxsZWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGxheV8gPSBmdW5jdGlvbiBwbGF5XyhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgaWYgKGNhbGxiYWNrID09PSB2b2lkIDApIHtcbiAgICAgIGNhbGxiYWNrID0gc2lsZW5jZVByb21pc2U7XG4gICAgfVxuXG4gICAgdGhpcy5wbGF5Q2FsbGJhY2tzXy5wdXNoKGNhbGxiYWNrKTtcbiAgICB2YXIgaXNTcmNSZWFkeSA9IEJvb2xlYW4oIXRoaXMuY2hhbmdpbmdTcmNfICYmICh0aGlzLnNyYygpIHx8IHRoaXMuY3VycmVudFNyYygpKSk7IC8vIHRyZWF0IGNhbGxzIHRvIHBsYXlfIHNvbWV3aGF0IGxpa2UgdGhlIGBvbmVgIGV2ZW50IGZ1bmN0aW9uXG5cbiAgICBpZiAodGhpcy53YWl0VG9QbGF5Xykge1xuICAgICAgdGhpcy5vZmYoWydyZWFkeScsICdsb2Fkc3RhcnQnXSwgdGhpcy53YWl0VG9QbGF5Xyk7XG4gICAgICB0aGlzLndhaXRUb1BsYXlfID0gbnVsbDtcbiAgICB9IC8vIGlmIHRoZSBwbGF5ZXIvdGVjaCBpcyBub3QgcmVhZHkgb3IgdGhlIHNyYyBpdHNlbGYgaXMgbm90IHJlYWR5XG4gICAgLy8gcXVldWUgdXAgYSBjYWxsIHRvIHBsYXkgb24gYHJlYWR5YCBvciBgbG9hZHN0YXJ0YFxuXG5cbiAgICBpZiAoIXRoaXMuaXNSZWFkeV8gfHwgIWlzU3JjUmVhZHkpIHtcbiAgICAgIHRoaXMud2FpdFRvUGxheV8gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBfdGhpczkucGxheV8oKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMub25lKFsncmVhZHknLCAnbG9hZHN0YXJ0J10sIHRoaXMud2FpdFRvUGxheV8pOyAvLyBpZiB3ZSBhcmUgaW4gU2FmYXJpLCB0aGVyZSBpcyBhIGhpZ2ggY2hhbmNlIHRoYXQgbG9hZHN0YXJ0IHdpbGwgdHJpZ2dlciBhZnRlciB0aGUgZ2VzdHVyZSB0aW1lcGVyaW9kXG4gICAgICAvLyBpbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gcHJpbWUgdGhlIHZpZGVvIGVsZW1lbnQgYnkgY2FsbGluZyBsb2FkIHNvIGl0J2xsIGJlIHJlYWR5IGluIHRpbWVcblxuICAgICAgaWYgKCFpc1NyY1JlYWR5ICYmIChJU19BTllfU0FGQVJJIHx8IElTX0lPUykpIHtcbiAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoZSBwbGF5ZXIvdGVjaCBpcyByZWFkeSBhbmQgd2UgaGF2ZSBhIHNvdXJjZSwgd2UgY2FuIGF0dGVtcHQgcGxheWJhY2suXG5cblxuICAgIHZhciB2YWwgPSB0aGlzLnRlY2hHZXRfKCdwbGF5Jyk7IC8vIHBsYXkgd2FzIHRlcm1pbmF0ZWQgaWYgdGhlIHJldHVybmVkIHZhbHVlIGlzIG51bGxcblxuICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgIHRoaXMucnVuUGxheVRlcm1pbmF0ZWRRdWV1ZV8oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ydW5QbGF5Q2FsbGJhY2tzXyh2YWwpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgcnVuIHdoZW4gaWYgcGxheSBpcyB0ZXJtaW5hdGVkLiBJZiBwbGF5XG4gICAqIHJ1blBsYXlDYWxsYmFja3NfIGlzIHJ1biB0aGVzZSBmdW5jdGlvbiB3aWxsIG5vdCBiZSBydW4uIFRoaXMgYWxsb3dzIHVzXG4gICAqIHRvIGRpZmZlcmVuY2lhdGUgYmV0d2VlbiBhIHRlcm1pbmF0ZWQgcGxheSBhbmQgYW4gYWN0dWFsIGNhbGwgdG8gcGxheS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucnVuUGxheVRlcm1pbmF0ZWRRdWV1ZV8gPSBmdW5jdGlvbiBydW5QbGF5VGVybWluYXRlZFF1ZXVlXygpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLnBsYXlUZXJtaW5hdGVkUXVldWVfLnNsaWNlKDApO1xuICAgIHRoaXMucGxheVRlcm1pbmF0ZWRRdWV1ZV8gPSBbXTtcbiAgICBxdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChxKSB7XG4gICAgICBxKCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gYSBjYWxsYmFjayB0byBwbGF5IGlzIGRlbGF5ZWQgd2UgaGF2ZSB0byBydW4gdGhlc2VcbiAgICogY2FsbGJhY2tzIHdoZW4gcGxheSBpcyBhY3R1YWxseSBjYWxsZWQgb24gdGhlIHRlY2guIFRoaXMgZnVuY3Rpb25cbiAgICogcnVucyB0aGUgY2FsbGJhY2tzIHRoYXQgd2VyZSBkZWxheWVkIGFuZCBhY2NlcHRzIHRoZSByZXR1cm4gdmFsdWVcbiAgICogZnJvbSB0aGUgdGVjaC5cbiAgICpcbiAgICogQHBhcmFtIHt1bmRlZmluZWR8UHJvbWlzZX0gdmFsXG4gICAqICAgICAgICBUaGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIHRlY2guXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJ1blBsYXlDYWxsYmFja3NfID0gZnVuY3Rpb24gcnVuUGxheUNhbGxiYWNrc18odmFsKSB7XG4gICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMucGxheUNhbGxiYWNrc18uc2xpY2UoMCk7XG4gICAgdGhpcy5wbGF5Q2FsbGJhY2tzXyA9IFtdOyAvLyBjbGVhciBwbGF5IHRlcm1pbmF0ZWRRdWV1ZSBzaW5jZSB3ZSBmaW5pc2hlZCBhIHJlYWwgcGxheVxuXG4gICAgdGhpcy5wbGF5VGVybWluYXRlZFF1ZXVlXyA9IFtdO1xuICAgIGNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgY2IodmFsKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUGF1c2UgdGhlIHZpZGVvIHBsYXliYWNrXG4gICAqXG4gICAqIEByZXR1cm4ge1BsYXllcn1cbiAgICogICAgICAgICBBIHJlZmVyZW5jZSB0byB0aGUgcGxheWVyIG9iamVjdCB0aGlzIGZ1bmN0aW9uIHdhcyBjYWxsZWQgb25cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICB0aGlzLnRlY2hDYWxsXygncGF1c2UnKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHBsYXllciBpcyBwYXVzZWQgb3IgaGFzIHlldCB0byBwbGF5XG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgLSBmYWxzZTogaWYgdGhlIG1lZGlhIGlzIGN1cnJlbnRseSBwbGF5aW5nXG4gICAqICAgICAgICAgLSB0cnVlOiBpZiBtZWRpYSBpcyBub3QgY3VycmVudGx5IHBsYXlpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGF1c2VkID0gZnVuY3Rpb24gcGF1c2VkKCkge1xuICAgIC8vIFRoZSBpbml0aWFsIHN0YXRlIG9mIHBhdXNlZCBzaG91bGQgYmUgdHJ1ZSAoaW4gU2FmYXJpIGl0J3MgYWN0dWFsbHkgZmFsc2UpXG4gICAgcmV0dXJuIHRoaXMudGVjaEdldF8oJ3BhdXNlZCcpID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgVGltZVJhbmdlIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgcmFuZ2VzIG9mIHRpbWUgdGhhdCB0aGUgdXNlclxuICAgKiBoYXMgcGxheWVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtUaW1lUmFuZ2V9XG4gICAqICAgICAgICAgQSB0aW1lIHJhbmdlIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYWxsIHRoZSBpbmNyZW1lbnRzIG9mIHRpbWUgdGhhdCBoYXZlXG4gICAqICAgICAgICAgYmVlbiBwbGF5ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBsYXllZCA9IGZ1bmN0aW9uIHBsYXllZCgpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0XygncGxheWVkJykgfHwgY3JlYXRlVGltZVJhbmdlcygwLCAwKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdXNlciBpcyBcInNjcnViYmluZ1wiLiBTY3J1YmJpbmcgaXNcbiAgICogd2hlbiB0aGUgdXNlciBoYXMgY2xpY2tlZCB0aGUgcHJvZ3Jlc3MgYmFyIGhhbmRsZSBhbmQgaXNcbiAgICogZHJhZ2dpbmcgaXQgYWxvbmcgdGhlIHByb2dyZXNzIGJhci5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbaXNTY3J1YmJpbmddXG4gICAqICAgICAgICB3aGV0aGVyIHRoZSB1c2VyIGlzIG9yIGlzIG5vdCBzY3J1YmJpbmdcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICBUaGUgdmFsdWUgb2Ygc2NydWJiaW5nIHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zY3J1YmJpbmcgPSBmdW5jdGlvbiBzY3J1YmJpbmcoaXNTY3J1YmJpbmcpIHtcbiAgICBpZiAodHlwZW9mIGlzU2NydWJiaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRoaXMuc2NydWJiaW5nXztcbiAgICB9XG5cbiAgICB0aGlzLnNjcnViYmluZ18gPSAhIWlzU2NydWJiaW5nO1xuICAgIHRoaXMudGVjaENhbGxfKCdzZXRTY3J1YmJpbmcnLCB0aGlzLnNjcnViYmluZ18pO1xuXG4gICAgaWYgKGlzU2NydWJiaW5nKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtc2NydWJiaW5nJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1zY3J1YmJpbmcnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGN1cnJlbnQgdGltZSAoaW4gc2Vjb25kcylcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbc2Vjb25kc11cbiAgICogICAgICAgIFRoZSB0aW1lIHRvIHNlZWsgdG8gaW4gc2Vjb25kc1xuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgLSB0aGUgY3VycmVudCB0aW1lIGluIHNlY29uZHMgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnRUaW1lID0gZnVuY3Rpb24gY3VycmVudFRpbWUoc2Vjb25kcykge1xuICAgIGlmICh0eXBlb2Ygc2Vjb25kcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChzZWNvbmRzIDwgMCkge1xuICAgICAgICBzZWNvbmRzID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmlzUmVhZHlfIHx8IHRoaXMuY2hhbmdpbmdTcmNfIHx8ICF0aGlzLnRlY2hfIHx8ICF0aGlzLnRlY2hfLmlzUmVhZHlfKSB7XG4gICAgICAgIHRoaXMuY2FjaGVfLmluaXRUaW1lID0gc2Vjb25kcztcbiAgICAgICAgdGhpcy5vZmYoJ2NhbnBsYXknLCB0aGlzLmFwcGx5SW5pdFRpbWVfKTtcbiAgICAgICAgdGhpcy5vbmUoJ2NhbnBsYXknLCB0aGlzLmFwcGx5SW5pdFRpbWVfKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRlY2hDYWxsXygnc2V0Q3VycmVudFRpbWUnLCBzZWNvbmRzKTtcbiAgICAgIHRoaXMuY2FjaGVfLmluaXRUaW1lID0gMDtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGNhY2hlIGxhc3QgY3VycmVudFRpbWUgYW5kIHJldHVybi4gZGVmYXVsdCB0byAwIHNlY29uZHNcbiAgICAvL1xuICAgIC8vIENhY2hpbmcgdGhlIGN1cnJlbnRUaW1lIGlzIG1lYW50IHRvIHByZXZlbnQgYSBtYXNzaXZlIGFtb3VudCBvZiByZWFkcyBvbiB0aGUgdGVjaCdzXG4gICAgLy8gY3VycmVudFRpbWUgd2hlbiBzY3J1YmJpbmcsIGJ1dCBtYXkgbm90IHByb3ZpZGUgbXVjaCBwZXJmb3JtYW5jZSBiZW5lZml0IGFmdGVyYWxsLlxuICAgIC8vIFNob3VsZCBiZSB0ZXN0ZWQuIEFsc28gc29tZXRoaW5nIGhhcyB0byByZWFkIHRoZSBhY3R1YWwgY3VycmVudCB0aW1lIG9yIHRoZSBjYWNoZSB3aWxsXG4gICAgLy8gbmV2ZXIgZ2V0IHVwZGF0ZWQuXG5cblxuICAgIHRoaXMuY2FjaGVfLmN1cnJlbnRUaW1lID0gdGhpcy50ZWNoR2V0XygnY3VycmVudFRpbWUnKSB8fCAwO1xuICAgIHJldHVybiB0aGlzLmNhY2hlXy5jdXJyZW50VGltZTtcbiAgfVxuICAvKipcbiAgICogQXBwbHkgdGhlIHZhbHVlIG9mIGluaXRUaW1lIHN0b3JlZCBpbiBjYWNoZSBhcyBjdXJyZW50VGltZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYXBwbHlJbml0VGltZV8gPSBmdW5jdGlvbiBhcHBseUluaXRUaW1lXygpIHtcbiAgICB0aGlzLmN1cnJlbnRUaW1lKHRoaXMuY2FjaGVfLmluaXRUaW1lKTtcbiAgfVxuICAvKipcbiAgICogTm9ybWFsbHkgZ2V0cyB0aGUgbGVuZ3RoIGluIHRpbWUgb2YgdGhlIHZpZGVvIGluIHNlY29uZHM7XG4gICAqIGluIGFsbCBidXQgdGhlIHJhcmVzdCB1c2UgY2FzZXMgYW4gYXJndW1lbnQgd2lsbCBOT1QgYmUgcGFzc2VkIHRvIHRoZSBtZXRob2RcbiAgICpcbiAgICogPiAqKk5PVEUqKjogVGhlIHZpZGVvIG11c3QgaGF2ZSBzdGFydGVkIGxvYWRpbmcgYmVmb3JlIHRoZSBkdXJhdGlvbiBjYW4gYmVcbiAgICoga25vd24sIGFuZCBpbiB0aGUgY2FzZSBvZiBGbGFzaCwgbWF5IG5vdCBiZSBrbm93biB1bnRpbCB0aGUgdmlkZW8gc3RhcnRzXG4gICAqIHBsYXlpbmcuXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjZHVyYXRpb25jaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmRzXVxuICAgKiAgICAgICAgVGhlIGR1cmF0aW9uIG9mIHRoZSB2aWRlbyB0byBzZXQgaW4gc2Vjb25kc1xuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgLSBUaGUgZHVyYXRpb24gb2YgdGhlIHZpZGVvIGluIHNlY29uZHMgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmR1cmF0aW9uID0gZnVuY3Rpb24gZHVyYXRpb24oc2Vjb25kcykge1xuICAgIGlmIChzZWNvbmRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBOYU4gaWYgdGhlIGR1cmF0aW9uIGlzIG5vdCBrbm93blxuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVfLmR1cmF0aW9uICE9PSB1bmRlZmluZWQgPyB0aGlzLmNhY2hlXy5kdXJhdGlvbiA6IE5hTjtcbiAgICB9XG5cbiAgICBzZWNvbmRzID0gcGFyc2VGbG9hdChzZWNvbmRzKTsgLy8gU3RhbmRhcmRpemUgb24gSW5maW5pdHkgZm9yIHNpZ25hbGluZyB2aWRlbyBpcyBsaXZlXG5cbiAgICBpZiAoc2Vjb25kcyA8IDApIHtcbiAgICAgIHNlY29uZHMgPSBJbmZpbml0eTtcbiAgICB9XG5cbiAgICBpZiAoc2Vjb25kcyAhPT0gdGhpcy5jYWNoZV8uZHVyYXRpb24pIHtcbiAgICAgIC8vIENhY2hlIHRoZSBsYXN0IHNldCB2YWx1ZSBmb3Igb3B0aW1pemVkIHNjcnViYmluZyAoZXNwLiBGbGFzaClcbiAgICAgIHRoaXMuY2FjaGVfLmR1cmF0aW9uID0gc2Vjb25kcztcblxuICAgICAgaWYgKHNlY29uZHMgPT09IEluZmluaXR5KSB7XG4gICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1saXZlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtbGl2ZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKHNlY29uZHMpKSB7XG4gICAgICAgIC8vIERvIG5vdCBmaXJlIGR1cmF0aW9uY2hhbmdlIHVubGVzcyB0aGUgZHVyYXRpb24gdmFsdWUgaXMga25vd24uXG4gICAgICAgIC8vIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWw1LTIwMTEwMTEzL3ZpZGVvLmh0bWwjbWVkaWEtZWxlbWVudC1sb2FkLWFsZ29yaXRobX1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGV2ZW50IFBsYXllciNkdXJhdGlvbmNoYW5nZVxuICAgICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2R1cmF0aW9uY2hhbmdlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGhvdyBtdWNoIHRpbWUgaXMgbGVmdCBpbiB0aGUgdmlkZW8uIE5vdCBwYXJ0XG4gICAqIG9mIHRoZSBuYXRpdmUgdmlkZW8gQVBJLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIHRpbWUgcmVtYWluaW5nIGluIHNlY29uZHNcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtYWluaW5nVGltZSA9IGZ1bmN0aW9uIHJlbWFpbmluZ1RpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZHVyYXRpb24oKSAtIHRoaXMuY3VycmVudFRpbWUoKTtcbiAgfVxuICAvKipcbiAgICogQSByZW1haW5pbmcgdGltZSBmdW5jdGlvbiB0aGF0IGlzIGludGVudGVkIHRvIGJlIHVzZWQgd2hlblxuICAgKiB0aGUgdGltZSBpcyB0byBiZSBkaXNwbGF5ZWQgZGlyZWN0bHkgdG8gdGhlIHVzZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgcm91bmRlZCB0aW1lIHJlbWFpbmluZyBpbiBzZWNvbmRzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbWFpbmluZ1RpbWVEaXNwbGF5ID0gZnVuY3Rpb24gcmVtYWluaW5nVGltZURpc3BsYXkoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5kdXJhdGlvbigpKSAtIE1hdGguZmxvb3IodGhpcy5jdXJyZW50VGltZSgpKTtcbiAgfSAvL1xuICAvLyBLaW5kIG9mIGxpa2UgYW4gYXJyYXkgb2YgcG9ydGlvbnMgb2YgdGhlIHZpZGVvIHRoYXQgaGF2ZSBiZWVuIGRvd25sb2FkZWQuXG5cbiAgLyoqXG4gICAqIEdldCBhIFRpbWVSYW5nZSBvYmplY3Qgd2l0aCBhbiBhcnJheSBvZiB0aGUgdGltZXMgb2YgdGhlIHZpZGVvXG4gICAqIHRoYXQgaGF2ZSBiZWVuIGRvd25sb2FkZWQuIElmIHlvdSBqdXN0IHdhbnQgdGhlIHBlcmNlbnQgb2YgdGhlXG4gICAqIHZpZGVvIHRoYXQncyBiZWVuIGRvd25sb2FkZWQsIHVzZSBidWZmZXJlZFBlcmNlbnQuXG4gICAqXG4gICAqIEBzZWUgW0J1ZmZlcmVkIFNwZWNde0BsaW5rIGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3NwZWMvdmlkZW8uaHRtbCNkb20tbWVkaWEtYnVmZmVyZWR9XG4gICAqXG4gICAqIEByZXR1cm4ge1RpbWVSYW5nZX1cbiAgICogICAgICAgICBBIG1vY2sgVGltZVJhbmdlIG9iamVjdCAoZm9sbG93aW5nIEhUTUwgc3BlYylcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVmZmVyZWQgPSBmdW5jdGlvbiBidWZmZXJlZCgpIHtcbiAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLnRlY2hHZXRfKCdidWZmZXJlZCcpO1xuXG4gICAgaWYgKCFidWZmZXJlZCB8fCAhYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICBidWZmZXJlZCA9IGNyZWF0ZVRpbWVSYW5nZXMoMCwgMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlcmVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHBlcmNlbnQgKGFzIGEgZGVjaW1hbCkgb2YgdGhlIHZpZGVvIHRoYXQncyBiZWVuIGRvd25sb2FkZWQuXG4gICAqIFRoaXMgbWV0aG9kIGlzIG5vdCBhIHBhcnQgb2YgdGhlIG5hdGl2ZSBIVE1MIHZpZGVvIEFQSS5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIEEgZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDEgcmVwcmVzZW50aW5nIHRoZSBwZXJjZW50XG4gICAqICAgICAgICAgdGhhdCBpcyBidWZmZXJlZCAwIGJlaW5nIDAlIGFuZCAxIGJlaW5nIDEwMCVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVmZmVyZWRQZXJjZW50ID0gZnVuY3Rpb24gYnVmZmVyZWRQZXJjZW50JDEoKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcmVkUGVyY2VudCh0aGlzLmJ1ZmZlcmVkKCksIHRoaXMuZHVyYXRpb24oKSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgZW5kaW5nIHRpbWUgb2YgdGhlIGxhc3QgYnVmZmVyZWQgdGltZSByYW5nZVxuICAgKiBUaGlzIGlzIHVzZWQgaW4gdGhlIHByb2dyZXNzIGJhciB0byBlbmNhcHN1bGF0ZSBhbGwgdGltZSByYW5nZXMuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBUaGUgZW5kIG9mIHRoZSBsYXN0IGJ1ZmZlcmVkIHRpbWUgcmFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVmZmVyZWRFbmQgPSBmdW5jdGlvbiBidWZmZXJlZEVuZCgpIHtcbiAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLmJ1ZmZlcmVkKCk7XG4gICAgdmFyIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpO1xuICAgIHZhciBlbmQgPSBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoIC0gMSk7XG5cbiAgICBpZiAoZW5kID4gZHVyYXRpb24pIHtcbiAgICAgIGVuZCA9IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBlbmQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGN1cnJlbnQgdm9sdW1lIG9mIHRoZSBtZWRpYVxuICAgKlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IFtwZXJjZW50QXNEZWNpbWFsXVxuICAgKiAgICAgICAgIFRoZSBuZXcgdm9sdW1lIGFzIGEgZGVjaW1hbCBwZXJjZW50OlxuICAgKiAgICAgICAgIC0gMCBpcyBtdXRlZC8wJS9vZmZcbiAgICogICAgICAgICAtIDEuMCBpcyAxMDAlL2Z1bGxcbiAgICogICAgICAgICAtIDAuNSBpcyBoYWxmIHZvbHVtZSBvciA1MCVcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHZvbHVtZSBhcyBhIHBlcmNlbnQgd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnZvbHVtZSA9IGZ1bmN0aW9uIHZvbHVtZShwZXJjZW50QXNEZWNpbWFsKSB7XG4gICAgdmFyIHZvbDtcblxuICAgIGlmIChwZXJjZW50QXNEZWNpbWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEZvcmNlIHZhbHVlIHRvIGJldHdlZW4gMCBhbmQgMVxuICAgICAgdm9sID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgcGFyc2VGbG9hdChwZXJjZW50QXNEZWNpbWFsKSkpO1xuICAgICAgdGhpcy5jYWNoZV8udm9sdW1lID0gdm9sO1xuICAgICAgdGhpcy50ZWNoQ2FsbF8oJ3NldFZvbHVtZScsIHZvbCk7XG5cbiAgICAgIGlmICh2b2wgPiAwKSB7XG4gICAgICAgIHRoaXMubGFzdFZvbHVtZV8odm9sKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRGVmYXVsdCB0byAxIHdoZW4gcmV0dXJuaW5nIGN1cnJlbnQgdm9sdW1lLlxuXG5cbiAgICB2b2wgPSBwYXJzZUZsb2F0KHRoaXMudGVjaEdldF8oJ3ZvbHVtZScpKTtcbiAgICByZXR1cm4gaXNOYU4odm9sKSA/IDEgOiB2b2w7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBtdXRlZCBzdGF0ZSwgb3IgdHVybiBtdXRlIG9uIG9yIG9mZlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFttdXRlZF1cbiAgICogICAgICAgIC0gdHJ1ZSB0byBtdXRlXG4gICAqICAgICAgICAtIGZhbHNlIHRvIHVubXV0ZVxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIC0gdHJ1ZSBpZiBtdXRlIGlzIG9uIGFuZCBnZXR0aW5nXG4gICAqICAgICAgICAgLSBmYWxzZSBpZiBtdXRlIGlzIG9mZiBhbmQgZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5tdXRlZCA9IGZ1bmN0aW9uIG11dGVkKF9tdXRlZCkge1xuICAgIGlmIChfbXV0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50ZWNoQ2FsbF8oJ3NldE11dGVkJywgX211dGVkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0XygnbXV0ZWQnKSB8fCBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IGRlZmF1bHRNdXRlZCBzdGF0ZSwgb3IgdHVybiBkZWZhdWx0TXV0ZWQgb24gb3Igb2ZmLiBkZWZhdWx0TXV0ZWRcbiAgICogaW5kaWNhdGVzIHRoZSBzdGF0ZSBvZiBtdXRlZCBvbiBpbml0aWFsIHBsYXliYWNrLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHZhciBteVBsYXllciA9IHZpZGVvanMoJ3NvbWUtcGxheWVyLWlkJyk7XG4gICAqXG4gICAqICAgbXlQbGF5ZXIuc3JjKFwiaHR0cDovL3d3dy5leGFtcGxlLmNvbS9wYXRoL3RvL3ZpZGVvLm1wNFwiKTtcbiAgICpcbiAgICogICAvLyBnZXQsIHNob3VsZCBiZSBmYWxzZVxuICAgKiAgIGNvbnNvbGUubG9nKG15UGxheWVyLmRlZmF1bHRNdXRlZCgpKTtcbiAgICogICAvLyBzZXQgdG8gdHJ1ZVxuICAgKiAgIG15UGxheWVyLmRlZmF1bHRNdXRlZCh0cnVlKTtcbiAgICogICAvLyBnZXQgc2hvdWxkIGJlIHRydWVcbiAgICogICBjb25zb2xlLmxvZyhteVBsYXllci5kZWZhdWx0TXV0ZWQoKSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWZhdWx0TXV0ZWRdXG4gICAqICAgICAgICAtIHRydWUgdG8gbXV0ZVxuICAgKiAgICAgICAgLSBmYWxzZSB0byB1bm11dGVcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbnxQbGF5ZXJ9XG4gICAqICAgICAgICAgLSB0cnVlIGlmIGRlZmF1bHRNdXRlZCBpcyBvbiBhbmQgZ2V0dGluZ1xuICAgKiAgICAgICAgIC0gZmFsc2UgaWYgZGVmYXVsdE11dGVkIGlzIG9mZiBhbmQgZ2V0dGluZ1xuICAgKiAgICAgICAgIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgcGxheWVyIHdoZW4gc2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWZhdWx0TXV0ZWQgPSBmdW5jdGlvbiBkZWZhdWx0TXV0ZWQoX2RlZmF1bHRNdXRlZCkge1xuICAgIGlmIChfZGVmYXVsdE11dGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRlY2hDYWxsXygnc2V0RGVmYXVsdE11dGVkJywgX2RlZmF1bHRNdXRlZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVjaEdldF8oJ2RlZmF1bHRNdXRlZCcpIHx8IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGxhc3Qgdm9sdW1lLCBvciBzZXQgaXRcbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSBbcGVyY2VudEFzRGVjaW1hbF1cbiAgICogICAgICAgICBUaGUgbmV3IGxhc3Qgdm9sdW1lIGFzIGEgZGVjaW1hbCBwZXJjZW50OlxuICAgKiAgICAgICAgIC0gMCBpcyBtdXRlZC8wJS9vZmZcbiAgICogICAgICAgICAtIDEuMCBpcyAxMDAlL2Z1bGxcbiAgICogICAgICAgICAtIDAuNSBpcyBoYWxmIHZvbHVtZSBvciA1MCVcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiAgICAgICAgIHRoZSBjdXJyZW50IHZhbHVlIG9mIGxhc3RWb2x1bWUgYXMgYSBwZXJjZW50IHdoZW4gZ2V0dGluZ1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sYXN0Vm9sdW1lXyA9IGZ1bmN0aW9uIGxhc3RWb2x1bWVfKHBlcmNlbnRBc0RlY2ltYWwpIHtcbiAgICBpZiAocGVyY2VudEFzRGVjaW1hbCAhPT0gdW5kZWZpbmVkICYmIHBlcmNlbnRBc0RlY2ltYWwgIT09IDApIHtcbiAgICAgIHRoaXMuY2FjaGVfLmxhc3RWb2x1bWUgPSBwZXJjZW50QXNEZWNpbWFsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNhY2hlXy5sYXN0Vm9sdW1lO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBjdXJyZW50IHRlY2ggY2FuIHN1cHBvcnQgbmF0aXZlIGZ1bGxzY3JlZW5cbiAgICogKGUuZy4gd2l0aCBidWlsdCBpbiBjb250cm9scyBsaWtlIGlPUywgc28gbm90IG91ciBmbGFzaCBzd2YpXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgaWYgbmF0aXZlIGZ1bGxzY3JlZW4gaXMgc3VwcG9ydGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN1cHBvcnRzRnVsbFNjcmVlbiA9IGZ1bmN0aW9uIHN1cHBvcnRzRnVsbFNjcmVlbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0Xygnc3VwcG9ydHNGdWxsU2NyZWVuJykgfHwgZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBwbGF5ZXIgaXMgaW4gZnVsbHNjcmVlbiBtb2RlIG9yIHRlbGwgdGhlIHBsYXllciB0aGF0IGl0XG4gICAqIGlzIG9yIGlzIG5vdCBpbiBmdWxsc2NyZWVuIG1vZGUuXG4gICAqXG4gICAqID4gTk9URTogQXMgb2YgdGhlIGxhdGVzdCBIVE1MNSBzcGVjLCBpc0Z1bGxzY3JlZW4gaXMgbm8gbG9uZ2VyIGFuIG9mZmljaWFsXG4gICAqIHByb3BlcnR5IGFuZCBpbnN0ZWFkIGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IGlzIHVzZWQuIEJ1dCBpc0Z1bGxzY3JlZW4gaXNcbiAgICogc3RpbGwgYSB2YWx1YWJsZSBwcm9wZXJ0eSBmb3IgaW50ZXJuYWwgcGxheWVyIHdvcmtpbmdzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtib29sZWFufSBbaXNGU11cbiAgICogICAgICAgICBTZXQgdGhlIHBsYXllcnMgY3VycmVudCBmdWxsc2NyZWVuIHN0YXRlXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgLSB0cnVlIGlmIGZ1bGxzY3JlZW4gaXMgb24gYW5kIGdldHRpbmdcbiAgICogICAgICAgICAtIGZhbHNlIGlmIGZ1bGxzY3JlZW4gaXMgb2ZmIGFuZCBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmlzRnVsbHNjcmVlbiA9IGZ1bmN0aW9uIGlzRnVsbHNjcmVlbihpc0ZTKSB7XG4gICAgaWYgKGlzRlMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5pc0Z1bGxzY3JlZW5fO1xuICAgICAgdGhpcy5pc0Z1bGxzY3JlZW5fID0gQm9vbGVhbihpc0ZTKTsgLy8gaWYgd2UgY2hhbmdlZCBmdWxsc2NyZWVuIHN0YXRlIGFuZCB3ZSdyZSBpbiBwcmVmaXhlZCBtb2RlLCB0cmlnZ2VyIGZ1bGxzY3JlZW5jaGFuZ2VcbiAgICAgIC8vIHRoaXMgaXMgdGhlIG9ubHkgcGxhY2Ugd2hlcmUgd2UgdHJpZ2dlciBmdWxsc2NyZWVuY2hhbmdlIGV2ZW50cyBmb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgIC8vIGZ1bGxXaW5kb3cgbW9kZSBpcyB0cmVhdGVkIGFzIGEgcHJlZml4ZWQgZXZlbnQgYW5kIHdpbGwgZ2V0IGEgZnVsbHNjcmVlbmNoYW5nZSBldmVudCBhcyB3ZWxsXG5cbiAgICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbl8gIT09IG9sZFZhbHVlICYmIHRoaXMuZnNBcGlfLnByZWZpeGVkKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgICAqIEBldmVudCBQbGF5ZXIjZnVsbHNjcmVlbmNoYW5nZVxuICAgICAgICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdmdWxsc2NyZWVuY2hhbmdlJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9nZ2xlRnVsbHNjcmVlbkNsYXNzXygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmlzRnVsbHNjcmVlbl87XG4gIH1cbiAgLyoqXG4gICAqIEluY3JlYXNlIHRoZSBzaXplIG9mIHRoZSB2aWRlbyB0byBmdWxsIHNjcmVlblxuICAgKiBJbiBzb21lIGJyb3dzZXJzLCBmdWxsIHNjcmVlbiBpcyBub3Qgc3VwcG9ydGVkIG5hdGl2ZWx5LCBzbyBpdCBlbnRlcnNcbiAgICogXCJmdWxsIHdpbmRvdyBtb2RlXCIsIHdoZXJlIHRoZSB2aWRlbyBmaWxscyB0aGUgYnJvd3NlciB3aW5kb3cuXG4gICAqIEluIGJyb3dzZXJzIGFuZCBkZXZpY2VzIHRoYXQgc3VwcG9ydCBuYXRpdmUgZnVsbCBzY3JlZW4sIHNvbWV0aW1lcyB0aGVcbiAgICogYnJvd3NlcidzIGRlZmF1bHQgY29udHJvbHMgd2lsbCBiZSBzaG93biwgYW5kIG5vdCB0aGUgVmlkZW8uanMgY3VzdG9tIHNraW4uXG4gICAqIFRoaXMgaW5jbHVkZXMgbW9zdCBtb2JpbGUgZGV2aWNlcyAoaU9TLCBBbmRyb2lkKSBhbmQgb2xkZXIgdmVyc2lvbnMgb2ZcbiAgICogU2FmYXJpLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IFtmdWxsc2NyZWVuT3B0aW9uc11cbiAgICogICAgICAgICBPdmVycmlkZSB0aGUgcGxheWVyIGZ1bGxzY3JlZW4gb3B0aW9uc1xuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI2Z1bGxzY3JlZW5jaGFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVxdWVzdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbiByZXF1ZXN0RnVsbHNjcmVlbihmdWxsc2NyZWVuT3B0aW9ucykge1xuICAgIHZhciBQcm9taXNlQ2xhc3MgPSB0aGlzLm9wdGlvbnNfLlByb21pc2UgfHwgd2luZG93JDEuUHJvbWlzZTtcblxuICAgIGlmIChQcm9taXNlQ2xhc3MpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNsYXNzKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gb2ZmSGFuZGxlcigpIHtcbiAgICAgICAgICBzZWxmLm9mZignZnVsbHNjcmVlbmVycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICAgICAgICBzZWxmLm9mZignZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2hhbmdlSGFuZGxlcigpIHtcbiAgICAgICAgICBvZmZIYW5kbGVyKCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZXJyb3JIYW5kbGVyKGUsIGVycikge1xuICAgICAgICAgIG9mZkhhbmRsZXIoKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYub25lKCdmdWxsc2NyZWVuY2hhbmdlJywgY2hhbmdlSGFuZGxlcik7XG4gICAgICAgIHNlbGYub25lKCdmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHNlbGYucmVxdWVzdEZ1bGxzY3JlZW5IZWxwZXJfKGZ1bGxzY3JlZW5PcHRpb25zKTtcblxuICAgICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICAgIHByb21pc2UudGhlbihvZmZIYW5kbGVyLCBvZmZIYW5kbGVyKTtcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdEZ1bGxzY3JlZW5IZWxwZXJfKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlcXVlc3RGdWxsc2NyZWVuSGVscGVyXyA9IGZ1bmN0aW9uIHJlcXVlc3RGdWxsc2NyZWVuSGVscGVyXyhmdWxsc2NyZWVuT3B0aW9ucykge1xuICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgIHZhciBmc09wdGlvbnM7IC8vIE9ubHkgcGFzcyBmdWxsc2NyZWVuIG9wdGlvbnMgdG8gcmVxdWVzdEZ1bGxzY3JlZW4gaW4gc3BlYy1jb21wbGlhbnQgYnJvd3NlcnMuXG4gICAgLy8gVXNlIGRlZmF1bHRzIG9yIHBsYXllciBjb25maWd1cmVkIG9wdGlvbiB1bmxlc3MgcGFzc2VkIGRpcmVjdGx5IHRvIHRoaXMgbWV0aG9kLlxuXG4gICAgaWYgKCF0aGlzLmZzQXBpXy5wcmVmaXhlZCkge1xuICAgICAgZnNPcHRpb25zID0gdGhpcy5vcHRpb25zXy5mdWxsc2NyZWVuICYmIHRoaXMub3B0aW9uc18uZnVsbHNjcmVlbi5vcHRpb25zIHx8IHt9O1xuXG4gICAgICBpZiAoZnVsbHNjcmVlbk9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmc09wdGlvbnMgPSBmdWxsc2NyZWVuT3B0aW9ucztcbiAgICAgIH1cbiAgICB9IC8vIFRoaXMgbWV0aG9kIHdvcmtzIGFzIGZvbGxvd3M6XG4gICAgLy8gMS4gaWYgYSBmdWxsc2NyZWVuIGFwaSBpcyBhdmFpbGFibGUsIHVzZSBpdFxuICAgIC8vICAgMS4gY2FsbCByZXF1ZXN0RnVsbHNjcmVlbiB3aXRoIHBvdGVudGlhbCBvcHRpb25zXG4gICAgLy8gICAyLiBpZiB3ZSBnb3QgYSBwcm9taXNlIGZyb20gYWJvdmUsIHVzZSBpdCB0byB1cGRhdGUgaXNGdWxsc2NyZWVuKClcbiAgICAvLyAyLiBvdGhlcndpc2UsIGlmIHRoZSB0ZWNoIHN1cHBvcnRzIGZ1bGxzY3JlZW4sIGNhbGwgYGVudGVyRnVsbFNjcmVlbmAgb24gaXQuXG4gICAgLy8gICBUaGlzIGlzIHBhcnRpY3VsYXJseSB1c2VkIGZvciBpUGhvbmUsIG9sZGVyIGlQYWRzLCBhbmQgbm9uLXNhZmFyaSBicm93c2VyIG9uIGlPUy5cbiAgICAvLyAzLiBvdGhlcndpc2UsIHVzZSBcImZ1bGxXaW5kb3dcIiBtb2RlXG5cblxuICAgIGlmICh0aGlzLmZzQXBpXy5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgdmFyIHByb21pc2UgPSB0aGlzLmVsX1t0aGlzLmZzQXBpXy5yZXF1ZXN0RnVsbHNjcmVlbl0oZnNPcHRpb25zKTtcblxuICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxMC5pc0Z1bGxzY3JlZW4odHJ1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxMC5pc0Z1bGxzY3JlZW4oZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSBlbHNlIGlmICh0aGlzLnRlY2hfLnN1cHBvcnRzRnVsbFNjcmVlbigpKSB7XG4gICAgICAvLyB3ZSBjYW4ndCB0YWtlIHRoZSB2aWRlby5qcyBjb250cm9scyBmdWxsc2NyZWVuIGJ1dCB3ZSBjYW4gZ28gZnVsbHNjcmVlblxuICAgICAgLy8gd2l0aCBuYXRpdmUgY29udHJvbHNcbiAgICAgIHRoaXMudGVjaENhbGxfKCdlbnRlckZ1bGxTY3JlZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZnVsbHNjcmVlbiBpc24ndCBzdXBwb3J0ZWQgc28gd2UnbGwganVzdCBzdHJldGNoIHRoZSB2aWRlbyBlbGVtZW50IHRvXG4gICAgICAvLyBmaWxsIHRoZSB2aWV3cG9ydFxuICAgICAgdGhpcy5lbnRlckZ1bGxXaW5kb3coKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgdmlkZW8gdG8gaXRzIG5vcm1hbCBzaXplIGFmdGVyIGhhdmluZyBiZWVuIGluIGZ1bGwgc2NyZWVuIG1vZGVcbiAgICpcbiAgICogQGZpcmVzIFBsYXllciNmdWxsc2NyZWVuY2hhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmV4aXRGdWxsc2NyZWVuID0gZnVuY3Rpb24gZXhpdEZ1bGxzY3JlZW4oKSB7XG4gICAgdmFyIFByb21pc2VDbGFzcyA9IHRoaXMub3B0aW9uc18uUHJvbWlzZSB8fCB3aW5kb3ckMS5Qcm9taXNlO1xuXG4gICAgaWYgKFByb21pc2VDbGFzcykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ2xhc3MoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBvZmZIYW5kbGVyKCkge1xuICAgICAgICAgIHNlbGYub2ZmKCdmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICAgIHNlbGYub2ZmKCdmdWxsc2NyZWVuY2hhbmdlJywgY2hhbmdlSGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjaGFuZ2VIYW5kbGVyKCkge1xuICAgICAgICAgIG9mZkhhbmRsZXIoKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBlcnJvckhhbmRsZXIoZSwgZXJyKSB7XG4gICAgICAgICAgb2ZmSGFuZGxlcigpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5vbmUoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyKTtcbiAgICAgICAgc2VsZi5vbmUoJ2Z1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlcik7XG4gICAgICAgIHZhciBwcm9taXNlID0gc2VsZi5leGl0RnVsbHNjcmVlbkhlbHBlcl8oKTtcblxuICAgICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICAgIHByb21pc2UudGhlbihvZmZIYW5kbGVyLCBvZmZIYW5kbGVyKTtcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZXhpdEZ1bGxzY3JlZW5IZWxwZXJfKCk7XG4gIH07XG5cbiAgX3Byb3RvLmV4aXRGdWxsc2NyZWVuSGVscGVyXyA9IGZ1bmN0aW9uIGV4aXRGdWxsc2NyZWVuSGVscGVyXygpIHtcbiAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5mc0FwaV8ucmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgIHZhciBwcm9taXNlID0gZG9jdW1lbnRbdGhpcy5mc0FwaV8uZXhpdEZ1bGxzY3JlZW5dKCk7XG5cbiAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTEuaXNGdWxsc2NyZWVuKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0gZWxzZSBpZiAodGhpcy50ZWNoXy5zdXBwb3J0c0Z1bGxTY3JlZW4oKSkge1xuICAgICAgdGhpcy50ZWNoQ2FsbF8oJ2V4aXRGdWxsU2NyZWVuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXhpdEZ1bGxXaW5kb3coKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gZnVsbHNjcmVlbiBpc24ndCBzdXBwb3J0ZWQgd2UgY2FuIHN0cmV0Y2ggdGhlXG4gICAqIHZpZGVvIGNvbnRhaW5lciB0byBhcyB3aWRlIGFzIHRoZSBicm93c2VyIHdpbGwgbGV0IHVzLlxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI2VudGVyRnVsbFdpbmRvd1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbnRlckZ1bGxXaW5kb3cgPSBmdW5jdGlvbiBlbnRlckZ1bGxXaW5kb3coKSB7XG4gICAgdGhpcy5pc0Z1bGxzY3JlZW4odHJ1ZSk7XG4gICAgdGhpcy5pc0Z1bGxXaW5kb3cgPSB0cnVlOyAvLyBTdG9yaW5nIG9yaWdpbmFsIGRvYyBvdmVyZmxvdyB2YWx1ZSB0byByZXR1cm4gdG8gd2hlbiBmdWxsc2NyZWVuIGlzIG9mZlxuXG4gICAgdGhpcy5kb2NPcmlnT3ZlcmZsb3cgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3c7IC8vIEFkZCBsaXN0ZW5lciBmb3IgZXNjIGtleSB0byBleGl0IGZ1bGxzY3JlZW5cblxuICAgIG9uKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuYm91bmRGdWxsV2luZG93T25Fc2NLZXlfKTsgLy8gSGlkZSBhbnkgc2Nyb2xsIGJhcnNcblxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nOyAvLyBBcHBseSBmdWxsc2NyZWVuIHN0eWxlc1xuXG4gICAgYWRkQ2xhc3MoZG9jdW1lbnQuYm9keSwgJ3Zqcy1mdWxsLXdpbmRvdycpO1xuICAgIC8qKlxuICAgICAqIEBldmVudCBQbGF5ZXIjZW50ZXJGdWxsV2luZG93XG4gICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy50cmlnZ2VyKCdlbnRlckZ1bGxXaW5kb3cnKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgZm9yIGNhbGwgdG8gZWl0aGVyIGV4aXQgZnVsbCB3aW5kb3cgb3JcbiAgICogZnVsbCBzY3JlZW4gb24gRVNDIGtleVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogICAgICAgIEV2ZW50IHRvIGNoZWNrIGZvciBrZXkgcHJlc3NcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZnVsbFdpbmRvd09uRXNjS2V5ID0gZnVuY3Rpb24gZnVsbFdpbmRvd09uRXNjS2V5KGV2ZW50KSB7XG4gICAgaWYgKGtleWNvZGUuaXNFdmVudEtleShldmVudCwgJ0VzYycpKSB7XG4gICAgICBpZiAodGhpcy5pc0Z1bGxzY3JlZW4oKSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmV4aXRGdWxsV2luZG93KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFeGl0IGZ1bGwgd2luZG93XG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjZXhpdEZ1bGxXaW5kb3dcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhpdEZ1bGxXaW5kb3cgPSBmdW5jdGlvbiBleGl0RnVsbFdpbmRvdygpIHtcbiAgICB0aGlzLmlzRnVsbHNjcmVlbihmYWxzZSk7XG4gICAgdGhpcy5pc0Z1bGxXaW5kb3cgPSBmYWxzZTtcbiAgICBvZmYoZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5ib3VuZEZ1bGxXaW5kb3dPbkVzY0tleV8pOyAvLyBVbmhpZGUgc2Nyb2xsIGJhcnMuXG5cbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSB0aGlzLmRvY09yaWdPdmVyZmxvdzsgLy8gUmVtb3ZlIGZ1bGxzY3JlZW4gc3R5bGVzXG5cbiAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCAndmpzLWZ1bGwtd2luZG93Jyk7IC8vIFJlc2l6ZSB0aGUgYm94LCBjb250cm9sbGVyLCBhbmQgcG9zdGVyIHRvIG9yaWdpbmFsIHNpemVzXG4gICAgLy8gdGhpcy5wb3NpdGlvbkFsbCgpO1xuXG4gICAgLyoqXG4gICAgICogQGV2ZW50IFBsYXllciNleGl0RnVsbFdpbmRvd1xuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignZXhpdEZ1bGxXaW5kb3cnKTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZSBQaWN0dXJlLWluLVBpY3R1cmUgbW9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKiAgICAgICAgICAgICAgICAgIC0gdHJ1ZSB3aWxsIGRpc2FibGUgUGljdHVyZS1pbi1QaWN0dXJlIG1vZGVcbiAgICogICAgICAgICAgICAgICAgICAtIGZhbHNlIHdpbGwgZW5hYmxlIFBpY3R1cmUtaW4tUGljdHVyZSBtb2RlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRpc2FibGVQaWN0dXJlSW5QaWN0dXJlID0gZnVuY3Rpb24gZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGVjaEdldF8oJ2Rpc2FibGVQaWN0dXJlSW5QaWN0dXJlJyk7XG4gICAgfVxuXG4gICAgdGhpcy50ZWNoQ2FsbF8oJ3NldERpc2FibGVQaWN0dXJlSW5QaWN0dXJlJywgdmFsdWUpO1xuICAgIHRoaXMub3B0aW9uc18uZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgPSB2YWx1ZTtcbiAgICB0aGlzLnRyaWdnZXIoJ2Rpc2FibGVwaWN0dXJlaW5waWN0dXJlY2hhbmdlZCcpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgcGxheWVyIGlzIGluIFBpY3R1cmUtaW4tUGljdHVyZSBtb2RlIG9yIHRlbGwgdGhlIHBsYXllciB0aGF0IGl0XG4gICAqIGlzIG9yIGlzIG5vdCBpbiBQaWN0dXJlLWluLVBpY3R1cmUgbW9kZS5cbiAgICpcbiAgICogQHBhcmFtICB7Ym9vbGVhbn0gW2lzUGlQXVxuICAgKiAgICAgICAgIFNldCB0aGUgcGxheWVycyBjdXJyZW50IFBpY3R1cmUtaW4tUGljdHVyZSBzdGF0ZVxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIC0gdHJ1ZSBpZiBQaWN0dXJlLWluLVBpY3R1cmUgaXMgb24gYW5kIGdldHRpbmdcbiAgICogICAgICAgICAtIGZhbHNlIGlmIFBpY3R1cmUtaW4tUGljdHVyZSBpcyBvZmYgYW5kIGdldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaXNJblBpY3R1cmVJblBpY3R1cmUgPSBmdW5jdGlvbiBpc0luUGljdHVyZUluUGljdHVyZShpc1BpUCkge1xuICAgIGlmIChpc1BpUCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzSW5QaWN0dXJlSW5QaWN0dXJlXyA9ICEhaXNQaVA7XG4gICAgICB0aGlzLnRvZ2dsZVBpY3R1cmVJblBpY3R1cmVDbGFzc18oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gISF0aGlzLmlzSW5QaWN0dXJlSW5QaWN0dXJlXztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgZmxvYXRpbmcgdmlkZW8gd2luZG93IGFsd2F5cyBvbiB0b3Agb2Ygb3RoZXIgd2luZG93cyBzbyB0aGF0IHVzZXJzIG1heVxuICAgKiBjb250aW51ZSBjb25zdW1pbmcgbWVkaWEgd2hpbGUgdGhleSBpbnRlcmFjdCB3aXRoIG90aGVyIGNvbnRlbnQgc2l0ZXMsIG9yXG4gICAqIGFwcGxpY2F0aW9ucyBvbiB0aGVpciBkZXZpY2UuXG4gICAqXG4gICAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd2ljZy5naXRodWIuaW8vcGljdHVyZS1pbi1waWN0dXJlfVxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI2VudGVycGljdHVyZWlucGljdHVyZVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiAgICAgICAgIEEgcHJvbWlzZSB3aXRoIGEgUGljdHVyZS1pbi1QaWN0dXJlIHdpbmRvdy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVxdWVzdFBpY3R1cmVJblBpY3R1cmUgPSBmdW5jdGlvbiByZXF1ZXN0UGljdHVyZUluUGljdHVyZSgpIHtcbiAgICBpZiAoJ3BpY3R1cmVJblBpY3R1cmVFbmFibGVkJyBpbiBkb2N1bWVudCAmJiB0aGlzLmRpc2FibGVQaWN0dXJlSW5QaWN0dXJlKCkgPT09IGZhbHNlKSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgZXZlbnQgZmlyZXMgd2hlbiB0aGUgcGxheWVyIGVudGVycyBwaWN0dXJlIGluIHBpY3R1cmUgbW9kZVxuICAgICAgICpcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjZW50ZXJwaWN0dXJlaW5waWN0dXJlXG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cbiAgICAgIHJldHVybiB0aGlzLnRlY2hHZXRfKCdyZXF1ZXN0UGljdHVyZUluUGljdHVyZScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXhpdCBQaWN0dXJlLWluLVBpY3R1cmUgbW9kZS5cbiAgICpcbiAgICogQHNlZSBbU3BlY117QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9waWN0dXJlLWluLXBpY3R1cmV9XG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjbGVhdmVwaWN0dXJlaW5waWN0dXJlXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqICAgICAgICAgQSBwcm9taXNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leGl0UGljdHVyZUluUGljdHVyZSA9IGZ1bmN0aW9uIGV4aXRQaWN0dXJlSW5QaWN0dXJlKCkge1xuICAgIGlmICgncGljdHVyZUluUGljdHVyZUVuYWJsZWQnIGluIGRvY3VtZW50KSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgZXZlbnQgZmlyZXMgd2hlbiB0aGUgcGxheWVyIGxlYXZlcyBwaWN0dXJlIGluIHBpY3R1cmUgbW9kZVxuICAgICAgICpcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjbGVhdmVwaWN0dXJlaW5waWN0dXJlXG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cbiAgICAgIHJldHVybiBkb2N1bWVudC5leGl0UGljdHVyZUluUGljdHVyZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhpcyBQbGF5ZXIgaGFzIGZvY3VzIGFuZCBhIGtleSBnZXRzIHByZXNzZWQgZG93biwgb3Igd2hlblxuICAgKiBhbnkgQ29tcG9uZW50IG9mIHRoaXMgcGxheWVyIHJlY2VpdmVzIGEga2V5IHByZXNzIHRoYXQgaXQgZG9lc24ndCBoYW5kbGUuXG4gICAqIFRoaXMgYWxsb3dzIHBsYXllci13aWRlIGhvdGtleXMgKGVpdGhlciBhcyBkZWZpbmVkIGJlbG93LCBvciBvcHRpb25hbGx5XG4gICAqIGJ5IGFuIGV4dGVybmFsIGZ1bmN0aW9uKS5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH5FdmVudH0gZXZlbnRcbiAgICogICAgICAgIFRoZSBga2V5ZG93bmAgZXZlbnQgdGhhdCBjYXVzZWQgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBsaXN0ZW5zIGtleWRvd25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICB2YXIgdXNlckFjdGlvbnMgPSB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zOyAvLyBCYWlsIG91dCBpZiBob3RrZXlzIGFyZSBub3QgY29uZmlndXJlZC5cblxuICAgIGlmICghdXNlckFjdGlvbnMgfHwgIXVzZXJBY3Rpb25zLmhvdGtleXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZ1bmN0aW9uIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBleGNsdWRlIGFuIGVsZW1lbnQgZnJvbVxuICAgIC8vIGhvdGtleXMgaGFuZGxpbmcuXG5cblxuICAgIHZhciBleGNsdWRlRWxlbWVudCA9IGZ1bmN0aW9uIGV4Y2x1ZGVFbGVtZW50KGVsKSB7XG4gICAgICB2YXIgdGFnTmFtZSA9IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKTsgLy8gVGhlIGZpcnN0IGFuZCBlYXNpZXN0IHRlc3QgaXMgZm9yIGBjb250ZW50ZWRpdGFibGVgIGVsZW1lbnRzLlxuXG4gICAgICBpZiAoZWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IC8vIElucHV0cyBtYXRjaGluZyB0aGVzZSB0eXBlcyB3aWxsIHN0aWxsIHRyaWdnZXIgaG90a2V5IGhhbmRsaW5nIGFzXG4gICAgICAvLyB0aGV5IGFyZSBub3QgdGV4dCBpbnB1dHMuXG5cblxuICAgICAgdmFyIGFsbG93ZWRJbnB1dFR5cGVzID0gWydidXR0b24nLCAnY2hlY2tib3gnLCAnaGlkZGVuJywgJ3JhZGlvJywgJ3Jlc2V0JywgJ3N1Ym1pdCddO1xuXG4gICAgICBpZiAodGFnTmFtZSA9PT0gJ2lucHV0Jykge1xuICAgICAgICByZXR1cm4gYWxsb3dlZElucHV0VHlwZXMuaW5kZXhPZihlbC50eXBlKSA9PT0gLTE7XG4gICAgICB9IC8vIFRoZSBmaW5hbCB0ZXN0IGlzIGJ5IHRhZyBuYW1lLiBUaGVzZSB0YWdzIHdpbGwgYmUgZXhjbHVkZWQgZW50aXJlbHkuXG5cblxuICAgICAgdmFyIGV4Y2x1ZGVkVGFncyA9IFsndGV4dGFyZWEnXTtcbiAgICAgIHJldHVybiBleGNsdWRlZFRhZ3MuaW5kZXhPZih0YWdOYW1lKSAhPT0gLTE7XG4gICAgfTsgLy8gQmFpbCBvdXQgaWYgdGhlIHVzZXIgaXMgZm9jdXNlZCBvbiBhbiBpbnRlcmFjdGl2ZSBmb3JtIGVsZW1lbnQuXG5cblxuICAgIGlmIChleGNsdWRlRWxlbWVudCh0aGlzLmVsXy5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB1c2VyQWN0aW9ucy5ob3RrZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB1c2VyQWN0aW9ucy5ob3RrZXlzLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhbmRsZUhvdGtleXMoZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhpcyBQbGF5ZXIgcmVjZWl2ZXMgYSBob3RrZXkga2V5ZG93biBldmVudC5cbiAgICogU3VwcG9ydGVkIHBsYXllci13aWRlIGhvdGtleXMgYXJlOlxuICAgKlxuICAgKiAgIGYgICAgICAgICAgLSB0b2dnbGUgZnVsbHNjcmVlblxuICAgKiAgIG0gICAgICAgICAgLSB0b2dnbGUgbXV0ZVxuICAgKiAgIGsgb3IgU3BhY2UgLSB0b2dnbGUgcGxheS9wYXVzZVxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fkV2ZW50fSBldmVudFxuICAgKiAgICAgICAgVGhlIGBrZXlkb3duYCBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlSG90a2V5cyA9IGZ1bmN0aW9uIGhhbmRsZUhvdGtleXMoZXZlbnQpIHtcbiAgICB2YXIgaG90a2V5cyA9IHRoaXMub3B0aW9uc18udXNlckFjdGlvbnMgPyB0aGlzLm9wdGlvbnNfLnVzZXJBY3Rpb25zLmhvdGtleXMgOiB7fTsgLy8gc2V0IGZ1bGxzY3JlZW5LZXksIG11dGVLZXksIHBsYXlQYXVzZUtleSBmcm9tIGBob3RrZXlzYCwgdXNlIGRlZmF1bHRzIGlmIG5vdCBzZXRcblxuICAgIHZhciBfaG90a2V5cyRmdWxsc2NyZWVuS2UgPSBob3RrZXlzLmZ1bGxzY3JlZW5LZXksXG4gICAgICAgIGZ1bGxzY3JlZW5LZXkgPSBfaG90a2V5cyRmdWxsc2NyZWVuS2UgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChrZXlkb3duRXZlbnQpIHtcbiAgICAgIHJldHVybiBrZXljb2RlLmlzRXZlbnRLZXkoa2V5ZG93bkV2ZW50LCAnZicpO1xuICAgIH0gOiBfaG90a2V5cyRmdWxsc2NyZWVuS2UsXG4gICAgICAgIF9ob3RrZXlzJG11dGVLZXkgPSBob3RrZXlzLm11dGVLZXksXG4gICAgICAgIG11dGVLZXkgPSBfaG90a2V5cyRtdXRlS2V5ID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoa2V5ZG93bkV2ZW50KSB7XG4gICAgICByZXR1cm4ga2V5Y29kZS5pc0V2ZW50S2V5KGtleWRvd25FdmVudCwgJ20nKTtcbiAgICB9IDogX2hvdGtleXMkbXV0ZUtleSxcbiAgICAgICAgX2hvdGtleXMkcGxheVBhdXNlS2V5ID0gaG90a2V5cy5wbGF5UGF1c2VLZXksXG4gICAgICAgIHBsYXlQYXVzZUtleSA9IF9ob3RrZXlzJHBsYXlQYXVzZUtleSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKGtleWRvd25FdmVudCkge1xuICAgICAgcmV0dXJuIGtleWNvZGUuaXNFdmVudEtleShrZXlkb3duRXZlbnQsICdrJykgfHwga2V5Y29kZS5pc0V2ZW50S2V5KGtleWRvd25FdmVudCwgJ1NwYWNlJyk7XG4gICAgfSA6IF9ob3RrZXlzJHBsYXlQYXVzZUtleTtcblxuICAgIGlmIChmdWxsc2NyZWVuS2V5LmNhbGwodGhpcywgZXZlbnQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB2YXIgRlNUb2dnbGUgPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KCdGdWxsc2NyZWVuVG9nZ2xlJyk7XG5cbiAgICAgIGlmIChkb2N1bWVudFt0aGlzLmZzQXBpXy5mdWxsc2NyZWVuRW5hYmxlZF0gIT09IGZhbHNlKSB7XG4gICAgICAgIEZTVG9nZ2xlLnByb3RvdHlwZS5oYW5kbGVDbGljay5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG11dGVLZXkuY2FsbCh0aGlzLCBldmVudCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHZhciBNdXRlVG9nZ2xlID0gQ29tcG9uZW50LmdldENvbXBvbmVudCgnTXV0ZVRvZ2dsZScpO1xuICAgICAgTXV0ZVRvZ2dsZS5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfSBlbHNlIGlmIChwbGF5UGF1c2VLZXkuY2FsbCh0aGlzLCBldmVudCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHZhciBQbGF5VG9nZ2xlID0gQ29tcG9uZW50LmdldENvbXBvbmVudCgnUGxheVRvZ2dsZScpO1xuICAgICAgUGxheVRvZ2dsZS5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIHRoZSBwbGF5ZXIgY2FuIHBsYXkgYSBnaXZlbiBtaW1ldHlwZVxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWw1LTIwMTEwMTEzL3ZpZGVvLmh0bWwjZG9tLW5hdmlnYXRvci1jYW5wbGF5dHlwZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgVGhlIG1pbWV0eXBlIHRvIGNoZWNrXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICAncHJvYmFibHknLCAnbWF5YmUnLCBvciAnJyAoZW1wdHkgc3RyaW5nKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jYW5QbGF5VHlwZSA9IGZ1bmN0aW9uIGNhblBsYXlUeXBlKHR5cGUpIHtcbiAgICB2YXIgY2FuOyAvLyBMb29wIHRocm91Z2ggZWFjaCBwbGF5YmFjayB0ZWNobm9sb2d5IGluIHRoZSBvcHRpb25zIG9yZGVyXG5cbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IHRoaXMub3B0aW9uc18udGVjaE9yZGVyOyBpIDwgai5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRlY2hOYW1lID0galtpXTtcbiAgICAgIHZhciB0ZWNoID0gVGVjaC5nZXRUZWNoKHRlY2hOYW1lKTsgLy8gU3VwcG9ydCBvbGQgYmVoYXZpb3Igb2YgdGVjaHMgYmVpbmcgcmVnaXN0ZXJlZCBhcyBjb21wb25lbnRzLlxuICAgICAgLy8gUmVtb3ZlIG9uY2UgdGhhdCBkZXByZWNhdGVkIGJlaGF2aW9yIGlzIHJlbW92ZWQuXG5cbiAgICAgIGlmICghdGVjaCkge1xuICAgICAgICB0ZWNoID0gQ29tcG9uZW50LmdldENvbXBvbmVudCh0ZWNoTmFtZSk7XG4gICAgICB9IC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHRlY2ggaXMgZGVmaW5lZCBiZWZvcmUgY29udGludWluZ1xuXG5cbiAgICAgIGlmICghdGVjaCkge1xuICAgICAgICBsb2cuZXJyb3IoXCJUaGUgXFxcIlwiICsgdGVjaE5hbWUgKyBcIlxcXCIgdGVjaCBpcyB1bmRlZmluZWQuIFNraXBwZWQgYnJvd3NlciBzdXBwb3J0IGNoZWNrIGZvciB0aGF0IHRlY2guXCIpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gQ2hlY2sgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhpcyB0ZWNobm9sb2d5XG5cblxuICAgICAgaWYgKHRlY2guaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICBjYW4gPSB0ZWNoLmNhblBsYXlUeXBlKHR5cGUpO1xuXG4gICAgICAgIGlmIChjYW4pIHtcbiAgICAgICAgICByZXR1cm4gY2FuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9XG4gIC8qKlxuICAgKiBTZWxlY3Qgc291cmNlIGJhc2VkIG9uIHRlY2gtb3JkZXIgb3Igc291cmNlLW9yZGVyXG4gICAqIFVzZXMgc291cmNlLW9yZGVyIHNlbGVjdGlvbiBpZiBgb3B0aW9ucy5zb3VyY2VPcmRlcmAgaXMgdHJ1dGh5LiBPdGhlcndpc2UsXG4gICAqIGRlZmF1bHRzIHRvIHRlY2gtb3JkZXIgc2VsZWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZXNcbiAgICogICAgICAgIFRoZSBzb3VyY2VzIGZvciBhIG1lZGlhIGFzc2V0XG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdHxib29sZWFufVxuICAgKiAgICAgICAgIE9iamVjdCBvZiBzb3VyY2UgYW5kIHRlY2ggb3JkZXIgb3IgZmFsc2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2VsZWN0U291cmNlID0gZnVuY3Rpb24gc2VsZWN0U291cmNlKHNvdXJjZXMpIHtcbiAgICB2YXIgX3RoaXMxMiA9IHRoaXM7XG5cbiAgICAvLyBHZXQgb25seSB0aGUgdGVjaHMgc3BlY2lmaWVkIGluIGB0ZWNoT3JkZXJgIHRoYXQgZXhpc3QgYW5kIGFyZSBzdXBwb3J0ZWQgYnkgdGhlXG4gICAgLy8gY3VycmVudCBwbGF0Zm9ybVxuICAgIHZhciB0ZWNocyA9IHRoaXMub3B0aW9uc18udGVjaE9yZGVyLm1hcChmdW5jdGlvbiAodGVjaE5hbWUpIHtcbiAgICAgIHJldHVybiBbdGVjaE5hbWUsIFRlY2guZ2V0VGVjaCh0ZWNoTmFtZSldO1xuICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHRlY2hOYW1lID0gX3JlZlswXSxcbiAgICAgICAgICB0ZWNoID0gX3JlZlsxXTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdGVjaCBpcyBkZWZpbmVkIGJlZm9yZSBjb250aW51aW5nXG4gICAgICBpZiAodGVjaCkge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGlzIHRlY2hub2xvZ3lcbiAgICAgICAgcmV0dXJuIHRlY2guaXNTdXBwb3J0ZWQoKTtcbiAgICAgIH1cblxuICAgICAgbG9nLmVycm9yKFwiVGhlIFxcXCJcIiArIHRlY2hOYW1lICsgXCJcXFwiIHRlY2ggaXMgdW5kZWZpbmVkLiBTa2lwcGVkIGJyb3dzZXIgc3VwcG9ydCBjaGVjayBmb3IgdGhhdCB0ZWNoLlwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTsgLy8gSXRlcmF0ZSBvdmVyIGVhY2ggYGlubmVyQXJyYXlgIGVsZW1lbnQgb25jZSBwZXIgYG91dGVyQXJyYXlgIGVsZW1lbnQgYW5kIGV4ZWN1dGVcbiAgICAvLyBgdGVzdGVyYCB3aXRoIGJvdGguIElmIGB0ZXN0ZXJgIHJldHVybnMgYSBub24tZmFsc3kgdmFsdWUsIGV4aXQgZWFybHkgYW5kIHJldHVyblxuICAgIC8vIHRoYXQgdmFsdWUuXG5cbiAgICB2YXIgZmluZEZpcnN0UGFzc2luZ1RlY2hTb3VyY2VQYWlyID0gZnVuY3Rpb24gZmluZEZpcnN0UGFzc2luZ1RlY2hTb3VyY2VQYWlyKG91dGVyQXJyYXksIGlubmVyQXJyYXksIHRlc3Rlcikge1xuICAgICAgdmFyIGZvdW5kO1xuICAgICAgb3V0ZXJBcnJheS5zb21lKGZ1bmN0aW9uIChvdXRlckNob2ljZSkge1xuICAgICAgICByZXR1cm4gaW5uZXJBcnJheS5zb21lKGZ1bmN0aW9uIChpbm5lckNob2ljZSkge1xuICAgICAgICAgIGZvdW5kID0gdGVzdGVyKG91dGVyQ2hvaWNlLCBpbm5lckNob2ljZSk7XG5cbiAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9O1xuXG4gICAgdmFyIGZvdW5kU291cmNlQW5kVGVjaDtcblxuICAgIHZhciBmbGlwID0gZnVuY3Rpb24gZmxpcChmbikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBmbihiLCBhKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBmaW5kZXIgPSBmdW5jdGlvbiBmaW5kZXIoX3JlZjIsIHNvdXJjZSkge1xuICAgICAgdmFyIHRlY2hOYW1lID0gX3JlZjJbMF0sXG4gICAgICAgICAgdGVjaCA9IF9yZWYyWzFdO1xuXG4gICAgICBpZiAodGVjaC5jYW5QbGF5U291cmNlKHNvdXJjZSwgX3RoaXMxMi5vcHRpb25zX1t0ZWNoTmFtZS50b0xvd2VyQ2FzZSgpXSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICB0ZWNoOiB0ZWNoTmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07IC8vIERlcGVuZGluZyBvbiB0aGUgdHJ1dGhpbmVzcyBvZiBgb3B0aW9ucy5zb3VyY2VPcmRlcmAsIHdlIHN3YXAgdGhlIG9yZGVyIG9mIHRlY2hzIGFuZCBzb3VyY2VzXG4gICAgLy8gdG8gc2VsZWN0IGZyb20gdGhlbSBiYXNlZCBvbiB0aGVpciBwcmlvcml0eS5cblxuXG4gICAgaWYgKHRoaXMub3B0aW9uc18uc291cmNlT3JkZXIpIHtcbiAgICAgIC8vIFNvdXJjZS1maXJzdCBvcmRlcmluZ1xuICAgICAgZm91bmRTb3VyY2VBbmRUZWNoID0gZmluZEZpcnN0UGFzc2luZ1RlY2hTb3VyY2VQYWlyKHNvdXJjZXMsIHRlY2hzLCBmbGlwKGZpbmRlcikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUZWNoLWZpcnN0IG9yZGVyaW5nXG4gICAgICBmb3VuZFNvdXJjZUFuZFRlY2ggPSBmaW5kRmlyc3RQYXNzaW5nVGVjaFNvdXJjZVBhaXIodGVjaHMsIHNvdXJjZXMsIGZpbmRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvdW5kU291cmNlQW5kVGVjaCB8fCBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgdmlkZW8gc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge1RlY2h+U291cmNlT2JqZWN0fFRlY2h+U291cmNlT2JqZWN0W118c3RyaW5nfSBbc291cmNlXVxuICAgKiAgICAgICAgQSBTb3VyY2VPYmplY3QsIGFuIGFycmF5IG9mIFNvdXJjZU9iamVjdHMsIG9yIGEgc3RyaW5nIHJlZmVyZW5jaW5nXG4gICAqICAgICAgICBhIFVSTCB0byBhIG1lZGlhIHNvdXJjZS4gSXQgaXMgX2hpZ2hseSByZWNvbW1lbmRlZF8gdGhhdCBhbiBvYmplY3RcbiAgICogICAgICAgIG9yIGFycmF5IG9mIG9iamVjdHMgaXMgdXNlZCBoZXJlLCBzbyB0aGF0IHNvdXJjZSBzZWxlY3Rpb25cbiAgICogICAgICAgIGFsZ29yaXRobXMgY2FuIHRha2UgdGhlIGB0eXBlYCBpbnRvIGFjY291bnQuXG4gICAqXG4gICAqICAgICAgICBJZiBub3QgcHJvdmlkZWQsIHRoaXMgbWV0aG9kIGFjdHMgYXMgYSBnZXR0ZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ3x1bmRlZmluZWR9XG4gICAqICAgICAgICAgSWYgdGhlIGBzb3VyY2VgIGFyZ3VtZW50IGlzIG1pc3NpbmcsIHJldHVybnMgdGhlIGN1cnJlbnQgc291cmNlXG4gICAqICAgICAgICAgVVJMLiBPdGhlcndpc2UsIHJldHVybnMgbm90aGluZy91bmRlZmluZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNyYyA9IGZ1bmN0aW9uIHNyYyhzb3VyY2UpIHtcbiAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICAvLyBnZXR0ZXIgdXNhZ2VcbiAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlXy5zcmMgfHwgJyc7XG4gICAgfSAvLyBmaWx0ZXIgb3V0IGludmFsaWQgc291cmNlcyBhbmQgdHVybiBvdXIgc291cmNlIGludG9cbiAgICAvLyBhbiBhcnJheSBvZiBzb3VyY2Ugb2JqZWN0c1xuXG5cbiAgICB2YXIgc291cmNlcyA9IGZpbHRlclNvdXJjZShzb3VyY2UpOyAvLyBpZiBhIHNvdXJjZSB3YXMgcGFzc2VkIGluIHRoZW4gaXQgaXMgaW52YWxpZCBiZWNhdXNlXG4gICAgLy8gaXQgd2FzIGZpbHRlcmVkIHRvIGEgemVybyBsZW5ndGggQXJyYXkuIFNvIHdlIGhhdmUgdG9cbiAgICAvLyBzaG93IGFuIGVycm9yXG5cbiAgICBpZiAoIXNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVycm9yKHtcbiAgICAgICAgICBjb2RlOiA0LFxuICAgICAgICAgIG1lc3NhZ2U6IHRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zXy5ub3RTdXBwb3J0ZWRNZXNzYWdlKVxuICAgICAgICB9KTtcbiAgICAgIH0sIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gaW5pdGlhbCBzb3VyY2VzXG5cblxuICAgIHRoaXMuY2hhbmdpbmdTcmNfID0gdHJ1ZTtcbiAgICB0aGlzLmNhY2hlXy5zb3VyY2VzID0gc291cmNlcztcbiAgICB0aGlzLnVwZGF0ZVNvdXJjZUNhY2hlc18oc291cmNlc1swXSk7IC8vIG1pZGRsZXdhcmVTb3VyY2UgaXMgdGhlIHNvdXJjZSBhZnRlciBpdCBoYXMgYmVlbiBjaGFuZ2VkIGJ5IG1pZGRsZXdhcmVcblxuICAgIHNldFNvdXJjZSh0aGlzLCBzb3VyY2VzWzBdLCBmdW5jdGlvbiAobWlkZGxld2FyZVNvdXJjZSwgbXdzKSB7XG4gICAgICBfdGhpczEzLm1pZGRsZXdhcmVfID0gbXdzOyAvLyBzaW5jZSBzb3VyY2VTZXQgaXMgYXN5bmMgd2UgaGF2ZSB0byB1cGRhdGUgdGhlIGNhY2hlIGFnYWluIGFmdGVyIHdlIHNlbGVjdCBhIHNvdXJjZSBzaW5jZVxuICAgICAgLy8gdGhlIHNvdXJjZSB0aGF0IGlzIHNlbGVjdGVkIGNvdWxkIGJlIG91dCBvZiBvcmRlciBmcm9tIHRoZSBjYWNoZSB1cGRhdGUgYWJvdmUgdGhpcyBjYWxsYmFjay5cblxuICAgICAgX3RoaXMxMy5jYWNoZV8uc291cmNlcyA9IHNvdXJjZXM7XG5cbiAgICAgIF90aGlzMTMudXBkYXRlU291cmNlQ2FjaGVzXyhtaWRkbGV3YXJlU291cmNlKTtcblxuICAgICAgdmFyIGVyciA9IF90aGlzMTMuc3JjXyhtaWRkbGV3YXJlU291cmNlKTtcblxuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAoc291cmNlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTMuc3JjKHNvdXJjZXMuc2xpY2UoMSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMxMy5jaGFuZ2luZ1NyY18gPSBmYWxzZTsgLy8gV2UgbmVlZCB0byB3cmFwIHRoaXMgaW4gYSB0aW1lb3V0IHRvIGdpdmUgZm9sa3MgYSBjaGFuY2UgdG8gYWRkIGVycm9yIGV2ZW50IGhhbmRsZXJzXG5cbiAgICAgICAgX3RoaXMxMy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLmVycm9yKHtcbiAgICAgICAgICAgIGNvZGU6IDQsXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLmxvY2FsaXplKHRoaXMub3B0aW9uc18ubm90U3VwcG9ydGVkTWVzc2FnZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMCk7IC8vIHdlIGNvdWxkIG5vdCBmaW5kIGFuIGFwcHJvcHJpYXRlIHRlY2gsIGJ1dCBsZXQncyBzdGlsbCBub3RpZnkgdGhlIGRlbGVnYXRlIHRoYXQgdGhpcyBpcyBpdFxuICAgICAgICAvLyB0aGlzIG5lZWRzIGEgYmV0dGVyIGNvbW1lbnQgYWJvdXQgd2h5IHRoaXMgaXMgbmVlZGVkXG5cblxuICAgICAgICBfdGhpczEzLnRyaWdnZXJSZWFkeSgpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0VGVjaChtd3MsIF90aGlzMTMudGVjaF8pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIHNvdXJjZSBvYmplY3Qgb24gdGhlIHRlY2gsIHJldHVybnMgYSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXJcbiAgICogdGhlcmUgaXMgYSB0ZWNoIHRoYXQgY2FuIHBsYXkgdGhlIHNvdXJjZSBvciBub3RcbiAgICpcbiAgICogQHBhcmFtIHtUZWNoflNvdXJjZU9iamVjdH0gc291cmNlXG4gICAqICAgICAgICBUaGUgc291cmNlIG9iamVjdCB0byBzZXQgb24gdGhlIFRlY2hcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICAtIFRydWUgaWYgdGhlcmUgaXMgbm8gVGVjaCB0byBwbGF5YmFjayB0aGlzIHNvdXJjZVxuICAgKiAgICAgICAgIC0gRmFsc2Ugb3RoZXJ3aXNlXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNyY18gPSBmdW5jdGlvbiBzcmNfKHNvdXJjZSkge1xuICAgIHZhciBfdGhpczE0ID0gdGhpcztcblxuICAgIHZhciBzb3VyY2VUZWNoID0gdGhpcy5zZWxlY3RTb3VyY2UoW3NvdXJjZV0pO1xuXG4gICAgaWYgKCFzb3VyY2VUZWNoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIXRpdGxlQ2FzZUVxdWFscyhzb3VyY2VUZWNoLnRlY2gsIHRoaXMudGVjaE5hbWVfKSkge1xuICAgICAgdGhpcy5jaGFuZ2luZ1NyY18gPSB0cnVlOyAvLyBsb2FkIHRoaXMgdGVjaG5vbG9neSB3aXRoIHRoZSBjaG9zZW4gc291cmNlXG5cbiAgICAgIHRoaXMubG9hZFRlY2hfKHNvdXJjZVRlY2gudGVjaCwgc291cmNlVGVjaC5zb3VyY2UpO1xuICAgICAgdGhpcy50ZWNoXy5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMTQuY2hhbmdpbmdTcmNfID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIHdhaXQgdW50aWwgdGhlIHRlY2ggaXMgcmVhZHkgdG8gc2V0IHRoZSBzb3VyY2VcbiAgICAvLyBhbmQgc2V0IGl0IHN5bmNocm9ub3VzbHkgaWYgcG9zc2libGUgKCMyMzI2KVxuXG5cbiAgICB0aGlzLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFRoZSBzZXRTb3VyY2UgdGVjaCBtZXRob2Qgd2FzIGFkZGVkIHdpdGggc291cmNlIGhhbmRsZXJzXG4gICAgICAvLyBzbyBvbGRlciB0ZWNocyB3b24ndCBzdXBwb3J0IGl0XG4gICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIHRoZSBkaXJlY3QgcHJvdG90eXBlIGZvciB0aGUgY2FzZSB3aGVyZSBzdWJjbGFzc2VzXG4gICAgICAvLyBvZiB0aGUgdGVjaCBkbyBub3Qgc3VwcG9ydCBzb3VyY2UgaGFuZGxlcnNcbiAgICAgIGlmICh0aGlzLnRlY2hfLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnc2V0U291cmNlJykpIHtcbiAgICAgICAgdGhpcy50ZWNoQ2FsbF8oJ3NldFNvdXJjZScsIHNvdXJjZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRlY2hDYWxsXygnc3JjJywgc291cmNlLnNyYyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2hhbmdpbmdTcmNfID0gZmFsc2U7XG4gICAgfSwgdHJ1ZSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBCZWdpbiBsb2FkaW5nIHRoZSBzcmMgZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubG9hZCA9IGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgdGhpcy50ZWNoQ2FsbF8oJ2xvYWQnKTtcbiAgfVxuICAvKipcbiAgICogUmVzZXQgdGhlIHBsYXllci4gTG9hZHMgdGhlIGZpcnN0IHRlY2ggaW4gdGhlIHRlY2hPcmRlcixcbiAgICogcmVtb3ZlcyBhbGwgdGhlIHRleHQgdHJhY2tzIGluIHRoZSBleGlzdGluZyBgdGVjaGAsXG4gICAqIGFuZCBjYWxscyBgcmVzZXRgIG9uIHRoZSBgdGVjaGAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdmFyIF90aGlzMTUgPSB0aGlzO1xuXG4gICAgdmFyIFByb21pc2VDbGFzcyA9IHRoaXMub3B0aW9uc18uUHJvbWlzZSB8fCB3aW5kb3ckMS5Qcm9taXNlO1xuXG4gICAgaWYgKHRoaXMucGF1c2VkKCkgfHwgIVByb21pc2VDbGFzcykge1xuICAgICAgdGhpcy5kb1Jlc2V0XygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGxheVByb21pc2UgPSB0aGlzLnBsYXkoKTtcbiAgICAgIHNpbGVuY2VQcm9taXNlKHBsYXlQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMxNS5kb1Jlc2V0XygpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZG9SZXNldF8gPSBmdW5jdGlvbiBkb1Jlc2V0XygpIHtcbiAgICBpZiAodGhpcy50ZWNoXykge1xuICAgICAgdGhpcy50ZWNoXy5jbGVhclRyYWNrcygndGV4dCcpO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXRDYWNoZV8oKTtcbiAgICB0aGlzLnBvc3RlcignJyk7XG4gICAgdGhpcy5sb2FkVGVjaF8odGhpcy5vcHRpb25zXy50ZWNoT3JkZXJbMF0sIG51bGwpO1xuICAgIHRoaXMudGVjaENhbGxfKCdyZXNldCcpO1xuICAgIHRoaXMucmVzZXRDb250cm9sQmFyVUlfKCk7XG5cbiAgICBpZiAoaXNFdmVudGVkKHRoaXMpKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3BsYXllcnJlc2V0Jyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXNldCBDb250cm9sIEJhcidzIFVJIGJ5IGNhbGxpbmcgc3ViLW1ldGhvZHMgdGhhdCByZXNldFxuICAgKiBhbGwgb2YgQ29udHJvbCBCYXIncyBjb21wb25lbnRzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0Q29udHJvbEJhclVJXyA9IGZ1bmN0aW9uIHJlc2V0Q29udHJvbEJhclVJXygpIHtcbiAgICB0aGlzLnJlc2V0UHJvZ3Jlc3NCYXJfKCk7XG4gICAgdGhpcy5yZXNldFBsYXliYWNrUmF0ZV8oKTtcbiAgICB0aGlzLnJlc2V0Vm9sdW1lQmFyXygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldCB0ZWNoJ3MgcHJvZ3Jlc3Mgc28gcHJvZ3Jlc3MgYmFyIGlzIHJlc2V0IGluIHRoZSBVSVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNldFByb2dyZXNzQmFyXyA9IGZ1bmN0aW9uIHJlc2V0UHJvZ3Jlc3NCYXJfKCkge1xuICAgIHRoaXMuY3VycmVudFRpbWUoMCk7XG4gICAgdmFyIF90aGlzJGNvbnRyb2xCYXIgPSB0aGlzLmNvbnRyb2xCYXIsXG4gICAgICAgIGR1cmF0aW9uRGlzcGxheSA9IF90aGlzJGNvbnRyb2xCYXIuZHVyYXRpb25EaXNwbGF5LFxuICAgICAgICByZW1haW5pbmdUaW1lRGlzcGxheSA9IF90aGlzJGNvbnRyb2xCYXIucmVtYWluaW5nVGltZURpc3BsYXk7XG5cbiAgICBpZiAoZHVyYXRpb25EaXNwbGF5KSB7XG4gICAgICBkdXJhdGlvbkRpc3BsYXkudXBkYXRlQ29udGVudCgpO1xuICAgIH1cblxuICAgIGlmIChyZW1haW5pbmdUaW1lRGlzcGxheSkge1xuICAgICAgcmVtYWluaW5nVGltZURpc3BsYXkudXBkYXRlQ29udGVudCgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVzZXQgUGxheWJhY2sgcmF0aW9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXRQbGF5YmFja1JhdGVfID0gZnVuY3Rpb24gcmVzZXRQbGF5YmFja1JhdGVfKCkge1xuICAgIHRoaXMucGxheWJhY2tSYXRlKHRoaXMuZGVmYXVsdFBsYXliYWNrUmF0ZSgpKTtcbiAgICB0aGlzLmhhbmRsZVRlY2hSYXRlQ2hhbmdlXygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldCBWb2x1bWUgYmFyXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0Vm9sdW1lQmFyXyA9IGZ1bmN0aW9uIHJlc2V0Vm9sdW1lQmFyXygpIHtcbiAgICB0aGlzLnZvbHVtZSgxLjApO1xuICAgIHRoaXMudHJpZ2dlcigndm9sdW1lY2hhbmdlJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIG9mIHRoZSBjdXJyZW50IHNvdXJjZSBvYmplY3RzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtUZWNoflNvdXJjZU9iamVjdFtdfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHNvdXJjZSBvYmplY3RzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnRTb3VyY2VzID0gZnVuY3Rpb24gY3VycmVudFNvdXJjZXMoKSB7XG4gICAgdmFyIHNvdXJjZSA9IHRoaXMuY3VycmVudFNvdXJjZSgpO1xuICAgIHZhciBzb3VyY2VzID0gW107IC8vIGFzc3VtZSBge31gIG9yIGB7IHNyYyB9YFxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHNvdXJjZSkubGVuZ3RoICE9PSAwKSB7XG4gICAgICBzb3VyY2VzLnB1c2goc291cmNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jYWNoZV8uc291cmNlcyB8fCBzb3VyY2VzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHNvdXJjZSBvYmplY3QuXG4gICAqXG4gICAqIEByZXR1cm4ge1RlY2h+U291cmNlT2JqZWN0fVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHNvdXJjZSBvYmplY3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3VycmVudFNvdXJjZSA9IGZ1bmN0aW9uIGN1cnJlbnRTb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGVfLnNvdXJjZSB8fCB7fTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZnVsbHkgcXVhbGlmaWVkIFVSTCBvZiB0aGUgY3VycmVudCBzb3VyY2UgdmFsdWUgZS5nLiBodHRwOi8vbXlzaXRlLmNvbS92aWRlby5tcDRcbiAgICogQ2FuIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgY3VycmVudFR5cGVgIHRvIGFzc2lzdCBpbiByZWJ1aWxkaW5nIHRoZSBjdXJyZW50IHNvdXJjZSBvYmplY3QuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICBUaGUgY3VycmVudCBzb3VyY2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3VycmVudFNyYyA9IGZ1bmN0aW9uIGN1cnJlbnRTcmMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFNvdXJjZSgpICYmIHRoaXMuY3VycmVudFNvdXJjZSgpLnNyYyB8fCAnJztcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IHNvdXJjZSB0eXBlIGUuZy4gdmlkZW8vbXA0XG4gICAqIFRoaXMgY2FuIGFsbG93IHlvdSByZWJ1aWxkIHRoZSBjdXJyZW50IHNvdXJjZSBvYmplY3Qgc28gdGhhdCB5b3UgY291bGQgbG9hZCB0aGUgc2FtZVxuICAgKiBzb3VyY2UgYW5kIHRlY2ggbGF0ZXJcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBzb3VyY2UgTUlNRSB0eXBlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnRUeXBlID0gZnVuY3Rpb24gY3VycmVudFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFNvdXJjZSgpICYmIHRoaXMuY3VycmVudFNvdXJjZSgpLnR5cGUgfHwgJyc7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIHByZWxvYWQgYXR0cmlidXRlXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ZhbHVlXVxuICAgKiAgICAgICAgLSB0cnVlIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIHByZWxvYWRcbiAgICogICAgICAgIC0gZmFsc2UgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IHByZWxvYWRcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBwcmVsb2FkIGF0dHJpYnV0ZSB2YWx1ZSB3aGVuIGdldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHJlbG9hZCA9IGZ1bmN0aW9uIHByZWxvYWQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50ZWNoQ2FsbF8oJ3NldFByZWxvYWQnLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9wdGlvbnNfLnByZWxvYWQgPSB2YWx1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0XygncHJlbG9hZCcpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHRoZSBhdXRvcGxheSBvcHRpb24uIFdoZW4gdGhpcyBpcyBhIGJvb2xlYW4gaXQgd2lsbFxuICAgKiBtb2RpZnkgdGhlIGF0dHJpYnV0ZSBvbiB0aGUgdGVjaC4gV2hlbiB0aGlzIGlzIGEgc3RyaW5nIHRoZSBhdHRyaWJ1dGUgb25cbiAgICogdGhlIHRlY2ggd2lsbCBiZSByZW1vdmVkIGFuZCBgUGxheWVyYCB3aWxsIGhhbmRsZSBhdXRvcGxheSBvbiBsb2Fkc3RhcnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSBbdmFsdWVdXG4gICAqICAgICAgICAtIHRydWU6IGF1dG9wbGF5IHVzaW5nIHRoZSBicm93c2VyIGJlaGF2aW9yXG4gICAqICAgICAgICAtIGZhbHNlOiBkbyBub3QgYXV0b3BsYXlcbiAgICogICAgICAgIC0gJ3BsYXknOiBjYWxsIHBsYXkoKSBvbiBldmVyeSBsb2Fkc3RhcnRcbiAgICogICAgICAgIC0gJ211dGVkJzogY2FsbCBtdXRlZCgpIHRoZW4gcGxheSgpIG9uIGV2ZXJ5IGxvYWRzdGFydFxuICAgKiAgICAgICAgLSAnYW55JzogY2FsbCBwbGF5KCkgb24gZXZlcnkgbG9hZHN0YXJ0LiBpZiB0aGF0IGZhaWxzIGNhbGwgbXV0ZWQoKSB0aGVuIHBsYXkoKS5cbiAgICogICAgICAgIC0gKjogdmFsdWVzIG90aGVyIHRoYW4gdGhvc2UgbGlzdGVkIGhlcmUgd2lsbCBiZSBzZXQgYGF1dG9wbGF5YCB0byB0cnVlXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHZhbHVlIG9mIGF1dG9wbGF5IHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hdXRvcGxheSA9IGZ1bmN0aW9uIGF1dG9wbGF5KHZhbHVlKSB7XG4gICAgLy8gZ2V0dGVyIHVzYWdlXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNfLmF1dG9wbGF5IHx8IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB0ZWNoQXV0b3BsYXk7IC8vIGlmIHRoZSB2YWx1ZSBpcyBhIHZhbGlkIHN0cmluZyBzZXQgaXQgdG8gdGhhdFxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgLyhhbnl8cGxheXxtdXRlZCkvLnRlc3QodmFsdWUpKSB7XG4gICAgICB0aGlzLm9wdGlvbnNfLmF1dG9wbGF5ID0gdmFsdWU7XG4gICAgICB0aGlzLm1hbnVhbEF1dG9wbGF5Xyh2YWx1ZSk7XG4gICAgICB0ZWNoQXV0b3BsYXkgPSBmYWxzZTsgLy8gYW55IGZhbHN5IHZhbHVlIHNldHMgYXV0b3BsYXkgdG8gZmFsc2UgaW4gdGhlIGJyb3dzZXIsXG4gICAgICAvLyBsZXRzIGRvIHRoZSBzYW1lXG4gICAgfSBlbHNlIGlmICghdmFsdWUpIHtcbiAgICAgIHRoaXMub3B0aW9uc18uYXV0b3BsYXkgPSBmYWxzZTsgLy8gYW55IG90aGVyIHZhbHVlIChpZSB0cnV0aHkpIHNldHMgYXV0b3BsYXkgdG8gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wdGlvbnNfLmF1dG9wbGF5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0ZWNoQXV0b3BsYXkgPSB0eXBlb2YgdGVjaEF1dG9wbGF5ID09PSAndW5kZWZpbmVkJyA/IHRoaXMub3B0aW9uc18uYXV0b3BsYXkgOiB0ZWNoQXV0b3BsYXk7IC8vIGlmIHdlIGRvbid0IGhhdmUgYSB0ZWNoIHRoZW4gd2UgZG8gbm90IHF1ZXVlIHVwXG4gICAgLy8gYSBzZXRBdXRvcGxheSBjYWxsIG9uIHRlY2ggcmVhZHkuIFdlIGRvIHRoaXMgYmVjYXVzZSB0aGVcbiAgICAvLyBhdXRvcGxheSBvcHRpb24gd2lsbCBiZSBwYXNzZWQgaW4gdGhlIGNvbnN0cnVjdG9yIGFuZCB3ZVxuICAgIC8vIGRvIG5vdCBuZWVkIHRvIHNldCBpdCB0d2ljZVxuXG4gICAgaWYgKHRoaXMudGVjaF8pIHtcbiAgICAgIHRoaXMudGVjaENhbGxfKCdzZXRBdXRvcGxheScsIHRlY2hBdXRvcGxheSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTZXQgb3IgdW5zZXQgdGhlIHBsYXlzaW5saW5lIGF0dHJpYnV0ZS5cbiAgICogUGxheXNpbmxpbmUgdGVsbHMgdGhlIGJyb3dzZXIgdGhhdCBub24tZnVsbHNjcmVlbiBwbGF5YmFjayBpcyBwcmVmZXJyZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ZhbHVlXVxuICAgKiAgICAgICAgLSB0cnVlIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIHRyeSB0byBwbGF5IGlubGluZSBieSBkZWZhdWx0XG4gICAqICAgICAgICAtIGZhbHNlIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIHVzZSB0aGUgYnJvd3NlcidzIGRlZmF1bHQgcGxheWJhY2sgbW9kZSxcbiAgICogICAgICAgICAgd2hpY2ggaW4gbW9zdCBjYXNlcyBpcyBpbmxpbmUuIGlPUyBTYWZhcmkgaXMgYSBub3RhYmxlIGV4Y2VwdGlvblxuICAgKiAgICAgICAgICBhbmQgcGxheXMgZnVsbHNjcmVlbiBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8UGxheWVyfVxuICAgKiAgICAgICAgIC0gdGhlIGN1cnJlbnQgdmFsdWUgb2YgcGxheXNpbmxpbmVcbiAgICogICAgICAgICAtIHRoZSBwbGF5ZXIgd2hlbiBzZXR0aW5nXG4gICAqXG4gICAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2F0dHItdmlkZW8tcGxheXNpbmxpbmV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBsYXlzaW5saW5lID0gZnVuY3Rpb24gcGxheXNpbmxpbmUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50ZWNoQ2FsbF8oJ3NldFBsYXlzaW5saW5lJywgdmFsdWUpO1xuICAgICAgdGhpcy5vcHRpb25zXy5wbGF5c2lubGluZSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVjaEdldF8oJ3BsYXlzaW5saW5lJyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGxvb3AgYXR0cmlidXRlIG9uIHRoZSB2aWRlbyBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt2YWx1ZV1cbiAgICogICAgICAgIC0gdHJ1ZSBtZWFucyB0aGF0IHdlIHNob3VsZCBsb29wIHRoZSB2aWRlb1xuICAgKiAgICAgICAgLSBmYWxzZSBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbG9vcCB0aGUgdmlkZW9cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICBUaGUgY3VycmVudCB2YWx1ZSBvZiBsb29wIHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sb29wID0gZnVuY3Rpb24gbG9vcCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnRlY2hDYWxsXygnc2V0TG9vcCcsIHZhbHVlKTtcbiAgICAgIHRoaXMub3B0aW9uc18ubG9vcCA9IHZhbHVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlY2hHZXRfKCdsb29wJyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIHBvc3RlciBpbWFnZSBzb3VyY2UgdXJsXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjcG9zdGVyY2hhbmdlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3JjXVxuICAgKiAgICAgICAgUG9zdGVyIGltYWdlIHNvdXJjZSBVUkxcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHZhbHVlIG9mIHBvc3RlciB3aGVuIGdldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucG9zdGVyID0gZnVuY3Rpb24gcG9zdGVyKHNyYykge1xuICAgIGlmIChzcmMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMucG9zdGVyXztcbiAgICB9IC8vIFRoZSBjb3JyZWN0IHdheSB0byByZW1vdmUgYSBwb3N0ZXIgaXMgdG8gc2V0IGFzIGFuIGVtcHR5IHN0cmluZ1xuICAgIC8vIG90aGVyIGZhbHNleSB2YWx1ZXMgd2lsbCB0aHJvdyBlcnJvcnNcblxuXG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHNyYyA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzcmMgPT09IHRoaXMucG9zdGVyXykge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gdXBkYXRlIHRoZSBpbnRlcm5hbCBwb3N0ZXIgdmFyaWFibGVcblxuXG4gICAgdGhpcy5wb3N0ZXJfID0gc3JjOyAvLyB1cGRhdGUgdGhlIHRlY2gncyBwb3N0ZXJcblxuICAgIHRoaXMudGVjaENhbGxfKCdzZXRQb3N0ZXInLCBzcmMpO1xuICAgIHRoaXMuaXNQb3N0ZXJGcm9tVGVjaF8gPSBmYWxzZTsgLy8gYWxlcnQgY29tcG9uZW50cyB0aGF0IHRoZSBwb3N0ZXIgaGFzIGJlZW4gc2V0XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGV2ZW50IGZpcmVzIHdoZW4gdGhlIHBvc3RlciBpbWFnZSBpcyBjaGFuZ2VkIG9uIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgUGxheWVyI3Bvc3RlcmNoYW5nZVxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcigncG9zdGVyY2hhbmdlJyk7XG4gIH1cbiAgLyoqXG4gICAqIFNvbWUgdGVjaHMgKGUuZy4gWW91VHViZSkgY2FuIHByb3ZpZGUgYSBwb3N0ZXIgc291cmNlIGluIGFuXG4gICAqIGFzeW5jaHJvbm91cyB3YXkuIFdlIHdhbnQgdGhlIHBvc3RlciBjb21wb25lbnQgdG8gdXNlIHRoaXNcbiAgICogcG9zdGVyIHNvdXJjZSBzbyB0aGF0IGl0IGNvdmVycyB1cCB0aGUgdGVjaCdzIGNvbnRyb2xzLlxuICAgKiAoWW91VHViZSdzIHBsYXkgYnV0dG9uKS4gSG93ZXZlciB3ZSBvbmx5IHdhbnQgdG8gdXNlIHRoaXNcbiAgICogc291cmNlIGlmIHRoZSBwbGF5ZXIgdXNlciBoYXNuJ3Qgc2V0IGEgcG9zdGVyIHRocm91Z2hcbiAgICogdGhlIG5vcm1hbCBBUElzLlxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI3Bvc3RlcmNoYW5nZVxuICAgKiBAbGlzdGVucyBUZWNoI3Bvc3RlcmNoYW5nZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVUZWNoUG9zdGVyQ2hhbmdlXyA9IGZ1bmN0aW9uIGhhbmRsZVRlY2hQb3N0ZXJDaGFuZ2VfKCkge1xuICAgIGlmICgoIXRoaXMucG9zdGVyXyB8fCB0aGlzLm9wdGlvbnNfLnRlY2hDYW5PdmVycmlkZVBvc3RlcikgJiYgdGhpcy50ZWNoXyAmJiB0aGlzLnRlY2hfLnBvc3Rlcikge1xuICAgICAgdmFyIG5ld1Bvc3RlciA9IHRoaXMudGVjaF8ucG9zdGVyKCkgfHwgJyc7XG5cbiAgICAgIGlmIChuZXdQb3N0ZXIgIT09IHRoaXMucG9zdGVyXykge1xuICAgICAgICB0aGlzLnBvc3Rlcl8gPSBuZXdQb3N0ZXI7XG4gICAgICAgIHRoaXMuaXNQb3N0ZXJGcm9tVGVjaF8gPSB0cnVlOyAvLyBMZXQgY29tcG9uZW50cyBrbm93IHRoZSBwb3N0ZXIgaGFzIGNoYW5nZWRcblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Bvc3RlcmNoYW5nZScpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCB3aGV0aGVyIG9yIG5vdCB0aGUgY29udHJvbHMgYXJlIHNob3dpbmcuXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjY29udHJvbHNlbmFibGVkXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Jvb2xdXG4gICAqICAgICAgICAtIHRydWUgdG8gdHVybiBjb250cm9scyBvblxuICAgKiAgICAgICAgLSBmYWxzZSB0byB0dXJuIGNvbnRyb2xzIG9mZlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHZhbHVlIG9mIGNvbnRyb2xzIHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb250cm9scyA9IGZ1bmN0aW9uIGNvbnRyb2xzKGJvb2wpIHtcbiAgICBpZiAoYm9vbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmNvbnRyb2xzXztcbiAgICB9XG5cbiAgICBib29sID0gISFib29sOyAvLyBEb24ndCB0cmlnZ2VyIGEgY2hhbmdlIGV2ZW50IHVubGVzcyBpdCBhY3R1YWxseSBjaGFuZ2VkXG5cbiAgICBpZiAodGhpcy5jb250cm9sc18gPT09IGJvb2wpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRyb2xzXyA9IGJvb2w7XG5cbiAgICBpZiAodGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKCkpIHtcbiAgICAgIHRoaXMudGVjaENhbGxfKCdzZXRDb250cm9scycsIGJvb2wpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbnRyb2xzXykge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWNvbnRyb2xzLWRpc2FibGVkJyk7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtY29udHJvbHMtZW5hYmxlZCcpO1xuICAgICAgLyoqXG4gICAgICAgKiBAZXZlbnQgUGxheWVyI2NvbnRyb2xzZW5hYmxlZFxuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICovXG5cbiAgICAgIHRoaXMudHJpZ2dlcignY29udHJvbHNlbmFibGVkJyk7XG5cbiAgICAgIGlmICghdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKCkpIHtcbiAgICAgICAgdGhpcy5hZGRUZWNoQ29udHJvbHNMaXN0ZW5lcnNfKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1jb250cm9scy1lbmFibGVkJyk7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtY29udHJvbHMtZGlzYWJsZWQnKTtcbiAgICAgIC8qKlxuICAgICAgICogQGV2ZW50IFBsYXllciNjb250cm9sc2Rpc2FibGVkXG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cblxuICAgICAgdGhpcy50cmlnZ2VyKCdjb250cm9sc2Rpc2FibGVkJyk7XG5cbiAgICAgIGlmICghdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKCkpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVUZWNoQ29udHJvbHNMaXN0ZW5lcnNfKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUb2dnbGUgbmF0aXZlIGNvbnRyb2xzIG9uL29mZi4gTmF0aXZlIGNvbnRyb2xzIGFyZSB0aGUgY29udHJvbHMgYnVpbHQgaW50b1xuICAgKiBkZXZpY2VzIChlLmcuIGRlZmF1bHQgaVBob25lIGNvbnRyb2xzKSwgRmxhc2gsIG9yIG90aGVyIHRlY2hzXG4gICAqIChlLmcuIFZpbWVvIENvbnRyb2xzKVxuICAgKiAqKlRoaXMgc2hvdWxkIG9ubHkgYmUgc2V0IGJ5IHRoZSBjdXJyZW50IHRlY2gsIGJlY2F1c2Ugb25seSB0aGUgdGVjaCBrbm93c1xuICAgKiBpZiBpdCBjYW4gc3VwcG9ydCBuYXRpdmUgY29udHJvbHMqKlxuICAgKlxuICAgKiBAZmlyZXMgUGxheWVyI3VzaW5nbmF0aXZlY29udHJvbHNcbiAgICogQGZpcmVzIFBsYXllciN1c2luZ2N1c3RvbWNvbnRyb2xzXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Jvb2xdXG4gICAqICAgICAgICAtIHRydWUgdG8gdHVybiBuYXRpdmUgY29udHJvbHMgb25cbiAgICogICAgICAgIC0gZmFsc2UgdG8gdHVybiBuYXRpdmUgY29udHJvbHMgb2ZmXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgdmFsdWUgb2YgbmF0aXZlIGNvbnRyb2xzIHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2luZ05hdGl2ZUNvbnRyb2xzID0gZnVuY3Rpb24gdXNpbmdOYXRpdmVDb250cm9scyhib29sKSB7XG4gICAgaWYgKGJvb2wgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICEhdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzXztcbiAgICB9XG5cbiAgICBib29sID0gISFib29sOyAvLyBEb24ndCB0cmlnZ2VyIGEgY2hhbmdlIGV2ZW50IHVubGVzcyBpdCBhY3R1YWxseSBjaGFuZ2VkXG5cbiAgICBpZiAodGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzXyA9PT0gYm9vbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudXNpbmdOYXRpdmVDb250cm9sc18gPSBib29sO1xuXG4gICAgaWYgKHRoaXMudXNpbmdOYXRpdmVDb250cm9sc18pIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy11c2luZy1uYXRpdmUtY29udHJvbHMnKTtcbiAgICAgIC8qKlxuICAgICAgICogcGxheWVyIGlzIHVzaW5nIHRoZSBuYXRpdmUgZGV2aWNlIGNvbnRyb2xzXG4gICAgICAgKlxuICAgICAgICogQGV2ZW50IFBsYXllciN1c2luZ25hdGl2ZWNvbnRyb2xzXG4gICAgICAgKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICAgKi9cblxuICAgICAgdGhpcy50cmlnZ2VyKCd1c2luZ25hdGl2ZWNvbnRyb2xzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy11c2luZy1uYXRpdmUtY29udHJvbHMnKTtcbiAgICAgIC8qKlxuICAgICAgICogcGxheWVyIGlzIHVzaW5nIHRoZSBjdXN0b20gSFRNTCBjb250cm9sc1xuICAgICAgICpcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjdXNpbmdjdXN0b21jb250cm9sc1xuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICovXG5cbiAgICAgIHRoaXMudHJpZ2dlcigndXNpbmdjdXN0b21jb250cm9scycpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0IG9yIGdldCB0aGUgY3VycmVudCBNZWRpYUVycm9yXG4gICAqXG4gICAqIEBmaXJlcyBQbGF5ZXIjZXJyb3JcbiAgICpcbiAgICogQHBhcmFtICB7TWVkaWFFcnJvcnxzdHJpbmd8bnVtYmVyfSBbZXJyXVxuICAgKiAgICAgICAgIEEgTWVkaWFFcnJvciBvciBhIHN0cmluZy9udW1iZXIgdG8gYmUgdHVybmVkXG4gICAqICAgICAgICAgaW50byBhIE1lZGlhRXJyb3JcbiAgICpcbiAgICogQHJldHVybiB7TWVkaWFFcnJvcnxudWxsfVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IE1lZGlhRXJyb3Igd2hlbiBnZXR0aW5nIChvciBudWxsKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKGVycikge1xuICAgIGlmIChlcnIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZXJyb3JfIHx8IG51bGw7XG4gICAgfSAvLyBTdXBwcmVzcyB0aGUgZmlyc3QgZXJyb3IgbWVzc2FnZSBmb3Igbm8gY29tcGF0aWJsZSBzb3VyY2UgdW50aWxcbiAgICAvLyB1c2VyIGludGVyYWN0aW9uXG5cblxuICAgIGlmICh0aGlzLm9wdGlvbnNfLnN1cHByZXNzTm90U3VwcG9ydGVkRXJyb3IgJiYgZXJyICYmIGVyci5jb2RlID09PSA0KSB7XG4gICAgICB2YXIgdHJpZ2dlclN1cHByZXNzZWRFcnJvciA9IGZ1bmN0aW9uIHRyaWdnZXJTdXBwcmVzc2VkRXJyb3IoKSB7XG4gICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMub3B0aW9uc18uc3VwcHJlc3NOb3RTdXBwb3J0ZWRFcnJvciA9IGZhbHNlO1xuICAgICAgdGhpcy5hbnkoWydjbGljaycsICd0b3VjaHN0YXJ0J10sIHRyaWdnZXJTdXBwcmVzc2VkRXJyb3IpO1xuICAgICAgdGhpcy5vbmUoJ2xvYWRzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vZmYoWydjbGljaycsICd0b3VjaHN0YXJ0J10sIHRyaWdnZXJTdXBwcmVzc2VkRXJyb3IpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyByZXN0b3JpbmcgdG8gZGVmYXVsdFxuXG5cbiAgICBpZiAoZXJyID09PSBudWxsKSB7XG4gICAgICB0aGlzLmVycm9yXyA9IGVycjtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1lcnJvcicpO1xuXG4gICAgICBpZiAodGhpcy5lcnJvckRpc3BsYXkpIHtcbiAgICAgICAgdGhpcy5lcnJvckRpc3BsYXkuY2xvc2UoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZXJyb3JfID0gbmV3IE1lZGlhRXJyb3IoZXJyKTsgLy8gYWRkIHRoZSB2anMtZXJyb3IgY2xhc3NuYW1lIHRvIHRoZSBwbGF5ZXJcblxuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1lcnJvcicpOyAvLyBsb2cgdGhlIG5hbWUgb2YgdGhlIGVycm9yIHR5cGUgYW5kIGFueSBtZXNzYWdlXG4gICAgLy8gSUUxMSBsb2dzIFwiW29iamVjdCBvYmplY3RdXCIgYW5kIHJlcXVpcmVkIHlvdSB0byBleHBhbmQgbWVzc2FnZSB0byBzZWUgZXJyb3Igb2JqZWN0XG5cbiAgICBsb2cuZXJyb3IoXCIoQ09ERTpcIiArIHRoaXMuZXJyb3JfLmNvZGUgKyBcIiBcIiArIE1lZGlhRXJyb3IuZXJyb3JUeXBlc1t0aGlzLmVycm9yXy5jb2RlXSArIFwiKVwiLCB0aGlzLmVycm9yXy5tZXNzYWdlLCB0aGlzLmVycm9yXyk7XG4gICAgLyoqXG4gICAgICogQGV2ZW50IFBsYXllciNlcnJvclxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcignZXJyb3InKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIFJlcG9ydCB1c2VyIGFjdGl2aXR5XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgKiAgICAgICAgRXZlbnQgb2JqZWN0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcG9ydFVzZXJBY3Rpdml0eSA9IGZ1bmN0aW9uIHJlcG9ydFVzZXJBY3Rpdml0eShldmVudCkge1xuICAgIHRoaXMudXNlckFjdGl2aXR5XyA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldC9zZXQgaWYgdXNlciBpcyBhY3RpdmVcbiAgICpcbiAgICogQGZpcmVzIFBsYXllciN1c2VyYWN0aXZlXG4gICAqIEBmaXJlcyBQbGF5ZXIjdXNlcmluYWN0aXZlXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Jvb2xdXG4gICAqICAgICAgICAtIHRydWUgaWYgdGhlIHVzZXIgaXMgYWN0aXZlXG4gICAqICAgICAgICAtIGZhbHNlIGlmIHRoZSB1c2VyIGlzIGluYWN0aXZlXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgdmFsdWUgb2YgdXNlckFjdGl2ZSB3aGVuIGdldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXNlckFjdGl2ZSA9IGZ1bmN0aW9uIHVzZXJBY3RpdmUoYm9vbCkge1xuICAgIGlmIChib29sID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnVzZXJBY3RpdmVfO1xuICAgIH1cblxuICAgIGJvb2wgPSAhIWJvb2w7XG5cbiAgICBpZiAoYm9vbCA9PT0gdGhpcy51c2VyQWN0aXZlXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudXNlckFjdGl2ZV8gPSBib29sO1xuXG4gICAgaWYgKHRoaXMudXNlckFjdGl2ZV8pIHtcbiAgICAgIHRoaXMudXNlckFjdGl2aXR5XyA9IHRydWU7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtdXNlci1pbmFjdGl2ZScpO1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLXVzZXItYWN0aXZlJyk7XG4gICAgICAvKipcbiAgICAgICAqIEBldmVudCBQbGF5ZXIjdXNlcmFjdGl2ZVxuICAgICAgICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICAgICAgICovXG5cbiAgICAgIHRoaXMudHJpZ2dlcigndXNlcmFjdGl2ZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQ2hyb21lL1NhZmFyaS9JRSBoYXZlIGJ1Z3Mgd2hlcmUgd2hlbiB5b3UgY2hhbmdlIHRoZSBjdXJzb3IgaXQgY2FuXG4gICAgLy8gdHJpZ2dlciBhIG1vdXNlbW92ZSBldmVudC4gVGhpcyBjYXVzZXMgYW4gaXNzdWUgd2hlbiB5b3UncmUgaGlkaW5nXG4gICAgLy8gdGhlIGN1cnNvciB3aGVuIHRoZSB1c2VyIGlzIGluYWN0aXZlLCBhbmQgYSBtb3VzZW1vdmUgc2lnbmFscyB1c2VyXG4gICAgLy8gYWN0aXZpdHkuIE1ha2luZyBpdCBpbXBvc3NpYmxlIHRvIGdvIGludG8gaW5hY3RpdmUgbW9kZS4gU3BlY2lmaWNhbGx5XG4gICAgLy8gdGhpcyBoYXBwZW5zIGluIGZ1bGxzY3JlZW4gd2hlbiB3ZSByZWFsbHkgbmVlZCB0byBoaWRlIHRoZSBjdXJzb3IuXG4gICAgLy9cbiAgICAvLyBXaGVuIHRoaXMgZ2V0cyByZXNvbHZlZCBpbiBBTEwgYnJvd3NlcnMgaXQgY2FuIGJlIHJlbW92ZWRcbiAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTAzMDQxXG5cblxuICAgIGlmICh0aGlzLnRlY2hfKSB7XG4gICAgICB0aGlzLnRlY2hfLm9uZSgnbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy51c2VyQWN0aXZpdHlfID0gZmFsc2U7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXVzZXItYWN0aXZlJyk7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXVzZXItaW5hY3RpdmUnKTtcbiAgICAvKipcbiAgICAgKiBAZXZlbnQgUGxheWVyI3VzZXJpbmFjdGl2ZVxuICAgICAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAgICAgKi9cblxuICAgIHRoaXMudHJpZ2dlcigndXNlcmluYWN0aXZlJyk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3RlbiBmb3IgdXNlciBhY3Rpdml0eSBiYXNlZCBvbiB0aW1lb3V0IHZhbHVlXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxpc3RlbkZvclVzZXJBY3Rpdml0eV8gPSBmdW5jdGlvbiBsaXN0ZW5Gb3JVc2VyQWN0aXZpdHlfKCkge1xuICAgIHZhciBtb3VzZUluUHJvZ3Jlc3M7XG4gICAgdmFyIGxhc3RNb3ZlWDtcbiAgICB2YXIgbGFzdE1vdmVZO1xuICAgIHZhciBoYW5kbGVBY3Rpdml0eSA9IGJpbmQodGhpcywgdGhpcy5yZXBvcnRVc2VyQWN0aXZpdHkpO1xuXG4gICAgdmFyIGhhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShlKSB7XG4gICAgICAvLyAjMTA2OCAtIFByZXZlbnQgbW91c2Vtb3ZlIHNwYW1taW5nXG4gICAgICAvLyBDaHJvbWUgQnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzY2OTcwXG4gICAgICBpZiAoZS5zY3JlZW5YICE9PSBsYXN0TW92ZVggfHwgZS5zY3JlZW5ZICE9PSBsYXN0TW92ZVkpIHtcbiAgICAgICAgbGFzdE1vdmVYID0gZS5zY3JlZW5YO1xuICAgICAgICBsYXN0TW92ZVkgPSBlLnNjcmVlblk7XG4gICAgICAgIGhhbmRsZUFjdGl2aXR5KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBoYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oKSB7XG4gICAgICBoYW5kbGVBY3Rpdml0eSgpOyAvLyBGb3IgYXMgbG9uZyBhcyB0aGUgdGhleSBhcmUgdG91Y2hpbmcgdGhlIGRldmljZSBvciBoYXZlIHRoZWlyIG1vdXNlIGRvd24sXG4gICAgICAvLyB3ZSBjb25zaWRlciB0aGVtIGFjdGl2ZSBldmVuIGlmIHRoZXkncmUgbm90IG1vdmluZyB0aGVpciBmaW5nZXIgb3IgbW91c2UuXG4gICAgICAvLyBTbyB3ZSB3YW50IHRvIGNvbnRpbnVlIHRvIHVwZGF0ZSB0aGF0IHRoZXkgYXJlIGFjdGl2ZVxuXG4gICAgICB0aGlzLmNsZWFySW50ZXJ2YWwobW91c2VJblByb2dyZXNzKTsgLy8gU2V0dGluZyB1c2VyQWN0aXZpdHk9dHJ1ZSBub3cgYW5kIHNldHRpbmcgdGhlIGludGVydmFsIHRvIHRoZSBzYW1lIHRpbWVcbiAgICAgIC8vIGFzIHRoZSBhY3Rpdml0eUNoZWNrIGludGVydmFsICgyNTApIHNob3VsZCBlbnN1cmUgd2UgbmV2ZXIgbWlzcyB0aGVcbiAgICAgIC8vIG5leHQgYWN0aXZpdHlDaGVja1xuXG4gICAgICBtb3VzZUluUHJvZ3Jlc3MgPSB0aGlzLnNldEludGVydmFsKGhhbmRsZUFjdGl2aXR5LCAyNTApO1xuICAgIH07XG5cbiAgICB2YXIgaGFuZGxlTW91c2VVcEFuZE1vdXNlTGVhdmUgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZVVwQW5kTW91c2VMZWF2ZShldmVudCkge1xuICAgICAgaGFuZGxlQWN0aXZpdHkoKTsgLy8gU3RvcCB0aGUgaW50ZXJ2YWwgdGhhdCBtYWludGFpbnMgYWN0aXZpdHkgaWYgdGhlIG1vdXNlL3RvdWNoIGlzIGRvd25cblxuICAgICAgdGhpcy5jbGVhckludGVydmFsKG1vdXNlSW5Qcm9ncmVzcyk7XG4gICAgfTsgLy8gQW55IG1vdXNlIG1vdmVtZW50IHdpbGwgYmUgY29uc2lkZXJlZCB1c2VyIGFjdGl2aXR5XG5cblxuICAgIHRoaXMub24oJ21vdXNlZG93bicsIGhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vbignbW91c2Vtb3ZlJywgaGFuZGxlTW91c2VNb3ZlKTtcbiAgICB0aGlzLm9uKCdtb3VzZXVwJywgaGFuZGxlTW91c2VVcEFuZE1vdXNlTGVhdmUpO1xuICAgIHRoaXMub24oJ21vdXNlbGVhdmUnLCBoYW5kbGVNb3VzZVVwQW5kTW91c2VMZWF2ZSk7XG4gICAgdmFyIGNvbnRyb2xCYXIgPSB0aGlzLmdldENoaWxkKCdjb250cm9sQmFyJyk7IC8vIEZpeGVzIGJ1ZyBvbiBBbmRyb2lkICYgaU9TIHdoZXJlIHdoZW4gdGFwcGluZyBwcm9ncmVzc0JhciAod2hlbiBjb250cm9sIGJhciBpcyBkaXNwbGF5ZWQpXG4gICAgLy8gY29udHJvbEJhciB3b3VsZCBubyBsb25nZXIgYmUgaGlkZGVuIGJ5IGRlZmF1bHQgdGltZW91dC5cblxuICAgIGlmIChjb250cm9sQmFyICYmICFJU19JT1MgJiYgIUlTX0FORFJPSUQpIHtcbiAgICAgIGNvbnRyb2xCYXIub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIoKS5jYWNoZV8uaW5hY3Rpdml0eVRpbWVvdXQgPSB0aGlzLnBsYXllcigpLm9wdGlvbnNfLmluYWN0aXZpdHlUaW1lb3V0O1xuICAgICAgICB0aGlzLnBsYXllcigpLm9wdGlvbnNfLmluYWN0aXZpdHlUaW1lb3V0ID0gMDtcbiAgICAgIH0pO1xuICAgICAgY29udHJvbEJhci5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLnBsYXllcigpLm9wdGlvbnNfLmluYWN0aXZpdHlUaW1lb3V0ID0gdGhpcy5wbGF5ZXIoKS5jYWNoZV8uaW5hY3Rpdml0eVRpbWVvdXQ7XG4gICAgICB9KTtcbiAgICB9IC8vIExpc3RlbiBmb3Iga2V5Ym9hcmQgbmF2aWdhdGlvblxuICAgIC8vIFNob3VsZG4ndCBuZWVkIHRvIHVzZSBpblByb2dyZXNzIGludGVydmFsIGJlY2F1c2Ugb2Yga2V5IHJlcGVhdFxuXG5cbiAgICB0aGlzLm9uKCdrZXlkb3duJywgaGFuZGxlQWN0aXZpdHkpO1xuICAgIHRoaXMub24oJ2tleXVwJywgaGFuZGxlQWN0aXZpdHkpOyAvLyBSdW4gYW4gaW50ZXJ2YWwgZXZlcnkgMjUwIG1pbGxpc2Vjb25kcyBpbnN0ZWFkIG9mIHN0dWZmaW5nIGV2ZXJ5dGhpbmcgaW50b1xuICAgIC8vIHRoZSBtb3VzZW1vdmUvdG91Y2htb3ZlIGZ1bmN0aW9uIGl0c2VsZiwgdG8gcHJldmVudCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvbi5cbiAgICAvLyBgdGhpcy5yZXBvcnRVc2VyQWN0aXZpdHlgIHNpbXBseSBzZXRzIHRoaXMudXNlckFjdGl2aXR5XyB0byB0cnVlLCB3aGljaFxuICAgIC8vIHRoZW4gZ2V0cyBwaWNrZWQgdXAgYnkgdGhpcyBsb29wXG4gICAgLy8gaHR0cDovL2Vqb2huLm9yZy9ibG9nL2xlYXJuaW5nLWZyb20tdHdpdHRlci9cblxuICAgIHZhciBpbmFjdGl2aXR5VGltZW91dDtcbiAgICB0aGlzLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiBtb3VzZS90b3VjaCBhY3Rpdml0eSBoYXMgaGFwcGVuZWRcbiAgICAgIGlmICghdGhpcy51c2VyQWN0aXZpdHlfKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gUmVzZXQgdGhlIGFjdGl2aXR5IHRyYWNrZXJcblxuXG4gICAgICB0aGlzLnVzZXJBY3Rpdml0eV8gPSBmYWxzZTsgLy8gSWYgdGhlIHVzZXIgc3RhdGUgd2FzIGluYWN0aXZlLCBzZXQgdGhlIHN0YXRlIHRvIGFjdGl2ZVxuXG4gICAgICB0aGlzLnVzZXJBY3RpdmUodHJ1ZSk7IC8vIENsZWFyIGFueSBleGlzdGluZyBpbmFjdGl2aXR5IHRpbWVvdXQgdG8gc3RhcnQgdGhlIHRpbWVyIG92ZXJcblxuICAgICAgdGhpcy5jbGVhclRpbWVvdXQoaW5hY3Rpdml0eVRpbWVvdXQpO1xuICAgICAgdmFyIHRpbWVvdXQgPSB0aGlzLm9wdGlvbnNfLmluYWN0aXZpdHlUaW1lb3V0O1xuXG4gICAgICBpZiAodGltZW91dCA8PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gSW4gPHRpbWVvdXQ+IG1pbGxpc2Vjb25kcywgaWYgbm8gbW9yZSBhY3Rpdml0eSBoYXMgb2NjdXJyZWQgdGhlXG4gICAgICAvLyB1c2VyIHdpbGwgYmUgY29uc2lkZXJlZCBpbmFjdGl2ZVxuXG5cbiAgICAgIGluYWN0aXZpdHlUaW1lb3V0ID0gdGhpcy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUHJvdGVjdCBhZ2FpbnN0IHRoZSBjYXNlIHdoZXJlIHRoZSBpbmFjdGl2aXR5VGltZW91dCBjYW4gdHJpZ2dlciBqdXN0XG4gICAgICAgIC8vIGJlZm9yZSB0aGUgbmV4dCB1c2VyIGFjdGl2aXR5IGlzIHBpY2tlZCB1cCBieSB0aGUgYWN0aXZpdHkgY2hlY2sgbG9vcFxuICAgICAgICAvLyBjYXVzaW5nIGEgZmxpY2tlclxuICAgICAgICBpZiAoIXRoaXMudXNlckFjdGl2aXR5Xykge1xuICAgICAgICAgIHRoaXMudXNlckFjdGl2ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH0sIDI1MCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgY3VycmVudCBwbGF5YmFjayByYXRlLiBBIHBsYXliYWNrIHJhdGUgb2ZcbiAgICogMS4wIHJlcHJlc2VudHMgbm9ybWFsIHNwZWVkIGFuZCAwLjUgd291bGQgaW5kaWNhdGUgaGFsZi1zcGVlZFxuICAgKiBwbGF5YmFjaywgZm9yIGluc3RhbmNlLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNkb20tbWVkaWEtcGxheWJhY2tyYXRlXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbcmF0ZV1cbiAgICogICAgICAgTmV3IHBsYXliYWNrIHJhdGUgdG8gc2V0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgcGxheWJhY2sgcmF0ZSB3aGVuIGdldHRpbmcgb3IgMS4wXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBsYXliYWNrUmF0ZSA9IGZ1bmN0aW9uIHBsYXliYWNrUmF0ZShyYXRlKSB7XG4gICAgaWYgKHJhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gTk9URTogdGhpcy5jYWNoZV8ubGFzdFBsYXliYWNrUmF0ZSBpcyBzZXQgZnJvbSB0aGUgdGVjaCBoYW5kbGVyXG4gICAgICAvLyB0aGF0IGlzIHJlZ2lzdGVyZWQgYWJvdmVcbiAgICAgIHRoaXMudGVjaENhbGxfKCdzZXRQbGF5YmFja1JhdGUnLCByYXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50ZWNoXyAmJiB0aGlzLnRlY2hfLmZlYXR1cmVzUGxheWJhY2tSYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZV8ubGFzdFBsYXliYWNrUmF0ZSB8fCB0aGlzLnRlY2hHZXRfKCdwbGF5YmFja1JhdGUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gMS4wO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIGN1cnJlbnQgZGVmYXVsdCBwbGF5YmFjayByYXRlLiBBIGRlZmF1bHQgcGxheWJhY2sgcmF0ZSBvZlxuICAgKiAxLjAgcmVwcmVzZW50cyBub3JtYWwgc3BlZWQgYW5kIDAuNSB3b3VsZCBpbmRpY2F0ZSBoYWxmLXNwZWVkIHBsYXliYWNrLCBmb3IgaW5zdGFuY2UuXG4gICAqIGRlZmF1bHRQbGF5YmFja1JhdGUgd2lsbCBvbmx5IHJlcHJlc2VudCB3aGF0IHRoZSBpbml0aWFsIHBsYXliYWNrUmF0ZSBvZiBhIHZpZGVvIHdhcywgbm90XG4gICAqIG5vdCB0aGUgY3VycmVudCBwbGF5YmFja1JhdGUuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2RvbS1tZWRpYS1kZWZhdWx0cGxheWJhY2tyYXRlXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbcmF0ZV1cbiAgICogICAgICAgTmV3IGRlZmF1bHQgcGxheWJhY2sgcmF0ZSB0byBzZXQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcnxQbGF5ZXJ9XG4gICAqICAgICAgICAgLSBUaGUgZGVmYXVsdCBwbGF5YmFjayByYXRlIHdoZW4gZ2V0dGluZyBvciAxLjBcbiAgICogICAgICAgICAtIHRoZSBwbGF5ZXIgd2hlbiBzZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlZmF1bHRQbGF5YmFja1JhdGUgPSBmdW5jdGlvbiBkZWZhdWx0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICBpZiAocmF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZWNoQ2FsbF8oJ3NldERlZmF1bHRQbGF5YmFja1JhdGUnLCByYXRlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50ZWNoXyAmJiB0aGlzLnRlY2hfLmZlYXR1cmVzUGxheWJhY2tSYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZWNoR2V0XygnZGVmYXVsdFBsYXliYWNrUmF0ZScpO1xuICAgIH1cblxuICAgIHJldHVybiAxLjA7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgYXVkaW8gZmxhZ1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJvb2xcbiAgICogICAgICAgIC0gdHJ1ZSBzaWduYWxzIHRoYXQgdGhpcyBpcyBhbiBhdWRpbyBwbGF5ZXJcbiAgICogICAgICAgIC0gZmFsc2Ugc2lnbmFscyB0aGF0IHRoaXMgaXMgbm90IGFuIGF1ZGlvIHBsYXllclxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIFRoZSBjdXJyZW50IHZhbHVlIG9mIGlzQXVkaW8gd2hlbiBnZXR0aW5nXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmlzQXVkaW8gPSBmdW5jdGlvbiBpc0F1ZGlvKGJvb2wpIHtcbiAgICBpZiAoYm9vbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzQXVkaW9fID0gISFib29sO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiAhIXRoaXMuaXNBdWRpb187XG4gIH1cbiAgLyoqXG4gICAqIEEgaGVscGVyIG1ldGhvZCBmb3IgYWRkaW5nIGEge0BsaW5rIFRleHRUcmFja30gdG8gb3VyXG4gICAqIHtAbGluayBUZXh0VHJhY2tMaXN0fS5cbiAgICpcbiAgICogSW4gYWRkaXRpb24gdG8gdGhlIFczQyBzZXR0aW5ncyB3ZSBhbGxvdyBhZGRpbmcgYWRkaXRpb25hbCBpbmZvIHRocm91Z2ggb3B0aW9ucy5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9odG1sL3dnL2RyYWZ0cy9odG1sL21hc3Rlci9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtYWRkdGV4dHRyYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBba2luZF1cbiAgICogICAgICAgIHRoZSBraW5kIG9mIFRleHRUcmFjayB5b3UgYXJlIGFkZGluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xhYmVsXVxuICAgKiAgICAgICAgdGhlIGxhYmVsIHRvIGdpdmUgdGhlIFRleHRUcmFjayBsYWJlbFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlXVxuICAgKiAgICAgICAgdGhlIGxhbmd1YWdlIHRvIHNldCBvbiB0aGUgVGV4dFRyYWNrXG4gICAqXG4gICAqIEByZXR1cm4ge1RleHRUcmFja3x1bmRlZmluZWR9XG4gICAqICAgICAgICAgdGhlIFRleHRUcmFjayB0aGF0IHdhcyBhZGRlZCBvciB1bmRlZmluZWRcbiAgICogICAgICAgICBpZiB0aGVyZSBpcyBubyB0ZWNoXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFRleHRUcmFjayA9IGZ1bmN0aW9uIGFkZFRleHRUcmFjayhraW5kLCBsYWJlbCwgbGFuZ3VhZ2UpIHtcbiAgICBpZiAodGhpcy50ZWNoXykge1xuICAgICAgcmV0dXJuIHRoaXMudGVjaF8uYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSByZW1vdGUge0BsaW5rIFRleHRUcmFja30gYW5kIGFuIHtAbGluayBIVE1MVHJhY2tFbGVtZW50fS5cbiAgICogV2hlbiBtYW51YWxDbGVhbnVwIGlzIHNldCB0byBmYWxzZSwgdGhlIHRyYWNrIHdpbGwgYmUgYXV0b21hdGljYWxseSByZW1vdmVkXG4gICAqIG9uIHNvdXJjZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICAgICAgT3B0aW9ucyB0byBwYXNzIHRvIHtAbGluayBIVE1MVHJhY2tFbGVtZW50fSBkdXJpbmcgY3JlYXRpb24uIFNlZVxuICAgKiAgICAgICAge0BsaW5rIEhUTUxUcmFja0VsZW1lbnR9IGZvciBvYmplY3QgcHJvcGVydGllcyB0aGF0IHlvdSBzaG91bGQgdXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFttYW51YWxDbGVhbnVwPXRydWVdIGlmIHNldCB0byBmYWxzZSwgdGhlIFRleHRUcmFjayB3aWxsIGJlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCBvbiBhIHNvdXJjZSBjaGFuZ2VcbiAgICpcbiAgICogQHJldHVybiB7SHRtbFRyYWNrRWxlbWVudH1cbiAgICogICAgICAgICB0aGUgSFRNTFRyYWNrRWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkIGFuZCBhZGRlZFxuICAgKiAgICAgICAgIHRvIHRoZSBIdG1sVHJhY2tFbGVtZW50TGlzdCBhbmQgdGhlIHJlbW90ZVxuICAgKiAgICAgICAgIFRleHRUcmFja0xpc3RcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIFwibWFudWFsQ2xlYW51cFwiIHBhcmFtZXRlciB3aWxsIGRlZmF1bHRcbiAgICogICAgICAgICAgICAgdG8gXCJmYWxzZVwiIGluIHVwY29taW5nIHZlcnNpb25zIG9mIFZpZGVvLmpzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJlbW90ZVRleHRUcmFjayA9IGZ1bmN0aW9uIGFkZFJlbW90ZVRleHRUcmFjayhvcHRpb25zLCBtYW51YWxDbGVhbnVwKSB7XG4gICAgaWYgKHRoaXMudGVjaF8pIHtcbiAgICAgIHJldHVybiB0aGlzLnRlY2hfLmFkZFJlbW90ZVRleHRUcmFjayhvcHRpb25zLCBtYW51YWxDbGVhbnVwKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHJlbW90ZSB7QGxpbmsgVGV4dFRyYWNrfSBmcm9tIHRoZSByZXNwZWN0aXZlXG4gICAqIHtAbGluayBUZXh0VHJhY2tMaXN0fSBhbmQge0BsaW5rIEh0bWxUcmFja0VsZW1lbnRMaXN0fS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYWNrXG4gICAqICAgICAgICBSZW1vdGUge0BsaW5rIFRleHRUcmFja30gdG8gcmVtb3ZlXG4gICAqXG4gICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICogICAgICAgICBkb2VzIG5vdCByZXR1cm4gYW55dGhpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlUmVtb3RlVGV4dFRyYWNrID0gZnVuY3Rpb24gcmVtb3ZlUmVtb3RlVGV4dFRyYWNrKG9iaikge1xuICAgIGlmIChvYmogPT09IHZvaWQgMCkge1xuICAgICAgb2JqID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9vYmogPSBvYmosXG4gICAgICAgIHRyYWNrID0gX29iai50cmFjaztcblxuICAgIGlmICghdHJhY2spIHtcbiAgICAgIHRyYWNrID0gb2JqO1xuICAgIH0gLy8gZGVzdHJ1Y3R1cmUgdGhlIGlucHV0IGludG8gYW4gb2JqZWN0IHdpdGggYSB0cmFjayBhcmd1bWVudCwgZGVmYXVsdGluZyB0byBhcmd1bWVudHNbMF1cbiAgICAvLyBkZWZhdWx0IHRoZSB3aG9sZSBhcmd1bWVudCB0byBhbiBlbXB0eSBvYmplY3QgaWYgbm90aGluZyB3YXMgcGFzc2VkIGluXG5cblxuICAgIGlmICh0aGlzLnRlY2hfKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZWNoXy5yZW1vdmVSZW1vdGVUZXh0VHJhY2sodHJhY2spO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0cyBhdmFpbGFibGUgbWVkaWEgcGxheWJhY2sgcXVhbGl0eSBtZXRyaWNzIGFzIHNwZWNpZmllZCBieSB0aGUgVzNDJ3MgTWVkaWFcbiAgICogUGxheWJhY2sgUXVhbGl0eSBBUEkuXG4gICAqXG4gICAqIEBzZWUgW1NwZWNde0BsaW5rIGh0dHBzOi8vd2ljZy5naXRodWIuaW8vbWVkaWEtcGxheWJhY2stcXVhbGl0eX1cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fHVuZGVmaW5lZH1cbiAgICogICAgICAgICBBbiBvYmplY3Qgd2l0aCBzdXBwb3J0ZWQgbWVkaWEgcGxheWJhY2sgcXVhbGl0eSBtZXRyaWNzIG9yIHVuZGVmaW5lZCBpZiB0aGVyZVxuICAgKiAgICAgICAgIGlzIG5vIHRlY2ggb3IgdGhlIHRlY2ggZG9lcyBub3Qgc3VwcG9ydCBpdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHkgPSBmdW5jdGlvbiBnZXRWaWRlb1BsYXliYWNrUXVhbGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0XygnZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHknKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHZpZGVvIHdpZHRoXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBjdXJyZW50IHZpZGVvIHdpZHRoXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnZpZGVvV2lkdGggPSBmdW5jdGlvbiB2aWRlb1dpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLnRlY2hfICYmIHRoaXMudGVjaF8udmlkZW9XaWR0aCAmJiB0aGlzLnRlY2hfLnZpZGVvV2lkdGgoKSB8fCAwO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdmlkZW8gaGVpZ2h0XG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICAgICAgICBjdXJyZW50IHZpZGVvIGhlaWdodFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by52aWRlb0hlaWdodCA9IGZ1bmN0aW9uIHZpZGVvSGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLnRlY2hfICYmIHRoaXMudGVjaF8udmlkZW9IZWlnaHQgJiYgdGhpcy50ZWNoXy52aWRlb0hlaWdodCgpIHx8IDA7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBwbGF5ZXIncyBsYW5ndWFnZSBjb2RlXG4gICAqIE5PVEU6IFRoZSBsYW5ndWFnZSBzaG91bGQgYmUgc2V0IGluIHRoZSBwbGF5ZXIgb3B0aW9ucyBpZiB5b3Ugd2FudCB0aGVcbiAgICogdGhlIGNvbnRyb2xzIHRvIGJlIGJ1aWx0IHdpdGggYSBzcGVjaWZpYyBsYW5ndWFnZS4gQ2hhbmdpbmcgdGhlIGxhbmd1YWdlXG4gICAqIGxhdGVyIHdpbGwgbm90IHVwZGF0ZSBjb250cm9scyB0ZXh0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdXG4gICAqICAgICAgICB0aGUgbGFuZ3VhZ2UgY29kZSB0byBzZXQgdGhlIHBsYXllciB0b1xuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqICAgICAgICAgVGhlIGN1cnJlbnQgbGFuZ3VhZ2UgY29kZSB3aGVuIGdldHRpbmdcbiAgICovXG4gIDtcblxuICBfcHJvdG8ubGFuZ3VhZ2UgPSBmdW5jdGlvbiBsYW5ndWFnZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMubGFuZ3VhZ2VfO1xuICAgIH1cblxuICAgIHRoaXMubGFuZ3VhZ2VfID0gU3RyaW5nKGNvZGUpLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgcGxheWVyJ3MgbGFuZ3VhZ2UgZGljdGlvbmFyeVxuICAgKiBNZXJnZSBldmVyeSB0aW1lLCBiZWNhdXNlIGEgbmV3bHkgYWRkZWQgcGx1Z2luIG1pZ2h0IGNhbGwgdmlkZW9qcy5hZGRMYW5ndWFnZSgpIGF0IGFueSB0aW1lXG4gICAqIExhbmd1YWdlcyBzcGVjaWZpZWQgZGlyZWN0bHkgaW4gdGhlIHBsYXllciBvcHRpb25zIGhhdmUgcHJlY2VkZW5jZVxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICogICAgICAgICBBbiBhcnJheSBvZiBvZiBzdXBwb3J0ZWQgbGFuZ3VhZ2VzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxhbmd1YWdlcyA9IGZ1bmN0aW9uIGxhbmd1YWdlcygpIHtcbiAgICByZXR1cm4gbWVyZ2VPcHRpb25zKFBsYXllci5wcm90b3R5cGUub3B0aW9uc18ubGFuZ3VhZ2VzLCB0aGlzLmxhbmd1YWdlc18pO1xuICB9XG4gIC8qKlxuICAgKiByZXR1cm5zIGEgSmF2YVNjcmlwdCBvYmplY3QgcmVwZXJlc2VudGluZyB0aGUgY3VycmVudCB0cmFja1xuICAgKiBpbmZvcm1hdGlvbi4gKipET0VTIG5vdCByZXR1cm4gaXQgYXMgSlNPTioqXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogICAgICAgICBPYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IG9mIHRyYWNrIGluZm9cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBvcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9uc18pO1xuICAgIHZhciB0cmFja3MgPSBvcHRpb25zLnRyYWNrcztcbiAgICBvcHRpb25zLnRyYWNrcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0cmFjayA9IHRyYWNrc1tpXTsgLy8gZGVlcCBtZXJnZSB0cmFja3MgYW5kIG51bGwgb3V0IHBsYXllciBzbyBubyBjaXJjdWxhciByZWZlcmVuY2VzXG5cbiAgICAgIHRyYWNrID0gbWVyZ2VPcHRpb25zKHRyYWNrKTtcbiAgICAgIHRyYWNrLnBsYXllciA9IHVuZGVmaW5lZDtcbiAgICAgIG9wdGlvbnMudHJhY2tzW2ldID0gdHJhY2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBzaW1wbGUgbW9kYWwgZGlhbG9nIChhbiBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIE1vZGFsRGlhbG9nfVxuICAgKiBjb21wb25lbnQpIHRoYXQgaW1tZWRpYXRlbHkgb3ZlcmxheXMgdGhlIHBsYXllciB3aXRoIGFyYml0cmFyeVxuICAgKiBjb250ZW50IGFuZCByZW1vdmVzIGl0c2VsZiB3aGVuIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8RnVuY3Rpb258RWxlbWVudHxBcnJheXxudWxsfSBjb250ZW50XG4gICAqICAgICAgICBTYW1lIGFzIHtAbGluayBNb2RhbERpYWxvZyNjb250ZW50fSdzIHBhcmFtIG9mIHRoZSBzYW1lIG5hbWUuXG4gICAqICAgICAgICBUaGUgbW9zdCBzdHJhaWdodC1mb3J3YXJkIHVzYWdlIGlzIHRvIHByb3ZpZGUgYSBzdHJpbmcgb3IgRE9NXG4gICAqICAgICAgICBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqICAgICAgICBFeHRyYSBvcHRpb25zIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9uIHRvIHRoZSB7QGxpbmsgTW9kYWxEaWFsb2d9LlxuICAgKlxuICAgKiBAcmV0dXJuIHtNb2RhbERpYWxvZ31cbiAgICogICAgICAgICB0aGUge0BsaW5rIE1vZGFsRGlhbG9nfSB0aGF0IHdhcyBjcmVhdGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZU1vZGFsID0gZnVuY3Rpb24gY3JlYXRlTW9kYWwoY29udGVudCwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpczE2ID0gdGhpcztcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMuY29udGVudCA9IGNvbnRlbnQgfHwgJyc7XG4gICAgdmFyIG1vZGFsID0gbmV3IE1vZGFsRGlhbG9nKHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuYWRkQ2hpbGQobW9kYWwpO1xuICAgIG1vZGFsLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMxNi5yZW1vdmVDaGlsZChtb2RhbCk7XG4gICAgfSk7XG4gICAgbW9kYWwub3BlbigpO1xuICAgIHJldHVybiBtb2RhbDtcbiAgfVxuICAvKipcbiAgICogQ2hhbmdlIGJyZWFrcG9pbnQgY2xhc3NlcyB3aGVuIHRoZSBwbGF5ZXIgcmVzaXplcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlQ3VycmVudEJyZWFrcG9pbnRfID0gZnVuY3Rpb24gdXBkYXRlQ3VycmVudEJyZWFrcG9pbnRfKCkge1xuICAgIGlmICghdGhpcy5yZXNwb25zaXZlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudEJyZWFrcG9pbnQgPSB0aGlzLmN1cnJlbnRCcmVha3BvaW50KCk7XG4gICAgdmFyIGN1cnJlbnRXaWR0aCA9IHRoaXMuY3VycmVudFdpZHRoKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IEJSRUFLUE9JTlRfT1JERVIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjYW5kaWRhdGVCcmVha3BvaW50ID0gQlJFQUtQT0lOVF9PUkRFUltpXTtcbiAgICAgIHZhciBtYXhXaWR0aCA9IHRoaXMuYnJlYWtwb2ludHNfW2NhbmRpZGF0ZUJyZWFrcG9pbnRdO1xuXG4gICAgICBpZiAoY3VycmVudFdpZHRoIDw9IG1heFdpZHRoKSB7XG4gICAgICAgIC8vIFRoZSBjdXJyZW50IGJyZWFrcG9pbnQgZGlkIG5vdCBjaGFuZ2UsIG5vdGhpbmcgdG8gZG8uXG4gICAgICAgIGlmIChjdXJyZW50QnJlYWtwb2ludCA9PT0gY2FuZGlkYXRlQnJlYWtwb2ludCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBPbmx5IHJlbW92ZSBhIGNsYXNzIGlmIHRoZXJlIGlzIGEgY3VycmVudCBicmVha3BvaW50LlxuXG5cbiAgICAgICAgaWYgKGN1cnJlbnRCcmVha3BvaW50KSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVDbGFzcyhCUkVBS1BPSU5UX0NMQVNTRVNbY3VycmVudEJyZWFrcG9pbnRdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWRkQ2xhc3MoQlJFQUtQT0lOVF9DTEFTU0VTW2NhbmRpZGF0ZUJyZWFrcG9pbnRdKTtcbiAgICAgICAgdGhpcy5icmVha3BvaW50XyA9IGNhbmRpZGF0ZUJyZWFrcG9pbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgY3VycmVudCBicmVha3BvaW50LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVDdXJyZW50QnJlYWtwb2ludF8gPSBmdW5jdGlvbiByZW1vdmVDdXJyZW50QnJlYWtwb2ludF8oKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuY3VycmVudEJyZWFrcG9pbnRDbGFzcygpO1xuICAgIHRoaXMuYnJlYWtwb2ludF8gPSAnJztcblxuICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgYnJlYWtwb2ludHMgb24gdGhlIHBsYXllci5cbiAgICpcbiAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCB3aXRoIGFuIG9iamVjdCBvciBgdHJ1ZWAgd2lsbCByZW1vdmUgYW55IHByZXZpb3VzXG4gICAqIGN1c3RvbSBicmVha3BvaW50cyBhbmQgc3RhcnQgZnJvbSB0aGUgZGVmYXVsdHMgYWdhaW4uXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdHxib29sZWFufSBbYnJlYWtwb2ludHNdXG4gICAqICAgICAgICAgSWYgYW4gb2JqZWN0IGlzIGdpdmVuLCBpdCBjYW4gYmUgdXNlZCB0byBwcm92aWRlIGN1c3RvbVxuICAgKiAgICAgICAgIGJyZWFrcG9pbnRzLiBJZiBgdHJ1ZWAgaXMgZ2l2ZW4sIHdpbGwgc2V0IGRlZmF1bHQgYnJlYWtwb2ludHMuXG4gICAqICAgICAgICAgSWYgdGhpcyBhcmd1bWVudCBpcyBub3QgZ2l2ZW4sIHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudFxuICAgKiAgICAgICAgIGJyZWFrcG9pbnRzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IFticmVha3BvaW50cy50aW55XVxuICAgKiAgICAgICAgIFRoZSBtYXhpbXVtIHdpZHRoIGZvciB0aGUgXCJ2anMtbGF5b3V0LXRpbnlcIiBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSBbYnJlYWtwb2ludHMueHNtYWxsXVxuICAgKiAgICAgICAgIFRoZSBtYXhpbXVtIHdpZHRoIGZvciB0aGUgXCJ2anMtbGF5b3V0LXgtc21hbGxcIiBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSBbYnJlYWtwb2ludHMuc21hbGxdXG4gICAqICAgICAgICAgVGhlIG1heGltdW0gd2lkdGggZm9yIHRoZSBcInZqcy1sYXlvdXQtc21hbGxcIiBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSBbYnJlYWtwb2ludHMubWVkaXVtXVxuICAgKiAgICAgICAgIFRoZSBtYXhpbXVtIHdpZHRoIGZvciB0aGUgXCJ2anMtbGF5b3V0LW1lZGl1bVwiIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IFticmVha3BvaW50cy5sYXJnZV1cbiAgICogICAgICAgICBUaGUgbWF4aW11bSB3aWR0aCBmb3IgdGhlIFwidmpzLWxheW91dC1sYXJnZVwiIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IFticmVha3BvaW50cy54bGFyZ2VdXG4gICAqICAgICAgICAgVGhlIG1heGltdW0gd2lkdGggZm9yIHRoZSBcInZqcy1sYXlvdXQteC1sYXJnZVwiIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IFticmVha3BvaW50cy5odWdlXVxuICAgKiAgICAgICAgIFRoZSBtYXhpbXVtIHdpZHRoIGZvciB0aGUgXCJ2anMtbGF5b3V0LWh1Z2VcIiBjbGFzcy5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiAgICAgICAgIEFuIG9iamVjdCBtYXBwaW5nIGJyZWFrcG9pbnQgbmFtZXMgdG8gbWF4aW11bSB3aWR0aCB2YWx1ZXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJyZWFrcG9pbnRzID0gZnVuY3Rpb24gYnJlYWtwb2ludHMoX2JyZWFrcG9pbnRzKSB7XG4gICAgLy8gVXNlZCBhcyBhIGdldHRlci5cbiAgICBpZiAoX2JyZWFrcG9pbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBhc3NpZ24odGhpcy5icmVha3BvaW50c18pO1xuICAgIH1cblxuICAgIHRoaXMuYnJlYWtwb2ludF8gPSAnJztcbiAgICB0aGlzLmJyZWFrcG9pbnRzXyA9IGFzc2lnbih7fSwgREVGQVVMVF9CUkVBS1BPSU5UUywgX2JyZWFrcG9pbnRzKTsgLy8gV2hlbiBicmVha3BvaW50IGRlZmluaXRpb25zIGNoYW5nZSwgd2UgbmVlZCB0byB1cGRhdGUgdGhlIGN1cnJlbnRseVxuICAgIC8vIHNlbGVjdGVkIGJyZWFrcG9pbnQuXG5cbiAgICB0aGlzLnVwZGF0ZUN1cnJlbnRCcmVha3BvaW50XygpOyAvLyBDbG9uZSB0aGUgYnJlYWtwb2ludHMgYmVmb3JlIHJldHVybmluZy5cblxuICAgIHJldHVybiBhc3NpZ24odGhpcy5icmVha3BvaW50c18pO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IGEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90IHRoaXMgcGxheWVyIHNob3VsZCBhZGp1c3RcbiAgICogaXRzIFVJIGJhc2VkIG9uIGl0cyBkaW1lbnNpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gIHtib29sZWFufSB2YWx1ZVxuICAgKiAgICAgICAgIFNob3VsZCBiZSBgdHJ1ZWAgaWYgdGhlIHBsYXllciBzaG91bGQgYWRqdXN0IGl0cyBVSSBiYXNlZCBvbiBpdHNcbiAgICogICAgICAgICBkaW1lbnNpb25zOyBvdGhlcndpc2UsIHNob3VsZCBiZSBgZmFsc2VgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIFdpbGwgYmUgYHRydWVgIGlmIHRoaXMgcGxheWVyIHNob3VsZCBhZGp1c3QgaXRzIFVJIGJhc2VkIG9uIGl0c1xuICAgKiAgICAgICAgIGRpbWVuc2lvbnM7IG90aGVyd2lzZSwgd2lsbCBiZSBgZmFsc2VgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNwb25zaXZlID0gZnVuY3Rpb24gcmVzcG9uc2l2ZSh2YWx1ZSkge1xuICAgIC8vIFVzZWQgYXMgYSBnZXR0ZXIuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNpdmVfO1xuICAgIH1cblxuICAgIHZhbHVlID0gQm9vbGVhbih2YWx1ZSk7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLnJlc3BvbnNpdmVfOyAvLyBOb3RoaW5nIGNoYW5nZWQuXG5cbiAgICBpZiAodmFsdWUgPT09IGN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFRoZSB2YWx1ZSBhY3R1YWxseSBjaGFuZ2VkLCBzZXQgaXQuXG5cblxuICAgIHRoaXMucmVzcG9uc2l2ZV8gPSB2YWx1ZTsgLy8gU3RhcnQgbGlzdGVuaW5nIGZvciBicmVha3BvaW50cyBhbmQgc2V0IHRoZSBpbml0aWFsIGJyZWFrcG9pbnQgaWYgdGhlXG4gICAgLy8gcGxheWVyIGlzIG5vdyByZXNwb25zaXZlLlxuXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLm9uKCdwbGF5ZXJyZXNpemUnLCB0aGlzLnVwZGF0ZUN1cnJlbnRCcmVha3BvaW50Xyk7XG4gICAgICB0aGlzLnVwZGF0ZUN1cnJlbnRCcmVha3BvaW50XygpOyAvLyBTdG9wIGxpc3RlbmluZyBmb3IgYnJlYWtwb2ludHMgaWYgdGhlIHBsYXllciBpcyBubyBsb25nZXIgcmVzcG9uc2l2ZS5cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vZmYoJ3BsYXllcnJlc2l6ZScsIHRoaXMudXBkYXRlQ3VycmVudEJyZWFrcG9pbnRfKTtcbiAgICAgIHRoaXMucmVtb3ZlQ3VycmVudEJyZWFrcG9pbnRfKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBicmVha3BvaW50IG5hbWUsIGlmIGFueS5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIElmIHRoZXJlIGlzIGN1cnJlbnRseSBhIGJyZWFrcG9pbnQgc2V0LCByZXR1cm5zIGEgdGhlIGtleSBmcm9tIHRoZVxuICAgKiAgICAgICAgIGJyZWFrcG9pbnRzIG9iamVjdCBtYXRjaGluZyBpdC4gT3RoZXJ3aXNlLCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3VycmVudEJyZWFrcG9pbnQgPSBmdW5jdGlvbiBjdXJyZW50QnJlYWtwb2ludCgpIHtcbiAgICByZXR1cm4gdGhpcy5icmVha3BvaW50XztcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgY2xhc3MgbmFtZS5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiAgICAgICAgIFRoZSBtYXRjaGluZyBjbGFzcyBuYW1lIChlLmcuIGBcInZqcy1sYXlvdXQtdGlueVwiYCBvclxuICAgKiAgICAgICAgIGBcInZqcy1sYXlvdXQtbGFyZ2VcImApIGZvciB0aGUgY3VycmVudCBicmVha3BvaW50LiBFbXB0eSBzdHJpbmcgaWZcbiAgICogICAgICAgICB0aGVyZSBpcyBubyBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnRCcmVha3BvaW50Q2xhc3MgPSBmdW5jdGlvbiBjdXJyZW50QnJlYWtwb2ludENsYXNzKCkge1xuICAgIHJldHVybiBCUkVBS1BPSU5UX0NMQVNTRVNbdGhpcy5icmVha3BvaW50X10gfHwgJyc7XG4gIH1cbiAgLyoqXG4gICAqIEFuIG9iamVjdCB0aGF0IGRlc2NyaWJlcyBhIHNpbmdsZSBwaWVjZSBvZiBtZWRpYS5cbiAgICpcbiAgICogUHJvcGVydGllcyB0aGF0IGFyZSBub3QgcGFydCBvZiB0aGlzIHR5cGUgZGVzY3JpcHRpb24gd2lsbCBiZSByZXRhaW5lZDsgc28sXG4gICAqIHRoaXMgY2FuIGJlIHZpZXdlZCBhcyBhIGdlbmVyaWMgbWV0YWRhdGEgc3RvcmFnZSBtZWNoYW5pc20gYXMgd2VsbC5cbiAgICpcbiAgICogQHNlZSAgICAgIHtAbGluayBodHRwczovL3dpY2cuZ2l0aHViLmlvL21lZGlhc2Vzc2lvbi8jdGhlLW1lZGlhbWV0YWRhdGEtaW50ZXJmYWNlfVxuICAgKiBAdHlwZWRlZiAge09iamVjdH0gUGxheWVyfk1lZGlhT2JqZWN0XG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWxidW1dXG4gICAqICAgICAgICAgICBVbnVzZWQsIGV4Y2VwdCBpZiB0aGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gdGhlIGBNZWRpYVNlc3Npb25gXG4gICAqICAgICAgICAgICBBUEkuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYXJ0aXN0XVxuICAgKiAgICAgICAgICAgVW51c2VkLCBleGNlcHQgaWYgdGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIHRoZSBgTWVkaWFTZXNzaW9uYFxuICAgKiAgICAgICAgICAgQVBJLlxuICAgKlxuICAgKiBAcHJvcGVydHkge09iamVjdFtdfSBbYXJ0d29ya11cbiAgICogICAgICAgICAgIFVudXNlZCwgZXhjZXB0IGlmIHRoaXMgb2JqZWN0IGlzIHBhc3NlZCB0byB0aGUgYE1lZGlhU2Vzc2lvbmBcbiAgICogICAgICAgICAgIEFQSS4gSWYgbm90IHNwZWNpZmllZCwgd2lsbCBiZSBwb3B1bGF0ZWQgdmlhIHRoZSBgcG9zdGVyYCwgaWZcbiAgICogICAgICAgICAgIGF2YWlsYWJsZS5cbiAgICpcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtwb3N0ZXJdXG4gICAqICAgICAgICAgICBVUkwgdG8gYW4gaW1hZ2UgdGhhdCB3aWxsIGRpc3BsYXkgYmVmb3JlIHBsYXliYWNrLlxuICAgKlxuICAgKiBAcHJvcGVydHkge1RlY2h+U291cmNlT2JqZWN0fFRlY2h+U291cmNlT2JqZWN0W118c3RyaW5nfSBbc3JjXVxuICAgKiAgICAgICAgICAgQSBzaW5nbGUgc291cmNlIG9iamVjdCwgYW4gYXJyYXkgb2Ygc291cmNlIG9iamVjdHMsIG9yIGEgc3RyaW5nXG4gICAqICAgICAgICAgICByZWZlcmVuY2luZyBhIFVSTCB0byBhIG1lZGlhIHNvdXJjZS4gSXQgaXMgX2hpZ2hseSByZWNvbW1lbmRlZF9cbiAgICogICAgICAgICAgIHRoYXQgYW4gb2JqZWN0IG9yIGFycmF5IG9mIG9iamVjdHMgaXMgdXNlZCBoZXJlLCBzbyB0aGF0IHNvdXJjZVxuICAgKiAgICAgICAgICAgc2VsZWN0aW9uIGFsZ29yaXRobXMgY2FuIHRha2UgdGhlIGB0eXBlYCBpbnRvIGFjY291bnQuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGl0bGVdXG4gICAqICAgICAgICAgICBVbnVzZWQsIGV4Y2VwdCBpZiB0aGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gdGhlIGBNZWRpYVNlc3Npb25gXG4gICAqICAgICAgICAgICBBUEkuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0W119IFt0ZXh0VHJhY2tzXVxuICAgKiAgICAgICAgICAgQW4gYXJyYXkgb2Ygb2JqZWN0cyB0byBiZSB1c2VkIHRvIGNyZWF0ZSB0ZXh0IHRyYWNrcywgZm9sbG93aW5nXG4gICAqICAgICAgICAgICB0aGUge0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTAvZW1iZWRkZWQtY29udGVudC0wLmh0bWwjdGhlLXRyYWNrLWVsZW1lbnR8bmF0aXZlIHRyYWNrIGVsZW1lbnQgZm9ybWF0fS5cbiAgICogICAgICAgICAgIEZvciBlYXNlIG9mIHJlbW92YWwsIHRoZXNlIHdpbGwgYmUgY3JlYXRlZCBhcyBcInJlbW90ZVwiIHRleHRcbiAgICogICAgICAgICAgIHRyYWNrcyBhbmQgc2V0IHRvIGF1dG9tYXRpY2FsbHkgY2xlYW4gdXAgb24gc291cmNlIGNoYW5nZXMuXG4gICAqXG4gICAqICAgICAgICAgICBUaGVzZSBvYmplY3RzIG1heSBoYXZlIHByb3BlcnRpZXMgbGlrZSBgc3JjYCwgYGtpbmRgLCBgbGFiZWxgLFxuICAgKiAgICAgICAgICAgYW5kIGBsYW5ndWFnZWAsIHNlZSB7QGxpbmsgVGVjaCNjcmVhdGVSZW1vdGVUZXh0VHJhY2t9LlxuICAgKi9cblxuICAvKipcbiAgICogUG9wdWxhdGUgdGhlIHBsYXllciB1c2luZyBhIHtAbGluayBQbGF5ZXJ+TWVkaWFPYmplY3R8TWVkaWFPYmplY3R9LlxuICAgKlxuICAgKiBAcGFyYW0gIHtQbGF5ZXJ+TWVkaWFPYmplY3R9IG1lZGlhXG4gICAqICAgICAgICAgQSBtZWRpYSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSByZWFkeVxuICAgKiAgICAgICAgIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHBsYXllciBpcyByZWFkeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubG9hZE1lZGlhID0gZnVuY3Rpb24gbG9hZE1lZGlhKG1lZGlhLCByZWFkeSkge1xuICAgIHZhciBfdGhpczE3ID0gdGhpcztcblxuICAgIGlmICghbWVkaWEgfHwgdHlwZW9mIG1lZGlhICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXQoKTsgLy8gQ2xvbmUgdGhlIG1lZGlhIG9iamVjdCBzbyBpdCBjYW5ub3QgYmUgbXV0YXRlZCBmcm9tIG91dHNpZGUuXG5cbiAgICB0aGlzLmNhY2hlXy5tZWRpYSA9IG1lcmdlT3B0aW9ucyhtZWRpYSk7XG4gICAgdmFyIF90aGlzJGNhY2hlXyRtZWRpYSA9IHRoaXMuY2FjaGVfLm1lZGlhLFxuICAgICAgICBhcnR3b3JrID0gX3RoaXMkY2FjaGVfJG1lZGlhLmFydHdvcmssXG4gICAgICAgIHBvc3RlciA9IF90aGlzJGNhY2hlXyRtZWRpYS5wb3N0ZXIsXG4gICAgICAgIHNyYyA9IF90aGlzJGNhY2hlXyRtZWRpYS5zcmMsXG4gICAgICAgIHRleHRUcmFja3MgPSBfdGhpcyRjYWNoZV8kbWVkaWEudGV4dFRyYWNrczsgLy8gSWYgYGFydHdvcmtgIGlzIG5vdCBnaXZlbiwgY3JlYXRlIGl0IHVzaW5nIGBwb3N0ZXJgLlxuXG4gICAgaWYgKCFhcnR3b3JrICYmIHBvc3Rlcikge1xuICAgICAgdGhpcy5jYWNoZV8ubWVkaWEuYXJ0d29yayA9IFt7XG4gICAgICAgIHNyYzogcG9zdGVyLFxuICAgICAgICB0eXBlOiBnZXRNaW1ldHlwZShwb3N0ZXIpXG4gICAgICB9XTtcbiAgICB9XG5cbiAgICBpZiAoc3JjKSB7XG4gICAgICB0aGlzLnNyYyhzcmMpO1xuICAgIH1cblxuICAgIGlmIChwb3N0ZXIpIHtcbiAgICAgIHRoaXMucG9zdGVyKHBvc3Rlcik7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGV4dFRyYWNrcykpIHtcbiAgICAgIHRleHRUcmFja3MuZm9yRWFjaChmdW5jdGlvbiAodHQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMTcuYWRkUmVtb3RlVGV4dFRyYWNrKHR0LCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnJlYWR5KHJlYWR5KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgY2xvbmUgb2YgdGhlIGN1cnJlbnQge0BsaW5rIFBsYXllcn5NZWRpYU9iamVjdH0gZm9yIHRoaXMgcGxheWVyLlxuICAgKlxuICAgKiBJZiB0aGUgYGxvYWRNZWRpYWAgbWV0aG9kIGhhcyBub3QgYmVlbiB1c2VkLCB3aWxsIGF0dGVtcHQgdG8gcmV0dXJuIGFcbiAgICoge0BsaW5rIFBsYXllcn5NZWRpYU9iamVjdH0gYmFzZWQgb24gdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHBsYXllci5cbiAgICpcbiAgICogQHJldHVybiB7UGxheWVyfk1lZGlhT2JqZWN0fVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRNZWRpYSA9IGZ1bmN0aW9uIGdldE1lZGlhKCkge1xuICAgIGlmICghdGhpcy5jYWNoZV8ubWVkaWEpIHtcbiAgICAgIHZhciBwb3N0ZXIgPSB0aGlzLnBvc3RlcigpO1xuICAgICAgdmFyIHNyYyA9IHRoaXMuY3VycmVudFNvdXJjZXMoKTtcbiAgICAgIHZhciB0ZXh0VHJhY2tzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKHRoaXMucmVtb3RlVGV4dFRyYWNrcygpLCBmdW5jdGlvbiAodHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBraW5kOiB0dC5raW5kLFxuICAgICAgICAgIGxhYmVsOiB0dC5sYWJlbCxcbiAgICAgICAgICBsYW5ndWFnZTogdHQubGFuZ3VhZ2UsXG4gICAgICAgICAgc3JjOiB0dC5zcmNcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdmFyIG1lZGlhID0ge1xuICAgICAgICBzcmM6IHNyYyxcbiAgICAgICAgdGV4dFRyYWNrczogdGV4dFRyYWNrc1xuICAgICAgfTtcblxuICAgICAgaWYgKHBvc3Rlcikge1xuICAgICAgICBtZWRpYS5wb3N0ZXIgPSBwb3N0ZXI7XG4gICAgICAgIG1lZGlhLmFydHdvcmsgPSBbe1xuICAgICAgICAgIHNyYzogbWVkaWEucG9zdGVyLFxuICAgICAgICAgIHR5cGU6IGdldE1pbWV0eXBlKG1lZGlhLnBvc3RlcilcbiAgICAgICAgfV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZWRpYTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VPcHRpb25zKHRoaXMuY2FjaGVfLm1lZGlhKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0YWcgc2V0dGluZ3NcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSB0YWdcbiAgICogICAgICAgIFRoZSBwbGF5ZXIgdGFnXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogICAgICAgICBBbiBvYmplY3QgY29udGFpbmluZyBhbGwgb2YgdGhlIHNldHRpbmdzXG4gICAqICAgICAgICAgZm9yIGEgcGxheWVyIHRhZ1xuICAgKi9cbiAgO1xuXG4gIFBsYXllci5nZXRUYWdTZXR0aW5ncyA9IGZ1bmN0aW9uIGdldFRhZ1NldHRpbmdzKHRhZykge1xuICAgIHZhciBiYXNlT3B0aW9ucyA9IHtcbiAgICAgIHNvdXJjZXM6IFtdLFxuICAgICAgdHJhY2tzOiBbXVxuICAgIH07XG4gICAgdmFyIHRhZ09wdGlvbnMgPSBnZXRBdHRyaWJ1dGVzKHRhZyk7XG4gICAgdmFyIGRhdGFTZXR1cCA9IHRhZ09wdGlvbnNbJ2RhdGEtc2V0dXAnXTtcblxuICAgIGlmIChoYXNDbGFzcyh0YWcsICd2anMtZmlsbCcpKSB7XG4gICAgICB0YWdPcHRpb25zLmZpbGwgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChoYXNDbGFzcyh0YWcsICd2anMtZmx1aWQnKSkge1xuICAgICAgdGFnT3B0aW9ucy5mbHVpZCA9IHRydWU7XG4gICAgfSAvLyBDaGVjayBpZiBkYXRhLXNldHVwIGF0dHIgZXhpc3RzLlxuXG5cbiAgICBpZiAoZGF0YVNldHVwICE9PSBudWxsKSB7XG4gICAgICAvLyBQYXJzZSBvcHRpb25zIEpTT05cbiAgICAgIC8vIElmIGVtcHR5IHN0cmluZywgbWFrZSBpdCBhIHBhcnNhYmxlIGpzb24gb2JqZWN0LlxuICAgICAgdmFyIF9zYWZlUGFyc2VUdXBsZSA9IHNhZmVQYXJzZVR1cGxlKGRhdGFTZXR1cCB8fCAne30nKSxcbiAgICAgICAgICBlcnIgPSBfc2FmZVBhcnNlVHVwbGVbMF0sXG4gICAgICAgICAgZGF0YSA9IF9zYWZlUGFyc2VUdXBsZVsxXTtcblxuICAgICAgaWYgKGVycikge1xuICAgICAgICBsb2cuZXJyb3IoZXJyKTtcbiAgICAgIH1cblxuICAgICAgYXNzaWduKHRhZ09wdGlvbnMsIGRhdGEpO1xuICAgIH1cblxuICAgIGFzc2lnbihiYXNlT3B0aW9ucywgdGFnT3B0aW9ucyk7IC8vIEdldCB0YWcgY2hpbGRyZW4gc2V0dGluZ3NcblxuICAgIGlmICh0YWcuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0YWcuY2hpbGROb2RlcztcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07IC8vIENoYW5nZSBjYXNlIG5lZWRlZDogaHR0cDovL2Vqb2huLm9yZy9ibG9nL25vZGVuYW1lLWNhc2Utc2Vuc2l0aXZpdHkvXG5cbiAgICAgICAgdmFyIGNoaWxkTmFtZSA9IGNoaWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKGNoaWxkTmFtZSA9PT0gJ3NvdXJjZScpIHtcbiAgICAgICAgICBiYXNlT3B0aW9ucy5zb3VyY2VzLnB1c2goZ2V0QXR0cmlidXRlcyhjaGlsZCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkTmFtZSA9PT0gJ3RyYWNrJykge1xuICAgICAgICAgIGJhc2VPcHRpb25zLnRyYWNrcy5wdXNoKGdldEF0dHJpYnV0ZXMoY2hpbGQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBiYXNlT3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IGZsZXhib3ggaXMgc3VwcG9ydGVkXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgLSB0cnVlIGlmIGZsZXhib3ggaXMgc3VwcG9ydGVkXG4gICAqICAgICAgICAgLSBmYWxzZSBpZiBmbGV4Ym94IGlzIG5vdCBzdXBwb3J0ZWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZmxleE5vdFN1cHBvcnRlZF8gPSBmdW5jdGlvbiBmbGV4Tm90U3VwcG9ydGVkXygpIHtcbiAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTsgLy8gTm90ZTogV2UgZG9uJ3QgYWN0dWFsbHkgdXNlIGZsZXhCYXNpcyAob3IgZmxleE9yZGVyKSwgYnV0IGl0J3Mgb25lIG9mIHRoZSBtb3JlXG4gICAgLy8gY29tbW9uIGZsZXggZmVhdHVyZXMgdGhhdCB3ZSBjYW4gcmVseSBvbiB3aGVuIGNoZWNraW5nIGZvciBmbGV4IHN1cHBvcnQuXG5cbiAgICByZXR1cm4gISgnZmxleEJhc2lzJyBpbiBlbGVtLnN0eWxlIHx8ICd3ZWJraXRGbGV4QmFzaXMnIGluIGVsZW0uc3R5bGUgfHwgJ21vekZsZXhCYXNpcycgaW4gZWxlbS5zdHlsZSB8fCAnbXNGbGV4QmFzaXMnIGluIGVsZW0uc3R5bGUgfHwgLy8gSUUxMC1zcGVjaWZpYyAoMjAxMiBmbGV4IHNwZWMpLCBhdmFpbGFibGUgZm9yIGNvbXBsZXRlbmVzc1xuICAgICdtc0ZsZXhPcmRlcicgaW4gZWxlbS5zdHlsZSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBkZWJ1ZyBtb2RlIHRvIGVuYWJsZS9kaXNhYmxlIGxvZ3MgYXQgaW5mbyBsZXZlbC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkXG4gICAqIEBmaXJlcyBQbGF5ZXIjZGVidWdvblxuICAgKiBAZmlyZXMgUGxheWVyI2RlYnVnb2ZmXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlYnVnID0gZnVuY3Rpb24gZGVidWcoZW5hYmxlZCkge1xuICAgIGlmIChlbmFibGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlYnVnRW5hYmxlZF87XG4gICAgfVxuXG4gICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZGVidWdvbicpO1xuICAgICAgdGhpcy5wcmV2aW91c0xvZ0xldmVsXyA9IHRoaXMubG9nLmxldmVsO1xuICAgICAgdGhpcy5sb2cubGV2ZWwoJ2RlYnVnJyk7XG4gICAgICB0aGlzLmRlYnVnRW5hYmxlZF8gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2RlYnVnb2ZmJyk7XG4gICAgICB0aGlzLmxvZy5sZXZlbCh0aGlzLnByZXZpb3VzTG9nTGV2ZWxfKTtcbiAgICAgIHRoaXMucHJldmlvdXNMb2dMZXZlbF8gPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRlYnVnRW5hYmxlZF8gPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFBsYXllcjtcbn0oQ29tcG9uZW50KTtcbi8qKlxuICogR2V0IHRoZSB7QGxpbmsgVmlkZW9UcmFja0xpc3R9XG4gKiBAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjdmlkZW90cmFja2xpc3RcbiAqXG4gKiBAcmV0dXJuIHtWaWRlb1RyYWNrTGlzdH1cbiAqICAgICAgICAgdGhlIGN1cnJlbnQgdmlkZW8gdHJhY2sgbGlzdFxuICpcbiAqIEBtZXRob2QgUGxheWVyLnByb3RvdHlwZS52aWRlb1RyYWNrc1xuICovXG5cbi8qKlxuICogR2V0IHRoZSB7QGxpbmsgQXVkaW9UcmFja0xpc3R9XG4gKiBAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjYXVkaW90cmFja2xpc3RcbiAqXG4gKiBAcmV0dXJuIHtBdWRpb1RyYWNrTGlzdH1cbiAqICAgICAgICAgdGhlIGN1cnJlbnQgYXVkaW8gdHJhY2sgbGlzdFxuICpcbiAqIEBtZXRob2QgUGxheWVyLnByb3RvdHlwZS5hdWRpb1RyYWNrc1xuICovXG5cbi8qKlxuICogR2V0IHRoZSB7QGxpbmsgVGV4dFRyYWNrTGlzdH1cbiAqXG4gKiBAbGluayBodHRwOi8vd3d3LnczLm9yZy9odG1sL3dnL2RyYWZ0cy9odG1sL21hc3Rlci9lbWJlZGRlZC1jb250ZW50LTAuaHRtbCNkb20tbWVkaWEtdGV4dHRyYWNrc1xuICpcbiAqIEByZXR1cm4ge1RleHRUcmFja0xpc3R9XG4gKiAgICAgICAgIHRoZSBjdXJyZW50IHRleHQgdHJhY2sgbGlzdFxuICpcbiAqIEBtZXRob2QgUGxheWVyLnByb3RvdHlwZS50ZXh0VHJhY2tzXG4gKi9cblxuLyoqXG4gKiBHZXQgdGhlIHJlbW90ZSB7QGxpbmsgVGV4dFRyYWNrTGlzdH1cbiAqXG4gKiBAcmV0dXJuIHtUZXh0VHJhY2tMaXN0fVxuICogICAgICAgICBUaGUgY3VycmVudCByZW1vdGUgdGV4dCB0cmFjayBsaXN0XG4gKlxuICogQG1ldGhvZCBQbGF5ZXIucHJvdG90eXBlLnJlbW90ZVRleHRUcmFja3NcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgcmVtb3RlIHtAbGluayBIdG1sVHJhY2tFbGVtZW50TGlzdH0gdHJhY2tzLlxuICpcbiAqIEByZXR1cm4ge0h0bWxUcmFja0VsZW1lbnRMaXN0fVxuICogICAgICAgICBUaGUgY3VycmVudCByZW1vdGUgdGV4dCB0cmFjayBlbGVtZW50IGxpc3RcbiAqXG4gKiBAbWV0aG9kIFBsYXllci5wcm90b3R5cGUucmVtb3RlVGV4dFRyYWNrRWxzXG4gKi9cblxuXG5BTEwubmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcHJvcHMgPSBBTExbbmFtZV07XG5cbiAgUGxheWVyLnByb3RvdHlwZVtwcm9wcy5nZXR0ZXJOYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50ZWNoXykge1xuICAgICAgcmV0dXJuIHRoaXMudGVjaF9bcHJvcHMuZ2V0dGVyTmFtZV0oKTtcbiAgICB9IC8vIGlmIHdlIGhhdmUgbm90IHlldCBsb2FkVGVjaF8sIHdlIGNyZWF0ZSB7dmlkZW8sYXVkaW8sdGV4dH1UcmFja3NfXG4gICAgLy8gdGhlc2Ugd2lsbCBiZSBwYXNzZWQgdG8gdGhlIHRlY2ggZHVyaW5nIGxvYWRpbmdcblxuXG4gICAgdGhpc1twcm9wcy5wcml2YXRlTmFtZV0gPSB0aGlzW3Byb3BzLnByaXZhdGVOYW1lXSB8fCBuZXcgcHJvcHMuTGlzdENsYXNzKCk7XG4gICAgcmV0dXJuIHRoaXNbcHJvcHMucHJpdmF0ZU5hbWVdO1xuICB9O1xufSk7XG4vKipcbiAqIEdldCBvciBzZXQgdGhlIGBQbGF5ZXJgJ3MgY3Jvc3NvcmlnaW4gb3B0aW9uLiBGb3IgdGhlIEhUTUw1IHBsYXllciwgdGhpc1xuICogc2V0cyB0aGUgYGNyb3NzT3JpZ2luYCBwcm9wZXJ0eSBvbiB0aGUgYDx2aWRlbz5gIHRhZyB0byBjb250cm9sIHRoZSBDT1JTXG4gKiBiZWhhdmlvci5cbiAqXG4gKiBAc2VlIFtWaWRlbyBFbGVtZW50IEF0dHJpYnV0ZXNde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC92aWRlbyNhdHRyLWNyb3Nzb3JpZ2lufVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdmFsdWVdXG4gKiAgICAgICAgVGhlIHZhbHVlIHRvIHNldCB0aGUgYFBsYXllcmAncyBjcm9zc29yaWdpbiB0by4gSWYgYW4gYXJndW1lbnQgaXNcbiAqICAgICAgICBnaXZlbiwgbXVzdCBiZSBvbmUgb2YgYGFub255bW91c2Agb3IgYHVzZS1jcmVkZW50aWFsc2AuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfHVuZGVmaW5lZH1cbiAqICAgICAgICAgLSBUaGUgY3VycmVudCBjcm9zc29yaWdpbiB2YWx1ZSBvZiB0aGUgYFBsYXllcmAgd2hlbiBnZXR0aW5nLlxuICogICAgICAgICAtIHVuZGVmaW5lZCB3aGVuIHNldHRpbmdcbiAqL1xuXG5QbGF5ZXIucHJvdG90eXBlLmNyb3Nzb3JpZ2luID0gUGxheWVyLnByb3RvdHlwZS5jcm9zc09yaWdpbjtcbi8qKlxuICogR2xvYmFsIGVudW1lcmF0aW9uIG9mIHBsYXllcnMuXG4gKlxuICogVGhlIGtleXMgYXJlIHRoZSBwbGF5ZXIgSURzIGFuZCB0aGUgdmFsdWVzIGFyZSBlaXRoZXIgdGhlIHtAbGluayBQbGF5ZXJ9XG4gKiBpbnN0YW5jZSBvciBgbnVsbGAgZm9yIGRpc3Bvc2VkIHBsYXllcnMuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuXG5QbGF5ZXIucGxheWVycyA9IHt9O1xudmFyIG5hdmlnYXRvciA9IHdpbmRvdyQxLm5hdmlnYXRvcjtcbi8qXG4gKiBQbGF5ZXIgaW5zdGFuY2Ugb3B0aW9ucywgc3VyZmFjZWQgdXNpbmcgb3B0aW9uc1xuICogb3B0aW9ucyA9IFBsYXllci5wcm90b3R5cGUub3B0aW9uc19cbiAqIE1ha2UgY2hhbmdlcyBpbiBvcHRpb25zLCBub3QgaGVyZS5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuXG5QbGF5ZXIucHJvdG90eXBlLm9wdGlvbnNfID0ge1xuICAvLyBEZWZhdWx0IG9yZGVyIG9mIGZhbGxiYWNrIHRlY2hub2xvZ3lcbiAgdGVjaE9yZGVyOiBUZWNoLmRlZmF1bHRUZWNoT3JkZXJfLFxuICBodG1sNToge30sXG4gIGZsYXNoOiB7fSxcbiAgLy8gZGVmYXVsdCBpbmFjdGl2aXR5IHRpbWVvdXRcbiAgaW5hY3Rpdml0eVRpbWVvdXQ6IDIwMDAsXG4gIC8vIGRlZmF1bHQgcGxheWJhY2sgcmF0ZXNcbiAgcGxheWJhY2tSYXRlczogW10sXG4gIC8vIEFkZCBwbGF5YmFjayByYXRlIHNlbGVjdGlvbiBieSBhZGRpbmcgcmF0ZXNcbiAgLy8gJ3BsYXliYWNrUmF0ZXMnOiBbMC41LCAxLCAxLjUsIDJdLFxuICBsaXZldWk6IGZhbHNlLFxuICAvLyBJbmNsdWRlZCBjb250cm9sIHNldHNcbiAgY2hpbGRyZW46IFsnbWVkaWFMb2FkZXInLCAncG9zdGVySW1hZ2UnLCAndGV4dFRyYWNrRGlzcGxheScsICdsb2FkaW5nU3Bpbm5lcicsICdiaWdQbGF5QnV0dG9uJywgJ2xpdmVUcmFja2VyJywgJ2NvbnRyb2xCYXInLCAnZXJyb3JEaXNwbGF5JywgJ3RleHRUcmFja1NldHRpbmdzJywgJ3Jlc2l6ZU1hbmFnZXInXSxcbiAgbGFuZ3VhZ2U6IG5hdmlnYXRvciAmJiAobmF2aWdhdG9yLmxhbmd1YWdlcyAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdIHx8IG5hdmlnYXRvci51c2VyTGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLmxhbmd1YWdlKSB8fCAnZW4nLFxuICAvLyBsb2NhbGVzIGFuZCB0aGVpciBsYW5ndWFnZSB0cmFuc2xhdGlvbnNcbiAgbGFuZ3VhZ2VzOiB7fSxcbiAgLy8gRGVmYXVsdCBtZXNzYWdlIHRvIHNob3cgd2hlbiBhIHZpZGVvIGNhbm5vdCBiZSBwbGF5ZWQuXG4gIG5vdFN1cHBvcnRlZE1lc3NhZ2U6ICdObyBjb21wYXRpYmxlIHNvdXJjZSB3YXMgZm91bmQgZm9yIHRoaXMgbWVkaWEuJyxcbiAgZnVsbHNjcmVlbjoge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIG5hdmlnYXRpb25VSTogJ2hpZGUnXG4gICAgfVxuICB9LFxuICBicmVha3BvaW50czoge30sXG4gIHJlc3BvbnNpdmU6IGZhbHNlXG59O1xuW1xuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBwbGF5ZXIgaXMgaW4gdGhlIFwiZW5kZWRcIiBzdGF0ZS5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHRoZSBwbGF5ZXIgaXMgaW4gdGhlIGVuZGVkIHN0YXRlLCBmYWxzZSBpZiBub3QuXG4gKiBAbWV0aG9kIFBsYXllciNlbmRlZFxuICovXG4nZW5kZWQnLFxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBwbGF5ZXIgaXMgaW4gdGhlIFwic2Vla2luZ1wiIHN0YXRlLlxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIHBsYXllciBpcyBpbiB0aGUgc2Vla2luZyBzdGF0ZSwgZmFsc2UgaWYgbm90LlxuICogQG1ldGhvZCBQbGF5ZXIjc2Vla2luZ1xuICovXG4nc2Vla2luZycsXG4vKipcbiAqIFJldHVybnMgdGhlIFRpbWVSYW5nZXMgb2YgdGhlIG1lZGlhIHRoYXQgYXJlIGN1cnJlbnRseSBhdmFpbGFibGVcbiAqIGZvciBzZWVraW5nIHRvLlxuICpcbiAqIEByZXR1cm4ge1RpbWVSYW5nZXN9IHRoZSBzZWVrYWJsZSBpbnRlcnZhbHMgb2YgdGhlIG1lZGlhIHRpbWVsaW5lXG4gKiBAbWV0aG9kIFBsYXllciNzZWVrYWJsZVxuICovXG4nc2Vla2FibGUnLFxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IHN0YXRlIG9mIG5ldHdvcmsgYWN0aXZpdHkgZm9yIHRoZSBlbGVtZW50LCBmcm9tXG4gKiB0aGUgY29kZXMgaW4gdGhlIGxpc3QgYmVsb3cuXG4gKiAtIE5FVFdPUktfRU1QVFkgKG51bWVyaWMgdmFsdWUgMClcbiAqICAgVGhlIGVsZW1lbnQgaGFzIG5vdCB5ZXQgYmVlbiBpbml0aWFsaXNlZC4gQWxsIGF0dHJpYnV0ZXMgYXJlIGluXG4gKiAgIHRoZWlyIGluaXRpYWwgc3RhdGVzLlxuICogLSBORVRXT1JLX0lETEUgKG51bWVyaWMgdmFsdWUgMSlcbiAqICAgVGhlIGVsZW1lbnQncyByZXNvdXJjZSBzZWxlY3Rpb24gYWxnb3JpdGhtIGlzIGFjdGl2ZSBhbmQgaGFzXG4gKiAgIHNlbGVjdGVkIGEgcmVzb3VyY2UsIGJ1dCBpdCBpcyBub3QgYWN0dWFsbHkgdXNpbmcgdGhlIG5ldHdvcmsgYXRcbiAqICAgdGhpcyB0aW1lLlxuICogLSBORVRXT1JLX0xPQURJTkcgKG51bWVyaWMgdmFsdWUgMilcbiAqICAgVGhlIHVzZXIgYWdlbnQgaXMgYWN0aXZlbHkgdHJ5aW5nIHRvIGRvd25sb2FkIGRhdGEuXG4gKiAtIE5FVFdPUktfTk9fU09VUkNFIChudW1lcmljIHZhbHVlIDMpXG4gKiAgIFRoZSBlbGVtZW50J3MgcmVzb3VyY2Ugc2VsZWN0aW9uIGFsZ29yaXRobSBpcyBhY3RpdmUsIGJ1dCBpdCBoYXNcbiAqICAgbm90IHlldCBmb3VuZCBhIHJlc291cmNlIHRvIHVzZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNuZXR3b3JrLXN0YXRlc1xuICogQHJldHVybiB7bnVtYmVyfSB0aGUgY3VycmVudCBuZXR3b3JrIGFjdGl2aXR5IHN0YXRlXG4gKiBAbWV0aG9kIFBsYXllciNuZXR3b3JrU3RhdGVcbiAqL1xuJ25ldHdvcmtTdGF0ZScsXG4vKipcbiAqIFJldHVybnMgYSB2YWx1ZSB0aGF0IGV4cHJlc3NlcyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZWxlbWVudFxuICogd2l0aCByZXNwZWN0IHRvIHJlbmRlcmluZyB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiwgZnJvbSB0aGVcbiAqIGNvZGVzIGluIHRoZSBsaXN0IGJlbG93LlxuICogLSBIQVZFX05PVEhJTkcgKG51bWVyaWMgdmFsdWUgMClcbiAqICAgTm8gaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRoZSBtZWRpYSByZXNvdXJjZSBpcyBhdmFpbGFibGUuXG4gKiAtIEhBVkVfTUVUQURBVEEgKG51bWVyaWMgdmFsdWUgMSlcbiAqICAgRW5vdWdoIG9mIHRoZSByZXNvdXJjZSBoYXMgYmVlbiBvYnRhaW5lZCB0aGF0IHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAqICAgcmVzb3VyY2UgaXMgYXZhaWxhYmxlLlxuICogLSBIQVZFX0NVUlJFTlRfREFUQSAobnVtZXJpYyB2YWx1ZSAyKVxuICogICBEYXRhIGZvciB0aGUgaW1tZWRpYXRlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24gaXMgYXZhaWxhYmxlLlxuICogLSBIQVZFX0ZVVFVSRV9EQVRBIChudW1lcmljIHZhbHVlIDMpXG4gKiAgIERhdGEgZm9yIHRoZSBpbW1lZGlhdGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiBpcyBhdmFpbGFibGUsIGFzXG4gKiAgIHdlbGwgYXMgZW5vdWdoIGRhdGEgZm9yIHRoZSB1c2VyIGFnZW50IHRvIGFkdmFuY2UgdGhlIGN1cnJlbnRcbiAqICAgcGxheWJhY2sgcG9zaXRpb24gaW4gdGhlIGRpcmVjdGlvbiBvZiBwbGF5YmFjay5cbiAqIC0gSEFWRV9FTk9VR0hfREFUQSAobnVtZXJpYyB2YWx1ZSA0KVxuICogICBUaGUgdXNlciBhZ2VudCBlc3RpbWF0ZXMgdGhhdCBlbm91Z2ggZGF0YSBpcyBhdmFpbGFibGUgZm9yXG4gKiAgIHBsYXliYWNrIHRvIHByb2NlZWQgdW5pbnRlcnJ1cHRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNkb20tbWVkaWEtcmVhZHlzdGF0ZVxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgY3VycmVudCBwbGF5YmFjayByZW5kZXJpbmcgc3RhdGVcbiAqIEBtZXRob2QgUGxheWVyI3JlYWR5U3RhdGVcbiAqL1xuJ3JlYWR5U3RhdGUnXS5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICBQbGF5ZXIucHJvdG90eXBlW2ZuXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0Xyhmbik7XG4gIH07XG59KTtcblRFQ0hfRVZFTlRTX1JFVFJJR0dFUi5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICBQbGF5ZXIucHJvdG90eXBlW1wiaGFuZGxlVGVjaFwiICsgdG9UaXRsZUNhc2UoZXZlbnQpICsgXCJfXCJdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoZXZlbnQpO1xuICB9O1xufSk7XG4vKipcbiAqIEZpcmVkIHdoZW4gdGhlIHBsYXllciBoYXMgaW5pdGlhbCBkdXJhdGlvbiBhbmQgZGltZW5zaW9uIGluZm9ybWF0aW9uXG4gKlxuICogQGV2ZW50IFBsYXllciNsb2FkZWRtZXRhZGF0YVxuICogQHR5cGUge0V2ZW50VGFyZ2V0fkV2ZW50fVxuICovXG5cbi8qKlxuICogRmlyZWQgd2hlbiB0aGUgcGxheWVyIGhhcyBkb3dubG9hZGVkIGRhdGEgYXQgdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb25cbiAqXG4gKiBAZXZlbnQgUGxheWVyI2xvYWRlZGRhdGFcbiAqIEB0eXBlIHtFdmVudFRhcmdldH5FdmVudH1cbiAqL1xuXG4vKipcbiAqIEZpcmVkIHdoZW4gdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb24gaGFzIGNoYW5nZWQgKlxuICogRHVyaW5nIHBsYXliYWNrIHRoaXMgaXMgZmlyZWQgZXZlcnkgMTUtMjUwIG1pbGxpc2Vjb25kcywgZGVwZW5kaW5nIG9uIHRoZVxuICogcGxheWJhY2sgdGVjaG5vbG9neSBpbiB1c2UuXG4gKlxuICogQGV2ZW50IFBsYXllciN0aW1ldXBkYXRlXG4gKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gKi9cblxuLyoqXG4gKiBGaXJlZCB3aGVuIHRoZSB2b2x1bWUgY2hhbmdlc1xuICpcbiAqIEBldmVudCBQbGF5ZXIjdm9sdW1lY2hhbmdlXG4gKiBAdHlwZSB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gKi9cblxuLyoqXG4gKiBSZXBvcnRzIHdoZXRoZXIgb3Igbm90IGEgcGxheWVyIGhhcyBhIHBsdWdpbiBhdmFpbGFibGUuXG4gKlxuICogVGhpcyBkb2VzIG5vdCByZXBvcnQgd2hldGhlciBvciBub3QgdGhlIHBsdWdpbiBoYXMgZXZlciBiZWVuIGluaXRpYWxpemVkXG4gKiBvbiB0aGlzIHBsYXllci4gRm9yIHRoYXQsIFt1c2luZ1BsdWdpbl17QGxpbmsgUGxheWVyI3VzaW5nUGx1Z2lufS5cbiAqXG4gKiBAbWV0aG9kIFBsYXllciNoYXNQbHVnaW5cbiAqIEBwYXJhbSAge3N0cmluZ30gIG5hbWVcbiAqICAgICAgICAgVGhlIG5hbWUgb2YgYSBwbHVnaW4uXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2hldGhlciBvciBub3QgdGhpcyBwbGF5ZXIgaGFzIHRoZSByZXF1ZXN0ZWQgcGx1Z2luIGF2YWlsYWJsZS5cbiAqL1xuXG4vKipcbiAqIFJlcG9ydHMgd2hldGhlciBvciBub3QgYSBwbGF5ZXIgaXMgdXNpbmcgYSBwbHVnaW4gYnkgbmFtZS5cbiAqXG4gKiBGb3IgYmFzaWMgcGx1Z2lucywgdGhpcyBvbmx5IHJlcG9ydHMgd2hldGhlciB0aGUgcGx1Z2luIGhhcyBfZXZlcl8gYmVlblxuICogaW5pdGlhbGl6ZWQgb24gdGhpcyBwbGF5ZXIuXG4gKlxuICogQG1ldGhvZCBQbGF5ZXIjdXNpbmdQbHVnaW5cbiAqIEBwYXJhbSAge3N0cmluZ30gbmFtZVxuICogICAgICAgICBUaGUgbmFtZSBvZiBhIHBsdWdpbi5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGlzIHBsYXllciBpcyB1c2luZyB0aGUgcmVxdWVzdGVkIHBsdWdpbi5cbiAqL1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1BsYXllcicsIFBsYXllcik7XG5cbi8qKlxuICogVGhlIGJhc2UgcGx1Z2luIG5hbWUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuXG52YXIgQkFTRV9QTFVHSU5fTkFNRSA9ICdwbHVnaW4nO1xuLyoqXG4gKiBUaGUga2V5IG9uIHdoaWNoIGEgcGxheWVyJ3MgYWN0aXZlIHBsdWdpbnMgY2FjaGUgaXMgc3RvcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlICAgICB7c3RyaW5nfVxuICovXG5cbnZhciBQTFVHSU5fQ0FDSEVfS0VZID0gJ2FjdGl2ZVBsdWdpbnNfJztcbi8qKlxuICogU3RvcmVzIHJlZ2lzdGVyZWQgcGx1Z2lucyBpbiBhIHByaXZhdGUgc3BhY2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlICAgIHtPYmplY3R9XG4gKi9cblxudmFyIHBsdWdpblN0b3JhZ2UgPSB7fTtcbi8qKlxuICogUmVwb3J0cyB3aGV0aGVyIG9yIG5vdCBhIHBsdWdpbiBoYXMgYmVlbiByZWdpc3RlcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgICBUaGUgbmFtZSBvZiBhIHBsdWdpbi5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogICAgICAgICAgV2hldGhlciBvciBub3QgdGhlIHBsdWdpbiBoYXMgYmVlbiByZWdpc3RlcmVkLlxuICovXG5cbnZhciBwbHVnaW5FeGlzdHMgPSBmdW5jdGlvbiBwbHVnaW5FeGlzdHMobmFtZSkge1xuICByZXR1cm4gcGx1Z2luU3RvcmFnZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbn07XG4vKipcbiAqIEdldCBhIHNpbmdsZSByZWdpc3RlcmVkIHBsdWdpbiBieSBuYW1lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgICBUaGUgbmFtZSBvZiBhIHBsdWdpbi5cbiAqXG4gKiBAcmV0dXJuIHtGdW5jdGlvbnx1bmRlZmluZWR9XG4gKiAgICAgICAgICBUaGUgcGx1Z2luIChvciB1bmRlZmluZWQpLlxuICovXG5cblxudmFyIGdldFBsdWdpbiA9IGZ1bmN0aW9uIGdldFBsdWdpbihuYW1lKSB7XG4gIHJldHVybiBwbHVnaW5FeGlzdHMobmFtZSkgPyBwbHVnaW5TdG9yYWdlW25hbWVdIDogdW5kZWZpbmVkO1xufTtcbi8qKlxuICogTWFya3MgYSBwbHVnaW4gYXMgXCJhY3RpdmVcIiBvbiBhIHBsYXllci5cbiAqXG4gKiBBbHNvLCBlbnN1cmVzIHRoYXQgdGhlIHBsYXllciBoYXMgYW4gb2JqZWN0IGZvciB0cmFja2luZyBhY3RpdmUgcGx1Z2lucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge1BsYXllcn0gcGxheWVyXG4gKiAgICAgICAgICBBIFZpZGVvLmpzIHBsYXllciBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgICBUaGUgbmFtZSBvZiBhIHBsdWdpbi5cbiAqL1xuXG5cbnZhciBtYXJrUGx1Z2luQXNBY3RpdmUgPSBmdW5jdGlvbiBtYXJrUGx1Z2luQXNBY3RpdmUocGxheWVyLCBuYW1lKSB7XG4gIHBsYXllcltQTFVHSU5fQ0FDSEVfS0VZXSA9IHBsYXllcltQTFVHSU5fQ0FDSEVfS0VZXSB8fCB7fTtcbiAgcGxheWVyW1BMVUdJTl9DQUNIRV9LRVldW25hbWVdID0gdHJ1ZTtcbn07XG4vKipcbiAqIFRyaWdnZXJzIGEgcGFpciBvZiBwbHVnaW4gc2V0dXAgZXZlbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtQbGF5ZXJ9IHBsYXllclxuICogICAgICAgICBBIFZpZGVvLmpzIHBsYXllciBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gIHtQbHVnaW5+UGx1Z2luRXZlbnRIYXNofSBoYXNoXG4gKiAgICAgICAgIEEgcGx1Z2luIGV2ZW50IGhhc2guXG4gKlxuICogQHBhcmFtICB7Ym9vbGVhbn0gW2JlZm9yZV1cbiAqICAgICAgICAgSWYgdHJ1ZSwgcHJlZml4ZXMgdGhlIGV2ZW50IG5hbWUgd2l0aCBcImJlZm9yZVwiLiBJbiBvdGhlciB3b3JkcyxcbiAqICAgICAgICAgdXNlIHRoaXMgdG8gdHJpZ2dlciBcImJlZm9yZXBsdWdpbnNldHVwXCIgaW5zdGVhZCBvZiBcInBsdWdpbnNldHVwXCIuXG4gKi9cblxuXG52YXIgdHJpZ2dlclNldHVwRXZlbnQgPSBmdW5jdGlvbiB0cmlnZ2VyU2V0dXBFdmVudChwbGF5ZXIsIGhhc2gsIGJlZm9yZSkge1xuICB2YXIgZXZlbnROYW1lID0gKGJlZm9yZSA/ICdiZWZvcmUnIDogJycpICsgJ3BsdWdpbnNldHVwJztcbiAgcGxheWVyLnRyaWdnZXIoZXZlbnROYW1lLCBoYXNoKTtcbiAgcGxheWVyLnRyaWdnZXIoZXZlbnROYW1lICsgJzonICsgaGFzaC5uYW1lLCBoYXNoKTtcbn07XG4vKipcbiAqIFRha2VzIGEgYmFzaWMgcGx1Z2luIGZ1bmN0aW9uIGFuZCByZXR1cm5zIGEgd3JhcHBlciBmdW5jdGlvbiB3aGljaCBtYXJrc1xuICogb24gdGhlIHBsYXllciB0aGF0IHRoZSBwbHVnaW4gaGFzIGJlZW4gYWN0aXZhdGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luLlxuICpcbiAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gcGx1Z2luXG4gKiAgICAgICAgICBUaGUgYmFzaWMgcGx1Z2luLlxuICpcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogICAgICAgICAgQSB3cmFwcGVyIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gcGx1Z2luLlxuICovXG5cblxudmFyIGNyZWF0ZUJhc2ljUGx1Z2luID0gZnVuY3Rpb24gY3JlYXRlQmFzaWNQbHVnaW4obmFtZSwgcGx1Z2luKSB7XG4gIHZhciBiYXNpY1BsdWdpbldyYXBwZXIgPSBmdW5jdGlvbiBiYXNpY1BsdWdpbldyYXBwZXIoKSB7XG4gICAgLy8gV2UgdHJpZ2dlciB0aGUgXCJiZWZvcmVwbHVnaW5zZXR1cFwiIGFuZCBcInBsdWdpbnNldHVwXCIgZXZlbnRzIG9uIHRoZSBwbGF5ZXJcbiAgICAvLyByZWdhcmRsZXNzLCBidXQgd2Ugd2FudCB0aGUgaGFzaCB0byBiZSBjb25zaXN0ZW50IHdpdGggdGhlIGhhc2ggcHJvdmlkZWRcbiAgICAvLyBmb3IgYWR2YW5jZWQgcGx1Z2lucy5cbiAgICAvL1xuICAgIC8vIFRoZSBvbmx5IHBvdGVudGlhbGx5IGNvdW50ZXItaW50dWl0aXZlIHRoaW5nIGhlcmUgaXMgdGhlIGBpbnN0YW5jZWAgaW5cbiAgICAvLyB0aGUgXCJwbHVnaW5zZXR1cFwiIGV2ZW50IGlzIHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgYHBsdWdpbmAgZnVuY3Rpb24uXG4gICAgdHJpZ2dlclNldHVwRXZlbnQodGhpcywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHBsdWdpbjogcGx1Z2luLFxuICAgICAgaW5zdGFuY2U6IG51bGxcbiAgICB9LCB0cnVlKTtcbiAgICB2YXIgaW5zdGFuY2UgPSBwbHVnaW4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBtYXJrUGx1Z2luQXNBY3RpdmUodGhpcywgbmFtZSk7XG4gICAgdHJpZ2dlclNldHVwRXZlbnQodGhpcywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHBsdWdpbjogcGx1Z2luLFxuICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgfSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xuXG4gIE9iamVjdC5rZXlzKHBsdWdpbikuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGJhc2ljUGx1Z2luV3JhcHBlcltwcm9wXSA9IHBsdWdpbltwcm9wXTtcbiAgfSk7XG4gIHJldHVybiBiYXNpY1BsdWdpbldyYXBwZXI7XG59O1xuLyoqXG4gKiBUYWtlcyBhIHBsdWdpbiBzdWItY2xhc3MgYW5kIHJldHVybnMgYSBmYWN0b3J5IGZ1bmN0aW9uIGZvciBnZW5lcmF0aW5nXG4gKiBpbnN0YW5jZXMgb2YgaXQuXG4gKlxuICogVGhpcyBmYWN0b3J5IGZ1bmN0aW9uIHdpbGwgcmVwbGFjZSBpdHNlbGYgd2l0aCBhbiBpbnN0YW5jZSBvZiB0aGUgcmVxdWVzdGVkXG4gKiBzdWItY2xhc3Mgb2YgUGx1Z2luLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luLlxuICpcbiAqIEBwYXJhbSAgIHtQbHVnaW59IFBsdWdpblN1YkNsYXNzXG4gKiAgICAgICAgICBUaGUgYWR2YW5jZWQgcGx1Z2luLlxuICpcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5cblxudmFyIGNyZWF0ZVBsdWdpbkZhY3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVQbHVnaW5GYWN0b3J5KG5hbWUsIFBsdWdpblN1YkNsYXNzKSB7XG4gIC8vIEFkZCBhIGBuYW1lYCBwcm9wZXJ0eSB0byB0aGUgcGx1Z2luIHByb3RvdHlwZSBzbyB0aGF0IGVhY2ggcGx1Z2luIGNhblxuICAvLyByZWZlciB0byBpdHNlbGYgYnkgbmFtZS5cbiAgUGx1Z2luU3ViQ2xhc3MucHJvdG90eXBlLm5hbWUgPSBuYW1lO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHRyaWdnZXJTZXR1cEV2ZW50KHRoaXMsIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBwbHVnaW46IFBsdWdpblN1YkNsYXNzLFxuICAgICAgaW5zdGFuY2U6IG51bGxcbiAgICB9LCB0cnVlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgaW5zdGFuY2UgPSBfY29uc3RydWN0KFBsdWdpblN1YkNsYXNzLCBbdGhpc10uY29uY2F0KGFyZ3MpKTsgLy8gVGhlIHBsdWdpbiBpcyByZXBsYWNlZCBieSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZS5cblxuXG4gICAgdGhpc1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgdHJpZ2dlclNldHVwRXZlbnQodGhpcywgaW5zdGFuY2UuZ2V0RXZlbnRIYXNoKCkpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn07XG4vKipcbiAqIFBhcmVudCBjbGFzcyBmb3IgYWxsIGFkdmFuY2VkIHBsdWdpbnMuXG4gKlxuICogQG1peGVzICAgbW9kdWxlOmV2ZW50ZWR+RXZlbnRlZE1peGluXG4gKiBAbWl4ZXMgICBtb2R1bGU6c3RhdGVmdWx+U3RhdGVmdWxNaXhpblxuICogQGZpcmVzICAgUGxheWVyI2JlZm9yZXBsdWdpbnNldHVwXG4gKiBAZmlyZXMgICBQbGF5ZXIjYmVmb3JlcGx1Z2luc2V0dXA6JG5hbWVcbiAqIEBmaXJlcyAgIFBsYXllciNwbHVnaW5zZXR1cFxuICogQGZpcmVzICAgUGxheWVyI3BsdWdpbnNldHVwOiRuYW1lXG4gKiBAbGlzdGVucyBQbGF5ZXIjZGlzcG9zZVxuICogQHRocm93cyAge0Vycm9yfVxuICogICAgICAgICAgSWYgYXR0ZW1wdGluZyB0byBpbnN0YW50aWF0ZSB0aGUgYmFzZSB7QGxpbmsgUGx1Z2lufSBjbGFzc1xuICogICAgICAgICAgZGlyZWN0bHkgaW5zdGVhZCBvZiB2aWEgYSBzdWItY2xhc3MuXG4gKi9cblxuXG52YXIgUGx1Z2luID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogU3ViLWNsYXNzZXMgc2hvdWxkIGNhbGwgYHN1cGVyYCB0byBlbnN1cmUgcGx1Z2lucyBhcmUgcHJvcGVybHkgaW5pdGlhbGl6ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXJcbiAgICogICAgICAgIEEgVmlkZW8uanMgcGxheWVyIGluc3RhbmNlLlxuICAgKi9cbiAgZnVuY3Rpb24gUGx1Z2luKHBsYXllcikge1xuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBQbHVnaW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGx1Z2luIG11c3QgYmUgc3ViLWNsYXNzZWQ7IG5vdCBkaXJlY3RseSBpbnN0YW50aWF0ZWQuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG5cbiAgICBpZiAoIXRoaXMubG9nKSB7XG4gICAgICB0aGlzLmxvZyA9IHRoaXMucGxheWVyLmxvZy5jcmVhdGVMb2dnZXIodGhpcy5uYW1lKTtcbiAgICB9IC8vIE1ha2UgdGhpcyBvYmplY3QgZXZlbnRlZCwgYnV0IHJlbW92ZSB0aGUgYWRkZWQgYHRyaWdnZXJgIG1ldGhvZCBzbyB3ZVxuICAgIC8vIHVzZSB0aGUgcHJvdG90eXBlIHZlcnNpb24gaW5zdGVhZC5cblxuXG4gICAgZXZlbnRlZCh0aGlzKTtcbiAgICBkZWxldGUgdGhpcy50cmlnZ2VyO1xuICAgIHN0YXRlZnVsKHRoaXMsIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdFN0YXRlKTtcbiAgICBtYXJrUGx1Z2luQXNBY3RpdmUocGxheWVyLCB0aGlzLm5hbWUpOyAvLyBBdXRvLWJpbmQgdGhlIGRpc3Bvc2UgbWV0aG9kIHNvIHdlIGNhbiB1c2UgaXQgYXMgYSBsaXN0ZW5lciBhbmQgdW5iaW5kXG4gICAgLy8gaXQgbGF0ZXIgZWFzaWx5LlxuXG4gICAgdGhpcy5kaXNwb3NlID0gYmluZCh0aGlzLCB0aGlzLmRpc3Bvc2UpOyAvLyBJZiB0aGUgcGxheWVyIGlzIGRpc3Bvc2VkLCBkaXNwb3NlIHRoZSBwbHVnaW4uXG5cbiAgICBwbGF5ZXIub24oJ2Rpc3Bvc2UnLCB0aGlzLmRpc3Bvc2UpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHZlcnNpb24gb2YgdGhlIHBsdWdpbiB0aGF0IHdhcyBzZXQgb24gPHBsdWdpbk5hbWU+LlZFUlNJT05cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUGx1Z2luLnByb3RvdHlwZTtcblxuICBfcHJvdG8udmVyc2lvbiA9IGZ1bmN0aW9uIHZlcnNpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuVkVSU0lPTjtcbiAgfVxuICAvKipcbiAgICogRWFjaCBldmVudCB0cmlnZ2VyZWQgYnkgcGx1Z2lucyBpbmNsdWRlcyBhIGhhc2ggb2YgYWRkaXRpb25hbCBkYXRhIHdpdGhcbiAgICogY29udmVudGlvbmFsIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIFRoaXMgcmV0dXJucyB0aGF0IG9iamVjdCBvciBtdXRhdGVzIGFuIGV4aXN0aW5nIGhhc2guXG4gICAqXG4gICAqIEBwYXJhbSAgIHtPYmplY3R9IFtoYXNoPXt9XVxuICAgKiAgICAgICAgICBBbiBvYmplY3QgdG8gYmUgdXNlZCBhcyBldmVudCBhbiBldmVudCBoYXNoLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQbHVnaW5+UGx1Z2luRXZlbnRIYXNofVxuICAgKiAgICAgICAgICBBbiBldmVudCBoYXNoIG9iamVjdCB3aXRoIHByb3ZpZGVkIHByb3BlcnRpZXMgbWl4ZWQtaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldEV2ZW50SGFzaCA9IGZ1bmN0aW9uIGdldEV2ZW50SGFzaChoYXNoKSB7XG4gICAgaWYgKGhhc2ggPT09IHZvaWQgMCkge1xuICAgICAgaGFzaCA9IHt9O1xuICAgIH1cblxuICAgIGhhc2gubmFtZSA9IHRoaXMubmFtZTtcbiAgICBoYXNoLnBsdWdpbiA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgaGFzaC5pbnN0YW5jZSA9IHRoaXM7XG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cbiAgLyoqXG4gICAqIFRyaWdnZXJzIGFuIGV2ZW50IG9uIHRoZSBwbHVnaW4gb2JqZWN0IGFuZCBvdmVycmlkZXNcbiAgICoge0BsaW5rIG1vZHVsZTpldmVudGVkfkV2ZW50ZWRNaXhpbi50cmlnZ2VyfEV2ZW50ZWRNaXhpbi50cmlnZ2VyfS5cbiAgICpcbiAgICogQHBhcmFtICAge3N0cmluZ3xPYmplY3R9IGV2ZW50XG4gICAqICAgICAgICAgIEFuIGV2ZW50IHR5cGUgb3IgYW4gb2JqZWN0IHdpdGggYSB0eXBlIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0gICB7T2JqZWN0fSBbaGFzaD17fV1cbiAgICogICAgICAgICAgQWRkaXRpb25hbCBkYXRhIGhhc2ggdG8gbWVyZ2Ugd2l0aCBhXG4gICAqICAgICAgICAgIHtAbGluayBQbHVnaW5+UGx1Z2luRXZlbnRIYXNofFBsdWdpbkV2ZW50SGFzaH0uXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgIFdoZXRoZXIgb3Igbm90IGRlZmF1bHQgd2FzIHByZXZlbnRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udHJpZ2dlciA9IGZ1bmN0aW9uIHRyaWdnZXIkMShldmVudCwgaGFzaCkge1xuICAgIGlmIChoYXNoID09PSB2b2lkIDApIHtcbiAgICAgIGhhc2ggPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJpZ2dlcih0aGlzLmV2ZW50QnVzRWxfLCBldmVudCwgdGhpcy5nZXRFdmVudEhhc2goaGFzaCkpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIFwic3RhdGVjaGFuZ2VkXCIgZXZlbnRzIG9uIHRoZSBwbHVnaW4uIE5vLW9wIGJ5IGRlZmF1bHQsIG92ZXJyaWRlIGJ5XG4gICAqIHN1YmNsYXNzaW5nLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtICAgIHtFdmVudH0gZVxuICAgKiAgICAgICAgICAgQW4gZXZlbnQgb2JqZWN0IHByb3ZpZGVkIGJ5IGEgXCJzdGF0ZWNoYW5nZWRcIiBldmVudC5cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9IGUuY2hhbmdlc1xuICAgKiAgICAgICAgICAgQW4gb2JqZWN0IGRlc2NyaWJpbmcgY2hhbmdlcyB0aGF0IG9jY3VycmVkIHdpdGggdGhlIFwic3RhdGVjaGFuZ2VkXCJcbiAgICogICAgICAgICAgIGV2ZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVTdGF0ZUNoYW5nZWQgPSBmdW5jdGlvbiBoYW5kbGVTdGF0ZUNoYW5nZWQoZSkge31cbiAgLyoqXG4gICAqIERpc3Bvc2VzIGEgcGx1Z2luLlxuICAgKlxuICAgKiBTdWJjbGFzc2VzIGNhbiBvdmVycmlkZSB0aGlzIGlmIHRoZXkgd2FudCwgYnV0IGZvciB0aGUgc2FrZSBvZiBzYWZldHksXG4gICAqIGl0J3MgcHJvYmFibHkgYmVzdCB0byBzdWJzY3JpYmUgdGhlIFwiZGlzcG9zZVwiIGV2ZW50LlxuICAgKlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rpc3Bvc2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdmFyIG5hbWUgPSB0aGlzLm5hbWUsXG4gICAgICAgIHBsYXllciA9IHRoaXMucGxheWVyO1xuICAgIC8qKlxuICAgICAqIFNpZ25hbHMgdGhhdCBhIGFkdmFuY2VkIHBsdWdpbiBpcyBhYm91dCB0byBiZSBkaXNwb3NlZC5cbiAgICAgKlxuICAgICAqIEBldmVudCBQbHVnaW4jZGlzcG9zZVxuICAgICAqIEB0eXBlICB7RXZlbnRUYXJnZXR+RXZlbnR9XG4gICAgICovXG5cbiAgICB0aGlzLnRyaWdnZXIoJ2Rpc3Bvc2UnKTtcbiAgICB0aGlzLm9mZigpO1xuICAgIHBsYXllci5vZmYoJ2Rpc3Bvc2UnLCB0aGlzLmRpc3Bvc2UpOyAvLyBFbGltaW5hdGUgYW55IHBvc3NpYmxlIHNvdXJjZXMgb2YgbGVha2luZyBtZW1vcnkgYnkgY2xlYXJpbmcgdXBcbiAgICAvLyByZWZlcmVuY2VzIGJldHdlZW4gdGhlIHBsYXllciBhbmQgdGhlIHBsdWdpbiBpbnN0YW5jZSBhbmQgbnVsbGluZyBvdXRcbiAgICAvLyB0aGUgcGx1Z2luJ3Mgc3RhdGUgYW5kIHJlcGxhY2luZyBtZXRob2RzIHdpdGggYSBmdW5jdGlvbiB0aGF0IHRocm93cy5cblxuICAgIHBsYXllcltQTFVHSU5fQ0FDSEVfS0VZXVtuYW1lXSA9IGZhbHNlO1xuICAgIHRoaXMucGxheWVyID0gdGhpcy5zdGF0ZSA9IG51bGw7IC8vIEZpbmFsbHksIHJlcGxhY2UgdGhlIHBsdWdpbiBuYW1lIG9uIHRoZSBwbGF5ZXIgd2l0aCBhIG5ldyBmYWN0b3J5XG4gICAgLy8gZnVuY3Rpb24sIHNvIHRoYXQgdGhlIHBsdWdpbiBpcyByZWFkeSB0byBiZSBzZXQgdXAgYWdhaW4uXG5cbiAgICBwbGF5ZXJbbmFtZV0gPSBjcmVhdGVQbHVnaW5GYWN0b3J5KG5hbWUsIHBsdWdpblN0b3JhZ2VbbmFtZV0pO1xuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIGEgcGx1Z2luIGlzIGEgYmFzaWMgcGx1Z2luIChpLmUuIG5vdCBhIHN1Yi1jbGFzcyBvZiBgUGx1Z2luYCkuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd8RnVuY3Rpb259IHBsdWdpblxuICAgKiAgICAgICAgICBJZiBhIHN0cmluZywgbWF0Y2hlcyB0aGUgbmFtZSBvZiBhIHBsdWdpbi4gSWYgYSBmdW5jdGlvbiwgd2lsbCBiZVxuICAgKiAgICAgICAgICB0ZXN0ZWQgZGlyZWN0bHkuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgIFdoZXRoZXIgb3Igbm90IGEgcGx1Z2luIGlzIGEgYmFzaWMgcGx1Z2luLlxuICAgKi9cbiAgO1xuXG4gIFBsdWdpbi5pc0Jhc2ljID0gZnVuY3Rpb24gaXNCYXNpYyhwbHVnaW4pIHtcbiAgICB2YXIgcCA9IHR5cGVvZiBwbHVnaW4gPT09ICdzdHJpbmcnID8gZ2V0UGx1Z2luKHBsdWdpbikgOiBwbHVnaW47XG4gICAgcmV0dXJuIHR5cGVvZiBwID09PSAnZnVuY3Rpb24nICYmICFQbHVnaW4ucHJvdG90eXBlLmlzUHJvdG90eXBlT2YocC5wcm90b3R5cGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFZpZGVvLmpzIHBsdWdpbi5cbiAgICpcbiAgICogQHBhcmFtICAge3N0cmluZ30gbmFtZVxuICAgKiAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIHRvIGJlIHJlZ2lzdGVyZWQuIE11c3QgYmUgYSBzdHJpbmcgYW5kXG4gICAqICAgICAgICAgIG11c3Qgbm90IG1hdGNoIGFuIGV4aXN0aW5nIHBsdWdpbiBvciBhIG1ldGhvZCBvbiB0aGUgYFBsYXllcmBcbiAgICogICAgICAgICAgcHJvdG90eXBlLlxuICAgKlxuICAgKiBAcGFyYW0gICB7RnVuY3Rpb259IHBsdWdpblxuICAgKiAgICAgICAgICBBIHN1Yi1jbGFzcyBvZiBgUGx1Z2luYCBvciBhIGZ1bmN0aW9uIGZvciBiYXNpYyBwbHVnaW5zLlxuICAgKlxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICogICAgICAgICAgRm9yIGFkdmFuY2VkIHBsdWdpbnMsIGEgZmFjdG9yeSBmdW5jdGlvbiBmb3IgdGhhdCBwbHVnaW4uIEZvclxuICAgKiAgICAgICAgICBiYXNpYyBwbHVnaW5zLCBhIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCBpbml0aWFsaXplcyB0aGUgcGx1Z2luLlxuICAgKi9cbiAgO1xuXG4gIFBsdWdpbi5yZWdpc3RlclBsdWdpbiA9IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKG5hbWUsIHBsdWdpbikge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgcGx1Z2luIG5hbWUsIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIsIG11c3QgYmUgYSBzdHJpbmcsIHdhcyBcIiArIHR5cGVvZiBuYW1lICsgXCIuXCIpO1xuICAgIH1cblxuICAgIGlmIChwbHVnaW5FeGlzdHMobmFtZSkpIHtcbiAgICAgIGxvZy53YXJuKFwiQSBwbHVnaW4gbmFtZWQgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBhbHJlYWR5IGV4aXN0cy4gWW91IG1heSB3YW50IHRvIGF2b2lkIHJlLXJlZ2lzdGVyaW5nIHBsdWdpbnMhXCIpO1xuICAgIH0gZWxzZSBpZiAoUGxheWVyLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBwbHVnaW4gbmFtZSwgXFxcIlwiICsgbmFtZSArIFwiXFxcIiwgY2Fubm90IHNoYXJlIGEgbmFtZSB3aXRoIGFuIGV4aXN0aW5nIHBsYXllciBtZXRob2QhXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGx1Z2luICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIHBsdWdpbiBmb3IgXFxcIlwiICsgbmFtZSArIFwiXFxcIiwgbXVzdCBiZSBhIGZ1bmN0aW9uLCB3YXMgXCIgKyB0eXBlb2YgcGx1Z2luICsgXCIuXCIpO1xuICAgIH1cblxuICAgIHBsdWdpblN0b3JhZ2VbbmFtZV0gPSBwbHVnaW47IC8vIEFkZCBhIHBsYXllciBwcm90b3R5cGUgbWV0aG9kIGZvciBhbGwgc3ViLWNsYXNzZWQgcGx1Z2lucyAoYnV0IG5vdCBmb3JcbiAgICAvLyB0aGUgYmFzZSBQbHVnaW4gY2xhc3MpLlxuXG4gICAgaWYgKG5hbWUgIT09IEJBU0VfUExVR0lOX05BTUUpIHtcbiAgICAgIGlmIChQbHVnaW4uaXNCYXNpYyhwbHVnaW4pKSB7XG4gICAgICAgIFBsYXllci5wcm90b3R5cGVbbmFtZV0gPSBjcmVhdGVCYXNpY1BsdWdpbihuYW1lLCBwbHVnaW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUGxheWVyLnByb3RvdHlwZVtuYW1lXSA9IGNyZWF0ZVBsdWdpbkZhY3RvcnkobmFtZSwgcGx1Z2luKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGx1Z2luO1xuICB9XG4gIC8qKlxuICAgKiBEZS1yZWdpc3RlciBhIFZpZGVvLmpzIHBsdWdpbi5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSBuYW1lXG4gICAqICAgICAgICAgVGhlIG5hbWUgb2YgdGhlIHBsdWdpbiB0byBiZSBkZS1yZWdpc3RlcmVkLiBNdXN0IGJlIGEgc3RyaW5nIHRoYXRcbiAgICogICAgICAgICBtYXRjaGVzIGFuIGV4aXN0aW5nIHBsdWdpbi5cbiAgICpcbiAgICogQHRocm93cyB7RXJyb3J9XG4gICAqICAgICAgICAgSWYgYW4gYXR0ZW1wdCBpcyBtYWRlIHRvIGRlLXJlZ2lzdGVyIHRoZSBiYXNlIHBsdWdpbi5cbiAgICovXG4gIDtcblxuICBQbHVnaW4uZGVyZWdpc3RlclBsdWdpbiA9IGZ1bmN0aW9uIGRlcmVnaXN0ZXJQbHVnaW4obmFtZSkge1xuICAgIGlmIChuYW1lID09PSBCQVNFX1BMVUdJTl9OQU1FKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZS1yZWdpc3RlciBiYXNlIHBsdWdpbi4nKTtcbiAgICB9XG5cbiAgICBpZiAocGx1Z2luRXhpc3RzKG5hbWUpKSB7XG4gICAgICBkZWxldGUgcGx1Z2luU3RvcmFnZVtuYW1lXTtcbiAgICAgIGRlbGV0ZSBQbGF5ZXIucHJvdG90eXBlW25hbWVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0cyBhbiBvYmplY3QgY29udGFpbmluZyBtdWx0aXBsZSBWaWRlby5qcyBwbHVnaW5zLlxuICAgKlxuICAgKiBAcGFyYW0gICB7QXJyYXl9IFtuYW1lc11cbiAgICogICAgICAgICAgSWYgcHJvdmlkZWQsIHNob3VsZCBiZSBhbiBhcnJheSBvZiBwbHVnaW4gbmFtZXMuIERlZmF1bHRzIHRvIF9hbGxfXG4gICAqICAgICAgICAgIHBsdWdpbiBuYW1lcy5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fHVuZGVmaW5lZH1cbiAgICogICAgICAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgcGx1Z2luKHMpIGFzc29jaWF0ZWQgd2l0aCB0aGVpciBuYW1lKHMpIG9yXG4gICAqICAgICAgICAgIGB1bmRlZmluZWRgIGlmIG5vIG1hdGNoaW5nIHBsdWdpbnMgZXhpc3QpLlxuICAgKi9cbiAgO1xuXG4gIFBsdWdpbi5nZXRQbHVnaW5zID0gZnVuY3Rpb24gZ2V0UGx1Z2lucyhuYW1lcykge1xuICAgIGlmIChuYW1lcyA9PT0gdm9pZCAwKSB7XG4gICAgICBuYW1lcyA9IE9iamVjdC5rZXlzKHBsdWdpblN0b3JhZ2UpO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQ7XG4gICAgbmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHBsdWdpbiA9IGdldFBsdWdpbihuYW1lKTtcblxuICAgICAgaWYgKHBsdWdpbikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwge307XG4gICAgICAgIHJlc3VsdFtuYW1lXSA9IHBsdWdpbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGEgcGx1Z2luJ3MgdmVyc2lvbiwgaWYgYXZhaWxhYmxlXG4gICAqXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcbiAgICogICAgICAgICAgVGhlIG5hbWUgb2YgYSBwbHVnaW4uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogICAgICAgICAgVGhlIHBsdWdpbidzIHZlcnNpb24gb3IgYW4gZW1wdHkgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIFBsdWdpbi5nZXRQbHVnaW5WZXJzaW9uID0gZnVuY3Rpb24gZ2V0UGx1Z2luVmVyc2lvbihuYW1lKSB7XG4gICAgdmFyIHBsdWdpbiA9IGdldFBsdWdpbihuYW1lKTtcbiAgICByZXR1cm4gcGx1Z2luICYmIHBsdWdpbi5WRVJTSU9OIHx8ICcnO1xuICB9O1xuXG4gIHJldHVybiBQbHVnaW47XG59KCk7XG4vKipcbiAqIEdldHMgYSBwbHVnaW4gYnkgbmFtZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1ldGhvZCAgIGdldFBsdWdpblxuICogQG1lbWJlck9mIFBsdWdpblxuICogQHBhcmFtICAgIHtzdHJpbmd9IG5hbWVcbiAqICAgICAgICAgICBUaGUgbmFtZSBvZiBhIHBsdWdpbi5cbiAqXG4gKiBAcmV0dXJucyAge0Z1bmN0aW9ufHVuZGVmaW5lZH1cbiAqICAgICAgICAgICBUaGUgcGx1Z2luIChvciBgdW5kZWZpbmVkYCkuXG4gKi9cblxuXG5QbHVnaW4uZ2V0UGx1Z2luID0gZ2V0UGx1Z2luO1xuLyoqXG4gKiBUaGUgbmFtZSBvZiB0aGUgYmFzZSBwbHVnaW4gY2xhc3MgYXMgaXQgaXMgcmVnaXN0ZXJlZC5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5cblBsdWdpbi5CQVNFX1BMVUdJTl9OQU1FID0gQkFTRV9QTFVHSU5fTkFNRTtcblBsdWdpbi5yZWdpc3RlclBsdWdpbihCQVNFX1BMVUdJTl9OQU1FLCBQbHVnaW4pO1xuLyoqXG4gKiBEb2N1bWVudGVkIGluIHBsYXllci5qc1xuICpcbiAqIEBpZ25vcmVcbiAqL1xuXG5QbGF5ZXIucHJvdG90eXBlLnVzaW5nUGx1Z2luID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuICEhdGhpc1tQTFVHSU5fQ0FDSEVfS0VZXSAmJiB0aGlzW1BMVUdJTl9DQUNIRV9LRVldW25hbWVdID09PSB0cnVlO1xufTtcbi8qKlxuICogRG9jdW1lbnRlZCBpbiBwbGF5ZXIuanNcbiAqXG4gKiBAaWdub3JlXG4gKi9cblxuXG5QbGF5ZXIucHJvdG90eXBlLmhhc1BsdWdpbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiAhIXBsdWdpbkV4aXN0cyhuYW1lKTtcbn07XG4vKipcbiAqIFNpZ25hbHMgdGhhdCBhIHBsdWdpbiBpcyBhYm91dCB0byBiZSBzZXQgdXAgb24gYSBwbGF5ZXIuXG4gKlxuICogQGV2ZW50ICAgIFBsYXllciNiZWZvcmVwbHVnaW5zZXR1cFxuICogQHR5cGUgICAgIHtQbHVnaW5+UGx1Z2luRXZlbnRIYXNofVxuICovXG5cbi8qKlxuICogU2lnbmFscyB0aGF0IGEgcGx1Z2luIGlzIGFib3V0IHRvIGJlIHNldCB1cCBvbiBhIHBsYXllciAtIGJ5IG5hbWUuIFRoZSBuYW1lXG4gKiBpcyB0aGUgbmFtZSBvZiB0aGUgcGx1Z2luLlxuICpcbiAqIEBldmVudCAgICBQbGF5ZXIjYmVmb3JlcGx1Z2luc2V0dXA6JG5hbWVcbiAqIEB0eXBlICAgICB7UGx1Z2luflBsdWdpbkV2ZW50SGFzaH1cbiAqL1xuXG4vKipcbiAqIFNpZ25hbHMgdGhhdCBhIHBsdWdpbiBoYXMganVzdCBiZWVuIHNldCB1cCBvbiBhIHBsYXllci5cbiAqXG4gKiBAZXZlbnQgICAgUGxheWVyI3BsdWdpbnNldHVwXG4gKiBAdHlwZSAgICAge1BsdWdpbn5QbHVnaW5FdmVudEhhc2h9XG4gKi9cblxuLyoqXG4gKiBTaWduYWxzIHRoYXQgYSBwbHVnaW4gaGFzIGp1c3QgYmVlbiBzZXQgdXAgb24gYSBwbGF5ZXIgLSBieSBuYW1lLiBUaGUgbmFtZVxuICogaXMgdGhlIG5hbWUgb2YgdGhlIHBsdWdpbi5cbiAqXG4gKiBAZXZlbnQgICAgUGxheWVyI3BsdWdpbnNldHVwOiRuYW1lXG4gKiBAdHlwZSAgICAge1BsdWdpbn5QbHVnaW5FdmVudEhhc2h9XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiAge09iamVjdH0gUGx1Z2luflBsdWdpbkV2ZW50SGFzaFxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpbnN0YW5jZVxuICogICAgICAgICAgIEZvciBiYXNpYyBwbHVnaW5zLCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwbHVnaW4gZnVuY3Rpb24uIEZvclxuICogICAgICAgICAgIGFkdmFuY2VkIHBsdWdpbnMsIHRoZSBwbHVnaW4gaW5zdGFuY2Ugb24gd2hpY2ggdGhlIGV2ZW50IGlzIGZpcmVkLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgICAgVGhlIG5hbWUgb2YgdGhlIHBsdWdpbi5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGx1Z2luXG4gKiAgICAgICAgICAgRm9yIGJhc2ljIHBsdWdpbnMsIHRoZSBwbHVnaW4gZnVuY3Rpb24uIEZvciBhZHZhbmNlZCBwbHVnaW5zLCB0aGVcbiAqICAgICAgICAgICBwbHVnaW4gY2xhc3MvY29uc3RydWN0b3IuXG4gKi9cblxuLyoqXG4gKiBAZmlsZSBleHRlbmQuanNcbiAqIEBtb2R1bGUgZXh0ZW5kXG4gKi9cbi8qKlxuICogVXNlZCB0byBzdWJjbGFzcyBhbiBleGlzdGluZyBjbGFzcyBieSBlbXVsYXRpbmcgRVMgc3ViY2xhc3NpbmcgdXNpbmcgdGhlXG4gKiBgZXh0ZW5kc2Aga2V5d29yZC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBleGFtcGxlXG4gKiB2YXIgTXlDb21wb25lbnQgPSB2aWRlb2pzLmV4dGVuZCh2aWRlb2pzLmdldENvbXBvbmVudCgnQ29tcG9uZW50JyksIHtcbiAqICAgbXlDdXN0b21NZXRob2Q6IGZ1bmN0aW9uKCkge1xuICogICAgIC8vIERvIHRoaW5ncyBpbiBteSBtZXRob2QuXG4gKiAgIH1cbiAqIH0pO1xuICpcbiAqIEBwYXJhbSAgICB7RnVuY3Rpb259IHN1cGVyQ2xhc3NcbiAqICAgICAgICAgICBUaGUgY2xhc3MgdG8gaW5oZXJpdCBmcm9tXG4gKlxuICogQHBhcmFtICAgIHtPYmplY3R9ICAgW3N1YkNsYXNzTWV0aG9kcz17fV1cbiAqICAgICAgICAgICBNZXRob2RzIG9mIHRoZSBuZXcgY2xhc3NcbiAqXG4gKiBAcmV0dXJuICAge0Z1bmN0aW9ufVxuICogICAgICAgICAgIFRoZSBuZXcgY2xhc3Mgd2l0aCBzdWJDbGFzc01ldGhvZHMgdGhhdCBpbmhlcml0ZWQgc3VwZXJDbGFzcy5cbiAqL1xuXG52YXIgZXh0ZW5kID0gZnVuY3Rpb24gZXh0ZW5kKHN1cGVyQ2xhc3MsIHN1YkNsYXNzTWV0aG9kcykge1xuICBpZiAoc3ViQ2xhc3NNZXRob2RzID09PSB2b2lkIDApIHtcbiAgICBzdWJDbGFzc01ldGhvZHMgPSB7fTtcbiAgfVxuXG4gIHZhciBzdWJDbGFzcyA9IGZ1bmN0aW9uIHN1YkNsYXNzKCkge1xuICAgIHN1cGVyQ2xhc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgbWV0aG9kcyA9IHt9O1xuXG4gIGlmICh0eXBlb2Ygc3ViQ2xhc3NNZXRob2RzID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChzdWJDbGFzc01ldGhvZHMuY29uc3RydWN0b3IgIT09IE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IpIHtcbiAgICAgIHN1YkNsYXNzID0gc3ViQ2xhc3NNZXRob2RzLmNvbnN0cnVjdG9yO1xuICAgIH1cblxuICAgIG1ldGhvZHMgPSBzdWJDbGFzc01ldGhvZHM7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHN1YkNsYXNzTWV0aG9kcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHN1YkNsYXNzID0gc3ViQ2xhc3NNZXRob2RzO1xuICB9XG5cbiAgX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgLy8gdGhpcyBpcyBuZWVkZWQgZm9yIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkgYW5kIG5vZGUgY29tcGF0aWJpbGl0eS5cblxuXG4gIGlmIChzdXBlckNsYXNzKSB7XG4gICAgc3ViQ2xhc3Muc3VwZXJfID0gc3VwZXJDbGFzcztcbiAgfSAvLyBFeHRlbmQgc3ViT2JqJ3MgcHJvdG90eXBlIHdpdGggZnVuY3Rpb25zIGFuZCBvdGhlciBwcm9wZXJ0aWVzIGZyb20gcHJvcHNcblxuXG4gIGZvciAodmFyIG5hbWUgaW4gbWV0aG9kcykge1xuICAgIGlmIChtZXRob2RzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBzdWJDbGFzcy5wcm90b3R5cGVbbmFtZV0gPSBtZXRob2RzW25hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJDbGFzcztcbn07XG5cbi8qKlxuICogQGZpbGUgdmlkZW8uanNcbiAqIEBtb2R1bGUgdmlkZW9qc1xuICovXG4vKipcbiAqIE5vcm1hbGl6ZSBhbiBgaWRgIHZhbHVlIGJ5IHRyaW1taW5nIG9mZiBhIGxlYWRpbmcgYCNgXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IGlkXG4gKiAgICAgICAgICBBIHN0cmluZywgbWF5YmUgd2l0aCBhIGxlYWRpbmcgYCNgLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqICAgICAgICAgIFRoZSBzdHJpbmcsIHdpdGhvdXQgYW55IGxlYWRpbmcgYCNgLlxuICovXG5cbnZhciBub3JtYWxpemVJZCA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUlkKGlkKSB7XG4gIHJldHVybiBpZC5pbmRleE9mKCcjJykgPT09IDAgPyBpZC5zbGljZSgxKSA6IGlkO1xufTtcbi8qKlxuICogVGhlIGB2aWRlb2pzKClgIGZ1bmN0aW9uIGRvdWJsZXMgYXMgdGhlIG1haW4gZnVuY3Rpb24gZm9yIHVzZXJzIHRvIGNyZWF0ZSBhXG4gKiB7QGxpbmsgUGxheWVyfSBpbnN0YW5jZSBhcyB3ZWxsIGFzIHRoZSBtYWluIGxpYnJhcnkgbmFtZXNwYWNlLlxuICpcbiAqIEl0IGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBnZXR0ZXIgZm9yIGEgcHJlLWV4aXN0aW5nIHtAbGluayBQbGF5ZXJ9IGluc3RhbmNlLlxuICogSG93ZXZlciwgd2UgX3N0cm9uZ2x5XyByZWNvbW1lbmQgdXNpbmcgYHZpZGVvanMuZ2V0UGxheWVyKClgIGZvciB0aGlzXG4gKiBwdXJwb3NlIGJlY2F1c2UgaXQgYXZvaWRzIGFueSBwb3RlbnRpYWwgZm9yIHVuaW50ZW5kZWQgaW5pdGlhbGl6YXRpb24uXG4gKlxuICogRHVlIHRvIFtsaW1pdGF0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL2pzZG9jMy9qc2RvYy9pc3N1ZXMvOTU1I2lzc3VlY29tbWVudC0zMTM4MjkxNDkpXG4gKiBvZiBvdXIgSlNEb2MgdGVtcGxhdGUsIHdlIGNhbm5vdCBwcm9wZXJseSBkb2N1bWVudCB0aGlzIGFzIGJvdGggYSBmdW5jdGlvblxuICogYW5kIGEgbmFtZXNwYWNlLCBzbyBpdHMgZnVuY3Rpb24gc2lnbmF0dXJlIGlzIGRvY3VtZW50ZWQgaGVyZS5cbiAqXG4gKiAjIyMjIEFyZ3VtZW50c1xuICogIyMjIyMgaWRcbiAqIHN0cmluZ3xFbGVtZW50LCAqKnJlcXVpcmVkKipcbiAqXG4gKiBWaWRlbyBlbGVtZW50IG9yIHZpZGVvIGVsZW1lbnQgSUQuXG4gKlxuICogIyMjIyMgb3B0aW9uc1xuICogT2JqZWN0LCBvcHRpb25hbFxuICpcbiAqIE9wdGlvbnMgb2JqZWN0IGZvciBwcm92aWRpbmcgc2V0dGluZ3MuXG4gKiBTZWU6IFtPcHRpb25zIEd1aWRlXShodHRwczovL2RvY3MudmlkZW9qcy5jb20vdHV0b3JpYWwtb3B0aW9ucy5odG1sKS5cbiAqXG4gKiAjIyMjIyByZWFkeVxuICoge0BsaW5rIENvbXBvbmVudH5SZWFkeUNhbGxiYWNrfSwgb3B0aW9uYWxcbiAqXG4gKiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSB7QGxpbmsgUGxheWVyfSBhbmQge0BsaW5rIFRlY2h9IGFyZSByZWFkeS5cbiAqXG4gKiAjIyMjIFJldHVybiBWYWx1ZVxuICpcbiAqIFRoZSBgdmlkZW9qcygpYCBmdW5jdGlvbiByZXR1cm5zIGEge0BsaW5rIFBsYXllcn0gaW5zdGFuY2UuXG4gKlxuICogQG5hbWVzcGFjZVxuICpcbiAqIEBib3Jyb3dzIEF1ZGlvVHJhY2sgYXMgQXVkaW9UcmFja1xuICogQGJvcnJvd3MgQ29tcG9uZW50LmdldENvbXBvbmVudCBhcyBnZXRDb21wb25lbnRcbiAqIEBib3Jyb3dzIG1vZHVsZTpjb21wdXRlZC1zdHlsZX5jb21wdXRlZFN0eWxlIGFzIGNvbXB1dGVkU3R5bGVcbiAqIEBib3Jyb3dzIG1vZHVsZTpldmVudHMub24gYXMgb25cbiAqIEBib3Jyb3dzIG1vZHVsZTpldmVudHMub25lIGFzIG9uZVxuICogQGJvcnJvd3MgbW9kdWxlOmV2ZW50cy5vZmYgYXMgb2ZmXG4gKiBAYm9ycm93cyBtb2R1bGU6ZXZlbnRzLnRyaWdnZXIgYXMgdHJpZ2dlclxuICogQGJvcnJvd3MgRXZlbnRUYXJnZXQgYXMgRXZlbnRUYXJnZXRcbiAqIEBib3Jyb3dzIG1vZHVsZTpleHRlbmR+ZXh0ZW5kIGFzIGV4dGVuZFxuICogQGJvcnJvd3MgbW9kdWxlOmZuLmJpbmQgYXMgYmluZFxuICogQGJvcnJvd3MgbW9kdWxlOmZvcm1hdC10aW1lLmZvcm1hdFRpbWUgYXMgZm9ybWF0VGltZVxuICogQGJvcnJvd3MgbW9kdWxlOmZvcm1hdC10aW1lLnJlc2V0Rm9ybWF0VGltZSBhcyByZXNldEZvcm1hdFRpbWVcbiAqIEBib3Jyb3dzIG1vZHVsZTpmb3JtYXQtdGltZS5zZXRGb3JtYXRUaW1lIGFzIHNldEZvcm1hdFRpbWVcbiAqIEBib3Jyb3dzIG1vZHVsZTptZXJnZS1vcHRpb25zLm1lcmdlT3B0aW9ucyBhcyBtZXJnZU9wdGlvbnNcbiAqIEBib3Jyb3dzIG1vZHVsZTptaWRkbGV3YXJlLnVzZSBhcyB1c2VcbiAqIEBib3Jyb3dzIFBsYXllci5wbGF5ZXJzIGFzIHBsYXllcnNcbiAqIEBib3Jyb3dzIFBsdWdpbi5yZWdpc3RlclBsdWdpbiBhcyByZWdpc3RlclBsdWdpblxuICogQGJvcnJvd3MgUGx1Z2luLmRlcmVnaXN0ZXJQbHVnaW4gYXMgZGVyZWdpc3RlclBsdWdpblxuICogQGJvcnJvd3MgUGx1Z2luLmdldFBsdWdpbnMgYXMgZ2V0UGx1Z2luc1xuICogQGJvcnJvd3MgUGx1Z2luLmdldFBsdWdpbiBhcyBnZXRQbHVnaW5cbiAqIEBib3Jyb3dzIFBsdWdpbi5nZXRQbHVnaW5WZXJzaW9uIGFzIGdldFBsdWdpblZlcnNpb25cbiAqIEBib3Jyb3dzIFRlY2guZ2V0VGVjaCBhcyBnZXRUZWNoXG4gKiBAYm9ycm93cyBUZWNoLnJlZ2lzdGVyVGVjaCBhcyByZWdpc3RlclRlY2hcbiAqIEBib3Jyb3dzIFRleHRUcmFjayBhcyBUZXh0VHJhY2tcbiAqIEBib3Jyb3dzIG1vZHVsZTp0aW1lLXJhbmdlcy5jcmVhdGVUaW1lUmFuZ2VzIGFzIGNyZWF0ZVRpbWVSYW5nZVxuICogQGJvcnJvd3MgbW9kdWxlOnRpbWUtcmFuZ2VzLmNyZWF0ZVRpbWVSYW5nZXMgYXMgY3JlYXRlVGltZVJhbmdlc1xuICogQGJvcnJvd3MgbW9kdWxlOnVybC5pc0Nyb3NzT3JpZ2luIGFzIGlzQ3Jvc3NPcmlnaW5cbiAqIEBib3Jyb3dzIG1vZHVsZTp1cmwucGFyc2VVcmwgYXMgcGFyc2VVcmxcbiAqIEBib3Jyb3dzIFZpZGVvVHJhY2sgYXMgVmlkZW9UcmFja1xuICpcbiAqIEBwYXJhbSAge3N0cmluZ3xFbGVtZW50fSBpZFxuICogICAgICAgICBWaWRlbyBlbGVtZW50IG9yIHZpZGVvIGVsZW1lbnQgSUQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9uc11cbiAqICAgICAgICAgT3B0aW9ucyBvYmplY3QgZm9yIHByb3ZpZGluZyBzZXR0aW5ncy5cbiAqICAgICAgICAgU2VlOiBbT3B0aW9ucyBHdWlkZV0oaHR0cHM6Ly9kb2NzLnZpZGVvanMuY29tL3R1dG9yaWFsLW9wdGlvbnMuaHRtbCkuXG4gKlxuICogQHBhcmFtICB7Q29tcG9uZW50flJlYWR5Q2FsbGJhY2t9IFtyZWFkeV1cbiAqICAgICAgICAgQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUge0BsaW5rIFBsYXllcn0gYW5kIHtAbGluayBUZWNofSBhcmVcbiAqICAgICAgICAgcmVhZHkuXG4gKlxuICogQHJldHVybiB7UGxheWVyfVxuICogICAgICAgICBUaGUgYHZpZGVvanMoKWAgZnVuY3Rpb24gcmV0dXJucyBhIHtAbGluayBQbGF5ZXJ8UGxheWVyfSBpbnN0YW5jZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZpZGVvanMkMShpZCwgb3B0aW9ucywgcmVhZHkpIHtcbiAgdmFyIHBsYXllciA9IHZpZGVvanMkMS5nZXRQbGF5ZXIoaWQpO1xuXG4gIGlmIChwbGF5ZXIpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgbG9nLndhcm4oXCJQbGF5ZXIgXFxcIlwiICsgaWQgKyBcIlxcXCIgaXMgYWxyZWFkeSBpbml0aWFsaXNlZC4gT3B0aW9ucyB3aWxsIG5vdCBiZSBhcHBsaWVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAocmVhZHkpIHtcbiAgICAgIHBsYXllci5yZWFkeShyZWFkeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBsYXllcjtcbiAgfVxuXG4gIHZhciBlbCA9IHR5cGVvZiBpZCA9PT0gJ3N0cmluZycgPyAkKCcjJyArIG5vcm1hbGl6ZUlkKGlkKSkgOiBpZDtcblxuICBpZiAoIWlzRWwoZWwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGVsZW1lbnQgb3IgSUQgc3VwcGxpZWQgaXMgbm90IHZhbGlkLiAodmlkZW9qcyknKTtcbiAgfSAvLyBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKSB3aWxsIG9ubHkgY2hlY2sgaWYgZWwgaXMgY29udGFpbmVkIHdpdGhpbiB0aGF0IG9uZSBkb2N1bWVudC5cbiAgLy8gVGhpcyBjYXVzZXMgcHJvYmxlbXMgZm9yIGVsZW1lbnRzIGluIGlmcmFtZXMuXG4gIC8vIEluc3RlYWQsIHVzZSB0aGUgZWxlbWVudCdzIG93bmVyRG9jdW1lbnQgaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGRvY3VtZW50LlxuICAvLyBUaGlzIHdpbGwgbWFrZSBzdXJlIHRoYXQgdGhlIGVsZW1lbnQgaXMgaW5kZWVkIGluIHRoZSBkb20gb2YgdGhhdCBkb2N1bWVudC5cbiAgLy8gQWRkaXRpb25hbGx5LCBjaGVjayB0aGF0IHRoZSBkb2N1bWVudCBpbiBxdWVzdGlvbiBoYXMgYSBkZWZhdWx0IHZpZXcuXG4gIC8vIElmIHRoZSBkb2N1bWVudCBpcyBubyBsb25nZXIgYXR0YWNoZWQgdG8gdGhlIGRvbSwgdGhlIGRlZmF1bHRWaWV3IG9mIHRoZSBkb2N1bWVudCB3aWxsIGJlIG51bGwuXG5cblxuICBpZiAoIWVsLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgIWVsLm93bmVyRG9jdW1lbnQuYm9keS5jb250YWlucyhlbCkpIHtcbiAgICBsb2cud2FybignVGhlIGVsZW1lbnQgc3VwcGxpZWQgaXMgbm90IGluY2x1ZGVkIGluIHRoZSBET00nKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2aWRlb2pzJDEuaG9va3MoJ2JlZm9yZXNldHVwJykuZm9yRWFjaChmdW5jdGlvbiAoaG9va0Z1bmN0aW9uKSB7XG4gICAgdmFyIG9wdHMgPSBob29rRnVuY3Rpb24oZWwsIG1lcmdlT3B0aW9ucyhvcHRpb25zKSk7XG5cbiAgICBpZiAoIWlzT2JqZWN0KG9wdHMpIHx8IEFycmF5LmlzQXJyYXkob3B0cykpIHtcbiAgICAgIGxvZy5lcnJvcigncGxlYXNlIHJldHVybiBhbiBvYmplY3QgaW4gYmVmb3Jlc2V0dXAgaG9va3MnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gbWVyZ2VPcHRpb25zKG9wdGlvbnMsIG9wdHMpO1xuICB9KTsgLy8gV2UgZ2V0IHRoZSBjdXJyZW50IFwiUGxheWVyXCIgY29tcG9uZW50IGhlcmUgaW4gY2FzZSBhbiBpbnRlZ3JhdGlvbiBoYXNcbiAgLy8gcmVwbGFjZWQgaXQgd2l0aCBhIGN1c3RvbSBwbGF5ZXIuXG5cbiAgdmFyIFBsYXllckNvbXBvbmVudCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQoJ1BsYXllcicpO1xuICBwbGF5ZXIgPSBuZXcgUGxheWVyQ29tcG9uZW50KGVsLCBvcHRpb25zLCByZWFkeSk7XG4gIHZpZGVvanMkMS5ob29rcygnc2V0dXAnKS5mb3JFYWNoKGZ1bmN0aW9uIChob29rRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gaG9va0Z1bmN0aW9uKHBsYXllcik7XG4gIH0pO1xuICByZXR1cm4gcGxheWVyO1xufVxuLyoqXG4gKiBBbiBPYmplY3QgdGhhdCBjb250YWlucyBsaWZlY3ljbGUgaG9va3MgYXMga2V5cyB3aGljaCBwb2ludCB0byBhbiBhcnJheVxuICogb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHJ1biB3aGVuIGEgbGlmZWN5Y2xlIGlzIHRyaWdnZXJlZFxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52aWRlb2pzJDEuaG9va3NfID0ge307XG4vKipcbiAqIEdldCBhIGxpc3Qgb2YgaG9va3MgZm9yIGEgc3BlY2lmaWMgbGlmZWN5Y2xlXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB0eXBlXG4gKiAgICAgICAgIHRoZSBsaWZlY3lsZSB0byBnZXQgaG9va3MgZnJvbVxuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufEZ1bmN0aW9uW119IFtmbl1cbiAqICAgICAgICAgT3B0aW9uYWxseSBhZGQgYSBob29rIChvciBob29rcykgdG8gdGhlIGxpZmVjeWNsZSB0aGF0IHlvdXIgYXJlIGdldHRpbmcuXG4gKlxuICogQHJldHVybiB7QXJyYXl9XG4gKiAgICAgICAgIGFuIGFycmF5IG9mIGhvb2tzLCBvciBhbiBlbXB0eSBhcnJheSBpZiB0aGVyZSBhcmUgbm9uZS5cbiAqL1xuXG52aWRlb2pzJDEuaG9va3MgPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgdmlkZW9qcyQxLmhvb2tzX1t0eXBlXSA9IHZpZGVvanMkMS5ob29rc19bdHlwZV0gfHwgW107XG5cbiAgaWYgKGZuKSB7XG4gICAgdmlkZW9qcyQxLmhvb2tzX1t0eXBlXSA9IHZpZGVvanMkMS5ob29rc19bdHlwZV0uY29uY2F0KGZuKTtcbiAgfVxuXG4gIHJldHVybiB2aWRlb2pzJDEuaG9va3NfW3R5cGVdO1xufTtcbi8qKlxuICogQWRkIGEgZnVuY3Rpb24gaG9vayB0byBhIHNwZWNpZmljIHZpZGVvanMgbGlmZWN5Y2xlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiAgICAgICAgdGhlIGxpZmVjeWNsZSB0byBob29rIHRoZSBmdW5jdGlvbiB0by5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEZ1bmN0aW9uW119XG4gKiAgICAgICAgVGhlIGZ1bmN0aW9uIG9yIGFycmF5IG9mIGZ1bmN0aW9ucyB0byBhdHRhY2guXG4gKi9cblxuXG52aWRlb2pzJDEuaG9vayA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICB2aWRlb2pzJDEuaG9va3ModHlwZSwgZm4pO1xufTtcbi8qKlxuICogQWRkIGEgZnVuY3Rpb24gaG9vayB0aGF0IHdpbGwgb25seSBydW4gb25jZSB0byBhIHNwZWNpZmljIHZpZGVvanMgbGlmZWN5Y2xlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiAgICAgICAgdGhlIGxpZmVjeWNsZSB0byBob29rIHRoZSBmdW5jdGlvbiB0by5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEZ1bmN0aW9uW119XG4gKiAgICAgICAgVGhlIGZ1bmN0aW9uIG9yIGFycmF5IG9mIGZ1bmN0aW9ucyB0byBhdHRhY2guXG4gKi9cblxuXG52aWRlb2pzJDEuaG9va09uY2UgPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgdmlkZW9qcyQxLmhvb2tzKHR5cGUsIFtdLmNvbmNhdChmbikubWFwKGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgIHZhciB3cmFwcGVyID0gZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgIHZpZGVvanMkMS5yZW1vdmVIb29rKHR5cGUsIHdyYXBwZXIpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH0pKTtcbn07XG4vKipcbiAqIFJlbW92ZSBhIGhvb2sgZnJvbSBhIHNwZWNpZmljIHZpZGVvanMgbGlmZWN5Y2xlLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdHlwZVxuICogICAgICAgICB0aGUgbGlmZWN5Y2xlIHRoYXQgdGhlIGZ1bmN0aW9uIGhvb2tlZCB0b1xuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmblxuICogICAgICAgICBUaGUgaG9va2VkIGZ1bmN0aW9uIHRvIHJlbW92ZVxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIFRoZSBmdW5jdGlvbiB0aGF0IHdhcyByZW1vdmVkIG9yIHVuZGVmXG4gKi9cblxuXG52aWRlb2pzJDEucmVtb3ZlSG9vayA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICB2YXIgaW5kZXggPSB2aWRlb2pzJDEuaG9va3ModHlwZSkuaW5kZXhPZihmbik7XG5cbiAgaWYgKGluZGV4IDw9IC0xKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmlkZW9qcyQxLmhvb2tzX1t0eXBlXSA9IHZpZGVvanMkMS5ob29rc19bdHlwZV0uc2xpY2UoKTtcbiAgdmlkZW9qcyQxLmhvb2tzX1t0eXBlXS5zcGxpY2UoaW5kZXgsIDEpO1xuICByZXR1cm4gdHJ1ZTtcbn07IC8vIEFkZCBkZWZhdWx0IHN0eWxlc1xuXG5cbmlmICh3aW5kb3ckMS5WSURFT0pTX05PX0RZTkFNSUNfU1RZTEUgIT09IHRydWUgJiYgaXNSZWFsKCkpIHtcbiAgdmFyIHN0eWxlID0gJCgnLnZqcy1zdHlsZXMtZGVmYXVsdHMnKTtcblxuICBpZiAoIXN0eWxlKSB7XG4gICAgc3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQoJ3Zqcy1zdHlsZXMtZGVmYXVsdHMnKTtcbiAgICB2YXIgaGVhZCA9ICQoJ2hlYWQnKTtcblxuICAgIGlmIChoZWFkKSB7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgaGVhZC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzZXRUZXh0Q29udGVudChzdHlsZSwgXCJcXG4gICAgICAudmlkZW8tanMge1xcbiAgICAgICAgd2lkdGg6IDMwMHB4O1xcbiAgICAgICAgaGVpZ2h0OiAxNTBweDtcXG4gICAgICB9XFxuXFxuICAgICAgLnZqcy1mbHVpZCB7XFxuICAgICAgICBwYWRkaW5nLXRvcDogNTYuMjUlXFxuICAgICAgfVxcbiAgICBcIik7XG4gIH1cbn0gLy8gUnVuIEF1dG8tbG9hZCBwbGF5ZXJzXG4vLyBZb3UgaGF2ZSB0byB3YWl0IGF0IGxlYXN0IG9uY2UgaW4gY2FzZSB0aGlzIHNjcmlwdCBpcyBsb2FkZWQgYWZ0ZXIgeW91clxuLy8gdmlkZW8gaW4gdGhlIERPTSAod2VpcmQgYmVoYXZpb3Igb25seSB3aXRoIG1pbmlmaWVkIHZlcnNpb24pXG5cblxuYXV0b1NldHVwVGltZW91dCgxLCB2aWRlb2pzJDEpO1xuLyoqXG4gKiBDdXJyZW50IFZpZGVvLmpzIHZlcnNpb24uIEZvbGxvd3MgW3NlbWFudGljIHZlcnNpb25pbmddKGh0dHBzOi8vc2VtdmVyLm9yZy8pLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cblxudmlkZW9qcyQxLlZFUlNJT04gPSB2ZXJzaW9uO1xuLyoqXG4gKiBUaGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0LiBUaGVzZSBhcmUgdGhlIHNldHRpbmdzIHRoYXQgdGFrZSBlZmZlY3RcbiAqIGlmIG5vIG92ZXJyaWRlcyBhcmUgc3BlY2lmaWVkIHdoZW4gdGhlIHBsYXllciBpcyBjcmVhdGVkLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxudmlkZW9qcyQxLm9wdGlvbnMgPSBQbGF5ZXIucHJvdG90eXBlLm9wdGlvbnNfO1xuLyoqXG4gKiBHZXQgYW4gb2JqZWN0IHdpdGggdGhlIGN1cnJlbnRseSBjcmVhdGVkIHBsYXllcnMsIGtleWVkIGJ5IHBsYXllciBJRFxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgVGhlIGNyZWF0ZWQgcGxheWVyc1xuICovXG5cbnZpZGVvanMkMS5nZXRQbGF5ZXJzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gUGxheWVyLnBsYXllcnM7XG59O1xuLyoqXG4gKiBHZXQgYSBzaW5nbGUgcGxheWVyIGJhc2VkIG9uIGFuIElEIG9yIERPTSBlbGVtZW50LlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSB3YW50IHRvIGNoZWNrIGlmIGFuIGVsZW1lbnQgb3IgSUQgaGFzIGFuIGFzc29jaWF0ZWRcbiAqIFZpZGVvLmpzIHBsYXllciwgYnV0IG5vdCBjcmVhdGUgb25lIGlmIGl0IGRvZXNuJ3QuXG4gKlxuICogQHBhcmFtICAge3N0cmluZ3xFbGVtZW50fSBpZFxuICogICAgICAgICAgQW4gSFRNTCBlbGVtZW50IC0gYDx2aWRlbz5gLCBgPGF1ZGlvPmAsIG9yIGA8dmlkZW8tanM+YCAtXG4gKiAgICAgICAgICBvciBhIHN0cmluZyBtYXRjaGluZyB0aGUgYGlkYCBvZiBzdWNoIGFuIGVsZW1lbnQuXG4gKlxuICogQHJldHVybiB7UGxheWVyfHVuZGVmaW5lZH1cbiAqICAgICAgICAgIEEgcGxheWVyIGluc3RhbmNlIG9yIGB1bmRlZmluZWRgIGlmIHRoZXJlIGlzIG5vIHBsYXllciBpbnN0YW5jZVxuICogICAgICAgICAgbWF0Y2hpbmcgdGhlIGFyZ3VtZW50LlxuICovXG5cblxudmlkZW9qcyQxLmdldFBsYXllciA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgcGxheWVycyA9IFBsYXllci5wbGF5ZXJzO1xuICB2YXIgdGFnO1xuXG4gIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIG5JZCA9IG5vcm1hbGl6ZUlkKGlkKTtcbiAgICB2YXIgcGxheWVyID0gcGxheWVyc1tuSWRdO1xuXG4gICAgaWYgKHBsYXllcikge1xuICAgICAgcmV0dXJuIHBsYXllcjtcbiAgICB9XG5cbiAgICB0YWcgPSAkKCcjJyArIG5JZCk7XG4gIH0gZWxzZSB7XG4gICAgdGFnID0gaWQ7XG4gIH1cblxuICBpZiAoaXNFbCh0YWcpKSB7XG4gICAgdmFyIF90YWcgPSB0YWcsXG4gICAgICAgIF9wbGF5ZXIgPSBfdGFnLnBsYXllcixcbiAgICAgICAgcGxheWVySWQgPSBfdGFnLnBsYXllcklkOyAvLyBFbGVtZW50IG1heSBoYXZlIGEgYHBsYXllcmAgcHJvcGVydHkgcmVmZXJyaW5nIHRvIGFuIGFscmVhZHkgY3JlYXRlZFxuICAgIC8vIHBsYXllciBpbnN0YW5jZS4gSWYgc28sIHJldHVybiB0aGF0LlxuXG4gICAgaWYgKF9wbGF5ZXIgfHwgcGxheWVyc1twbGF5ZXJJZF0pIHtcbiAgICAgIHJldHVybiBfcGxheWVyIHx8IHBsYXllcnNbcGxheWVySWRdO1xuICAgIH1cbiAgfVxufTtcbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBhbGwgY3VycmVudCBwbGF5ZXJzLlxuICpcbiAqIEByZXR1cm4ge0FycmF5fVxuICogICAgICAgICBBbiBhcnJheSBvZiBhbGwgcGxheWVycy4gVGhlIGFycmF5IHdpbGwgYmUgaW4gdGhlIG9yZGVyIHRoYXRcbiAqICAgICAgICAgYE9iamVjdC5rZXlzYCBwcm92aWRlcywgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgdmFyeSBiZXR3ZWVuXG4gKiAgICAgICAgIEphdmFTY3JpcHQgZW5naW5lcy5cbiAqXG4gKi9cblxuXG52aWRlb2pzJDEuZ2V0QWxsUGxheWVycyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICgvLyBEaXNwb3NlZCBwbGF5ZXJzIGxlYXZlIGEga2V5IHdpdGggYSBgbnVsbGAgdmFsdWUsIHNvIHdlIG5lZWQgdG8gbWFrZSBzdXJlXG4gICAgLy8gd2UgZmlsdGVyIHRob3NlIG91dC5cbiAgICBPYmplY3Qua2V5cyhQbGF5ZXIucGxheWVycykubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgICByZXR1cm4gUGxheWVyLnBsYXllcnNba107XG4gICAgfSkuZmlsdGVyKEJvb2xlYW4pXG4gICk7XG59O1xuXG52aWRlb2pzJDEucGxheWVycyA9IFBsYXllci5wbGF5ZXJzO1xudmlkZW9qcyQxLmdldENvbXBvbmVudCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQ7XG4vKipcbiAqIFJlZ2lzdGVyIGEgY29tcG9uZW50IHNvIGl0IGNhbiByZWZlcnJlZCB0byBieSBuYW1lLiBVc2VkIHdoZW4gYWRkaW5nIHRvIG90aGVyXG4gKiBjb21wb25lbnRzLCBlaXRoZXIgdGhyb3VnaCBhZGRDaGlsZCBgY29tcG9uZW50LmFkZENoaWxkKCdteUNvbXBvbmVudCcpYCBvciB0aHJvdWdoXG4gKiBkZWZhdWx0IGNoaWxkcmVuIG9wdGlvbnMgIGB7IGNoaWxkcmVuOiBbJ215Q29tcG9uZW50J10gfWAuXG4gKlxuICogPiBOT1RFOiBZb3UgY291bGQgYWxzbyBqdXN0IGluaXRpYWxpemUgdGhlIGNvbXBvbmVudCBiZWZvcmUgYWRkaW5nLlxuICogYGNvbXBvbmVudC5hZGRDaGlsZChuZXcgTXlDb21wb25lbnQoKSk7YFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgVGhlIGNsYXNzIG5hbWUgb2YgdGhlIGNvbXBvbmVudFxuICpcbiAqIEBwYXJhbSB7Q29tcG9uZW50fSBjb21wXG4gKiAgICAgICAgVGhlIGNvbXBvbmVudCBjbGFzc1xuICpcbiAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAqICAgICAgICAgVGhlIG5ld2x5IHJlZ2lzdGVyZWQgY29tcG9uZW50XG4gKi9cblxudmlkZW9qcyQxLnJlZ2lzdGVyQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5hbWUsIGNvbXApIHtcbiAgaWYgKFRlY2guaXNUZWNoKGNvbXApKSB7XG4gICAgbG9nLndhcm4oXCJUaGUgXCIgKyBuYW1lICsgXCIgdGVjaCB3YXMgcmVnaXN0ZXJlZCBhcyBhIGNvbXBvbmVudC4gSXQgc2hvdWxkIGluc3RlYWQgYmUgcmVnaXN0ZXJlZCB1c2luZyB2aWRlb2pzLnJlZ2lzdGVyVGVjaChuYW1lLCB0ZWNoKVwiKTtcbiAgfVxuXG4gIENvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudC5jYWxsKENvbXBvbmVudCwgbmFtZSwgY29tcCk7XG59O1xuXG52aWRlb2pzJDEuZ2V0VGVjaCA9IFRlY2guZ2V0VGVjaDtcbnZpZGVvanMkMS5yZWdpc3RlclRlY2ggPSBUZWNoLnJlZ2lzdGVyVGVjaDtcbnZpZGVvanMkMS51c2UgPSB1c2U7XG4vKipcbiAqIEFuIG9iamVjdCB0aGF0IGNhbiBiZSByZXR1cm5lZCBieSBhIG1pZGRsZXdhcmUgdG8gc2lnbmlmeVxuICogdGhhdCB0aGUgbWlkZGxld2FyZSBpcyBiZWluZyB0ZXJtaW5hdGVkLlxuICpcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJvcGVydHkge29iamVjdH0gbWlkZGxld2FyZS5URVJNSU5BVE9SXG4gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHZpZGVvanMkMSwgJ21pZGRsZXdhcmUnLCB7XG4gIHZhbHVlOiB7fSxcbiAgd3JpdGVhYmxlOiBmYWxzZSxcbiAgZW51bWVyYWJsZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkodmlkZW9qcyQxLm1pZGRsZXdhcmUsICdURVJNSU5BVE9SJywge1xuICB2YWx1ZTogVEVSTUlOQVRPUixcbiAgd3JpdGVhYmxlOiBmYWxzZSxcbiAgZW51bWVyYWJsZTogdHJ1ZVxufSk7XG4vKipcbiAqIEEgcmVmZXJlbmNlIHRvIHRoZSB7QGxpbmsgbW9kdWxlOmJyb3dzZXJ8YnJvd3NlciB1dGlsaXR5IG1vZHVsZX0gYXMgYW4gb2JqZWN0LlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc2VlICB7QGxpbmsgbW9kdWxlOmJyb3dzZXJ8YnJvd3Nlcn1cbiAqL1xuXG52aWRlb2pzJDEuYnJvd3NlciA9IGJyb3dzZXI7XG4vKipcbiAqIFVzZSB7QGxpbmsgbW9kdWxlOmJyb3dzZXIuVE9VQ0hfRU5BQkxFRHxicm93c2VyLlRPVUNIX0VOQUJMRUR9IGluc3RlYWQ7IG9ubHlcbiAqIGluY2x1ZGVkIGZvciBiYWNrd2FyZC1jb21wYXRpYmlsaXR5IHdpdGggNC54LlxuICpcbiAqIEBkZXByZWNhdGVkIFNpbmNlIHZlcnNpb24gNS4wLCB1c2Uge0BsaW5rIG1vZHVsZTpicm93c2VyLlRPVUNIX0VOQUJMRUR8YnJvd3Nlci5UT1VDSF9FTkFCTEVEIGluc3RlYWQuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuXG52aWRlb2pzJDEuVE9VQ0hfRU5BQkxFRCA9IFRPVUNIX0VOQUJMRUQ7XG52aWRlb2pzJDEuZXh0ZW5kID0gZXh0ZW5kO1xudmlkZW9qcyQxLm1lcmdlT3B0aW9ucyA9IG1lcmdlT3B0aW9ucztcbnZpZGVvanMkMS5iaW5kID0gYmluZDtcbnZpZGVvanMkMS5yZWdpc3RlclBsdWdpbiA9IFBsdWdpbi5yZWdpc3RlclBsdWdpbjtcbnZpZGVvanMkMS5kZXJlZ2lzdGVyUGx1Z2luID0gUGx1Z2luLmRlcmVnaXN0ZXJQbHVnaW47XG4vKipcbiAqIERlcHJlY2F0ZWQgbWV0aG9kIHRvIHJlZ2lzdGVyIGEgcGx1Z2luIHdpdGggVmlkZW8uanNcbiAqXG4gKiBAZGVwcmVjYXRlZCB2aWRlb2pzLnBsdWdpbigpIGlzIGRlcHJlY2F0ZWQ7IHVzZSB2aWRlb2pzLnJlZ2lzdGVyUGx1Z2luKCkgaW5zdGVhZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiAgICAgICAgVGhlIHBsdWdpbiBuYW1lXG4gKlxuICogQHBhcmFtIHtQbHVnaW58RnVuY3Rpb259IHBsdWdpblxuICogICAgICAgICBUaGUgcGx1Z2luIHN1Yi1jbGFzcyBvciBmdW5jdGlvblxuICovXG5cbnZpZGVvanMkMS5wbHVnaW4gPSBmdW5jdGlvbiAobmFtZSwgcGx1Z2luKSB7XG4gIGxvZy53YXJuKCd2aWRlb2pzLnBsdWdpbigpIGlzIGRlcHJlY2F0ZWQ7IHVzZSB2aWRlb2pzLnJlZ2lzdGVyUGx1Z2luKCkgaW5zdGVhZCcpO1xuICByZXR1cm4gUGx1Z2luLnJlZ2lzdGVyUGx1Z2luKG5hbWUsIHBsdWdpbik7XG59O1xuXG52aWRlb2pzJDEuZ2V0UGx1Z2lucyA9IFBsdWdpbi5nZXRQbHVnaW5zO1xudmlkZW9qcyQxLmdldFBsdWdpbiA9IFBsdWdpbi5nZXRQbHVnaW47XG52aWRlb2pzJDEuZ2V0UGx1Z2luVmVyc2lvbiA9IFBsdWdpbi5nZXRQbHVnaW5WZXJzaW9uO1xuLyoqXG4gKiBBZGRpbmcgbGFuZ3VhZ2VzIHNvIHRoYXQgdGhleSdyZSBhdmFpbGFibGUgdG8gYWxsIHBsYXllcnMuXG4gKiBFeGFtcGxlOiBgdmlkZW9qcy5hZGRMYW5ndWFnZSgnZXMnLCB7ICdIZWxsbyc6ICdIb2xhJyB9KTtgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvZGVcbiAqICAgICAgICBUaGUgbGFuZ3VhZ2UgY29kZSBvciBkaWN0aW9uYXJ5IHByb3BlcnR5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqICAgICAgICBUaGUgZGF0YSB2YWx1ZXMgdG8gYmUgdHJhbnNsYXRlZFxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgVGhlIHJlc3VsdGluZyBsYW5ndWFnZSBkaWN0aW9uYXJ5IG9iamVjdFxuICovXG5cbnZpZGVvanMkMS5hZGRMYW5ndWFnZSA9IGZ1bmN0aW9uIChjb2RlLCBkYXRhKSB7XG4gIHZhciBfbWVyZ2VPcHRpb25zO1xuXG4gIGNvZGUgPSAoJycgKyBjb2RlKS50b0xvd2VyQ2FzZSgpO1xuICB2aWRlb2pzJDEub3B0aW9ucy5sYW5ndWFnZXMgPSBtZXJnZU9wdGlvbnModmlkZW9qcyQxLm9wdGlvbnMubGFuZ3VhZ2VzLCAoX21lcmdlT3B0aW9ucyA9IHt9LCBfbWVyZ2VPcHRpb25zW2NvZGVdID0gZGF0YSwgX21lcmdlT3B0aW9ucykpO1xuICByZXR1cm4gdmlkZW9qcyQxLm9wdGlvbnMubGFuZ3VhZ2VzW2NvZGVdO1xufTtcbi8qKlxuICogQSByZWZlcmVuY2UgdG8gdGhlIHtAbGluayBtb2R1bGU6bG9nfGxvZyB1dGlsaXR5IG1vZHVsZX0gYXMgYW4gb2JqZWN0LlxuICpcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqIEBzZWUgIHtAbGluayBtb2R1bGU6bG9nfGxvZ31cbiAqL1xuXG5cbnZpZGVvanMkMS5sb2cgPSBsb2c7XG52aWRlb2pzJDEuY3JlYXRlTG9nZ2VyID0gY3JlYXRlTG9nZ2VyJDE7XG52aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlID0gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMgPSBjcmVhdGVUaW1lUmFuZ2VzO1xudmlkZW9qcyQxLmZvcm1hdFRpbWUgPSBmb3JtYXRUaW1lO1xudmlkZW9qcyQxLnNldEZvcm1hdFRpbWUgPSBzZXRGb3JtYXRUaW1lO1xudmlkZW9qcyQxLnJlc2V0Rm9ybWF0VGltZSA9IHJlc2V0Rm9ybWF0VGltZTtcbnZpZGVvanMkMS5wYXJzZVVybCA9IHBhcnNlVXJsO1xudmlkZW9qcyQxLmlzQ3Jvc3NPcmlnaW4gPSBpc0Nyb3NzT3JpZ2luO1xudmlkZW9qcyQxLkV2ZW50VGFyZ2V0ID0gRXZlbnRUYXJnZXQ7XG52aWRlb2pzJDEub24gPSBvbjtcbnZpZGVvanMkMS5vbmUgPSBvbmU7XG52aWRlb2pzJDEub2ZmID0gb2ZmO1xudmlkZW9qcyQxLnRyaWdnZXIgPSB0cmlnZ2VyO1xuLyoqXG4gKiBBIGNyb3NzLWJyb3dzZXIgWE1MSHR0cFJlcXVlc3Qgd3JhcHBlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSAgICB7T2JqZWN0fSBvcHRpb25zXG4gKiAgICAgICAgICAgU2V0dGluZ3MgZm9yIHRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm4gICB7WE1MSHR0cFJlcXVlc3R8WERvbWFpblJlcXVlc3R9XG4gKiAgICAgICAgICAgVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICpcbiAqIEBzZWUgICAgICBodHRwczovL2dpdGh1Yi5jb20vUmF5bm9zL3hoclxuICovXG5cbnZpZGVvanMkMS54aHIgPSBYSFI7XG52aWRlb2pzJDEuVGV4dFRyYWNrID0gVGV4dFRyYWNrO1xudmlkZW9qcyQxLkF1ZGlvVHJhY2sgPSBBdWRpb1RyYWNrO1xudmlkZW9qcyQxLlZpZGVvVHJhY2sgPSBWaWRlb1RyYWNrO1xuWydpc0VsJywgJ2lzVGV4dE5vZGUnLCAnY3JlYXRlRWwnLCAnaGFzQ2xhc3MnLCAnYWRkQ2xhc3MnLCAncmVtb3ZlQ2xhc3MnLCAndG9nZ2xlQ2xhc3MnLCAnc2V0QXR0cmlidXRlcycsICdnZXRBdHRyaWJ1dGVzJywgJ2VtcHR5RWwnLCAnYXBwZW5kQ29udGVudCcsICdpbnNlcnRDb250ZW50J10uZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICB2aWRlb2pzJDFba10gPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9nLndhcm4oXCJ2aWRlb2pzLlwiICsgayArIFwiKCkgaXMgZGVwcmVjYXRlZDsgdXNlIHZpZGVvanMuZG9tLlwiICsgayArIFwiKCkgaW5zdGVhZFwiKTtcbiAgICByZXR1cm4gRG9tW2tdLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG59KTtcbnZpZGVvanMkMS5jb21wdXRlZFN0eWxlID0gY29tcHV0ZWRTdHlsZTtcbi8qKlxuICogQSByZWZlcmVuY2UgdG8gdGhlIHtAbGluayBtb2R1bGU6ZG9tfERPTSB1dGlsaXR5IG1vZHVsZX0gYXMgYW4gb2JqZWN0LlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc2VlICB7QGxpbmsgbW9kdWxlOmRvbXxkb219XG4gKi9cblxudmlkZW9qcyQxLmRvbSA9IERvbTtcbi8qKlxuICogQSByZWZlcmVuY2UgdG8gdGhlIHtAbGluayBtb2R1bGU6dXJsfFVSTCB1dGlsaXR5IG1vZHVsZX0gYXMgYW4gb2JqZWN0LlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc2VlICB7QGxpbmsgbW9kdWxlOnVybHx1cmx9XG4gKi9cblxudmlkZW9qcyQxLnVybCA9IFVybDtcbnZpZGVvanMkMS5kZWZpbmVMYXp5UHJvcGVydHkgPSBkZWZpbmVMYXp5UHJvcGVydHk7XG5cbi8qISBAbmFtZSBAdmlkZW9qcy9odHRwLXN0cmVhbWluZyBAdmVyc2lvbiAyLjIuNCBAbGljZW5zZSBBcGFjaGUtMi4wICovXG4vKipcbiAqIEBmaWxlIHJlc29sdmUtdXJsLmpzIC0gSGFuZGxpbmcgaG93IFVSTHMgYXJlIHJlc29sdmVkIGFuZCBtYW5pcHVsYXRlZFxuICovXG5cbnZhciByZXNvbHZlVXJsID0gX3Jlc29sdmVVcmw7XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHhociByZXF1ZXN0IHdhcyByZWRpcmVjdGVkIGFuZCByZXR1cm5zIGNvcnJlY3QgdXJsIGRlcGVuZGluZ1xuICogb24gYGhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzYCBvcHRpb25cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHVybCAtIGFuIHVybCBiZWluZyByZXF1ZXN0ZWRcbiAqIEBwYXJhbSAge1hNTEh0dHBSZXF1ZXN0fSByZXEgLSB4aHIgcmVxdWVzdCByZXN1bHRcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxudmFyIHJlc29sdmVNYW5pZmVzdFJlZGlyZWN0ID0gZnVuY3Rpb24gcmVzb2x2ZU1hbmlmZXN0UmVkaXJlY3QoaGFuZGxlTWFuaWZlc3RSZWRpcmVjdCwgdXJsLCByZXEpIHtcbiAgLy8gVG8gdW5kZXJzdGFuZCBob3cgdGhlIHJlc3BvbnNlVVJMIGJlbG93IGlzIHNldCBhbmQgZ2VuZXJhdGVkOlxuICAvLyAtIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LXJlc3BvbnNlLXVybFxuICAvLyAtIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNhdG9taWMtaHR0cC1yZWRpcmVjdC1oYW5kbGluZ1xuICBpZiAoaGFuZGxlTWFuaWZlc3RSZWRpcmVjdCAmJiByZXEgJiYgcmVxLnJlc3BvbnNlVVJMICYmIHVybCAhPT0gcmVxLnJlc3BvbnNlVVJMKSB7XG4gICAgcmV0dXJuIHJlcS5yZXNwb25zZVVSTDtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuXG52YXIgbG9nJDEgPSB2aWRlb2pzJDEubG9nO1xuXG52YXIgY3JlYXRlUGxheWxpc3RJRCA9IGZ1bmN0aW9uIGNyZWF0ZVBsYXlsaXN0SUQoaW5kZXgsIHVyaSkge1xuICByZXR1cm4gaW5kZXggKyBcIi1cIiArIHVyaTtcbn07XG4vKipcbiAqIFBhcnNlcyBhIGdpdmVuIG0zdTggcGxheWxpc3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RTdHJpbmdcbiAqICAgICAgICBUaGUgZG93bmxvYWRlZCBtYW5pZmVzdCBzdHJpbmdcbiAqIEBwYXJhbSB7T2JqZWN0W119IFtjdXN0b21UYWdQYXJzZXJzXVxuICogICAgICAgIEFuIGFycmF5IG9mIGN1c3RvbSB0YWcgcGFyc2VycyBmb3IgdGhlIG0zdTgtcGFyc2VyIGluc3RhbmNlXG4gKiBAcGFyYW0ge09iamVjdFtdfSBbY3VzdG9tVGFnTWFwcGVyc11cbiAqICAgICAgICAgQW4gYXJyYXkgb2YgY3VzdG9tIHRhZyBtYXBwZXJzIGZvciB0aGUgbTN1OC1wYXJzZXIgaW5zdGFuY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgVGhlIG1hbmlmZXN0IG9iamVjdFxuICovXG5cblxudmFyIHBhcnNlTWFuaWZlc3QgPSBmdW5jdGlvbiBwYXJzZU1hbmlmZXN0KF9yZWYpIHtcbiAgdmFyIG1hbmlmZXN0U3RyaW5nID0gX3JlZi5tYW5pZmVzdFN0cmluZyxcbiAgICAgIF9yZWYkY3VzdG9tVGFnUGFyc2VycyA9IF9yZWYuY3VzdG9tVGFnUGFyc2VycyxcbiAgICAgIGN1c3RvbVRhZ1BhcnNlcnMgPSBfcmVmJGN1c3RvbVRhZ1BhcnNlcnMgPT09IHZvaWQgMCA/IFtdIDogX3JlZiRjdXN0b21UYWdQYXJzZXJzLFxuICAgICAgX3JlZiRjdXN0b21UYWdNYXBwZXJzID0gX3JlZi5jdXN0b21UYWdNYXBwZXJzLFxuICAgICAgY3VzdG9tVGFnTWFwcGVycyA9IF9yZWYkY3VzdG9tVGFnTWFwcGVycyA9PT0gdm9pZCAwID8gW10gOiBfcmVmJGN1c3RvbVRhZ01hcHBlcnM7XG4gIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKCk7XG4gIGN1c3RvbVRhZ1BhcnNlcnMuZm9yRWFjaChmdW5jdGlvbiAoY3VzdG9tUGFyc2VyKSB7XG4gICAgcmV0dXJuIHBhcnNlci5hZGRQYXJzZXIoY3VzdG9tUGFyc2VyKTtcbiAgfSk7XG4gIGN1c3RvbVRhZ01hcHBlcnMuZm9yRWFjaChmdW5jdGlvbiAobWFwcGVyKSB7XG4gICAgcmV0dXJuIHBhcnNlci5hZGRUYWdNYXBwZXIobWFwcGVyKTtcbiAgfSk7XG4gIHBhcnNlci5wdXNoKG1hbmlmZXN0U3RyaW5nKTtcbiAgcGFyc2VyLmVuZCgpO1xuICByZXR1cm4gcGFyc2VyLm1hbmlmZXN0O1xufTtcbi8qKlxuICogTG9vcHMgdGhyb3VnaCBhbGwgc3VwcG9ydGVkIG1lZGlhIGdyb3VwcyBpbiBtYXN0ZXIgYW5kIGNhbGxzIHRoZSBwcm92aWRlZFxuICogY2FsbGJhY2sgZm9yIGVhY2ggZ3JvdXBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWFzdGVyXG4gKiAgICAgICAgVGhlIHBhcnNlZCBtYXN0ZXIgbWFuaWZlc3Qgb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogICAgICAgIENhbGxiYWNrIHRvIGNhbGwgZm9yIGVhY2ggbWVkaWEgZ3JvdXBcbiAqL1xuXG5cbnZhciBmb3JFYWNoTWVkaWFHcm91cCA9IGZ1bmN0aW9uIGZvckVhY2hNZWRpYUdyb3VwKG1hc3RlciwgY2FsbGJhY2spIHtcbiAgWydBVURJTycsICdTVUJUSVRMRVMnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZWRpYVR5cGUpIHtcbiAgICBmb3IgKHZhciBncm91cEtleSBpbiBtYXN0ZXIubWVkaWFHcm91cHNbbWVkaWFUeXBlXSkge1xuICAgICAgZm9yICh2YXIgbGFiZWxLZXkgaW4gbWFzdGVyLm1lZGlhR3JvdXBzW21lZGlhVHlwZV1bZ3JvdXBLZXldKSB7XG4gICAgICAgIHZhciBtZWRpYVByb3BlcnRpZXMgPSBtYXN0ZXIubWVkaWFHcm91cHNbbWVkaWFUeXBlXVtncm91cEtleV1bbGFiZWxLZXldO1xuICAgICAgICBjYWxsYmFjayhtZWRpYVByb3BlcnRpZXMsIG1lZGlhVHlwZSwgZ3JvdXBLZXksIGxhYmVsS2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbi8qKlxuICogQWRkcyBwcm9wZXJ0aWVzIGFuZCBhdHRyaWJ1dGVzIHRvIHRoZSBwbGF5bGlzdCB0byBrZWVwIGNvbnNpc3RlbnQgZnVuY3Rpb25hbGl0eSBmb3JcbiAqIHBsYXlsaXN0cyB0aHJvdWdob3V0IFZIUy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gKiAgICAgICAgQXJndW1lbnRzIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZy5wbGF5bGlzdFxuICogICAgICAgIFRoZSBtZWRpYSBwbGF5bGlzdFxuICogQHBhcmFtIHtzdHJpbmd9IFtjb25maWcudXJpXVxuICogICAgICAgIFRoZSB1cmkgdG8gdGhlIG1lZGlhIHBsYXlsaXN0IChpZiBtZWRpYSBwbGF5bGlzdCBpcyBub3QgZnJvbSB3aXRoaW4gYSBtYXN0ZXJcbiAqICAgICAgICBwbGF5bGlzdClcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogICAgICAgIElEIHRvIHVzZSBmb3IgdGhlIHBsYXlsaXN0XG4gKi9cblxuXG52YXIgc2V0dXBNZWRpYVBsYXlsaXN0ID0gZnVuY3Rpb24gc2V0dXBNZWRpYVBsYXlsaXN0KF9yZWYyKSB7XG4gIHZhciBwbGF5bGlzdCA9IF9yZWYyLnBsYXlsaXN0LFxuICAgICAgdXJpID0gX3JlZjIudXJpLFxuICAgICAgaWQgPSBfcmVmMi5pZDtcbiAgcGxheWxpc3QuaWQgPSBpZDtcblxuICBpZiAodXJpKSB7XG4gICAgLy8gRm9yIG1lZGlhIHBsYXlsaXN0cywgbTN1OC1wYXJzZXIgZG9lcyBub3QgaGF2ZSBhY2Nlc3MgdG8gYSBVUkksIGFzIEhMUyBtZWRpYVxuICAgIC8vIHBsYXlsaXN0cyBkbyBub3QgY29udGFpbiB0aGVpciBvd24gc291cmNlIFVSSSwgYnV0IG9uZSBpcyBuZWVkZWQgZm9yIGNvbnNpc3RlbmN5IGluXG4gICAgLy8gVkhTLlxuICAgIHBsYXlsaXN0LnVyaSA9IHVyaTtcbiAgfSAvLyBGb3IgSExTIG1hc3RlciBwbGF5bGlzdHMsIGV2ZW4gdGhvdWdoIGNlcnRhaW4gYXR0cmlidXRlcyBNVVNUIGJlIGRlZmluZWQsIHRoZVxuICAvLyBzdHJlYW0gbWF5IHN0aWxsIGJlIHBsYXllZCB3aXRob3V0IHRoZW0uXG4gIC8vIEZvciBITFMgbWVkaWEgcGxheWxpc3RzLCBtM3U4LXBhcnNlciBkb2VzIG5vdCBhdHRhY2ggYW4gYXR0cmlidXRlcyBvYmplY3QgdG8gdGhlXG4gIC8vIG1hbmlmZXN0LlxuICAvL1xuICAvLyBUbyBhdm9pZCB1bmRlZmluZWQgcmVmZXJlbmNlIGVycm9ycyB0aHJvdWdoIHRoZSBwcm9qZWN0LCBhbmQgbWFrZSB0aGUgY29kZSBlYXNpZXJcbiAgLy8gdG8gd3JpdGUvcmVhZCwgYWRkIGFuIGVtcHR5IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGVzZSBjYXNlcy5cblxuXG4gIHBsYXlsaXN0LmF0dHJpYnV0ZXMgPSBwbGF5bGlzdC5hdHRyaWJ1dGVzIHx8IHt9O1xufTtcbi8qKlxuICogQWRkcyBJRCwgcmVzb2x2ZWRVcmksIGFuZCBhdHRyaWJ1dGVzIHByb3BlcnRpZXMgdG8gZWFjaCBwbGF5bGlzdCBvZiB0aGUgbWFzdGVyLCB3aGVyZVxuICogbmVjZXNzYXJ5LiBJbiBhZGRpdGlvbiwgY3JlYXRlcyBwbGF5bGlzdCBJRHMgZm9yIGVhY2ggcGxheWxpc3QgYW5kIGFkZHMgcGxheWxpc3QgSUQgdG9cbiAqIHBsYXlsaXN0IHJlZmVyZW5jZXMgdG8gdGhlIHBsYXlsaXN0cyBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWFzdGVyXG4gKiAgICAgICAgVGhlIG1hc3RlciBwbGF5bGlzdFxuICovXG5cblxudmFyIHNldHVwTWVkaWFQbGF5bGlzdHMgPSBmdW5jdGlvbiBzZXR1cE1lZGlhUGxheWxpc3RzKG1hc3Rlcikge1xuICB2YXIgaSA9IG1hc3Rlci5wbGF5bGlzdHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgcGxheWxpc3QgPSBtYXN0ZXIucGxheWxpc3RzW2ldO1xuICAgIHNldHVwTWVkaWFQbGF5bGlzdCh7XG4gICAgICBwbGF5bGlzdDogcGxheWxpc3QsXG4gICAgICBpZDogY3JlYXRlUGxheWxpc3RJRChpLCBwbGF5bGlzdC51cmkpXG4gICAgfSk7XG4gICAgcGxheWxpc3QucmVzb2x2ZWRVcmkgPSByZXNvbHZlVXJsKG1hc3Rlci51cmksIHBsYXlsaXN0LnVyaSk7XG4gICAgbWFzdGVyLnBsYXlsaXN0c1twbGF5bGlzdC5pZF0gPSBwbGF5bGlzdDsgLy8gVVJJIHJlZmVyZW5jZSBhZGRlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblxuICAgIG1hc3Rlci5wbGF5bGlzdHNbcGxheWxpc3QudXJpXSA9IHBsYXlsaXN0OyAvLyBBbHRob3VnaCB0aGUgc3BlYyBzdGF0ZXMgYW4gI0VYVC1YLVNUUkVBTS1JTkYgdGFnIE1VU1QgaGF2ZSBhIEJBTkRXSURUSCBhdHRyaWJ1dGUsXG4gICAgLy8gdGhlIHN0cmVhbSBjYW4gYmUgcGxheWVkIHdpdGhvdXQgaXQuIEFsdGhvdWdoIGFuIGF0dHJpYnV0ZXMgcHJvcGVydHkgbWF5IGhhdmUgYmVlblxuICAgIC8vIGFkZGVkIHRvIHRoZSBwbGF5bGlzdCB0byBwcmV2ZW50IHVuZGVmaW5lZCByZWZlcmVuY2VzLCBpc3N1ZSBhIHdhcm5pbmcgdG8gZml4IHRoZVxuICAgIC8vIG1hbmlmZXN0LlxuXG4gICAgaWYgKCFwbGF5bGlzdC5hdHRyaWJ1dGVzLkJBTkRXSURUSCkge1xuICAgICAgbG9nJDEud2FybignSW52YWxpZCBwbGF5bGlzdCBTVFJFQU0tSU5GIGRldGVjdGVkLiBNaXNzaW5nIEJBTkRXSURUSCBhdHRyaWJ1dGUuJyk7XG4gICAgfVxuICB9XG59O1xuLyoqXG4gKiBBZGRzIHJlc29sdmVkVXJpIHByb3BlcnRpZXMgdG8gZWFjaCBtZWRpYSBncm91cC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWFzdGVyXG4gKiAgICAgICAgVGhlIG1hc3RlciBwbGF5bGlzdFxuICovXG5cblxudmFyIHJlc29sdmVNZWRpYUdyb3VwVXJpcyA9IGZ1bmN0aW9uIHJlc29sdmVNZWRpYUdyb3VwVXJpcyhtYXN0ZXIpIHtcbiAgZm9yRWFjaE1lZGlhR3JvdXAobWFzdGVyLCBmdW5jdGlvbiAocHJvcGVydGllcykge1xuICAgIGlmIChwcm9wZXJ0aWVzLnVyaSkge1xuICAgICAgcHJvcGVydGllcy5yZXNvbHZlZFVyaSA9IHJlc29sdmVVcmwobWFzdGVyLnVyaSwgcHJvcGVydGllcy51cmkpO1xuICAgIH1cbiAgfSk7XG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgbWFzdGVyIHBsYXlsaXN0IHdyYXBwZXIgdG8gaW5zZXJ0IGEgc29sZSBtZWRpYSBwbGF5bGlzdCBpbnRvLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtZWRpYVxuICogICAgICAgIE1lZGlhIHBsYXlsaXN0XG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpXG4gKiAgICAgICAgVGhlIG1lZGlhIFVSSVxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgTWFzdGVyIHBsYXlsaXN0XG4gKi9cblxuXG52YXIgbWFzdGVyRm9yTWVkaWEgPSBmdW5jdGlvbiBtYXN0ZXJGb3JNZWRpYShtZWRpYSwgdXJpKSB7XG4gIHZhciBpZCA9IGNyZWF0ZVBsYXlsaXN0SUQoMCwgdXJpKTtcbiAgdmFyIG1hc3RlciA9IHtcbiAgICBtZWRpYUdyb3Vwczoge1xuICAgICAgJ0FVRElPJzoge30sXG4gICAgICAnVklERU8nOiB7fSxcbiAgICAgICdDTE9TRUQtQ0FQVElPTlMnOiB7fSxcbiAgICAgICdTVUJUSVRMRVMnOiB7fVxuICAgIH0sXG4gICAgdXJpOiB3aW5kb3ckMS5sb2NhdGlvbi5ocmVmLFxuICAgIHJlc29sdmVkVXJpOiB3aW5kb3ckMS5sb2NhdGlvbi5ocmVmLFxuICAgIHBsYXlsaXN0czogW3tcbiAgICAgIHVyaTogdXJpLFxuICAgICAgaWQ6IGlkLFxuICAgICAgcmVzb2x2ZWRVcmk6IHVyaSxcbiAgICAgIC8vIG0zdTgtcGFyc2VyIGRvZXMgbm90IGF0dGFjaCBhbiBhdHRyaWJ1dGVzIHByb3BlcnR5IHRvIG1lZGlhIHBsYXlsaXN0cyBzbyBtYWtlXG4gICAgICAvLyBzdXJlIHRoYXQgdGhlIHByb3BlcnR5IGlzIGF0dGFjaGVkIHRvIGF2b2lkIHVuZGVmaW5lZCByZWZlcmVuY2UgZXJyb3JzXG4gICAgICBhdHRyaWJ1dGVzOiB7fVxuICAgIH1dXG4gIH07IC8vIHNldCB1cCBJRCByZWZlcmVuY2VcblxuICBtYXN0ZXIucGxheWxpc3RzW2lkXSA9IG1hc3Rlci5wbGF5bGlzdHNbMF07IC8vIFVSSSByZWZlcmVuY2UgYWRkZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cbiAgbWFzdGVyLnBsYXlsaXN0c1t1cmldID0gbWFzdGVyLnBsYXlsaXN0c1swXTtcbiAgcmV0dXJuIG1hc3Rlcjtcbn07XG4vKipcbiAqIERvZXMgYW4gaW4tcGxhY2UgdXBkYXRlIG9mIHRoZSBtYXN0ZXIgbWFuaWZlc3QgdG8gYWRkIHVwZGF0ZWQgcGxheWxpc3QgVVJJIHJlZmVyZW5jZXNcbiAqIGFzIHdlbGwgYXMgb3RoZXIgcHJvcGVydGllcyBuZWVkZWQgYnkgVkhTIHRoYXQgYXJlbid0IGluY2x1ZGVkIGJ5IHRoZSBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1hc3RlclxuICogICAgICAgIE1hc3RlciBtYW5pZmVzdCBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmlcbiAqICAgICAgICBUaGUgc291cmNlIFVSSVxuICovXG5cblxudmFyIGFkZFByb3BlcnRpZXNUb01hc3RlciA9IGZ1bmN0aW9uIGFkZFByb3BlcnRpZXNUb01hc3RlcihtYXN0ZXIsIHVyaSkge1xuICBtYXN0ZXIudXJpID0gdXJpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWFzdGVyLnBsYXlsaXN0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmICghbWFzdGVyLnBsYXlsaXN0c1tpXS51cmkpIHtcbiAgICAgIC8vIFNldCB1cCBwaG9ueSBVUklzIGZvciB0aGUgcGxheWxpc3RzIHNpbmNlIHBsYXlsaXN0cyBhcmUgcmVmZXJlbmNlZCBieSB0aGVpciBVUklzXG4gICAgICAvLyB0aHJvdWdob3V0IFZIUywgYnV0IHNvbWUgZm9ybWF0cyAoZS5nLiwgREFTSCkgZG9uJ3QgaGF2ZSBleHRlcm5hbCBVUklzXG4gICAgICAvLyBUT0RPOiBjb25zaWRlciBhZGRpbmcgZHVtbXkgVVJJcyBpbiBtcGQtcGFyc2VyXG4gICAgICB2YXIgcGhvbnlVcmkgPSBcInBsYWNlaG9sZGVyLXVyaS1cIiArIGk7XG4gICAgICBtYXN0ZXIucGxheWxpc3RzW2ldLnVyaSA9IHBob255VXJpO1xuICAgIH1cbiAgfVxuXG4gIGZvckVhY2hNZWRpYUdyb3VwKG1hc3RlciwgZnVuY3Rpb24gKHByb3BlcnRpZXMsIG1lZGlhVHlwZSwgZ3JvdXBLZXksIGxhYmVsS2V5KSB7XG4gICAgaWYgKCFwcm9wZXJ0aWVzLnBsYXlsaXN0cyB8fCAhcHJvcGVydGllcy5wbGF5bGlzdHMubGVuZ3RoIHx8IHByb3BlcnRpZXMucGxheWxpc3RzWzBdLnVyaSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU2V0IHVwIHBob255IFVSSXMgZm9yIHRoZSBtZWRpYSBncm91cCBwbGF5bGlzdHMgc2luY2UgcGxheWxpc3RzIGFyZSByZWZlcmVuY2VkIGJ5XG4gICAgLy8gdGhlaXIgVVJJcyB0aHJvdWdob3V0IFZIUywgYnV0IHNvbWUgZm9ybWF0cyAoZS5nLiwgREFTSCkgZG9uJ3QgaGF2ZSBleHRlcm5hbCBVUklzXG5cblxuICAgIHZhciBwaG9ueVVyaSA9IFwicGxhY2Vob2xkZXItdXJpLVwiICsgbWVkaWFUeXBlICsgXCItXCIgKyBncm91cEtleSArIFwiLVwiICsgbGFiZWxLZXk7XG4gICAgdmFyIGlkID0gY3JlYXRlUGxheWxpc3RJRCgwLCBwaG9ueVVyaSk7XG4gICAgcHJvcGVydGllcy5wbGF5bGlzdHNbMF0udXJpID0gcGhvbnlVcmk7XG4gICAgcHJvcGVydGllcy5wbGF5bGlzdHNbMF0uaWQgPSBpZDsgLy8gc2V0dXAgSUQgYW5kIFVSSSByZWZlcmVuY2VzIChVUkkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5KVxuXG4gICAgbWFzdGVyLnBsYXlsaXN0c1tpZF0gPSBwcm9wZXJ0aWVzLnBsYXlsaXN0c1swXTtcbiAgICBtYXN0ZXIucGxheWxpc3RzW3Bob255VXJpXSA9IHByb3BlcnRpZXMucGxheWxpc3RzWzBdO1xuICB9KTtcbiAgc2V0dXBNZWRpYVBsYXlsaXN0cyhtYXN0ZXIpO1xuICByZXNvbHZlTWVkaWFHcm91cFVyaXMobWFzdGVyKTtcbn07XG5cbnZhciBtZXJnZU9wdGlvbnMkMSA9IHZpZGVvanMkMS5tZXJnZU9wdGlvbnMsXG4gICAgRXZlbnRUYXJnZXQkMSA9IHZpZGVvanMkMS5FdmVudFRhcmdldDtcbi8qKlxuICAqIFJldHVybnMgYSBuZXcgYXJyYXkgb2Ygc2VnbWVudHMgdGhhdCBpcyB0aGUgcmVzdWx0IG9mIG1lcmdpbmdcbiAgKiBwcm9wZXJ0aWVzIGZyb20gYW4gb2xkZXIgbGlzdCBvZiBzZWdtZW50cyBvbnRvIGFuIHVwZGF0ZWRcbiAgKiBsaXN0LiBObyBwcm9wZXJ0aWVzIG9uIHRoZSB1cGRhdGVkIHBsYXlsaXN0IHdpbGwgYmUgb3ZlcnJpZGRlbi5cbiAgKlxuICAqIEBwYXJhbSB7QXJyYXl9IG9yaWdpbmFsIHRoZSBvdXRkYXRlZCBsaXN0IG9mIHNlZ21lbnRzXG4gICogQHBhcmFtIHtBcnJheX0gdXBkYXRlIHRoZSB1cGRhdGVkIGxpc3Qgb2Ygc2VnbWVudHNcbiAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVwZGF0ZVxuICAqIHNlZ21lbnQgaW4gdGhlIG9yaWdpbmFsIHNlZ21lbnQgbGlzdC4gRm9yIG5vbi1saXZlIHBsYXlsaXN0cyxcbiAgKiB0aGlzIHNob3VsZCBhbHdheXMgYmUgemVybyBhbmQgZG9lcyBub3QgbmVlZCB0byBiZVxuICAqIHNwZWNpZmllZC4gRm9yIGxpdmUgcGxheWxpc3RzLCBpdCBzaG91bGQgYmUgdGhlIGRpZmZlcmVuY2VcbiAgKiBiZXR3ZWVuIHRoZSBtZWRpYSBzZXF1ZW5jZSBudW1iZXJzIGluIHRoZSBvcmlnaW5hbCBhbmQgdXBkYXRlZFxuICAqIHBsYXlsaXN0cy5cbiAgKiBAcmV0dXJuIGEgbGlzdCBvZiBtZXJnZWQgc2VnbWVudCBvYmplY3RzXG4gICovXG5cbnZhciB1cGRhdGVTZWdtZW50cyA9IGZ1bmN0aW9uIHVwZGF0ZVNlZ21lbnRzKG9yaWdpbmFsLCB1cGRhdGUsIG9mZnNldCkge1xuICB2YXIgcmVzdWx0ID0gdXBkYXRlLnNsaWNlKCk7XG4gIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4ob3JpZ2luYWwubGVuZ3RoLCB1cGRhdGUubGVuZ3RoICsgb2Zmc2V0KTtcblxuICBmb3IgKHZhciBpID0gb2Zmc2V0OyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaSAtIG9mZnNldF0gPSBtZXJnZU9wdGlvbnMkMShvcmlnaW5hbFtpXSwgcmVzdWx0W2kgLSBvZmZzZXRdKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgcmVzb2x2ZVNlZ21lbnRVcmlzID0gZnVuY3Rpb24gcmVzb2x2ZVNlZ21lbnRVcmlzKHNlZ21lbnQsIGJhc2VVcmkpIHtcbiAgaWYgKCFzZWdtZW50LnJlc29sdmVkVXJpKSB7XG4gICAgc2VnbWVudC5yZXNvbHZlZFVyaSA9IHJlc29sdmVVcmwoYmFzZVVyaSwgc2VnbWVudC51cmkpO1xuICB9XG5cbiAgaWYgKHNlZ21lbnQua2V5ICYmICFzZWdtZW50LmtleS5yZXNvbHZlZFVyaSkge1xuICAgIHNlZ21lbnQua2V5LnJlc29sdmVkVXJpID0gcmVzb2x2ZVVybChiYXNlVXJpLCBzZWdtZW50LmtleS51cmkpO1xuICB9XG5cbiAgaWYgKHNlZ21lbnQubWFwICYmICFzZWdtZW50Lm1hcC5yZXNvbHZlZFVyaSkge1xuICAgIHNlZ21lbnQubWFwLnJlc29sdmVkVXJpID0gcmVzb2x2ZVVybChiYXNlVXJpLCBzZWdtZW50Lm1hcC51cmkpO1xuICB9XG59O1xuLyoqXG4gICogUmV0dXJucyBhIG5ldyBtYXN0ZXIgcGxheWxpc3QgdGhhdCBpcyB0aGUgcmVzdWx0IG9mIG1lcmdpbmcgYW5cbiAgKiB1cGRhdGVkIG1lZGlhIHBsYXlsaXN0IGludG8gdGhlIG9yaWdpbmFsIHZlcnNpb24uIElmIHRoZVxuICAqIHVwZGF0ZWQgbWVkaWEgcGxheWxpc3QgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBwbGF5bGlzdFxuICAqIGVudHJpZXMgaW4gdGhlIG9yaWdpbmFsIG1hc3RlciBwbGF5bGlzdCwgbnVsbCBpcyByZXR1cm5lZC5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBtYXN0ZXIgYSBwYXJzZWQgbWFzdGVyIE0zVTggb2JqZWN0XG4gICogQHBhcmFtIHtPYmplY3R9IG1lZGlhIGEgcGFyc2VkIG1lZGlhIE0zVTggb2JqZWN0XG4gICogQHJldHVybiB7T2JqZWN0fSBhIG5ldyBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBvcmlnaW5hbFxuICAqIG1hc3RlciBwbGF5bGlzdCB3aXRoIHRoZSB1cGRhdGVkIG1lZGlhIHBsYXlsaXN0IG1lcmdlZCBpbiwgb3JcbiAgKiBudWxsIGlmIHRoZSBtZXJnZSBwcm9kdWNlZCBubyBjaGFuZ2UuXG4gICovXG5cblxudmFyIHVwZGF0ZU1hc3RlciA9IGZ1bmN0aW9uIHVwZGF0ZU1hc3RlcihtYXN0ZXIsIG1lZGlhKSB7XG4gIHZhciByZXN1bHQgPSBtZXJnZU9wdGlvbnMkMShtYXN0ZXIsIHt9KTtcbiAgdmFyIHBsYXlsaXN0ID0gcmVzdWx0LnBsYXlsaXN0c1ttZWRpYS5pZF07XG5cbiAgaWYgKCFwbGF5bGlzdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIGNvbnNpZGVyIHRoZSBwbGF5bGlzdCB1bmNoYW5nZWQgaWYgdGhlIG51bWJlciBvZiBzZWdtZW50cyBpcyBlcXVhbCwgdGhlIG1lZGlhXG4gIC8vIHNlcXVlbmNlIG51bWJlciBpcyB1bmNoYW5nZWQsIGFuZCB0aGlzIHBsYXlsaXN0IGhhc24ndCBiZWNvbWUgdGhlIGVuZCBvZiB0aGUgcGxheWxpc3RcblxuXG4gIGlmIChwbGF5bGlzdC5zZWdtZW50cyAmJiBtZWRpYS5zZWdtZW50cyAmJiBwbGF5bGlzdC5zZWdtZW50cy5sZW5ndGggPT09IG1lZGlhLnNlZ21lbnRzLmxlbmd0aCAmJiBwbGF5bGlzdC5lbmRMaXN0ID09PSBtZWRpYS5lbmRMaXN0ICYmIHBsYXlsaXN0Lm1lZGlhU2VxdWVuY2UgPT09IG1lZGlhLm1lZGlhU2VxdWVuY2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtZXJnZWRQbGF5bGlzdCA9IG1lcmdlT3B0aW9ucyQxKHBsYXlsaXN0LCBtZWRpYSk7IC8vIGlmIHRoZSB1cGRhdGUgY291bGQgb3ZlcmxhcCBleGlzdGluZyBzZWdtZW50IGluZm9ybWF0aW9uLCBtZXJnZSB0aGUgdHdvIHNlZ21lbnQgbGlzdHNcblxuICBpZiAocGxheWxpc3Quc2VnbWVudHMpIHtcbiAgICBtZXJnZWRQbGF5bGlzdC5zZWdtZW50cyA9IHVwZGF0ZVNlZ21lbnRzKHBsYXlsaXN0LnNlZ21lbnRzLCBtZWRpYS5zZWdtZW50cywgbWVkaWEubWVkaWFTZXF1ZW5jZSAtIHBsYXlsaXN0Lm1lZGlhU2VxdWVuY2UpO1xuICB9IC8vIHJlc29sdmUgYW55IHNlZ21lbnQgVVJJcyB0byBwcmV2ZW50IHVzIGZyb20gaGF2aW5nIHRvIGRvIGl0IGxhdGVyXG5cblxuICBtZXJnZWRQbGF5bGlzdC5zZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgcmVzb2x2ZVNlZ21lbnRVcmlzKHNlZ21lbnQsIG1lcmdlZFBsYXlsaXN0LnJlc29sdmVkVXJpKTtcbiAgfSk7IC8vIFRPRE8gUmlnaHQgbm93IGluIHRoZSBwbGF5bGlzdHMgYXJyYXkgdGhlcmUgYXJlIHR3byByZWZlcmVuY2VzIHRvIGVhY2ggcGxheWxpc3QsIG9uZVxuICAvLyB0aGF0IGlzIHJlZmVyZW5jZWQgYnkgaW5kZXgsIGFuZCBvbmUgYnkgVVJJLiBUaGUgaW5kZXggcmVmZXJlbmNlIG1heSBubyBsb25nZXIgYmVcbiAgLy8gbmVjZXNzYXJ5LlxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0LnBsYXlsaXN0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXN1bHQucGxheWxpc3RzW2ldLmlkID09PSBtZWRpYS5pZCkge1xuICAgICAgcmVzdWx0LnBsYXlsaXN0c1tpXSA9IG1lcmdlZFBsYXlsaXN0O1xuICAgIH1cbiAgfVxuXG4gIHJlc3VsdC5wbGF5bGlzdHNbbWVkaWEuaWRdID0gbWVyZ2VkUGxheWxpc3Q7IC8vIFVSSSByZWZlcmVuY2UgYWRkZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cbiAgcmVzdWx0LnBsYXlsaXN0c1ttZWRpYS51cmldID0gbWVyZ2VkUGxheWxpc3Q7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSB0aW1lIHRvIHdhaXQgYmVmb3JlIHJlZnJlc2hpbmcgYSBsaXZlIHBsYXlsaXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1lZGlhXG4gKiAgICAgICAgVGhlIGN1cnJlbnQgbWVkaWFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXBkYXRlXG4gKiAgICAgICAgVHJ1ZSBpZiB0aGVyZSB3ZXJlIGFueSB1cGRhdGVzIGZyb20gdGhlIGxhc3QgcmVmcmVzaCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiAgICAgICAgIFRoZSB0aW1lIGluIG1zIHRvIHdhaXQgYmVmb3JlIHJlZnJlc2hpbmcgdGhlIGxpdmUgcGxheWxpc3RcbiAqL1xuXG5cbnZhciByZWZyZXNoRGVsYXkgPSBmdW5jdGlvbiByZWZyZXNoRGVsYXkobWVkaWEsIHVwZGF0ZSkge1xuICB2YXIgbGFzdFNlZ21lbnQgPSBtZWRpYS5zZWdtZW50c1ttZWRpYS5zZWdtZW50cy5sZW5ndGggLSAxXTtcbiAgdmFyIGRlbGF5O1xuXG4gIGlmICh1cGRhdGUgJiYgbGFzdFNlZ21lbnQgJiYgbGFzdFNlZ21lbnQuZHVyYXRpb24pIHtcbiAgICBkZWxheSA9IGxhc3RTZWdtZW50LmR1cmF0aW9uICogMTAwMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgcGxheWxpc3QgaXMgdW5jaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHJlbG9hZCBvciBsYXN0IHNlZ21lbnQgZHVyYXRpb25cbiAgICAvLyBjYW5ub3QgYmUgZGV0ZXJtaW5lZCwgdHJ5IGFnYWluIGFmdGVyIGhhbGYgdGhlIHRhcmdldCBkdXJhdGlvblxuICAgIGRlbGF5ID0gKG1lZGlhLnRhcmdldER1cmF0aW9uIHx8IDEwKSAqIDUwMDtcbiAgfVxuXG4gIHJldHVybiBkZWxheTtcbn07XG4vKipcbiAqIExvYWQgYSBwbGF5bGlzdCBmcm9tIGEgcmVtb3RlIGxvY2F0aW9uXG4gKlxuICogQGNsYXNzIFBsYXlsaXN0TG9hZGVyXG4gKiBAZXh0ZW5kcyBTdHJlYW1cbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gc3JjIHVybCBvciBvYmplY3Qgb2YgbWFuaWZlc3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gd2l0aENyZWRlbnRpYWxzIHRoZSB3aXRoQ3JlZGVudGlhbHMgeGhyIG9wdGlvblxuICogQGNsYXNzXG4gKi9cblxuXG52YXIgUGxheWxpc3RMb2FkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudFRhcmdldCkge1xuICBfaW5oZXJpdHNMb29zZShQbGF5bGlzdExvYWRlciwgX0V2ZW50VGFyZ2V0KTtcblxuICBmdW5jdGlvbiBQbGF5bGlzdExvYWRlcihzcmMsIHZocywgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9FdmVudFRhcmdldC5jYWxsKHRoaXMpIHx8IHRoaXM7XG5cbiAgICBpZiAoIXNyYykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIG5vbi1lbXB0eSBwbGF5bGlzdCBVUkwgb3Igb2JqZWN0IGlzIHJlcXVpcmVkJyk7XG4gICAgfVxuXG4gICAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgICAgX29wdGlvbnMkd2l0aENyZWRlbnRpID0gX29wdGlvbnMud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHMgPSBfb3B0aW9ucyR3aXRoQ3JlZGVudGkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aENyZWRlbnRpLFxuICAgICAgICBfb3B0aW9ucyRoYW5kbGVNYW5pZmUgPSBfb3B0aW9ucy5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyxcbiAgICAgICAgaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHMgPSBfb3B0aW9ucyRoYW5kbGVNYW5pZmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkaGFuZGxlTWFuaWZlO1xuICAgIF90aGlzLnNyYyA9IHNyYztcbiAgICBfdGhpcy52aHNfID0gdmhzO1xuICAgIF90aGlzLndpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscztcbiAgICBfdGhpcy5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyA9IGhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzO1xuICAgIHZhciB2aHNPcHRpb25zID0gdmhzLm9wdGlvbnNfO1xuICAgIF90aGlzLmN1c3RvbVRhZ1BhcnNlcnMgPSB2aHNPcHRpb25zICYmIHZoc09wdGlvbnMuY3VzdG9tVGFnUGFyc2VycyB8fCBbXTtcbiAgICBfdGhpcy5jdXN0b21UYWdNYXBwZXJzID0gdmhzT3B0aW9ucyAmJiB2aHNPcHRpb25zLmN1c3RvbVRhZ01hcHBlcnMgfHwgW107IC8vIGluaXRpYWxpemUgdGhlIGxvYWRlciBzdGF0ZVxuXG4gICAgX3RoaXMuc3RhdGUgPSAnSEFWRV9OT1RISU5HJzsgLy8gbGl2ZSBwbGF5bGlzdCBzdGFsZW5lc3MgdGltZW91dFxuXG4gICAgX3RoaXMub24oJ21lZGlhdXBkYXRldGltZW91dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZSAhPT0gJ0hBVkVfTUVUQURBVEEnKSB7XG4gICAgICAgIC8vIG9ubHkgcmVmcmVzaCB0aGUgbWVkaWEgcGxheWxpc3QgaWYgbm8gb3RoZXIgYWN0aXZpdHkgaXMgZ29pbmcgb25cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zdGF0ZSA9ICdIQVZFX0NVUlJFTlRfTUVUQURBVEEnO1xuICAgICAgX3RoaXMucmVxdWVzdCA9IF90aGlzLnZoc18ueGhyKHtcbiAgICAgICAgdXJpOiByZXNvbHZlVXJsKF90aGlzLm1hc3Rlci51cmksIF90aGlzLm1lZGlhKCkudXJpKSxcbiAgICAgICAgd2l0aENyZWRlbnRpYWxzOiBfdGhpcy53aXRoQ3JlZGVudGlhbHNcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvciwgcmVxKSB7XG4gICAgICAgIC8vIGRpc3Bvc2VkXG4gICAgICAgIGlmICghX3RoaXMucmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5wbGF5bGlzdFJlcXVlc3RFcnJvcihfdGhpcy5yZXF1ZXN0LCBfdGhpcy5tZWRpYSgpLCAnSEFWRV9NRVRBREFUQScpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuaGF2ZU1ldGFkYXRhKHtcbiAgICAgICAgICBwbGF5bGlzdFN0cmluZzogX3RoaXMucmVxdWVzdC5yZXNwb25zZVRleHQsXG4gICAgICAgICAgdXJsOiBfdGhpcy5tZWRpYSgpLnVyaSxcbiAgICAgICAgICBpZDogX3RoaXMubWVkaWEoKS5pZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBsYXlsaXN0TG9hZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucGxheWxpc3RSZXF1ZXN0RXJyb3IgPSBmdW5jdGlvbiBwbGF5bGlzdFJlcXVlc3RFcnJvcih4aHIsIHBsYXlsaXN0LCBzdGFydGluZ1N0YXRlKSB7XG4gICAgdmFyIHVyaSA9IHBsYXlsaXN0LnVyaSxcbiAgICAgICAgaWQgPSBwbGF5bGlzdC5pZDsgLy8gYW55IGluLWZsaWdodCByZXF1ZXN0IGlzIG5vdyBmaW5pc2hlZFxuXG4gICAgdGhpcy5yZXF1ZXN0ID0gbnVsbDtcblxuICAgIGlmIChzdGFydGluZ1N0YXRlKSB7XG4gICAgICB0aGlzLnN0YXRlID0gc3RhcnRpbmdTdGF0ZTtcbiAgICB9XG5cbiAgICB0aGlzLmVycm9yID0ge1xuICAgICAgcGxheWxpc3Q6IHRoaXMubWFzdGVyLnBsYXlsaXN0c1tpZF0sXG4gICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICBtZXNzYWdlOiBcIkhMUyBwbGF5bGlzdCByZXF1ZXN0IGVycm9yIGF0IFVSTDogXCIgKyB1cmkgKyBcIi5cIixcbiAgICAgIHJlc3BvbnNlVGV4dDogeGhyLnJlc3BvbnNlVGV4dCxcbiAgICAgIGNvZGU6IHhoci5zdGF0dXMgPj0gNTAwID8gNCA6IDJcbiAgICB9O1xuICAgIHRoaXMudHJpZ2dlcignZXJyb3InKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBwbGF5bGlzdCBsb2FkZXIncyBzdGF0ZSBpbiByZXNwb25zZSB0byBhIG5ldyBvciB1cGRhdGVkIHBsYXlsaXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3BsYXlsaXN0U3RyaW5nXVxuICAgKiAgICAgICAgUGxheWxpc3Qgc3RyaW5nIChpZiBwbGF5bGlzdE9iamVjdCBpcyBub3QgcHJvdmlkZWQpXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbcGxheWxpc3RPYmplY3RdXG4gICAqICAgICAgICBQbGF5bGlzdCBvYmplY3QgKGlmIHBsYXlsaXN0U3RyaW5nIGlzIG5vdCBwcm92aWRlZClcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiAgICAgICAgVVJMIG9mIHBsYXlsaXN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiAgICAgICAgSUQgdG8gdXNlIGZvciBwbGF5bGlzdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXZlTWV0YWRhdGEgPSBmdW5jdGlvbiBoYXZlTWV0YWRhdGEoX3JlZikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHBsYXlsaXN0U3RyaW5nID0gX3JlZi5wbGF5bGlzdFN0cmluZyxcbiAgICAgICAgcGxheWxpc3RPYmplY3QgPSBfcmVmLnBsYXlsaXN0T2JqZWN0LFxuICAgICAgICB1cmwgPSBfcmVmLnVybCxcbiAgICAgICAgaWQgPSBfcmVmLmlkOyAvLyBhbnkgaW4tZmxpZ2h0IHJlcXVlc3QgaXMgbm93IGZpbmlzaGVkXG5cbiAgICB0aGlzLnJlcXVlc3QgPSBudWxsO1xuICAgIHRoaXMuc3RhdGUgPSAnSEFWRV9NRVRBREFUQSc7XG4gICAgdmFyIHBsYXlsaXN0ID0gcGxheWxpc3RPYmplY3QgfHwgcGFyc2VNYW5pZmVzdCh7XG4gICAgICBtYW5pZmVzdFN0cmluZzogcGxheWxpc3RTdHJpbmcsXG4gICAgICBjdXN0b21UYWdQYXJzZXJzOiB0aGlzLmN1c3RvbVRhZ1BhcnNlcnMsXG4gICAgICBjdXN0b21UYWdNYXBwZXJzOiB0aGlzLmN1c3RvbVRhZ01hcHBlcnNcbiAgICB9KTtcbiAgICBzZXR1cE1lZGlhUGxheWxpc3Qoe1xuICAgICAgcGxheWxpc3Q6IHBsYXlsaXN0LFxuICAgICAgdXJpOiB1cmwsXG4gICAgICBpZDogaWRcbiAgICB9KTsgLy8gbWVyZ2UgdGhpcyBwbGF5bGlzdCBpbnRvIHRoZSBtYXN0ZXJcblxuICAgIHZhciB1cGRhdGUgPSB1cGRhdGVNYXN0ZXIodGhpcy5tYXN0ZXIsIHBsYXlsaXN0KTtcbiAgICB0aGlzLnRhcmdldER1cmF0aW9uID0gcGxheWxpc3QudGFyZ2V0RHVyYXRpb247XG5cbiAgICBpZiAodXBkYXRlKSB7XG4gICAgICB0aGlzLm1hc3RlciA9IHVwZGF0ZTtcbiAgICAgIHRoaXMubWVkaWFfID0gdGhpcy5tYXN0ZXIucGxheWxpc3RzW2lkXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmlnZ2VyKCdwbGF5bGlzdHVuY2hhbmdlZCcpO1xuICAgIH0gLy8gcmVmcmVzaCBsaXZlIHBsYXlsaXN0cyBhZnRlciBhIHRhcmdldCBkdXJhdGlvbiBwYXNzZXNcblxuXG4gICAgaWYgKCF0aGlzLm1lZGlhKCkuZW5kTGlzdCkge1xuICAgICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMubWVkaWFVcGRhdGVUaW1lb3V0KTtcbiAgICAgIHRoaXMubWVkaWFVcGRhdGVUaW1lb3V0ID0gd2luZG93JDEuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdtZWRpYXVwZGF0ZXRpbWVvdXQnKTtcbiAgICAgIH0sIHJlZnJlc2hEZWxheSh0aGlzLm1lZGlhKCksICEhdXBkYXRlKSk7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRwbGF5bGlzdCcpO1xuICB9XG4gIC8qKlxuICAgICogQWJvcnQgYW55IG91dHN0YW5kaW5nIHdvcmsgYW5kIGNsZWFuIHVwLlxuICAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdkaXNwb3NlJyk7XG4gICAgdGhpcy5zdG9wUmVxdWVzdCgpO1xuICAgIHdpbmRvdyQxLmNsZWFyVGltZW91dCh0aGlzLm1lZGlhVXBkYXRlVGltZW91dCk7XG4gICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMuZmluYWxSZW5kaXRpb25UaW1lb3V0KTtcbiAgICB0aGlzLm9mZigpO1xuICB9O1xuXG4gIF9wcm90by5zdG9wUmVxdWVzdCA9IGZ1bmN0aW9uIHN0b3BSZXF1ZXN0KCkge1xuICAgIGlmICh0aGlzLnJlcXVlc3QpIHtcbiAgICAgIHZhciBvbGRSZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0O1xuICAgICAgdGhpcy5yZXF1ZXN0ID0gbnVsbDtcbiAgICAgIG9sZFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgIG9sZFJlcXVlc3QuYWJvcnQoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAgKiBXaGVuIGNhbGxlZCB3aXRob3V0IGFueSBhcmd1bWVudHMsIHJldHVybnMgdGhlIGN1cnJlbnRseVxuICAgICogYWN0aXZlIG1lZGlhIHBsYXlsaXN0LiBXaGVuIGNhbGxlZCB3aXRoIGEgc2luZ2xlIGFyZ3VtZW50LFxuICAgICogdHJpZ2dlcnMgdGhlIHBsYXlsaXN0IGxvYWRlciB0byBhc3luY2hyb25vdXNseSBzd2l0Y2ggdG8gdGhlXG4gICAgKiBzcGVjaWZpZWQgbWVkaWEgcGxheWxpc3QuIENhbGxpbmcgdGhpcyBtZXRob2Qgd2hpbGUgdGhlXG4gICAgKiBsb2FkZXIgaXMgaW4gdGhlIEhBVkVfTk9USElORyBjYXVzZXMgYW4gZXJyb3IgdG8gYmUgZW1pdHRlZFxuICAgICogYnV0IG90aGVyd2lzZSBoYXMgbm8gZWZmZWN0LlxuICAgICpcbiAgICAqIEBwYXJhbSB7T2JqZWN0PX0gcGxheWxpc3QgdGhlIHBhcnNlZCBtZWRpYSBwbGF5bGlzdFxuICAgICogb2JqZWN0IHRvIHN3aXRjaCB0b1xuICAgICogQHBhcmFtIHtib29sZWFuPX0gaXMgdGhpcyB0aGUgbGFzdCBhdmFpbGFibGUgcGxheWxpc3RcbiAgICAqXG4gICAgKiBAcmV0dXJuIHtQbGF5bGlzdH0gdGhlIGN1cnJlbnQgbG9hZGVkIG1lZGlhXG4gICAgKi9cbiAgO1xuXG4gIF9wcm90by5tZWRpYSA9IGZ1bmN0aW9uIG1lZGlhKHBsYXlsaXN0LCBpc0ZpbmFsUmVuZGl0aW9uKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7IC8vIGdldHRlclxuXG5cbiAgICBpZiAoIXBsYXlsaXN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5tZWRpYV87XG4gICAgfSAvLyBzZXR0ZXJcblxuXG4gICAgaWYgKHRoaXMuc3RhdGUgPT09ICdIQVZFX05PVEhJTkcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzd2l0Y2ggbWVkaWEgcGxheWxpc3QgZnJvbSAnICsgdGhpcy5zdGF0ZSk7XG4gICAgfSAvLyBmaW5kIHRoZSBwbGF5bGlzdCBvYmplY3QgaWYgdGhlIHRhcmdldCBwbGF5bGlzdCBoYXMgYmVlblxuICAgIC8vIHNwZWNpZmllZCBieSBVUklcblxuXG4gICAgaWYgKHR5cGVvZiBwbGF5bGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICghdGhpcy5tYXN0ZXIucGxheWxpc3RzW3BsYXlsaXN0XSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcGxheWxpc3QgVVJJOiAnICsgcGxheWxpc3QpO1xuICAgICAgfVxuXG4gICAgICBwbGF5bGlzdCA9IHRoaXMubWFzdGVyLnBsYXlsaXN0c1twbGF5bGlzdF07XG4gICAgfVxuXG4gICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMuZmluYWxSZW5kaXRpb25UaW1lb3V0KTtcblxuICAgIGlmIChpc0ZpbmFsUmVuZGl0aW9uKSB7XG4gICAgICB2YXIgZGVsYXkgPSBwbGF5bGlzdC50YXJnZXREdXJhdGlvbiAvIDIgKiAxMDAwIHx8IDUgKiAxMDAwO1xuICAgICAgdGhpcy5maW5hbFJlbmRpdGlvblRpbWVvdXQgPSB3aW5kb3ckMS5zZXRUaW1lb3V0KHRoaXMubWVkaWEuYmluZCh0aGlzLCBwbGF5bGlzdCwgZmFsc2UpLCBkZWxheSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0aW5nU3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHZhciBtZWRpYUNoYW5nZSA9ICF0aGlzLm1lZGlhXyB8fCBwbGF5bGlzdC5pZCAhPT0gdGhpcy5tZWRpYV8uaWQ7IC8vIHN3aXRjaCB0byBmdWxseSBsb2FkZWQgcGxheWxpc3RzIGltbWVkaWF0ZWx5XG5cbiAgICBpZiAodGhpcy5tYXN0ZXIucGxheWxpc3RzW3BsYXlsaXN0LmlkXS5lbmRMaXN0IHx8IC8vIGhhbmRsZSB0aGUgY2FzZSBvZiBhIHBsYXlsaXN0IG9iamVjdCAoZS5nLiwgaWYgdXNpbmcgdmhzLWpzb24gd2l0aCBhIHJlc29sdmVkXG4gICAgLy8gbWVkaWEgcGxheWxpc3Qgb3IsIGZvciB0aGUgY2FzZSBvZiBkZW11eGVkIGF1ZGlvLCBhIHJlc29sdmVkIGF1ZGlvIG1lZGlhIGdyb3VwKVxuICAgIHBsYXlsaXN0LmVuZExpc3QgJiYgcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBhYm9ydCBvdXRzdGFuZGluZyBwbGF5bGlzdCByZXF1ZXN0c1xuICAgICAgaWYgKHRoaXMucmVxdWVzdCkge1xuICAgICAgICB0aGlzLnJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHRoaXMucmVxdWVzdCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhdGUgPSAnSEFWRV9NRVRBREFUQSc7XG4gICAgICB0aGlzLm1lZGlhXyA9IHBsYXlsaXN0OyAvLyB0cmlnZ2VyIG1lZGlhIGNoYW5nZSBpZiB0aGUgYWN0aXZlIG1lZGlhIGhhcyBiZWVuIHVwZGF0ZWRcblxuICAgICAgaWYgKG1lZGlhQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignbWVkaWFjaGFuZ2luZycpO1xuXG4gICAgICAgIGlmIChzdGFydGluZ1N0YXRlID09PSAnSEFWRV9NQVNURVInKSB7XG4gICAgICAgICAgLy8gVGhlIGluaXRpYWwgcGxheWxpc3Qgd2FzIGEgbWFzdGVyIG1hbmlmZXN0LCBhbmQgdGhlIGZpcnN0IG1lZGlhIHNlbGVjdGVkIHdhc1xuICAgICAgICAgIC8vIGFsc28gcHJvdmlkZWQgKGluIHRoZSBmb3JtIG9mIGEgcmVzb2x2ZWQgcGxheWxpc3Qgb2JqZWN0KSBhcyBwYXJ0IG9mIHRoZVxuICAgICAgICAgIC8vIHNvdXJjZSBvYmplY3QgKHJhdGhlciB0aGFuIGp1c3QgYSBVUkwpLiBUaGVyZWZvcmUsIHNpbmNlIHRoZSBtZWRpYSBwbGF5bGlzdFxuICAgICAgICAgIC8vIGRvZXNuJ3QgbmVlZCB0byBiZSByZXF1ZXN0ZWQsIGxvYWRlZG1ldGFkYXRhIHdvbid0IHRyaWdnZXIgYXMgcGFydCBvZiB0aGVcbiAgICAgICAgICAvLyBub3JtYWwgZmxvdywgYW5kIG5lZWRzIGFuIGV4cGxpY2l0IHRyaWdnZXIgaGVyZS5cbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2xvYWRlZG1ldGFkYXRhJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdtZWRpYWNoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHN3aXRjaGluZyB0byB0aGUgYWN0aXZlIHBsYXlsaXN0IGlzIGEgbm8tb3BcblxuXG4gICAgaWYgKCFtZWRpYUNoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSAnU1dJVENISU5HX01FRElBJzsgLy8gdGhlcmUgaXMgYWxyZWFkeSBhbiBvdXRzdGFuZGluZyBwbGF5bGlzdCByZXF1ZXN0XG5cbiAgICBpZiAodGhpcy5yZXF1ZXN0KSB7XG4gICAgICBpZiAocGxheWxpc3QucmVzb2x2ZWRVcmkgPT09IHRoaXMucmVxdWVzdC51cmwpIHtcbiAgICAgICAgLy8gcmVxdWVzdGluZyB0byBzd2l0Y2ggdG8gdGhlIHNhbWUgcGxheWxpc3QgbXVsdGlwbGUgdGltZXNcbiAgICAgICAgLy8gaGFzIG5vIGVmZmVjdCBhZnRlciB0aGUgZmlyc3RcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgIHRoaXMucmVxdWVzdC5hYm9ydCgpO1xuICAgICAgdGhpcy5yZXF1ZXN0ID0gbnVsbDtcbiAgICB9IC8vIHJlcXVlc3QgdGhlIG5ldyBwbGF5bGlzdFxuXG5cbiAgICBpZiAodGhpcy5tZWRpYV8pIHtcbiAgICAgIHRoaXMudHJpZ2dlcignbWVkaWFjaGFuZ2luZycpO1xuICAgIH1cblxuICAgIHRoaXMucmVxdWVzdCA9IHRoaXMudmhzXy54aHIoe1xuICAgICAgdXJpOiBwbGF5bGlzdC5yZXNvbHZlZFVyaSxcbiAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy53aXRoQ3JlZGVudGlhbHNcbiAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIHJlcSkge1xuICAgICAgLy8gZGlzcG9zZWRcbiAgICAgIGlmICghX3RoaXMzLnJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwbGF5bGlzdC5yZXNvbHZlZFVyaSA9IHJlc29sdmVNYW5pZmVzdFJlZGlyZWN0KF90aGlzMy5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0cywgcGxheWxpc3QucmVzb2x2ZWRVcmksIHJlcSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXR1cm4gX3RoaXMzLnBsYXlsaXN0UmVxdWVzdEVycm9yKF90aGlzMy5yZXF1ZXN0LCBwbGF5bGlzdCwgc3RhcnRpbmdTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzMy5oYXZlTWV0YWRhdGEoe1xuICAgICAgICBwbGF5bGlzdFN0cmluZzogcmVxLnJlc3BvbnNlVGV4dCxcbiAgICAgICAgdXJsOiBwbGF5bGlzdC51cmksXG4gICAgICAgIGlkOiBwbGF5bGlzdC5pZFxuICAgICAgfSk7IC8vIGZpcmUgbG9hZGVkbWV0YWRhdGEgdGhlIGZpcnN0IHRpbWUgYSBtZWRpYSBwbGF5bGlzdCBpcyBsb2FkZWRcblxuXG4gICAgICBpZiAoc3RhcnRpbmdTdGF0ZSA9PT0gJ0hBVkVfTUFTVEVSJykge1xuICAgICAgICBfdGhpczMudHJpZ2dlcignbG9hZGVkbWV0YWRhdGEnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzMy50cmlnZ2VyKCdtZWRpYWNoYW5nZScpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBwYXVzZSBsb2FkaW5nIG9mIHRoZSBwbGF5bGlzdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIHRoaXMuc3RvcFJlcXVlc3QoKTtcbiAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5tZWRpYVVwZGF0ZVRpbWVvdXQpO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUgPT09ICdIQVZFX05PVEhJTkcnKSB7XG4gICAgICAvLyBJZiB3ZSBwYXVzZSB0aGUgbG9hZGVyIGJlZm9yZSBhbnkgZGF0YSBoYXMgYmVlbiByZXRyaWV2ZWQsIGl0cyBhcyBpZiB3ZSBuZXZlclxuICAgICAgLy8gc3RhcnRlZCwgc28gcmVzZXQgdG8gYW4gdW5zdGFydGVkIHN0YXRlLlxuICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgfSAvLyBOZWVkIHRvIHJlc3RvcmUgc3RhdGUgbm93IHRoYXQgbm8gYWN0aXZpdHkgaXMgaGFwcGVuaW5nXG5cblxuICAgIGlmICh0aGlzLnN0YXRlID09PSAnU1dJVENISU5HX01FRElBJykge1xuICAgICAgLy8gaWYgdGhlIGxvYWRlciB3YXMgaW4gdGhlIHByb2Nlc3Mgb2Ygc3dpdGNoaW5nIG1lZGlhLCBpdCBzaG91bGQgZWl0aGVyIHJldHVybiB0b1xuICAgICAgLy8gSEFWRV9NQVNURVIgb3IgSEFWRV9NRVRBREFUQSBkZXBlbmRpbmcgb24gaWYgdGhlIGxvYWRlciBoYXMgbG9hZGVkIGEgbWVkaWFcbiAgICAgIC8vIHBsYXlsaXN0IHlldC4gVGhpcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBleGlzdGVuY2Ugb2YgbG9hZGVyLm1lZGlhX1xuICAgICAgaWYgKHRoaXMubWVkaWFfKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAnSEFWRV9NRVRBREFUQSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXRlID0gJ0hBVkVfTUFTVEVSJztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09ICdIQVZFX0NVUlJFTlRfTUVUQURBVEEnKSB7XG4gICAgICB0aGlzLnN0YXRlID0gJ0hBVkVfTUVUQURBVEEnO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogc3RhcnQgbG9hZGluZyBvZiB0aGUgcGxheWxpc3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8ubG9hZCA9IGZ1bmN0aW9uIGxvYWQoaXNGaW5hbFJlbmRpdGlvbikge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMubWVkaWFVcGRhdGVUaW1lb3V0KTtcbiAgICB2YXIgbWVkaWEgPSB0aGlzLm1lZGlhKCk7XG5cbiAgICBpZiAoaXNGaW5hbFJlbmRpdGlvbikge1xuICAgICAgdmFyIGRlbGF5ID0gbWVkaWEgPyBtZWRpYS50YXJnZXREdXJhdGlvbiAvIDIgKiAxMDAwIDogNSAqIDEwMDA7XG4gICAgICB0aGlzLm1lZGlhVXBkYXRlVGltZW91dCA9IHdpbmRvdyQxLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM0LmxvYWQoKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3RhcnRlZCkge1xuICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChtZWRpYSAmJiAhbWVkaWEuZW5kTGlzdCkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdtZWRpYXVwZGF0ZXRpbWVvdXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRwbGF5bGlzdCcpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogc3RhcnQgbG9hZGluZyBvZiB0aGUgcGxheWxpc3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3RhcnQgPSBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIHRoaXMuc3JjID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgYW4gZW50aXJlbHkgY29uc3RydWN0ZWQgbWFuaWZlc3Qgb2JqZWN0IChtZWFuaW5nIHRoZXJlJ3Mgbm8gYWN0dWFsXG4gICAgICAvLyBtYW5pZmVzdCBvbiBhIHNlcnZlciksIGRlZmF1bHQgdGhlIHVyaSB0byB0aGUgcGFnZSdzIGhyZWZcbiAgICAgIGlmICghdGhpcy5zcmMudXJpKSB7XG4gICAgICAgIHRoaXMuc3JjLnVyaSA9IHdpbmRvdyQxLmxvY2F0aW9uLmhyZWY7XG4gICAgICB9IC8vIHJlc29sdmVkVXJpIGlzIGFkZGVkIG9uIGludGVybmFsbHkgYWZ0ZXIgdGhlIGluaXRpYWwgcmVxdWVzdC4gU2luY2UgdGhlcmUncyBub1xuICAgICAgLy8gcmVxdWVzdCBmb3IgcHJlLXJlc29sdmVkIG1hbmlmZXN0cywgYWRkIG9uIHJlc29sdmVkVXJpIGhlcmUuXG5cblxuICAgICAgdGhpcy5zcmMucmVzb2x2ZWRVcmkgPSB0aGlzLnNyYy51cmk7IC8vIFNpbmNlIGEgbWFuaWZlc3Qgb2JqZWN0IHdhcyBwYXNzZWQgaW4gYXMgdGhlIHNvdXJjZSAoaW5zdGVhZCBvZiBhIFVSTCksIHRoZSBmaXJzdFxuICAgICAgLy8gcmVxdWVzdCBjYW4gYmUgc2tpcHBlZCAoc2luY2UgdGhlIHRvcCBsZXZlbCBvZiB0aGUgbWFuaWZlc3QsIGF0IGEgbWluaW11bSwgaXNcbiAgICAgIC8vIGFscmVhZHkgYXZhaWxhYmxlIGFzIGEgcGFyc2VkIG1hbmlmZXN0IG9iamVjdCkuIEhvd2V2ZXIsIGlmIHRoZSBtYW5pZmVzdCBvYmplY3RcbiAgICAgIC8vIHJlcHJlc2VudHMgYSBtYXN0ZXIgcGxheWxpc3QsIHNvbWUgbWVkaWEgcGxheWxpc3RzIG1heSBuZWVkIHRvIGJlIHJlc29sdmVkIGJlZm9yZVxuICAgICAgLy8gdGhlIHN0YXJ0aW5nIHNlZ21lbnQgbGlzdCBpcyBhdmFpbGFibGUuIFRoZXJlZm9yZSwgZ28gZGlyZWN0bHkgdG8gc2V0dXAgb2YgdGhlXG4gICAgICAvLyBpbml0aWFsIHBsYXlsaXN0LCBhbmQgbGV0IHRoZSBub3JtYWwgZmxvdyBjb250aW51ZSBmcm9tIHRoZXJlLlxuICAgICAgLy9cbiAgICAgIC8vIE5vdGUgdGhhdCB0aGUgY2FsbCB0byBzZXR1cCBpcyBhc3luY2hyb25vdXMsIGFzIG90aGVyIHNlY3Rpb25zIG9mIFZIUyBtYXkgYXNzdW1lXG4gICAgICAvLyB0aGF0IHRoZSBmaXJzdCByZXF1ZXN0IGlzIGFzeW5jaHJvbm91cy5cblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzNS5zZXR1cEluaXRpYWxQbGF5bGlzdChfdGhpczUuc3JjKTtcbiAgICAgIH0sIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gcmVxdWVzdCB0aGUgc3BlY2lmaWVkIFVSTFxuXG5cbiAgICB0aGlzLnJlcXVlc3QgPSB0aGlzLnZoc18ueGhyKHtcbiAgICAgIHVyaTogdGhpcy5zcmMsXG4gICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzXG4gICAgfSwgZnVuY3Rpb24gKGVycm9yLCByZXEpIHtcbiAgICAgIC8vIGRpc3Bvc2VkXG4gICAgICBpZiAoIV90aGlzNS5yZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gY2xlYXIgdGhlIGxvYWRlcidzIHJlcXVlc3QgcmVmZXJlbmNlXG5cblxuICAgICAgX3RoaXM1LnJlcXVlc3QgPSBudWxsO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgX3RoaXM1LmVycm9yID0ge1xuICAgICAgICAgIHN0YXR1czogcmVxLnN0YXR1cyxcbiAgICAgICAgICBtZXNzYWdlOiBcIkhMUyBwbGF5bGlzdCByZXF1ZXN0IGVycm9yIGF0IFVSTDogXCIgKyBfdGhpczUuc3JjICsgXCIuXCIsXG4gICAgICAgICAgcmVzcG9uc2VUZXh0OiByZXEucmVzcG9uc2VUZXh0LFxuICAgICAgICAgIC8vIE1FRElBX0VSUl9ORVRXT1JLXG4gICAgICAgICAgY29kZTogMlxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChfdGhpczUuc3RhdGUgPT09ICdIQVZFX05PVEhJTkcnKSB7XG4gICAgICAgICAgX3RoaXM1LnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfdGhpczUudHJpZ2dlcignZXJyb3InKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXM1LnNyYyA9IHJlc29sdmVNYW5pZmVzdFJlZGlyZWN0KF90aGlzNS5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0cywgX3RoaXM1LnNyYywgcmVxKTtcbiAgICAgIHZhciBtYW5pZmVzdCA9IHBhcnNlTWFuaWZlc3Qoe1xuICAgICAgICBtYW5pZmVzdFN0cmluZzogcmVxLnJlc3BvbnNlVGV4dCxcbiAgICAgICAgY3VzdG9tVGFnUGFyc2VyczogX3RoaXM1LmN1c3RvbVRhZ1BhcnNlcnMsXG4gICAgICAgIGN1c3RvbVRhZ01hcHBlcnM6IF90aGlzNS5jdXN0b21UYWdNYXBwZXJzXG4gICAgICB9KTtcblxuICAgICAgX3RoaXM1LnNldHVwSW5pdGlhbFBsYXlsaXN0KG1hbmlmZXN0KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uc3JjVXJpID0gZnVuY3Rpb24gc3JjVXJpKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5zcmMgPT09ICdzdHJpbmcnID8gdGhpcy5zcmMgOiB0aGlzLnNyYy51cmk7XG4gIH1cbiAgLyoqXG4gICAqIEdpdmVuIGEgbWFuaWZlc3Qgb2JqZWN0IHRoYXQncyBlaXRoZXIgYSBtYXN0ZXIgb3IgbWVkaWEgcGxheWxpc3QsIHRyaWdnZXIgdGhlIHByb3BlclxuICAgKiBldmVudHMgYW5kIHNldCB0aGUgc3RhdGUgb2YgdGhlIHBsYXlsaXN0IGxvYWRlci5cbiAgICpcbiAgICogSWYgdGhlIG1hbmlmZXN0IG9iamVjdCByZXByZXNlbnRzIGEgbWFzdGVyIHBsYXlsaXN0LCBgbG9hZGVkcGxheWxpc3RgIHdpbGwgYmVcbiAgICogdHJpZ2dlcmVkIHRvIGFsbG93IGxpc3RlbmVycyB0byBzZWxlY3QgYSBwbGF5bGlzdC4gSWYgbm9uZSBpcyBzZWxlY3RlZCwgdGhlIGxvYWRlclxuICAgKiB3aWxsIGRlZmF1bHQgdG8gdGhlIGZpcnN0IG9uZSBpbiB0aGUgcGxheWxpc3RzIGFycmF5LlxuICAgKlxuICAgKiBJZiB0aGUgbWFuaWZlc3Qgb2JqZWN0IHJlcHJlc2VudHMgYSBtZWRpYSBwbGF5bGlzdCwgYGxvYWRlZHBsYXlsaXN0YCB3aWxsIGJlXG4gICAqIHRyaWdnZXJlZCBmb2xsb3dlZCBieSBgbG9hZGVkbWV0YWRhdGFgLCBhcyB0aGUgb25seSBhdmFpbGFibGUgcGxheWxpc3QgaXMgbG9hZGVkLlxuICAgKlxuICAgKiBJbiB0aGUgY2FzZSBvZiBhIG1lZGlhIHBsYXlsaXN0LCBhIG1hc3RlciBwbGF5bGlzdCBvYmplY3Qgd3JhcHBlciB3aXRoIG9uZSBwbGF5bGlzdFxuICAgKiB3aWxsIGJlIGNyZWF0ZWQgc28gdGhhdCBhbGwgbG9naWMgY2FuIGhhbmRsZSBwbGF5bGlzdHMgaW4gdGhlIHNhbWUgZmFzaGlvbiAoYXMgYW5cbiAgICogYXNzdW1lZCBtYW5pZmVzdCBvYmplY3Qgc2NoZW1hKS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hbmlmZXN0XG4gICAqICAgICAgICBUaGUgcGFyc2VkIG1hbmlmZXN0IG9iamVjdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXR1cEluaXRpYWxQbGF5bGlzdCA9IGZ1bmN0aW9uIHNldHVwSW5pdGlhbFBsYXlsaXN0KG1hbmlmZXN0KSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdIQVZFX01BU1RFUic7XG5cbiAgICBpZiAobWFuaWZlc3QucGxheWxpc3RzKSB7XG4gICAgICB0aGlzLm1hc3RlciA9IG1hbmlmZXN0O1xuICAgICAgYWRkUHJvcGVydGllc1RvTWFzdGVyKHRoaXMubWFzdGVyLCB0aGlzLnNyY1VyaSgpKTsgLy8gSWYgdGhlIGluaXRpYWwgbWFzdGVyIHBsYXlsaXN0IGhhcyBwbGF5bGlzdHMgd3RpaCBzZWdtZW50cyBhbHJlYWR5IHJlc29sdmVkLFxuICAgICAgLy8gdGhlbiByZXNvbHZlIFVSSXMgaW4gYWR2YW5jZSwgYXMgdGhleSBhcmUgdXN1YWxseSBkb25lIGFmdGVyIGEgcGxheWxpc3QgcmVxdWVzdCxcbiAgICAgIC8vIHdoaWNoIG1heSBub3QgaGFwcGVuIGlmIHRoZSBwbGF5bGlzdCBpcyByZXNvbHZlZC5cblxuICAgICAgbWFuaWZlc3QucGxheWxpc3RzLmZvckVhY2goZnVuY3Rpb24gKHBsYXlsaXN0KSB7XG4gICAgICAgIGlmIChwbGF5bGlzdC5zZWdtZW50cykge1xuICAgICAgICAgIHBsYXlsaXN0LnNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgICAgICAgICAgIHJlc29sdmVTZWdtZW50VXJpcyhzZWdtZW50LCBwbGF5bGlzdC5yZXNvbHZlZFVyaSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRwbGF5bGlzdCcpO1xuXG4gICAgICBpZiAoIXRoaXMucmVxdWVzdCkge1xuICAgICAgICAvLyBubyBtZWRpYSBwbGF5bGlzdCB3YXMgc3BlY2lmaWNhbGx5IHNlbGVjdGVkIHNvIHN0YXJ0XG4gICAgICAgIC8vIGZyb20gdGhlIGZpcnN0IGxpc3RlZCBvbmVcbiAgICAgICAgdGhpcy5tZWRpYSh0aGlzLm1hc3Rlci5wbGF5bGlzdHNbMF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJbiBvcmRlciB0byBzdXBwb3J0IG1lZGlhIHBsYXlsaXN0cyBwYXNzZWQgaW4gYXMgdmhzLWpzb24sIHRoZSBjYXNlIHdoZXJlIHRoZSB1cmlcbiAgICAvLyBpcyBub3QgcHJvdmlkZWQgYXMgcGFydCBvZiB0aGUgbWFuaWZlc3Qgc2hvdWxkIGJlIGNvbnNpZGVyZWQsIGFuZCBhbiBhcHByb3ByaWF0ZVxuICAgIC8vIGRlZmF1bHQgdXNlZC5cblxuXG4gICAgdmFyIHVyaSA9IHRoaXMuc3JjVXJpKCkgfHwgd2luZG93JDEubG9jYXRpb24uaHJlZjtcbiAgICB0aGlzLm1hc3RlciA9IG1hc3RlckZvck1lZGlhKG1hbmlmZXN0LCB1cmkpO1xuICAgIHRoaXMuaGF2ZU1ldGFkYXRhKHtcbiAgICAgIHBsYXlsaXN0T2JqZWN0OiBtYW5pZmVzdCxcbiAgICAgIHVybDogdXJpLFxuICAgICAgaWQ6IHRoaXMubWFzdGVyLnBsYXlsaXN0c1swXS5pZFxuICAgIH0pO1xuICAgIHRoaXMudHJpZ2dlcignbG9hZGVkbWV0YWRhdGEnKTtcbiAgfTtcblxuICByZXR1cm4gUGxheWxpc3RMb2FkZXI7XG59KEV2ZW50VGFyZ2V0JDEpO1xuLyoqXG4gKiByYW5nZXNcbiAqXG4gKiBVdGlsaXRpZXMgZm9yIHdvcmtpbmcgd2l0aCBUaW1lUmFuZ2VzLlxuICpcbiAqL1xuXG5cbnZhciBUSU1FX0ZVREdFX0ZBQ1RPUiA9IDEgLyAzMDsgLy8gQ29tcGFyaXNvbnMgYmV0d2VlbiB0aW1lIHZhbHVlcyBzdWNoIGFzIGN1cnJlbnQgdGltZSBhbmQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyZWQgcmFuZ2Vcbi8vIGNhbiBiZSBtaXNsZWFkaW5nIGJlY2F1c2Ugb2YgcHJlY2lzaW9uIGRpZmZlcmVuY2VzIG9yIHdoZW4gdGhlIGN1cnJlbnQgbWVkaWEgaGFzIHBvb3JseVxuLy8gYWxpZ25lZCBhdWRpbyBhbmQgdmlkZW8sIHdoaWNoIGNhbiBjYXVzZSB2YWx1ZXMgdG8gYmUgc2xpZ2h0bHkgb2ZmIGZyb20gd2hhdCB5b3Ugd291bGRcbi8vIGV4cGVjdC4gVGhpcyB2YWx1ZSBpcyB3aGF0IHdlIGNvbnNpZGVyIHRvIGJlIHNhZmUgdG8gdXNlIGluIHN1Y2ggY29tcGFyaXNvbnMgdG8gYWNjb3VudFxuLy8gZm9yIHRoZXNlIHNjZW5hcmlvcy5cblxudmFyIFNBRkVfVElNRV9ERUxUQSA9IFRJTUVfRlVER0VfRkFDVE9SICogMztcblxudmFyIGZpbHRlclJhbmdlcyA9IGZ1bmN0aW9uIGZpbHRlclJhbmdlcyh0aW1lUmFuZ2VzLCBwcmVkaWNhdGUpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgdmFyIGk7XG5cbiAgaWYgKHRpbWVSYW5nZXMgJiYgdGltZVJhbmdlcy5sZW5ndGgpIHtcbiAgICAvLyBTZWFyY2ggZm9yIHJhbmdlcyB0aGF0IG1hdGNoIHRoZSBwcmVkaWNhdGVcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGltZVJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHByZWRpY2F0ZSh0aW1lUmFuZ2VzLnN0YXJ0KGkpLCB0aW1lUmFuZ2VzLmVuZChpKSkpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFt0aW1lUmFuZ2VzLnN0YXJ0KGkpLCB0aW1lUmFuZ2VzLmVuZChpKV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlcyhyZXN1bHRzKTtcbn07XG4vKipcbiAqIEF0dGVtcHRzIHRvIGZpbmQgdGhlIGJ1ZmZlcmVkIFRpbWVSYW5nZSB0aGF0IGNvbnRhaW5zIHRoZSBzcGVjaWZpZWRcbiAqIHRpbWUuXG4gKlxuICogQHBhcmFtIHtUaW1lUmFuZ2VzfSBidWZmZXJlZCAtIHRoZSBUaW1lUmFuZ2VzIG9iamVjdCB0byBxdWVyeVxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgIC0gdGhlIHRpbWUgdG8gZmlsdGVyIG9uLlxuICogQHJldHVybiB7VGltZVJhbmdlc30gYSBuZXcgVGltZVJhbmdlcyBvYmplY3RcbiAqL1xuXG5cbnZhciBmaW5kUmFuZ2UgPSBmdW5jdGlvbiBmaW5kUmFuZ2UoYnVmZmVyZWQsIHRpbWUpIHtcbiAgcmV0dXJuIGZpbHRlclJhbmdlcyhidWZmZXJlZCwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3RhcnQgLSBTQUZFX1RJTUVfREVMVEEgPD0gdGltZSAmJiBlbmQgKyBTQUZFX1RJTUVfREVMVEEgPj0gdGltZTtcbiAgfSk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBUaW1lUmFuZ2VzIHRoYXQgYmVnaW4gbGF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkIHRpbWUuXG4gKlxuICogQHBhcmFtIHtUaW1lUmFuZ2VzfSB0aW1lUmFuZ2VzIC0gdGhlIFRpbWVSYW5nZXMgb2JqZWN0IHRvIHF1ZXJ5XG4gKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIHRoZSB0aW1lIHRvIGZpbHRlciBvbi5cbiAqIEByZXR1cm4ge1RpbWVSYW5nZXN9IGEgbmV3IFRpbWVSYW5nZXMgb2JqZWN0LlxuICovXG5cblxudmFyIGZpbmROZXh0UmFuZ2UgPSBmdW5jdGlvbiBmaW5kTmV4dFJhbmdlKHRpbWVSYW5nZXMsIHRpbWUpIHtcbiAgcmV0dXJuIGZpbHRlclJhbmdlcyh0aW1lUmFuZ2VzLCBmdW5jdGlvbiAoc3RhcnQpIHtcbiAgICByZXR1cm4gc3RhcnQgLSBUSU1FX0ZVREdFX0ZBQ1RPUiA+PSB0aW1lO1xuICB9KTtcbn07XG4vKipcbiAqIFJldHVybnMgZ2FwcyB3aXRoaW4gYSBsaXN0IG9mIFRpbWVSYW5nZXNcbiAqXG4gKiBAcGFyYW0ge1RpbWVSYW5nZXN9IGJ1ZmZlcmVkIC0gdGhlIFRpbWVSYW5nZXMgb2JqZWN0XG4gKiBAcmV0dXJuIHtUaW1lUmFuZ2VzfSBhIFRpbWVSYW5nZXMgb2JqZWN0IG9mIGdhcHNcbiAqL1xuXG5cbnZhciBmaW5kR2FwcyA9IGZ1bmN0aW9uIGZpbmRHYXBzKGJ1ZmZlcmVkKSB7XG4gIGlmIChidWZmZXJlZC5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIHZpZGVvanMkMS5jcmVhdGVUaW1lUmFuZ2VzKCk7XG4gIH1cblxuICB2YXIgcmFuZ2VzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBidWZmZXJlZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzdGFydCA9IGJ1ZmZlcmVkLmVuZChpIC0gMSk7XG4gICAgdmFyIGVuZCA9IGJ1ZmZlcmVkLnN0YXJ0KGkpO1xuICAgIHJhbmdlcy5wdXNoKFtzdGFydCwgZW5kXSk7XG4gIH1cblxuICByZXR1cm4gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMocmFuZ2VzKTtcbn07XG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgaW50ZXJzZWN0aW9uIG9mIHR3byBUaW1lUmFuZ2VzXG4gKlxuICogQHBhcmFtIHtUaW1lUmFuZ2VzfSBidWZmZXJBXG4gKiBAcGFyYW0ge1RpbWVSYW5nZXN9IGJ1ZmZlckJcbiAqIEByZXR1cm4ge1RpbWVSYW5nZXN9IFRoZSBpbnRlcmVzZWN0aW9uIG9mIGBidWZmZXJBYCB3aXRoIGBidWZmZXJCYFxuICovXG5cblxudmFyIGJ1ZmZlckludGVyc2VjdGlvbiA9IGZ1bmN0aW9uIGJ1ZmZlckludGVyc2VjdGlvbihidWZmZXJBLCBidWZmZXJCKSB7XG4gIHZhciBzdGFydCA9IG51bGw7XG4gIHZhciBlbmQgPSBudWxsO1xuICB2YXIgYXJpdHkgPSAwO1xuICB2YXIgZXh0ZW50cyA9IFtdO1xuICB2YXIgcmFuZ2VzID0gW107XG5cbiAgaWYgKCFidWZmZXJBIHx8ICFidWZmZXJBLmxlbmd0aCB8fCAhYnVmZmVyQiB8fCAhYnVmZmVyQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZSgpO1xuICB9IC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBoYXZlIGJvdGggYnVmZmVycyBhbmQgY3JlYXRlIGFuXG4gIC8vIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvXG5cblxuICB2YXIgY291bnQgPSBidWZmZXJBLmxlbmd0aDsgLy8gQSkgR2F0aGVyIHVwIGFsbCBzdGFydCBhbmQgZW5kIHRpbWVzXG5cbiAgd2hpbGUgKGNvdW50LS0pIHtcbiAgICBleHRlbnRzLnB1c2goe1xuICAgICAgdGltZTogYnVmZmVyQS5zdGFydChjb3VudCksXG4gICAgICB0eXBlOiAnc3RhcnQnXG4gICAgfSk7XG4gICAgZXh0ZW50cy5wdXNoKHtcbiAgICAgIHRpbWU6IGJ1ZmZlckEuZW5kKGNvdW50KSxcbiAgICAgIHR5cGU6ICdlbmQnXG4gICAgfSk7XG4gIH1cblxuICBjb3VudCA9IGJ1ZmZlckIubGVuZ3RoO1xuXG4gIHdoaWxlIChjb3VudC0tKSB7XG4gICAgZXh0ZW50cy5wdXNoKHtcbiAgICAgIHRpbWU6IGJ1ZmZlckIuc3RhcnQoY291bnQpLFxuICAgICAgdHlwZTogJ3N0YXJ0J1xuICAgIH0pO1xuICAgIGV4dGVudHMucHVzaCh7XG4gICAgICB0aW1lOiBidWZmZXJCLmVuZChjb3VudCksXG4gICAgICB0eXBlOiAnZW5kJ1xuICAgIH0pO1xuICB9IC8vIEIpIFNvcnQgdGhlbSBieSB0aW1lXG5cblxuICBleHRlbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYS50aW1lIC0gYi50aW1lO1xuICB9KTsgLy8gQykgR28gYWxvbmcgb25lIGJ5IG9uZSBpbmNyZW1lbnRpbmcgYXJpdHkgZm9yIHN0YXJ0IGFuZCBkZWNyZW1lbnRpbmdcbiAgLy8gICAgYXJpdHkgZm9yIGVuZHNcblxuICBmb3IgKGNvdW50ID0gMDsgY291bnQgPCBleHRlbnRzLmxlbmd0aDsgY291bnQrKykge1xuICAgIGlmIChleHRlbnRzW2NvdW50XS50eXBlID09PSAnc3RhcnQnKSB7XG4gICAgICBhcml0eSsrOyAvLyBEKSBJZiBhcml0eSBpcyBldmVyIGluY3JlbWVudGVkIHRvIDIgd2UgYXJlIGVudGVyaW5nIGFuXG4gICAgICAvLyAgICBvdmVybGFwcGluZyByYW5nZVxuXG4gICAgICBpZiAoYXJpdHkgPT09IDIpIHtcbiAgICAgICAgc3RhcnQgPSBleHRlbnRzW2NvdW50XS50aW1lO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXh0ZW50c1tjb3VudF0udHlwZSA9PT0gJ2VuZCcpIHtcbiAgICAgIGFyaXR5LS07IC8vIEUpIElmIGFyaXR5IGlzIGV2ZXIgZGVjcmVtZW50ZWQgdG8gMSB3ZSBsZWF2aW5nIGFuXG4gICAgICAvLyAgICBvdmVybGFwcGluZyByYW5nZVxuXG4gICAgICBpZiAoYXJpdHkgPT09IDEpIHtcbiAgICAgICAgZW5kID0gZXh0ZW50c1tjb3VudF0udGltZTtcbiAgICAgIH1cbiAgICB9IC8vIEYpIFJlY29yZCBvdmVybGFwcGluZyByYW5nZXNcblxuXG4gICAgaWYgKHN0YXJ0ICE9PSBudWxsICYmIGVuZCAhPT0gbnVsbCkge1xuICAgICAgcmFuZ2VzLnB1c2goW3N0YXJ0LCBlbmRdKTtcbiAgICAgIHN0YXJ0ID0gbnVsbDtcbiAgICAgIGVuZCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZpZGVvanMkMS5jcmVhdGVUaW1lUmFuZ2VzKHJhbmdlcyk7XG59O1xuLyoqXG4gKiBHZXRzIGEgaHVtYW4gcmVhZGFibGUgc3RyaW5nIGZvciBhIFRpbWVSYW5nZVxuICpcbiAqIEBwYXJhbSB7VGltZVJhbmdlfSByYW5nZVxuICogQHJldHVybiB7c3RyaW5nfSBhIGh1bWFuIHJlYWRhYmxlIHN0cmluZ1xuICovXG5cblxudmFyIHByaW50YWJsZVJhbmdlID0gZnVuY3Rpb24gcHJpbnRhYmxlUmFuZ2UocmFuZ2UpIHtcbiAgdmFyIHN0ckFyciA9IFtdO1xuXG4gIGlmICghcmFuZ2UgfHwgIXJhbmdlLmxlbmd0aCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2UubGVuZ3RoOyBpKyspIHtcbiAgICBzdHJBcnIucHVzaChyYW5nZS5zdGFydChpKSArICcgPT4gJyArIHJhbmdlLmVuZChpKSk7XG4gIH1cblxuICByZXR1cm4gc3RyQXJyLmpvaW4oJywgJyk7XG59O1xuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBhbW91bnQgb2YgdGltZSBsZWZ0IGluIHNlY29uZHMgdW50aWwgdGhlIHBsYXllciBoaXRzIHRoZSBlbmQgb2YgdGhlXG4gKiBidWZmZXIgYW5kIGNhdXNlcyBhIHJlYnVmZmVyXG4gKlxuICogQHBhcmFtIHtUaW1lUmFuZ2V9IGJ1ZmZlcmVkXG4gKiAgICAgICAgVGhlIHN0YXRlIG9mIHRoZSBidWZmZXJcbiAqIEBwYXJhbSB7TnVtbmJlcn0gY3VycmVudFRpbWVcbiAqICAgICAgICBUaGUgY3VycmVudCB0aW1lIG9mIHRoZSBwbGF5ZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwbGF5YmFja1JhdGVcbiAqICAgICAgICBUaGUgY3VycmVudCBwbGF5YmFjayByYXRlIG9mIHRoZSBwbGF5ZXIuIERlZmF1bHRzIHRvIDEuXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiAgICAgICAgIFRpbWUgdW50aWwgdGhlIHBsYXllciBoYXMgdG8gc3RhcnQgcmVidWZmZXJpbmcgaW4gc2Vjb25kcy5cbiAqIEBmdW5jdGlvbiB0aW1lVW50aWxSZWJ1ZmZlclxuICovXG5cblxudmFyIHRpbWVVbnRpbFJlYnVmZmVyID0gZnVuY3Rpb24gdGltZVVudGlsUmVidWZmZXIoYnVmZmVyZWQsIGN1cnJlbnRUaW1lLCBwbGF5YmFja1JhdGUpIHtcbiAgaWYgKHBsYXliYWNrUmF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgcGxheWJhY2tSYXRlID0gMTtcbiAgfVxuXG4gIHZhciBidWZmZXJlZEVuZCA9IGJ1ZmZlcmVkLmxlbmd0aCA/IGJ1ZmZlcmVkLmVuZChidWZmZXJlZC5sZW5ndGggLSAxKSA6IDA7XG4gIHJldHVybiAoYnVmZmVyZWRFbmQgLSBjdXJyZW50VGltZSkgLyBwbGF5YmFja1JhdGU7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIFRpbWVSYW5nZXMgb2JqZWN0IGludG8gYW4gYXJyYXkgcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge1RpbWVSYW5nZXN9IHRpbWVSYW5nZXNcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5cblxudmFyIHRpbWVSYW5nZXNUb0FycmF5ID0gZnVuY3Rpb24gdGltZVJhbmdlc1RvQXJyYXkodGltZVJhbmdlcykge1xuICB2YXIgdGltZVJhbmdlc0xpc3QgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRpbWVSYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICB0aW1lUmFuZ2VzTGlzdC5wdXNoKHtcbiAgICAgIHN0YXJ0OiB0aW1lUmFuZ2VzLnN0YXJ0KGkpLFxuICAgICAgZW5kOiB0aW1lUmFuZ2VzLmVuZChpKVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRpbWVSYW5nZXNMaXN0O1xufTtcbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gdGltZSByYW5nZSBvYmplY3RzIGFyZSBkaWZmZXJlbnQuXG4gKlxuICogQHBhcmFtIHtUaW1lUmFuZ2V9IGFcbiAqICAgICAgICB0aGUgZmlyc3QgdGltZSByYW5nZSBvYmplY3QgdG8gY2hlY2tcbiAqXG4gKiBAcGFyYW0ge1RpbWVSYW5nZX0gYlxuICogICAgICAgIHRoZSBzZWNvbmQgdGltZSByYW5nZSBvYmplY3QgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogICAgICAgICBXaGV0aGVyIHRoZSB0aW1lIHJhbmdlIG9iamVjdHMgZGlmZmVyXG4gKi9cblxuXG52YXIgaXNSYW5nZURpZmZlcmVudCA9IGZ1bmN0aW9uIGlzUmFuZ2VEaWZmZXJlbnQoYSwgYikge1xuICAvLyBzYW1lIG9iamVjdFxuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBvbmUgb3IgdGhlIG90aGVyIGlzIHVuZGVmaW5lZFxuXG5cbiAgaWYgKCFhICYmIGIgfHwgIWIgJiYgYSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIGxlbmd0aCBpcyBkaWZmZXJlbnRcblxuXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBzZWUgaWYgYW55IHN0YXJ0L2VuZCBwYWlyIGlzIGRpZmZlcmVudFxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGEuc3RhcnQoaSkgIT09IGIuc3RhcnQoaSkgfHwgYS5lbmQoaSkgIT09IGIuZW5kKGkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gLy8gaWYgdGhlIGxlbmd0aCBhbmQgZXZlcnkgcGFpciBpcyB0aGUgc2FtZVxuICAvLyB0aGlzIGlzIHRoZSBzYW1lIHRpbWUgcmFuZ2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4vKipcbiAqIEBmaWxlIHBsYXlsaXN0LmpzXG4gKlxuICogUGxheWxpc3QgcmVsYXRlZCB1dGlsaXRpZXMuXG4gKi9cblxuXG52YXIgY3JlYXRlVGltZVJhbmdlID0gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZTtcbi8qKlxuICogd2FsayBiYWNrd2FyZCB1bnRpbCB3ZSBmaW5kIGEgZHVyYXRpb24gd2UgY2FuIHVzZVxuICogb3IgcmV0dXJuIGEgZmFpbHVyZVxuICpcbiAqIEBwYXJhbSB7UGxheWxpc3R9IHBsYXlsaXN0IHRoZSBwbGF5bGlzdCB0byB3YWxrIHRocm91Z2hcbiAqIEBwYXJhbSB7TnVtYmVyfSBlbmRTZXF1ZW5jZSB0aGUgbWVkaWFTZXF1ZW5jZSB0byBzdG9wIHdhbGtpbmcgb25cbiAqL1xuXG52YXIgYmFja3dhcmREdXJhdGlvbiA9IGZ1bmN0aW9uIGJhY2t3YXJkRHVyYXRpb24ocGxheWxpc3QsIGVuZFNlcXVlbmNlKSB7XG4gIHZhciByZXN1bHQgPSAwO1xuICB2YXIgaSA9IGVuZFNlcXVlbmNlIC0gcGxheWxpc3QubWVkaWFTZXF1ZW5jZTsgLy8gaWYgYSBzdGFydCB0aW1lIGlzIGF2YWlsYWJsZSBmb3Igc2VnbWVudCBpbW1lZGlhdGVseSBmb2xsb3dpbmdcbiAgLy8gdGhlIGludGVydmFsLCB1c2UgaXRcblxuICB2YXIgc2VnbWVudCA9IHBsYXlsaXN0LnNlZ21lbnRzW2ldOyAvLyBXYWxrIGJhY2t3YXJkIHVudGlsIHdlIGZpbmQgdGhlIGxhdGVzdCBzZWdtZW50IHdpdGggdGltZWxpbmVcbiAgLy8gaW5mb3JtYXRpb24gdGhhdCBpcyBlYXJsaWVyIHRoYW4gZW5kU2VxdWVuY2VcblxuICBpZiAoc2VnbWVudCkge1xuICAgIGlmICh0eXBlb2Ygc2VnbWVudC5zdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogc2VnbWVudC5zdGFydCxcbiAgICAgICAgcHJlY2lzZTogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNlZ21lbnQuZW5kICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiBzZWdtZW50LmVuZCAtIHNlZ21lbnQuZHVyYXRpb24sXG4gICAgICAgIHByZWNpc2U6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHNlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1tpXTtcblxuICAgIGlmICh0eXBlb2Ygc2VnbWVudC5lbmQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHJlc3VsdCArIHNlZ21lbnQuZW5kLFxuICAgICAgICBwcmVjaXNlOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJlc3VsdCArPSBzZWdtZW50LmR1cmF0aW9uO1xuXG4gICAgaWYgKHR5cGVvZiBzZWdtZW50LnN0YXJ0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiByZXN1bHQgKyBzZWdtZW50LnN0YXJ0LFxuICAgICAgICBwcmVjaXNlOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVzdWx0OiByZXN1bHQsXG4gICAgcHJlY2lzZTogZmFsc2VcbiAgfTtcbn07XG4vKipcbiAqIHdhbGsgZm9yd2FyZCB1bnRpbCB3ZSBmaW5kIGEgZHVyYXRpb24gd2UgY2FuIHVzZVxuICogb3IgcmV0dXJuIGEgZmFpbHVyZVxuICpcbiAqIEBwYXJhbSB7UGxheWxpc3R9IHBsYXlsaXN0IHRoZSBwbGF5bGlzdCB0byB3YWxrIHRocm91Z2hcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRTZXF1ZW5jZSB0aGUgbWVkaWFTZXF1ZW5jZSB0byBzdG9wIHdhbGtpbmcgb25cbiAqL1xuXG5cbnZhciBmb3J3YXJkRHVyYXRpb24gPSBmdW5jdGlvbiBmb3J3YXJkRHVyYXRpb24ocGxheWxpc3QsIGVuZFNlcXVlbmNlKSB7XG4gIHZhciByZXN1bHQgPSAwO1xuICB2YXIgc2VnbWVudDtcbiAgdmFyIGkgPSBlbmRTZXF1ZW5jZSAtIHBsYXlsaXN0Lm1lZGlhU2VxdWVuY2U7IC8vIFdhbGsgZm9yd2FyZCB1bnRpbCB3ZSBmaW5kIHRoZSBlYXJsaWVzdCBzZWdtZW50IHdpdGggdGltZWxpbmVcbiAgLy8gaW5mb3JtYXRpb25cblxuICBmb3IgKDsgaSA8IHBsYXlsaXN0LnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2VnbWVudCA9IHBsYXlsaXN0LnNlZ21lbnRzW2ldO1xuXG4gICAgaWYgKHR5cGVvZiBzZWdtZW50LnN0YXJ0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiBzZWdtZW50LnN0YXJ0IC0gcmVzdWx0LFxuICAgICAgICBwcmVjaXNlOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJlc3VsdCArPSBzZWdtZW50LmR1cmF0aW9uO1xuXG4gICAgaWYgKHR5cGVvZiBzZWdtZW50LmVuZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogc2VnbWVudC5lbmQgLSByZXN1bHQsXG4gICAgICAgIHByZWNpc2U6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIGluZGljYXRlIHdlIGRpZG4ndCBmaW5kIGEgdXNlZnVsIGR1cmF0aW9uIGVzdGltYXRlXG5cblxuICByZXR1cm4ge1xuICAgIHJlc3VsdDogLTEsXG4gICAgcHJlY2lzZTogZmFsc2VcbiAgfTtcbn07XG4vKipcbiAgKiBDYWxjdWxhdGUgdGhlIG1lZGlhIGR1cmF0aW9uIGZyb20gdGhlIHNlZ21lbnRzIGFzc29jaWF0ZWQgd2l0aCBhXG4gICogcGxheWxpc3QuIFRoZSBkdXJhdGlvbiBvZiBhIHN1YmludGVydmFsIG9mIHRoZSBhdmFpbGFibGUgc2VnbWVudHNcbiAgKiBtYXkgYmUgY2FsY3VsYXRlZCBieSBzcGVjaWZ5aW5nIGFuIGVuZCBpbmRleC5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCBhIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICAqIEBwYXJhbSB7bnVtYmVyPX0gZW5kU2VxdWVuY2UgYW4gZXhjbHVzaXZlIHVwcGVyIGJvdW5kYXJ5XG4gICogZm9yIHRoZSBwbGF5bGlzdC4gIERlZmF1bHRzIHRvIHBsYXlsaXN0IGxlbmd0aC5cbiAgKiBAcGFyYW0ge251bWJlcn0gZXhwaXJlZCB0aGUgYW1vdW50IG9mIHRpbWUgdGhhdCBoYXMgZHJvcHBlZFxuICAqIG9mZiB0aGUgZnJvbnQgb2YgdGhlIHBsYXlsaXN0IGluIGEgbGl2ZSBzY2VuYXJpb1xuICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGR1cmF0aW9uIGJldHdlZW4gdGhlIGZpcnN0IGF2YWlsYWJsZSBzZWdtZW50XG4gICogYW5kIGVuZCBpbmRleC5cbiAgKi9cblxuXG52YXIgaW50ZXJ2YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIGludGVydmFsRHVyYXRpb24ocGxheWxpc3QsIGVuZFNlcXVlbmNlLCBleHBpcmVkKSB7XG4gIGlmICh0eXBlb2YgZW5kU2VxdWVuY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5kU2VxdWVuY2UgPSBwbGF5bGlzdC5tZWRpYVNlcXVlbmNlICsgcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGVuZFNlcXVlbmNlIDwgcGxheWxpc3QubWVkaWFTZXF1ZW5jZSkge1xuICAgIHJldHVybiAwO1xuICB9IC8vIGRvIGEgYmFja3dhcmQgd2FsayB0byBlc3RpbWF0ZSB0aGUgZHVyYXRpb25cblxuXG4gIHZhciBiYWNrd2FyZCA9IGJhY2t3YXJkRHVyYXRpb24ocGxheWxpc3QsIGVuZFNlcXVlbmNlKTtcblxuICBpZiAoYmFja3dhcmQucHJlY2lzZSkge1xuICAgIC8vIGlmIHdlIHdlcmUgYWJsZSB0byBiYXNlIG91ciBkdXJhdGlvbiBlc3RpbWF0ZSBvbiB0aW1pbmdcbiAgICAvLyBpbmZvcm1hdGlvbiBwcm92aWRlZCBkaXJlY3RseSBmcm9tIHRoZSBNZWRpYSBTb3VyY2UsIHJldHVyblxuICAgIC8vIGl0XG4gICAgcmV0dXJuIGJhY2t3YXJkLnJlc3VsdDtcbiAgfSAvLyB3YWxrIGZvcndhcmQgdG8gc2VlIGlmIGEgcHJlY2lzZSBkdXJhdGlvbiBlc3RpbWF0ZSBjYW4gYmUgbWFkZVxuICAvLyB0aGF0IHdheVxuXG5cbiAgdmFyIGZvcndhcmQgPSBmb3J3YXJkRHVyYXRpb24ocGxheWxpc3QsIGVuZFNlcXVlbmNlKTtcblxuICBpZiAoZm9yd2FyZC5wcmVjaXNlKSB7XG4gICAgLy8gd2UgZm91bmQgYSBzZWdtZW50IHRoYXQgaGFzIGJlZW4gYnVmZmVyZWQgYW5kIHNvIGl0J3NcbiAgICAvLyBwb3NpdGlvbiBpcyBrbm93biBwcmVjaXNlbHlcbiAgICByZXR1cm4gZm9yd2FyZC5yZXN1bHQ7XG4gIH0gLy8gcmV0dXJuIHRoZSBsZXNzLXByZWNpc2UsIHBsYXlsaXN0LWJhc2VkIGR1cmF0aW9uIGVzdGltYXRlXG5cblxuICByZXR1cm4gYmFja3dhcmQucmVzdWx0ICsgZXhwaXJlZDtcbn07XG4vKipcbiAgKiBDYWxjdWxhdGVzIHRoZSBkdXJhdGlvbiBvZiBhIHBsYXlsaXN0LiBJZiBhIHN0YXJ0IGFuZCBlbmQgaW5kZXhcbiAgKiBhcmUgc3BlY2lmaWVkLCB0aGUgZHVyYXRpb24gd2lsbCBiZSBmb3IgdGhlIHN1YnNldCBvZiB0aGUgbWVkaWFcbiAgKiB0aW1lbGluZSBiZXR3ZWVuIHRob3NlIHR3byBpbmRpY2VzLiBUaGUgdG90YWwgZHVyYXRpb24gZm9yIGxpdmVcbiAgKiBwbGF5bGlzdHMgaXMgYWx3YXlzIEluZmluaXR5LlxuICAqXG4gICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IGEgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gICogQHBhcmFtIHtudW1iZXI9fSBlbmRTZXF1ZW5jZSBhbiBleGNsdXNpdmUgdXBwZXJcbiAgKiBib3VuZGFyeSBmb3IgdGhlIHBsYXlsaXN0LiBEZWZhdWx0cyB0byB0aGUgcGxheWxpc3QgbWVkaWFcbiAgKiBzZXF1ZW5jZSBudW1iZXIgcGx1cyBpdHMgbGVuZ3RoLlxuICAqIEBwYXJhbSB7bnVtYmVyPX0gZXhwaXJlZCB0aGUgYW1vdW50IG9mIHRpbWUgdGhhdCBoYXNcbiAgKiBkcm9wcGVkIG9mZiB0aGUgZnJvbnQgb2YgdGhlIHBsYXlsaXN0IGluIGEgbGl2ZSBzY2VuYXJpb1xuICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGR1cmF0aW9uIGJldHdlZW4gdGhlIHN0YXJ0IGluZGV4IGFuZCBlbmRcbiAgKiBpbmRleC5cbiAgKi9cblxuXG52YXIgZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbihwbGF5bGlzdCwgZW5kU2VxdWVuY2UsIGV4cGlyZWQpIHtcbiAgaWYgKCFwbGF5bGlzdCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBleHBpcmVkICE9PSAnbnVtYmVyJykge1xuICAgIGV4cGlyZWQgPSAwO1xuICB9IC8vIGlmIGEgc2xpY2Ugb2YgdGhlIHRvdGFsIGR1cmF0aW9uIGlzIG5vdCByZXF1ZXN0ZWQsIHVzZVxuICAvLyBwbGF5bGlzdC1sZXZlbCBkdXJhdGlvbiBpbmRpY2F0b3JzIHdoZW4gdGhleSdyZSBwcmVzZW50XG5cblxuICBpZiAodHlwZW9mIGVuZFNlcXVlbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGlmIHByZXNlbnQsIHVzZSB0aGUgZHVyYXRpb24gc3BlY2lmaWVkIGluIHRoZSBwbGF5bGlzdFxuICAgIGlmIChwbGF5bGlzdC50b3RhbER1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gcGxheWxpc3QudG90YWxEdXJhdGlvbjtcbiAgICB9IC8vIGR1cmF0aW9uIHNob3VsZCBiZSBJbmZpbml0eSBmb3IgbGl2ZSBwbGF5bGlzdHNcblxuXG4gICAgaWYgKCFwbGF5bGlzdC5lbmRMaXN0KSB7XG4gICAgICByZXR1cm4gd2luZG93JDEuSW5maW5pdHk7XG4gICAgfVxuICB9IC8vIGNhbGN1bGF0ZSB0aGUgdG90YWwgZHVyYXRpb24gYmFzZWQgb24gdGhlIHNlZ21lbnQgZHVyYXRpb25zXG5cblxuICByZXR1cm4gaW50ZXJ2YWxEdXJhdGlvbihwbGF5bGlzdCwgZW5kU2VxdWVuY2UsIGV4cGlyZWQpO1xufTtcbi8qKlxuICAqIENhbGN1bGF0ZSB0aGUgdGltZSBiZXR3ZWVuIHR3byBpbmRleGVzIGluIHRoZSBjdXJyZW50IHBsYXlsaXN0XG4gICogbmVpZ2h0IHRoZSBzdGFydC0gbm9yIHRoZSBlbmQtaW5kZXggbmVlZCB0byBiZSB3aXRoaW4gdGhlIGN1cnJlbnRcbiAgKiBwbGF5bGlzdCBpbiB3aGljaCBjYXNlLCB0aGUgdGFyZ2V0RHVyYXRpb24gb2YgdGhlIHBsYXlsaXN0IGlzIHVzZWRcbiAgKiB0byBhcHByb3hpbWF0ZSB0aGUgZHVyYXRpb25zIG9mIHRoZSBzZWdtZW50c1xuICAqXG4gICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IGEgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0SW5kZXhcbiAgKiBAcGFyYW0ge251bWJlcn0gZW5kSW5kZXhcbiAgKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBiZXR3ZWVuIHN0YXJ0SW5kZXggYW5kIGVuZEluZGV4XG4gICovXG5cblxudmFyIHN1bUR1cmF0aW9ucyA9IGZ1bmN0aW9uIHN1bUR1cmF0aW9ucyhwbGF5bGlzdCwgc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcbiAgdmFyIGR1cmF0aW9ucyA9IDA7XG5cbiAgaWYgKHN0YXJ0SW5kZXggPiBlbmRJbmRleCkge1xuICAgIHZhciBfcmVmID0gW2VuZEluZGV4LCBzdGFydEluZGV4XTtcbiAgICBzdGFydEluZGV4ID0gX3JlZlswXTtcbiAgICBlbmRJbmRleCA9IF9yZWZbMV07XG4gIH1cblxuICBpZiAoc3RhcnRJbmRleCA8IDApIHtcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IE1hdGgubWluKDAsIGVuZEluZGV4KTsgaSsrKSB7XG4gICAgICBkdXJhdGlvbnMgKz0gcGxheWxpc3QudGFyZ2V0RHVyYXRpb247XG4gICAgfVxuXG4gICAgc3RhcnRJbmRleCA9IDA7XG4gIH1cblxuICBmb3IgKHZhciBfaSA9IHN0YXJ0SW5kZXg7IF9pIDwgZW5kSW5kZXg7IF9pKyspIHtcbiAgICBkdXJhdGlvbnMgKz0gcGxheWxpc3Quc2VnbWVudHNbX2ldLmR1cmF0aW9uO1xuICB9XG5cbiAgcmV0dXJuIGR1cmF0aW9ucztcbn07XG4vKipcbiAqIERldGVybWluZXMgdGhlIG1lZGlhIGluZGV4IG9mIHRoZSBzZWdtZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNhZmUgZWRnZSBvZiB0aGUgbGl2ZVxuICogd2luZG93IHdoaWNoIGlzIHRoZSBkdXJhdGlvbiBvZiB0aGUgbGFzdCBzZWdtZW50IHBsdXMgMiB0YXJnZXQgZHVyYXRpb25zIGZyb20gdGhlIGVuZFxuICogb2YgdGhlIHBsYXlsaXN0LlxuICpcbiAqIEEgbGl2ZUVkZ2VQYWRkaW5nIGNhbiBiZSBwcm92aWRlZCB3aGljaCB3aWxsIGJlIHVzZWQgaW5zdGVhZCBvZiBjYWxjdWxhdGluZyB0aGUgc2FmZSBsaXZlIGVkZ2UuXG4gKiBUaGlzIGNvcnJlc3BvbmRzIHRvIHN1Z2dlc3RlZFByZXNlbnRhdGlvbkRlbGF5IGluIERBU0ggbWFuaWZlc3RzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdFxuICogICAgICAgIGEgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gKiBAcGFyYW0ge251bWJlcn0gW2xpdmVFZGdlUGFkZGluZ11cbiAqICAgICAgICBBIG51bWJlciBpbiBzZWNvbmRzIGluZGljYXRpbmcgaG93IGZhciBmcm9tIHRoZSBlbmQgd2Ugd2FudCB0byBiZS5cbiAqICAgICAgICBJZiBwcm92aWRlZCwgdGhpcyB2YWx1ZSBpcyB1c2VkIGluc3RlYWQgb2YgY2FsY3VsYXRpbmcgdGhlIHNhZmUgbGl2ZSBpbmRleCBmcm9tIHRoZSB0YXJnZXQgZHVyYXRpb25zLlxuICogICAgICAgIENvcnJlc3BvbmRzIHRvIHN1Z2dlc3RlZFByZXNlbnRhdGlvbkRlbGF5IGluIERBU0ggbWFuaWZlc3RzLlxuICogQHJldHVybiB7bnVtYmVyfVxuICogICAgICAgICBUaGUgbWVkaWEgaW5kZXggb2YgdGhlIHNlZ21lbnQgYXQgdGhlIHNhZmUgbGl2ZSBwb2ludC4gMCBpZiB0aGVyZSBpcyBubyBcInNhZmVcIlxuICogICAgICAgICBwb2ludC5cbiAqIEBmdW5jdGlvbiBzYWZlTGl2ZUluZGV4XG4gKi9cblxuXG52YXIgc2FmZUxpdmVJbmRleCA9IGZ1bmN0aW9uIHNhZmVMaXZlSW5kZXgocGxheWxpc3QsIGxpdmVFZGdlUGFkZGluZykge1xuICBpZiAoIXBsYXlsaXN0LnNlZ21lbnRzLmxlbmd0aCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGkgPSBwbGF5bGlzdC5zZWdtZW50cy5sZW5ndGg7XG4gIHZhciBsYXN0U2VnbWVudER1cmF0aW9uID0gcGxheWxpc3Quc2VnbWVudHNbaSAtIDFdLmR1cmF0aW9uIHx8IHBsYXlsaXN0LnRhcmdldER1cmF0aW9uO1xuICB2YXIgc2FmZURpc3RhbmNlID0gdHlwZW9mIGxpdmVFZGdlUGFkZGluZyA9PT0gJ251bWJlcicgPyBsaXZlRWRnZVBhZGRpbmcgOiBsYXN0U2VnbWVudER1cmF0aW9uICsgcGxheWxpc3QudGFyZ2V0RHVyYXRpb24gKiAyO1xuXG4gIGlmIChzYWZlRGlzdGFuY2UgPT09IDApIHtcbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIHZhciBkaXN0YW5jZUZyb21FbmQgPSAwO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBkaXN0YW5jZUZyb21FbmQgKz0gcGxheWxpc3Quc2VnbWVudHNbaV0uZHVyYXRpb247XG5cbiAgICBpZiAoZGlzdGFuY2VGcm9tRW5kID49IHNhZmVEaXN0YW5jZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4KDAsIGkpO1xufTtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgcGxheWxpc3QgZW5kIHRpbWVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3QgYSBtZWRpYSBwbGF5bGlzdCBvYmplY3RcbiAqIEBwYXJhbSB7bnVtYmVyPX0gZXhwaXJlZCB0aGUgYW1vdW50IG9mIHRpbWUgdGhhdCBoYXNcbiAqICAgICAgICAgICAgICAgICAgZHJvcHBlZCBvZmYgdGhlIGZyb250IG9mIHRoZSBwbGF5bGlzdCBpbiBhIGxpdmUgc2NlbmFyaW9cbiAqIEBwYXJhbSB7Ym9vbGVhbnxmYWxzZX0gdXNlU2FmZUxpdmVFbmQgYSBib29sZWFuIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0IGVuZCBjYWxjdWxhdGlvbiBzaG91bGQgY29uc2lkZXIgdGhlIHNhZmUgbGl2ZSBlbmRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgKHRydW5jYXRlIHRoZSBwbGF5bGlzdCBlbmQgYnkgdGhyZWUgc2VnbWVudHMpLiBUaGlzIGlzIG5vcm1hbGx5XG4gKiAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgZm9yIGNhbGN1bGF0aW5nIHRoZSBlbmQgb2YgdGhlIHBsYXlsaXN0J3Mgc2Vla2FibGUgcmFuZ2UuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgdGFrZXMgaW50byBhY2NvdW50IHRoZSB2YWx1ZSBvZiBsaXZlRWRnZVBhZGRpbmcuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIFNldHRpbmcgbGl2ZUVkZ2VQYWRkaW5nIHRvIDAgaXMgZXF1aXZhbGVudCB0byBzZXR0aW5nIHRoaXMgdG8gZmFsc2UuXG4gKiBAcGFyYW0ge251bWJlcn0gbGl2ZUVkZ2VQYWRkaW5nIGEgbnVtYmVyIGluZGljYXRpbmcgaG93IGZhciBmcm9tIHRoZSBlbmQgb2YgdGhlIHBsYXlsaXN0IHdlIHNob3VsZCBiZSBpbiBzZWNvbmRzLlxuICogICAgICAgICAgICAgICAgIElmIHRoaXMgaXMgcHJvdmlkZWQsIGl0IGlzIHVzZWQgaW4gdGhlIHNhZmUgbGl2ZSBlbmQgY2FsY3VsYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgU2V0dGluZyB1c2VTYWZlTGl2ZUVuZD1mYWxzZSBvciBsaXZlRWRnZVBhZGRpbmc9MCBhcmUgZXF1aXZhbGVudC5cbiAqICAgICAgICAgICAgICAgICBDb3JyZXNwb25kcyB0byBzdWdnZXN0ZWRQcmVzZW50YXRpb25EZWxheSBpbiBEQVNIIG1hbmlmZXN0cy5cbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIGVuZCB0aW1lIG9mIHBsYXlsaXN0XG4gKiBAZnVuY3Rpb24gcGxheWxpc3RFbmRcbiAqL1xuXG5cbnZhciBwbGF5bGlzdEVuZCA9IGZ1bmN0aW9uIHBsYXlsaXN0RW5kKHBsYXlsaXN0LCBleHBpcmVkLCB1c2VTYWZlTGl2ZUVuZCwgbGl2ZUVkZ2VQYWRkaW5nKSB7XG4gIGlmICghcGxheWxpc3QgfHwgIXBsYXlsaXN0LnNlZ21lbnRzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAocGxheWxpc3QuZW5kTGlzdCkge1xuICAgIHJldHVybiBkdXJhdGlvbihwbGF5bGlzdCk7XG4gIH1cblxuICBpZiAoZXhwaXJlZCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZXhwaXJlZCA9IGV4cGlyZWQgfHwgMDtcbiAgdmFyIGVuZFNlcXVlbmNlID0gdXNlU2FmZUxpdmVFbmQgPyBzYWZlTGl2ZUluZGV4KHBsYXlsaXN0LCBsaXZlRWRnZVBhZGRpbmcpIDogcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoO1xuICByZXR1cm4gaW50ZXJ2YWxEdXJhdGlvbihwbGF5bGlzdCwgcGxheWxpc3QubWVkaWFTZXF1ZW5jZSArIGVuZFNlcXVlbmNlLCBleHBpcmVkKTtcbn07XG4vKipcbiAgKiBDYWxjdWxhdGVzIHRoZSBpbnRlcnZhbCBvZiB0aW1lIHRoYXQgaXMgY3VycmVudGx5IHNlZWthYmxlIGluIGFcbiAgKiBwbGF5bGlzdC4gVGhlIHJldHVybmVkIHRpbWUgcmFuZ2VzIGFyZSByZWxhdGl2ZSB0byB0aGUgZWFybGllc3RcbiAgKiBtb21lbnQgaW4gdGhlIHNwZWNpZmllZCBwbGF5bGlzdCB0aGF0IGlzIHN0aWxsIGF2YWlsYWJsZS4gQSBmdWxsXG4gICogc2Vla2FibGUgaW1wbGVtZW50YXRpb24gZm9yIGxpdmUgc3RyZWFtcyB3b3VsZCBuZWVkIHRvIG9mZnNldFxuICAqIHRoZXNlIHZhbHVlcyBieSB0aGUgZHVyYXRpb24gb2YgY29udGVudCB0aGF0IGhhcyBleHBpcmVkIGZyb20gdGhlXG4gICogc3RyZWFtLlxuICAqXG4gICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IGEgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gICogZHJvcHBlZCBvZmYgdGhlIGZyb250IG9mIHRoZSBwbGF5bGlzdCBpbiBhIGxpdmUgc2NlbmFyaW9cbiAgKiBAcGFyYW0ge251bWJlcj19IGV4cGlyZWQgdGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgaGFzXG4gICogZHJvcHBlZCBvZmYgdGhlIGZyb250IG9mIHRoZSBwbGF5bGlzdCBpbiBhIGxpdmUgc2NlbmFyaW9cbiAgKiBAcGFyYW0ge251bWJlcn0gbGl2ZUVkZ2VQYWRkaW5nIGhvdyBmYXIgZnJvbSB0aGUgZW5kIG9mIHRoZSBwbGF5bGlzdCB3ZSBzaG91bGQgYmUgaW4gc2Vjb25kcy5cbiAgKiAgICAgICAgQ29ycmVzcG9uZHMgdG8gc3VnZ2VzdGVkUHJlc2VudGF0aW9uRGVsYXkgaW4gREFTSCBtYW5pZmVzdHMuXG4gICogQHJldHVybiB7VGltZVJhbmdlc30gdGhlIHBlcmlvZHMgb2YgdGltZSB0aGF0IGFyZSB2YWxpZCB0YXJnZXRzXG4gICogZm9yIHNlZWtpbmdcbiAgKi9cblxuXG52YXIgc2Vla2FibGUgPSBmdW5jdGlvbiBzZWVrYWJsZShwbGF5bGlzdCwgZXhwaXJlZCwgbGl2ZUVkZ2VQYWRkaW5nKSB7XG4gIHZhciB1c2VTYWZlTGl2ZUVuZCA9IHRydWU7XG4gIHZhciBzZWVrYWJsZVN0YXJ0ID0gZXhwaXJlZCB8fCAwO1xuICB2YXIgc2Vla2FibGVFbmQgPSBwbGF5bGlzdEVuZChwbGF5bGlzdCwgZXhwaXJlZCwgdXNlU2FmZUxpdmVFbmQsIGxpdmVFZGdlUGFkZGluZyk7XG5cbiAgaWYgKHNlZWthYmxlRW5kID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVRpbWVSYW5nZSgpO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVRpbWVSYW5nZShzZWVrYWJsZVN0YXJ0LCBzZWVrYWJsZUVuZCk7XG59O1xuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIGluZGV4IGFuZCBlc3RpbWF0ZWQgc3RhcnRpbmcgdGltZSBvZiB0aGUgc2VnbWVudCB0aGF0XG4gKiBjb250YWlucyBhIHNwZWNpZmllZCBwbGF5YmFjayBwb3NpdGlvbiBpbiBhIG1lZGlhIHBsYXlsaXN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCB0aGUgbWVkaWEgcGxheWxpc3QgdG8gcXVlcnlcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50VGltZSBUaGUgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgdGhlIGVhcmxpZXN0XG4gKiBwb3NzaWJsZSBwb3NpdGlvbiB0byBkZXRlcm1pbmUgdGhlIGNvbnRhaW5pbmcgc2VnbWVudCBmb3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydEluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRUaW1lXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuXG52YXIgZ2V0TWVkaWFJbmZvRm9yVGltZSA9IGZ1bmN0aW9uIGdldE1lZGlhSW5mb0ZvclRpbWUocGxheWxpc3QsIGN1cnJlbnRUaW1lLCBzdGFydEluZGV4LCBzdGFydFRpbWUpIHtcbiAgdmFyIGk7XG4gIHZhciBzZWdtZW50O1xuICB2YXIgbnVtU2VnbWVudHMgPSBwbGF5bGlzdC5zZWdtZW50cy5sZW5ndGg7XG4gIHZhciB0aW1lID0gY3VycmVudFRpbWUgLSBzdGFydFRpbWU7XG5cbiAgaWYgKHRpbWUgPCAwKSB7XG4gICAgLy8gV2FsayBiYWNrd2FyZCBmcm9tIHN0YXJ0SW5kZXggaW4gdGhlIHBsYXlsaXN0LCBhZGRpbmcgZHVyYXRpb25zXG4gICAgLy8gdW50aWwgd2UgZmluZCBhIHNlZ21lbnQgdGhhdCBjb250YWlucyBgdGltZWAgYW5kIHJldHVybiBpdFxuICAgIGlmIChzdGFydEluZGV4ID4gMCkge1xuICAgICAgZm9yIChpID0gc3RhcnRJbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHNlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1tpXTtcbiAgICAgICAgdGltZSArPSBzZWdtZW50LmR1cmF0aW9uICsgVElNRV9GVURHRV9GQUNUT1I7XG5cbiAgICAgICAgaWYgKHRpbWUgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1lZGlhSW5kZXg6IGksXG4gICAgICAgICAgICBzdGFydFRpbWU6IHN0YXJ0VGltZSAtIHN1bUR1cmF0aW9ucyhwbGF5bGlzdCwgc3RhcnRJbmRleCwgaSlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBXZSB3ZXJlIHVuYWJsZSB0byBmaW5kIGEgZ29vZCBzZWdtZW50IHdpdGhpbiB0aGUgcGxheWxpc3RcbiAgICAvLyBzbyBzZWxlY3QgdGhlIGZpcnN0IHNlZ21lbnRcblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lZGlhSW5kZXg6IDAsXG4gICAgICBzdGFydFRpbWU6IGN1cnJlbnRUaW1lXG4gICAgfTtcbiAgfSAvLyBXaGVuIHN0YXJ0SW5kZXggaXMgbmVnYXRpdmUsIHdlIGZpcnN0IHdhbGsgZm9yd2FyZCB0byBmaXJzdCBzZWdtZW50XG4gIC8vIGFkZGluZyB0YXJnZXQgZHVyYXRpb25zLiBJZiB3ZSBcInJ1biBvdXQgb2YgdGltZVwiIGJlZm9yZSBnZXR0aW5nIHRvXG4gIC8vIHRoZSBmaXJzdCBzZWdtZW50LCByZXR1cm4gdGhlIGZpcnN0IHNlZ21lbnRcblxuXG4gIGlmIChzdGFydEluZGV4IDwgMCkge1xuICAgIGZvciAoaSA9IHN0YXJ0SW5kZXg7IGkgPCAwOyBpKyspIHtcbiAgICAgIHRpbWUgLT0gcGxheWxpc3QudGFyZ2V0RHVyYXRpb247XG5cbiAgICAgIGlmICh0aW1lIDwgMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lZGlhSW5kZXg6IDAsXG4gICAgICAgICAgc3RhcnRUaW1lOiBjdXJyZW50VGltZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXJ0SW5kZXggPSAwO1xuICB9IC8vIFdhbGsgZm9yd2FyZCBmcm9tIHN0YXJ0SW5kZXggaW4gdGhlIHBsYXlsaXN0LCBzdWJ0cmFjdGluZyBkdXJhdGlvbnNcbiAgLy8gdW50aWwgd2UgZmluZCBhIHNlZ21lbnQgdGhhdCBjb250YWlucyBgdGltZWAgYW5kIHJldHVybiBpdFxuXG5cbiAgZm9yIChpID0gc3RhcnRJbmRleDsgaSA8IG51bVNlZ21lbnRzOyBpKyspIHtcbiAgICBzZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbaV07XG4gICAgdGltZSAtPSBzZWdtZW50LmR1cmF0aW9uICsgVElNRV9GVURHRV9GQUNUT1I7XG5cbiAgICBpZiAodGltZSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lZGlhSW5kZXg6IGksXG4gICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lICsgc3VtRHVyYXRpb25zKHBsYXlsaXN0LCBzdGFydEluZGV4LCBpKVxuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gV2UgYXJlIG91dCBvZiBwb3NzaWJsZSBjYW5kaWRhdGVzIHNvIGxvYWQgdGhlIGxhc3Qgb25lLi4uXG5cblxuICByZXR1cm4ge1xuICAgIG1lZGlhSW5kZXg6IG51bVNlZ21lbnRzIC0gMSxcbiAgICBzdGFydFRpbWU6IGN1cnJlbnRUaW1lXG4gIH07XG59O1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBwbGF5bGlzdCBpcyBibGFja2xpc3RlZCBvciBub3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IHRoZSBtZWRpYSBwbGF5bGlzdCBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgdGhlIHBsYXlsaXN0IGlzIGJsYWNrbGlzdGVkIG9yIG5vdFxuICogQGZ1bmN0aW9uIGlzQmxhY2tsaXN0ZWRcbiAqL1xuXG5cbnZhciBpc0JsYWNrbGlzdGVkID0gZnVuY3Rpb24gaXNCbGFja2xpc3RlZChwbGF5bGlzdCkge1xuICByZXR1cm4gcGxheWxpc3QuZXhjbHVkZVVudGlsICYmIHBsYXlsaXN0LmV4Y2x1ZGVVbnRpbCA+IERhdGUubm93KCk7XG59O1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBwbGF5bGlzdCBpcyBjb21wYXRpYmxlIHdpdGggY3VycmVudCBwbGF5YmFjayBjb25maWd1cmF0aW9uIG9yIGhhc1xuICogYmVlbiBibGFja2xpc3RlZCBwZXJtYW5lbnRseSBmb3IgYmVpbmcgaW5jb21wYXRpYmxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCB0aGUgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBwbGF5bGlzdCBpcyBpbmNvbXBhdGlibGUgb3Igbm90XG4gKiBAZnVuY3Rpb24gaXNJbmNvbXBhdGlibGVcbiAqL1xuXG5cbnZhciBpc0luY29tcGF0aWJsZSA9IGZ1bmN0aW9uIGlzSW5jb21wYXRpYmxlKHBsYXlsaXN0KSB7XG4gIHJldHVybiBwbGF5bGlzdC5leGNsdWRlVW50aWwgJiYgcGxheWxpc3QuZXhjbHVkZVVudGlsID09PSBJbmZpbml0eTtcbn07XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIHBsYXlsaXN0IGlzIGVuYWJsZWQgb3Igbm90LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCB0aGUgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBwbGF5bGlzdCBpcyBlbmFibGVkIG9yIG5vdFxuICogQGZ1bmN0aW9uIGlzRW5hYmxlZFxuICovXG5cblxudmFyIGlzRW5hYmxlZCA9IGZ1bmN0aW9uIGlzRW5hYmxlZChwbGF5bGlzdCkge1xuICB2YXIgYmxhY2tsaXN0ZWQgPSBpc0JsYWNrbGlzdGVkKHBsYXlsaXN0KTtcbiAgcmV0dXJuICFwbGF5bGlzdC5kaXNhYmxlZCAmJiAhYmxhY2tsaXN0ZWQ7XG59O1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBwbGF5bGlzdCBoYXMgYmVlbiBtYW51YWxseSBkaXNhYmxlZCB0aHJvdWdoIHRoZSByZXByZXNlbnRhdGlvbnMgYXBpLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCB0aGUgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBwbGF5bGlzdCBpcyBkaXNhYmxlZCBtYW51YWxseSBvciBub3RcbiAqIEBmdW5jdGlvbiBpc0Rpc2FibGVkXG4gKi9cblxuXG52YXIgaXNEaXNhYmxlZCA9IGZ1bmN0aW9uIGlzRGlzYWJsZWQocGxheWxpc3QpIHtcbiAgcmV0dXJuIHBsYXlsaXN0LmRpc2FibGVkO1xufTtcbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHBsYXlsaXN0IGlzIGFuIEFFUyBlbmNyeXB0ZWQgSExTIHN0cmVhbVxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgaXQncyBhbiBBRVMgZW5jcnlwdGVkIEhMUyBzdHJlYW1cbiAqL1xuXG5cbnZhciBpc0FlcyA9IGZ1bmN0aW9uIGlzQWVzKG1lZGlhKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVkaWEuc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobWVkaWEuc2VnbWVudHNbaV0ua2V5KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHBsYXlsaXN0IGhhcyBhIHZhbHVlIGZvciB0aGUgc3BlY2lmaWVkIGF0dHJpYnV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyXG4gKiAgICAgICAgQXR0cmlidXRlIHRvIGNoZWNrIGZvclxuICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0XG4gKiAgICAgICAgVGhlIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2hldGhlciB0aGUgcGxheWxpc3QgY29udGFpbnMgYSB2YWx1ZSBmb3IgdGhlIGF0dHJpYnV0ZSBvciBub3RcbiAqIEBmdW5jdGlvbiBoYXNBdHRyaWJ1dGVcbiAqL1xuXG5cbnZhciBoYXNBdHRyaWJ1dGUgPSBmdW5jdGlvbiBoYXNBdHRyaWJ1dGUoYXR0ciwgcGxheWxpc3QpIHtcbiAgcmV0dXJuIHBsYXlsaXN0LmF0dHJpYnV0ZXMgJiYgcGxheWxpc3QuYXR0cmlidXRlc1thdHRyXTtcbn07XG4vKipcbiAqIEVzdGltYXRlcyB0aGUgdGltZSByZXF1aXJlZCB0byBjb21wbGV0ZSBhIHNlZ21lbnQgZG93bmxvYWQgZnJvbSB0aGUgc3BlY2lmaWVkIHBsYXlsaXN0XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHNlZ21lbnREdXJhdGlvblxuICogICAgICAgIER1cmF0aW9uIG9mIHJlcXVlc3RlZCBzZWdtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gYmFuZHdpZHRoXG4gKiAgICAgICAgQ3VycmVudCBtZWFzdXJlZCBiYW5kd2lkdGggb2YgdGhlIHBsYXllclxuICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0XG4gKiAgICAgICAgVGhlIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICogQHBhcmFtIHtudW1iZXI9fSBieXRlc1JlY2VpdmVkXG4gKiAgICAgICAgTnVtYmVyIG9mIGJ5dGVzIGFscmVhZHkgcmVjZWl2ZWQgZm9yIHRoZSByZXF1ZXN0LiBEZWZhdWx0cyB0byAwXG4gKiBAcmV0dXJuIHtudW1iZXJ8TmFOfVxuICogICAgICAgICBUaGUgZXN0aW1hdGVkIHRpbWUgdG8gcmVxdWVzdCB0aGUgc2VnbWVudC4gTmFOIGlmIGJhbmR3aWR0aCBpbmZvcm1hdGlvbiBmb3JcbiAqICAgICAgICAgdGhlIGdpdmVuIHBsYXlsaXN0IGlzIHVuYXZhaWxhYmxlXG4gKiBAZnVuY3Rpb24gZXN0aW1hdGVTZWdtZW50UmVxdWVzdFRpbWVcbiAqL1xuXG5cbnZhciBlc3RpbWF0ZVNlZ21lbnRSZXF1ZXN0VGltZSA9IGZ1bmN0aW9uIGVzdGltYXRlU2VnbWVudFJlcXVlc3RUaW1lKHNlZ21lbnREdXJhdGlvbiwgYmFuZHdpZHRoLCBwbGF5bGlzdCwgYnl0ZXNSZWNlaXZlZCkge1xuICBpZiAoYnl0ZXNSZWNlaXZlZCA9PT0gdm9pZCAwKSB7XG4gICAgYnl0ZXNSZWNlaXZlZCA9IDA7XG4gIH1cblxuICBpZiAoIWhhc0F0dHJpYnV0ZSgnQkFORFdJRFRIJywgcGxheWxpc3QpKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBzaXplID0gc2VnbWVudER1cmF0aW9uICogcGxheWxpc3QuYXR0cmlidXRlcy5CQU5EV0lEVEg7XG4gIHJldHVybiAoc2l6ZSAtIGJ5dGVzUmVjZWl2ZWQgKiA4KSAvIGJhbmR3aWR0aDtcbn07XG4vKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHBsYXlsaXN0IGlzIHRoZSBsb3dlc3QgcmVuZGl0aW9uXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBvbiBsb3dlc3QgcmVuZGl0aW9uXG4gKi9cblxuXG52YXIgaXNMb3dlc3RFbmFibGVkUmVuZGl0aW9uID0gZnVuY3Rpb24gaXNMb3dlc3RFbmFibGVkUmVuZGl0aW9uKG1hc3RlciwgbWVkaWEpIHtcbiAgaWYgKG1hc3Rlci5wbGF5bGlzdHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgY3VycmVudEJhbmR3aWR0aCA9IG1lZGlhLmF0dHJpYnV0ZXMuQkFORFdJRFRIIHx8IE51bWJlci5NQVhfVkFMVUU7XG4gIHJldHVybiBtYXN0ZXIucGxheWxpc3RzLmZpbHRlcihmdW5jdGlvbiAocGxheWxpc3QpIHtcbiAgICBpZiAoIWlzRW5hYmxlZChwbGF5bGlzdCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHBsYXlsaXN0LmF0dHJpYnV0ZXMuQkFORFdJRFRIIHx8IDApIDwgY3VycmVudEJhbmR3aWR0aDtcbiAgfSkubGVuZ3RoID09PSAwO1xufTsgLy8gZXhwb3J0c1xuXG5cbnZhciBQbGF5bGlzdCA9IHtcbiAgZHVyYXRpb246IGR1cmF0aW9uLFxuICBzZWVrYWJsZTogc2Vla2FibGUsXG4gIHNhZmVMaXZlSW5kZXg6IHNhZmVMaXZlSW5kZXgsXG4gIGdldE1lZGlhSW5mb0ZvclRpbWU6IGdldE1lZGlhSW5mb0ZvclRpbWUsXG4gIGlzRW5hYmxlZDogaXNFbmFibGVkLFxuICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkLFxuICBpc0JsYWNrbGlzdGVkOiBpc0JsYWNrbGlzdGVkLFxuICBpc0luY29tcGF0aWJsZTogaXNJbmNvbXBhdGlibGUsXG4gIHBsYXlsaXN0RW5kOiBwbGF5bGlzdEVuZCxcbiAgaXNBZXM6IGlzQWVzLFxuICBoYXNBdHRyaWJ1dGU6IGhhc0F0dHJpYnV0ZSxcbiAgZXN0aW1hdGVTZWdtZW50UmVxdWVzdFRpbWU6IGVzdGltYXRlU2VnbWVudFJlcXVlc3RUaW1lLFxuICBpc0xvd2VzdEVuYWJsZWRSZW5kaXRpb246IGlzTG93ZXN0RW5hYmxlZFJlbmRpdGlvblxufTtcbi8qKlxuICogQGZpbGUgeGhyLmpzXG4gKi9cblxudmFyIHZpZGVvanNYSFIgPSB2aWRlb2pzJDEueGhyLFxuICAgIG1lcmdlT3B0aW9ucyQxJDEgPSB2aWRlb2pzJDEubWVyZ2VPcHRpb25zO1xuXG52YXIgY2FsbGJhY2tXcmFwcGVyID0gZnVuY3Rpb24gY2FsbGJhY2tXcmFwcGVyKHJlcXVlc3QsIGVycm9yLCByZXNwb25zZSwgY2FsbGJhY2spIHtcbiAgdmFyIHJlcVJlc3BvbnNlID0gcmVxdWVzdC5yZXNwb25zZVR5cGUgPT09ICdhcnJheWJ1ZmZlcicgPyByZXF1ZXN0LnJlc3BvbnNlIDogcmVxdWVzdC5yZXNwb25zZVRleHQ7XG5cbiAgaWYgKCFlcnJvciAmJiByZXFSZXNwb25zZSkge1xuICAgIHJlcXVlc3QucmVzcG9uc2VUaW1lID0gRGF0ZS5ub3coKTtcbiAgICByZXF1ZXN0LnJvdW5kVHJpcFRpbWUgPSByZXF1ZXN0LnJlc3BvbnNlVGltZSAtIHJlcXVlc3QucmVxdWVzdFRpbWU7XG4gICAgcmVxdWVzdC5ieXRlc1JlY2VpdmVkID0gcmVxUmVzcG9uc2UuYnl0ZUxlbmd0aCB8fCByZXFSZXNwb25zZS5sZW5ndGg7XG5cbiAgICBpZiAoIXJlcXVlc3QuYmFuZHdpZHRoKSB7XG4gICAgICByZXF1ZXN0LmJhbmR3aWR0aCA9IE1hdGguZmxvb3IocmVxdWVzdC5ieXRlc1JlY2VpdmVkIC8gcmVxdWVzdC5yb3VuZFRyaXBUaW1lICogOCAqIDEwMDApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyZXNwb25zZS5oZWFkZXJzKSB7XG4gICAgcmVxdWVzdC5yZXNwb25zZUhlYWRlcnMgPSByZXNwb25zZS5oZWFkZXJzO1xuICB9IC8vIHZpZGVvanMueGhyIG5vdyB1c2VzIGEgc3BlY2lmaWMgY29kZSBvbiB0aGUgZXJyb3JcbiAgLy8gb2JqZWN0IHRvIHNpZ25hbCB0aGF0IGEgcmVxdWVzdCBoYXMgdGltZWQgb3V0IGluc3RlYWRcbiAgLy8gb2Ygc2V0dGluZyBhIGJvb2xlYW4gb24gdGhlIHJlcXVlc3Qgb2JqZWN0XG5cblxuICBpZiAoZXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gJ0VUSU1FRE9VVCcpIHtcbiAgICByZXF1ZXN0LnRpbWVkb3V0ID0gdHJ1ZTtcbiAgfSAvLyB2aWRlb2pzLnhociBubyBsb25nZXIgY29uc2lkZXJzIHN0YXR1cyBjb2RlcyBvdXRzaWRlIG9mIDIwMCBhbmQgMFxuICAvLyAoZm9yIGZpbGUgdXJpcykgdG8gYmUgZXJyb3JzLCBidXQgdGhlIG9sZCBYSFIgZGlkLCBzbyBlbXVsYXRlIHRoYXRcbiAgLy8gYmVoYXZpb3IuIFN0YXR1cyAyMDYgbWF5IGJlIHVzZWQgaW4gcmVzcG9uc2UgdG8gYnl0ZXJhbmdlIHJlcXVlc3RzLlxuXG5cbiAgaWYgKCFlcnJvciAmJiAhcmVxdWVzdC5hYm9ydGVkICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDIwMCAmJiByZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDYgJiYgcmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMCkge1xuICAgIGVycm9yID0gbmV3IEVycm9yKCdYSFIgRmFpbGVkIHdpdGggYSByZXNwb25zZSBvZjogJyArIChyZXF1ZXN0ICYmIChyZXFSZXNwb25zZSB8fCByZXF1ZXN0LnJlc3BvbnNlVGV4dCkpKTtcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yLCByZXF1ZXN0KTtcbn07XG5cbnZhciB4aHJGYWN0b3J5ID0gZnVuY3Rpb24geGhyRmFjdG9yeSgpIHtcbiAgdmFyIHhociA9IGZ1bmN0aW9uIFhockZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgLy8gQWRkIGEgZGVmYXVsdCB0aW1lb3V0XG4gICAgb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyQxJDEoe1xuICAgICAgdGltZW91dDogNDVlM1xuICAgIH0sIG9wdGlvbnMpOyAvLyBBbGxvdyBhbiBvcHRpb25hbCB1c2VyLXNwZWNpZmllZCBmdW5jdGlvbiB0byBtb2RpZnkgdGhlIG9wdGlvblxuICAgIC8vIG9iamVjdCBiZWZvcmUgd2UgY29uc3RydWN0IHRoZSB4aHIgcmVxdWVzdFxuXG4gICAgdmFyIGJlZm9yZVJlcXVlc3QgPSBYaHJGdW5jdGlvbi5iZWZvcmVSZXF1ZXN0IHx8IHZpZGVvanMkMS5WaHMueGhyLmJlZm9yZVJlcXVlc3Q7XG5cbiAgICBpZiAoYmVmb3JlUmVxdWVzdCAmJiB0eXBlb2YgYmVmb3JlUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIG5ld09wdGlvbnMgPSBiZWZvcmVSZXF1ZXN0KG9wdGlvbnMpO1xuXG4gICAgICBpZiAobmV3T3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gbmV3T3B0aW9ucztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IHZpZGVvanNYSFIob3B0aW9ucywgZnVuY3Rpb24gKGVycm9yLCByZXNwb25zZSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrV3JhcHBlcihyZXF1ZXN0LCBlcnJvciwgcmVzcG9uc2UsIGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgICB2YXIgb3JpZ2luYWxBYm9ydCA9IHJlcXVlc3QuYWJvcnQ7XG5cbiAgICByZXF1ZXN0LmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmVxdWVzdC5hYm9ydGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBvcmlnaW5hbEFib3J0LmFwcGx5KHJlcXVlc3QsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIHJlcXVlc3QudXJpID0gb3B0aW9ucy51cmk7XG4gICAgcmVxdWVzdC5yZXF1ZXN0VGltZSA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH07XG5cbiAgcmV0dXJuIHhocjtcbn07XG4vKipcbiAqIFR1cm5zIHNlZ21lbnQgYnl0ZXJhbmdlIGludG8gYSBzdHJpbmcgc3VpdGFibGUgZm9yIHVzZSBpblxuICogSFRUUCBSYW5nZSByZXF1ZXN0c1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBieXRlcmFuZ2UgLSBhbiBvYmplY3Qgd2l0aCB0d28gdmFsdWVzIGRlZmluaW5nIHRoZSBzdGFydCBhbmQgZW5kXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgYSBieXRlLXJhbmdlXG4gKi9cblxuXG52YXIgYnl0ZXJhbmdlU3RyID0gZnVuY3Rpb24gYnl0ZXJhbmdlU3RyKGJ5dGVyYW5nZSkge1xuICAvLyBgYnl0ZXJhbmdlRW5kYCBpcyBvbmUgbGVzcyB0aGFuIGBvZmZzZXQgKyBsZW5ndGhgIGJlY2F1c2UgdGhlIEhUVFAgcmFuZ2VcbiAgLy8gaGVhZGVyIHVzZXMgaW5jbHVzaXZlIHJhbmdlc1xuICB2YXIgYnl0ZXJhbmdlRW5kID0gYnl0ZXJhbmdlLm9mZnNldCArIGJ5dGVyYW5nZS5sZW5ndGggLSAxO1xuICB2YXIgYnl0ZXJhbmdlU3RhcnQgPSBieXRlcmFuZ2Uub2Zmc2V0O1xuICByZXR1cm4gJ2J5dGVzPScgKyBieXRlcmFuZ2VTdGFydCArICctJyArIGJ5dGVyYW5nZUVuZDtcbn07XG4vKipcbiAqIERlZmluZXMgaGVhZGVycyBmb3IgdXNlIGluIHRoZSB4aHIgcmVxdWVzdCBmb3IgYSBwYXJ0aWN1bGFyIHNlZ21lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnQgLSBhIHNpbXBsaWZpZWQgY29weSBvZiB0aGUgc2VnbWVudEluZm8gb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gU2VnbWVudExvYWRlclxuICovXG5cblxudmFyIHNlZ21lbnRYaHJIZWFkZXJzID0gZnVuY3Rpb24gc2VnbWVudFhockhlYWRlcnMoc2VnbWVudCkge1xuICB2YXIgaGVhZGVycyA9IHt9O1xuXG4gIGlmIChzZWdtZW50LmJ5dGVyYW5nZSkge1xuICAgIGhlYWRlcnMuUmFuZ2UgPSBieXRlcmFuZ2VTdHIoc2VnbWVudC5ieXRlcmFuZ2UpO1xuICB9XG5cbiAgcmV0dXJuIGhlYWRlcnM7XG59O1xuLyoqXG4gKiBAZmlsZSBiaW4tdXRpbHMuanNcbiAqL1xuXG4vKipcbiAqIGNvbnZlcnQgYSBUaW1lUmFuZ2UgdG8gdGV4dFxuICpcbiAqIEBwYXJhbSB7VGltZVJhbmdlfSByYW5nZSB0aGUgdGltZXJhbmdlIHRvIHVzZSBmb3IgY29udmVyc2lvblxuICogQHBhcmFtIHtudW1iZXJ9IGkgdGhlIGl0ZXJhdG9yIG9uIHRoZSByYW5nZSB0byBjb252ZXJ0XG4gKi9cblxuXG52YXIgdGV4dFJhbmdlID0gZnVuY3Rpb24gdGV4dFJhbmdlKHJhbmdlLCBpKSB7XG4gIHJldHVybiByYW5nZS5zdGFydChpKSArICctJyArIHJhbmdlLmVuZChpKTtcbn07XG4vKipcbiAqIGZvcm1hdCBhIG51bWJlciBhcyBoZXggc3RyaW5nXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGUgVGhlIG51bWJlclxuICogQHBhcmFtIHtudW1iZXJ9IGkgdGhlIGl0ZXJhdG9yXG4gKi9cblxuXG52YXIgZm9ybWF0SGV4U3RyaW5nID0gZnVuY3Rpb24gZm9ybWF0SGV4U3RyaW5nKGUsIGkpIHtcbiAgdmFyIHZhbHVlID0gZS50b1N0cmluZygxNik7XG4gIHJldHVybiAnMDAnLnN1YnN0cmluZygwLCAyIC0gdmFsdWUubGVuZ3RoKSArIHZhbHVlICsgKGkgJSAyID8gJyAnIDogJycpO1xufTtcblxudmFyIGZvcm1hdEFzY2lpU3RyaW5nID0gZnVuY3Rpb24gZm9ybWF0QXNjaWlTdHJpbmcoZSkge1xuICBpZiAoZSA+PSAweDIwICYmIGUgPCAweDdlKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZSk7XG4gIH1cblxuICByZXR1cm4gJy4nO1xufTtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgZm9yIHNlbmRpbmcgdG8gYSB3ZWIgd29ya2VyIG1vZGlmeWluZyBwcm9wZXJ0aWVzIHRoYXQgYXJlIFR5cGVkQXJyYXlzXG4gKiBpbnRvIGEgbmV3IG9iamVjdCB3aXRoIHNlcGVyYXRlZCBwcm9wZXJ0aWVzIGZvciB0aGUgYnVmZmVyLCBieXRlT2Zmc2V0LCBhbmQgYnl0ZUxlbmd0aC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWVzc2FnZVxuICogICAgICAgIE9iamVjdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgdG8gc2VuZCB0byB0aGUgd2ViIHdvcmtlclxuICogQHJldHVybiB7T2JqZWN0fVxuICogICAgICAgICBNb2RpZmllZCBtZXNzYWdlIHdpdGggVHlwZWRBcnJheSB2YWx1ZXMgZXhwYW5kZWRcbiAqIEBmdW5jdGlvbiBjcmVhdGVUcmFuc2ZlcmFibGVNZXNzYWdlXG4gKi9cblxuXG52YXIgY3JlYXRlVHJhbnNmZXJhYmxlTWVzc2FnZSA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zZmVyYWJsZU1lc3NhZ2UobWVzc2FnZSkge1xuICB2YXIgdHJhbnNmZXJhYmxlID0ge307XG4gIE9iamVjdC5rZXlzKG1lc3NhZ2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IG1lc3NhZ2Vba2V5XTtcblxuICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgICB0cmFuc2ZlcmFibGVba2V5XSA9IHtcbiAgICAgICAgYnl0ZXM6IHZhbHVlLmJ1ZmZlcixcbiAgICAgICAgYnl0ZU9mZnNldDogdmFsdWUuYnl0ZU9mZnNldCxcbiAgICAgICAgYnl0ZUxlbmd0aDogdmFsdWUuYnl0ZUxlbmd0aFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNmZXJhYmxlW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdHJhbnNmZXJhYmxlO1xufTtcbi8qKlxuICogUmV0dXJucyBhIHVuaXF1ZSBzdHJpbmcgaWRlbnRpZmllciBmb3IgYSBtZWRpYSBpbml0aWFsaXphdGlvblxuICogc2VnbWVudC5cbiAqL1xuXG5cbnZhciBpbml0U2VnbWVudElkID0gZnVuY3Rpb24gaW5pdFNlZ21lbnRJZChpbml0U2VnbWVudCkge1xuICB2YXIgYnl0ZXJhbmdlID0gaW5pdFNlZ21lbnQuYnl0ZXJhbmdlIHx8IHtcbiAgICBsZW5ndGg6IEluZmluaXR5LFxuICAgIG9mZnNldDogMFxuICB9O1xuICByZXR1cm4gW2J5dGVyYW5nZS5sZW5ndGgsIGJ5dGVyYW5nZS5vZmZzZXQsIGluaXRTZWdtZW50LnJlc29sdmVkVXJpXS5qb2luKCcsJyk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgdW5pcXVlIHN0cmluZyBpZGVudGlmaWVyIGZvciBhIG1lZGlhIHNlZ21lbnQga2V5LlxuICovXG5cblxudmFyIHNlZ21lbnRLZXlJZCA9IGZ1bmN0aW9uIHNlZ21lbnRLZXlJZChrZXkpIHtcbiAgcmV0dXJuIGtleS5yZXNvbHZlZFVyaTtcbn07XG4vKipcbiAqIHV0aWxzIHRvIGhlbHAgZHVtcCBiaW5hcnkgZGF0YSB0byB0aGUgY29uc29sZVxuICovXG5cblxudmFyIGhleER1bXAgPSBmdW5jdGlvbiBoZXhEdW1wKGRhdGEpIHtcbiAgdmFyIGJ5dGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZGF0YSk7XG4gIHZhciBzdGVwID0gMTY7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIGhleDtcbiAgdmFyIGFzY2lpO1xuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgYnl0ZXMubGVuZ3RoIC8gc3RlcDsgaisrKSB7XG4gICAgaGV4ID0gYnl0ZXMuc2xpY2UoaiAqIHN0ZXAsIGogKiBzdGVwICsgc3RlcCkubWFwKGZvcm1hdEhleFN0cmluZykuam9pbignJyk7XG4gICAgYXNjaWkgPSBieXRlcy5zbGljZShqICogc3RlcCwgaiAqIHN0ZXAgKyBzdGVwKS5tYXAoZm9ybWF0QXNjaWlTdHJpbmcpLmpvaW4oJycpO1xuICAgIHJlc3VsdCArPSBoZXggKyAnICcgKyBhc2NpaSArICdcXG4nO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciB0YWdEdW1wID0gZnVuY3Rpb24gdGFnRHVtcChfcmVmKSB7XG4gIHZhciBieXRlcyA9IF9yZWYuYnl0ZXM7XG4gIHJldHVybiBoZXhEdW1wKGJ5dGVzKTtcbn07XG5cbnZhciB0ZXh0UmFuZ2VzID0gZnVuY3Rpb24gdGV4dFJhbmdlcyhyYW5nZXMpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0ICs9IHRleHRSYW5nZShyYW5nZXMsIGkpICsgJyAnO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciB1dGlscyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBjcmVhdGVUcmFuc2ZlcmFibGVNZXNzYWdlOiBjcmVhdGVUcmFuc2ZlcmFibGVNZXNzYWdlLFxuICBpbml0U2VnbWVudElkOiBpbml0U2VnbWVudElkLFxuICBzZWdtZW50S2V5SWQ6IHNlZ21lbnRLZXlJZCxcbiAgaGV4RHVtcDogaGV4RHVtcCxcbiAgdGFnRHVtcDogdGFnRHVtcCxcbiAgdGV4dFJhbmdlczogdGV4dFJhbmdlc1xufSk7IC8vIFRPRE8gaGFuZGxlIGZtcDQgY2FzZSB3aGVyZSB0aGUgdGltaW5nIGluZm8gaXMgYWNjdXJhdGUgYW5kIGRvZXNuJ3QgaW52b2x2ZSB0cmFuc211eFxuLy8gMjUlIHdhcyBhcmJpdHJhcmlseSBjaG9zZW4sIGFuZCBtYXkgbmVlZCB0byBiZSByZWZpbmVkIG92ZXIgdGltZS5cblxudmFyIFNFR01FTlRfRU5EX0ZVREdFX1BFUkNFTlQgPSAwLjI1O1xuLyoqXG4gKiBDb252ZXJ0cyBhIHBsYXllciB0aW1lIChhbnkgdGltZSB0aGF0IGNhbiBiZSBnb3R0ZW4vc2V0IGZyb20gcGxheWVyLmN1cnJlbnRUaW1lKCksXG4gKiBlLmcuLCBhbnkgdGltZSB3aXRoaW4gcGxheWVyLnNlZWthYmxlKCkuc3RhcnQoMCkgdG8gcGxheWVyLnNlZWthYmxlKCkuZW5kKDApKSB0byBhXG4gKiBwcm9ncmFtIHRpbWUgKGFueSB0aW1lIHJlZmVyZW5jaW5nIHRoZSByZWFsIHdvcmxkIChlLmcuLCBFWFQtWC1QUk9HUkFNLURBVEUtVElNRSkpLlxuICpcbiAqIFRoZSBjb250YWluaW5nIHNlZ21lbnQgaXMgcmVxdWlyZWQgYXMgdGhlIEVYVC1YLVBST0dSQU0tREFURS1USU1FIHNlcnZlcyBhcyBhbiBcImFuY2hvclxuICogcG9pbnRcIiAoYSBwb2ludCB3aGVyZSB3ZSBoYXZlIGEgbWFwcGluZyBmcm9tIHByb2dyYW0gdGltZSB0byBwbGF5ZXIgdGltZSwgd2l0aCBwbGF5ZXJcbiAqIHRpbWUgYmVpbmcgdGhlIHBvc3QgdHJhbnNtdXggc3RhcnQgb2YgdGhlIHNlZ21lbnQpLlxuICpcbiAqIEZvciBtb3JlIGRldGFpbHMsIHNlZSBbdGhpcyBkb2NdKC4uLy4uL2RvY3MvcHJvZ3JhbS10aW1lLWZyb20tcGxheWVyLXRpbWUubWQpLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBwbGF5ZXJUaW1lIHRoZSBwbGF5ZXIgdGltZVxuICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnQgdGhlIHNlZ21lbnQgd2hpY2ggY29udGFpbnMgdGhlIHBsYXllciB0aW1lXG4gKiBAcmV0dXJuIHtEYXRlfSBwcm9ncmFtIHRpbWVcbiAqL1xuXG52YXIgcGxheWVyVGltZVRvUHJvZ3JhbVRpbWUgPSBmdW5jdGlvbiBwbGF5ZXJUaW1lVG9Qcm9ncmFtVGltZShwbGF5ZXJUaW1lLCBzZWdtZW50KSB7XG4gIGlmICghc2VnbWVudC5kYXRlVGltZU9iamVjdCkge1xuICAgIC8vIENhbid0IGNvbnZlcnQgd2l0aG91dCBhbiBcImFuY2hvciBwb2ludFwiIGZvciB0aGUgcHJvZ3JhbSB0aW1lIChpLmUuLCBhIHRpbWUgdGhhdCBjYW5cbiAgICAvLyBiZSB1c2VkIHRvIG1hcCB0aGUgc3RhcnQgb2YgYSBzZWdtZW50IHdpdGggYSByZWFsIHdvcmxkIHRpbWUpLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHRyYW5zbXV4ZXJQcmVwZW5kZWRTZWNvbmRzID0gc2VnbWVudC52aWRlb1RpbWluZ0luZm8udHJhbnNtdXhlclByZXBlbmRlZFNlY29uZHM7XG4gIHZhciB0cmFuc211eGVkU3RhcnQgPSBzZWdtZW50LnZpZGVvVGltaW5nSW5mby50cmFuc211eGVkUHJlc2VudGF0aW9uU3RhcnQ7IC8vIGdldCB0aGUgc3RhcnQgb2YgdGhlIGNvbnRlbnQgZnJvbSBiZWZvcmUgb2xkIGNvbnRlbnQgaXMgcHJlcGVuZGVkXG5cbiAgdmFyIHN0YXJ0T2ZTZWdtZW50ID0gdHJhbnNtdXhlZFN0YXJ0ICsgdHJhbnNtdXhlclByZXBlbmRlZFNlY29uZHM7XG4gIHZhciBvZmZzZXRGcm9tU2VnbWVudFN0YXJ0ID0gcGxheWVyVGltZSAtIHN0YXJ0T2ZTZWdtZW50O1xuICByZXR1cm4gbmV3IERhdGUoc2VnbWVudC5kYXRlVGltZU9iamVjdC5nZXRUaW1lKCkgKyBvZmZzZXRGcm9tU2VnbWVudFN0YXJ0ICogMTAwMCk7XG59O1xuXG52YXIgb3JpZ2luYWxTZWdtZW50VmlkZW9EdXJhdGlvbiA9IGZ1bmN0aW9uIG9yaWdpbmFsU2VnbWVudFZpZGVvRHVyYXRpb24odmlkZW9UaW1pbmdJbmZvKSB7XG4gIHJldHVybiB2aWRlb1RpbWluZ0luZm8udHJhbnNtdXhlZFByZXNlbnRhdGlvbkVuZCAtIHZpZGVvVGltaW5nSW5mby50cmFuc211eGVkUHJlc2VudGF0aW9uU3RhcnQgLSB2aWRlb1RpbWluZ0luZm8udHJhbnNtdXhlclByZXBlbmRlZFNlY29uZHM7XG59O1xuLyoqXG4gKiBGaW5kcyBhIHNlZ21lbnQgdGhhdCBjb250YWlucyB0aGUgdGltZSByZXF1ZXN0ZWQgZ2l2ZW4gYXMgYW4gSVNPLTg2MDEgc3RyaW5nLiBUaGVcbiAqIHJldHVybmVkIHNlZ21lbnQgbWlnaHQgYmUgYW4gZXN0aW1hdGUgb3IgYW4gYWNjdXJhdGUgbWF0Y2guXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb2dyYW1UaW1lIFRoZSBJU08tODYwMSBwcm9ncmFtVGltZSB0byBmaW5kIGEgbWF0Y2ggZm9yXG4gKiBAcGFyYW0ge09iamVjdH0gcGxheWxpc3QgQSBwbGF5bGlzdCBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICovXG5cblxudmFyIGZpbmRTZWdtZW50Rm9yUHJvZ3JhbVRpbWUgPSBmdW5jdGlvbiBmaW5kU2VnbWVudEZvclByb2dyYW1UaW1lKHByb2dyYW1UaW1lLCBwbGF5bGlzdCkge1xuICAvLyBBc3N1bXB0aW9uczpcbiAgLy8gIC0gdmVyaWZ5UHJvZ3JhbURhdGVUaW1lVGFncyBoYXMgYWxyZWFkeSBiZWVuIHJ1blxuICAvLyAgLSBsaXZlIHN0cmVhbXMgaGF2ZSBiZWVuIHN0YXJ0ZWRcbiAgdmFyIGRhdGVUaW1lT2JqZWN0O1xuXG4gIHRyeSB7XG4gICAgZGF0ZVRpbWVPYmplY3QgPSBuZXcgRGF0ZShwcm9ncmFtVGltZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghcGxheWxpc3QgfHwgIXBsYXlsaXN0LnNlZ21lbnRzIHx8IHBsYXlsaXN0LnNlZ21lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHNlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1swXTtcblxuICBpZiAoZGF0ZVRpbWVPYmplY3QgPCBzZWdtZW50LmRhdGVUaW1lT2JqZWN0KSB7XG4gICAgLy8gUmVxdWVzdGVkIHRpbWUgaXMgYmVmb3JlIHN0cmVhbSBzdGFydC5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgc2VnbWVudCA9IHBsYXlsaXN0LnNlZ21lbnRzW2ldO1xuICAgIHZhciBuZXh0U2VnbWVudFN0YXJ0ID0gcGxheWxpc3Quc2VnbWVudHNbaSArIDFdLmRhdGVUaW1lT2JqZWN0O1xuXG4gICAgaWYgKGRhdGVUaW1lT2JqZWN0IDwgbmV4dFNlZ21lbnRTdGFydCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxhc3RTZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoIC0gMV07XG4gIHZhciBsYXN0U2VnbWVudFN0YXJ0ID0gbGFzdFNlZ21lbnQuZGF0ZVRpbWVPYmplY3Q7XG4gIHZhciBsYXN0U2VnbWVudER1cmF0aW9uID0gbGFzdFNlZ21lbnQudmlkZW9UaW1pbmdJbmZvID8gb3JpZ2luYWxTZWdtZW50VmlkZW9EdXJhdGlvbihsYXN0U2VnbWVudC52aWRlb1RpbWluZ0luZm8pIDogbGFzdFNlZ21lbnQuZHVyYXRpb24gKyBsYXN0U2VnbWVudC5kdXJhdGlvbiAqIFNFR01FTlRfRU5EX0ZVREdFX1BFUkNFTlQ7XG4gIHZhciBsYXN0U2VnbWVudEVuZCA9IG5ldyBEYXRlKGxhc3RTZWdtZW50U3RhcnQuZ2V0VGltZSgpICsgbGFzdFNlZ21lbnREdXJhdGlvbiAqIDEwMDApO1xuXG4gIGlmIChkYXRlVGltZU9iamVjdCA+IGxhc3RTZWdtZW50RW5kKSB7XG4gICAgLy8gQmV5b25kIHRoZSBlbmQgb2YgdGhlIHN0cmVhbSwgb3Igb3VyIGJlc3QgZ3Vlc3Mgb2YgdGhlIGVuZCBvZiB0aGUgc3RyZWFtLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGRhdGVUaW1lT2JqZWN0ID4gbGFzdFNlZ21lbnRTdGFydCkge1xuICAgIHNlZ21lbnQgPSBsYXN0U2VnbWVudDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2VnbWVudDogc2VnbWVudCxcbiAgICBlc3RpbWF0ZWRTdGFydDogc2VnbWVudC52aWRlb1RpbWluZ0luZm8gPyBzZWdtZW50LnZpZGVvVGltaW5nSW5mby50cmFuc211eGVkUHJlc2VudGF0aW9uU3RhcnQgOiBQbGF5bGlzdC5kdXJhdGlvbihwbGF5bGlzdCwgcGxheWxpc3QubWVkaWFTZXF1ZW5jZSArIHBsYXlsaXN0LnNlZ21lbnRzLmluZGV4T2Yoc2VnbWVudCkpLFxuICAgIC8vIEFsdGhvdWdoLCBnaXZlbiB0aGF0IGFsbCBzZWdtZW50cyBoYXZlIGFjY3VyYXRlIGRhdGUgdGltZSBvYmplY3RzLCB0aGUgc2VnbWVudFxuICAgIC8vIHNlbGVjdGVkIHNob3VsZCBiZSBhY2N1cmF0ZSwgdW5sZXNzIHRoZSB2aWRlbyBoYXMgYmVlbiB0cmFuc211eGVkIGF0IHNvbWUgcG9pbnRcbiAgICAvLyAoZGV0ZXJtaW5lZCBieSB0aGUgcHJlc2VuY2Ugb2YgdGhlIHZpZGVvVGltaW5nSW5mbyBvYmplY3QpLCB0aGUgc2VnbWVudCdzIFwicGxheWVyXG4gICAgLy8gdGltZVwiICh0aGUgc3RhcnQgdGltZSBpbiB0aGUgcGxheWVyKSBjYW4ndCBiZSBjb25zaWRlcmVkIGFjY3VyYXRlLlxuICAgIHR5cGU6IHNlZ21lbnQudmlkZW9UaW1pbmdJbmZvID8gJ2FjY3VyYXRlJyA6ICdlc3RpbWF0ZSdcbiAgfTtcbn07XG4vKipcbiAqIEZpbmRzIGEgc2VnbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBnaXZlbiBwbGF5ZXIgdGltZShpbiBzZWNvbmRzKS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZSBUaGUgcGxheWVyIHRpbWUgdG8gZmluZCBhIG1hdGNoIGZvclxuICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IEEgcGxheWxpc3Qgb2JqZWN0IHRvIHNlYXJjaCB3aXRoaW5cbiAqL1xuXG5cbnZhciBmaW5kU2VnbWVudEZvclBsYXllclRpbWUgPSBmdW5jdGlvbiBmaW5kU2VnbWVudEZvclBsYXllclRpbWUodGltZSwgcGxheWxpc3QpIHtcbiAgLy8gQXNzdW1wdGlvbnM6XG4gIC8vIC0gdGhlcmUgd2lsbCBhbHdheXMgYmUgYSBzZWdtZW50LmR1cmF0aW9uXG4gIC8vIC0gd2UgY2FuIHN0YXJ0IGZyb20gemVyb1xuICAvLyAtIHNlZ21lbnRzIGFyZSBpbiB0aW1lIG9yZGVyXG4gIGlmICghcGxheWxpc3QgfHwgIXBsYXlsaXN0LnNlZ21lbnRzIHx8IHBsYXlsaXN0LnNlZ21lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHNlZ21lbnRFbmQgPSAwO1xuICB2YXIgc2VnbWVudDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYXlsaXN0LnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2VnbWVudCA9IHBsYXlsaXN0LnNlZ21lbnRzW2ldOyAvLyB2aWRlb1RpbWluZ0luZm8gaXMgc2V0IGFmdGVyIHRoZSBzZWdtZW50IGlzIGRvd25sb2FkZWQgYW5kIHRyYW5zbXV4ZWQsIGFuZFxuICAgIC8vIHNob3VsZCBjb250YWluIHRoZSBtb3N0IGFjY3VyYXRlIHZhbHVlcyB3ZSBoYXZlIGZvciB0aGUgc2VnbWVudCdzIHBsYXllciB0aW1lcy5cbiAgICAvL1xuICAgIC8vIFVzZSB0aGUgYWNjdXJhdGUgdHJhbnNtdXhlZFByZXNlbnRhdGlvbkVuZCB2YWx1ZSBpZiBpdCBpcyBhdmFpbGFibGUsIG90aGVyd2lzZSBmYWxsXG4gICAgLy8gYmFjayB0byBhbiBlc3RpbWF0ZSBiYXNlZCBvbiB0aGUgbWFuaWZlc3QgZGVyaXZlZCAoaW5hY2N1cmF0ZSkgc2VnbWVudC5kdXJhdGlvbiwgdG9cbiAgICAvLyBjYWxjdWxhdGUgYW4gZW5kIHZhbHVlLlxuXG4gICAgc2VnbWVudEVuZCA9IHNlZ21lbnQudmlkZW9UaW1pbmdJbmZvID8gc2VnbWVudC52aWRlb1RpbWluZ0luZm8udHJhbnNtdXhlZFByZXNlbnRhdGlvbkVuZCA6IHNlZ21lbnRFbmQgKyBzZWdtZW50LmR1cmF0aW9uO1xuXG4gICAgaWYgKHRpbWUgPD0gc2VnbWVudEVuZCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxhc3RTZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoIC0gMV07XG5cbiAgaWYgKGxhc3RTZWdtZW50LnZpZGVvVGltaW5nSW5mbyAmJiBsYXN0U2VnbWVudC52aWRlb1RpbWluZ0luZm8udHJhbnNtdXhlZFByZXNlbnRhdGlvbkVuZCA8IHRpbWUpIHtcbiAgICAvLyBUaGUgdGltZSByZXF1ZXN0ZWQgaXMgYmV5b25kIHRoZSBzdHJlYW0gZW5kLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHRpbWUgPiBzZWdtZW50RW5kKSB7XG4gICAgLy8gVGhlIHRpbWUgaXMgd2l0aGluIG9yIGJleW9uZCB0aGUgbGFzdCBzZWdtZW50LlxuICAgIC8vXG4gICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB0aW1lIGlzIGJleW9uZCBhIHJlYXNvbmFibGUgZ3Vlc3Mgb2YgdGhlIGVuZCBvZiB0aGUgc3RyZWFtLlxuICAgIGlmICh0aW1lID4gc2VnbWVudEVuZCArIGxhc3RTZWdtZW50LmR1cmF0aW9uICogU0VHTUVOVF9FTkRfRlVER0VfUEVSQ0VOVCkge1xuICAgICAgLy8gVGVjaG5pY2FsbHksIGJlY2F1c2UgdGhlIGR1cmF0aW9uIHZhbHVlIGlzIG9ubHkgYW4gZXN0aW1hdGUsIHRoZSB0aW1lIG1heSBzdGlsbFxuICAgICAgLy8gZXhpc3QgaW4gdGhlIGxhc3Qgc2VnbWVudCwgaG93ZXZlciwgdGhlcmUgaXNuJ3QgZW5vdWdoIGluZm9ybWF0aW9uIHRvIG1ha2UgZXZlblxuICAgICAgLy8gYSByZWFzb25hYmxlIGVzdGltYXRlLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc2VnbWVudCA9IGxhc3RTZWdtZW50O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZWdtZW50OiBzZWdtZW50LFxuICAgIGVzdGltYXRlZFN0YXJ0OiBzZWdtZW50LnZpZGVvVGltaW5nSW5mbyA/IHNlZ21lbnQudmlkZW9UaW1pbmdJbmZvLnRyYW5zbXV4ZWRQcmVzZW50YXRpb25TdGFydCA6IHNlZ21lbnRFbmQgLSBzZWdtZW50LmR1cmF0aW9uLFxuICAgIC8vIEJlY2F1c2UgdmlkZW9UaW1pbmdJbmZvIGlzIG9ubHkgc2V0IGFmdGVyIHRyYW5zbXV4LCBpdCBpcyB0aGUgb25seSB3YXkgdG8gZ2V0XG4gICAgLy8gYWNjdXJhdGUgdGltaW5nIHZhbHVlcy5cbiAgICB0eXBlOiBzZWdtZW50LnZpZGVvVGltaW5nSW5mbyA/ICdhY2N1cmF0ZScgOiAnZXN0aW1hdGUnXG4gIH07XG59O1xuLyoqXG4gKiBHaXZlcyB0aGUgb2Zmc2V0IG9mIHRoZSBjb21wYXJpc29uVGltZXN0YW1wIGZyb20gdGhlIHByb2dyYW1UaW1lIHRpbWVzdGFtcCBpbiBzZWNvbmRzLlxuICogSWYgdGhlIG9mZnNldCByZXR1cm5lZCBpcyBwb3NpdGl2ZSwgdGhlIHByb2dyYW1UaW1lIG9jY3VycyBhZnRlciB0aGVcbiAqIGNvbXBhcmlzb25UaW1lc3RhbXAuXG4gKiBJZiB0aGUgb2Zmc2V0IGlzIG5lZ2F0aXZlLCB0aGUgcHJvZ3JhbVRpbWUgb2NjdXJzIGJlZm9yZSB0aGUgY29tcGFyaXNvblRpbWVzdGFtcC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcGFyaXNvblRpbWVTdGFtcCBBbiBJU08tODYwMSB0aW1lc3RhbXAgdG8gY29tcGFyZSBhZ2FpbnN0XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvZ3JhbVRpbWUgVGhlIHByb2dyYW1UaW1lIGFzIGFuIElTTy04NjAxIHN0cmluZ1xuICogQHJldHVybiB7bnVtYmVyfSBvZmZzZXRcbiAqL1xuXG5cbnZhciBnZXRPZmZzZXRGcm9tVGltZXN0YW1wID0gZnVuY3Rpb24gZ2V0T2Zmc2V0RnJvbVRpbWVzdGFtcChjb21wYXJpc29uVGltZVN0YW1wLCBwcm9ncmFtVGltZSkge1xuICB2YXIgc2VnbWVudERhdGVUaW1lO1xuICB2YXIgcHJvZ3JhbURhdGVUaW1lO1xuXG4gIHRyeSB7XG4gICAgc2VnbWVudERhdGVUaW1lID0gbmV3IERhdGUoY29tcGFyaXNvblRpbWVTdGFtcCk7XG4gICAgcHJvZ3JhbURhdGVUaW1lID0gbmV3IERhdGUocHJvZ3JhbVRpbWUpO1xuICB9IGNhdGNoIChlKSB7Ly8gVE9ETyBoYW5kbGUgZXJyb3JcbiAgfVxuXG4gIHZhciBzZWdtZW50VGltZUVwb2NoID0gc2VnbWVudERhdGVUaW1lLmdldFRpbWUoKTtcbiAgdmFyIHByb2dyYW1UaW1lRXBvY2ggPSBwcm9ncmFtRGF0ZVRpbWUuZ2V0VGltZSgpO1xuICByZXR1cm4gKHByb2dyYW1UaW1lRXBvY2ggLSBzZWdtZW50VGltZUVwb2NoKSAvIDEwMDA7XG59O1xuLyoqXG4gKiBDaGVja3MgdGhhdCBhbGwgc2VnbWVudHMgaW4gdGhpcyBwbGF5bGlzdCBoYXZlIHByb2dyYW1EYXRlVGltZSB0YWdzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCBBIHBsYXlsaXN0IG9iamVjdFxuICovXG5cblxudmFyIHZlcmlmeVByb2dyYW1EYXRlVGltZVRhZ3MgPSBmdW5jdGlvbiB2ZXJpZnlQcm9ncmFtRGF0ZVRpbWVUYWdzKHBsYXlsaXN0KSB7XG4gIGlmICghcGxheWxpc3Quc2VnbWVudHMgfHwgcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGF5bGlzdC5zZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbaV07XG5cbiAgICBpZiAoIXNlZ21lbnQuZGF0ZVRpbWVPYmplY3QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHByb2dyYW1UaW1lIG9mIHRoZSBtZWRpYSBnaXZlbiBhIHBsYXlsaXN0IGFuZCBhIHBsYXllclRpbWUuXG4gKiBUaGUgcGxheWxpc3QgbXVzdCBoYXZlIHByb2dyYW1EYXRlVGltZSB0YWdzIGZvciBhIHByb2dyYW1EYXRlVGltZSB0YWcgdG8gYmUgcmV0dXJuZWQuXG4gKiBJZiB0aGUgc2VnbWVudHMgY29udGFpbmluZyB0aGUgdGltZSByZXF1ZXN0ZWQgaGF2ZSBub3QgYmVlbiBidWZmZXJlZCB5ZXQsIGFuIGVzdGltYXRlXG4gKiBtYXkgYmUgcmV0dXJuZWQgdG8gdGhlIGNhbGxiYWNrLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncy5wbGF5bGlzdCBBIHBsYXlsaXN0IG9iamVjdCB0byBzZWFyY2ggd2l0aGluXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZSBBIHBsYXllclRpbWUgaW4gc2Vjb25kc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2soZXJyLCBwcm9ncmFtVGltZSlcbiAqIEByZXR1cm4ge3N0cmluZ30gZXJyLm1lc3NhZ2UgQSBkZXRhaWxlZCBlcnJvciBtZXNzYWdlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHByb2dyYW1UaW1lXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHByb2dyYW1UaW1lLm1lZGlhU2Vjb25kcyBUaGUgc3RyZWFtVGltZSBpbiBzZWNvbmRzXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHByb2dyYW1UaW1lLnByb2dyYW1EYXRlVGltZSBUaGUgcHJvZ3JhbVRpbWUgYXMgYW4gSVNPLTg2MDEgU3RyaW5nXG4gKi9cblxuXG52YXIgZ2V0UHJvZ3JhbVRpbWUgPSBmdW5jdGlvbiBnZXRQcm9ncmFtVGltZShfcmVmKSB7XG4gIHZhciBwbGF5bGlzdCA9IF9yZWYucGxheWxpc3QsXG4gICAgICBfcmVmJHRpbWUgPSBfcmVmLnRpbWUsXG4gICAgICB0aW1lID0gX3JlZiR0aW1lID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJHRpbWUsXG4gICAgICBjYWxsYmFjayA9IF9yZWYuY2FsbGJhY2s7XG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZ2V0UHJvZ3JhbVRpbWU6IGNhbGxiYWNrIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgfVxuXG4gIGlmICghcGxheWxpc3QgfHwgdGltZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHtcbiAgICAgIG1lc3NhZ2U6ICdnZXRQcm9ncmFtVGltZTogcGxheWxpc3QgYW5kIHRpbWUgbXVzdCBiZSBwcm92aWRlZCdcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBtYXRjaGVkU2VnbWVudCA9IGZpbmRTZWdtZW50Rm9yUGxheWVyVGltZSh0aW1lLCBwbGF5bGlzdCk7XG5cbiAgaWYgKCFtYXRjaGVkU2VnbWVudCkge1xuICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICBtZXNzYWdlOiAndmFsaWQgcHJvZ3JhbVRpbWUgd2FzIG5vdCBmb3VuZCdcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChtYXRjaGVkU2VnbWVudC50eXBlID09PSAnZXN0aW1hdGUnKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHtcbiAgICAgIG1lc3NhZ2U6ICdBY2N1cmF0ZSBwcm9ncmFtVGltZSBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZC4nICsgJyBQbGVhc2Ugc2VlayB0byBlLnNlZWtUaW1lIGFuZCB0cnkgYWdhaW4nLFxuICAgICAgc2Vla1RpbWU6IG1hdGNoZWRTZWdtZW50LmVzdGltYXRlZFN0YXJ0XG4gICAgfSk7XG4gIH1cblxuICB2YXIgcHJvZ3JhbVRpbWVPYmplY3QgPSB7XG4gICAgbWVkaWFTZWNvbmRzOiB0aW1lXG4gIH07XG4gIHZhciBwcm9ncmFtVGltZSA9IHBsYXllclRpbWVUb1Byb2dyYW1UaW1lKHRpbWUsIG1hdGNoZWRTZWdtZW50LnNlZ21lbnQpO1xuXG4gIGlmIChwcm9ncmFtVGltZSkge1xuICAgIHByb2dyYW1UaW1lT2JqZWN0LnByb2dyYW1EYXRlVGltZSA9IHByb2dyYW1UaW1lLnRvSVNPU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcHJvZ3JhbVRpbWVPYmplY3QpO1xufTtcbi8qKlxuICogU2Vla3MgaW4gdGhlIHBsYXllciB0byBhIHRpbWUgdGhhdCBtYXRjaGVzIHRoZSBnaXZlbiBwcm9ncmFtVGltZSBJU08tODYwMSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLnByb2dyYW1UaW1lIEEgcHJvZ3JhbVRpbWUgdG8gc2VlayB0byBhcyBhbiBJU08tODYwMSBTdHJpbmdcbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzLnBsYXlsaXN0IEEgcGxheWxpc3QgdG8gbG9vayB3aXRoaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBhcmdzLnJldHJ5Q291bnQgVGhlIG51bWJlciBvZiB0aW1lcyB0byB0cnkgZm9yIGFuIGFjY3VyYXRlIHNlZWsuIERlZmF1bHQgaXMgMi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFyZ3Muc2Vla1RvIEEgbWV0aG9kIHRvIHBlcmZvcm0gYSBzZWVrXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFyZ3MucGF1c2VBZnRlclNlZWsgV2hldGhlciB0byBlbmQgaW4gYSBwYXVzZWQgc3RhdGUgYWZ0ZXIgc2Vla2luZy4gRGVmYXVsdCBpcyB0cnVlLlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3MudGVjaCBUaGUgdGVjaCB0byBzZWVrIG9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcmdzLmNhbGxiYWNrKGVyciwgbmV3VGltZSkgQSBjYWxsYmFjayB0byByZXR1cm4gdGhlIG5ldyB0aW1lIHRvXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGVyci5tZXNzYWdlIEEgZGV0YWlsZWQgZXJyb3IgbWVzc2FnZVxuICogQHJldHVybiB7bnVtYmVyfSBuZXdUaW1lIFRoZSBleGFjdCB0aW1lIHRoYXQgd2FzIHNlZWtlZCB0byBpbiBzZWNvbmRzXG4gKi9cblxuXG52YXIgc2Vla1RvUHJvZ3JhbVRpbWUgPSBmdW5jdGlvbiBzZWVrVG9Qcm9ncmFtVGltZShfcmVmMikge1xuICB2YXIgcHJvZ3JhbVRpbWUgPSBfcmVmMi5wcm9ncmFtVGltZSxcbiAgICAgIHBsYXlsaXN0ID0gX3JlZjIucGxheWxpc3QsXG4gICAgICBfcmVmMiRyZXRyeUNvdW50ID0gX3JlZjIucmV0cnlDb3VudCxcbiAgICAgIHJldHJ5Q291bnQgPSBfcmVmMiRyZXRyeUNvdW50ID09PSB2b2lkIDAgPyAyIDogX3JlZjIkcmV0cnlDb3VudCxcbiAgICAgIHNlZWtUbyA9IF9yZWYyLnNlZWtUbyxcbiAgICAgIF9yZWYyJHBhdXNlQWZ0ZXJTZWVrID0gX3JlZjIucGF1c2VBZnRlclNlZWssXG4gICAgICBwYXVzZUFmdGVyU2VlayA9IF9yZWYyJHBhdXNlQWZ0ZXJTZWVrID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkcGF1c2VBZnRlclNlZWssXG4gICAgICB0ZWNoID0gX3JlZjIudGVjaCxcbiAgICAgIGNhbGxiYWNrID0gX3JlZjIuY2FsbGJhY2s7XG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHRocm93IG5ldyBFcnJvcignc2Vla1RvUHJvZ3JhbVRpbWU6IGNhbGxiYWNrIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJvZ3JhbVRpbWUgPT09ICd1bmRlZmluZWQnIHx8ICFwbGF5bGlzdCB8fCAhc2Vla1RvKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHtcbiAgICAgIG1lc3NhZ2U6ICdzZWVrVG9Qcm9ncmFtVGltZTogcHJvZ3JhbVRpbWUsIHNlZWtUbyBhbmQgcGxheWxpc3QgbXVzdCBiZSBwcm92aWRlZCdcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghcGxheWxpc3QuZW5kTGlzdCAmJiAhdGVjaC5oYXNTdGFydGVkXykge1xuICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICBtZXNzYWdlOiAncGxheWVyIG11c3QgYmUgcGxheWluZyBhIGxpdmUgc3RyZWFtIHRvIHN0YXJ0IGJ1ZmZlcmluZydcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghdmVyaWZ5UHJvZ3JhbURhdGVUaW1lVGFncyhwbGF5bGlzdCkpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soe1xuICAgICAgbWVzc2FnZTogJ3Byb2dyYW1EYXRlVGltZSB0YWdzIG11c3QgYmUgcHJvdmlkZWQgaW4gdGhlIG1hbmlmZXN0ICcgKyBwbGF5bGlzdC5yZXNvbHZlZFVyaVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIG1hdGNoZWRTZWdtZW50ID0gZmluZFNlZ21lbnRGb3JQcm9ncmFtVGltZShwcm9ncmFtVGltZSwgcGxheWxpc3QpOyAvLyBubyBtYXRjaFxuXG4gIGlmICghbWF0Y2hlZFNlZ21lbnQpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soe1xuICAgICAgbWVzc2FnZTogcHJvZ3JhbVRpbWUgKyBcIiB3YXMgbm90IGZvdW5kIGluIHRoZSBzdHJlYW1cIlxuICAgIH0pO1xuICB9XG5cbiAgdmFyIHNlZ21lbnQgPSBtYXRjaGVkU2VnbWVudC5zZWdtZW50O1xuICB2YXIgbWVkaWFPZmZzZXQgPSBnZXRPZmZzZXRGcm9tVGltZXN0YW1wKHNlZ21lbnQuZGF0ZVRpbWVPYmplY3QsIHByb2dyYW1UaW1lKTtcblxuICBpZiAobWF0Y2hlZFNlZ21lbnQudHlwZSA9PT0gJ2VzdGltYXRlJykge1xuICAgIC8vIHdlJ3ZlIHJ1biBvdXQgb2YgcmV0cmllc1xuICAgIGlmIChyZXRyeUNvdW50ID09PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soe1xuICAgICAgICBtZXNzYWdlOiBwcm9ncmFtVGltZSArIFwiIGlzIG5vdCBidWZmZXJlZCB5ZXQuIFRyeSBhZ2FpblwiXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzZWVrVG8obWF0Y2hlZFNlZ21lbnQuZXN0aW1hdGVkU3RhcnQgKyBtZWRpYU9mZnNldCk7XG4gICAgdGVjaC5vbmUoJ3NlZWtlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlZWtUb1Byb2dyYW1UaW1lKHtcbiAgICAgICAgcHJvZ3JhbVRpbWU6IHByb2dyYW1UaW1lLFxuICAgICAgICBwbGF5bGlzdDogcGxheWxpc3QsXG4gICAgICAgIHJldHJ5Q291bnQ6IHJldHJ5Q291bnQgLSAxLFxuICAgICAgICBzZWVrVG86IHNlZWtUbyxcbiAgICAgICAgcGF1c2VBZnRlclNlZWs6IHBhdXNlQWZ0ZXJTZWVrLFxuICAgICAgICB0ZWNoOiB0ZWNoLFxuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfSAvLyBTaW5jZSB0aGUgc2VnbWVudC5zdGFydCB2YWx1ZSBpcyBkZXRlcm1pbmVkIGZyb20gdGhlIGJ1ZmZlcmVkIGVuZCBvciBlbmRpbmcgdGltZVxuICAvLyBvZiB0aGUgcHJpb3Igc2VnbWVudCwgdGhlIHNlZWtUb1RpbWUgZG9lc24ndCBuZWVkIHRvIGFjY291bnQgZm9yIGFueSB0cmFuc211eGVyXG4gIC8vIG1vZGlmaWNhdGlvbnMuXG5cblxuICB2YXIgc2Vla1RvVGltZSA9IHNlZ21lbnQuc3RhcnQgKyBtZWRpYU9mZnNldDtcblxuICB2YXIgc2Vla2VkQ2FsbGJhY2sgPSBmdW5jdGlvbiBzZWVrZWRDYWxsYmFjaygpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgdGVjaC5jdXJyZW50VGltZSgpKTtcbiAgfTsgLy8gbGlzdGVuIGZvciBzZWVrZWQgZXZlbnRcblxuXG4gIHRlY2gub25lKCdzZWVrZWQnLCBzZWVrZWRDYWxsYmFjayk7IC8vIHBhdXNlIGJlZm9yZSBzZWVraW5nIGFzIHZpZGVvLmpzIHdpbGwgcmVzdG9yZSB0aGlzIHN0YXRlXG5cbiAgaWYgKHBhdXNlQWZ0ZXJTZWVrKSB7XG4gICAgdGVjaC5wYXVzZSgpO1xuICB9XG5cbiAgc2Vla1RvKHNlZWtUb1RpbWUpO1xufTsgLy8gd2hpY2ggd2lsbCBvbmx5IGhhcHBlbiBpZiB0aGUgcmVxdWVzdCBpcyBjb21wbGV0ZS5cblxuXG52YXIgY2FsbGJhY2tPbkNvbXBsZXRlZCA9IGZ1bmN0aW9uIGNhbGxiYWNrT25Db21wbGV0ZWQocmVxdWVzdCwgY2IpIHtcbiAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgIHJldHVybiBjYigpO1xuICB9XG5cbiAgcmV0dXJuO1xufTtcblxudmFyIGNvbnRhaW5lclJlcXVlc3QgPSBmdW5jdGlvbiBjb250YWluZXJSZXF1ZXN0KHVyaSwgeGhyLCBjYikge1xuICB2YXIgYnl0ZXMgPSBbXTtcbiAgdmFyIGlkM09mZnNldDtcbiAgdmFyIGZpbmlzaGVkID0gZmFsc2U7XG5cbiAgdmFyIGVuZFJlcXVlc3RBbmRDYWxsYmFjayA9IGZ1bmN0aW9uIGVuZFJlcXVlc3RBbmRDYWxsYmFjayhlcnIsIHJlcSwgdHlwZSwgX2J5dGVzKSB7XG4gICAgcmVxLmFib3J0KCk7XG4gICAgZmluaXNoZWQgPSB0cnVlO1xuICAgIHJldHVybiBjYihlcnIsIHJlcSwgdHlwZSwgX2J5dGVzKTtcbiAgfTtcblxuICB2YXIgcHJvZ3Jlc3NMaXN0ZW5lciA9IGZ1bmN0aW9uIHByb2dyZXNzTGlzdGVuZXIoZXJyb3IsIHJlcXVlc3QpIHtcbiAgICBpZiAoZmluaXNoZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBlbmRSZXF1ZXN0QW5kQ2FsbGJhY2soZXJyb3IsIHJlcXVlc3QsICcnLCBieXRlcyk7XG4gICAgfSAvLyBncmFwIHRoZSBuZXcgcGFydCBvZiBjb250ZW50IHRoYXQgd2FzIGp1c3QgZG93bmxvYWRlZFxuXG5cbiAgICB2YXIgbmV3UGFydCA9IHJlcXVlc3QucmVzcG9uc2VUZXh0LnN1YnN0cmluZyhieXRlcyAmJiBieXRlcy5ieXRlTGVuZ3RoIHx8IDAsIHJlcXVlc3QucmVzcG9uc2VUZXh0Lmxlbmd0aCk7IC8vIGFkZCB0aGF0IG9udG8gYnl0ZXNcblxuICAgIGJ5dGVzID0gY29uY2F0VHlwZWRBcnJheXMoYnl0ZXMsIHN0cmluZ1RvQnl0ZXMobmV3UGFydCwgdHJ1ZSkpO1xuICAgIGlkM09mZnNldCA9IGlkM09mZnNldCB8fCBnZXRJZDNPZmZzZXQoYnl0ZXMpOyAvLyB3ZSBuZWVkIGF0IGxlYXN0IDEwIGJ5dGVzIHRvIGRldGVybWluZSBhIHR5cGVcbiAgICAvLyBvciB3ZSBuZWVkIGF0IGxlYXN0IHR3byBieXRlcyBhZnRlciBhbiBpZDNPZmZzZXRcblxuICAgIGlmIChieXRlcy5sZW5ndGggPCAxMCB8fCBpZDNPZmZzZXQgJiYgYnl0ZXMubGVuZ3RoIDwgaWQzT2Zmc2V0ICsgMikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrT25Db21wbGV0ZWQocmVxdWVzdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZW5kUmVxdWVzdEFuZENhbGxiYWNrKGVycm9yLCByZXF1ZXN0LCAnJywgYnl0ZXMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSBkZXRlY3RDb250YWluZXJGb3JCeXRlcyhieXRlcyk7IC8vIGlmIHRoaXMgbG9va3MgbGlrZSBhIHRzIHNlZ21lbnQgYnV0IHdlIGRvbid0IGhhdmUgZW5vdWdoIGRhdGFcbiAgICAvLyB0byBzZWUgdGhlIHNlY29uZCBzeW5jIGJ5dGUsIHdhaXQgdW50aWwgd2UgaGF2ZSBlbm91Z2ggZGF0YVxuICAgIC8vIGJlZm9yZSBkZWNsYXJpbmcgaXQgdHNcblxuICAgIGlmICh0eXBlID09PSAndHMnICYmIGJ5dGVzLmxlbmd0aCA8IDE4OCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrT25Db21wbGV0ZWQocmVxdWVzdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZW5kUmVxdWVzdEFuZENhbGxiYWNrKGVycm9yLCByZXF1ZXN0LCAnJywgYnl0ZXMpO1xuICAgICAgfSk7XG4gICAgfSAvLyB0aGlzIG1heSBiZSBhbiB1bnN5bmNlZCB0cyBzZWdtZW50XG4gICAgLy8gd2FpdCBmb3IgMzc2IGJ5dGVzIGJlZm9yZSBkZXRlY3Rpbmcgbm8gY29udGFpbmVyXG5cblxuICAgIGlmICghdHlwZSAmJiBieXRlcy5sZW5ndGggPCAzNzYpIHtcbiAgICAgIHJldHVybiBjYWxsYmFja09uQ29tcGxldGVkKHJlcXVlc3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGVuZFJlcXVlc3RBbmRDYWxsYmFjayhlcnJvciwgcmVxdWVzdCwgJycsIGJ5dGVzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBlbmRSZXF1ZXN0QW5kQ2FsbGJhY2sobnVsbCwgcmVxdWVzdCwgdHlwZSwgYnl0ZXMpO1xuICB9O1xuXG4gIHZhciBvcHRpb25zID0ge1xuICAgIHVyaTogdXJpLFxuICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uIGJlZm9yZVNlbmQocmVxdWVzdCkge1xuICAgICAgLy8gdGhpcyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcGFzcyB0aGUgYnl0ZXMgdG8gdXMgdW5wcm9jZXNzZWRcbiAgICAgIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZSgndGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZCcpO1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciB0b3RhbCA9IF9yZWYudG90YWwsXG4gICAgICAgICAgICBsb2FkZWQgPSBfcmVmLmxvYWRlZDtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrV3JhcHBlcihyZXF1ZXN0LCBudWxsLCB7XG4gICAgICAgICAgc3RhdHVzQ29kZTogcmVxdWVzdC5zdGF0dXNcbiAgICAgICAgfSwgcHJvZ3Jlc3NMaXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIHZhciByZXF1ZXN0ID0geGhyKG9wdGlvbnMsIGZ1bmN0aW9uIChlcnJvciwgcmVzcG9uc2UpIHtcbiAgICByZXR1cm4gY2FsbGJhY2tXcmFwcGVyKHJlcXVlc3QsIGVycm9yLCByZXNwb25zZSwgcHJvZ3Jlc3NMaXN0ZW5lcik7XG4gIH0pO1xuICByZXR1cm4gcmVxdWVzdDtcbn07XG5cbnZhciBFdmVudFRhcmdldCQxJDEgPSB2aWRlb2pzJDEuRXZlbnRUYXJnZXQsXG4gICAgbWVyZ2VPcHRpb25zJDIgPSB2aWRlb2pzJDEubWVyZ2VPcHRpb25zO1xuLyoqXG4gKiBQYXJzZXMgdGhlIG1hc3RlciBYTUwgc3RyaW5nIGFuZCB1cGRhdGVzIHBsYXlsaXN0IFVSSSByZWZlcmVuY2VzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAqICAgICAgICBPYmplY3Qgb2YgYXJndW1lbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnLm1hc3RlclhtbFxuICogICAgICAgIFRoZSBtcGQgWE1MXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnLnNyY1VybFxuICogICAgICAgIFRoZSBtcGQgVVJMXG4gKiBAcGFyYW0ge0RhdGV9IGNvbmZpZy5jbGllbnRPZmZzZXRcbiAqICAgICAgICAgQSB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiBzZXJ2ZXIgYW5kIGNsaWVudFxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZy5zaWR4TWFwcGluZ1xuICogICAgICAgIFNJRFggbWFwcGluZ3MgZm9yIG1vb2YvbWRhdCBVUklzIGFuZCBieXRlIHJhbmdlc1xuICogQHJldHVybiB7T2JqZWN0fVxuICogICAgICAgICBUaGUgcGFyc2VkIG1wZCBtYW5pZmVzdCBvYmplY3RcbiAqL1xuXG52YXIgcGFyc2VNYXN0ZXJYbWwgPSBmdW5jdGlvbiBwYXJzZU1hc3RlclhtbChfcmVmKSB7XG4gIHZhciBtYXN0ZXJYbWwgPSBfcmVmLm1hc3RlclhtbCxcbiAgICAgIHNyY1VybCA9IF9yZWYuc3JjVXJsLFxuICAgICAgY2xpZW50T2Zmc2V0ID0gX3JlZi5jbGllbnRPZmZzZXQsXG4gICAgICBzaWR4TWFwcGluZyA9IF9yZWYuc2lkeE1hcHBpbmc7XG4gIHZhciBtYXN0ZXIgPSBwYXJzZShtYXN0ZXJYbWwsIHtcbiAgICBtYW5pZmVzdFVyaTogc3JjVXJsLFxuICAgIGNsaWVudE9mZnNldDogY2xpZW50T2Zmc2V0LFxuICAgIHNpZHhNYXBwaW5nOiBzaWR4TWFwcGluZ1xuICB9KTtcbiAgYWRkUHJvcGVydGllc1RvTWFzdGVyKG1hc3Rlciwgc3JjVXJsKTtcbiAgcmV0dXJuIG1hc3Rlcjtcbn07XG4vKipcbiAqIFJldHVybnMgYSBuZXcgbWFzdGVyIG1hbmlmZXN0IHRoYXQgaXMgdGhlIHJlc3VsdCBvZiBtZXJnaW5nIGFuIHVwZGF0ZWQgbWFzdGVyIG1hbmlmZXN0XG4gKiBpbnRvIHRoZSBvcmlnaW5hbCB2ZXJzaW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvbGRNYXN0ZXJcbiAqICAgICAgICBUaGUgb2xkIHBhcnNlZCBtcGQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gbmV3TWFzdGVyXG4gKiAgICAgICAgVGhlIHVwZGF0ZWQgcGFyc2VkIG1wZCBvYmplY3RcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgQSBuZXcgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgb3JpZ2luYWwgbWFzdGVyIG1hbmlmZXN0IHdpdGggdGhlIHVwZGF0ZWQgbWVkaWFcbiAqICAgICAgICAgcGxheWxpc3RzIG1lcmdlZCBpblxuICovXG5cblxudmFyIHVwZGF0ZU1hc3RlciQxID0gZnVuY3Rpb24gdXBkYXRlTWFzdGVyJDEob2xkTWFzdGVyLCBuZXdNYXN0ZXIpIHtcbiAgdmFyIG5vQ2hhbmdlcyA9IHRydWU7XG4gIHZhciB1cGRhdGUgPSBtZXJnZU9wdGlvbnMkMihvbGRNYXN0ZXIsIHtcbiAgICAvLyBUaGVzZSBhcmUgdG9wIGxldmVsIHByb3BlcnRpZXMgdGhhdCBjYW4gYmUgdXBkYXRlZFxuICAgIGR1cmF0aW9uOiBuZXdNYXN0ZXIuZHVyYXRpb24sXG4gICAgbWluaW11bVVwZGF0ZVBlcmlvZDogbmV3TWFzdGVyLm1pbmltdW1VcGRhdGVQZXJpb2RcbiAgfSk7IC8vIEZpcnN0IHVwZGF0ZSB0aGUgcGxheWxpc3RzIGluIHBsYXlsaXN0IGxpc3RcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld01hc3Rlci5wbGF5bGlzdHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGxheWxpc3RVcGRhdGUgPSB1cGRhdGVNYXN0ZXIodXBkYXRlLCBuZXdNYXN0ZXIucGxheWxpc3RzW2ldKTtcblxuICAgIGlmIChwbGF5bGlzdFVwZGF0ZSkge1xuICAgICAgdXBkYXRlID0gcGxheWxpc3RVcGRhdGU7XG4gICAgICBub0NoYW5nZXMgPSBmYWxzZTtcbiAgICB9XG4gIH0gLy8gVGhlbiB1cGRhdGUgbWVkaWEgZ3JvdXAgcGxheWxpc3RzXG5cblxuICBmb3JFYWNoTWVkaWFHcm91cChuZXdNYXN0ZXIsIGZ1bmN0aW9uIChwcm9wZXJ0aWVzLCB0eXBlLCBncm91cCwgbGFiZWwpIHtcbiAgICBpZiAocHJvcGVydGllcy5wbGF5bGlzdHMgJiYgcHJvcGVydGllcy5wbGF5bGlzdHMubGVuZ3RoKSB7XG4gICAgICB2YXIgaWQgPSBwcm9wZXJ0aWVzLnBsYXlsaXN0c1swXS5pZDtcblxuICAgICAgdmFyIF9wbGF5bGlzdFVwZGF0ZSA9IHVwZGF0ZU1hc3Rlcih1cGRhdGUsIHByb3BlcnRpZXMucGxheWxpc3RzWzBdKTtcblxuICAgICAgaWYgKF9wbGF5bGlzdFVwZGF0ZSkge1xuICAgICAgICB1cGRhdGUgPSBfcGxheWxpc3RVcGRhdGU7IC8vIHVwZGF0ZSB0aGUgcGxheWxpc3QgcmVmZXJlbmNlIHdpdGhpbiBtZWRpYSBncm91cHNcblxuICAgICAgICB1cGRhdGUubWVkaWFHcm91cHNbdHlwZV1bZ3JvdXBdW2xhYmVsXS5wbGF5bGlzdHNbMF0gPSB1cGRhdGUucGxheWxpc3RzW2lkXTtcbiAgICAgICAgbm9DaGFuZ2VzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAobmV3TWFzdGVyLm1pbmltdW1VcGRhdGVQZXJpb2QgIT09IG9sZE1hc3Rlci5taW5pbXVtVXBkYXRlUGVyaW9kKSB7XG4gICAgbm9DaGFuZ2VzID0gZmFsc2U7XG4gIH1cblxuICBpZiAobm9DaGFuZ2VzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdXBkYXRlO1xufTtcblxudmFyIGdlbmVyYXRlU2lkeEtleSA9IGZ1bmN0aW9uIGdlbmVyYXRlU2lkeEtleShzaWR4SW5mbykge1xuICAvLyBzaG91bGQgYmUgbm9uLWluY2x1c2l2ZVxuICB2YXIgc2lkeEJ5dGVSYW5nZUVuZCA9IHNpZHhJbmZvLmJ5dGVyYW5nZS5vZmZzZXQgKyBzaWR4SW5mby5ieXRlcmFuZ2UubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIHNpZHhJbmZvLnVyaSArICctJyArIHNpZHhJbmZvLmJ5dGVyYW5nZS5vZmZzZXQgKyAnLScgKyBzaWR4Qnl0ZVJhbmdlRW5kO1xufTsgLy8gU0lEWCBzaG91bGQgYmUgZXF1aXZhbGVudCBpZiB0aGUgVVJJIGFuZCBieXRlcmFuZ2VzIG9mIHRoZSBTSURYIG1hdGNoLlxuLy8gSWYgdGhlIFNJRFhzIGhhdmUgbWFwcywgdGhlIHR3byBtYXBzIHNob3VsZCBtYXRjaCxcbi8vIGJvdGggYGFgIGFuZCBgYmAgbWlzc2luZyBTSURYcyBpcyBjb25zaWRlcmVkIG1hdGNoaW5nLlxuLy8gSWYgYGFgIG9yIGBiYCBidXQgbm90IGJvdGggaGF2ZSBhIG1hcCwgdGhleSBhcmVuJ3QgbWF0Y2hpbmcuXG5cblxudmFyIGVxdWl2YWxlbnRTaWR4ID0gZnVuY3Rpb24gZXF1aXZhbGVudFNpZHgoYSwgYikge1xuICB2YXIgbmVpdGhlck1hcCA9IEJvb2xlYW4oIWEubWFwICYmICFiLm1hcCk7XG4gIHZhciBlcXVpdmFsZW50TWFwID0gbmVpdGhlck1hcCB8fCBCb29sZWFuKGEubWFwICYmIGIubWFwICYmIGEubWFwLmJ5dGVyYW5nZS5vZmZzZXQgPT09IGIubWFwLmJ5dGVyYW5nZS5vZmZzZXQgJiYgYS5tYXAuYnl0ZXJhbmdlLmxlbmd0aCA9PT0gYi5tYXAuYnl0ZXJhbmdlLmxlbmd0aCk7XG4gIHJldHVybiBlcXVpdmFsZW50TWFwICYmIGEudXJpID09PSBiLnVyaSAmJiBhLmJ5dGVyYW5nZS5vZmZzZXQgPT09IGIuYnl0ZXJhbmdlLm9mZnNldCAmJiBhLmJ5dGVyYW5nZS5sZW5ndGggPT09IGIuYnl0ZXJhbmdlLmxlbmd0aDtcbn07IC8vIGV4cG9ydGVkIGZvciB0ZXN0aW5nXG5cblxudmFyIGNvbXBhcmVTaWR4RW50cnkgPSBmdW5jdGlvbiBjb21wYXJlU2lkeEVudHJ5KHBsYXlsaXN0cywgb2xkU2lkeE1hcHBpbmcpIHtcbiAgdmFyIG5ld1NpZHhNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgaWQgaW4gcGxheWxpc3RzKSB7XG4gICAgdmFyIHBsYXlsaXN0ID0gcGxheWxpc3RzW2lkXTtcbiAgICB2YXIgY3VycmVudFNpZHhJbmZvID0gcGxheWxpc3Quc2lkeDtcblxuICAgIGlmIChjdXJyZW50U2lkeEluZm8pIHtcbiAgICAgIHZhciBrZXkgPSBnZW5lcmF0ZVNpZHhLZXkoY3VycmVudFNpZHhJbmZvKTtcblxuICAgICAgaWYgKCFvbGRTaWR4TWFwcGluZ1trZXldKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2F2ZWRTaWR4SW5mbyA9IG9sZFNpZHhNYXBwaW5nW2tleV0uc2lkeEluZm87XG5cbiAgICAgIGlmIChlcXVpdmFsZW50U2lkeChzYXZlZFNpZHhJbmZvLCBjdXJyZW50U2lkeEluZm8pKSB7XG4gICAgICAgIG5ld1NpZHhNYXBwaW5nW2tleV0gPSBvbGRTaWR4TWFwcGluZ1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdTaWR4TWFwcGluZztcbn07XG4vKipcbiAqICBBIGZ1bmN0aW9uIHRoYXQgZmlsdGVycyBvdXQgY2hhbmdlZCBpdGVtcyBhcyB0aGV5IG5lZWQgdG8gYmUgcmVxdWVzdGVkIHNlcGFyYXRlbHkuXG4gKlxuICogIFRoZSBtZXRob2QgaXMgZXhwb3J0ZWQgZm9yIHRlc3RpbmdcbiAqXG4gKiAgQHBhcmFtIHtPYmplY3R9IG1hc3RlclhtbCB0aGUgbXBkIFhNTFxuICogIEBwYXJhbSB7c3RyaW5nfSBzcmNVcmwgdGhlIG1wZCB1cmxcbiAqICBAcGFyYW0ge0RhdGV9IGNsaWVudE9mZnNldCBhIHRpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIHNlcnZlciBhbmQgY2xpZW50IChwYXNzZWQgdGhyb3VnaCBhbmQgbm90IHVzZWQpXG4gKiAgQHBhcmFtIHtPYmplY3R9IG9sZFNpZHhNYXBwaW5nIHRoZSBTSURYIHRvIGNvbXBhcmUgYWdhaW5zdFxuICovXG5cblxudmFyIGZpbHRlckNoYW5nZWRTaWR4TWFwcGluZ3MgPSBmdW5jdGlvbiBmaWx0ZXJDaGFuZ2VkU2lkeE1hcHBpbmdzKG1hc3RlclhtbCwgc3JjVXJsLCBjbGllbnRPZmZzZXQsIG9sZFNpZHhNYXBwaW5nKSB7XG4gIC8vIERvbid0IHBhc3MgY3VycmVudCBzaWR4IG1hcHBpbmdcbiAgdmFyIG1hc3RlciA9IHBhcnNlKG1hc3RlclhtbCwge1xuICAgIG1hbmlmZXN0VXJpOiBzcmNVcmwsXG4gICAgY2xpZW50T2Zmc2V0OiBjbGllbnRPZmZzZXRcbiAgfSk7XG4gIHZhciB2aWRlb1NpZHggPSBjb21wYXJlU2lkeEVudHJ5KG1hc3Rlci5wbGF5bGlzdHMsIG9sZFNpZHhNYXBwaW5nKTtcbiAgdmFyIG1lZGlhR3JvdXBTaWR4ID0gdmlkZW9TaWR4O1xuICBmb3JFYWNoTWVkaWFHcm91cChtYXN0ZXIsIGZ1bmN0aW9uIChwcm9wZXJ0aWVzLCBtZWRpYVR5cGUsIGdyb3VwS2V5LCBsYWJlbEtleSkge1xuICAgIGlmIChwcm9wZXJ0aWVzLnBsYXlsaXN0cyAmJiBwcm9wZXJ0aWVzLnBsYXlsaXN0cy5sZW5ndGgpIHtcbiAgICAgIHZhciBwbGF5bGlzdHMgPSBwcm9wZXJ0aWVzLnBsYXlsaXN0cztcbiAgICAgIG1lZGlhR3JvdXBTaWR4ID0gbWVyZ2VPcHRpb25zJDIobWVkaWFHcm91cFNpZHgsIGNvbXBhcmVTaWR4RW50cnkocGxheWxpc3RzLCBvbGRTaWR4TWFwcGluZykpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBtZWRpYUdyb3VwU2lkeDtcbn07IC8vIGV4cG9ydGVkIGZvciB0ZXN0aW5nXG5cblxudmFyIHJlcXVlc3RTaWR4XyA9IGZ1bmN0aW9uIHJlcXVlc3RTaWR4Xyhsb2FkZXIsIHNpZHhSYW5nZSwgcGxheWxpc3QsIHhociwgb3B0aW9ucywgZmluaXNoUHJvY2Vzc2luZ0ZuKSB7XG4gIHZhciBzaWR4SW5mbyA9IHtcbiAgICAvLyByZXNvbHZlIHRoZSBzZWdtZW50IFVSTCByZWxhdGl2ZSB0byB0aGUgcGxheWxpc3RcbiAgICB1cmk6IHJlc29sdmVNYW5pZmVzdFJlZGlyZWN0KG9wdGlvbnMuaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHMsIHNpZHhSYW5nZS5yZXNvbHZlZFVyaSksXG4gICAgLy8gcmVzb2x2ZWRVcmk6IHNpZHhSYW5nZS5yZXNvbHZlZFVyaSxcbiAgICBieXRlcmFuZ2U6IHNpZHhSYW5nZS5ieXRlcmFuZ2UsXG4gICAgLy8gdGhlIHNlZ21lbnQncyBwbGF5bGlzdFxuICAgIHBsYXlsaXN0OiBwbGF5bGlzdFxuICB9O1xuICB2YXIgc2lkeFJlcXVlc3RPcHRpb25zID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyhzaWR4SW5mbywge1xuICAgIHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyxcbiAgICBoZWFkZXJzOiBzZWdtZW50WGhySGVhZGVycyhzaWR4SW5mbylcbiAgfSk7XG4gIHJldHVybiBjb250YWluZXJSZXF1ZXN0KHNpZHhJbmZvLnVyaSwgeGhyLCBmdW5jdGlvbiAoZXJyLCByZXF1ZXN0LCBjb250YWluZXIsIGJ5dGVzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIGZpbmlzaFByb2Nlc3NpbmdGbihlcnIsIHJlcXVlc3QpO1xuICAgIH1cblxuICAgIGlmICghY29udGFpbmVyIHx8IGNvbnRhaW5lciAhPT0gJ21wNCcpIHtcbiAgICAgIHJldHVybiBmaW5pc2hQcm9jZXNzaW5nRm4oe1xuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBtZXNzYWdlOiBcIlVuc3VwcG9ydGVkIFwiICsgKGNvbnRhaW5lciB8fCAndW5rbm93bicpICsgXCIgY29udGFpbmVyIHR5cGUgZm9yIHNpZHggc2VnbWVudCBhdCBVUkw6IFwiICsgc2lkeEluZm8udXJpLFxuICAgICAgICAvLyByZXNwb25zZSBpcyBqdXN0IGJ5dGVzIGluIHRoaXMgY2FzZVxuICAgICAgICAvLyBidXQgd2UgcmVhbGx5IGRvbid0IHdhbnQgdG8gcmV0dXJuIHRoYXQuXG4gICAgICAgIHJlc3BvbnNlOiAnJyxcbiAgICAgICAgcGxheWxpc3Q6IHBsYXlsaXN0LFxuICAgICAgICBpbnRlcm5hbDogdHJ1ZSxcbiAgICAgICAgYmxhY2tsaXN0RHVyYXRpb246IEluZmluaXR5LFxuICAgICAgICAvLyBNRURJQV9FUlJfTkVUV09SS1xuICAgICAgICBjb2RlOiAyXG4gICAgICB9LCByZXF1ZXN0KTtcbiAgICB9IC8vIGlmIHdlIGFscmVhZHkgZG93bmxvYWRlZCB0aGUgc2lkeCBieXRlcyBpbiB0aGUgY29udGFpbmVyIHJlcXVlc3QsIHVzZSB0aGVtXG5cblxuICAgIHZhciBfc2lkeEluZm8kYnl0ZXJhbmdlID0gc2lkeEluZm8uYnl0ZXJhbmdlLFxuICAgICAgICBvZmZzZXQgPSBfc2lkeEluZm8kYnl0ZXJhbmdlLm9mZnNldCxcbiAgICAgICAgbGVuZ3RoID0gX3NpZHhJbmZvJGJ5dGVyYW5nZS5sZW5ndGg7XG5cbiAgICBpZiAoYnl0ZXMubGVuZ3RoID49IGxlbmd0aCArIG9mZnNldCkge1xuICAgICAgcmV0dXJuIGZpbmlzaFByb2Nlc3NpbmdGbihlcnIsIHtcbiAgICAgICAgcmVzcG9uc2U6IGJ5dGVzLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgdXJpOiByZXF1ZXN0LnVyaVxuICAgICAgfSk7XG4gICAgfSAvLyBvdGhlcndpc2UgcmVxdWVzdCBzaWR4IGJ5dGVzXG5cblxuICAgIGxvYWRlci5yZXF1ZXN0ID0geGhyKHNpZHhSZXF1ZXN0T3B0aW9ucywgZmluaXNoUHJvY2Vzc2luZ0ZuKTtcbiAgfSk7XG59O1xuXG52YXIgRGFzaFBsYXlsaXN0TG9hZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXZlbnRUYXJnZXQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRGFzaFBsYXlsaXN0TG9hZGVyLCBfRXZlbnRUYXJnZXQpOyAvLyBEYXNoUGxheWxpc3RMb2FkZXIgbXVzdCBhY2NlcHQgZWl0aGVyIGEgc3JjIHVybCBvciBhIHBsYXlsaXN0IGJlY2F1c2Ugc3Vic2VxdWVudFxuICAvLyBwbGF5bGlzdCBsb2FkZXIgc2V0dXBzIGZyb20gbWVkaWEgZ3JvdXBzIHdpbGwgZXhwZWN0IHRvIGJlIGFibGUgdG8gcGFzcyBhIHBsYXlsaXN0XG4gIC8vIChzaW5jZSB0aGVyZSBhcmVuJ3QgZXh0ZXJuYWwgVVJMcyB0byBtZWRpYSBwbGF5bGlzdHMgd2l0aCBEQVNIKVxuXG5cbiAgZnVuY3Rpb24gRGFzaFBsYXlsaXN0TG9hZGVyKHNyY1VybE9yUGxheWxpc3QsIHZocywgb3B0aW9ucywgbWFzdGVyUGxheWxpc3RMb2FkZXIpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfRXZlbnRUYXJnZXQuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIF9vcHRpb25zJHdpdGhDcmVkZW50aSA9IF9vcHRpb25zLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgd2l0aENyZWRlbnRpYWxzID0gX29wdGlvbnMkd2l0aENyZWRlbnRpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHdpdGhDcmVkZW50aSxcbiAgICAgICAgX29wdGlvbnMkaGFuZGxlTWFuaWZlID0gX29wdGlvbnMuaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHMsXG4gICAgICAgIGhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzID0gX29wdGlvbnMkaGFuZGxlTWFuaWZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGhhbmRsZU1hbmlmZTtcbiAgICBfdGhpcy52aHNfID0gdmhzO1xuICAgIF90aGlzLndpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscztcbiAgICBfdGhpcy5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyA9IGhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzO1xuXG4gICAgaWYgKCFzcmNVcmxPclBsYXlsaXN0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Egbm9uLWVtcHR5IHBsYXlsaXN0IFVSTCBvciBvYmplY3QgaXMgcmVxdWlyZWQnKTtcbiAgICB9IC8vIGV2ZW50IG5hbWluZz9cblxuXG4gICAgX3RoaXMub24oJ21pbmltdW1VcGRhdGVQZXJpb2QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5yZWZyZXNoWG1sXygpO1xuICAgIH0pOyAvLyBsaXZlIHBsYXlsaXN0IHN0YWxlbmVzcyB0aW1lb3V0XG5cblxuICAgIF90aGlzLm9uKCdtZWRpYXVwZGF0ZXRpbWVvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5yZWZyZXNoTWVkaWFfKF90aGlzLm1lZGlhKCkuaWQpO1xuICAgIH0pO1xuXG4gICAgX3RoaXMuc3RhdGUgPSAnSEFWRV9OT1RISU5HJztcbiAgICBfdGhpcy5sb2FkZWRQbGF5bGlzdHNfID0ge307IC8vIGluaXRpYWxpemUgdGhlIGxvYWRlciBzdGF0ZVxuICAgIC8vIFRoZSBtYXN0ZXJQbGF5bGlzdExvYWRlciB3aWxsIGJlIGNyZWF0ZWQgd2l0aCBhIHN0cmluZ1xuXG4gICAgaWYgKHR5cGVvZiBzcmNVcmxPclBsYXlsaXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgX3RoaXMuc3JjVXJsID0gc3JjVXJsT3JQbGF5bGlzdDsgLy8gVE9ETzogcmVzZXQgc2lkeE1hcHBpbmcgYmV0d2VlbiBwZXJpb2QgY2hhbmdlc1xuICAgICAgLy8gb25jZSBtdWx0aS1wZXJpb2QgaXMgcmVmYWN0b3JlZFxuXG4gICAgICBfdGhpcy5zaWR4TWFwcGluZ18gPSB7fTtcbiAgICAgIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKTtcbiAgICB9XG5cbiAgICBfdGhpcy5zZXR1cENoaWxkTG9hZGVyKG1hc3RlclBsYXlsaXN0TG9hZGVyLCBzcmNVcmxPclBsYXlsaXN0KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEYXNoUGxheWxpc3RMb2FkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXR1cENoaWxkTG9hZGVyID0gZnVuY3Rpb24gc2V0dXBDaGlsZExvYWRlcihtYXN0ZXJQbGF5bGlzdExvYWRlciwgcGxheWxpc3QpIHtcbiAgICB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXyA9IG1hc3RlclBsYXlsaXN0TG9hZGVyO1xuICAgIHRoaXMuY2hpbGRQbGF5bGlzdF8gPSBwbGF5bGlzdDtcbiAgfTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdkaXNwb3NlJyk7XG4gICAgdGhpcy5zdG9wUmVxdWVzdCgpO1xuICAgIHRoaXMubG9hZGVkUGxheWxpc3RzXyA9IHt9O1xuICAgIHdpbmRvdyQxLmNsZWFyVGltZW91dCh0aGlzLm1pbmltdW1VcGRhdGVQZXJpb2RUaW1lb3V0Xyk7XG4gICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMubWVkaWFSZXF1ZXN0Xyk7XG4gICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMubWVkaWFVcGRhdGVUaW1lb3V0KTtcbiAgICB0aGlzLm9mZigpO1xuICB9O1xuXG4gIF9wcm90by5oYXNQZW5kaW5nUmVxdWVzdCA9IGZ1bmN0aW9uIGhhc1BlbmRpbmdSZXF1ZXN0KCkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QgfHwgdGhpcy5tZWRpYVJlcXVlc3RfO1xuICB9O1xuXG4gIF9wcm90by5zdG9wUmVxdWVzdCA9IGZ1bmN0aW9uIHN0b3BSZXF1ZXN0KCkge1xuICAgIGlmICh0aGlzLnJlcXVlc3QpIHtcbiAgICAgIHZhciBvbGRSZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0O1xuICAgICAgdGhpcy5yZXF1ZXN0ID0gbnVsbDtcbiAgICAgIG9sZFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgIG9sZFJlcXVlc3QuYWJvcnQoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNpZHhSZXF1ZXN0RmluaXNoZWRfID0gZnVuY3Rpb24gc2lkeFJlcXVlc3RGaW5pc2hlZF8ocGxheWxpc3QsIG1hc3Rlciwgc3RhcnRpbmdTdGF0ZSwgZG9uZUZuKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKGVyciwgcmVxdWVzdCkge1xuICAgICAgLy8gZGlzcG9zZWRcbiAgICAgIGlmICghX3RoaXMyLnJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBwZW5kaW5nIHJlcXVlc3QgaXMgY2xlYXJlZFxuXG5cbiAgICAgIF90aGlzMi5yZXF1ZXN0ID0gbnVsbDtcblxuICAgICAgaWYgKGVycikge1xuICAgICAgICAvLyB1c2UgdGhlIHByb3ZpZGVkIGVycm9yIG9yIGNyZWF0ZSBvbmVcbiAgICAgICAgLy8gc2VlIHJlcXVlc3RTaWR4XyBmb3IgdGhlIGNvbnRhaW5lciByZXF1ZXN0XG4gICAgICAgIC8vIHRoYXQgY2FuIGNhdXNlIHRoaXMuXG4gICAgICAgIF90aGlzMi5lcnJvciA9IHR5cGVvZiBlcnIgPT09ICdvYmplY3QnID8gZXJyIDoge1xuICAgICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgICAgbWVzc2FnZTogJ0RBU0ggcGxheWxpc3QgcmVxdWVzdCBlcnJvciBhdCBVUkw6ICcgKyBwbGF5bGlzdC51cmksXG4gICAgICAgICAgcmVzcG9uc2U6IHJlcXVlc3QucmVzcG9uc2UsXG4gICAgICAgICAgLy8gTUVESUFfRVJSX05FVFdPUktcbiAgICAgICAgICBjb2RlOiAyXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHN0YXJ0aW5nU3RhdGUpIHtcbiAgICAgICAgICBfdGhpczIuc3RhdGUgPSBzdGFydGluZ1N0YXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLnRyaWdnZXIoJ2Vycm9yJyk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYnl0ZXMgPSB0b1VpbnQ4KHJlcXVlc3QucmVzcG9uc2UpO1xuICAgICAgdmFyIHNpZHggPSBwYXJzZVNpZHgoYnl0ZXMuc3ViYXJyYXkoOCkpO1xuICAgICAgcmV0dXJuIGRvbmVGbihtYXN0ZXIsIHNpZHgpO1xuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLm1lZGlhID0gZnVuY3Rpb24gbWVkaWEocGxheWxpc3QpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpczsgLy8gZ2V0dGVyXG5cblxuICAgIGlmICghcGxheWxpc3QpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lZGlhXztcbiAgICB9IC8vIHNldHRlclxuXG5cbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ0hBVkVfTk9USElORycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHN3aXRjaCBtZWRpYSBwbGF5bGlzdCBmcm9tICcgKyB0aGlzLnN0YXRlKTtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnRpbmdTdGF0ZSA9IHRoaXMuc3RhdGU7IC8vIGZpbmQgdGhlIHBsYXlsaXN0IG9iamVjdCBpZiB0aGUgdGFyZ2V0IHBsYXlsaXN0IGhhcyBiZWVuIHNwZWNpZmllZCBieSBVUklcblxuICAgIGlmICh0eXBlb2YgcGxheWxpc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoIXRoaXMubWFzdGVyLnBsYXlsaXN0c1twbGF5bGlzdF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHBsYXlsaXN0IFVSSTogJyArIHBsYXlsaXN0KTtcbiAgICAgIH1cblxuICAgICAgcGxheWxpc3QgPSB0aGlzLm1hc3Rlci5wbGF5bGlzdHNbcGxheWxpc3RdO1xuICAgIH1cblxuICAgIHZhciBtZWRpYUNoYW5nZSA9ICF0aGlzLm1lZGlhXyB8fCBwbGF5bGlzdC5pZCAhPT0gdGhpcy5tZWRpYV8uaWQ7IC8vIHN3aXRjaCB0byBwcmV2aW91c2x5IGxvYWRlZCBwbGF5bGlzdHMgaW1tZWRpYXRlbHlcblxuICAgIGlmIChtZWRpYUNoYW5nZSAmJiB0aGlzLmxvYWRlZFBsYXlsaXN0c19bcGxheWxpc3QuaWRdICYmIHRoaXMubG9hZGVkUGxheWxpc3RzX1twbGF5bGlzdC5pZF0uZW5kTGlzdCkge1xuICAgICAgdGhpcy5zdGF0ZSA9ICdIQVZFX01FVEFEQVRBJztcbiAgICAgIHRoaXMubWVkaWFfID0gcGxheWxpc3Q7IC8vIHRyaWdnZXIgbWVkaWEgY2hhbmdlIGlmIHRoZSBhY3RpdmUgbWVkaWEgaGFzIGJlZW4gdXBkYXRlZFxuXG4gICAgICBpZiAobWVkaWFDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdtZWRpYWNoYW5naW5nJyk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignbWVkaWFjaGFuZ2UnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gc3dpdGNoaW5nIHRvIHRoZSBhY3RpdmUgcGxheWxpc3QgaXMgYSBuby1vcFxuXG5cbiAgICBpZiAoIW1lZGlhQ2hhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBzd2l0Y2hpbmcgZnJvbSBhbiBhbHJlYWR5IGxvYWRlZCBwbGF5bGlzdFxuXG5cbiAgICBpZiAodGhpcy5tZWRpYV8pIHtcbiAgICAgIHRoaXMudHJpZ2dlcignbWVkaWFjaGFuZ2luZycpO1xuICAgIH1cblxuICAgIGlmICghcGxheWxpc3Quc2lkeCkge1xuICAgICAgLy8gQ29udGludWUgYXN5bmNocm9ub3VzbHkgaWYgdGhlcmUgaXMgbm8gc2lkeFxuICAgICAgLy8gd2FpdCBvbmUgdGljayB0byBhbGxvdyBoYXZlTWFzdGVyIHRvIHJ1biBmaXJzdCBvbiBhIGNoaWxkIGxvYWRlclxuICAgICAgdGhpcy5tZWRpYVJlcXVlc3RfID0gd2luZG93JDEuc2V0VGltZW91dCh0aGlzLmhhdmVNZXRhZGF0YS5iaW5kKHRoaXMsIHtcbiAgICAgICAgc3RhcnRpbmdTdGF0ZTogc3RhcnRpbmdTdGF0ZSxcbiAgICAgICAgcGxheWxpc3Q6IHBsYXlsaXN0XG4gICAgICB9KSwgMCk7IC8vIGV4aXQgZWFybHkgYW5kIGRvbid0IGRvIHNpZHggd29ya1xuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyB3ZSBoYXZlIHNpZHggbWFwcGluZ3NcblxuXG4gICAgdmFyIG9sZE1hc3RlcjtcbiAgICB2YXIgc2lkeE1hcHBpbmc7IC8vIHNpZHhNYXBwaW5nIGlzIHVzZWQgd2hlbiBwYXJzaW5nIHRoZSBtYXN0ZXJYbWwsIHNvIHN0b3JlXG4gICAgLy8gaXQgb24gdGhlIG1hc3RlclBsYXlsaXN0TG9hZGVyXG5cbiAgICBpZiAodGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8pIHtcbiAgICAgIG9sZE1hc3RlciA9IHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1hc3RlcjtcbiAgICAgIHNpZHhNYXBwaW5nID0gdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8uc2lkeE1hcHBpbmdfO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRNYXN0ZXIgPSB0aGlzLm1hc3RlcjtcbiAgICAgIHNpZHhNYXBwaW5nID0gdGhpcy5zaWR4TWFwcGluZ187XG4gICAgfVxuXG4gICAgdmFyIHNpZHhLZXkgPSBnZW5lcmF0ZVNpZHhLZXkocGxheWxpc3Quc2lkeCk7XG4gICAgc2lkeE1hcHBpbmdbc2lkeEtleV0gPSB7XG4gICAgICBzaWR4SW5mbzogcGxheWxpc3Quc2lkeFxuICAgIH07XG4gICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdFNpZHhfKHRoaXMsIHBsYXlsaXN0LnNpZHgsIHBsYXlsaXN0LCB0aGlzLnZoc18ueGhyLCB7XG4gICAgICBoYW5kbGVNYW5pZmVzdFJlZGlyZWN0czogdGhpcy5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0c1xuICAgIH0sIHRoaXMuc2lkeFJlcXVlc3RGaW5pc2hlZF8ocGxheWxpc3QsIG9sZE1hc3Rlciwgc3RhcnRpbmdTdGF0ZSwgZnVuY3Rpb24gKG5ld01hc3Rlciwgc2lkeCkge1xuICAgICAgaWYgKCFuZXdNYXN0ZXIgfHwgIXNpZHgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gcmVxdWVzdCBzaWR4Jyk7XG4gICAgICB9IC8vIHVwZGF0ZSBsb2FkZXIncyBzaWR4TWFwcGluZyB3aXRoIHBhcnNlZCBzaWR4IGJveFxuXG5cbiAgICAgIHNpZHhNYXBwaW5nW3NpZHhLZXldLnNpZHggPSBzaWR4OyAvLyBldmVyeXRoaW5nIGlzIHJlYWR5IGp1c3QgY29udGludWUgdG8gaGF2ZU1ldGFkYXRhXG5cbiAgICAgIF90aGlzMy5oYXZlTWV0YWRhdGEoe1xuICAgICAgICBzdGFydGluZ1N0YXRlOiBzdGFydGluZ1N0YXRlLFxuICAgICAgICBwbGF5bGlzdDogbmV3TWFzdGVyLnBsYXlsaXN0c1twbGF5bGlzdC5pZF1cbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8uaGF2ZU1ldGFkYXRhID0gZnVuY3Rpb24gaGF2ZU1ldGFkYXRhKF9yZWYyKSB7XG4gICAgdmFyIHN0YXJ0aW5nU3RhdGUgPSBfcmVmMi5zdGFydGluZ1N0YXRlLFxuICAgICAgICBwbGF5bGlzdCA9IF9yZWYyLnBsYXlsaXN0O1xuICAgIHRoaXMuc3RhdGUgPSAnSEFWRV9NRVRBREFUQSc7XG4gICAgdGhpcy5sb2FkZWRQbGF5bGlzdHNfW3BsYXlsaXN0LmlkXSA9IHBsYXlsaXN0O1xuICAgIHRoaXMubWVkaWFSZXF1ZXN0XyA9IG51bGw7IC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGxvYWRlZHBsYXlsaXN0XG5cbiAgICB0aGlzLnJlZnJlc2hNZWRpYV8ocGxheWxpc3QuaWQpOyAvLyBmaXJlIGxvYWRlZG1ldGFkYXRhIHRoZSBmaXJzdCB0aW1lIGEgbWVkaWEgcGxheWxpc3QgaXMgbG9hZGVkXG4gICAgLy8gdG8gcmVzb2x2ZSBzZXR1cCBvZiBtZWRpYSBncm91cHNcblxuICAgIGlmIChzdGFydGluZ1N0YXRlID09PSAnSEFWRV9NQVNURVInKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2xvYWRlZG1ldGFkYXRhJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRyaWdnZXIgbWVkaWEgY2hhbmdlIGlmIHRoZSBhY3RpdmUgbWVkaWEgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgdGhpcy50cmlnZ2VyKCdtZWRpYWNoYW5nZScpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICB0aGlzLnN0b3BSZXF1ZXN0KCk7XG4gICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMubWVkaWFVcGRhdGVUaW1lb3V0KTtcbiAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5taW5pbXVtVXBkYXRlUGVyaW9kVGltZW91dF8pO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUgPT09ICdIQVZFX05PVEhJTkcnKSB7XG4gICAgICAvLyBJZiB3ZSBwYXVzZSB0aGUgbG9hZGVyIGJlZm9yZSBhbnkgZGF0YSBoYXMgYmVlbiByZXRyaWV2ZWQsIGl0cyBhcyBpZiB3ZSBuZXZlclxuICAgICAgLy8gc3RhcnRlZCwgc28gcmVzZXQgdG8gYW4gdW5zdGFydGVkIHN0YXRlLlxuICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5sb2FkID0gZnVuY3Rpb24gbG9hZChpc0ZpbmFsUmVuZGl0aW9uKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5tZWRpYVVwZGF0ZVRpbWVvdXQpO1xuICAgIHdpbmRvdyQxLmNsZWFyVGltZW91dCh0aGlzLm1pbmltdW1VcGRhdGVQZXJpb2RUaW1lb3V0Xyk7XG4gICAgdmFyIG1lZGlhID0gdGhpcy5tZWRpYSgpO1xuXG4gICAgaWYgKGlzRmluYWxSZW5kaXRpb24pIHtcbiAgICAgIHZhciBkZWxheSA9IG1lZGlhID8gbWVkaWEudGFyZ2V0RHVyYXRpb24gLyAyICogMTAwMCA6IDUgKiAxMDAwO1xuICAgICAgdGhpcy5tZWRpYVVwZGF0ZVRpbWVvdXQgPSB3aW5kb3ckMS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNC5sb2FkKCk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBiZWNhdXNlIHRoZSBwbGF5bGlzdHMgYXJlIGludGVybmFsIHRvIHRoZSBtYW5pZmVzdCwgbG9hZCBzaG91bGQgZWl0aGVyIGxvYWQgdGhlXG4gICAgLy8gbWFpbiBtYW5pZmVzdCwgb3IgZG8gbm90aGluZyBidXQgdHJpZ2dlciBhbiBldmVudFxuXG5cbiAgICBpZiAoIXRoaXMuc3RhcnRlZCkge1xuICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChtZWRpYSAmJiAhbWVkaWEuZW5kTGlzdCkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdtZWRpYXVwZGF0ZXRpbWVvdXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRwbGF5bGlzdCcpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc3RhcnQgPSBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7IC8vIFdlIGRvbid0IG5lZWQgdG8gcmVxdWVzdCB0aGUgbWFzdGVyIG1hbmlmZXN0IGFnYWluXG4gICAgLy8gQ2FsbCB0aGlzIGFzeW5jaHJvbm91c2x5IHRvIG1hdGNoIHRoZSB4aHIgcmVxdWVzdCBiZWhhdmlvciBiZWxvd1xuXG4gICAgaWYgKHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfKSB7XG4gICAgICB0aGlzLm1lZGlhUmVxdWVzdF8gPSB3aW5kb3ckMS5zZXRUaW1lb3V0KHRoaXMuaGF2ZU1hc3Rlcl8uYmluZCh0aGlzKSwgMCk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyByZXF1ZXN0IHRoZSBzcGVjaWZpZWQgVVJMXG5cblxuICAgIHRoaXMucmVxdWVzdCA9IHRoaXMudmhzXy54aHIoe1xuICAgICAgdXJpOiB0aGlzLnNyY1VybCxcbiAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy53aXRoQ3JlZGVudGlhbHNcbiAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIHJlcSkge1xuICAgICAgLy8gZGlzcG9zZWRcbiAgICAgIGlmICghX3RoaXM1LnJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBjbGVhciB0aGUgbG9hZGVyJ3MgcmVxdWVzdCByZWZlcmVuY2VcblxuXG4gICAgICBfdGhpczUucmVxdWVzdCA9IG51bGw7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBfdGhpczUuZXJyb3IgPSB7XG4gICAgICAgICAgc3RhdHVzOiByZXEuc3RhdHVzLFxuICAgICAgICAgIG1lc3NhZ2U6ICdEQVNIIHBsYXlsaXN0IHJlcXVlc3QgZXJyb3IgYXQgVVJMOiAnICsgX3RoaXM1LnNyY1VybCxcbiAgICAgICAgICByZXNwb25zZVRleHQ6IHJlcS5yZXNwb25zZVRleHQsXG4gICAgICAgICAgLy8gTUVESUFfRVJSX05FVFdPUktcbiAgICAgICAgICBjb2RlOiAyXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKF90aGlzNS5zdGF0ZSA9PT0gJ0hBVkVfTk9USElORycpIHtcbiAgICAgICAgICBfdGhpczUuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF90aGlzNS50cmlnZ2VyKCdlcnJvcicpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczUubWFzdGVyWG1sXyA9IHJlcS5yZXNwb25zZVRleHQ7XG5cbiAgICAgIGlmIChyZXEucmVzcG9uc2VIZWFkZXJzICYmIHJlcS5yZXNwb25zZUhlYWRlcnMuZGF0ZSkge1xuICAgICAgICBfdGhpczUubWFzdGVyTG9hZGVkXyA9IERhdGUucGFyc2UocmVxLnJlc3BvbnNlSGVhZGVycy5kYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzNS5tYXN0ZXJMb2FkZWRfID0gRGF0ZS5ub3coKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXM1LnNyY1VybCA9IHJlc29sdmVNYW5pZmVzdFJlZGlyZWN0KF90aGlzNS5oYW5kbGVNYW5pZmVzdFJlZGlyZWN0cywgX3RoaXM1LnNyY1VybCwgcmVxKTtcblxuICAgICAgX3RoaXM1LnN5bmNDbGllbnRTZXJ2ZXJDbG9ja18oX3RoaXM1Lm9uQ2xpZW50U2VydmVyQ2xvY2tTeW5jXy5iaW5kKF90aGlzNSkpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIG1hc3RlciB4bWwgZm9yIFVUQ1RpbWluZyBub2RlIHRvIHN5bmMgdGhlIGNsaWVudCBjbG9jayB0byB0aGUgc2VydmVyXG4gICAqIGNsb2NrLiBJZiB0aGUgVVRDVGltaW5nIG5vZGUgcmVxdWlyZXMgYSBIRUFEIG9yIEdFVCByZXF1ZXN0LCB0aGF0IHJlcXVlc3QgaXMgbWFkZS5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZVxuICAgKiAgICAgICAgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIGNsb2NrIHN5bmMgaGFzIGNvbXBsZXRlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zeW5jQ2xpZW50U2VydmVyQ2xvY2tfID0gZnVuY3Rpb24gc3luY0NsaWVudFNlcnZlckNsb2NrXyhkb25lKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB2YXIgdXRjVGltaW5nID0gcGFyc2VVVENUaW1pbmcodGhpcy5tYXN0ZXJYbWxfKTsgLy8gTm8gVVRDVGltaW5nIGVsZW1lbnQgZm91bmQgaW4gdGhlIG1wZC4gVXNlIERhdGUgaGVhZGVyIGZyb20gbXBkIHJlcXVlc3QgYXMgdGhlXG4gICAgLy8gc2VydmVyIGNsb2NrXG5cbiAgICBpZiAodXRjVGltaW5nID09PSBudWxsKSB7XG4gICAgICB0aGlzLmNsaWVudE9mZnNldF8gPSB0aGlzLm1hc3RlckxvYWRlZF8gLSBEYXRlLm5vdygpO1xuICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICB9XG5cbiAgICBpZiAodXRjVGltaW5nLm1ldGhvZCA9PT0gJ0RJUkVDVCcpIHtcbiAgICAgIHRoaXMuY2xpZW50T2Zmc2V0XyA9IHV0Y1RpbWluZy52YWx1ZSAtIERhdGUubm93KCk7XG4gICAgICByZXR1cm4gZG9uZSgpO1xuICAgIH1cblxuICAgIHRoaXMucmVxdWVzdCA9IHRoaXMudmhzXy54aHIoe1xuICAgICAgdXJpOiByZXNvbHZlVXJsKHRoaXMuc3JjVXJsLCB1dGNUaW1pbmcudmFsdWUpLFxuICAgICAgbWV0aG9kOiB1dGNUaW1pbmcubWV0aG9kLFxuICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLndpdGhDcmVkZW50aWFsc1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvciwgcmVxKSB7XG4gICAgICAvLyBkaXNwb3NlZFxuICAgICAgaWYgKCFfdGhpczYucmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAvLyBzeW5jIHJlcXVlc3QgZmFpbGVkLCBmYWxsIGJhY2sgdG8gdXNpbmcgZGF0ZSBoZWFkZXIgZnJvbSBtcGRcbiAgICAgICAgLy8gVE9ETzogbG9nIHdhcm5pbmdcbiAgICAgICAgX3RoaXM2LmNsaWVudE9mZnNldF8gPSBfdGhpczYubWFzdGVyTG9hZGVkXyAtIERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXJ2ZXJUaW1lO1xuXG4gICAgICBpZiAodXRjVGltaW5nLm1ldGhvZCA9PT0gJ0hFQUQnKSB7XG4gICAgICAgIGlmICghcmVxLnJlc3BvbnNlSGVhZGVycyB8fCAhcmVxLnJlc3BvbnNlSGVhZGVycy5kYXRlKSB7XG4gICAgICAgICAgLy8gZXhwZWN0ZWQgZGF0ZSBoZWFkZXIgbm90IHByZXNldCwgZmFsbCBiYWNrIHRvIHVzaW5nIGRhdGUgaGVhZGVyIGZyb20gbXBkXG4gICAgICAgICAgLy8gVE9ETzogbG9nIHdhcm5pbmdcbiAgICAgICAgICBzZXJ2ZXJUaW1lID0gX3RoaXM2Lm1hc3RlckxvYWRlZF87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VydmVyVGltZSA9IERhdGUucGFyc2UocmVxLnJlc3BvbnNlSGVhZGVycy5kYXRlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VydmVyVGltZSA9IERhdGUucGFyc2UocmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzNi5jbGllbnRPZmZzZXRfID0gc2VydmVyVGltZSAtIERhdGUubm93KCk7XG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmhhdmVNYXN0ZXJfID0gZnVuY3Rpb24gaGF2ZU1hc3Rlcl8oKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdIQVZFX01BU1RFUic7IC8vIGNsZWFyIG1lZGlhIHJlcXVlc3RcblxuICAgIHRoaXMubWVkaWFSZXF1ZXN0XyA9IG51bGw7XG5cbiAgICBpZiAoIXRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfKSB7XG4gICAgICB0aGlzLnVwZGF0ZU1haW5NYW5pZmVzdF8ocGFyc2VNYXN0ZXJYbWwoe1xuICAgICAgICBtYXN0ZXJYbWw6IHRoaXMubWFzdGVyWG1sXyxcbiAgICAgICAgc3JjVXJsOiB0aGlzLnNyY1VybCxcbiAgICAgICAgY2xpZW50T2Zmc2V0OiB0aGlzLmNsaWVudE9mZnNldF8sXG4gICAgICAgIHNpZHhNYXBwaW5nOiB0aGlzLnNpZHhNYXBwaW5nX1xuICAgICAgfSkpOyAvLyBXZSBoYXZlIHRoZSBtYXN0ZXIgcGxheWxpc3QgYXQgdGhpcyBwb2ludCwgc29cbiAgICAgIC8vIHRyaWdnZXIgdGhpcyB0byBhbGxvdyBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJcbiAgICAgIC8vIHRvIG1ha2UgYW4gaW5pdGlhbCBwbGF5bGlzdCBzZWxlY3Rpb25cblxuICAgICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRwbGF5bGlzdCcpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMubWVkaWFfKSB7XG4gICAgICAvLyBubyBtZWRpYSBwbGF5bGlzdCB3YXMgc3BlY2lmaWNhbGx5IHNlbGVjdGVkIHNvIHNlbGVjdFxuICAgICAgLy8gdGhlIG9uZSB0aGUgY2hpbGQgcGxheWxpc3QgbG9hZGVyIHdhcyBjcmVhdGVkIHdpdGhcbiAgICAgIHRoaXMubWVkaWEodGhpcy5jaGlsZFBsYXlsaXN0Xyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by51cGRhdGVNaW5pbXVtVXBkYXRlUGVyaW9kVGltZW91dF8gPSBmdW5jdGlvbiB1cGRhdGVNaW5pbXVtVXBkYXRlUGVyaW9kVGltZW91dF8oKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7IC8vIENsZWFyIGV4aXN0aW5nIHRpbWVvdXRcblxuXG4gICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMubWluaW11bVVwZGF0ZVBlcmlvZFRpbWVvdXRfKTtcblxuICAgIHZhciBjcmVhdGVNVVBUaW1lb3V0ID0gZnVuY3Rpb24gY3JlYXRlTVVQVGltZW91dChtdXApIHtcbiAgICAgIF90aGlzNy5taW5pbXVtVXBkYXRlUGVyaW9kVGltZW91dF8gPSB3aW5kb3ckMS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM3LnRyaWdnZXIoJ21pbmltdW1VcGRhdGVQZXJpb2QnKTtcbiAgICAgIH0sIG11cCk7XG4gICAgfTtcblxuICAgIHZhciBtaW5pbXVtVXBkYXRlUGVyaW9kID0gdGhpcy5tYXN0ZXIgJiYgdGhpcy5tYXN0ZXIubWluaW11bVVwZGF0ZVBlcmlvZDtcblxuICAgIGlmIChtaW5pbXVtVXBkYXRlUGVyaW9kID4gMCkge1xuICAgICAgY3JlYXRlTVVQVGltZW91dChtaW5pbXVtVXBkYXRlUGVyaW9kKTsgLy8gSWYgdGhlIG1pbmltdW1VcGRhdGVQZXJpb2QgaGFzIGEgdmFsdWUgb2YgMCwgdGhhdCBpbmRpY2F0ZXMgdGhhdCB0aGUgY3VycmVudFxuICAgICAgLy8gTVBEIGhhcyBubyBmdXR1cmUgdmFsaWRpdHksIHNvIGEgbmV3IG9uZSB3aWxsIG5lZWQgdG8gYmUgYWNxdWlyZWQgd2hlbiBuZXdcbiAgICAgIC8vIG1lZGlhIHNlZ21lbnRzIGFyZSB0byBiZSBtYWRlIGF2YWlsYWJsZS4gVGh1cywgd2UgdXNlIHRoZSB0YXJnZXQgZHVyYXRpb25cbiAgICAgIC8vIGluIHRoaXMgY2FzZVxuICAgIH0gZWxzZSBpZiAobWluaW11bVVwZGF0ZVBlcmlvZCA9PT0gMCkge1xuICAgICAgLy8gSWYgd2UgaGF2ZW4ndCB5ZXQgc2VsZWN0ZWQgYSBwbGF5bGlzdCwgd2FpdCB1bnRpbCB0aGVuIHNvIHdlIGtub3cgdGhlXG4gICAgICAvLyB0YXJnZXQgZHVyYXRpb25cbiAgICAgIGlmICghdGhpcy5tZWRpYSgpKSB7XG4gICAgICAgIHRoaXMub25lKCdsb2FkZWRwbGF5bGlzdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjcmVhdGVNVVBUaW1lb3V0KF90aGlzNy5tZWRpYSgpLnRhcmdldER1cmF0aW9uICogMTAwMCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3JlYXRlTVVQVGltZW91dCh0aGlzLm1lZGlhKCkudGFyZ2V0RHVyYXRpb24gKiAxMDAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIGFmdGVyIGNsaWVudC9zZXJ2ZXIgY2xvY2sgc3luY2hyb25pemF0aW9uIGhhcyBoYXBwZW5lZC4gU2V0cyB1cFxuICAgKiB4bWwgcmVmcmVzaCB0aW1lciBpZiBzcGVjaWZpY2VkIGJ5IHRoZSBtYW5pZmVzdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25DbGllbnRTZXJ2ZXJDbG9ja1N5bmNfID0gZnVuY3Rpb24gb25DbGllbnRTZXJ2ZXJDbG9ja1N5bmNfKCkge1xuICAgIHRoaXMuaGF2ZU1hc3Rlcl8oKTtcblxuICAgIGlmICghdGhpcy5oYXNQZW5kaW5nUmVxdWVzdCgpICYmICF0aGlzLm1lZGlhXykge1xuICAgICAgdGhpcy5tZWRpYSh0aGlzLm1hc3Rlci5wbGF5bGlzdHNbMF0pO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlTWluaW11bVVwZGF0ZVBlcmlvZFRpbWVvdXRfKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdpdmVuIGEgbmV3IG1hbmlmZXN0LCB1cGRhdGUgb3VyIHBvaW50ZXIgdG8gaXQgYW5kIHVwZGF0ZSB0aGUgc3JjVXJsIGJhc2VkIG9uIHRoZSBsb2NhdGlvbiBlbGVtZW50cyBvZiB0aGUgbWFuaWZlc3QsIGlmIHRoZXkgZXhpc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB1cGRhdGVkTWFuaWZlc3QgdGhlIG1hbmlmZXN0IHRvIHVwZGF0ZSB0b1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVNYWluTWFuaWZlc3RfID0gZnVuY3Rpb24gdXBkYXRlTWFpbk1hbmlmZXN0Xyh1cGRhdGVkTWFuaWZlc3QpIHtcbiAgICB0aGlzLm1hc3RlciA9IHVwZGF0ZWRNYW5pZmVzdDsgLy8gaWYgbG9jYXRpb25zIGlzbid0IHNldCBvciBpcyBhbiBlbXB0eSBhcnJheSwgZXhpdCBlYXJseVxuXG4gICAgaWYgKCF0aGlzLm1hc3Rlci5sb2NhdGlvbnMgfHwgIXRoaXMubWFzdGVyLmxvY2F0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLm1hc3Rlci5sb2NhdGlvbnNbMF07XG5cbiAgICBpZiAobG9jYXRpb24gIT09IHRoaXMuc3JjVXJsKSB7XG4gICAgICB0aGlzLnNyY1VybCA9IGxvY2F0aW9uO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2VuZHMgcmVxdWVzdCB0byByZWZyZXNoIHRoZSBtYXN0ZXIgeG1sIGFuZCB1cGRhdGVzIHRoZSBwYXJzZWQgbWFzdGVyIG1hbmlmZXN0XG4gICAqIFRPRE86IERvZXMgdGhlIGNsaWVudCBvZmZzZXQgbmVlZCB0byBiZSByZWNhbGN1bGF0ZWQgd2hlbiB0aGUgeG1sIGlzIHJlZnJlc2hlZD9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVmcmVzaFhtbF8gPSBmdW5jdGlvbiByZWZyZXNoWG1sXygpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpczsgLy8gVGhlIHNyY1VybCBoZXJlICptYXkqIG5lZWQgdG8gcGFzcyB0aHJvdWdoIGhhbmRsZU1hbmlmZXN0c1JlZGlyZWN0cyB3aGVuXG4gICAgLy8gc2lkeCBpcyBpbXBsZW1lbnRlZFxuXG5cbiAgICB0aGlzLnJlcXVlc3QgPSB0aGlzLnZoc18ueGhyKHtcbiAgICAgIHVyaTogdGhpcy5zcmNVcmwsXG4gICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzXG4gICAgfSwgZnVuY3Rpb24gKGVycm9yLCByZXEpIHtcbiAgICAgIC8vIGRpc3Bvc2VkXG4gICAgICBpZiAoIV90aGlzOC5yZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gY2xlYXIgdGhlIGxvYWRlcidzIHJlcXVlc3QgcmVmZXJlbmNlXG5cblxuICAgICAgX3RoaXM4LnJlcXVlc3QgPSBudWxsO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgX3RoaXM4LmVycm9yID0ge1xuICAgICAgICAgIHN0YXR1czogcmVxLnN0YXR1cyxcbiAgICAgICAgICBtZXNzYWdlOiAnREFTSCBwbGF5bGlzdCByZXF1ZXN0IGVycm9yIGF0IFVSTDogJyArIF90aGlzOC5zcmNVcmwsXG4gICAgICAgICAgcmVzcG9uc2VUZXh0OiByZXEucmVzcG9uc2VUZXh0LFxuICAgICAgICAgIC8vIE1FRElBX0VSUl9ORVRXT1JLXG4gICAgICAgICAgY29kZTogMlxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChfdGhpczguc3RhdGUgPT09ICdIQVZFX05PVEhJTkcnKSB7XG4gICAgICAgICAgX3RoaXM4LnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfdGhpczgudHJpZ2dlcignZXJyb3InKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXM4Lm1hc3RlclhtbF8gPSByZXEucmVzcG9uc2VUZXh0OyAvLyBUaGlzIHdpbGwgZmlsdGVyIG91dCB1cGRhdGVkIHNpZHggaW5mbyBmcm9tIHRoZSBtYXBwaW5nXG5cbiAgICAgIF90aGlzOC5zaWR4TWFwcGluZ18gPSBmaWx0ZXJDaGFuZ2VkU2lkeE1hcHBpbmdzKF90aGlzOC5tYXN0ZXJYbWxfLCBfdGhpczguc3JjVXJsLCBfdGhpczguY2xpZW50T2Zmc2V0XywgX3RoaXM4LnNpZHhNYXBwaW5nXyk7XG4gICAgICB2YXIgbWFzdGVyID0gcGFyc2VNYXN0ZXJYbWwoe1xuICAgICAgICBtYXN0ZXJYbWw6IF90aGlzOC5tYXN0ZXJYbWxfLFxuICAgICAgICBzcmNVcmw6IF90aGlzOC5zcmNVcmwsXG4gICAgICAgIGNsaWVudE9mZnNldDogX3RoaXM4LmNsaWVudE9mZnNldF8sXG4gICAgICAgIHNpZHhNYXBwaW5nOiBfdGhpczguc2lkeE1hcHBpbmdfXG4gICAgICB9KTtcbiAgICAgIHZhciB1cGRhdGVkTWFzdGVyID0gdXBkYXRlTWFzdGVyJDEoX3RoaXM4Lm1hc3RlciwgbWFzdGVyKTtcblxuICAgICAgdmFyIGN1cnJlbnRTaWR4SW5mbyA9IF90aGlzOC5tZWRpYSgpLnNpZHg7XG5cbiAgICAgIGlmICh1cGRhdGVkTWFzdGVyKSB7XG4gICAgICAgIGlmIChjdXJyZW50U2lkeEluZm8pIHtcbiAgICAgICAgICB2YXIgc2lkeEtleSA9IGdlbmVyYXRlU2lkeEtleShjdXJyZW50U2lkeEluZm8pOyAvLyB0aGUgc2lkeCB3YXMgdXBkYXRlZCwgc28gdGhlIHByZXZpb3VzIG1hcHBpbmcgd2FzIHJlbW92ZWRcblxuICAgICAgICAgIGlmICghX3RoaXM4LnNpZHhNYXBwaW5nX1tzaWR4S2V5XSkge1xuICAgICAgICAgICAgdmFyIHBsYXlsaXN0ID0gX3RoaXM4Lm1lZGlhKCk7XG5cbiAgICAgICAgICAgIF90aGlzOC5yZXF1ZXN0ID0gcmVxdWVzdFNpZHhfKF90aGlzOCwgcGxheWxpc3Quc2lkeCwgcGxheWxpc3QsIF90aGlzOC52aHNfLnhociwge1xuICAgICAgICAgICAgICBoYW5kbGVNYW5pZmVzdFJlZGlyZWN0czogX3RoaXM4LmhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzXG4gICAgICAgICAgICB9LCBfdGhpczguc2lkeFJlcXVlc3RGaW5pc2hlZF8ocGxheWxpc3QsIG1hc3RlciwgX3RoaXM4LnN0YXRlLCBmdW5jdGlvbiAobmV3TWFzdGVyLCBzaWR4KSB7XG4gICAgICAgICAgICAgIGlmICghbmV3TWFzdGVyIHx8ICFzaWR4KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gcmVxdWVzdCBzaWR4IG9uIG1pbmltdW1VcGRhdGVQZXJpb2QnKTtcbiAgICAgICAgICAgICAgfSAvLyB1cGRhdGUgbG9hZGVyJ3Mgc2lkeE1hcHBpbmcgd2l0aCBwYXJzZWQgc2lkeCBib3hcblxuXG4gICAgICAgICAgICAgIF90aGlzOC5zaWR4TWFwcGluZ19bc2lkeEtleV0uc2lkeCA9IHNpZHg7XG5cbiAgICAgICAgICAgICAgX3RoaXM4LnVwZGF0ZU1pbmltdW1VcGRhdGVQZXJpb2RUaW1lb3V0XygpOyAvLyBUT0RPOiBkbyB3ZSBuZWVkIHRvIHJlbG9hZCB0aGUgY3VycmVudCBwbGF5bGlzdD9cblxuXG4gICAgICAgICAgICAgIF90aGlzOC5yZWZyZXNoTWVkaWFfKF90aGlzOC5tZWRpYSgpLmlkKTtcblxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzOC51cGRhdGVNYWluTWFuaWZlc3RfKHVwZGF0ZWRNYXN0ZXIpO1xuXG4gICAgICAgICAgaWYgKF90aGlzOC5tZWRpYV8pIHtcbiAgICAgICAgICAgIF90aGlzOC5tZWRpYV8gPSBfdGhpczgubWFzdGVyLnBsYXlsaXN0c1tfdGhpczgubWVkaWFfLmlkXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3RoaXM4LnVwZGF0ZU1pbmltdW1VcGRhdGVQZXJpb2RUaW1lb3V0XygpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZWZyZXNoZXMgdGhlIG1lZGlhIHBsYXlsaXN0IGJ5IHJlLXBhcnNpbmcgdGhlIG1hc3RlciB4bWwgYW5kIHVwZGF0aW5nIHBsYXlsaXN0XG4gICAqIHJlZmVyZW5jZXMuIElmIHRoaXMgaXMgYW4gYWx0ZXJuYXRlIGxvYWRlciwgdGhlIHVwZGF0ZWQgcGFyc2VkIG1hbmlmZXN0IGlzIHJldHJpZXZlZFxuICAgKiBmcm9tIHRoZSBtYXN0ZXIgbG9hZGVyLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZWZyZXNoTWVkaWFfID0gZnVuY3Rpb24gcmVmcmVzaE1lZGlhXyhtZWRpYUlEKSB7XG4gICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICBpZiAoIW1lZGlhSUQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmVmcmVzaE1lZGlhXyBtdXN0IHRha2UgYSBtZWRpYSBpZCcpO1xuICAgIH1cblxuICAgIHZhciBvbGRNYXN0ZXI7XG4gICAgdmFyIG5ld01hc3RlcjtcblxuICAgIGlmICh0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXykge1xuICAgICAgb2xkTWFzdGVyID0gdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWFzdGVyO1xuICAgICAgbmV3TWFzdGVyID0gcGFyc2VNYXN0ZXJYbWwoe1xuICAgICAgICBtYXN0ZXJYbWw6IHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1hc3RlclhtbF8sXG4gICAgICAgIHNyY1VybDogdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8uc3JjVXJsLFxuICAgICAgICBjbGllbnRPZmZzZXQ6IHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLmNsaWVudE9mZnNldF8sXG4gICAgICAgIHNpZHhNYXBwaW5nOiB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5zaWR4TWFwcGluZ19cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRNYXN0ZXIgPSB0aGlzLm1hc3RlcjtcbiAgICAgIG5ld01hc3RlciA9IHBhcnNlTWFzdGVyWG1sKHtcbiAgICAgICAgbWFzdGVyWG1sOiB0aGlzLm1hc3RlclhtbF8sXG4gICAgICAgIHNyY1VybDogdGhpcy5zcmNVcmwsXG4gICAgICAgIGNsaWVudE9mZnNldDogdGhpcy5jbGllbnRPZmZzZXRfLFxuICAgICAgICBzaWR4TWFwcGluZzogdGhpcy5zaWR4TWFwcGluZ19cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciB1cGRhdGVkTWFzdGVyID0gdXBkYXRlTWFzdGVyJDEob2xkTWFzdGVyLCBuZXdNYXN0ZXIpO1xuXG4gICAgaWYgKHVwZGF0ZWRNYXN0ZXIpIHtcbiAgICAgIGlmICh0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXykge1xuICAgICAgICB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tYXN0ZXIgPSB1cGRhdGVkTWFzdGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tYXN0ZXIgPSB1cGRhdGVkTWFzdGVyO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1lZGlhXyA9IHVwZGF0ZWRNYXN0ZXIucGxheWxpc3RzW21lZGlhSURdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1lZGlhXyA9IG9sZE1hc3Rlci5wbGF5bGlzdHNbbWVkaWFJRF07XG4gICAgICB0aGlzLnRyaWdnZXIoJ3BsYXlsaXN0dW5jaGFuZ2VkJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm1lZGlhKCkuZW5kTGlzdCkge1xuICAgICAgdGhpcy5tZWRpYVVwZGF0ZVRpbWVvdXQgPSB3aW5kb3ckMS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM5LnRyaWdnZXIoJ21lZGlhdXBkYXRldGltZW91dCcpO1xuICAgICAgfSwgcmVmcmVzaERlbGF5KHRoaXMubWVkaWEoKSwgISF1cGRhdGVkTWFzdGVyKSk7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRwbGF5bGlzdCcpO1xuICB9O1xuXG4gIHJldHVybiBEYXNoUGxheWxpc3RMb2FkZXI7XG59KEV2ZW50VGFyZ2V0JDEkMSk7XG5cbnZhciBDb25maWcgPSB7XG4gIEdPQUxfQlVGRkVSX0xFTkdUSDogMzAsXG4gIE1BWF9HT0FMX0JVRkZFUl9MRU5HVEg6IDYwLFxuICBCQUNLX0JVRkZFUl9MRU5HVEg6IDMwLFxuICBHT0FMX0JVRkZFUl9MRU5HVEhfUkFURTogMSxcbiAgLy8gMC41IE1CL3NcbiAgSU5JVElBTF9CQU5EV0lEVEg6IDQxOTQzMDQsXG4gIC8vIEEgZnVkZ2UgZmFjdG9yIHRvIGFwcGx5IHRvIGFkdmVydGlzZWQgcGxheWxpc3QgYml0cmF0ZXMgdG8gYWNjb3VudCBmb3JcbiAgLy8gdGVtcG9yYXJ5IGZsdWNhdGlvbnMgaW4gY2xpZW50IGJhbmR3aWR0aFxuICBCQU5EV0lEVEhfVkFSSUFOQ0U6IDEuMixcbiAgLy8gSG93IG11Y2ggb2YgdGhlIGJ1ZmZlciBtdXN0IGJlIGZpbGxlZCBiZWZvcmUgd2UgY29uc2lkZXIgdXBzd2l0Y2hpbmdcbiAgQlVGRkVSX0xPV19XQVRFUl9MSU5FOiAwLFxuICBNQVhfQlVGRkVSX0xPV19XQVRFUl9MSU5FOiAzMCxcbiAgQlVGRkVSX0xPV19XQVRFUl9MSU5FX1JBVEU6IDFcbn07XG5cbnZhciBzdHJpbmdUb0FycmF5QnVmZmVyID0gZnVuY3Rpb24gc3RyaW5nVG9BcnJheUJ1ZmZlcihzdHJpbmcpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShuZXcgQXJyYXlCdWZmZXIoc3RyaW5nLmxlbmd0aCkpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgdmlld1tpXSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICB9XG5cbiAgcmV0dXJuIHZpZXcuYnVmZmVyO1xufTtcblxudmFyIHRyYW5zbXV4UXVldWUgPSBbXTtcbnZhciBjdXJyZW50VHJhbnNtdXg7XG5cbnZhciBoYW5kbGVEYXRhXyA9IGZ1bmN0aW9uIGhhbmRsZURhdGFfKGV2ZW50LCB0cmFuc211eGVkRGF0YSwgY2FsbGJhY2spIHtcbiAgdmFyIF9ldmVudCRkYXRhJHNlZ21lbnQgPSBldmVudC5kYXRhLnNlZ21lbnQsXG4gICAgICB0eXBlID0gX2V2ZW50JGRhdGEkc2VnbWVudC50eXBlLFxuICAgICAgaW5pdFNlZ21lbnQgPSBfZXZlbnQkZGF0YSRzZWdtZW50LmluaXRTZWdtZW50LFxuICAgICAgY2FwdGlvbnMgPSBfZXZlbnQkZGF0YSRzZWdtZW50LmNhcHRpb25zLFxuICAgICAgY2FwdGlvblN0cmVhbXMgPSBfZXZlbnQkZGF0YSRzZWdtZW50LmNhcHRpb25TdHJlYW1zLFxuICAgICAgbWV0YWRhdGEgPSBfZXZlbnQkZGF0YSRzZWdtZW50Lm1ldGFkYXRhLFxuICAgICAgdmlkZW9GcmFtZUR0c1RpbWUgPSBfZXZlbnQkZGF0YSRzZWdtZW50LnZpZGVvRnJhbWVEdHNUaW1lLFxuICAgICAgdmlkZW9GcmFtZVB0c1RpbWUgPSBfZXZlbnQkZGF0YSRzZWdtZW50LnZpZGVvRnJhbWVQdHNUaW1lO1xuICB0cmFuc211eGVkRGF0YS5idWZmZXIucHVzaCh7XG4gICAgY2FwdGlvbnM6IGNhcHRpb25zLFxuICAgIGNhcHRpb25TdHJlYW1zOiBjYXB0aW9uU3RyZWFtcyxcbiAgICBtZXRhZGF0YTogbWV0YWRhdGFcbiAgfSk7IC8vIHJpZ2h0IG5vdywgYm94ZXMgd2lsbCBjb21lIGJhY2sgZnJvbSBwYXJ0aWFsIHRyYW5zbXV4ZXIsIGRhdGEgZnJvbSBmdWxsXG5cbiAgdmFyIGJveGVzID0gZXZlbnQuZGF0YS5zZWdtZW50LmJveGVzIHx8IHtcbiAgICBkYXRhOiBldmVudC5kYXRhLnNlZ21lbnQuZGF0YVxuICB9O1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgLy8gY2FzdCBBcnJheUJ1ZmZlciB0byBUeXBlZEFycmF5XG4gICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoYm94ZXMuZGF0YSwgYm94ZXMuZGF0YS5ieXRlT2Zmc2V0LCBib3hlcy5kYXRhLmJ5dGVMZW5ndGgpLFxuICAgIGluaXRTZWdtZW50OiBuZXcgVWludDhBcnJheShpbml0U2VnbWVudC5kYXRhLCBpbml0U2VnbWVudC5ieXRlT2Zmc2V0LCBpbml0U2VnbWVudC5ieXRlTGVuZ3RoKVxuICB9O1xuXG4gIGlmICh0eXBlb2YgdmlkZW9GcmFtZUR0c1RpbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmVzdWx0LnZpZGVvRnJhbWVEdHNUaW1lID0gdmlkZW9GcmFtZUR0c1RpbWU7XG4gIH1cblxuICBpZiAodHlwZW9mIHZpZGVvRnJhbWVQdHNUaW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJlc3VsdC52aWRlb0ZyYW1lUHRzVGltZSA9IHZpZGVvRnJhbWVQdHNUaW1lO1xuICB9XG5cbiAgY2FsbGJhY2socmVzdWx0KTtcbn07XG5cbnZhciBoYW5kbGVEb25lXyA9IGZ1bmN0aW9uIGhhbmRsZURvbmVfKF9yZWYpIHtcbiAgdmFyIHRyYW5zbXV4ZWREYXRhID0gX3JlZi50cmFuc211eGVkRGF0YSxcbiAgICAgIGNhbGxiYWNrID0gX3JlZi5jYWxsYmFjazsgLy8gUHJldmlvdXNseSB3ZSBvbmx5IHJldHVybmVkIGRhdGEgb24gZGF0YSBldmVudHMsXG4gIC8vIG5vdCBvbiBkb25lIGV2ZW50cy4gQ2xlYXIgb3V0IHRoZSBidWZmZXIgdG8ga2VlcCB0aGF0IGNvbnNpc3RlbnQuXG5cbiAgdHJhbnNtdXhlZERhdGEuYnVmZmVyID0gW107IC8vIGFsbCBidWZmZXJzIHNob3VsZCBoYXZlIGJlZW4gZmx1c2hlZCBmcm9tIHRoZSBtdXhlciwgc28gc3RhcnQgcHJvY2Vzc2luZyBhbnl0aGluZyB3ZVxuICAvLyBoYXZlIHJlY2VpdmVkXG5cbiAgY2FsbGJhY2sodHJhbnNtdXhlZERhdGEpO1xufTtcblxudmFyIGhhbmRsZUdvcEluZm9fID0gZnVuY3Rpb24gaGFuZGxlR29wSW5mb18oZXZlbnQsIHRyYW5zbXV4ZWREYXRhKSB7XG4gIHRyYW5zbXV4ZWREYXRhLmdvcEluZm8gPSBldmVudC5kYXRhLmdvcEluZm87XG59O1xuXG52YXIgcHJvY2Vzc1RyYW5zbXV4ID0gZnVuY3Rpb24gcHJvY2Vzc1RyYW5zbXV4KF9yZWYyKSB7XG4gIHZhciB0cmFuc211eGVyID0gX3JlZjIudHJhbnNtdXhlcixcbiAgICAgIGJ5dGVzID0gX3JlZjIuYnl0ZXMsXG4gICAgICBhdWRpb0FwcGVuZFN0YXJ0ID0gX3JlZjIuYXVkaW9BcHBlbmRTdGFydCxcbiAgICAgIGdvcHNUb0FsaWduV2l0aCA9IF9yZWYyLmdvcHNUb0FsaWduV2l0aCxcbiAgICAgIGlzUGFydGlhbCA9IF9yZWYyLmlzUGFydGlhbCxcbiAgICAgIHJlbXV4ID0gX3JlZjIucmVtdXgsXG4gICAgICBvbkRhdGEgPSBfcmVmMi5vbkRhdGEsXG4gICAgICBvblRyYWNrSW5mbyA9IF9yZWYyLm9uVHJhY2tJbmZvLFxuICAgICAgb25BdWRpb1RpbWluZ0luZm8gPSBfcmVmMi5vbkF1ZGlvVGltaW5nSW5mbyxcbiAgICAgIG9uVmlkZW9UaW1pbmdJbmZvID0gX3JlZjIub25WaWRlb1RpbWluZ0luZm8sXG4gICAgICBvblZpZGVvU2VnbWVudFRpbWluZ0luZm8gPSBfcmVmMi5vblZpZGVvU2VnbWVudFRpbWluZ0luZm8sXG4gICAgICBvbklkMyA9IF9yZWYyLm9uSWQzLFxuICAgICAgb25DYXB0aW9ucyA9IF9yZWYyLm9uQ2FwdGlvbnMsXG4gICAgICBvbkRvbmUgPSBfcmVmMi5vbkRvbmU7XG4gIHZhciB0cmFuc211eGVkRGF0YSA9IHtcbiAgICBpc1BhcnRpYWw6IGlzUGFydGlhbCxcbiAgICBidWZmZXI6IFtdXG4gIH07XG5cbiAgdmFyIGhhbmRsZU1lc3NhZ2UgPSBmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGV2ZW50KSB7XG4gICAgaWYgKCFjdXJyZW50VHJhbnNtdXgpIHtcbiAgICAgIC8vIGRpc3Bvc2VkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAnZGF0YScpIHtcbiAgICAgIGhhbmRsZURhdGFfKGV2ZW50LCB0cmFuc211eGVkRGF0YSwgb25EYXRhKTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuZGF0YS5hY3Rpb24gPT09ICd0cmFja2luZm8nKSB7XG4gICAgICBvblRyYWNrSW5mbyhldmVudC5kYXRhLnRyYWNrSW5mbyk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAnZ29wSW5mbycpIHtcbiAgICAgIGhhbmRsZUdvcEluZm9fKGV2ZW50LCB0cmFuc211eGVkRGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAnYXVkaW9UaW1pbmdJbmZvJykge1xuICAgICAgb25BdWRpb1RpbWluZ0luZm8oZXZlbnQuZGF0YS5hdWRpb1RpbWluZ0luZm8pO1xuICAgIH1cblxuICAgIGlmIChldmVudC5kYXRhLmFjdGlvbiA9PT0gJ3ZpZGVvVGltaW5nSW5mbycpIHtcbiAgICAgIG9uVmlkZW9UaW1pbmdJbmZvKGV2ZW50LmRhdGEudmlkZW9UaW1pbmdJbmZvKTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuZGF0YS5hY3Rpb24gPT09ICd2aWRlb1NlZ21lbnRUaW1pbmdJbmZvJykge1xuICAgICAgb25WaWRlb1NlZ21lbnRUaW1pbmdJbmZvKGV2ZW50LmRhdGEudmlkZW9TZWdtZW50VGltaW5nSW5mbyk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAnaWQzRnJhbWUnKSB7XG4gICAgICBvbklkMyhbZXZlbnQuZGF0YS5pZDNGcmFtZV0sIGV2ZW50LmRhdGEuaWQzRnJhbWUuZGlzcGF0Y2hUeXBlKTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuZGF0YS5hY3Rpb24gPT09ICdjYXB0aW9uJykge1xuICAgICAgb25DYXB0aW9ucyhldmVudC5kYXRhLmNhcHRpb24pO1xuICAgIH0gLy8gd2FpdCBmb3IgdGhlIHRyYW5zbXV4ZWQgZXZlbnQgc2luY2Ugd2UgbWF5IGhhdmUgYXVkaW8gYW5kIHZpZGVvXG5cblxuICAgIGlmIChldmVudC5kYXRhLnR5cGUgIT09ICd0cmFuc211eGVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyYW5zbXV4ZXIub25tZXNzYWdlID0gbnVsbDtcbiAgICBoYW5kbGVEb25lXyh7XG4gICAgICB0cmFuc211eGVkRGF0YTogdHJhbnNtdXhlZERhdGEsXG4gICAgICBjYWxsYmFjazogb25Eb25lXG4gICAgfSk7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxuICAgIGRlcXVldWUoKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gIH07XG5cbiAgdHJhbnNtdXhlci5vbm1lc3NhZ2UgPSBoYW5kbGVNZXNzYWdlO1xuXG4gIGlmIChhdWRpb0FwcGVuZFN0YXJ0KSB7XG4gICAgdHJhbnNtdXhlci5wb3N0TWVzc2FnZSh7XG4gICAgICBhY3Rpb246ICdzZXRBdWRpb0FwcGVuZFN0YXJ0JyxcbiAgICAgIGFwcGVuZFN0YXJ0OiBhdWRpb0FwcGVuZFN0YXJ0XG4gICAgfSk7XG4gIH0gLy8gYWxsb3cgZW1wdHkgYXJyYXlzIHRvIGJlIHBhc3NlZCB0byBjbGVhciBvdXQgR09Qc1xuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZ29wc1RvQWxpZ25XaXRoKSkge1xuICAgIHRyYW5zbXV4ZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgYWN0aW9uOiAnYWxpZ25Hb3BzV2l0aCcsXG4gICAgICBnb3BzVG9BbGlnbldpdGg6IGdvcHNUb0FsaWduV2l0aFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZW11eCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0cmFuc211eGVyLnBvc3RNZXNzYWdlKHtcbiAgICAgIGFjdGlvbjogJ3NldFJlbXV4JyxcbiAgICAgIHJlbXV4OiByZW11eFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGJ5dGVzLmJ5dGVMZW5ndGgpIHtcbiAgICB2YXIgYnVmZmVyID0gYnl0ZXMgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IGJ5dGVzIDogYnl0ZXMuYnVmZmVyO1xuICAgIHZhciBieXRlT2Zmc2V0ID0gYnl0ZXMgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IDAgOiBieXRlcy5ieXRlT2Zmc2V0O1xuICAgIHRyYW5zbXV4ZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgYWN0aW9uOiAncHVzaCcsXG4gICAgICAvLyBTZW5kIHRoZSB0eXBlZC1hcnJheSBvZiBkYXRhIGFzIGFuIEFycmF5QnVmZmVyIHNvIHRoYXRcbiAgICAgIC8vIGl0IGNhbiBiZSBzZW50IGFzIGEgXCJUcmFuc2ZlcmFibGVcIiBhbmQgYXZvaWQgdGhlIGNvc3RseVxuICAgICAgLy8gbWVtb3J5IGNvcHlcbiAgICAgIGRhdGE6IGJ1ZmZlcixcbiAgICAgIC8vIFRvIHJlY3JlYXRlIHRoZSBvcmlnaW5hbCB0eXBlZC1hcnJheSwgd2UgbmVlZCBpbmZvcm1hdGlvblxuICAgICAgLy8gYWJvdXQgd2hhdCBwb3J0aW9uIG9mIHRoZSBBcnJheUJ1ZmZlciBpdCB3YXMgYSB2aWV3IGludG9cbiAgICAgIGJ5dGVPZmZzZXQ6IGJ5dGVPZmZzZXQsXG4gICAgICBieXRlTGVuZ3RoOiBieXRlcy5ieXRlTGVuZ3RoXG4gICAgfSwgW2J1ZmZlcl0pO1xuICB9IC8vIGV2ZW4gaWYgd2UgZGlkbid0IHB1c2ggYW55IGJ5dGVzLCB3ZSBoYXZlIHRvIG1ha2Ugc3VyZSB3ZSBmbHVzaCBpbiBjYXNlIHdlIHJlYWNoZWRcbiAgLy8gdGhlIGVuZCBvZiB0aGUgc2VnbWVudFxuXG5cbiAgdHJhbnNtdXhlci5wb3N0TWVzc2FnZSh7XG4gICAgYWN0aW9uOiBpc1BhcnRpYWwgPyAncGFydGlhbEZsdXNoJyA6ICdmbHVzaCdcbiAgfSk7XG59O1xuXG52YXIgZGVxdWV1ZSA9IGZ1bmN0aW9uIGRlcXVldWUoKSB7XG4gIGN1cnJlbnRUcmFuc211eCA9IG51bGw7XG5cbiAgaWYgKHRyYW5zbXV4UXVldWUubGVuZ3RoKSB7XG4gICAgY3VycmVudFRyYW5zbXV4ID0gdHJhbnNtdXhRdWV1ZS5zaGlmdCgpO1xuXG4gICAgaWYgKHR5cGVvZiBjdXJyZW50VHJhbnNtdXggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGN1cnJlbnRUcmFuc211eCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzVHJhbnNtdXgoY3VycmVudFRyYW5zbXV4KTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwcm9jZXNzQWN0aW9uID0gZnVuY3Rpb24gcHJvY2Vzc0FjdGlvbih0cmFuc211eGVyLCBhY3Rpb24pIHtcbiAgdHJhbnNtdXhlci5wb3N0TWVzc2FnZSh7XG4gICAgYWN0aW9uOiBhY3Rpb25cbiAgfSk7XG4gIGRlcXVldWUoKTtcbn07XG5cbnZhciBlbnF1ZXVlQWN0aW9uID0gZnVuY3Rpb24gZW5xdWV1ZUFjdGlvbihhY3Rpb24sIHRyYW5zbXV4ZXIpIHtcbiAgaWYgKCFjdXJyZW50VHJhbnNtdXgpIHtcbiAgICBjdXJyZW50VHJhbnNtdXggPSBhY3Rpb247XG4gICAgcHJvY2Vzc0FjdGlvbih0cmFuc211eGVyLCBhY3Rpb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyYW5zbXV4UXVldWUucHVzaChwcm9jZXNzQWN0aW9uLmJpbmQobnVsbCwgdHJhbnNtdXhlciwgYWN0aW9uKSk7XG59O1xuXG52YXIgcmVzZXQgPSBmdW5jdGlvbiByZXNldCh0cmFuc211eGVyKSB7XG4gIGVucXVldWVBY3Rpb24oJ3Jlc2V0JywgdHJhbnNtdXhlcik7XG59O1xuXG52YXIgZW5kVGltZWxpbmUgPSBmdW5jdGlvbiBlbmRUaW1lbGluZSh0cmFuc211eGVyKSB7XG4gIGVucXVldWVBY3Rpb24oJ2VuZFRpbWVsaW5lJywgdHJhbnNtdXhlcik7XG59O1xuXG52YXIgdHJhbnNtdXggPSBmdW5jdGlvbiB0cmFuc211eChvcHRpb25zKSB7XG4gIGlmICghY3VycmVudFRyYW5zbXV4KSB7XG4gICAgY3VycmVudFRyYW5zbXV4ID0gb3B0aW9ucztcbiAgICBwcm9jZXNzVHJhbnNtdXgob3B0aW9ucyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJhbnNtdXhRdWV1ZS5wdXNoKG9wdGlvbnMpO1xufTtcblxudmFyIGRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAvLyBjbGVhciBvdXQgbW9kdWxlLWxldmVsIHJlZmVyZW5jZXNcbiAgY3VycmVudFRyYW5zbXV4ID0gbnVsbDtcbiAgdHJhbnNtdXhRdWV1ZS5sZW5ndGggPSAwO1xufTtcblxudmFyIHNlZ21lbnRUcmFuc211eGVyID0ge1xuICByZXNldDogcmVzZXQsXG4gIGRpc3Bvc2U6IGRpc3Bvc2UsXG4gIGVuZFRpbWVsaW5lOiBlbmRUaW1lbGluZSxcbiAgdHJhbnNtdXg6IHRyYW5zbXV4XG59O1xuLyoqXG4gKiBQcm9iZSBhbiBtcGVnMi10cyBzZWdtZW50IHRvIGRldGVybWluZSB0aGUgc3RhcnQgdGltZSBvZiB0aGUgc2VnbWVudCBpbiBpdCdzXG4gKiBpbnRlcm5hbCBcIm1lZGlhIHRpbWUsXCIgYXMgd2VsbCBhcyB3aGV0aGVyIGl0IGNvbnRhaW5zIHZpZGVvIGFuZC9vciBhdWRpby5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtVaW50OEFycmF5fSBieXRlcyAtIHNlZ21lbnQgYnl0ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHN0YXJ0IHRpbWUgb2YgdGhlIGN1cnJlbnQgc2VnbWVudCBpbiBcIm1lZGlhIHRpbWVcIiBhcyB3ZWxsIGFzXG4gKiAgICAgICAgICAgICAgICAgIHdoZXRoZXIgaXQgY29udGFpbnMgdmlkZW8gYW5kL29yIGF1ZGlvXG4gKi9cblxudmFyIHByb2JlVHNTZWdtZW50ID0gZnVuY3Rpb24gcHJvYmVUc1NlZ21lbnQoYnl0ZXMsIGJhc2VTdGFydFRpbWUpIHtcbiAgdmFyIHRpbWVJbmZvID0gdHNJbnNwZWN0b3IuaW5zcGVjdChieXRlcywgYmFzZVN0YXJ0VGltZSAqIE9ORV9TRUNPTkRfSU5fVFMpO1xuXG4gIGlmICghdGltZUluZm8pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSB7XG4gICAgLy8gZWFjaCB0eXBlJ3MgdGltZSBpbmZvIGNvbWVzIGJhY2sgYXMgYW4gYXJyYXkgb2YgMiB0aW1lcywgc3RhcnQgYW5kIGVuZFxuICAgIGhhc1ZpZGVvOiB0aW1lSW5mby52aWRlbyAmJiB0aW1lSW5mby52aWRlby5sZW5ndGggPT09IDIgfHwgZmFsc2UsXG4gICAgaGFzQXVkaW86IHRpbWVJbmZvLmF1ZGlvICYmIHRpbWVJbmZvLmF1ZGlvLmxlbmd0aCA9PT0gMiB8fCBmYWxzZVxuICB9O1xuXG4gIGlmIChyZXN1bHQuaGFzVmlkZW8pIHtcbiAgICByZXN1bHQudmlkZW9TdGFydCA9IHRpbWVJbmZvLnZpZGVvWzBdLnB0c1RpbWU7XG4gIH1cblxuICBpZiAocmVzdWx0Lmhhc0F1ZGlvKSB7XG4gICAgcmVzdWx0LmF1ZGlvU3RhcnQgPSB0aW1lSW5mby5hdWRpb1swXS5wdHNUaW1lO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKipcbiAqIENvbWJpbmUgYWxsIHNlZ21lbnRzIGludG8gYSBzaW5nbGUgVWludDhBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWdtZW50T2JqXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSBjb25jYXRlbmF0ZWQgYnl0ZXNcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgY29uY2F0U2VnbWVudHMgPSBmdW5jdGlvbiBjb25jYXRTZWdtZW50cyhzZWdtZW50T2JqKSB7XG4gIHZhciBvZmZzZXQgPSAwO1xuICB2YXIgdGVtcEJ1ZmZlcjtcblxuICBpZiAoc2VnbWVudE9iai5ieXRlcykge1xuICAgIHRlbXBCdWZmZXIgPSBuZXcgVWludDhBcnJheShzZWdtZW50T2JqLmJ5dGVzKTsgLy8gY29tYmluZSB0aGUgaW5kaXZpZHVhbCBzZWdtZW50cyBpbnRvIG9uZSBsYXJnZSB0eXBlZC1hcnJheVxuXG4gICAgc2VnbWVudE9iai5zZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgICB0ZW1wQnVmZmVyLnNldChzZWdtZW50LCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IHNlZ21lbnQuYnl0ZUxlbmd0aDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0ZW1wQnVmZmVyO1xufTtcblxudmFyIFJFUVVFU1RfRVJST1JTID0ge1xuICBGQUlMVVJFOiAyLFxuICBUSU1FT1VUOiAtMTAxLFxuICBBQk9SVEVEOiAtMTAyXG59O1xuLyoqXG4gKiBBYm9ydCBhbGwgcmVxdWVzdHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYWN0aXZlWGhycyAtIGFuIG9iamVjdCB0aGF0IHRyYWNrcyBhbGwgWEhSIHJlcXVlc3RzXG4gKi9cblxudmFyIGFib3J0QWxsID0gZnVuY3Rpb24gYWJvcnRBbGwoYWN0aXZlWGhycykge1xuICBhY3RpdmVYaHJzLmZvckVhY2goZnVuY3Rpb24gKHhocikge1xuICAgIHhoci5hYm9ydCgpO1xuICB9KTtcbn07XG4vKipcbiAqIEdhdGhlciBpbXBvcnRhbnQgYmFuZHdpZHRoIHN0YXRzIG9uY2UgYSByZXF1ZXN0IGhhcyBjb21wbGV0ZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdCAtIHRoZSBYSFIgcmVxdWVzdCBmcm9tIHdoaWNoIHRvIGdhdGhlciBzdGF0c1xuICovXG5cblxudmFyIGdldFJlcXVlc3RTdGF0cyA9IGZ1bmN0aW9uIGdldFJlcXVlc3RTdGF0cyhyZXF1ZXN0KSB7XG4gIHJldHVybiB7XG4gICAgYmFuZHdpZHRoOiByZXF1ZXN0LmJhbmR3aWR0aCxcbiAgICBieXRlc1JlY2VpdmVkOiByZXF1ZXN0LmJ5dGVzUmVjZWl2ZWQgfHwgMCxcbiAgICByb3VuZFRyaXBUaW1lOiByZXF1ZXN0LnJvdW5kVHJpcFRpbWUgfHwgMFxuICB9O1xufTtcbi8qKlxuICogSWYgcG9zc2libGUgZ2F0aGVyIGJhbmR3aWR0aCBzdGF0cyBhcyBhIHJlcXVlc3QgaXMgaW5cbiAqIHByb2dyZXNzXG4gKlxuICogQHBhcmFtIHtFdmVudH0gcHJvZ3Jlc3NFdmVudCAtIGFuIGV2ZW50IG9iamVjdCBmcm9tIGFuIFhIUidzIHByb2dyZXNzIGV2ZW50XG4gKi9cblxuXG52YXIgZ2V0UHJvZ3Jlc3NTdGF0cyA9IGZ1bmN0aW9uIGdldFByb2dyZXNzU3RhdHMocHJvZ3Jlc3NFdmVudCkge1xuICB2YXIgcmVxdWVzdCA9IHByb2dyZXNzRXZlbnQudGFyZ2V0O1xuICB2YXIgcm91bmRUcmlwVGltZSA9IERhdGUubm93KCkgLSByZXF1ZXN0LnJlcXVlc3RUaW1lO1xuICB2YXIgc3RhdHMgPSB7XG4gICAgYmFuZHdpZHRoOiBJbmZpbml0eSxcbiAgICBieXRlc1JlY2VpdmVkOiAwLFxuICAgIHJvdW5kVHJpcFRpbWU6IHJvdW5kVHJpcFRpbWUgfHwgMFxuICB9O1xuICBzdGF0cy5ieXRlc1JlY2VpdmVkID0gcHJvZ3Jlc3NFdmVudC5sb2FkZWQ7IC8vIFRoaXMgY2FuIHJlc3VsdCBpbiBJbmZpbml0eSBpZiBzdGF0cy5yb3VuZFRyaXBUaW1lIGlzIDAgYnV0IHRoYXQgaXMgb2tcbiAgLy8gYmVjYXVzZSB3ZSBzaG91bGQgb25seSB1c2UgYmFuZHdpZHRoIHN0YXRzIG9uIHByb2dyZXNzIHRvIGRldGVybWluZSB3aGVuXG4gIC8vIGFib3J0IGEgcmVxdWVzdCBlYXJseSBkdWUgdG8gaW5zdWZmaWNpZW50IGJhbmR3aWR0aFxuXG4gIHN0YXRzLmJhbmR3aWR0aCA9IE1hdGguZmxvb3Ioc3RhdHMuYnl0ZXNSZWNlaXZlZCAvIHN0YXRzLnJvdW5kVHJpcFRpbWUgKiA4ICogMTAwMCk7XG4gIHJldHVybiBzdGF0cztcbn07XG4vKipcbiAqIEhhbmRsZSBhbGwgZXJyb3IgY29uZGl0aW9ucyBpbiBvbmUgcGxhY2UgYW5kIHJldHVybiBhbiBvYmplY3RcbiAqIHdpdGggYWxsIHRoZSBpbmZvcm1hdGlvblxuICpcbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgLSBpZiBub24tbnVsbCBzaWduYWxzIGFuIGVycm9yIG9jY3VyZWQgd2l0aCB0aGUgWEhSXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdCAtICB0aGUgWEhSIHJlcXVlc3QgdGhhdCBwb3NzaWJseSBnZW5lcmF0ZWQgdGhlIGVycm9yXG4gKi9cblxuXG52YXIgaGFuZGxlRXJyb3JzID0gZnVuY3Rpb24gaGFuZGxlRXJyb3JzKGVycm9yLCByZXF1ZXN0KSB7XG4gIGlmIChyZXF1ZXN0LnRpbWVkb3V0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICBtZXNzYWdlOiAnSExTIHJlcXVlc3QgdGltZWQtb3V0IGF0IFVSTDogJyArIHJlcXVlc3QudXJpLFxuICAgICAgY29kZTogUkVRVUVTVF9FUlJPUlMuVElNRU9VVCxcbiAgICAgIHhocjogcmVxdWVzdFxuICAgIH07XG4gIH1cblxuICBpZiAocmVxdWVzdC5hYm9ydGVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICBtZXNzYWdlOiAnSExTIHJlcXVlc3QgYWJvcnRlZCBhdCBVUkw6ICcgKyByZXF1ZXN0LnVyaSxcbiAgICAgIGNvZGU6IFJFUVVFU1RfRVJST1JTLkFCT1JURUQsXG4gICAgICB4aHI6IHJlcXVlc3RcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICBtZXNzYWdlOiAnSExTIHJlcXVlc3QgZXJyb3JlZCBhdCBVUkw6ICcgKyByZXF1ZXN0LnVyaSxcbiAgICAgIGNvZGU6IFJFUVVFU1RfRVJST1JTLkZBSUxVUkUsXG4gICAgICB4aHI6IHJlcXVlc3RcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuLyoqXG4gKiBIYW5kbGUgcmVzcG9uc2VzIGZvciBrZXkgZGF0YSBhbmQgY29udmVydCB0aGUga2V5IGRhdGEgdG8gdGhlIGNvcnJlY3QgZm9ybWF0XG4gKiBmb3IgdGhlIGRlY3J5cHRpb24gc3RlcCBsYXRlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWdtZW50IC0gYSBzaW1wbGlmaWVkIGNvcHkgb2YgdGhlIHNlZ21lbnRJbmZvIG9iamVjdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIFNlZ21lbnRMb2FkZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmlzaFByb2Nlc3NpbmdGbiAtIGEgY2FsbGJhY2sgdG8gZXhlY3V0ZSB0byBjb250aW51ZSBwcm9jZXNzaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHJlcXVlc3RcbiAqL1xuXG5cbnZhciBoYW5kbGVLZXlSZXNwb25zZSA9IGZ1bmN0aW9uIGhhbmRsZUtleVJlc3BvbnNlKHNlZ21lbnQsIGZpbmlzaFByb2Nlc3NpbmdGbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0KSB7XG4gICAgdmFyIHJlc3BvbnNlID0gcmVxdWVzdC5yZXNwb25zZTtcbiAgICB2YXIgZXJyb3JPYmogPSBoYW5kbGVFcnJvcnMoZXJyb3IsIHJlcXVlc3QpO1xuXG4gICAgaWYgKGVycm9yT2JqKSB7XG4gICAgICByZXR1cm4gZmluaXNoUHJvY2Vzc2luZ0ZuKGVycm9yT2JqLCBzZWdtZW50KTtcbiAgICB9XG5cbiAgICBpZiAocmVzcG9uc2UuYnl0ZUxlbmd0aCAhPT0gMTYpIHtcbiAgICAgIHJldHVybiBmaW5pc2hQcm9jZXNzaW5nRm4oe1xuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBITFMga2V5IGF0IFVSTDogJyArIHJlcXVlc3QudXJpLFxuICAgICAgICBjb2RlOiBSRVFVRVNUX0VSUk9SUy5GQUlMVVJFLFxuICAgICAgICB4aHI6IHJlcXVlc3RcbiAgICAgIH0sIHNlZ21lbnQpO1xuICAgIH1cblxuICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KHJlc3BvbnNlKTtcbiAgICBzZWdtZW50LmtleS5ieXRlcyA9IG5ldyBVaW50MzJBcnJheShbdmlldy5nZXRVaW50MzIoMCksIHZpZXcuZ2V0VWludDMyKDQpLCB2aWV3LmdldFVpbnQzMig4KSwgdmlldy5nZXRVaW50MzIoMTIpXSk7XG4gICAgcmV0dXJuIGZpbmlzaFByb2Nlc3NpbmdGbihudWxsLCBzZWdtZW50KTtcbiAgfTtcbn07XG4vKipcbiAqIEhhbmRsZSBpbml0LXNlZ21lbnQgcmVzcG9uc2VzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnQgLSBhIHNpbXBsaWZpZWQgY29weSBvZiB0aGUgc2VnbWVudEluZm8gb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gU2VnbWVudExvYWRlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZmluaXNoUHJvY2Vzc2luZ0ZuIC0gYSBjYWxsYmFjayB0byBleGVjdXRlIHRvIGNvbnRpbnVlIHByb2Nlc3NpbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgcmVxdWVzdFxuICovXG5cblxudmFyIGhhbmRsZUluaXRTZWdtZW50UmVzcG9uc2UgPSBmdW5jdGlvbiBoYW5kbGVJbml0U2VnbWVudFJlc3BvbnNlKF9yZWYpIHtcbiAgdmFyIHNlZ21lbnQgPSBfcmVmLnNlZ21lbnQsXG4gICAgICBmaW5pc2hQcm9jZXNzaW5nRm4gPSBfcmVmLmZpbmlzaFByb2Nlc3NpbmdGbjtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvciwgcmVxdWVzdCkge1xuICAgIHZhciByZXNwb25zZSA9IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgdmFyIGVycm9yT2JqID0gaGFuZGxlRXJyb3JzKGVycm9yLCByZXF1ZXN0KTtcblxuICAgIGlmIChlcnJvck9iaikge1xuICAgICAgcmV0dXJuIGZpbmlzaFByb2Nlc3NpbmdGbihlcnJvck9iaiwgc2VnbWVudCk7XG4gICAgfSAvLyBzdG9wIHByb2Nlc3NpbmcgaWYgcmVjZWl2ZWQgZW1wdHkgY29udGVudFxuXG5cbiAgICBpZiAocmVzcG9uc2UuYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZpbmlzaFByb2Nlc3NpbmdGbih7XG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIG1lc3NhZ2U6ICdFbXB0eSBITFMgc2VnbWVudCBjb250ZW50IGF0IFVSTDogJyArIHJlcXVlc3QudXJpLFxuICAgICAgICBjb2RlOiBSRVFVRVNUX0VSUk9SUy5GQUlMVVJFLFxuICAgICAgICB4aHI6IHJlcXVlc3RcbiAgICAgIH0sIHNlZ21lbnQpO1xuICAgIH1cblxuICAgIHNlZ21lbnQubWFwLmJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkocmVxdWVzdC5yZXNwb25zZSk7XG4gICAgdmFyIHR5cGUgPSBkZXRlY3RDb250YWluZXJGb3JCeXRlcyhzZWdtZW50Lm1hcC5ieXRlcyk7IC8vIFRPRE86IFdlIHNob3VsZCBhbHNvIGhhbmRsZSB0cyBpbml0IHNlZ21lbnRzIGhlcmUsIGJ1dCB3ZVxuICAgIC8vIG9ubHkga25vdyBob3cgdG8gcGFyc2UgbXA0IGluaXQgc2VnbWVudHMgYXQgdGhlIG1vbWVudFxuXG4gICAgaWYgKHR5cGUgIT09ICdtcDQnKSB7XG4gICAgICByZXR1cm4gZmluaXNoUHJvY2Vzc2luZ0ZuKHtcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgbWVzc2FnZTogXCJGb3VuZCB1bnN1cHBvcnRlZCBcIiArICh0eXBlIHx8ICd1bmtub3duJykgKyBcIiBjb250YWluZXIgZm9yIGluaXRpYWxpemF0aW9uIHNlZ21lbnQgYXQgVVJMOiBcIiArIHJlcXVlc3QudXJpLFxuICAgICAgICBjb2RlOiBSRVFVRVNUX0VSUk9SUy5GQUlMVVJFLFxuICAgICAgICBpbnRlcm5hbDogdHJ1ZSxcbiAgICAgICAgeGhyOiByZXF1ZXN0XG4gICAgICB9LCBzZWdtZW50KTtcbiAgICB9XG5cbiAgICB2YXIgdHJhY2tzID0gbXA0cHJvYmUudHJhY2tzKHNlZ21lbnQubWFwLmJ5dGVzKTtcbiAgICB0cmFja3MuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcbiAgICAgIHNlZ21lbnQubWFwLnRyYWNrcyA9IHNlZ21lbnQubWFwLnRyYWNrcyB8fCB7fTsgLy8gb25seSBzdXBwb3J0IG9uZSB0cmFjayBvZiBlYWNoIHR5cGUgZm9yIG5vd1xuXG4gICAgICBpZiAoc2VnbWVudC5tYXAudHJhY2tzW3RyYWNrLnR5cGVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VnbWVudC5tYXAudHJhY2tzW3RyYWNrLnR5cGVdID0gdHJhY2s7XG5cbiAgICAgIGlmICh0cmFjay5pZCAmJiB0cmFjay50aW1lc2NhbGUpIHtcbiAgICAgICAgc2VnbWVudC5tYXAudGltZXNjYWxlcyA9IHNlZ21lbnQubWFwLnRpbWVzY2FsZXMgfHwge307XG4gICAgICAgIHNlZ21lbnQubWFwLnRpbWVzY2FsZXNbdHJhY2suaWRdID0gdHJhY2sudGltZXNjYWxlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmaW5pc2hQcm9jZXNzaW5nRm4obnVsbCwgc2VnbWVudCk7XG4gIH07XG59O1xuLyoqXG4gKiBSZXNwb25zZSBoYW5kbGVyIGZvciBzZWdtZW50LXJlcXVlc3RzIGJlaW5nIHN1cmUgdG8gc2V0IHRoZSBjb3JyZWN0XG4gKiBwcm9wZXJ0eSBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgc2VnbWVudCBpcyBlbmNyeXBlZCBvciBub3RcbiAqIEFsc28gcmVjb3JkcyBhbmQga2VlcHMgdHJhY2sgb2Ygc3RhdHMgdGhhdCBhcmUgdXNlZCBmb3IgQUJSIHB1cnBvc2VzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnQgLSBhIHNpbXBsaWZpZWQgY29weSBvZiB0aGUgc2VnbWVudEluZm8gb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gU2VnbWVudExvYWRlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZmluaXNoUHJvY2Vzc2luZ0ZuIC0gYSBjYWxsYmFjayB0byBleGVjdXRlIHRvIGNvbnRpbnVlIHByb2Nlc3NpbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgcmVxdWVzdFxuICovXG5cblxudmFyIGhhbmRsZVNlZ21lbnRSZXNwb25zZSA9IGZ1bmN0aW9uIGhhbmRsZVNlZ21lbnRSZXNwb25zZShfcmVmMikge1xuICB2YXIgc2VnbWVudCA9IF9yZWYyLnNlZ21lbnQsXG4gICAgICBmaW5pc2hQcm9jZXNzaW5nRm4gPSBfcmVmMi5maW5pc2hQcm9jZXNzaW5nRm4sXG4gICAgICByZXNwb25zZVR5cGUgPSBfcmVmMi5yZXNwb25zZVR5cGU7XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyb3IsIHJlcXVlc3QpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSByZXF1ZXN0LnJlc3BvbnNlO1xuICAgIHZhciBlcnJvck9iaiA9IGhhbmRsZUVycm9ycyhlcnJvciwgcmVxdWVzdCk7XG5cbiAgICBpZiAoZXJyb3JPYmopIHtcbiAgICAgIHJldHVybiBmaW5pc2hQcm9jZXNzaW5nRm4oZXJyb3JPYmosIHNlZ21lbnQpO1xuICAgIH1cblxuICAgIHZhciBuZXdCeXRlcyA9IC8vIGFsdGhvdWdoIHJlc3BvbnNlVGV4dCBcInNob3VsZFwiIGV4aXN0LCB0aGlzIGd1YXJkIHNlcnZlcyB0byBwcmV2ZW50IGFuIGVycm9yIGJlaW5nXG4gICAgLy8gdGhyb3duIGZvciB0d28gcHJpbWFyeSBjYXNlczpcbiAgICAvLyAxLiB0aGUgbWltZSB0eXBlIG92ZXJyaWRlIHN0b3BzIHdvcmtpbmcsIG9yIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgYSBzcGVjaWZpY1xuICAgIC8vICAgIGJyb3dzZXJcbiAgICAvLyAyLiB3aGVuIHVzaW5nIG1vY2sgWEhSIGxpYnJhcmllcyBsaWtlIHNpbm9uIHRoYXQgZG8gbm90IGFsbG93IHRoZSBvdmVycmlkZSBiZWhhdmlvclxuICAgIHJlc3BvbnNlVHlwZSA9PT0gJ2FycmF5YnVmZmVyJyB8fCAhcmVxdWVzdC5yZXNwb25zZVRleHQgPyByZXF1ZXN0LnJlc3BvbnNlIDogc3RyaW5nVG9BcnJheUJ1ZmZlcihyZXF1ZXN0LnJlc3BvbnNlVGV4dC5zdWJzdHJpbmcoc2VnbWVudC5sYXN0UmVhY2hlZENoYXIgfHwgMCkpOyAvLyBzdG9wIHByb2Nlc3NpbmcgaWYgcmVjZWl2ZWQgZW1wdHkgY29udGVudFxuXG4gICAgaWYgKHJlc3BvbnNlLmJ5dGVMZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmaW5pc2hQcm9jZXNzaW5nRm4oe1xuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBtZXNzYWdlOiAnRW1wdHkgSExTIHNlZ21lbnQgY29udGVudCBhdCBVUkw6ICcgKyByZXF1ZXN0LnVyaSxcbiAgICAgICAgY29kZTogUkVRVUVTVF9FUlJPUlMuRkFJTFVSRSxcbiAgICAgICAgeGhyOiByZXF1ZXN0XG4gICAgICB9LCBzZWdtZW50KTtcbiAgICB9XG5cbiAgICBzZWdtZW50LnN0YXRzID0gZ2V0UmVxdWVzdFN0YXRzKHJlcXVlc3QpO1xuXG4gICAgaWYgKHNlZ21lbnQua2V5KSB7XG4gICAgICBzZWdtZW50LmVuY3J5cHRlZEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobmV3Qnl0ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWdtZW50LmJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobmV3Qnl0ZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBmaW5pc2hQcm9jZXNzaW5nRm4obnVsbCwgc2VnbWVudCk7XG4gIH07XG59O1xuXG52YXIgdHJhbnNtdXhBbmROb3RpZnkgPSBmdW5jdGlvbiB0cmFuc211eEFuZE5vdGlmeShfcmVmMykge1xuICB2YXIgc2VnbWVudCA9IF9yZWYzLnNlZ21lbnQsXG4gICAgICBieXRlcyA9IF9yZWYzLmJ5dGVzLFxuICAgICAgaXNQYXJ0aWFsID0gX3JlZjMuaXNQYXJ0aWFsLFxuICAgICAgdHJhY2tJbmZvRm4gPSBfcmVmMy50cmFja0luZm9GbixcbiAgICAgIHRpbWluZ0luZm9GbiA9IF9yZWYzLnRpbWluZ0luZm9GbixcbiAgICAgIHZpZGVvU2VnbWVudFRpbWluZ0luZm9GbiA9IF9yZWYzLnZpZGVvU2VnbWVudFRpbWluZ0luZm9GbixcbiAgICAgIGlkM0ZuID0gX3JlZjMuaWQzRm4sXG4gICAgICBjYXB0aW9uc0ZuID0gX3JlZjMuY2FwdGlvbnNGbixcbiAgICAgIGRhdGFGbiA9IF9yZWYzLmRhdGFGbixcbiAgICAgIGRvbmVGbiA9IF9yZWYzLmRvbmVGbjtcbiAgdmFyIGZtcDRUcmFja3MgPSBzZWdtZW50Lm1hcCAmJiBzZWdtZW50Lm1hcC50cmFja3MgfHwge307XG4gIHZhciBpc011eGVkID0gQm9vbGVhbihmbXA0VHJhY2tzLmF1ZGlvICYmIGZtcDRUcmFja3MudmlkZW8pOyAvLyBLZWVwIHJlZmVyZW5jZXMgdG8gZWFjaCBmdW5jdGlvbiBzbyB3ZSBjYW4gbnVsbCB0aGVtIG91dCBhZnRlciB3ZSdyZSBkb25lIHdpdGggdGhlbS5cbiAgLy8gT25lIHJlYXNvbiBmb3IgdGhpcyBpcyB0aGF0IGluIHRoZSBjYXNlIG9mIGZ1bGwgc2VnbWVudHMsIHdlIHdhbnQgdG8gdHJ1c3Qgc3RhcnRcbiAgLy8gdGltZXMgZnJvbSB0aGUgcHJvYmUsIHJhdGhlciB0aGFuIHRoZSB0cmFuc211eGVyLlxuXG4gIHZhciBhdWRpb1N0YXJ0Rm4gPSB0aW1pbmdJbmZvRm4uYmluZChudWxsLCBzZWdtZW50LCAnYXVkaW8nLCAnc3RhcnQnKTtcbiAgdmFyIGF1ZGlvRW5kRm4gPSB0aW1pbmdJbmZvRm4uYmluZChudWxsLCBzZWdtZW50LCAnYXVkaW8nLCAnZW5kJyk7XG4gIHZhciB2aWRlb1N0YXJ0Rm4gPSB0aW1pbmdJbmZvRm4uYmluZChudWxsLCBzZWdtZW50LCAndmlkZW8nLCAnc3RhcnQnKTtcbiAgdmFyIHZpZGVvRW5kRm4gPSB0aW1pbmdJbmZvRm4uYmluZChudWxsLCBzZWdtZW50LCAndmlkZW8nLCAnZW5kJyk7IC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBhcmUgYXBwZW5kaW5nIGEgZnVsbCBzZWdtZW50LlxuXG4gIGlmICghaXNQYXJ0aWFsICYmICFzZWdtZW50Lmxhc3RSZWFjaGVkQ2hhcikge1xuICAgIC8vIEluIHRoZSBmdWxsIHNlZ21lbnQgdHJhbnNtdXhlciwgd2UgZG9uJ3QgeWV0IGhhdmUgdGhlIGFiaWxpdHkgdG8gZXh0cmFjdCBhIFwicHJvcGVyXCJcbiAgICAvLyBzdGFydCB0aW1lLiBNZWFuaW5nIGNhY2hlZCBmcmFtZSBkYXRhIG1heSBjb3JydXB0IG91ciBub3Rpb24gb2Ygd2hlcmUgdGhpcyBzZWdtZW50XG4gICAgLy8gcmVhbGx5IHN0YXJ0cy4gVG8gZ2V0IGFyb3VuZCB0aGlzLCBmdWxsIHNlZ21lbnQgYXBwZW5kcyBzaG91bGQgcHJvYmUgZm9yIHRoZSBpbmZvXG4gICAgLy8gbmVlZGVkLlxuICAgIHZhciBwcm9iZVJlc3VsdCA9IHByb2JlVHNTZWdtZW50KGJ5dGVzLCBzZWdtZW50LmJhc2VTdGFydFRpbWUpO1xuXG4gICAgaWYgKHByb2JlUmVzdWx0KSB7XG4gICAgICB0cmFja0luZm9GbihzZWdtZW50LCB7XG4gICAgICAgIGhhc0F1ZGlvOiBwcm9iZVJlc3VsdC5oYXNBdWRpbyxcbiAgICAgICAgaGFzVmlkZW86IHByb2JlUmVzdWx0Lmhhc1ZpZGVvLFxuICAgICAgICBpc011eGVkOiBpc011eGVkXG4gICAgICB9KTtcbiAgICAgIHRyYWNrSW5mb0ZuID0gbnVsbDtcblxuICAgICAgaWYgKHByb2JlUmVzdWx0Lmhhc0F1ZGlvICYmICFpc011eGVkKSB7XG4gICAgICAgIGF1ZGlvU3RhcnRGbihwcm9iZVJlc3VsdC5hdWRpb1N0YXJ0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2JlUmVzdWx0Lmhhc1ZpZGVvKSB7XG4gICAgICAgIHZpZGVvU3RhcnRGbihwcm9iZVJlc3VsdC52aWRlb1N0YXJ0KTtcbiAgICAgIH1cblxuICAgICAgYXVkaW9TdGFydEZuID0gbnVsbDtcbiAgICAgIHZpZGVvU3RhcnRGbiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgdHJhbnNtdXgoe1xuICAgIGJ5dGVzOiBieXRlcyxcbiAgICB0cmFuc211eGVyOiBzZWdtZW50LnRyYW5zbXV4ZXIsXG4gICAgYXVkaW9BcHBlbmRTdGFydDogc2VnbWVudC5hdWRpb0FwcGVuZFN0YXJ0LFxuICAgIGdvcHNUb0FsaWduV2l0aDogc2VnbWVudC5nb3BzVG9BbGlnbldpdGgsXG4gICAgaXNQYXJ0aWFsOiBpc1BhcnRpYWwsXG4gICAgcmVtdXg6IGlzTXV4ZWQsXG4gICAgb25EYXRhOiBmdW5jdGlvbiBvbkRhdGEocmVzdWx0KSB7XG4gICAgICByZXN1bHQudHlwZSA9IHJlc3VsdC50eXBlID09PSAnY29tYmluZWQnID8gJ3ZpZGVvJyA6IHJlc3VsdC50eXBlO1xuICAgICAgZGF0YUZuKHNlZ21lbnQsIHJlc3VsdCk7XG4gICAgfSxcbiAgICBvblRyYWNrSW5mbzogZnVuY3Rpb24gb25UcmFja0luZm8odHJhY2tJbmZvKSB7XG4gICAgICBpZiAodHJhY2tJbmZvRm4pIHtcbiAgICAgICAgaWYgKGlzTXV4ZWQpIHtcbiAgICAgICAgICB0cmFja0luZm8uaXNNdXhlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFja0luZm9GbihzZWdtZW50LCB0cmFja0luZm8pO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25BdWRpb1RpbWluZ0luZm86IGZ1bmN0aW9uIG9uQXVkaW9UaW1pbmdJbmZvKGF1ZGlvVGltaW5nSW5mbykge1xuICAgICAgLy8gd2Ugb25seSB3YW50IHRoZSBmaXJzdCBzdGFydCB2YWx1ZSB3ZSBlbmNvdW50ZXJcbiAgICAgIGlmIChhdWRpb1N0YXJ0Rm4gJiYgdHlwZW9mIGF1ZGlvVGltaW5nSW5mby5zdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYXVkaW9TdGFydEZuKGF1ZGlvVGltaW5nSW5mby5zdGFydCk7XG4gICAgICAgIGF1ZGlvU3RhcnRGbiA9IG51bGw7XG4gICAgICB9IC8vIHdlIHdhbnQgdG8gY29udGludWFsbHkgdXBkYXRlIHRoZSBlbmQgdGltZVxuXG5cbiAgICAgIGlmIChhdWRpb0VuZEZuICYmIHR5cGVvZiBhdWRpb1RpbWluZ0luZm8uZW5kICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhdWRpb0VuZEZuKGF1ZGlvVGltaW5nSW5mby5lbmQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25WaWRlb1RpbWluZ0luZm86IGZ1bmN0aW9uIG9uVmlkZW9UaW1pbmdJbmZvKHZpZGVvVGltaW5nSW5mbykge1xuICAgICAgLy8gd2Ugb25seSB3YW50IHRoZSBmaXJzdCBzdGFydCB2YWx1ZSB3ZSBlbmNvdW50ZXJcbiAgICAgIGlmICh2aWRlb1N0YXJ0Rm4gJiYgdHlwZW9mIHZpZGVvVGltaW5nSW5mby5zdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmlkZW9TdGFydEZuKHZpZGVvVGltaW5nSW5mby5zdGFydCk7XG4gICAgICAgIHZpZGVvU3RhcnRGbiA9IG51bGw7XG4gICAgICB9IC8vIHdlIHdhbnQgdG8gY29udGludWFsbHkgdXBkYXRlIHRoZSBlbmQgdGltZVxuXG5cbiAgICAgIGlmICh2aWRlb0VuZEZuICYmIHR5cGVvZiB2aWRlb1RpbWluZ0luZm8uZW5kICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2aWRlb0VuZEZuKHZpZGVvVGltaW5nSW5mby5lbmQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25WaWRlb1NlZ21lbnRUaW1pbmdJbmZvOiBmdW5jdGlvbiBvblZpZGVvU2VnbWVudFRpbWluZ0luZm8odmlkZW9TZWdtZW50VGltaW5nSW5mbykge1xuICAgICAgdmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuKHZpZGVvU2VnbWVudFRpbWluZ0luZm8pO1xuICAgIH0sXG4gICAgb25JZDM6IGZ1bmN0aW9uIG9uSWQzKGlkM0ZyYW1lcywgZGlzcGF0Y2hUeXBlKSB7XG4gICAgICBpZDNGbihzZWdtZW50LCBpZDNGcmFtZXMsIGRpc3BhdGNoVHlwZSk7XG4gICAgfSxcbiAgICBvbkNhcHRpb25zOiBmdW5jdGlvbiBvbkNhcHRpb25zKGNhcHRpb25zKSB7XG4gICAgICBjYXB0aW9uc0ZuKHNlZ21lbnQsIFtjYXB0aW9uc10pO1xuICAgIH0sXG4gICAgb25Eb25lOiBmdW5jdGlvbiBvbkRvbmUocmVzdWx0KSB7XG4gICAgICAvLyBUbyBoYW5kbGUgcGFydGlhbCBhcHBlbmRzLCB0aGVyZSB3b24ndCBiZSBhIGRvbmUgZnVuY3Rpb24gcGFzc2VkIGluIChzaW5jZVxuICAgICAgLy8gdGhlcmUncyBzdGlsbCwgcG90ZW50aWFsbHksIG1vcmUgc2VnbWVudCB0byBwcm9jZXNzKSwgc28gdGhlcmUncyBub3RoaW5nIHRvIGRvLlxuICAgICAgaWYgKCFkb25lRm4gfHwgaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0LnR5cGUgPSByZXN1bHQudHlwZSA9PT0gJ2NvbWJpbmVkJyA/ICd2aWRlbycgOiByZXN1bHQudHlwZTtcbiAgICAgIGRvbmVGbihudWxsLCBzZWdtZW50LCByZXN1bHQpO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaGFuZGxlU2VnbWVudEJ5dGVzID0gZnVuY3Rpb24gaGFuZGxlU2VnbWVudEJ5dGVzKF9yZWY0KSB7XG4gIHZhciBzZWdtZW50ID0gX3JlZjQuc2VnbWVudCxcbiAgICAgIGJ5dGVzID0gX3JlZjQuYnl0ZXMsXG4gICAgICBpc1BhcnRpYWwgPSBfcmVmNC5pc1BhcnRpYWwsXG4gICAgICB0cmFja0luZm9GbiA9IF9yZWY0LnRyYWNrSW5mb0ZuLFxuICAgICAgdGltaW5nSW5mb0ZuID0gX3JlZjQudGltaW5nSW5mb0ZuLFxuICAgICAgdmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuID0gX3JlZjQudmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuLFxuICAgICAgaWQzRm4gPSBfcmVmNC5pZDNGbixcbiAgICAgIGNhcHRpb25zRm4gPSBfcmVmNC5jYXB0aW9uc0ZuLFxuICAgICAgZGF0YUZuID0gX3JlZjQuZGF0YUZuLFxuICAgICAgZG9uZUZuID0gX3JlZjQuZG9uZUZuO1xuICB2YXIgYnl0ZXNBc1VpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShieXRlcyk7IC8vIFRPRE86XG4gIC8vIFdlIHNob3VsZCBoYXZlIGEgaGFuZGxlciB0aGF0IGZldGNoZXMgdGhlIG51bWJlciBvZiBieXRlcyByZXF1aXJlZFxuICAvLyB0byBjaGVjayBpZiBzb21ldGhpbmcgaXMgZm1wNC4gVGhpcyB3aWxsIGFsbG93IHVzIHRvIHNhdmUgYmFuZHdpZHRoXG4gIC8vIGJlY2F1c2Ugd2UgY2FuIG9ubHkgYmxhY2tsaXN0IGEgcGxheWxpc3QgYW5kIGFib3J0IHJlcXVlc3RzXG4gIC8vIGJ5IGNvZGVjIGFmdGVyIHRyYWNraW5mbyB0cmlnZ2Vycy5cblxuICBpZiAoaXNMaWtlbHlGbXA0TWVkaWFTZWdtZW50KGJ5dGVzQXNVaW50OEFycmF5KSkge1xuICAgIHNlZ21lbnQuaXNGbXA0ID0gdHJ1ZTtcbiAgICB2YXIgdHJhY2tzID0gc2VnbWVudC5tYXAudHJhY2tzO1xuICAgIHZhciB0cmFja0luZm8gPSB7XG4gICAgICBpc0ZtcDQ6IHRydWUsXG4gICAgICBoYXNWaWRlbzogISF0cmFja3MudmlkZW8sXG4gICAgICBoYXNBdWRpbzogISF0cmFja3MuYXVkaW9cbiAgICB9OyAvLyBpZiB3ZSBoYXZlIGEgYXVkaW8gdHJhY2ssIHdpdGggYSBjb2RlYyB0aGF0IGlzIG5vdCBzZXQgdG9cbiAgICAvLyBlbmNyeXB0ZWQgYXVkaW9cblxuICAgIGlmICh0cmFja3MuYXVkaW8gJiYgdHJhY2tzLmF1ZGlvLmNvZGVjICYmIHRyYWNrcy5hdWRpby5jb2RlYyAhPT0gJ2VuY2EnKSB7XG4gICAgICB0cmFja0luZm8uYXVkaW9Db2RlYyA9IHRyYWNrcy5hdWRpby5jb2RlYztcbiAgICB9IC8vIGlmIHdlIGhhdmUgYSB2aWRlbyB0cmFjaywgd2l0aCBhIGNvZGVjIHRoYXQgaXMgbm90IHNldCB0b1xuICAgIC8vIGVuY3J5cHRlZCB2aWRlb1xuXG5cbiAgICBpZiAodHJhY2tzLnZpZGVvICYmIHRyYWNrcy52aWRlby5jb2RlYyAmJiB0cmFja3MudmlkZW8uY29kZWMgIT09ICdlbmN2Jykge1xuICAgICAgdHJhY2tJbmZvLnZpZGVvQ29kZWMgPSB0cmFja3MudmlkZW8uY29kZWM7XG4gICAgfVxuXG4gICAgaWYgKHRyYWNrcy52aWRlbyAmJiB0cmFja3MuYXVkaW8pIHtcbiAgICAgIHRyYWNrSW5mby5pc011eGVkID0gdHJ1ZTtcbiAgICB9IC8vIHNpbmNlIHdlIGRvbid0IHN1cHBvcnQgYXBwZW5kaW5nIGZtcDQgZGF0YSBvbiBwcm9ncmVzcywgd2Uga25vdyB3ZSBoYXZlIHRoZSBmdWxsXG4gICAgLy8gc2VnbWVudCBoZXJlXG5cblxuICAgIHRyYWNrSW5mb0ZuKHNlZ21lbnQsIHRyYWNrSW5mbyk7IC8vIFRoZSBwcm9iZSBkb2Vzbid0IHByb3ZpZGUgdGhlIHNlZ21lbnQgZW5kIHRpbWUsIHNvIG9ubHkgY2FsbGJhY2sgd2l0aCB0aGUgc3RhcnRcbiAgICAvLyB0aW1lLiBUaGUgZW5kIHRpbWUgY2FuIGJlIHJvdWdobHkgY2FsY3VsYXRlZCBieSB0aGUgcmVjZWl2ZXIgdXNpbmcgdGhlIGR1cmF0aW9uLlxuICAgIC8vXG4gICAgLy8gTm90ZSB0aGF0IHRoZSBzdGFydCB0aW1lIHJldHVybmVkIGJ5IHRoZSBwcm9iZSByZWZsZWN0cyB0aGUgYmFzZU1lZGlhRGVjb2RlVGltZSwgYXNcbiAgICAvLyB0aGF0IGlzIHRoZSB0cnVlIHN0YXJ0IG9mIHRoZSBzZWdtZW50ICh3aGVyZSB0aGUgcGxheWJhY2sgZW5naW5lIHNob3VsZCBiZWdpblxuICAgIC8vIGRlY29kaW5nKS5cblxuICAgIHZhciB0aW1pbmdJbmZvID0gbXA0cHJvYmUuc3RhcnRUaW1lKHNlZ21lbnQubWFwLnRpbWVzY2FsZXMsIGJ5dGVzQXNVaW50OEFycmF5KTtcblxuICAgIGlmICh0cmFja0luZm8uaGFzQXVkaW8gJiYgIXRyYWNrSW5mby5pc011eGVkKSB7XG4gICAgICB0aW1pbmdJbmZvRm4oc2VnbWVudCwgJ2F1ZGlvJywgJ3N0YXJ0JywgdGltaW5nSW5mbyk7XG4gICAgfVxuXG4gICAgaWYgKHRyYWNrSW5mby5oYXNWaWRlbykge1xuICAgICAgdGltaW5nSW5mb0ZuKHNlZ21lbnQsICd2aWRlbycsICdzdGFydCcsIHRpbWluZ0luZm8pO1xuICAgIH1cblxuICAgIHZhciBmaW5pc2hMb2FkaW5nID0gZnVuY3Rpb24gZmluaXNoTG9hZGluZyhjYXB0aW9ucykge1xuICAgICAgLy8gaWYgdGhlIHRyYWNrIHN0aWxsIGhhcyBhdWRpbyBhdCB0aGlzIHBvaW50IGl0IGlzIG9ubHkgcG9zc2libGVcbiAgICAgIC8vIGZvciBpdCB0byBiZSBhdWRpbyBvbmx5LiBTZWUgYHRyYWNrcy52aWRlbyAmJiB0cmFja3MuYXVkaW9gIGlmIHN0YXRlbWVudFxuICAgICAgLy8gYWJvdmUuXG4gICAgICAvLyB3ZSBtYWtlIHN1cmUgdG8gdXNlIHNlZ21lbnQuYnl0ZXMgaGVyZSBhcyB0aGF0XG4gICAgICBkYXRhRm4oc2VnbWVudCwge1xuICAgICAgICBkYXRhOiBieXRlcyxcbiAgICAgICAgdHlwZTogdHJhY2tJbmZvLmhhc0F1ZGlvICYmICF0cmFja0luZm8uaXNNdXhlZCA/ICdhdWRpbycgOiAndmlkZW8nXG4gICAgICB9KTtcblxuICAgICAgaWYgKGNhcHRpb25zICYmIGNhcHRpb25zLmxlbmd0aCkge1xuICAgICAgICBjYXB0aW9uc0ZuKHNlZ21lbnQsIGNhcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgZG9uZUZuKG51bGwsIHNlZ21lbnQsIHt9KTtcbiAgICB9OyAvLyBSdW4gdGhyb3VnaCB0aGUgQ2FwdGlvblBhcnNlciBpbiBjYXNlIHRoZXJlIGFyZSBjYXB0aW9ucy5cbiAgICAvLyBJbml0aWFsaXplIENhcHRpb25QYXJzZXIgaWYgaXQgaGFzbid0IGJlZW4geWV0XG5cblxuICAgIGlmICghdHJhY2tzLnZpZGVvIHx8ICFieXRlcy5ieXRlTGVuZ3RoIHx8ICFzZWdtZW50LnRyYW5zbXV4ZXIpIHtcbiAgICAgIGZpbmlzaExvYWRpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYnVmZmVyID0gYnl0ZXMgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IGJ5dGVzIDogYnl0ZXMuYnVmZmVyO1xuICAgIHZhciBieXRlT2Zmc2V0ID0gYnl0ZXMgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IDAgOiBieXRlcy5ieXRlT2Zmc2V0O1xuXG4gICAgdmFyIGxpc3RlbkZvckNhcHRpb25zID0gZnVuY3Rpb24gbGlzdGVuRm9yQ2FwdGlvbnMoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5kYXRhLmFjdGlvbiAhPT0gJ21wNENhcHRpb25zJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQudHJhbnNtdXhlci5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuRm9yQ2FwdGlvbnMpO1xuICAgICAgdmFyIGRhdGEgPSBldmVudC5kYXRhLmRhdGE7IC8vIHRyYW5zZmVyIG93bmVyc2hpcCBvZiBieXRlcyBiYWNrIHRvIHVzLlxuXG4gICAgICBzZWdtZW50LmJ5dGVzID0gYnl0ZXMgPSBuZXcgVWludDhBcnJheShkYXRhLCBkYXRhLmJ5dGVPZmZzZXQgfHwgMCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgIGZpbmlzaExvYWRpbmcoZXZlbnQuZGF0YS5jYXB0aW9ucyk7XG4gICAgfTtcblxuICAgIHNlZ21lbnQudHJhbnNtdXhlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuRm9yQ2FwdGlvbnMpOyAvLyB0cmFuc2ZlciBvd25lcnNoaXAgb2YgYnl0ZXMgdG8gd29ya2VyLlxuXG4gICAgc2VnbWVudC50cmFuc211eGVyLnBvc3RNZXNzYWdlKHtcbiAgICAgIGFjdGlvbjogJ3B1c2hNcDRDYXB0aW9ucycsXG4gICAgICB0aW1lc2NhbGVzOiBzZWdtZW50Lm1hcC50aW1lc2NhbGVzLFxuICAgICAgdHJhY2tJZHM6IFt0cmFja3MudmlkZW8uaWRdLFxuICAgICAgZGF0YTogYnVmZmVyLFxuICAgICAgYnl0ZU9mZnNldDogYnl0ZU9mZnNldCxcbiAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVzLmJ5dGVMZW5ndGhcbiAgICB9LCBbYnVmZmVyXSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFZUVCBvciBvdGhlciBzZWdtZW50cyB0aGF0IGRvbid0IG5lZWQgcHJvY2Vzc2luZ1xuXG5cbiAgaWYgKCFzZWdtZW50LnRyYW5zbXV4ZXIpIHtcbiAgICBkb25lRm4obnVsbCwgc2VnbWVudCwge30pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2VnbWVudC5jb250YWluZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc2VnbWVudC5jb250YWluZXIgPSBkZXRlY3RDb250YWluZXJGb3JCeXRlcyhieXRlc0FzVWludDhBcnJheSk7XG4gIH1cblxuICBpZiAoc2VnbWVudC5jb250YWluZXIgIT09ICd0cycgJiYgc2VnbWVudC5jb250YWluZXIgIT09ICdhYWMnKSB7XG4gICAgdHJhY2tJbmZvRm4oc2VnbWVudCwge1xuICAgICAgaGFzQXVkaW86IGZhbHNlLFxuICAgICAgaGFzVmlkZW86IGZhbHNlXG4gICAgfSk7XG4gICAgZG9uZUZuKG51bGwsIHNlZ21lbnQsIHt9KTtcbiAgICByZXR1cm47XG4gIH0gLy8gdHMgb3IgYWFjXG5cblxuICB0cmFuc211eEFuZE5vdGlmeSh7XG4gICAgc2VnbWVudDogc2VnbWVudCxcbiAgICBieXRlczogYnl0ZXMsXG4gICAgaXNQYXJ0aWFsOiBpc1BhcnRpYWwsXG4gICAgdHJhY2tJbmZvRm46IHRyYWNrSW5mb0ZuLFxuICAgIHRpbWluZ0luZm9GbjogdGltaW5nSW5mb0ZuLFxuICAgIHZpZGVvU2VnbWVudFRpbWluZ0luZm9GbjogdmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuLFxuICAgIGlkM0ZuOiBpZDNGbixcbiAgICBjYXB0aW9uc0ZuOiBjYXB0aW9uc0ZuLFxuICAgIGRhdGFGbjogZGF0YUZuLFxuICAgIGRvbmVGbjogZG9uZUZuXG4gIH0pO1xufTtcbi8qKlxuICogRGVjcnlwdCB0aGUgc2VnbWVudCB2aWEgdGhlIGRlY3J5cHRpb24gd2ViIHdvcmtlclxuICpcbiAqIEBwYXJhbSB7V2ViV29ya2VyfSBkZWNyeXB0aW9uV29ya2VyIC0gYSBXZWJXb3JrZXIgaW50ZXJmYWNlIHRvIEFFUy0xMjggZGVjcnlwdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0aW5lc1xuICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnQgLSBhIHNpbXBsaWZpZWQgY29weSBvZiB0aGUgc2VnbWVudEluZm8gb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gU2VnbWVudExvYWRlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhY2tJbmZvRm4gLSBhIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgdHJhY2sgaW5mb1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZGF0YUZuIC0gYSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIHdoZW4gc2VnbWVudCBieXRlcyBhcmUgYXZhaWxhYmxlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgcmVhZHkgdG8gdXNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkb25lRm4gLSBhIGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgYWZ0ZXIgZGVjcnlwdGlvbiBoYXMgY29tcGxldGVkXG4gKi9cblxuXG52YXIgZGVjcnlwdFNlZ21lbnQgPSBmdW5jdGlvbiBkZWNyeXB0U2VnbWVudChfcmVmNSkge1xuICB2YXIgZGVjcnlwdGlvbldvcmtlciA9IF9yZWY1LmRlY3J5cHRpb25Xb3JrZXIsXG4gICAgICBzZWdtZW50ID0gX3JlZjUuc2VnbWVudCxcbiAgICAgIHRyYWNrSW5mb0ZuID0gX3JlZjUudHJhY2tJbmZvRm4sXG4gICAgICB0aW1pbmdJbmZvRm4gPSBfcmVmNS50aW1pbmdJbmZvRm4sXG4gICAgICB2aWRlb1NlZ21lbnRUaW1pbmdJbmZvRm4gPSBfcmVmNS52aWRlb1NlZ21lbnRUaW1pbmdJbmZvRm4sXG4gICAgICBpZDNGbiA9IF9yZWY1LmlkM0ZuLFxuICAgICAgY2FwdGlvbnNGbiA9IF9yZWY1LmNhcHRpb25zRm4sXG4gICAgICBkYXRhRm4gPSBfcmVmNS5kYXRhRm4sXG4gICAgICBkb25lRm4gPSBfcmVmNS5kb25lRm47XG5cbiAgdmFyIGRlY3J5cHRpb25IYW5kbGVyID0gZnVuY3Rpb24gZGVjcnlwdGlvbkhhbmRsZXIoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuZGF0YS5zb3VyY2UgPT09IHNlZ21lbnQucmVxdWVzdElkKSB7XG4gICAgICBkZWNyeXB0aW9uV29ya2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBkZWNyeXB0aW9uSGFuZGxlcik7XG4gICAgICB2YXIgZGVjcnlwdGVkID0gZXZlbnQuZGF0YS5kZWNyeXB0ZWQ7XG4gICAgICBzZWdtZW50LmJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoZGVjcnlwdGVkLmJ5dGVzLCBkZWNyeXB0ZWQuYnl0ZU9mZnNldCwgZGVjcnlwdGVkLmJ5dGVMZW5ndGgpO1xuICAgICAgaGFuZGxlU2VnbWVudEJ5dGVzKHtcbiAgICAgICAgc2VnbWVudDogc2VnbWVudCxcbiAgICAgICAgYnl0ZXM6IHNlZ21lbnQuYnl0ZXMsXG4gICAgICAgIGlzUGFydGlhbDogZmFsc2UsXG4gICAgICAgIHRyYWNrSW5mb0ZuOiB0cmFja0luZm9GbixcbiAgICAgICAgdGltaW5nSW5mb0ZuOiB0aW1pbmdJbmZvRm4sXG4gICAgICAgIHZpZGVvU2VnbWVudFRpbWluZ0luZm9GbjogdmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuLFxuICAgICAgICBpZDNGbjogaWQzRm4sXG4gICAgICAgIGNhcHRpb25zRm46IGNhcHRpb25zRm4sXG4gICAgICAgIGRhdGFGbjogZGF0YUZuLFxuICAgICAgICBkb25lRm46IGRvbmVGblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGRlY3J5cHRpb25Xb3JrZXIuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGRlY3J5cHRpb25IYW5kbGVyKTtcbiAgdmFyIGtleUJ5dGVzO1xuXG4gIGlmIChzZWdtZW50LmtleS5ieXRlcy5zbGljZSkge1xuICAgIGtleUJ5dGVzID0gc2VnbWVudC5rZXkuYnl0ZXMuc2xpY2UoKTtcbiAgfSBlbHNlIHtcbiAgICBrZXlCeXRlcyA9IG5ldyBVaW50MzJBcnJheShBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWdtZW50LmtleS5ieXRlcykpO1xuICB9IC8vIHRoaXMgaXMgYW4gZW5jcnlwdGVkIHNlZ21lbnRcbiAgLy8gaW5jcmVtZW50YWxseSBkZWNyeXB0IHRoZSBzZWdtZW50XG5cblxuICBkZWNyeXB0aW9uV29ya2VyLnBvc3RNZXNzYWdlKGNyZWF0ZVRyYW5zZmVyYWJsZU1lc3NhZ2Uoe1xuICAgIHNvdXJjZTogc2VnbWVudC5yZXF1ZXN0SWQsXG4gICAgZW5jcnlwdGVkOiBzZWdtZW50LmVuY3J5cHRlZEJ5dGVzLFxuICAgIGtleToga2V5Qnl0ZXMsXG4gICAgaXY6IHNlZ21lbnQua2V5Lml2XG4gIH0pLCBbc2VnbWVudC5lbmNyeXB0ZWRCeXRlcy5idWZmZXIsIGtleUJ5dGVzLmJ1ZmZlcl0pO1xufTtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3YWl0cyBmb3IgYWxsIFhIUnMgdG8gZmluaXNoICh3aXRoIGVpdGhlciBzdWNjZXNzIG9yIGZhaWx1cmUpXG4gKiBiZWZvcmUgY29udGludWVpbmcgcHJvY2Vzc2luZyB2aWEgaXQncyBjYWxsYmFjay4gVGhlIGZ1bmN0aW9uIGdhdGhlcnMgZXJyb3JzXG4gKiBmcm9tIGVhY2ggcmVxdWVzdCBpbnRvIGEgc2luZ2xlIGVycm9ycyBhcnJheSBzbyB0aGF0IHRoZSBlcnJvciBzdGF0dXMgZm9yXG4gKiBlYWNoIHJlcXVlc3QgY2FuIGJlIGV4YW1pbmVkIGxhdGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhY3RpdmVYaHJzIC0gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGFsbCBYSFIgcmVxdWVzdHNcbiAqIEBwYXJhbSB7V2ViV29ya2VyfSBkZWNyeXB0aW9uV29ya2VyIC0gYSBXZWJXb3JrZXIgaW50ZXJmYWNlIHRvIEFFUy0xMjggZGVjcnlwdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0aW5lc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhY2tJbmZvRm4gLSBhIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgdHJhY2sgaW5mb1xuICogQHBhcmFtIHtGdW5jdGlvbn0gdGltaW5nSW5mb0ZuIC0gYSBjYWxsYmFjayB0aGF0IHJlY2VpdmVzIHRpbWluZyBpbmZvXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpZDNGbiAtIGEgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyBJRDMgbWV0YWRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhcHRpb25zRm4gLSBhIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgY2FwdGlvbnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRhdGFGbiAtIGEgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCB3aGVuIHNlZ21lbnQgYnl0ZXMgYXJlIGF2YWlsYWJsZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHJlYWR5IHRvIHVzZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZUZuIC0gYSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGFmdGVyIGFsbCByZXNvdXJjZXMgaGF2ZSBiZWVuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZGVkIGFuZCBhbnkgZGVjcnlwdGlvbiBjb21wbGV0ZWRcbiAqL1xuXG5cbnZhciB3YWl0Rm9yQ29tcGxldGlvbiA9IGZ1bmN0aW9uIHdhaXRGb3JDb21wbGV0aW9uKF9yZWY2KSB7XG4gIHZhciBhY3RpdmVYaHJzID0gX3JlZjYuYWN0aXZlWGhycyxcbiAgICAgIGRlY3J5cHRpb25Xb3JrZXIgPSBfcmVmNi5kZWNyeXB0aW9uV29ya2VyLFxuICAgICAgdHJhY2tJbmZvRm4gPSBfcmVmNi50cmFja0luZm9GbixcbiAgICAgIHRpbWluZ0luZm9GbiA9IF9yZWY2LnRpbWluZ0luZm9GbixcbiAgICAgIHZpZGVvU2VnbWVudFRpbWluZ0luZm9GbiA9IF9yZWY2LnZpZGVvU2VnbWVudFRpbWluZ0luZm9GbixcbiAgICAgIGlkM0ZuID0gX3JlZjYuaWQzRm4sXG4gICAgICBjYXB0aW9uc0ZuID0gX3JlZjYuY2FwdGlvbnNGbixcbiAgICAgIGRhdGFGbiA9IF9yZWY2LmRhdGFGbixcbiAgICAgIGRvbmVGbiA9IF9yZWY2LmRvbmVGbjtcbiAgdmFyIGNvdW50ID0gMDtcbiAgdmFyIGRpZEVycm9yID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyb3IsIHNlZ21lbnQpIHtcbiAgICBpZiAoZGlkRXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGRpZEVycm9yID0gdHJ1ZTsgLy8gSWYgdGhlcmUgYXJlIGVycm9ycywgd2UgaGF2ZSB0byBhYm9ydCBhbnkgb3V0c3RhbmRpbmcgcmVxdWVzdHNcblxuICAgICAgYWJvcnRBbGwoYWN0aXZlWGhycyk7IC8vIEV2ZW4gdGhvdWdoIHRoZSByZXF1ZXN0cyBhYm92ZSBhcmUgYWJvcnRlZCwgYW5kIGluIHRoZW9yeSB3ZSBjb3VsZCB3YWl0IHVudGlsIHdlXG4gICAgICAvLyBoYW5kbGUgdGhlIGFib3J0ZWQgZXZlbnRzIGZyb20gdGhvc2UgcmVxdWVzdHMsIHRoZXJlIGFyZSBzb21lIGNhc2VzIHdoZXJlIHdlIG1heVxuICAgICAgLy8gbmV2ZXIgZ2V0IGFuIGFib3J0ZWQgZXZlbnQuIEZvciBpbnN0YW5jZSwgaWYgdGhlIG5ldHdvcmsgY29ubmVjdGlvbiBpcyBsb3N0IGFuZFxuICAgICAgLy8gdGhlcmUgd2VyZSB0d28gcmVxdWVzdHMsIHRoZSBmaXJzdCBtYXkgaGF2ZSB0cmlnZ2VyZWQgYW4gZXJyb3IgaW1tZWRpYXRlbHksIHdoaWxlXG4gICAgICAvLyB0aGUgc2Vjb25kIHJlcXVlc3QgcmVtYWlucyB1bnNlbnQuIEluIHRoYXQgY2FzZSwgdGhlIGFib3J0ZWQgYWxnb3JpdGhtIHdpbGwgbm90XG4gICAgICAvLyB0cmlnZ2VyIGFuIGFib3J0OiBzZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyN0aGUtYWJvcnQoKS1tZXRob2RcbiAgICAgIC8vXG4gICAgICAvLyBXZSBhbHNvIGNhbid0IHJlbHkgb24gdGhlIHJlYWR5IHN0YXRlIG9mIHRoZSBYSFIsIHNpbmNlIHRoZSByZXF1ZXN0IHRoYXRcbiAgICAgIC8vIHRyaWdnZXJlZCB0aGUgY29ubmVjdGlvbiBlcnJvciBtYXkgYWxzbyBzaG93IGFzIGEgcmVhZHkgc3RhdGUgb2YgMCAodW5zZW50KS5cbiAgICAgIC8vIFRoZXJlZm9yZSwgd2UgaGF2ZSB0byBmaW5pc2ggdGhpcyBncm91cCBvZiByZXF1ZXN0cyBpbW1lZGlhdGVseSBhZnRlciB0aGUgZmlyc3RcbiAgICAgIC8vIHNlZW4gZXJyb3IuXG5cbiAgICAgIHJldHVybiBkb25lRm4oZXJyb3IsIHNlZ21lbnQpO1xuICAgIH1cblxuICAgIGNvdW50ICs9IDE7XG5cbiAgICBpZiAoY291bnQgPT09IGFjdGl2ZVhocnMubGVuZ3RoKSB7XG4gICAgICAvLyBLZWVwIHRyYWNrIG9mIHdoZW4gKmFsbCogb2YgdGhlIHJlcXVlc3RzIGhhdmUgY29tcGxldGVkXG4gICAgICBzZWdtZW50LmVuZE9mQWxsUmVxdWVzdHMgPSBEYXRlLm5vdygpO1xuXG4gICAgICBpZiAoc2VnbWVudC5lbmNyeXB0ZWRCeXRlcykge1xuICAgICAgICByZXR1cm4gZGVjcnlwdFNlZ21lbnQoe1xuICAgICAgICAgIGRlY3J5cHRpb25Xb3JrZXI6IGRlY3J5cHRpb25Xb3JrZXIsXG4gICAgICAgICAgc2VnbWVudDogc2VnbWVudCxcbiAgICAgICAgICB0cmFja0luZm9GbjogdHJhY2tJbmZvRm4sXG4gICAgICAgICAgdGltaW5nSW5mb0ZuOiB0aW1pbmdJbmZvRm4sXG4gICAgICAgICAgdmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuOiB2aWRlb1NlZ21lbnRUaW1pbmdJbmZvRm4sXG4gICAgICAgICAgaWQzRm46IGlkM0ZuLFxuICAgICAgICAgIGNhcHRpb25zRm46IGNhcHRpb25zRm4sXG4gICAgICAgICAgZGF0YUZuOiBkYXRhRm4sXG4gICAgICAgICAgZG9uZUZuOiBkb25lRm5cbiAgICAgICAgfSk7XG4gICAgICB9IC8vIE90aGVyd2lzZSwgZXZlcnl0aGluZyBpcyByZWFkeSBqdXN0IGNvbnRpbnVlXG5cblxuICAgICAgaGFuZGxlU2VnbWVudEJ5dGVzKHtcbiAgICAgICAgc2VnbWVudDogc2VnbWVudCxcbiAgICAgICAgYnl0ZXM6IHNlZ21lbnQuYnl0ZXMsXG4gICAgICAgIGlzUGFydGlhbDogZmFsc2UsXG4gICAgICAgIHRyYWNrSW5mb0ZuOiB0cmFja0luZm9GbixcbiAgICAgICAgdGltaW5nSW5mb0ZuOiB0aW1pbmdJbmZvRm4sXG4gICAgICAgIHZpZGVvU2VnbWVudFRpbWluZ0luZm9GbjogdmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuLFxuICAgICAgICBpZDNGbjogaWQzRm4sXG4gICAgICAgIGNhcHRpb25zRm46IGNhcHRpb25zRm4sXG4gICAgICAgIGRhdGFGbjogZGF0YUZuLFxuICAgICAgICBkb25lRm46IGRvbmVGblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQ2FsbHMgdGhlIGFib3J0IGNhbGxiYWNrIGlmIGFueSByZXF1ZXN0IHdpdGhpbiB0aGUgYmF0Y2ggd2FzIGFib3J0ZWQuIFdpbGwgb25seSBjYWxsXG4gKiB0aGUgY2FsbGJhY2sgb25jZSBwZXIgYmF0Y2ggb2YgcmVxdWVzdHMsIGV2ZW4gaWYgbXVsdGlwbGUgd2VyZSBhYm9ydGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBsb2FkZW5kU3RhdGUgLSBzdGF0ZSB0byBjaGVjayB0byBzZWUgaWYgdGhlIGFib3J0IGZ1bmN0aW9uIHdhcyBjYWxsZWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFib3J0Rm4gLSBjYWxsYmFjayB0byBjYWxsIGZvciBhYm9ydFxuICovXG5cblxudmFyIGhhbmRsZUxvYWRFbmQgPSBmdW5jdGlvbiBoYW5kbGVMb2FkRW5kKF9yZWY3KSB7XG4gIHZhciBsb2FkZW5kU3RhdGUgPSBfcmVmNy5sb2FkZW5kU3RhdGUsXG4gICAgICBhYm9ydEZuID0gX3JlZjcuYWJvcnRGbjtcbiAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciByZXF1ZXN0ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgaWYgKHJlcXVlc3QuYWJvcnRlZCAmJiBhYm9ydEZuICYmICFsb2FkZW5kU3RhdGUuY2FsbGVkQWJvcnRGbikge1xuICAgICAgYWJvcnRGbigpO1xuICAgICAgbG9hZGVuZFN0YXRlLmNhbGxlZEFib3J0Rm4gPSB0cnVlO1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFNpbXBsZSBwcm9ncmVzcyBldmVudCBjYWxsYmFjayBoYW5kbGVyIHRoYXQgZ2F0aGVycyBzb21lIHN0YXRzIGJlZm9yZVxuICogZXhlY3V0aW5nIGEgcHJvdmlkZWQgY2FsbGJhY2sgd2l0aCB0aGUgYHNlZ21lbnRgIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWdtZW50IC0gYSBzaW1wbGlmaWVkIGNvcHkgb2YgdGhlIHNlZ21lbnRJbmZvIG9iamVjdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIFNlZ21lbnRMb2FkZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByb2dyZXNzRm4gLSBhIGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgZWFjaCB0aW1lIGEgcHJvZ3Jlc3MgZXZlbnRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyByZWNlaXZlZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhY2tJbmZvRm4gLSBhIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgdHJhY2sgaW5mb1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZGF0YUZuIC0gYSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIHdoZW4gc2VnbWVudCBieXRlcyBhcmUgYXZhaWxhYmxlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgcmVhZHkgdG8gdXNlXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIHRoZSBwcm9ncmVzcyBldmVudCBvYmplY3QgZnJvbSBYTUxIdHRwUmVxdWVzdFxuICovXG5cblxudmFyIGhhbmRsZVByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoX3JlZjgpIHtcbiAgdmFyIHNlZ21lbnQgPSBfcmVmOC5zZWdtZW50LFxuICAgICAgcHJvZ3Jlc3NGbiA9IF9yZWY4LnByb2dyZXNzRm4sXG4gICAgICB0cmFja0luZm9GbiA9IF9yZWY4LnRyYWNrSW5mb0ZuLFxuICAgICAgdGltaW5nSW5mb0ZuID0gX3JlZjgudGltaW5nSW5mb0ZuLFxuICAgICAgdmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuID0gX3JlZjgudmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuLFxuICAgICAgaWQzRm4gPSBfcmVmOC5pZDNGbixcbiAgICAgIGNhcHRpb25zRm4gPSBfcmVmOC5jYXB0aW9uc0ZuLFxuICAgICAgZGF0YUZuID0gX3JlZjguZGF0YUZuLFxuICAgICAgaGFuZGxlUGFydGlhbERhdGEgPSBfcmVmOC5oYW5kbGVQYXJ0aWFsRGF0YTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciByZXF1ZXN0ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgaWYgKHJlcXVlc3QuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gZG9uJ3Qgc3VwcG9ydCBlbmNyeXB0ZWQgc2VnbWVudHMgb3IgZm1wNCBmb3Igbm93XG5cblxuICAgIGlmIChoYW5kbGVQYXJ0aWFsRGF0YSAmJiAhc2VnbWVudC5rZXkgJiYgLy8gYWx0aG91Z2ggcmVzcG9uc2VUZXh0IFwic2hvdWxkXCIgZXhpc3QsIHRoaXMgZ3VhcmQgc2VydmVzIHRvIHByZXZlbnQgYW4gZXJyb3IgYmVpbmdcbiAgICAvLyB0aHJvd24gb24gdGhlIG5leHQgY2hlY2sgZm9yIHR3byBwcmltYXJ5IGNhc2VzOlxuICAgIC8vIDEuIHRoZSBtaW1lIHR5cGUgb3ZlcnJpZGUgc3RvcHMgd29ya2luZywgb3IgaXMgbm90IGltcGxlbWVudGVkIGZvciBhIHNwZWNpZmljXG4gICAgLy8gICAgYnJvd3NlclxuICAgIC8vIDIuIHdoZW4gdXNpbmcgbW9jayBYSFIgbGlicmFyaWVzIGxpa2Ugc2lub24gdGhhdCBkbyBub3QgYWxsb3cgdGhlIG92ZXJyaWRlIGJlaGF2aW9yXG4gICAgcmVxdWVzdC5yZXNwb25zZVRleHQgJiYgLy8gaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIGlmIGl0J3MgYW4gZm1wNCB3ZSBuZWVkIGF0IGxlYXN0IDggYnl0ZXNcbiAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dC5sZW5ndGggPj0gOCkge1xuICAgICAgdmFyIG5ld0J5dGVzID0gc3RyaW5nVG9BcnJheUJ1ZmZlcihyZXF1ZXN0LnJlc3BvbnNlVGV4dC5zdWJzdHJpbmcoc2VnbWVudC5sYXN0UmVhY2hlZENoYXIgfHwgMCkpO1xuXG4gICAgICBpZiAoc2VnbWVudC5sYXN0UmVhY2hlZENoYXIgfHwgIWlzTGlrZWx5Rm1wNE1lZGlhU2VnbWVudChuZXcgVWludDhBcnJheShuZXdCeXRlcykpKSB7XG4gICAgICAgIHNlZ21lbnQubGFzdFJlYWNoZWRDaGFyID0gcmVxdWVzdC5yZXNwb25zZVRleHQubGVuZ3RoO1xuICAgICAgICBoYW5kbGVTZWdtZW50Qnl0ZXMoe1xuICAgICAgICAgIHNlZ21lbnQ6IHNlZ21lbnQsXG4gICAgICAgICAgYnl0ZXM6IG5ld0J5dGVzLFxuICAgICAgICAgIGlzUGFydGlhbDogdHJ1ZSxcbiAgICAgICAgICB0cmFja0luZm9GbjogdHJhY2tJbmZvRm4sXG4gICAgICAgICAgdGltaW5nSW5mb0ZuOiB0aW1pbmdJbmZvRm4sXG4gICAgICAgICAgdmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuOiB2aWRlb1NlZ21lbnRUaW1pbmdJbmZvRm4sXG4gICAgICAgICAgaWQzRm46IGlkM0ZuLFxuICAgICAgICAgIGNhcHRpb25zRm46IGNhcHRpb25zRm4sXG4gICAgICAgICAgZGF0YUZuOiBkYXRhRm5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2VnbWVudC5zdGF0cyA9IHZpZGVvanMkMS5tZXJnZU9wdGlvbnMoc2VnbWVudC5zdGF0cywgZ2V0UHJvZ3Jlc3NTdGF0cyhldmVudCkpOyAvLyByZWNvcmQgdGhlIHRpbWUgdGhhdCB3ZSByZWNlaXZlIHRoZSBmaXJzdCBieXRlIG9mIGRhdGFcblxuICAgIGlmICghc2VnbWVudC5zdGF0cy5maXJzdEJ5dGVzUmVjZWl2ZWRBdCAmJiBzZWdtZW50LnN0YXRzLmJ5dGVzUmVjZWl2ZWQpIHtcbiAgICAgIHNlZ21lbnQuc3RhdHMuZmlyc3RCeXRlc1JlY2VpdmVkQXQgPSBEYXRlLm5vdygpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9ncmVzc0ZuKGV2ZW50LCBzZWdtZW50KTtcbiAgfTtcbn07XG4vKipcbiAqIExvYWQgYWxsIHJlc291cmNlcyBhbmQgZG9lcyBhbnkgcHJvY2Vzc2luZyBuZWNlc3NhcnkgZm9yIGEgbWVkaWEtc2VnbWVudFxuICpcbiAqIEZlYXR1cmVzOlxuICogICBkZWNyeXB0cyB0aGUgbWVkaWEtc2VnbWVudCBpZiBpdCBoYXMgYSBrZXkgdXJpIGFuZCBhbiBpdlxuICogICBhYm9ydHMgKmFsbCogcmVxdWVzdHMgaWYgKmFueSogb25lIHJlcXVlc3QgZmFpbHNcbiAqXG4gKiBUaGUgc2VnbWVudCBvYmplY3QsIGF0IG1pbmltdW0sIGhhcyB0aGUgZm9sbG93aW5nIGZvcm1hdDpcbiAqIHtcbiAqICAgcmVzb2x2ZWRVcmk6IFN0cmluZyxcbiAqICAgW3RyYW5zbXV4ZXJdOiBPYmplY3QsXG4gKiAgIFtieXRlcmFuZ2VdOiB7XG4gKiAgICAgb2Zmc2V0OiBOdW1iZXIsXG4gKiAgICAgbGVuZ3RoOiBOdW1iZXJcbiAqICAgfSxcbiAqICAgW2tleV06IHtcbiAqICAgICByZXNvbHZlZFVyaTogU3RyaW5nXG4gKiAgICAgW2J5dGVyYW5nZV06IHtcbiAqICAgICAgIG9mZnNldDogTnVtYmVyLFxuICogICAgICAgbGVuZ3RoOiBOdW1iZXJcbiAqICAgICB9LFxuICogICAgIGl2OiB7XG4gKiAgICAgICBieXRlczogVWludDMyQXJyYXlcbiAqICAgICB9XG4gKiAgIH0sXG4gKiAgIFttYXBdOiB7XG4gKiAgICAgcmVzb2x2ZWRVcmk6IFN0cmluZyxcbiAqICAgICBbYnl0ZXJhbmdlXToge1xuICogICAgICAgb2Zmc2V0OiBOdW1iZXIsXG4gKiAgICAgICBsZW5ndGg6IE51bWJlclxuICogICAgIH0sXG4gKiAgICAgW2J5dGVzXTogVWludDhBcnJheVxuICogICB9XG4gKiB9XG4gKiAuLi53aGVyZSBbbmFtZV0gZGVub3RlcyBvcHRpb25hbCBwcm9wZXJ0aWVzXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0geGhyIC0gYW4gaW5zdGFuY2Ugb2YgdGhlIHhociB3cmFwcGVyIGluIHhoci5qc1xuICogQHBhcmFtIHtPYmplY3R9IHhock9wdGlvbnMgLSB0aGUgYmFzZSBvcHRpb25zIHRvIHByb3ZpZGUgdG8gYWxsIHhociByZXF1ZXN0c1xuICogQHBhcmFtIHtXZWJXb3JrZXJ9IGRlY3J5cHRpb25Xb3JrZXIgLSBhIFdlYldvcmtlciBpbnRlcmZhY2UgdG8gQUVTLTEyOFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNyeXB0aW9uIHJvdXRpbmVzXG4gKiBAcGFyYW0ge09iamVjdH0gc2VnbWVudCAtIGEgc2ltcGxpZmllZCBjb3B5IG9mIHRoZSBzZWdtZW50SW5mbyBvYmplY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBTZWdtZW50TG9hZGVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhYm9ydEZuIC0gYSBjYWxsYmFjayBjYWxsZWQgKG9ubHkgb25jZSkgaWYgYW55IHBpZWNlIG9mIGEgcmVxdWVzdCB3YXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9ncmVzc0ZuIC0gYSBjYWxsYmFjayB0aGF0IHJlY2VpdmVzIHByb2dyZXNzIGV2ZW50cyBmcm9tIHRoZSBtYWluXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudCdzIHhociByZXF1ZXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFja0luZm9GbiAtIGEgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyB0cmFjayBpbmZvXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpZDNGbiAtIGEgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyBJRDMgbWV0YWRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhcHRpb25zRm4gLSBhIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgY2FwdGlvbnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRhdGFGbiAtIGEgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyBkYXRhIGZyb20gdGhlIG1haW4gc2VnbWVudCdzIHhoclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCwgdHJhbnNtdXhlZCBpZiBuZWVkZWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRvbmVGbiAtIGEgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBvbmx5IG9uY2UgYWxsIHJlcXVlc3RzIGhhdmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2NlZWRlZCBvciBmYWlsZWRcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gaW52b2tlZCwgaW1tZWRpYXRlbHkgYWJvcnRzIGFsbFxuICogICAgICAgICAgICAgICAgICAgICBvdXRzdGFuZGluZyByZXF1ZXN0c1xuICovXG5cblxudmFyIG1lZGlhU2VnbWVudFJlcXVlc3QgPSBmdW5jdGlvbiBtZWRpYVNlZ21lbnRSZXF1ZXN0KF9yZWY5KSB7XG4gIHZhciB4aHIgPSBfcmVmOS54aHIsXG4gICAgICB4aHJPcHRpb25zID0gX3JlZjkueGhyT3B0aW9ucyxcbiAgICAgIGRlY3J5cHRpb25Xb3JrZXIgPSBfcmVmOS5kZWNyeXB0aW9uV29ya2VyLFxuICAgICAgc2VnbWVudCA9IF9yZWY5LnNlZ21lbnQsXG4gICAgICBhYm9ydEZuID0gX3JlZjkuYWJvcnRGbixcbiAgICAgIHByb2dyZXNzRm4gPSBfcmVmOS5wcm9ncmVzc0ZuLFxuICAgICAgdHJhY2tJbmZvRm4gPSBfcmVmOS50cmFja0luZm9GbixcbiAgICAgIHRpbWluZ0luZm9GbiA9IF9yZWY5LnRpbWluZ0luZm9GbixcbiAgICAgIHZpZGVvU2VnbWVudFRpbWluZ0luZm9GbiA9IF9yZWY5LnZpZGVvU2VnbWVudFRpbWluZ0luZm9GbixcbiAgICAgIGlkM0ZuID0gX3JlZjkuaWQzRm4sXG4gICAgICBjYXB0aW9uc0ZuID0gX3JlZjkuY2FwdGlvbnNGbixcbiAgICAgIGRhdGFGbiA9IF9yZWY5LmRhdGFGbixcbiAgICAgIGRvbmVGbiA9IF9yZWY5LmRvbmVGbixcbiAgICAgIGhhbmRsZVBhcnRpYWxEYXRhID0gX3JlZjkuaGFuZGxlUGFydGlhbERhdGE7XG4gIHZhciBhY3RpdmVYaHJzID0gW107XG4gIHZhciBmaW5pc2hQcm9jZXNzaW5nRm4gPSB3YWl0Rm9yQ29tcGxldGlvbih7XG4gICAgYWN0aXZlWGhyczogYWN0aXZlWGhycyxcbiAgICBkZWNyeXB0aW9uV29ya2VyOiBkZWNyeXB0aW9uV29ya2VyLFxuICAgIHRyYWNrSW5mb0ZuOiB0cmFja0luZm9GbixcbiAgICB0aW1pbmdJbmZvRm46IHRpbWluZ0luZm9GbixcbiAgICB2aWRlb1NlZ21lbnRUaW1pbmdJbmZvRm46IHZpZGVvU2VnbWVudFRpbWluZ0luZm9GbixcbiAgICBpZDNGbjogaWQzRm4sXG4gICAgY2FwdGlvbnNGbjogY2FwdGlvbnNGbixcbiAgICBkYXRhRm46IGRhdGFGbixcbiAgICBkb25lRm46IGRvbmVGblxuICB9KTsgLy8gb3B0aW9uYWxseSwgcmVxdWVzdCB0aGUgZGVjcnlwdGlvbiBrZXlcblxuICBpZiAoc2VnbWVudC5rZXkgJiYgIXNlZ21lbnQua2V5LmJ5dGVzKSB7XG4gICAgdmFyIGtleVJlcXVlc3RPcHRpb25zID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyh4aHJPcHRpb25zLCB7XG4gICAgICB1cmk6IHNlZ21lbnQua2V5LnJlc29sdmVkVXJpLFxuICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInXG4gICAgfSk7XG4gICAgdmFyIGtleVJlcXVlc3RDYWxsYmFjayA9IGhhbmRsZUtleVJlc3BvbnNlKHNlZ21lbnQsIGZpbmlzaFByb2Nlc3NpbmdGbik7XG4gICAgdmFyIGtleVhociA9IHhocihrZXlSZXF1ZXN0T3B0aW9ucywga2V5UmVxdWVzdENhbGxiYWNrKTtcbiAgICBhY3RpdmVYaHJzLnB1c2goa2V5WGhyKTtcbiAgfSAvLyBvcHRpb25hbGx5LCByZXF1ZXN0IHRoZSBhc3NvY2lhdGVkIG1lZGlhIGluaXQgc2VnbWVudFxuXG5cbiAgaWYgKHNlZ21lbnQubWFwICYmICFzZWdtZW50Lm1hcC5ieXRlcykge1xuICAgIHZhciBpbml0U2VnbWVudE9wdGlvbnMgPSB2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHhock9wdGlvbnMsIHtcbiAgICAgIHVyaTogc2VnbWVudC5tYXAucmVzb2x2ZWRVcmksXG4gICAgICByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicsXG4gICAgICBoZWFkZXJzOiBzZWdtZW50WGhySGVhZGVycyhzZWdtZW50Lm1hcClcbiAgICB9KTtcbiAgICB2YXIgaW5pdFNlZ21lbnRSZXF1ZXN0Q2FsbGJhY2sgPSBoYW5kbGVJbml0U2VnbWVudFJlc3BvbnNlKHtcbiAgICAgIHNlZ21lbnQ6IHNlZ21lbnQsXG4gICAgICBmaW5pc2hQcm9jZXNzaW5nRm46IGZpbmlzaFByb2Nlc3NpbmdGblxuICAgIH0pO1xuICAgIHZhciBpbml0U2VnbWVudFhociA9IHhocihpbml0U2VnbWVudE9wdGlvbnMsIGluaXRTZWdtZW50UmVxdWVzdENhbGxiYWNrKTtcbiAgICBhY3RpdmVYaHJzLnB1c2goaW5pdFNlZ21lbnRYaHIpO1xuICB9XG5cbiAgdmFyIHNlZ21lbnRSZXF1ZXN0T3B0aW9ucyA9IHZpZGVvanMkMS5tZXJnZU9wdGlvbnMoeGhyT3B0aW9ucywge1xuICAgIHVyaTogc2VnbWVudC5yZXNvbHZlZFVyaSxcbiAgICByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicsXG4gICAgaGVhZGVyczogc2VnbWVudFhockhlYWRlcnMoc2VnbWVudClcbiAgfSk7XG5cbiAgaWYgKGhhbmRsZVBhcnRpYWxEYXRhKSB7XG4gICAgLy8gc2V0dGluZyB0byB0ZXh0IGlzIHJlcXVpcmVkIGZvciBwYXJ0aWFsIHJlc3BvbnNlc1xuICAgIC8vIGNvbnZlcnNpb24gdG8gQXJyYXlCdWZmZXIgaGFwcGVucyBsYXRlclxuICAgIHNlZ21lbnRSZXF1ZXN0T3B0aW9ucy5yZXNwb25zZVR5cGUgPSAndGV4dCc7XG5cbiAgICBzZWdtZW50UmVxdWVzdE9wdGlvbnMuYmVmb3JlU2VuZCA9IGZ1bmN0aW9uICh4aHJPYmplY3QpIHtcbiAgICAgIC8vIFhIUiBiaW5hcnkgY2hhcnNldCBvcHQgYnkgTWFyY3VzIEdyYW5hZG8gMjAwNiBbaHR0cDovL21ncmFuLmJsb2dzcG90LmNvbV1cbiAgICAgIC8vIG1ha2VzIHRoZSBicm93c2VyIHBhc3MgdGhyb3VnaCB0aGUgXCJ0ZXh0XCIgdW5wYXJzZWRcbiAgICAgIHhock9iamVjdC5vdmVycmlkZU1pbWVUeXBlKCd0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkJyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBzZWdtZW50UmVxdWVzdENhbGxiYWNrID0gaGFuZGxlU2VnbWVudFJlc3BvbnNlKHtcbiAgICBzZWdtZW50OiBzZWdtZW50LFxuICAgIGZpbmlzaFByb2Nlc3NpbmdGbjogZmluaXNoUHJvY2Vzc2luZ0ZuLFxuICAgIHJlc3BvbnNlVHlwZTogc2VnbWVudFJlcXVlc3RPcHRpb25zLnJlc3BvbnNlVHlwZVxuICB9KTtcbiAgdmFyIHNlZ21lbnRYaHIgPSB4aHIoc2VnbWVudFJlcXVlc3RPcHRpb25zLCBzZWdtZW50UmVxdWVzdENhbGxiYWNrKTtcbiAgc2VnbWVudFhoci5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGhhbmRsZVByb2dyZXNzKHtcbiAgICBzZWdtZW50OiBzZWdtZW50LFxuICAgIHByb2dyZXNzRm46IHByb2dyZXNzRm4sXG4gICAgdHJhY2tJbmZvRm46IHRyYWNrSW5mb0ZuLFxuICAgIHRpbWluZ0luZm9GbjogdGltaW5nSW5mb0ZuLFxuICAgIHZpZGVvU2VnbWVudFRpbWluZ0luZm9GbjogdmlkZW9TZWdtZW50VGltaW5nSW5mb0ZuLFxuICAgIGlkM0ZuOiBpZDNGbixcbiAgICBjYXB0aW9uc0ZuOiBjYXB0aW9uc0ZuLFxuICAgIGRhdGFGbjogZGF0YUZuLFxuICAgIGhhbmRsZVBhcnRpYWxEYXRhOiBoYW5kbGVQYXJ0aWFsRGF0YVxuICB9KSk7XG4gIGFjdGl2ZVhocnMucHVzaChzZWdtZW50WGhyKTsgLy8gc2luY2UgYWxsIHBhcnRzIG9mIHRoZSByZXF1ZXN0IG11c3QgYmUgY29uc2lkZXJlZCwgYnV0IHNob3VsZCBub3QgbWFrZSBjYWxsYmFja3NcbiAgLy8gbXVsdGlwbGUgdGltZXMsIHByb3ZpZGUgYSBzaGFyZWQgc3RhdGUgb2JqZWN0XG5cbiAgdmFyIGxvYWRlbmRTdGF0ZSA9IHt9O1xuICBhY3RpdmVYaHJzLmZvckVhY2goZnVuY3Rpb24gKGFjdGl2ZVhocikge1xuICAgIGFjdGl2ZVhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkZW5kJywgaGFuZGxlTG9hZEVuZCh7XG4gICAgICBsb2FkZW5kU3RhdGU6IGxvYWRlbmRTdGF0ZSxcbiAgICAgIGFib3J0Rm46IGFib3J0Rm5cbiAgICB9KSk7XG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhYm9ydEFsbChhY3RpdmVYaHJzKTtcbiAgfTtcbn07XG5cbnZhciB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9LFxuICAgIFRBUkdFVCA9IHR5cGVvZiBTeW1ib2wgPT09ICd1bmRlZmluZWQnID8gJ19fdGFyZ2V0JyA6IFN5bWJvbCgpLFxuICAgIFNDUklQVF9UWVBFID0gJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnLFxuICAgIEJsb2JCdWlsZGVyID0gd2luLkJsb2JCdWlsZGVyIHx8IHdpbi5XZWJLaXRCbG9iQnVpbGRlciB8fCB3aW4uTW96QmxvYkJ1aWxkZXIgfHwgd2luLk1TQmxvYkJ1aWxkZXIsXG4gICAgVVJMID0gd2luLlVSTCB8fCB3aW4ud2Via2l0VVJMIHx8IFVSTCAmJiBVUkwubXNVUkwsXG4gICAgV29ya2VyID0gd2luLldvcmtlcjtcbi8qKlxuICogUmV0dXJucyBhIHdyYXBwZXIgYXJvdW5kIFdlYiBXb3JrZXIgY29kZSB0aGF0IGlzIGNvbnN0cnVjdGlibGUuXG4gKlxuICogQGZ1bmN0aW9uIHNoaW1Xb3JrZXJcbiAqXG4gKiBAcGFyYW0geyBTdHJpbmcgfSAgICBmaWxlbmFtZSAgICBUaGUgbmFtZSBvZiB0aGUgZmlsZVxuICogQHBhcmFtIHsgRnVuY3Rpb24gfSAgZm4gICAgICAgICAgRnVuY3Rpb24gd3JhcHBpbmcgdGhlIGNvZGUgb2YgdGhlIHdvcmtlclxuICovXG5cbmZ1bmN0aW9uIHNoaW1Xb3JrZXIoZmlsZW5hbWUsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBTaGltV29ya2VyKGZvcmNlRmFsbGJhY2spIHtcbiAgICB2YXIgbyA9IHRoaXM7XG5cbiAgICBpZiAoIWZuKSB7XG4gICAgICByZXR1cm4gbmV3IFdvcmtlcihmaWxlbmFtZSk7XG4gICAgfSBlbHNlIGlmIChXb3JrZXIgJiYgIWZvcmNlRmFsbGJhY2spIHtcbiAgICAgIC8vIENvbnZlcnQgdGhlIGZ1bmN0aW9uJ3MgaW5uZXIgY29kZSB0byBhIHN0cmluZyB0byBjb25zdHJ1Y3QgdGhlIHdvcmtlclxuICAgICAgdmFyIHNvdXJjZSA9IGZuLnRvU3RyaW5nKCkucmVwbGFjZSgvXmZ1bmN0aW9uLis/ey8sICcnKS5zbGljZSgwLCAtMSksXG4gICAgICAgICAgb2JqVVJMID0gY3JlYXRlU291cmNlT2JqZWN0KHNvdXJjZSk7XG4gICAgICB0aGlzW1RBUkdFVF0gPSBuZXcgV29ya2VyKG9ialVSTCk7XG4gICAgICB3cmFwVGVybWluYXRlKHRoaXNbVEFSR0VUXSwgb2JqVVJMKTtcbiAgICAgIHJldHVybiB0aGlzW1RBUkdFVF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzZWxmU2hpbSA9IHtcbiAgICAgICAgcG9zdE1lc3NhZ2U6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKG0pIHtcbiAgICAgICAgICBpZiAoby5vbm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBvLm9ubWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgZGF0YTogbSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHNlbGZTaGltXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZm4uY2FsbChzZWxmU2hpbSk7XG5cbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmU2hpbS5vbm1lc3NhZ2Uoe1xuICAgICAgICAgICAgZGF0YTogbSxcbiAgICAgICAgICAgIHRhcmdldDogb1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuaXNUaGlzVGhyZWFkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG59IC8vIFRlc3QgV29ya2VyIGNhcGFiaWxpdGllc1xuXG5cbmlmIChXb3JrZXIpIHtcbiAgdmFyIHRlc3RXb3JrZXIsXG4gICAgICBvYmpVUkwgPSBjcmVhdGVTb3VyY2VPYmplY3QoJ3NlbGYub25tZXNzYWdlID0gZnVuY3Rpb24gKCkge30nKSxcbiAgICAgIHRlc3RBcnJheSA9IG5ldyBVaW50OEFycmF5KDEpO1xuXG4gIHRyeSB7XG4gICAgdGVzdFdvcmtlciA9IG5ldyBXb3JrZXIob2JqVVJMKTsgLy8gTmF0aXZlIGJyb3dzZXIgb24gc29tZSBTYW1zdW5nIGRldmljZXMgdGhyb3dzIGZvciB0cmFuc2ZlcmFibGVzLCBsZXQncyBkZXRlY3QgaXRcblxuICAgIHRlc3RXb3JrZXIucG9zdE1lc3NhZ2UodGVzdEFycmF5LCBbdGVzdEFycmF5LmJ1ZmZlcl0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgV29ya2VyID0gbnVsbDtcbiAgfSBmaW5hbGx5IHtcbiAgICBVUkwucmV2b2tlT2JqZWN0VVJMKG9ialVSTCk7XG5cbiAgICBpZiAodGVzdFdvcmtlcikge1xuICAgICAgdGVzdFdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU291cmNlT2JqZWN0KHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtzdHJdLCB7XG4gICAgICB0eXBlOiBTQ1JJUFRfVFlQRVxuICAgIH0pKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciBibG9iID0gbmV3IEJsb2JCdWlsZGVyKCk7XG4gICAgYmxvYi5hcHBlbmQoc3RyKTtcbiAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iLmdldEJsb2IodHlwZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyYXBUZXJtaW5hdGUod29ya2VyLCBvYmpVUkwpIHtcbiAgaWYgKCF3b3JrZXIgfHwgIW9ialVSTCkgcmV0dXJuO1xuICB2YXIgdGVybSA9IHdvcmtlci50ZXJtaW5hdGU7XG4gIHdvcmtlci5vYmpVUkwgPSBvYmpVUkw7XG5cbiAgd29ya2VyLnRlcm1pbmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAod29ya2VyLm9ialVSTCkgVVJMLnJldm9rZU9iamVjdFVSTCh3b3JrZXIub2JqVVJMKTtcbiAgICB0ZXJtLmNhbGwod29ya2VyKTtcbiAgfTtcbn1cblxudmFyIFRyYW5zbXV4V29ya2VyID0gbmV3IHNoaW1Xb3JrZXIoXCIuL3RyYW5zbXV4ZXItd29ya2VyLndvcmtlci5qc1wiLCBmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8qISBAbmFtZSBAdmlkZW9qcy9odHRwLXN0cmVhbWluZyBAdmVyc2lvbiAyLjIuNCBAbGljZW5zZSBBcGFjaGUtMi4wICovXG5cbiAgdmFyIHRyYW5zbXV4ZXJXb3JrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogbXV4LmpzXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAgICAgKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gICAgICpcbiAgICAgKiBBIGxpZ2h0d2VpZ2h0IHJlYWRhYmxlIHN0cmVhbSBpbXBsZW1lbnRpb24gdGhhdCBoYW5kbGVzIGV2ZW50IGRpc3BhdGNoaW5nLlxuICAgICAqIE9iamVjdHMgdGhhdCBpbmhlcml0IGZyb20gc3RyZWFtcyBzaG91bGQgY2FsbCBpbml0IGluIHRoZWlyIGNvbnN0cnVjdG9ycy5cbiAgICAgKi9cbiAgICB2YXIgU3RyZWFtID0gZnVuY3Rpb24gU3RyZWFtKCkge1xuICAgICAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXJzID0ge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBzcGVjaWZpZWQgZXZlbnQgdHlwZS5cbiAgICAgICAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gdGhlIGV2ZW50IG5hbWVcbiAgICAgICAgICogQHBhcmFtIGxpc3RlbmVyIHtmdW5jdGlvbn0gdGhlIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBhbiBldmVudCBvZlxuICAgICAgICAgKiB0aGUgc3BlY2lmaWVkIHR5cGUgb2NjdXJzXG4gICAgICAgICAqL1xuXG4gICAgICAgIHRoaXMub24gPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgICBpZiAoIWxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXJzW3R5cGVdLmNvbmNhdChsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmUgYSBsaXN0ZW5lciBmb3IgYSBzcGVjaWZpZWQgZXZlbnQgdHlwZS5cbiAgICAgICAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gdGhlIGV2ZW50IG5hbWVcbiAgICAgICAgICogQHBhcmFtIGxpc3RlbmVyIHtmdW5jdGlvbn0gYSBmdW5jdGlvbiBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZm9yIHRoaXNcbiAgICAgICAgICogdHlwZSBvZiBldmVudCB0aHJvdWdoIGBvbmBcbiAgICAgICAgICovXG5cblxuICAgICAgICB0aGlzLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICAgIHZhciBpbmRleDtcblxuICAgICAgICAgIGlmICghbGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5kZXggPSBsaXN0ZW5lcnNbdHlwZV0uaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXJzW3R5cGVdLnNsaWNlKCk7XG4gICAgICAgICAgbGlzdGVuZXJzW3R5cGVdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgcmV0dXJuIGluZGV4ID4gLTE7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmlnZ2VyIGFuIGV2ZW50IG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBvbiB0aGlzIHN0cmVhbS4gQW55IGFkZGl0aW9uYWxcbiAgICAgICAgICogYXJndW1lbnRzIHRvIHRoaXMgZnVuY3Rpb24gYXJlIHBhc3NlZCBhcyBwYXJhbWV0ZXJzIHRvIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gdGhlIGV2ZW50IG5hbWVcbiAgICAgICAgICovXG5cblxuICAgICAgICB0aGlzLnRyaWdnZXIgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgIHZhciBjYWxsYmFja3MsIGksIGxlbmd0aCwgYXJncztcbiAgICAgICAgICBjYWxsYmFja3MgPSBsaXN0ZW5lcnNbdHlwZV07XG5cbiAgICAgICAgICBpZiAoIWNhbGxiYWNrcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gU2xpY2luZyB0aGUgYXJndW1lbnRzIG9uIGV2ZXJ5IGludm9jYXRpb24gb2YgdGhpcyBtZXRob2RcbiAgICAgICAgICAvLyBjYW4gYWRkIGEgc2lnbmlmaWNhbnQgYW1vdW50IG9mIG92ZXJoZWFkLiBBdm9pZCB0aGVcbiAgICAgICAgICAvLyBpbnRlcm1lZGlhdGUgb2JqZWN0IGNyZWF0aW9uIGZvciB0aGUgY29tbW9uIGNhc2Ugb2YgYVxuICAgICAgICAgIC8vIHNpbmdsZSBjYWxsYmFjayBhcmd1bWVudFxuXG5cbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgbGVuZ3RoID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlc3Ryb3lzIHRoZSBzdHJlYW0gYW5kIGNsZWFucyB1cC5cbiAgICAgICAgICovXG5cblxuICAgICAgICB0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbGlzdGVuZXJzID0ge307XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRm9yd2FyZHMgYWxsIGBkYXRhYCBldmVudHMgb24gdGhpcyBzdHJlYW0gdG8gdGhlIGRlc3RpbmF0aW9uIHN0cmVhbS4gVGhlXG4gICAgICogZGVzdGluYXRpb24gc3RyZWFtIHNob3VsZCBwcm92aWRlIGEgbWV0aG9kIGBwdXNoYCB0byByZWNlaXZlIHRoZSBkYXRhXG4gICAgICogZXZlbnRzIGFzIHRoZXkgYXJyaXZlLlxuICAgICAqIEBwYXJhbSBkZXN0aW5hdGlvbiB7c3RyZWFtfSB0aGUgc3RyZWFtIHRoYXQgd2lsbCByZWNlaXZlIGFsbCBgZGF0YWAgZXZlbnRzXG4gICAgICogQHBhcmFtIGF1dG9GbHVzaCB7Ym9vbGVhbn0gaWYgZmFsc2UsIHdlIHdpbGwgbm90IGNhbGwgYGZsdXNoYCBvbiB0aGUgZGVzdGluYXRpb25cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSBjdXJyZW50IHN0cmVhbSBlbWl0cyBhICdkb25lJyBldmVudFxuICAgICAqIEBzZWUgaHR0cDovL25vZGVqcy5vcmcvYXBpL3N0cmVhbS5odG1sI3N0cmVhbV9yZWFkYWJsZV9waXBlX2Rlc3RpbmF0aW9uX29wdGlvbnNcbiAgICAgKi9cblxuXG4gICAgU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3RpbmF0aW9uKSB7XG4gICAgICB0aGlzLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgZGVzdGluYXRpb24ucHVzaChkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5vbignZG9uZScsIGZ1bmN0aW9uIChmbHVzaFNvdXJjZSkge1xuICAgICAgICBkZXN0aW5hdGlvbi5mbHVzaChmbHVzaFNvdXJjZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMub24oJ3BhcnRpYWxkb25lJywgZnVuY3Rpb24gKGZsdXNoU291cmNlKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uLnBhcnRpYWxGbHVzaChmbHVzaFNvdXJjZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMub24oJ2VuZGVkdGltZWxpbmUnLCBmdW5jdGlvbiAoZmx1c2hTb3VyY2UpIHtcbiAgICAgICAgZGVzdGluYXRpb24uZW5kVGltZWxpbmUoZmx1c2hTb3VyY2UpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm9uKCdyZXNldCcsIGZ1bmN0aW9uIChmbHVzaFNvdXJjZSkge1xuICAgICAgICBkZXN0aW5hdGlvbi5yZXNldChmbHVzaFNvdXJjZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbiAgICB9OyAvLyBEZWZhdWx0IHN0cmVhbSBmdW5jdGlvbnMgdGhhdCBhcmUgZXhwZWN0ZWQgdG8gYmUgb3ZlcnJpZGRlbiB0byBwZXJmb3JtXG4gICAgLy8gYWN0dWFsIHdvcmsuIFRoZXNlIGFyZSBwcm92aWRlZCBieSB0aGUgcHJvdG90eXBlIGFzIGEgc29ydCBvZiBuby1vcFxuICAgIC8vIGltcGxlbWVudGF0aW9uIHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0byBjaGVjayBmb3IgdGhlaXIgZXhpc3RlbmNlIGluIHRoZVxuICAgIC8vIGBwaXBlYCBmdW5jdGlvbiBhYm92ZS5cblxuXG4gICAgU3RyZWFtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIGRhdGEpO1xuICAgIH07XG5cbiAgICBTdHJlYW0ucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGZsdXNoU291cmNlKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnLCBmbHVzaFNvdXJjZSk7XG4gICAgfTtcblxuICAgIFN0cmVhbS5wcm90b3R5cGUucGFydGlhbEZsdXNoID0gZnVuY3Rpb24gKGZsdXNoU291cmNlKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3BhcnRpYWxkb25lJywgZmx1c2hTb3VyY2UpO1xuICAgIH07XG5cbiAgICBTdHJlYW0ucHJvdG90eXBlLmVuZFRpbWVsaW5lID0gZnVuY3Rpb24gKGZsdXNoU291cmNlKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2VuZGVkdGltZWxpbmUnLCBmbHVzaFNvdXJjZSk7XG4gICAgfTtcblxuICAgIFN0cmVhbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoZmx1c2hTb3VyY2UpIHtcbiAgICAgIHRoaXMudHJpZ2dlcigncmVzZXQnLCBmbHVzaFNvdXJjZSk7XG4gICAgfTtcblxuICAgIHZhciBzdHJlYW0gPSBTdHJlYW07XG4gICAgLyoqXG4gICAgICogbXV4LmpzXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAgICAgKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gICAgICpcbiAgICAgKiBGdW5jdGlvbnMgdGhhdCBnZW5lcmF0ZSBmcmFnbWVudGVkIE1QNHMgc3VpdGFibGUgZm9yIHVzZSB3aXRoIE1lZGlhXG4gICAgICogU291cmNlIEV4dGVuc2lvbnMuXG4gICAgICovXG5cbiAgICB2YXIgVUlOVDMyX01BWCA9IE1hdGgucG93KDIsIDMyKSAtIDE7XG4gICAgdmFyIGJveCwgZGluZiwgZXNkcywgZnR5cCwgbWRhdCwgbWZoZCwgbWluZiwgbW9vZiwgbW9vdiwgbXZleCwgbXZoZCwgdHJhaywgdGtoZCwgbWRpYSwgbWRoZCwgaGRsciwgc2R0cCwgc3RibCwgc3RzZCwgdHJhZiwgdHJleCwgdHJ1biwgdHlwZXMsIE1BSk9SX0JSQU5ELCBNSU5PUl9WRVJTSU9OLCBBVkMxX0JSQU5ELCBWSURFT19IRExSLCBBVURJT19IRExSLCBIRExSX1RZUEVTLCBWTUhELCBTTUhELCBEUkVGLCBTVENPLCBTVFNDLCBTVFNaLCBTVFRTOyAvLyBwcmUtY2FsY3VsYXRlIGNvbnN0YW50c1xuXG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdHlwZXMgPSB7XG4gICAgICAgIGF2YzE6IFtdLFxuICAgICAgICAvLyBjb2RpbmduYW1lXG4gICAgICAgIGF2Y0M6IFtdLFxuICAgICAgICBidHJ0OiBbXSxcbiAgICAgICAgZGluZjogW10sXG4gICAgICAgIGRyZWY6IFtdLFxuICAgICAgICBlc2RzOiBbXSxcbiAgICAgICAgZnR5cDogW10sXG4gICAgICAgIGhkbHI6IFtdLFxuICAgICAgICBtZGF0OiBbXSxcbiAgICAgICAgbWRoZDogW10sXG4gICAgICAgIG1kaWE6IFtdLFxuICAgICAgICBtZmhkOiBbXSxcbiAgICAgICAgbWluZjogW10sXG4gICAgICAgIG1vb2Y6IFtdLFxuICAgICAgICBtb292OiBbXSxcbiAgICAgICAgbXA0YTogW10sXG4gICAgICAgIC8vIGNvZGluZ25hbWVcbiAgICAgICAgbXZleDogW10sXG4gICAgICAgIG12aGQ6IFtdLFxuICAgICAgICBwYXNwOiBbXSxcbiAgICAgICAgc2R0cDogW10sXG4gICAgICAgIHNtaGQ6IFtdLFxuICAgICAgICBzdGJsOiBbXSxcbiAgICAgICAgc3RjbzogW10sXG4gICAgICAgIHN0c2M6IFtdLFxuICAgICAgICBzdHNkOiBbXSxcbiAgICAgICAgc3RzejogW10sXG4gICAgICAgIHN0dHM6IFtdLFxuICAgICAgICBzdHlwOiBbXSxcbiAgICAgICAgdGZkdDogW10sXG4gICAgICAgIHRmaGQ6IFtdLFxuICAgICAgICB0cmFmOiBbXSxcbiAgICAgICAgdHJhazogW10sXG4gICAgICAgIHRydW46IFtdLFxuICAgICAgICB0cmV4OiBbXSxcbiAgICAgICAgdGtoZDogW10sXG4gICAgICAgIHZtaGQ6IFtdXG4gICAgICB9OyAvLyBJbiBlbnZpcm9ubWVudHMgd2hlcmUgVWludDhBcnJheSBpcyB1bmRlZmluZWQgKGUuZy4sIElFOCksIHNraXAgc2V0IHVwIHNvIHRoYXQgd2VcbiAgICAgIC8vIGRvbid0IHRocm93IGFuIGVycm9yXG5cbiAgICAgIGlmICh0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgaW4gdHlwZXMpIHtcbiAgICAgICAgaWYgKHR5cGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgdHlwZXNbaV0gPSBbaS5jaGFyQ29kZUF0KDApLCBpLmNoYXJDb2RlQXQoMSksIGkuY2hhckNvZGVBdCgyKSwgaS5jaGFyQ29kZUF0KDMpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBNQUpPUl9CUkFORCA9IG5ldyBVaW50OEFycmF5KFsnaScuY2hhckNvZGVBdCgwKSwgJ3MnLmNoYXJDb2RlQXQoMCksICdvJy5jaGFyQ29kZUF0KDApLCAnbScuY2hhckNvZGVBdCgwKV0pO1xuICAgICAgQVZDMV9CUkFORCA9IG5ldyBVaW50OEFycmF5KFsnYScuY2hhckNvZGVBdCgwKSwgJ3YnLmNoYXJDb2RlQXQoMCksICdjJy5jaGFyQ29kZUF0KDApLCAnMScuY2hhckNvZGVBdCgwKV0pO1xuICAgICAgTUlOT1JfVkVSU0lPTiA9IG5ldyBVaW50OEFycmF5KFswLCAwLCAwLCAxXSk7XG4gICAgICBWSURFT19IRExSID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAweDc2LCAweDY5LCAweDY0LCAweDY1LCAvLyBoYW5kbGVyX3R5cGU6ICd2aWRlJ1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHg1NiwgMHg2OSwgMHg2NCwgMHg2NSwgMHg2ZiwgMHg0OCwgMHg2MSwgMHg2ZSwgMHg2NCwgMHg2YywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiAnVmlkZW9IYW5kbGVyJ1xuICAgICAgXSk7XG4gICAgICBBVURJT19IRExSID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAweDczLCAweDZmLCAweDc1LCAweDZlLCAvLyBoYW5kbGVyX3R5cGU6ICdzb3VuJ1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHg1MywgMHg2ZiwgMHg3NSwgMHg2ZSwgMHg2NCwgMHg0OCwgMHg2MSwgMHg2ZSwgMHg2NCwgMHg2YywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiAnU291bmRIYW5kbGVyJ1xuICAgICAgXSk7XG4gICAgICBIRExSX1RZUEVTID0ge1xuICAgICAgICB2aWRlbzogVklERU9fSERMUixcbiAgICAgICAgYXVkaW86IEFVRElPX0hETFJcbiAgICAgIH07XG4gICAgICBEUkVGID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGVudHJ5X2NvdW50XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDBjLCAvLyBlbnRyeV9zaXplXG4gICAgICAweDc1LCAweDcyLCAweDZjLCAweDIwLCAvLyAndXJsJyB0eXBlXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDEgLy8gZW50cnlfZmxhZ3NcbiAgICAgIF0pO1xuICAgICAgU01IRCA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgLy8gYmFsYW5jZSwgMCBtZWFucyBjZW50ZXJlZFxuICAgICAgMHgwMCwgMHgwMCAvLyByZXNlcnZlZFxuICAgICAgXSk7XG4gICAgICBTVENPID0gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGVudHJ5X2NvdW50XG4gICAgICBdKTtcbiAgICAgIFNUU0MgPSBTVENPO1xuICAgICAgU1RTWiA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gc2FtcGxlX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gc2FtcGxlX2NvdW50XG4gICAgICBdKTtcbiAgICAgIFNUVFMgPSBTVENPO1xuICAgICAgVk1IRCA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAxLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgLy8gZ3JhcGhpY3Ntb2RlXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIG9wY29sb3JcbiAgICAgIF0pO1xuICAgIH0pKCk7XG5cbiAgICBib3ggPSBmdW5jdGlvbiBib3godHlwZSkge1xuICAgICAgdmFyIHBheWxvYWQgPSBbXSxcbiAgICAgICAgICBzaXplID0gMCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICB2aWV3O1xuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHBheWxvYWQucHVzaChhcmd1bWVudHNbaV0pO1xuICAgICAgfVxuXG4gICAgICBpID0gcGF5bG9hZC5sZW5ndGg7IC8vIGNhbGN1bGF0ZSB0aGUgdG90YWwgc2l6ZSB3ZSBuZWVkIHRvIGFsbG9jYXRlXG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgc2l6ZSArPSBwYXlsb2FkW2ldLmJ5dGVMZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHNpemUgKyA4KTtcbiAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcocmVzdWx0LmJ1ZmZlciwgcmVzdWx0LmJ5dGVPZmZzZXQsIHJlc3VsdC5ieXRlTGVuZ3RoKTtcbiAgICAgIHZpZXcuc2V0VWludDMyKDAsIHJlc3VsdC5ieXRlTGVuZ3RoKTtcbiAgICAgIHJlc3VsdC5zZXQodHlwZSwgNCk7IC8vIGNvcHkgdGhlIHBheWxvYWQgaW50byB0aGUgcmVzdWx0XG5cbiAgICAgIGZvciAoaSA9IDAsIHNpemUgPSA4OyBpIDwgcGF5bG9hZC5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQuc2V0KHBheWxvYWRbaV0sIHNpemUpO1xuICAgICAgICBzaXplICs9IHBheWxvYWRbaV0uYnl0ZUxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgZGluZiA9IGZ1bmN0aW9uIGRpbmYoKSB7XG4gICAgICByZXR1cm4gYm94KHR5cGVzLmRpbmYsIGJveCh0eXBlcy5kcmVmLCBEUkVGKSk7XG4gICAgfTtcblxuICAgIGVzZHMgPSBmdW5jdGlvbiBlc2RzKHRyYWNrKSB7XG4gICAgICByZXR1cm4gYm94KHR5cGVzLmVzZHMsIG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgLy8gRVNfRGVzY3JpcHRvclxuICAgICAgMHgwMywgLy8gdGFnLCBFU19EZXNjclRhZ1xuICAgICAgMHgxOSwgLy8gbGVuZ3RoXG4gICAgICAweDAwLCAweDAwLCAvLyBFU19JRFxuICAgICAgMHgwMCwgLy8gc3RyZWFtRGVwZW5kZW5jZUZsYWcsIFVSTF9mbGFnLCByZXNlcnZlZCwgc3RyZWFtUHJpb3JpdHlcbiAgICAgIC8vIERlY29kZXJDb25maWdEZXNjcmlwdG9yXG4gICAgICAweDA0LCAvLyB0YWcsIERlY29kZXJDb25maWdEZXNjclRhZ1xuICAgICAgMHgxMSwgLy8gbGVuZ3RoXG4gICAgICAweDQwLCAvLyBvYmplY3QgdHlwZVxuICAgICAgMHgxNSwgLy8gc3RyZWFtVHlwZVxuICAgICAgMHgwMCwgMHgwNiwgMHgwMCwgLy8gYnVmZmVyU2l6ZURCXG4gICAgICAweDAwLCAweDAwLCAweGRhLCAweGMwLCAvLyBtYXhCaXRyYXRlXG4gICAgICAweDAwLCAweDAwLCAweGRhLCAweGMwLCAvLyBhdmdCaXRyYXRlXG4gICAgICAvLyBEZWNvZGVyU3BlY2lmaWNJbmZvXG4gICAgICAweDA1LCAvLyB0YWcsIERlY29kZXJTcGVjaWZpY0luZm9UYWdcbiAgICAgIDB4MDIsIC8vIGxlbmd0aFxuICAgICAgLy8gSVNPL0lFQyAxNDQ5Ni0zLCBBdWRpb1NwZWNpZmljQ29uZmlnXG4gICAgICAvLyBmb3Igc2FtcGxpbmdGcmVxdWVuY3lJbmRleCBzZWUgSVNPL0lFQyAxMzgxOC03OjIwMDYsIDguMS4zLjIuMiwgVGFibGUgMzVcbiAgICAgIHRyYWNrLmF1ZGlvb2JqZWN0dHlwZSA8PCAzIHwgdHJhY2suc2FtcGxpbmdmcmVxdWVuY3lpbmRleCA+Pj4gMSwgdHJhY2suc2FtcGxpbmdmcmVxdWVuY3lpbmRleCA8PCA3IHwgdHJhY2suY2hhbm5lbGNvdW50IDw8IDMsIDB4MDYsIDB4MDEsIDB4MDIgLy8gR0FTcGVjaWZpY0NvbmZpZ1xuICAgICAgXSkpO1xuICAgIH07XG5cbiAgICBmdHlwID0gZnVuY3Rpb24gZnR5cCgpIHtcbiAgICAgIHJldHVybiBib3godHlwZXMuZnR5cCwgTUFKT1JfQlJBTkQsIE1JTk9SX1ZFUlNJT04sIE1BSk9SX0JSQU5ELCBBVkMxX0JSQU5EKTtcbiAgICB9O1xuXG4gICAgaGRsciA9IGZ1bmN0aW9uIGhkbHIodHlwZSkge1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy5oZGxyLCBIRExSX1RZUEVTW3R5cGVdKTtcbiAgICB9O1xuXG4gICAgbWRhdCA9IGZ1bmN0aW9uIG1kYXQoZGF0YSkge1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy5tZGF0LCBkYXRhKTtcbiAgICB9O1xuXG4gICAgbWRoZCA9IGZ1bmN0aW9uIG1kaGQodHJhY2spIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMiwgLy8gY3JlYXRpb25fdGltZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMywgLy8gbW9kaWZpY2F0aW9uX3RpbWVcbiAgICAgIDB4MDAsIDB4MDEsIDB4NWYsIDB4OTAsIC8vIHRpbWVzY2FsZSwgOTAsMDAwIFwidGlja3NcIiBwZXIgc2Vjb25kXG4gICAgICB0cmFjay5kdXJhdGlvbiA+Pj4gMjQgJiAweEZGLCB0cmFjay5kdXJhdGlvbiA+Pj4gMTYgJiAweEZGLCB0cmFjay5kdXJhdGlvbiA+Pj4gOCAmIDB4RkYsIHRyYWNrLmR1cmF0aW9uICYgMHhGRiwgLy8gZHVyYXRpb25cbiAgICAgIDB4NTUsIDB4YzQsIC8vICd1bmQnIGxhbmd1YWdlICh1bmRldGVybWluZWQpXG4gICAgICAweDAwLCAweDAwXSk7IC8vIFVzZSB0aGUgc2FtcGxlIHJhdGUgZnJvbSB0aGUgdHJhY2sgbWV0YWRhdGEsIHdoZW4gaXQgaXNcbiAgICAgIC8vIGRlZmluZWQuIFRoZSBzYW1wbGUgcmF0ZSBjYW4gYmUgcGFyc2VkIG91dCBvZiBhbiBBRFRTIGhlYWRlciwgZm9yXG4gICAgICAvLyBpbnN0YW5jZS5cblxuICAgICAgaWYgKHRyYWNrLnNhbXBsZXJhdGUpIHtcbiAgICAgICAgcmVzdWx0WzEyXSA9IHRyYWNrLnNhbXBsZXJhdGUgPj4+IDI0ICYgMHhGRjtcbiAgICAgICAgcmVzdWx0WzEzXSA9IHRyYWNrLnNhbXBsZXJhdGUgPj4+IDE2ICYgMHhGRjtcbiAgICAgICAgcmVzdWx0WzE0XSA9IHRyYWNrLnNhbXBsZXJhdGUgPj4+IDggJiAweEZGO1xuICAgICAgICByZXN1bHRbMTVdID0gdHJhY2suc2FtcGxlcmF0ZSAmIDB4RkY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBib3godHlwZXMubWRoZCwgcmVzdWx0KTtcbiAgICB9O1xuXG4gICAgbWRpYSA9IGZ1bmN0aW9uIG1kaWEodHJhY2spIHtcbiAgICAgIHJldHVybiBib3godHlwZXMubWRpYSwgbWRoZCh0cmFjayksIGhkbHIodHJhY2sudHlwZSksIG1pbmYodHJhY2spKTtcbiAgICB9O1xuXG4gICAgbWZoZCA9IGZ1bmN0aW9uIG1maGQoc2VxdWVuY2VOdW1iZXIpIHtcbiAgICAgIHJldHVybiBib3godHlwZXMubWZoZCwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAoc2VxdWVuY2VOdW1iZXIgJiAweEZGMDAwMDAwKSA+PiAyNCwgKHNlcXVlbmNlTnVtYmVyICYgMHhGRjAwMDApID4+IDE2LCAoc2VxdWVuY2VOdW1iZXIgJiAweEZGMDApID4+IDgsIHNlcXVlbmNlTnVtYmVyICYgMHhGRiAvLyBzZXF1ZW5jZV9udW1iZXJcbiAgICAgIF0pKTtcbiAgICB9O1xuXG4gICAgbWluZiA9IGZ1bmN0aW9uIG1pbmYodHJhY2spIHtcbiAgICAgIHJldHVybiBib3godHlwZXMubWluZiwgdHJhY2sudHlwZSA9PT0gJ3ZpZGVvJyA/IGJveCh0eXBlcy52bWhkLCBWTUhEKSA6IGJveCh0eXBlcy5zbWhkLCBTTUhEKSwgZGluZigpLCBzdGJsKHRyYWNrKSk7XG4gICAgfTtcblxuICAgIG1vb2YgPSBmdW5jdGlvbiBtb29mKHNlcXVlbmNlTnVtYmVyLCB0cmFja3MpIHtcbiAgICAgIHZhciB0cmFja0ZyYWdtZW50cyA9IFtdLFxuICAgICAgICAgIGkgPSB0cmFja3MubGVuZ3RoOyAvLyBidWlsZCB0cmFmIGJveGVzIGZvciBlYWNoIHRyYWNrIGZyYWdtZW50XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdHJhY2tGcmFnbWVudHNbaV0gPSB0cmFmKHRyYWNrc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBib3guYXBwbHkobnVsbCwgW3R5cGVzLm1vb2YsIG1maGQoc2VxdWVuY2VOdW1iZXIpXS5jb25jYXQodHJhY2tGcmFnbWVudHMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBtb3ZpZSBib3guXG4gICAgICogQHBhcmFtIHRyYWNrcyB7YXJyYXl9IHRoZSB0cmFja3MgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbW92aWVcbiAgICAgKiBAc2VlIElTTy9JRUMgMTQ0OTYtMTI6MjAxMihFKSwgc2VjdGlvbiA4LjIuMVxuICAgICAqL1xuXG5cbiAgICBtb292ID0gZnVuY3Rpb24gbW9vdih0cmFja3MpIHtcbiAgICAgIHZhciBpID0gdHJhY2tzLmxlbmd0aCxcbiAgICAgICAgICBib3hlcyA9IFtdO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGJveGVzW2ldID0gdHJhayh0cmFja3NbaV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYm94LmFwcGx5KG51bGwsIFt0eXBlcy5tb292LCBtdmhkKDB4ZmZmZmZmZmYpXS5jb25jYXQoYm94ZXMpLmNvbmNhdChtdmV4KHRyYWNrcykpKTtcbiAgICB9O1xuXG4gICAgbXZleCA9IGZ1bmN0aW9uIG12ZXgodHJhY2tzKSB7XG4gICAgICB2YXIgaSA9IHRyYWNrcy5sZW5ndGgsXG4gICAgICAgICAgYm94ZXMgPSBbXTtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBib3hlc1tpXSA9IHRyZXgodHJhY2tzW2ldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJveC5hcHBseShudWxsLCBbdHlwZXMubXZleF0uY29uY2F0KGJveGVzKSk7XG4gICAgfTtcblxuICAgIG12aGQgPSBmdW5jdGlvbiBtdmhkKGR1cmF0aW9uKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gY3JlYXRpb25fdGltZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMiwgLy8gbW9kaWZpY2F0aW9uX3RpbWVcbiAgICAgIDB4MDAsIDB4MDEsIDB4NWYsIDB4OTAsIC8vIHRpbWVzY2FsZSwgOTAsMDAwIFwidGlja3NcIiBwZXIgc2Vjb25kXG4gICAgICAoZHVyYXRpb24gJiAweEZGMDAwMDAwKSA+PiAyNCwgKGR1cmF0aW9uICYgMHhGRjAwMDApID4+IDE2LCAoZHVyYXRpb24gJiAweEZGMDApID4+IDgsIGR1cmF0aW9uICYgMHhGRiwgLy8gZHVyYXRpb25cbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIDEuMCByYXRlXG4gICAgICAweDAxLCAweDAwLCAvLyAxLjAgdm9sdW1lXG4gICAgICAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAxLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDQwLCAweDAwLCAweDAwLCAweDAwLCAvLyB0cmFuc2Zvcm1hdGlvbjogdW5pdHkgbWF0cml4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZFxuICAgICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiAvLyBuZXh0X3RyYWNrX0lEXG4gICAgICBdKTtcbiAgICAgIHJldHVybiBib3godHlwZXMubXZoZCwgYnl0ZXMpO1xuICAgIH07XG5cbiAgICBzZHRwID0gZnVuY3Rpb24gc2R0cCh0cmFjaykge1xuICAgICAgdmFyIHNhbXBsZXMgPSB0cmFjay5zYW1wbGVzIHx8IFtdLFxuICAgICAgICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoNCArIHNhbXBsZXMubGVuZ3RoKSxcbiAgICAgICAgICBmbGFncyxcbiAgICAgICAgICBpOyAvLyBsZWF2ZSB0aGUgZnVsbCBib3ggaGVhZGVyICg0IGJ5dGVzKSBhbGwgemVyb1xuICAgICAgLy8gd3JpdGUgdGhlIHNhbXBsZSB0YWJsZVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbGFncyA9IHNhbXBsZXNbaV0uZmxhZ3M7XG4gICAgICAgIGJ5dGVzW2kgKyA0XSA9IGZsYWdzLmRlcGVuZHNPbiA8PCA0IHwgZmxhZ3MuaXNEZXBlbmRlZE9uIDw8IDIgfCBmbGFncy5oYXNSZWR1bmRhbmN5O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYm94KHR5cGVzLnNkdHAsIGJ5dGVzKTtcbiAgICB9O1xuXG4gICAgc3RibCA9IGZ1bmN0aW9uIHN0YmwodHJhY2spIHtcbiAgICAgIHJldHVybiBib3godHlwZXMuc3RibCwgc3RzZCh0cmFjayksIGJveCh0eXBlcy5zdHRzLCBTVFRTKSwgYm94KHR5cGVzLnN0c2MsIFNUU0MpLCBib3godHlwZXMuc3RzeiwgU1RTWiksIGJveCh0eXBlcy5zdGNvLCBTVENPKSk7XG4gICAgfTtcblxuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmlkZW9TYW1wbGUsIGF1ZGlvU2FtcGxlO1xuXG4gICAgICBzdHNkID0gZnVuY3Rpb24gc3RzZCh0cmFjaykge1xuICAgICAgICByZXR1cm4gYm94KHR5cGVzLnN0c2QsIG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMV0pLCB0cmFjay50eXBlID09PSAndmlkZW8nID8gdmlkZW9TYW1wbGUodHJhY2spIDogYXVkaW9TYW1wbGUodHJhY2spKTtcbiAgICAgIH07XG5cbiAgICAgIHZpZGVvU2FtcGxlID0gZnVuY3Rpb24gdmlkZW9TYW1wbGUodHJhY2spIHtcbiAgICAgICAgdmFyIHNwcyA9IHRyYWNrLnNwcyB8fCBbXSxcbiAgICAgICAgICAgIHBwcyA9IHRyYWNrLnBwcyB8fCBbXSxcbiAgICAgICAgICAgIHNlcXVlbmNlUGFyYW1ldGVyU2V0cyA9IFtdLFxuICAgICAgICAgICAgcGljdHVyZVBhcmFtZXRlclNldHMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBhdmMxQm94OyAvLyBhc3NlbWJsZSB0aGUgU1BTc1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzZXF1ZW5jZVBhcmFtZXRlclNldHMucHVzaCgoc3BzW2ldLmJ5dGVMZW5ndGggJiAweEZGMDApID4+PiA4KTtcbiAgICAgICAgICBzZXF1ZW5jZVBhcmFtZXRlclNldHMucHVzaChzcHNbaV0uYnl0ZUxlbmd0aCAmIDB4RkYpOyAvLyBzZXF1ZW5jZVBhcmFtZXRlclNldExlbmd0aFxuXG4gICAgICAgICAgc2VxdWVuY2VQYXJhbWV0ZXJTZXRzID0gc2VxdWVuY2VQYXJhbWV0ZXJTZXRzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzcHNbaV0pKTsgLy8gU1BTXG4gICAgICAgIH0gLy8gYXNzZW1ibGUgdGhlIFBQU3NcblxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBwaWN0dXJlUGFyYW1ldGVyU2V0cy5wdXNoKChwcHNbaV0uYnl0ZUxlbmd0aCAmIDB4RkYwMCkgPj4+IDgpO1xuICAgICAgICAgIHBpY3R1cmVQYXJhbWV0ZXJTZXRzLnB1c2gocHBzW2ldLmJ5dGVMZW5ndGggJiAweEZGKTtcbiAgICAgICAgICBwaWN0dXJlUGFyYW1ldGVyU2V0cyA9IHBpY3R1cmVQYXJhbWV0ZXJTZXRzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChwcHNbaV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF2YzFCb3ggPSBbdHlwZXMuYXZjMSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAgIDB4MDAsIDB4MDEsIC8vIGRhdGFfcmVmZXJlbmNlX2luZGV4XG4gICAgICAgIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAgIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAgICh0cmFjay53aWR0aCAmIDB4ZmYwMCkgPj4gOCwgdHJhY2sud2lkdGggJiAweGZmLCAvLyB3aWR0aFxuICAgICAgICAodHJhY2suaGVpZ2h0ICYgMHhmZjAwKSA+PiA4LCB0cmFjay5oZWlnaHQgJiAweGZmLCAvLyBoZWlnaHRcbiAgICAgICAgMHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gaG9yaXpyZXNvbHV0aW9uXG4gICAgICAgIDB4MDAsIDB4NDgsIDB4MDAsIDB4MDAsIC8vIHZlcnRyZXNvbHV0aW9uXG4gICAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAgIDB4MDAsIDB4MDEsIC8vIGZyYW1lX2NvdW50XG4gICAgICAgIDB4MTMsIDB4NzYsIDB4NjksIDB4NjQsIDB4NjUsIDB4NmYsIDB4NmEsIDB4NzMsIDB4MmQsIDB4NjMsIDB4NmYsIDB4NmUsIDB4NzQsIDB4NzIsIDB4NjksIDB4NjIsIDB4MmQsIDB4NjgsIDB4NmMsIDB4NzMsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNvbXByZXNzb3JuYW1lXG4gICAgICAgIDB4MDAsIDB4MTgsIC8vIGRlcHRoID0gMjRcbiAgICAgICAgMHgxMSwgMHgxMSAvLyBwcmVfZGVmaW5lZCA9IC0xXG4gICAgICAgIF0pLCBib3godHlwZXMuYXZjQywgbmV3IFVpbnQ4QXJyYXkoWzB4MDEsIC8vIGNvbmZpZ3VyYXRpb25WZXJzaW9uXG4gICAgICAgIHRyYWNrLnByb2ZpbGVJZGMsIC8vIEFWQ1Byb2ZpbGVJbmRpY2F0aW9uXG4gICAgICAgIHRyYWNrLnByb2ZpbGVDb21wYXRpYmlsaXR5LCAvLyBwcm9maWxlX2NvbXBhdGliaWxpdHlcbiAgICAgICAgdHJhY2subGV2ZWxJZGMsIC8vIEFWQ0xldmVsSW5kaWNhdGlvblxuICAgICAgICAweGZmIC8vIGxlbmd0aFNpemVNaW51c09uZSwgaGFyZC1jb2RlZCB0byA0IGJ5dGVzXG4gICAgICAgIF0uY29uY2F0KFtzcHMubGVuZ3RoXSwgLy8gbnVtT2ZTZXF1ZW5jZVBhcmFtZXRlclNldHNcbiAgICAgICAgc2VxdWVuY2VQYXJhbWV0ZXJTZXRzLCAvLyBcIlNQU1wiXG4gICAgICAgIFtwcHMubGVuZ3RoXSwgLy8gbnVtT2ZQaWN0dXJlUGFyYW1ldGVyU2V0c1xuICAgICAgICBwaWN0dXJlUGFyYW1ldGVyU2V0cyAvLyBcIlBQU1wiXG4gICAgICAgICkpKSwgYm94KHR5cGVzLmJ0cnQsIG5ldyBVaW50OEFycmF5KFsweDAwLCAweDFjLCAweDljLCAweDgwLCAvLyBidWZmZXJTaXplREJcbiAgICAgICAgMHgwMCwgMHgyZCwgMHhjNiwgMHhjMCwgLy8gbWF4Qml0cmF0ZVxuICAgICAgICAweDAwLCAweDJkLCAweGM2LCAweGMwIC8vIGF2Z0JpdHJhdGVcbiAgICAgICAgXSkpXTtcblxuICAgICAgICBpZiAodHJhY2suc2FyUmF0aW8pIHtcbiAgICAgICAgICB2YXIgaFNwYWNpbmcgPSB0cmFjay5zYXJSYXRpb1swXSxcbiAgICAgICAgICAgICAgdlNwYWNpbmcgPSB0cmFjay5zYXJSYXRpb1sxXTtcbiAgICAgICAgICBhdmMxQm94LnB1c2goYm94KHR5cGVzLnBhc3AsIG5ldyBVaW50OEFycmF5KFsoaFNwYWNpbmcgJiAweEZGMDAwMDAwKSA+PiAyNCwgKGhTcGFjaW5nICYgMHhGRjAwMDApID4+IDE2LCAoaFNwYWNpbmcgJiAweEZGMDApID4+IDgsIGhTcGFjaW5nICYgMHhGRiwgKHZTcGFjaW5nICYgMHhGRjAwMDAwMCkgPj4gMjQsICh2U3BhY2luZyAmIDB4RkYwMDAwKSA+PiAxNiwgKHZTcGFjaW5nICYgMHhGRjAwKSA+PiA4LCB2U3BhY2luZyAmIDB4RkZdKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJveC5hcHBseShudWxsLCBhdmMxQm94KTtcbiAgICAgIH07XG5cbiAgICAgIGF1ZGlvU2FtcGxlID0gZnVuY3Rpb24gYXVkaW9TYW1wbGUodHJhY2spIHtcbiAgICAgICAgcmV0dXJuIGJveCh0eXBlcy5tcDRhLCBuZXcgVWludDhBcnJheShbLy8gU2FtcGxlRW50cnksIElTTy9JRUMgMTQ0OTYtMTJcbiAgICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgICAgMHgwMCwgMHgwMSwgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgICAgLy8gQXVkaW9TYW1wbGVFbnRyeSwgSVNPL0lFQyAxNDQ5Ni0xMlxuICAgICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgICAodHJhY2suY2hhbm5lbGNvdW50ICYgMHhmZjAwKSA+PiA4LCB0cmFjay5jaGFubmVsY291bnQgJiAweGZmLCAvLyBjaGFubmVsY291bnRcbiAgICAgICAgKHRyYWNrLnNhbXBsZXNpemUgJiAweGZmMDApID4+IDgsIHRyYWNrLnNhbXBsZXNpemUgJiAweGZmLCAvLyBzYW1wbGVzaXplXG4gICAgICAgIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAgIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAgICh0cmFjay5zYW1wbGVyYXRlICYgMHhmZjAwKSA+PiA4LCB0cmFjay5zYW1wbGVyYXRlICYgMHhmZiwgMHgwMCwgMHgwMCAvLyBzYW1wbGVyYXRlLCAxNi4xNlxuICAgICAgICAvLyBNUDRBdWRpb1NhbXBsZUVudHJ5LCBJU08vSUVDIDE0NDk2LTE0XG4gICAgICAgIF0pLCBlc2RzKHRyYWNrKSk7XG4gICAgICB9O1xuICAgIH0pKCk7XG5cbiAgICB0a2hkID0gZnVuY3Rpb24gdGtoZCh0cmFjaykge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDcsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1lXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtb2RpZmljYXRpb25fdGltZVxuICAgICAgKHRyYWNrLmlkICYgMHhGRjAwMDAwMCkgPj4gMjQsICh0cmFjay5pZCAmIDB4RkYwMDAwKSA+PiAxNiwgKHRyYWNrLmlkICYgMHhGRjAwKSA+PiA4LCB0cmFjay5pZCAmIDB4RkYsIC8vIHRyYWNrX0lEXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgKHRyYWNrLmR1cmF0aW9uICYgMHhGRjAwMDAwMCkgPj4gMjQsICh0cmFjay5kdXJhdGlvbiAmIDB4RkYwMDAwKSA+PiAxNiwgKHRyYWNrLmR1cmF0aW9uICYgMHhGRjAwKSA+PiA4LCB0cmFjay5kdXJhdGlvbiAmIDB4RkYsIC8vIGR1cmF0aW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgLy8gbGF5ZXJcbiAgICAgIDB4MDAsIDB4MDAsIC8vIGFsdGVybmF0ZV9ncm91cFxuICAgICAgMHgwMSwgMHgwMCwgLy8gbm9uLWF1ZGlvIHRyYWNrIHZvbHVtZVxuICAgICAgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHRyYW5zZm9ybWF0aW9uOiB1bml0eSBtYXRyaXhcbiAgICAgICh0cmFjay53aWR0aCAmIDB4RkYwMCkgPj4gOCwgdHJhY2sud2lkdGggJiAweEZGLCAweDAwLCAweDAwLCAvLyB3aWR0aFxuICAgICAgKHRyYWNrLmhlaWdodCAmIDB4RkYwMCkgPj4gOCwgdHJhY2suaGVpZ2h0ICYgMHhGRiwgMHgwMCwgMHgwMCAvLyBoZWlnaHRcbiAgICAgIF0pO1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy50a2hkLCByZXN1bHQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYSB0cmFjayBmcmFnbWVudCAodHJhZikgYm94LiBBIHRyYWYgYm94IGNvbGxlY3RzIG1ldGFkYXRhXG4gICAgICogYWJvdXQgdHJhY2tzIGluIGEgbW92aWUgZnJhZ21lbnQgKG1vb2YpIGJveC5cbiAgICAgKi9cblxuXG4gICAgdHJhZiA9IGZ1bmN0aW9uIHRyYWYodHJhY2spIHtcbiAgICAgIHZhciB0cmFja0ZyYWdtZW50SGVhZGVyLCB0cmFja0ZyYWdtZW50RGVjb2RlVGltZSwgdHJhY2tGcmFnbWVudFJ1biwgc2FtcGxlRGVwZW5kZW5jeVRhYmxlLCBkYXRhT2Zmc2V0LCB1cHBlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lLCBsb3dlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lO1xuICAgICAgdHJhY2tGcmFnbWVudEhlYWRlciA9IGJveCh0eXBlcy50ZmhkLCBuZXcgVWludDhBcnJheShbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDNhLCAvLyBmbGFnc1xuICAgICAgKHRyYWNrLmlkICYgMHhGRjAwMDAwMCkgPj4gMjQsICh0cmFjay5pZCAmIDB4RkYwMDAwKSA+PiAxNiwgKHRyYWNrLmlkICYgMHhGRjAwKSA+PiA4LCB0cmFjay5pZCAmIDB4RkYsIC8vIHRyYWNrX0lEXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBzYW1wbGVfZGVzY3JpcHRpb25faW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGRlZmF1bHRfc2FtcGxlX2R1cmF0aW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9zaXplXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGRlZmF1bHRfc2FtcGxlX2ZsYWdzXG4gICAgICBdKSk7XG4gICAgICB1cHBlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lID0gTWF0aC5mbG9vcih0cmFjay5iYXNlTWVkaWFEZWNvZGVUaW1lIC8gKFVJTlQzMl9NQVggKyAxKSk7XG4gICAgICBsb3dlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lID0gTWF0aC5mbG9vcih0cmFjay5iYXNlTWVkaWFEZWNvZGVUaW1lICUgKFVJTlQzMl9NQVggKyAxKSk7XG4gICAgICB0cmFja0ZyYWdtZW50RGVjb2RlVGltZSA9IGJveCh0eXBlcy50ZmR0LCBuZXcgVWludDhBcnJheShbMHgwMSwgLy8gdmVyc2lvbiAxXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgLy8gYmFzZU1lZGlhRGVjb2RlVGltZVxuICAgICAgdXBwZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSA+Pj4gMjQgJiAweEZGLCB1cHBlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lID4+PiAxNiAmIDB4RkYsIHVwcGVyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPj4+IDggJiAweEZGLCB1cHBlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lICYgMHhGRiwgbG93ZXJXb3JkQmFzZU1lZGlhRGVjb2RlVGltZSA+Pj4gMjQgJiAweEZGLCBsb3dlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lID4+PiAxNiAmIDB4RkYsIGxvd2VyV29yZEJhc2VNZWRpYURlY29kZVRpbWUgPj4+IDggJiAweEZGLCBsb3dlcldvcmRCYXNlTWVkaWFEZWNvZGVUaW1lICYgMHhGRl0pKTsgLy8gdGhlIGRhdGEgb2Zmc2V0IHNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIGJ5dGVzIGZyb20gdGhlIHN0YXJ0IG9mXG4gICAgICAvLyB0aGUgY29udGFpbmluZyBtb29mIHRvIHRoZSBmaXJzdCBwYXlsb2FkIGJ5dGUgb2YgdGhlIGFzc29jaWF0ZWRcbiAgICAgIC8vIG1kYXRcblxuICAgICAgZGF0YU9mZnNldCA9IDMyICsgLy8gdGZoZFxuICAgICAgMjAgKyAvLyB0ZmR0XG4gICAgICA4ICsgLy8gdHJhZiBoZWFkZXJcbiAgICAgIDE2ICsgLy8gbWZoZFxuICAgICAgOCArIC8vIG1vb2YgaGVhZGVyXG4gICAgICA4OyAvLyBtZGF0IGhlYWRlclxuICAgICAgLy8gYXVkaW8gdHJhY2tzIHJlcXVpcmUgbGVzcyBtZXRhZGF0YVxuXG4gICAgICBpZiAodHJhY2sudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICB0cmFja0ZyYWdtZW50UnVuID0gdHJ1bih0cmFjaywgZGF0YU9mZnNldCk7XG4gICAgICAgIHJldHVybiBib3godHlwZXMudHJhZiwgdHJhY2tGcmFnbWVudEhlYWRlciwgdHJhY2tGcmFnbWVudERlY29kZVRpbWUsIHRyYWNrRnJhZ21lbnRSdW4pO1xuICAgICAgfSAvLyB2aWRlbyB0cmFja3Mgc2hvdWxkIGNvbnRhaW4gYW4gaW5kZXBlbmRlbnQgYW5kIGRpc3Bvc2FibGUgc2FtcGxlc1xuICAgICAgLy8gYm94IChzZHRwKVxuICAgICAgLy8gZ2VuZXJhdGUgb25lIGFuZCBhZGp1c3Qgb2Zmc2V0cyB0byBtYXRjaFxuXG5cbiAgICAgIHNhbXBsZURlcGVuZGVuY3lUYWJsZSA9IHNkdHAodHJhY2spO1xuICAgICAgdHJhY2tGcmFnbWVudFJ1biA9IHRydW4odHJhY2ssIHNhbXBsZURlcGVuZGVuY3lUYWJsZS5sZW5ndGggKyBkYXRhT2Zmc2V0KTtcbiAgICAgIHJldHVybiBib3godHlwZXMudHJhZiwgdHJhY2tGcmFnbWVudEhlYWRlciwgdHJhY2tGcmFnbWVudERlY29kZVRpbWUsIHRyYWNrRnJhZ21lbnRSdW4sIHNhbXBsZURlcGVuZGVuY3lUYWJsZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhIHRyYWNrIGJveC5cbiAgICAgKiBAcGFyYW0gdHJhY2sge29iamVjdH0gYSB0cmFjayBkZWZpbml0aW9uXG4gICAgICogQHJldHVybiB7VWludDhBcnJheX0gdGhlIHRyYWNrIGJveFxuICAgICAqL1xuXG5cbiAgICB0cmFrID0gZnVuY3Rpb24gdHJhayh0cmFjaykge1xuICAgICAgdHJhY2suZHVyYXRpb24gPSB0cmFjay5kdXJhdGlvbiB8fCAweGZmZmZmZmZmO1xuICAgICAgcmV0dXJuIGJveCh0eXBlcy50cmFrLCB0a2hkKHRyYWNrKSwgbWRpYSh0cmFjaykpO1xuICAgIH07XG5cbiAgICB0cmV4ID0gZnVuY3Rpb24gdHJleCh0cmFjaykge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAodHJhY2suaWQgJiAweEZGMDAwMDAwKSA+PiAyNCwgKHRyYWNrLmlkICYgMHhGRjAwMDApID4+IDE2LCAodHJhY2suaWQgJiAweEZGMDApID4+IDgsIHRyYWNrLmlkICYgMHhGRiwgLy8gdHJhY2tfSURcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGRlZmF1bHRfc2FtcGxlX2Rlc2NyaXB0aW9uX2luZGV4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9kdXJhdGlvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZGVmYXVsdF9zYW1wbGVfc2l6ZVxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMSAvLyBkZWZhdWx0X3NhbXBsZV9mbGFnc1xuICAgICAgXSk7IC8vIHRoZSBsYXN0IHR3byBieXRlcyBvZiBkZWZhdWx0X3NhbXBsZV9mbGFncyBpcyB0aGUgc2FtcGxlXG4gICAgICAvLyBkZWdyYWRhdGlvbiBwcmlvcml0eSwgYSBoaW50IGFib3V0IHRoZSBpbXBvcnRhbmNlIG9mIHRoaXMgc2FtcGxlXG4gICAgICAvLyByZWxhdGl2ZSB0byBvdGhlcnMuIExvd2VyIHRoZSBkZWdyYWRhdGlvbiBwcmlvcml0eSBmb3IgYWxsIHNhbXBsZVxuICAgICAgLy8gdHlwZXMgb3RoZXIgdGhhbiB2aWRlby5cblxuICAgICAgaWYgKHRyYWNrLnR5cGUgIT09ICd2aWRlbycpIHtcbiAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSA9IDB4MDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBib3godHlwZXMudHJleCwgcmVzdWx0KTtcbiAgICB9O1xuXG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhdWRpb1RydW4sIHZpZGVvVHJ1biwgdHJ1bkhlYWRlcjsgLy8gVGhpcyBtZXRob2QgYXNzdW1lcyBhbGwgc2FtcGxlcyBhcmUgdW5pZm9ybS4gVGhhdCBpcywgaWYgYVxuICAgICAgLy8gZHVyYXRpb24gaXMgcHJlc2VudCBmb3IgdGhlIGZpcnN0IHNhbXBsZSwgaXQgd2lsbCBiZSBwcmVzZW50IGZvclxuICAgICAgLy8gYWxsIHN1YnNlcXVlbnQgc2FtcGxlcy5cbiAgICAgIC8vIHNlZSBJU08vSUVDIDE0NDk2LTEyOjIwMTIsIFNlY3Rpb24gOC44LjguMVxuXG4gICAgICB0cnVuSGVhZGVyID0gZnVuY3Rpb24gdHJ1bkhlYWRlcihzYW1wbGVzLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uUHJlc2VudCA9IDAsXG4gICAgICAgICAgICBzaXplUHJlc2VudCA9IDAsXG4gICAgICAgICAgICBmbGFnc1ByZXNlbnQgPSAwLFxuICAgICAgICAgICAgY29tcG9zaXRpb25UaW1lT2Zmc2V0ID0gMDsgLy8gdHJ1biBmbGFnIGNvbnN0YW50c1xuXG4gICAgICAgIGlmIChzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChzYW1wbGVzWzBdLmR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uUHJlc2VudCA9IDB4MTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2FtcGxlc1swXS5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNpemVQcmVzZW50ID0gMHgyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzYW1wbGVzWzBdLmZsYWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZsYWdzUHJlc2VudCA9IDB4NDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2FtcGxlc1swXS5jb21wb3NpdGlvblRpbWVPZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tcG9zaXRpb25UaW1lT2Zmc2V0ID0gMHg4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAgIDB4MDAsIGR1cmF0aW9uUHJlc2VudCB8IHNpemVQcmVzZW50IHwgZmxhZ3NQcmVzZW50IHwgY29tcG9zaXRpb25UaW1lT2Zmc2V0LCAweDAxLCAvLyBmbGFnc1xuICAgICAgICAoc2FtcGxlcy5sZW5ndGggJiAweEZGMDAwMDAwKSA+Pj4gMjQsIChzYW1wbGVzLmxlbmd0aCAmIDB4RkYwMDAwKSA+Pj4gMTYsIChzYW1wbGVzLmxlbmd0aCAmIDB4RkYwMCkgPj4+IDgsIHNhbXBsZXMubGVuZ3RoICYgMHhGRiwgLy8gc2FtcGxlX2NvdW50XG4gICAgICAgIChvZmZzZXQgJiAweEZGMDAwMDAwKSA+Pj4gMjQsIChvZmZzZXQgJiAweEZGMDAwMCkgPj4+IDE2LCAob2Zmc2V0ICYgMHhGRjAwKSA+Pj4gOCwgb2Zmc2V0ICYgMHhGRiAvLyBkYXRhX29mZnNldFxuICAgICAgICBdO1xuICAgICAgfTtcblxuICAgICAgdmlkZW9UcnVuID0gZnVuY3Rpb24gdmlkZW9UcnVuKHRyYWNrLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGJ5dGVzT2ZmZXN0LCBieXRlcywgaGVhZGVyLCBzYW1wbGVzLCBzYW1wbGUsIGk7XG4gICAgICAgIHNhbXBsZXMgPSB0cmFjay5zYW1wbGVzIHx8IFtdO1xuICAgICAgICBvZmZzZXQgKz0gOCArIDEyICsgMTYgKiBzYW1wbGVzLmxlbmd0aDtcbiAgICAgICAgaGVhZGVyID0gdHJ1bkhlYWRlcihzYW1wbGVzLCBvZmZzZXQpO1xuICAgICAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGhlYWRlci5sZW5ndGggKyBzYW1wbGVzLmxlbmd0aCAqIDE2KTtcbiAgICAgICAgYnl0ZXMuc2V0KGhlYWRlcik7XG4gICAgICAgIGJ5dGVzT2ZmZXN0ID0gaGVhZGVyLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHNhbXBsZSA9IHNhbXBsZXNbaV07XG4gICAgICAgICAgYnl0ZXNbYnl0ZXNPZmZlc3QrK10gPSAoc2FtcGxlLmR1cmF0aW9uICYgMHhGRjAwMDAwMCkgPj4+IDI0O1xuICAgICAgICAgIGJ5dGVzW2J5dGVzT2ZmZXN0KytdID0gKHNhbXBsZS5kdXJhdGlvbiAmIDB4RkYwMDAwKSA+Pj4gMTY7XG4gICAgICAgICAgYnl0ZXNbYnl0ZXNPZmZlc3QrK10gPSAoc2FtcGxlLmR1cmF0aW9uICYgMHhGRjAwKSA+Pj4gODtcbiAgICAgICAgICBieXRlc1tieXRlc09mZmVzdCsrXSA9IHNhbXBsZS5kdXJhdGlvbiAmIDB4RkY7IC8vIHNhbXBsZV9kdXJhdGlvblxuXG4gICAgICAgICAgYnl0ZXNbYnl0ZXNPZmZlc3QrK10gPSAoc2FtcGxlLnNpemUgJiAweEZGMDAwMDAwKSA+Pj4gMjQ7XG4gICAgICAgICAgYnl0ZXNbYnl0ZXNPZmZlc3QrK10gPSAoc2FtcGxlLnNpemUgJiAweEZGMDAwMCkgPj4+IDE2O1xuICAgICAgICAgIGJ5dGVzW2J5dGVzT2ZmZXN0KytdID0gKHNhbXBsZS5zaXplICYgMHhGRjAwKSA+Pj4gODtcbiAgICAgICAgICBieXRlc1tieXRlc09mZmVzdCsrXSA9IHNhbXBsZS5zaXplICYgMHhGRjsgLy8gc2FtcGxlX3NpemVcblxuICAgICAgICAgIGJ5dGVzW2J5dGVzT2ZmZXN0KytdID0gc2FtcGxlLmZsYWdzLmlzTGVhZGluZyA8PCAyIHwgc2FtcGxlLmZsYWdzLmRlcGVuZHNPbjtcbiAgICAgICAgICBieXRlc1tieXRlc09mZmVzdCsrXSA9IHNhbXBsZS5mbGFncy5pc0RlcGVuZGVkT24gPDwgNiB8IHNhbXBsZS5mbGFncy5oYXNSZWR1bmRhbmN5IDw8IDQgfCBzYW1wbGUuZmxhZ3MucGFkZGluZ1ZhbHVlIDw8IDEgfCBzYW1wbGUuZmxhZ3MuaXNOb25TeW5jU2FtcGxlO1xuICAgICAgICAgIGJ5dGVzW2J5dGVzT2ZmZXN0KytdID0gc2FtcGxlLmZsYWdzLmRlZ3JhZGF0aW9uUHJpb3JpdHkgJiAweEYwIDw8IDg7XG4gICAgICAgICAgYnl0ZXNbYnl0ZXNPZmZlc3QrK10gPSBzYW1wbGUuZmxhZ3MuZGVncmFkYXRpb25Qcmlvcml0eSAmIDB4MEY7IC8vIHNhbXBsZV9mbGFnc1xuXG4gICAgICAgICAgYnl0ZXNbYnl0ZXNPZmZlc3QrK10gPSAoc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldCAmIDB4RkYwMDAwMDApID4+PiAyNDtcbiAgICAgICAgICBieXRlc1tieXRlc09mZmVzdCsrXSA9IChzYW1wbGUuY29tcG9zaXRpb25UaW1lT2Zmc2V0ICYgMHhGRjAwMDApID4+PiAxNjtcbiAgICAgICAgICBieXRlc1tieXRlc09mZmVzdCsrXSA9IChzYW1wbGUuY29tcG9zaXRpb25UaW1lT2Zmc2V0ICYgMHhGRjAwKSA+Pj4gODtcbiAgICAgICAgICBieXRlc1tieXRlc09mZmVzdCsrXSA9IHNhbXBsZS5jb21wb3NpdGlvblRpbWVPZmZzZXQgJiAweEZGOyAvLyBzYW1wbGVfY29tcG9zaXRpb25fdGltZV9vZmZzZXRcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBib3godHlwZXMudHJ1biwgYnl0ZXMpO1xuICAgICAgfTtcblxuICAgICAgYXVkaW9UcnVuID0gZnVuY3Rpb24gYXVkaW9UcnVuKHRyYWNrLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGJ5dGVzLCBieXRlc09mZmVzdCwgaGVhZGVyLCBzYW1wbGVzLCBzYW1wbGUsIGk7XG4gICAgICAgIHNhbXBsZXMgPSB0cmFjay5zYW1wbGVzIHx8IFtdO1xuICAgICAgICBvZmZzZXQgKz0gOCArIDEyICsgOCAqIHNhbXBsZXMubGVuZ3RoO1xuICAgICAgICBoZWFkZXIgPSB0cnVuSGVhZGVyKHNhbXBsZXMsIG9mZnNldCk7XG4gICAgICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoaGVhZGVyLmxlbmd0aCArIHNhbXBsZXMubGVuZ3RoICogOCk7XG4gICAgICAgIGJ5dGVzLnNldChoZWFkZXIpO1xuICAgICAgICBieXRlc09mZmVzdCA9IGhlYWRlci5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNhbXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzYW1wbGUgPSBzYW1wbGVzW2ldO1xuICAgICAgICAgIGJ5dGVzW2J5dGVzT2ZmZXN0KytdID0gKHNhbXBsZS5kdXJhdGlvbiAmIDB4RkYwMDAwMDApID4+PiAyNDtcbiAgICAgICAgICBieXRlc1tieXRlc09mZmVzdCsrXSA9IChzYW1wbGUuZHVyYXRpb24gJiAweEZGMDAwMCkgPj4+IDE2O1xuICAgICAgICAgIGJ5dGVzW2J5dGVzT2ZmZXN0KytdID0gKHNhbXBsZS5kdXJhdGlvbiAmIDB4RkYwMCkgPj4+IDg7XG4gICAgICAgICAgYnl0ZXNbYnl0ZXNPZmZlc3QrK10gPSBzYW1wbGUuZHVyYXRpb24gJiAweEZGOyAvLyBzYW1wbGVfZHVyYXRpb25cblxuICAgICAgICAgIGJ5dGVzW2J5dGVzT2ZmZXN0KytdID0gKHNhbXBsZS5zaXplICYgMHhGRjAwMDAwMCkgPj4+IDI0O1xuICAgICAgICAgIGJ5dGVzW2J5dGVzT2ZmZXN0KytdID0gKHNhbXBsZS5zaXplICYgMHhGRjAwMDApID4+PiAxNjtcbiAgICAgICAgICBieXRlc1tieXRlc09mZmVzdCsrXSA9IChzYW1wbGUuc2l6ZSAmIDB4RkYwMCkgPj4+IDg7XG4gICAgICAgICAgYnl0ZXNbYnl0ZXNPZmZlc3QrK10gPSBzYW1wbGUuc2l6ZSAmIDB4RkY7IC8vIHNhbXBsZV9zaXplXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm94KHR5cGVzLnRydW4sIGJ5dGVzKTtcbiAgICAgIH07XG5cbiAgICAgIHRydW4gPSBmdW5jdGlvbiB0cnVuKHRyYWNrLCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKHRyYWNrLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICByZXR1cm4gYXVkaW9UcnVuKHRyYWNrLCBvZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZpZGVvVHJ1bih0cmFjaywgb2Zmc2V0KTtcbiAgICAgIH07XG4gICAgfSkoKTtcblxuICAgIHZhciBtcDRHZW5lcmF0b3IgPSB7XG4gICAgICBmdHlwOiBmdHlwLFxuICAgICAgbWRhdDogbWRhdCxcbiAgICAgIG1vb2Y6IG1vb2YsXG4gICAgICBtb292OiBtb292LFxuICAgICAgaW5pdFNlZ21lbnQ6IGZ1bmN0aW9uIGluaXRTZWdtZW50KHRyYWNrcykge1xuICAgICAgICB2YXIgZmlsZVR5cGUgPSBmdHlwKCksXG4gICAgICAgICAgICBtb3ZpZSA9IG1vb3YodHJhY2tzKSxcbiAgICAgICAgICAgIHJlc3VsdDtcbiAgICAgICAgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoZmlsZVR5cGUuYnl0ZUxlbmd0aCArIG1vdmllLmJ5dGVMZW5ndGgpO1xuICAgICAgICByZXN1bHQuc2V0KGZpbGVUeXBlKTtcbiAgICAgICAgcmVzdWx0LnNldChtb3ZpZSwgZmlsZVR5cGUuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKi9cbiAgICAvLyBDb252ZXJ0IGFuIGFycmF5IG9mIG5hbCB1bml0cyBpbnRvIGFuIGFycmF5IG9mIGZyYW1lcyB3aXRoIGVhY2ggZnJhbWUgYmVpbmdcbiAgICAvLyBjb21wb3NlZCBvZiB0aGUgbmFsIHVuaXRzIHRoYXQgbWFrZSB1cCB0aGF0IGZyYW1lXG4gICAgLy8gQWxzbyBrZWVwIHRyYWNrIG9mIGN1bW11bGF0aXZlIGRhdGEgYWJvdXQgdGhlIGZyYW1lIGZyb20gdGhlIG5hbCB1bml0cyBzdWNoXG4gICAgLy8gYXMgdGhlIGZyYW1lIGR1cmF0aW9uLCBzdGFydGluZyBwdHMsIGV0Yy5cblxuICAgIHZhciBncm91cE5hbHNJbnRvRnJhbWVzID0gZnVuY3Rpb24gZ3JvdXBOYWxzSW50b0ZyYW1lcyhuYWxVbml0cykge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgY3VycmVudE5hbCxcbiAgICAgICAgICBjdXJyZW50RnJhbWUgPSBbXSxcbiAgICAgICAgICBmcmFtZXMgPSBbXTsgLy8gVE9ETyBhZGRlZCBmb3IgTEhMUywgbWFrZSBzdXJlIHRoaXMgaXMgT0tcblxuICAgICAgZnJhbWVzLmJ5dGVMZW5ndGggPSAwO1xuICAgICAgZnJhbWVzLm5hbENvdW50ID0gMDtcbiAgICAgIGZyYW1lcy5kdXJhdGlvbiA9IDA7XG4gICAgICBjdXJyZW50RnJhbWUuYnl0ZUxlbmd0aCA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuYWxVbml0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJyZW50TmFsID0gbmFsVW5pdHNbaV07IC8vIFNwbGl0IG9uICdhdWQnLXR5cGUgbmFsIHVuaXRzXG5cbiAgICAgICAgaWYgKGN1cnJlbnROYWwubmFsVW5pdFR5cGUgPT09ICdhY2Nlc3NfdW5pdF9kZWxpbWl0ZXJfcmJzcCcpIHtcbiAgICAgICAgICAvLyBTaW5jZSB0aGUgdmVyeSBmaXJzdCBuYWwgdW5pdCBpcyBleHBlY3RlZCB0byBiZSBhbiBBVURcbiAgICAgICAgICAvLyBvbmx5IHB1c2ggdG8gdGhlIGZyYW1lcyBhcnJheSB3aGVuIGN1cnJlbnRGcmFtZSBpcyBub3QgZW1wdHlcbiAgICAgICAgICBpZiAoY3VycmVudEZyYW1lLmxlbmd0aCkge1xuICAgICAgICAgICAgY3VycmVudEZyYW1lLmR1cmF0aW9uID0gY3VycmVudE5hbC5kdHMgLSBjdXJyZW50RnJhbWUuZHRzOyAvLyBUT0RPIGFkZGVkIGZvciBMSExTLCBtYWtlIHN1cmUgdGhpcyBpcyBPS1xuXG4gICAgICAgICAgICBmcmFtZXMuYnl0ZUxlbmd0aCArPSBjdXJyZW50RnJhbWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIGZyYW1lcy5uYWxDb3VudCArPSBjdXJyZW50RnJhbWUubGVuZ3RoO1xuICAgICAgICAgICAgZnJhbWVzLmR1cmF0aW9uICs9IGN1cnJlbnRGcmFtZS5kdXJhdGlvbjtcbiAgICAgICAgICAgIGZyYW1lcy5wdXNoKGN1cnJlbnRGcmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudEZyYW1lID0gW2N1cnJlbnROYWxdO1xuICAgICAgICAgIGN1cnJlbnRGcmFtZS5ieXRlTGVuZ3RoID0gY3VycmVudE5hbC5kYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgY3VycmVudEZyYW1lLnB0cyA9IGN1cnJlbnROYWwucHRzO1xuICAgICAgICAgIGN1cnJlbnRGcmFtZS5kdHMgPSBjdXJyZW50TmFsLmR0cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTcGVjaWZpY2FsbHkgZmxhZyBrZXkgZnJhbWVzIGZvciBlYXNlIG9mIHVzZSBsYXRlclxuICAgICAgICAgIGlmIChjdXJyZW50TmFsLm5hbFVuaXRUeXBlID09PSAnc2xpY2VfbGF5ZXJfd2l0aG91dF9wYXJ0aXRpb25pbmdfcmJzcF9pZHInKSB7XG4gICAgICAgICAgICBjdXJyZW50RnJhbWUua2V5RnJhbWUgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRGcmFtZS5kdXJhdGlvbiA9IGN1cnJlbnROYWwuZHRzIC0gY3VycmVudEZyYW1lLmR0cztcbiAgICAgICAgICBjdXJyZW50RnJhbWUuYnl0ZUxlbmd0aCArPSBjdXJyZW50TmFsLmRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBjdXJyZW50RnJhbWUucHVzaChjdXJyZW50TmFsKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBGb3IgdGhlIGxhc3QgZnJhbWUsIHVzZSB0aGUgZHVyYXRpb24gb2YgdGhlIHByZXZpb3VzIGZyYW1lIGlmIHdlXG4gICAgICAvLyBoYXZlIG5vdGhpbmcgYmV0dGVyIHRvIGdvIG9uXG5cblxuICAgICAgaWYgKGZyYW1lcy5sZW5ndGggJiYgKCFjdXJyZW50RnJhbWUuZHVyYXRpb24gfHwgY3VycmVudEZyYW1lLmR1cmF0aW9uIDw9IDApKSB7XG4gICAgICAgIGN1cnJlbnRGcmFtZS5kdXJhdGlvbiA9IGZyYW1lc1tmcmFtZXMubGVuZ3RoIC0gMV0uZHVyYXRpb247XG4gICAgICB9IC8vIFB1c2ggdGhlIGZpbmFsIGZyYW1lXG4gICAgICAvLyBUT0RPIGFkZGVkIGZvciBMSExTLCBtYWtlIHN1cmUgdGhpcyBpcyBPS1xuXG5cbiAgICAgIGZyYW1lcy5ieXRlTGVuZ3RoICs9IGN1cnJlbnRGcmFtZS5ieXRlTGVuZ3RoO1xuICAgICAgZnJhbWVzLm5hbENvdW50ICs9IGN1cnJlbnRGcmFtZS5sZW5ndGg7XG4gICAgICBmcmFtZXMuZHVyYXRpb24gKz0gY3VycmVudEZyYW1lLmR1cmF0aW9uO1xuICAgICAgZnJhbWVzLnB1c2goY3VycmVudEZyYW1lKTtcbiAgICAgIHJldHVybiBmcmFtZXM7XG4gICAgfTsgLy8gQ29udmVydCBhbiBhcnJheSBvZiBmcmFtZXMgaW50byBhbiBhcnJheSBvZiBHb3Agd2l0aCBlYWNoIEdvcCBiZWluZyBjb21wb3NlZFxuICAgIC8vIG9mIHRoZSBmcmFtZXMgdGhhdCBtYWtlIHVwIHRoYXQgR29wXG4gICAgLy8gQWxzbyBrZWVwIHRyYWNrIG9mIGN1bW11bGF0aXZlIGRhdGEgYWJvdXQgdGhlIEdvcCBmcm9tIHRoZSBmcmFtZXMgc3VjaCBhcyB0aGVcbiAgICAvLyBHb3AgZHVyYXRpb24sIHN0YXJ0aW5nIHB0cywgZXRjLlxuXG5cbiAgICB2YXIgZ3JvdXBGcmFtZXNJbnRvR29wcyA9IGZ1bmN0aW9uIGdyb3VwRnJhbWVzSW50b0dvcHMoZnJhbWVzKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBjdXJyZW50RnJhbWUsXG4gICAgICAgICAgY3VycmVudEdvcCA9IFtdLFxuICAgICAgICAgIGdvcHMgPSBbXTsgLy8gV2UgbXVzdCBwcmUtc2V0IHNvbWUgb2YgdGhlIHZhbHVlcyBvbiB0aGUgR29wIHNpbmNlIHdlXG4gICAgICAvLyBrZWVwIHJ1bm5pbmcgdG90YWxzIG9mIHRoZXNlIHZhbHVlc1xuXG4gICAgICBjdXJyZW50R29wLmJ5dGVMZW5ndGggPSAwO1xuICAgICAgY3VycmVudEdvcC5uYWxDb3VudCA9IDA7XG4gICAgICBjdXJyZW50R29wLmR1cmF0aW9uID0gMDtcbiAgICAgIGN1cnJlbnRHb3AucHRzID0gZnJhbWVzWzBdLnB0cztcbiAgICAgIGN1cnJlbnRHb3AuZHRzID0gZnJhbWVzWzBdLmR0czsgLy8gc3RvcmUgc29tZSBtZXRhZGF0YSBhYm91dCBhbGwgdGhlIEdvcHNcblxuICAgICAgZ29wcy5ieXRlTGVuZ3RoID0gMDtcbiAgICAgIGdvcHMubmFsQ291bnQgPSAwO1xuICAgICAgZ29wcy5kdXJhdGlvbiA9IDA7XG4gICAgICBnb3BzLnB0cyA9IGZyYW1lc1swXS5wdHM7XG4gICAgICBnb3BzLmR0cyA9IGZyYW1lc1swXS5kdHM7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmcmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3VycmVudEZyYW1lID0gZnJhbWVzW2ldO1xuXG4gICAgICAgIGlmIChjdXJyZW50RnJhbWUua2V5RnJhbWUpIHtcbiAgICAgICAgICAvLyBTaW5jZSB0aGUgdmVyeSBmaXJzdCBmcmFtZSBpcyBleHBlY3RlZCB0byBiZSBhbiBrZXlmcmFtZVxuICAgICAgICAgIC8vIG9ubHkgcHVzaCB0byB0aGUgZ29wcyBhcnJheSB3aGVuIGN1cnJlbnRHb3AgaXMgbm90IGVtcHR5XG4gICAgICAgICAgaWYgKGN1cnJlbnRHb3AubGVuZ3RoKSB7XG4gICAgICAgICAgICBnb3BzLnB1c2goY3VycmVudEdvcCk7XG4gICAgICAgICAgICBnb3BzLmJ5dGVMZW5ndGggKz0gY3VycmVudEdvcC5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgZ29wcy5uYWxDb3VudCArPSBjdXJyZW50R29wLm5hbENvdW50O1xuICAgICAgICAgICAgZ29wcy5kdXJhdGlvbiArPSBjdXJyZW50R29wLmR1cmF0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRHb3AgPSBbY3VycmVudEZyYW1lXTtcbiAgICAgICAgICBjdXJyZW50R29wLm5hbENvdW50ID0gY3VycmVudEZyYW1lLmxlbmd0aDtcbiAgICAgICAgICBjdXJyZW50R29wLmJ5dGVMZW5ndGggPSBjdXJyZW50RnJhbWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBjdXJyZW50R29wLnB0cyA9IGN1cnJlbnRGcmFtZS5wdHM7XG4gICAgICAgICAgY3VycmVudEdvcC5kdHMgPSBjdXJyZW50RnJhbWUuZHRzO1xuICAgICAgICAgIGN1cnJlbnRHb3AuZHVyYXRpb24gPSBjdXJyZW50RnJhbWUuZHVyYXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudEdvcC5kdXJhdGlvbiArPSBjdXJyZW50RnJhbWUuZHVyYXRpb247XG4gICAgICAgICAgY3VycmVudEdvcC5uYWxDb3VudCArPSBjdXJyZW50RnJhbWUubGVuZ3RoO1xuICAgICAgICAgIGN1cnJlbnRHb3AuYnl0ZUxlbmd0aCArPSBjdXJyZW50RnJhbWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBjdXJyZW50R29wLnB1c2goY3VycmVudEZyYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZ29wcy5sZW5ndGggJiYgY3VycmVudEdvcC5kdXJhdGlvbiA8PSAwKSB7XG4gICAgICAgIGN1cnJlbnRHb3AuZHVyYXRpb24gPSBnb3BzW2dvcHMubGVuZ3RoIC0gMV0uZHVyYXRpb247XG4gICAgICB9XG5cbiAgICAgIGdvcHMuYnl0ZUxlbmd0aCArPSBjdXJyZW50R29wLmJ5dGVMZW5ndGg7XG4gICAgICBnb3BzLm5hbENvdW50ICs9IGN1cnJlbnRHb3AubmFsQ291bnQ7XG4gICAgICBnb3BzLmR1cmF0aW9uICs9IGN1cnJlbnRHb3AuZHVyYXRpb247IC8vIHB1c2ggdGhlIGZpbmFsIEdvcFxuXG4gICAgICBnb3BzLnB1c2goY3VycmVudEdvcCk7XG4gICAgICByZXR1cm4gZ29wcztcbiAgICB9O1xuICAgIC8qXG4gICAgICogU2VhcmNoIGZvciB0aGUgZmlyc3Qga2V5ZnJhbWUgaW4gdGhlIEdPUHMgYW5kIHRocm93IGF3YXkgYWxsIGZyYW1lc1xuICAgICAqIHVudGlsIHRoYXQga2V5ZnJhbWUuIFRoZW4gZXh0ZW5kIHRoZSBkdXJhdGlvbiBvZiB0aGUgcHVsbGVkIGtleWZyYW1lXG4gICAgICogYW5kIHB1bGwgdGhlIFBUUyBhbmQgRFRTIG9mIHRoZSBrZXlmcmFtZSBzbyB0aGF0IGl0IGNvdmVycyB0aGUgdGltZVxuICAgICAqIHJhbmdlIG9mIHRoZSBmcmFtZXMgdGhhdCB3ZXJlIGRpc3Bvc2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gZ29wcyB2aWRlbyBHT1BzXG4gICAgICogQHJldHVybnMge0FycmF5fSBtb2RpZmllZCB2aWRlbyBHT1BzXG4gICAgICovXG5cblxuICAgIHZhciBleHRlbmRGaXJzdEtleUZyYW1lID0gZnVuY3Rpb24gZXh0ZW5kRmlyc3RLZXlGcmFtZShnb3BzKSB7XG4gICAgICB2YXIgY3VycmVudEdvcDtcblxuICAgICAgaWYgKCFnb3BzWzBdWzBdLmtleUZyYW1lICYmIGdvcHMubGVuZ3RoID4gMSkge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IEdPUFxuICAgICAgICBjdXJyZW50R29wID0gZ29wcy5zaGlmdCgpO1xuICAgICAgICBnb3BzLmJ5dGVMZW5ndGggLT0gY3VycmVudEdvcC5ieXRlTGVuZ3RoO1xuICAgICAgICBnb3BzLm5hbENvdW50IC09IGN1cnJlbnRHb3AubmFsQ291bnQ7IC8vIEV4dGVuZCB0aGUgZmlyc3QgZnJhbWUgb2Ygd2hhdCBpcyBub3cgdGhlXG4gICAgICAgIC8vIGZpcnN0IGdvcCB0byBjb3ZlciB0aGUgdGltZSBwZXJpb2Qgb2YgdGhlXG4gICAgICAgIC8vIGZyYW1lcyB3ZSBqdXN0IHJlbW92ZWRcblxuICAgICAgICBnb3BzWzBdWzBdLmR0cyA9IGN1cnJlbnRHb3AuZHRzO1xuICAgICAgICBnb3BzWzBdWzBdLnB0cyA9IGN1cnJlbnRHb3AucHRzO1xuICAgICAgICBnb3BzWzBdWzBdLmR1cmF0aW9uICs9IGN1cnJlbnRHb3AuZHVyYXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnb3BzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBzYW1wbGUgb2JqZWN0XG4gICAgICogc2VlIElTTy9JRUMgMTQ0OTYtMTI6MjAxMiwgc2VjdGlvbiA4LjYuNC4zXG4gICAgICovXG5cblxuICAgIHZhciBjcmVhdGVEZWZhdWx0U2FtcGxlID0gZnVuY3Rpb24gY3JlYXRlRGVmYXVsdFNhbXBsZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNpemU6IDAsXG4gICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogMSxcbiAgICAgICAgICBpc0RlcGVuZGVkT246IDAsXG4gICAgICAgICAgaGFzUmVkdW5kYW5jeTogMCxcbiAgICAgICAgICBkZWdyYWRhdGlvblByaW9yaXR5OiAwLFxuICAgICAgICAgIGlzTm9uU3luY1NhbXBsZTogMVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgLypcbiAgICAgKiBDb2xsYXRlcyBpbmZvcm1hdGlvbiBmcm9tIGEgdmlkZW8gZnJhbWUgaW50byBhbiBvYmplY3QgZm9yIGV2ZW50dWFsXG4gICAgICogZW50cnkgaW50byBhbiBNUDQgc2FtcGxlIHRhYmxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGZyYW1lIHRoZSB2aWRlbyBmcmFtZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkYXRhT2Zmc2V0IHRoZSBieXRlIG9mZnNldCB0byBwb3NpdGlvbiB0aGUgc2FtcGxlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyBzYW1wbGUgdGFibGUgaW5mbyBmb3IgYSBmcmFtZVxuICAgICAqL1xuXG5cbiAgICB2YXIgc2FtcGxlRm9yRnJhbWUgPSBmdW5jdGlvbiBzYW1wbGVGb3JGcmFtZShmcmFtZSwgZGF0YU9mZnNldCkge1xuICAgICAgdmFyIHNhbXBsZSA9IGNyZWF0ZURlZmF1bHRTYW1wbGUoKTtcbiAgICAgIHNhbXBsZS5kYXRhT2Zmc2V0ID0gZGF0YU9mZnNldDtcbiAgICAgIHNhbXBsZS5jb21wb3NpdGlvblRpbWVPZmZzZXQgPSBmcmFtZS5wdHMgLSBmcmFtZS5kdHM7XG4gICAgICBzYW1wbGUuZHVyYXRpb24gPSBmcmFtZS5kdXJhdGlvbjtcbiAgICAgIHNhbXBsZS5zaXplID0gNCAqIGZyYW1lLmxlbmd0aDsgLy8gU3BhY2UgZm9yIG5hbCB1bml0IHNpemVcblxuICAgICAgc2FtcGxlLnNpemUgKz0gZnJhbWUuYnl0ZUxlbmd0aDtcblxuICAgICAgaWYgKGZyYW1lLmtleUZyYW1lKSB7XG4gICAgICAgIHNhbXBsZS5mbGFncy5kZXBlbmRzT24gPSAyO1xuICAgICAgICBzYW1wbGUuZmxhZ3MuaXNOb25TeW5jU2FtcGxlID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNhbXBsZTtcbiAgICB9OyAvLyBnZW5lcmF0ZSB0aGUgdHJhY2sncyBzYW1wbGUgdGFibGUgZnJvbSBhbiBhcnJheSBvZiBnb3BzXG5cblxuICAgIHZhciBnZW5lcmF0ZVNhbXBsZVRhYmxlID0gZnVuY3Rpb24gZ2VuZXJhdGVTYW1wbGVUYWJsZShnb3BzLCBiYXNlRGF0YU9mZnNldCkge1xuICAgICAgdmFyIGgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBzYW1wbGUsXG4gICAgICAgICAgY3VycmVudEdvcCxcbiAgICAgICAgICBjdXJyZW50RnJhbWUsXG4gICAgICAgICAgZGF0YU9mZnNldCA9IGJhc2VEYXRhT2Zmc2V0IHx8IDAsXG4gICAgICAgICAgc2FtcGxlcyA9IFtdO1xuXG4gICAgICBmb3IgKGggPSAwOyBoIDwgZ29wcy5sZW5ndGg7IGgrKykge1xuICAgICAgICBjdXJyZW50R29wID0gZ29wc1toXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY3VycmVudEdvcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGN1cnJlbnRGcmFtZSA9IGN1cnJlbnRHb3BbaV07XG4gICAgICAgICAgc2FtcGxlID0gc2FtcGxlRm9yRnJhbWUoY3VycmVudEZyYW1lLCBkYXRhT2Zmc2V0KTtcbiAgICAgICAgICBkYXRhT2Zmc2V0ICs9IHNhbXBsZS5zaXplO1xuICAgICAgICAgIHNhbXBsZXMucHVzaChzYW1wbGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzYW1wbGVzO1xuICAgIH07IC8vIGdlbmVyYXRlIHRoZSB0cmFjaydzIHJhdyBtZGF0IGRhdGEgZnJvbSBhbiBhcnJheSBvZiBnb3BzXG5cblxuICAgIHZhciBjb25jYXRlbmF0ZU5hbERhdGEgPSBmdW5jdGlvbiBjb25jYXRlbmF0ZU5hbERhdGEoZ29wcykge1xuICAgICAgdmFyIGgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGN1cnJlbnRHb3AsXG4gICAgICAgICAgY3VycmVudEZyYW1lLFxuICAgICAgICAgIGN1cnJlbnROYWwsXG4gICAgICAgICAgZGF0YU9mZnNldCA9IDAsXG4gICAgICAgICAgbmFsc0J5dGVMZW5ndGggPSBnb3BzLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgbnVtYmVyT2ZOYWxzID0gZ29wcy5uYWxDb3VudCxcbiAgICAgICAgICB0b3RhbEJ5dGVMZW5ndGggPSBuYWxzQnl0ZUxlbmd0aCArIDQgKiBudW1iZXJPZk5hbHMsXG4gICAgICAgICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KHRvdGFsQnl0ZUxlbmd0aCksXG4gICAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlcik7IC8vIEZvciBlYWNoIEdvcC4uXG5cbiAgICAgIGZvciAoaCA9IDA7IGggPCBnb3BzLmxlbmd0aDsgaCsrKSB7XG4gICAgICAgIGN1cnJlbnRHb3AgPSBnb3BzW2hdOyAvLyBGb3IgZWFjaCBGcmFtZS4uXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGN1cnJlbnRHb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjdXJyZW50RnJhbWUgPSBjdXJyZW50R29wW2ldOyAvLyBGb3IgZWFjaCBOQUwuLlxuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGN1cnJlbnRGcmFtZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY3VycmVudE5hbCA9IGN1cnJlbnRGcmFtZVtqXTtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKGRhdGFPZmZzZXQsIGN1cnJlbnROYWwuZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIGRhdGFPZmZzZXQgKz0gNDtcbiAgICAgICAgICAgIGRhdGEuc2V0KGN1cnJlbnROYWwuZGF0YSwgZGF0YU9mZnNldCk7XG4gICAgICAgICAgICBkYXRhT2Zmc2V0ICs9IGN1cnJlbnROYWwuZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9OyAvLyBnZW5lcmF0ZSB0aGUgdHJhY2sncyBzYW1wbGUgdGFibGUgZnJvbSBhIGZyYW1lXG5cblxuICAgIHZhciBnZW5lcmF0ZVNhbXBsZVRhYmxlRm9yRnJhbWUgPSBmdW5jdGlvbiBnZW5lcmF0ZVNhbXBsZVRhYmxlRm9yRnJhbWUoZnJhbWUsIGJhc2VEYXRhT2Zmc2V0KSB7XG4gICAgICB2YXIgc2FtcGxlLFxuICAgICAgICAgIGRhdGFPZmZzZXQgPSBiYXNlRGF0YU9mZnNldCB8fCAwLFxuICAgICAgICAgIHNhbXBsZXMgPSBbXTtcbiAgICAgIHNhbXBsZSA9IHNhbXBsZUZvckZyYW1lKGZyYW1lLCBkYXRhT2Zmc2V0KTtcbiAgICAgIHNhbXBsZXMucHVzaChzYW1wbGUpO1xuICAgICAgcmV0dXJuIHNhbXBsZXM7XG4gICAgfTsgLy8gZ2VuZXJhdGUgdGhlIHRyYWNrJ3MgcmF3IG1kYXQgZGF0YSBmcm9tIGEgZnJhbWVcblxuXG4gICAgdmFyIGNvbmNhdGVuYXRlTmFsRGF0YUZvckZyYW1lID0gZnVuY3Rpb24gY29uY2F0ZW5hdGVOYWxEYXRhRm9yRnJhbWUoZnJhbWUpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIGN1cnJlbnROYWwsXG4gICAgICAgICAgZGF0YU9mZnNldCA9IDAsXG4gICAgICAgICAgbmFsc0J5dGVMZW5ndGggPSBmcmFtZS5ieXRlTGVuZ3RoLFxuICAgICAgICAgIG51bWJlck9mTmFscyA9IGZyYW1lLmxlbmd0aCxcbiAgICAgICAgICB0b3RhbEJ5dGVMZW5ndGggPSBuYWxzQnl0ZUxlbmd0aCArIDQgKiBudW1iZXJPZk5hbHMsXG4gICAgICAgICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KHRvdGFsQnl0ZUxlbmd0aCksXG4gICAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlcik7IC8vIEZvciBlYWNoIE5BTC4uXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmcmFtZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJyZW50TmFsID0gZnJhbWVbaV07XG4gICAgICAgIHZpZXcuc2V0VWludDMyKGRhdGFPZmZzZXQsIGN1cnJlbnROYWwuZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgZGF0YU9mZnNldCArPSA0O1xuICAgICAgICBkYXRhLnNldChjdXJyZW50TmFsLmRhdGEsIGRhdGFPZmZzZXQpO1xuICAgICAgICBkYXRhT2Zmc2V0ICs9IGN1cnJlbnROYWwuZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9O1xuXG4gICAgdmFyIGZyYW1lVXRpbHMgPSB7XG4gICAgICBncm91cE5hbHNJbnRvRnJhbWVzOiBncm91cE5hbHNJbnRvRnJhbWVzLFxuICAgICAgZ3JvdXBGcmFtZXNJbnRvR29wczogZ3JvdXBGcmFtZXNJbnRvR29wcyxcbiAgICAgIGV4dGVuZEZpcnN0S2V5RnJhbWU6IGV4dGVuZEZpcnN0S2V5RnJhbWUsXG4gICAgICBnZW5lcmF0ZVNhbXBsZVRhYmxlOiBnZW5lcmF0ZVNhbXBsZVRhYmxlLFxuICAgICAgY29uY2F0ZW5hdGVOYWxEYXRhOiBjb25jYXRlbmF0ZU5hbERhdGEsXG4gICAgICBnZW5lcmF0ZVNhbXBsZVRhYmxlRm9yRnJhbWU6IGdlbmVyYXRlU2FtcGxlVGFibGVGb3JGcmFtZSxcbiAgICAgIGNvbmNhdGVuYXRlTmFsRGF0YUZvckZyYW1lOiBjb25jYXRlbmF0ZU5hbERhdGFGb3JGcmFtZVxuICAgIH07XG4gICAgLyoqXG4gICAgICogbXV4LmpzXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAgICAgKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gICAgICovXG5cbiAgICB2YXIgaGlnaFByZWZpeCA9IFszMywgMTYsIDUsIDMyLCAxNjQsIDI3XTtcbiAgICB2YXIgbG93UHJlZml4ID0gWzMzLCA2NSwgMTA4LCA4NCwgMSwgMiwgNCwgOCwgMTY4LCAyLCA0LCA4LCAxNywgMTkxLCAyNTJdO1xuXG4gICAgdmFyIHplcm9GaWxsID0gZnVuY3Rpb24gemVyb0ZpbGwoY291bnQpIHtcbiAgICAgIHZhciBhID0gW107XG5cbiAgICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICAgIGEucHVzaCgwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGE7XG4gICAgfTtcblxuICAgIHZhciBtYWtlVGFibGUgPSBmdW5jdGlvbiBtYWtlVGFibGUobWV0YVRhYmxlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMobWV0YVRhYmxlKS5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gICAgICAgIG9ialtrZXldID0gbmV3IFVpbnQ4QXJyYXkobWV0YVRhYmxlW2tleV0ucmVkdWNlKGZ1bmN0aW9uIChhcnIsIHBhcnQpIHtcbiAgICAgICAgICByZXR1cm4gYXJyLmNvbmNhdChwYXJ0KTtcbiAgICAgICAgfSwgW10pKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0sIHt9KTtcbiAgICB9O1xuXG4gICAgdmFyIHNpbGVuY2U7XG5cbiAgICB2YXIgc2lsZW5jZV8xID0gZnVuY3Rpb24gc2lsZW5jZV8xKCkge1xuICAgICAgaWYgKCFzaWxlbmNlKSB7XG4gICAgICAgIC8vIEZyYW1lcy1vZi1zaWxlbmNlIHRvIHVzZSBmb3IgZmlsbGluZyBpbiBtaXNzaW5nIEFBQyBmcmFtZXNcbiAgICAgICAgdmFyIGNvbmVPZlNpbGVuY2UgPSB7XG4gICAgICAgICAgOTYwMDA6IFtoaWdoUHJlZml4LCBbMjI3LCA2NF0sIHplcm9GaWxsKDE1NCksIFs1Nl1dLFxuICAgICAgICAgIDg4MjAwOiBbaGlnaFByZWZpeCwgWzIzMV0sIHplcm9GaWxsKDE3MCksIFs1Nl1dLFxuICAgICAgICAgIDY0MDAwOiBbaGlnaFByZWZpeCwgWzI0OCwgMTkyXSwgemVyb0ZpbGwoMjQwKSwgWzU2XV0sXG4gICAgICAgICAgNDgwMDA6IFtoaWdoUHJlZml4LCBbMjU1LCAxOTJdLCB6ZXJvRmlsbCgyNjgpLCBbNTUsIDE0OCwgMTI4XSwgemVyb0ZpbGwoNTQpLCBbMTEyXV0sXG4gICAgICAgICAgNDQxMDA6IFtoaWdoUHJlZml4LCBbMjU1LCAxOTJdLCB6ZXJvRmlsbCgyNjgpLCBbNTUsIDE2MywgMTI4XSwgemVyb0ZpbGwoODQpLCBbMTEyXV0sXG4gICAgICAgICAgMzIwMDA6IFtoaWdoUHJlZml4LCBbMjU1LCAxOTJdLCB6ZXJvRmlsbCgyNjgpLCBbNTUsIDIzNF0sIHplcm9GaWxsKDIyNiksIFsxMTJdXSxcbiAgICAgICAgICAyNDAwMDogW2hpZ2hQcmVmaXgsIFsyNTUsIDE5Ml0sIHplcm9GaWxsKDI2OCksIFs1NSwgMjU1LCAxMjhdLCB6ZXJvRmlsbCgyNjgpLCBbMTExLCAxMTJdLCB6ZXJvRmlsbCgxMjYpLCBbMjI0XV0sXG4gICAgICAgICAgMTYwMDA6IFtoaWdoUHJlZml4LCBbMjU1LCAxOTJdLCB6ZXJvRmlsbCgyNjgpLCBbNTUsIDI1NSwgMTI4XSwgemVyb0ZpbGwoMjY4KSwgWzExMSwgMjU1XSwgemVyb0ZpbGwoMjY5KSwgWzIyMywgMTA4XSwgemVyb0ZpbGwoMTk1KSwgWzEsIDE5Ml1dLFxuICAgICAgICAgIDEyMDAwOiBbbG93UHJlZml4LCB6ZXJvRmlsbCgyNjgpLCBbMywgMTI3LCAyNDhdLCB6ZXJvRmlsbCgyNjgpLCBbNiwgMjU1LCAyNDBdLCB6ZXJvRmlsbCgyNjgpLCBbMTMsIDI1NSwgMjI0XSwgemVyb0ZpbGwoMjY4KSwgWzI3LCAyNTMsIDEyOF0sIHplcm9GaWxsKDI1OSksIFs1Nl1dLFxuICAgICAgICAgIDExMDI1OiBbbG93UHJlZml4LCB6ZXJvRmlsbCgyNjgpLCBbMywgMTI3LCAyNDhdLCB6ZXJvRmlsbCgyNjgpLCBbNiwgMjU1LCAyNDBdLCB6ZXJvRmlsbCgyNjgpLCBbMTMsIDI1NSwgMjI0XSwgemVyb0ZpbGwoMjY4KSwgWzI3LCAyNTUsIDE5Ml0sIHplcm9GaWxsKDI2OCksIFs1NSwgMTc1LCAxMjhdLCB6ZXJvRmlsbCgxMDgpLCBbMTEyXV0sXG4gICAgICAgICAgODAwMDogW2xvd1ByZWZpeCwgemVyb0ZpbGwoMjY4KSwgWzMsIDEyMSwgMTZdLCB6ZXJvRmlsbCg0NyksIFs3XV1cbiAgICAgICAgfTtcbiAgICAgICAgc2lsZW5jZSA9IG1ha2VUYWJsZShjb25lT2ZTaWxlbmNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNpbGVuY2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKi9cblxuXG4gICAgdmFyIE9ORV9TRUNPTkRfSU5fVFMgPSA5MDAwMCxcbiAgICAgICAgLy8gOTBrSHogY2xvY2tcbiAgICBzZWNvbmRzVG9WaWRlb1RzLFxuICAgICAgICBzZWNvbmRzVG9BdWRpb1RzLFxuICAgICAgICB2aWRlb1RzVG9TZWNvbmRzLFxuICAgICAgICBhdWRpb1RzVG9TZWNvbmRzLFxuICAgICAgICBhdWRpb1RzVG9WaWRlb1RzLFxuICAgICAgICB2aWRlb1RzVG9BdWRpb1RzLFxuICAgICAgICBtZXRhZGF0YVRzVG9TZWNvbmRzO1xuXG4gICAgc2Vjb25kc1RvVmlkZW9UcyA9IGZ1bmN0aW9uIHNlY29uZHNUb1ZpZGVvVHMoc2Vjb25kcykge1xuICAgICAgcmV0dXJuIHNlY29uZHMgKiBPTkVfU0VDT05EX0lOX1RTO1xuICAgIH07XG5cbiAgICBzZWNvbmRzVG9BdWRpb1RzID0gZnVuY3Rpb24gc2Vjb25kc1RvQXVkaW9UcyhzZWNvbmRzLCBzYW1wbGVSYXRlKSB7XG4gICAgICByZXR1cm4gc2Vjb25kcyAqIHNhbXBsZVJhdGU7XG4gICAgfTtcblxuICAgIHZpZGVvVHNUb1NlY29uZHMgPSBmdW5jdGlvbiB2aWRlb1RzVG9TZWNvbmRzKHRpbWVzdGFtcCkge1xuICAgICAgcmV0dXJuIHRpbWVzdGFtcCAvIE9ORV9TRUNPTkRfSU5fVFM7XG4gICAgfTtcblxuICAgIGF1ZGlvVHNUb1NlY29uZHMgPSBmdW5jdGlvbiBhdWRpb1RzVG9TZWNvbmRzKHRpbWVzdGFtcCwgc2FtcGxlUmF0ZSkge1xuICAgICAgcmV0dXJuIHRpbWVzdGFtcCAvIHNhbXBsZVJhdGU7XG4gICAgfTtcblxuICAgIGF1ZGlvVHNUb1ZpZGVvVHMgPSBmdW5jdGlvbiBhdWRpb1RzVG9WaWRlb1RzKHRpbWVzdGFtcCwgc2FtcGxlUmF0ZSkge1xuICAgICAgcmV0dXJuIHNlY29uZHNUb1ZpZGVvVHMoYXVkaW9Uc1RvU2Vjb25kcyh0aW1lc3RhbXAsIHNhbXBsZVJhdGUpKTtcbiAgICB9O1xuXG4gICAgdmlkZW9Uc1RvQXVkaW9UcyA9IGZ1bmN0aW9uIHZpZGVvVHNUb0F1ZGlvVHModGltZXN0YW1wLCBzYW1wbGVSYXRlKSB7XG4gICAgICByZXR1cm4gc2Vjb25kc1RvQXVkaW9Ucyh2aWRlb1RzVG9TZWNvbmRzKHRpbWVzdGFtcCksIHNhbXBsZVJhdGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRqdXN0IElEMyB0YWcgb3IgY2FwdGlvbiB0aW1pbmcgaW5mb3JtYXRpb24gYnkgdGhlIHRpbWVsaW5lIHB0cyB2YWx1ZXNcbiAgICAgKiAoaWYga2VlcE9yaWdpbmFsVGltZXN0YW1wcyBpcyBmYWxzZSkgYW5kIGNvbnZlcnQgdG8gc2Vjb25kc1xuICAgICAqL1xuXG5cbiAgICBtZXRhZGF0YVRzVG9TZWNvbmRzID0gZnVuY3Rpb24gbWV0YWRhdGFUc1RvU2Vjb25kcyh0aW1lc3RhbXAsIHRpbWVsaW5lU3RhcnRQdHMsIGtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpIHtcbiAgICAgIHJldHVybiB2aWRlb1RzVG9TZWNvbmRzKGtlZXBPcmlnaW5hbFRpbWVzdGFtcHMgPyB0aW1lc3RhbXAgOiB0aW1lc3RhbXAgLSB0aW1lbGluZVN0YXJ0UHRzKTtcbiAgICB9O1xuXG4gICAgdmFyIGNsb2NrID0ge1xuICAgICAgT05FX1NFQ09ORF9JTl9UUzogT05FX1NFQ09ORF9JTl9UUyxcbiAgICAgIHNlY29uZHNUb1ZpZGVvVHM6IHNlY29uZHNUb1ZpZGVvVHMsXG4gICAgICBzZWNvbmRzVG9BdWRpb1RzOiBzZWNvbmRzVG9BdWRpb1RzLFxuICAgICAgdmlkZW9Uc1RvU2Vjb25kczogdmlkZW9Uc1RvU2Vjb25kcyxcbiAgICAgIGF1ZGlvVHNUb1NlY29uZHM6IGF1ZGlvVHNUb1NlY29uZHMsXG4gICAgICBhdWRpb1RzVG9WaWRlb1RzOiBhdWRpb1RzVG9WaWRlb1RzLFxuICAgICAgdmlkZW9Uc1RvQXVkaW9UczogdmlkZW9Uc1RvQXVkaW9UcyxcbiAgICAgIG1ldGFkYXRhVHNUb1NlY29uZHM6IG1ldGFkYXRhVHNUb1NlY29uZHNcbiAgICB9O1xuICAgIHZhciBjbG9ja18yID0gY2xvY2suc2Vjb25kc1RvVmlkZW9UcztcbiAgICB2YXIgY2xvY2tfNCA9IGNsb2NrLnZpZGVvVHNUb1NlY29uZHM7XG4gICAgLyoqXG4gICAgICogbXV4LmpzXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAgICAgKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBTdW0gdGhlIGBieXRlTGVuZ3RoYCBwcm9wZXJ0aWVzIG9mIHRoZSBkYXRhIGluIGVhY2ggQUFDIGZyYW1lXG4gICAgICovXG5cbiAgICB2YXIgc3VtRnJhbWVCeXRlTGVuZ3RocyA9IGZ1bmN0aW9uIHN1bUZyYW1lQnl0ZUxlbmd0aHMoYXJyYXkpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIGN1cnJlbnRPYmosXG4gICAgICAgICAgc3VtID0gMDsgLy8gc3VtIHRoZSBieXRlTGVuZ3RoJ3MgYWxsIGVhY2ggbmFsIHVuaXQgaW4gdGhlIGZyYW1lXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJyZW50T2JqID0gYXJyYXlbaV07XG4gICAgICAgIHN1bSArPSBjdXJyZW50T2JqLmRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1bTtcbiAgICB9OyAvLyBQb3NzaWJseSBwYWQgKHByZWZpeCkgdGhlIGF1ZGlvIHRyYWNrIHdpdGggc2lsZW5jZSBpZiBhcHBlbmRpbmcgdGhpcyB0cmFja1xuICAgIC8vIHdvdWxkIGxlYWQgdG8gdGhlIGludHJvZHVjdGlvbiBvZiBhIGdhcCBpbiB0aGUgYXVkaW8gYnVmZmVyXG5cblxuICAgIHZhciBwcmVmaXhXaXRoU2lsZW5jZSA9IGZ1bmN0aW9uIHByZWZpeFdpdGhTaWxlbmNlKHRyYWNrLCBmcmFtZXMsIGF1ZGlvQXBwZW5kU3RhcnRUcywgdmlkZW9CYXNlTWVkaWFEZWNvZGVUaW1lKSB7XG4gICAgICB2YXIgYmFzZU1lZGlhRGVjb2RlVGltZVRzLFxuICAgICAgICAgIGZyYW1lRHVyYXRpb24gPSAwLFxuICAgICAgICAgIGF1ZGlvR2FwRHVyYXRpb24gPSAwLFxuICAgICAgICAgIGF1ZGlvRmlsbEZyYW1lQ291bnQgPSAwLFxuICAgICAgICAgIGF1ZGlvRmlsbER1cmF0aW9uID0gMCxcbiAgICAgICAgICBzaWxlbnRGcmFtZSxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGZpcnN0RnJhbWU7XG5cbiAgICAgIGlmICghZnJhbWVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGJhc2VNZWRpYURlY29kZVRpbWVUcyA9IGNsb2NrLmF1ZGlvVHNUb1ZpZGVvVHModHJhY2suYmFzZU1lZGlhRGVjb2RlVGltZSwgdHJhY2suc2FtcGxlcmF0ZSk7IC8vIGRldGVybWluZSBmcmFtZSBjbG9jayBkdXJhdGlvbiBiYXNlZCBvbiBzYW1wbGUgcmF0ZSwgcm91bmQgdXAgdG8gYXZvaWQgb3ZlcmZpbGxzXG5cbiAgICAgIGZyYW1lRHVyYXRpb24gPSBNYXRoLmNlaWwoY2xvY2suT05FX1NFQ09ORF9JTl9UUyAvICh0cmFjay5zYW1wbGVyYXRlIC8gMTAyNCkpO1xuXG4gICAgICBpZiAoYXVkaW9BcHBlbmRTdGFydFRzICYmIHZpZGVvQmFzZU1lZGlhRGVjb2RlVGltZSkge1xuICAgICAgICAvLyBpbnNlcnQgdGhlIHNob3J0ZXN0IHBvc3NpYmxlIGFtb3VudCAoYXVkaW8gZ2FwIG9yIGF1ZGlvIHRvIHZpZGVvIGdhcClcbiAgICAgICAgYXVkaW9HYXBEdXJhdGlvbiA9IGJhc2VNZWRpYURlY29kZVRpbWVUcyAtIE1hdGgubWF4KGF1ZGlvQXBwZW5kU3RhcnRUcywgdmlkZW9CYXNlTWVkaWFEZWNvZGVUaW1lKTsgLy8gbnVtYmVyIG9mIGZ1bGwgZnJhbWVzIGluIHRoZSBhdWRpbyBnYXBcblxuICAgICAgICBhdWRpb0ZpbGxGcmFtZUNvdW50ID0gTWF0aC5mbG9vcihhdWRpb0dhcER1cmF0aW9uIC8gZnJhbWVEdXJhdGlvbik7XG4gICAgICAgIGF1ZGlvRmlsbER1cmF0aW9uID0gYXVkaW9GaWxsRnJhbWVDb3VudCAqIGZyYW1lRHVyYXRpb247XG4gICAgICB9IC8vIGRvbid0IGF0dGVtcHQgdG8gZmlsbCBnYXBzIHNtYWxsZXIgdGhhbiBhIHNpbmdsZSBmcmFtZSBvciBsYXJnZXJcbiAgICAgIC8vIHRoYW4gYSBoYWxmIHNlY29uZFxuXG5cbiAgICAgIGlmIChhdWRpb0ZpbGxGcmFtZUNvdW50IDwgMSB8fCBhdWRpb0ZpbGxEdXJhdGlvbiA+IGNsb2NrLk9ORV9TRUNPTkRfSU5fVFMgLyAyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2lsZW50RnJhbWUgPSBzaWxlbmNlXzEoKVt0cmFjay5zYW1wbGVyYXRlXTtcblxuICAgICAgaWYgKCFzaWxlbnRGcmFtZSkge1xuICAgICAgICAvLyB3ZSBkb24ndCBoYXZlIGEgc2lsZW50IGZyYW1lIHByZWdlbmVyYXRlZCBmb3IgdGhlIHNhbXBsZSByYXRlLCBzbyB1c2UgYSBmcmFtZVxuICAgICAgICAvLyBmcm9tIHRoZSBjb250ZW50IGluc3RlYWRcbiAgICAgICAgc2lsZW50RnJhbWUgPSBmcmFtZXNbMF0uZGF0YTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IGF1ZGlvRmlsbEZyYW1lQ291bnQ7IGkrKykge1xuICAgICAgICBmaXJzdEZyYW1lID0gZnJhbWVzWzBdO1xuICAgICAgICBmcmFtZXMuc3BsaWNlKDAsIDAsIHtcbiAgICAgICAgICBkYXRhOiBzaWxlbnRGcmFtZSxcbiAgICAgICAgICBkdHM6IGZpcnN0RnJhbWUuZHRzIC0gZnJhbWVEdXJhdGlvbixcbiAgICAgICAgICBwdHM6IGZpcnN0RnJhbWUucHRzIC0gZnJhbWVEdXJhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdHJhY2suYmFzZU1lZGlhRGVjb2RlVGltZSAtPSBNYXRoLmZsb29yKGNsb2NrLnZpZGVvVHNUb0F1ZGlvVHMoYXVkaW9GaWxsRHVyYXRpb24sIHRyYWNrLnNhbXBsZXJhdGUpKTtcbiAgICB9OyAvLyBJZiB0aGUgYXVkaW8gc2VnbWVudCBleHRlbmRzIGJlZm9yZSB0aGUgZWFybGllc3QgYWxsb3dlZCBkdHNcbiAgICAvLyB2YWx1ZSwgcmVtb3ZlIEFBQyBmcmFtZXMgdW50aWwgc3RhcnRzIGF0IG9yIGFmdGVyIHRoZSBlYXJsaWVzdFxuICAgIC8vIGFsbG93ZWQgRFRTIHNvIHRoYXQgd2UgZG9uJ3QgZW5kIHVwIHdpdGggYSBuZWdhdGl2ZSBiYXNlTWVkaWEtXG4gICAgLy8gRGVjb2RlVGltZSBmb3IgdGhlIGF1ZGlvIHRyYWNrXG5cblxuICAgIHZhciB0cmltQWR0c0ZyYW1lc0J5RWFybGllc3REdHMgPSBmdW5jdGlvbiB0cmltQWR0c0ZyYW1lc0J5RWFybGllc3REdHMoYWR0c0ZyYW1lcywgdHJhY2ssIGVhcmxpZXN0QWxsb3dlZER0cykge1xuICAgICAgaWYgKHRyYWNrLm1pblNlZ21lbnREdHMgPj0gZWFybGllc3RBbGxvd2VkRHRzKSB7XG4gICAgICAgIHJldHVybiBhZHRzRnJhbWVzO1xuICAgICAgfSAvLyBXZSB3aWxsIG5lZWQgdG8gcmVjYWxjdWxhdGUgdGhlIGVhcmxpZXN0IHNlZ21lbnQgRHRzXG5cblxuICAgICAgdHJhY2subWluU2VnbWVudER0cyA9IEluZmluaXR5O1xuICAgICAgcmV0dXJuIGFkdHNGcmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChjdXJyZW50RnJhbWUpIHtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbiBhbGxvd2VkIGZyYW1lLCBrZWVwIGl0IGFuZCByZWNvcmQgaXQncyBEdHNcbiAgICAgICAgaWYgKGN1cnJlbnRGcmFtZS5kdHMgPj0gZWFybGllc3RBbGxvd2VkRHRzKSB7XG4gICAgICAgICAgdHJhY2subWluU2VnbWVudER0cyA9IE1hdGgubWluKHRyYWNrLm1pblNlZ21lbnREdHMsIGN1cnJlbnRGcmFtZS5kdHMpO1xuICAgICAgICAgIHRyYWNrLm1pblNlZ21lbnRQdHMgPSB0cmFjay5taW5TZWdtZW50RHRzO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgZGlzY2FyZCBpdFxuXG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgfTsgLy8gZ2VuZXJhdGUgdGhlIHRyYWNrJ3MgcmF3IG1kYXQgZGF0YSBmcm9tIGFuIGFycmF5IG9mIGZyYW1lc1xuXG5cbiAgICB2YXIgZ2VuZXJhdGVTYW1wbGVUYWJsZSQxID0gZnVuY3Rpb24gZ2VuZXJhdGVTYW1wbGVUYWJsZSQxKGZyYW1lcykge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgY3VycmVudEZyYW1lLFxuICAgICAgICAgIHNhbXBsZXMgPSBbXTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJyZW50RnJhbWUgPSBmcmFtZXNbaV07XG4gICAgICAgIHNhbXBsZXMucHVzaCh7XG4gICAgICAgICAgc2l6ZTogY3VycmVudEZyYW1lLmRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgICBkdXJhdGlvbjogMTAyNCAvLyBGb3IgQUFDIGF1ZGlvLCBhbGwgc2FtcGxlcyBjb250YWluIDEwMjQgc2FtcGxlc1xuXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2FtcGxlcztcbiAgICB9OyAvLyBnZW5lcmF0ZSB0aGUgdHJhY2sncyBzYW1wbGUgdGFibGUgZnJvbSBhbiBhcnJheSBvZiBmcmFtZXNcblxuXG4gICAgdmFyIGNvbmNhdGVuYXRlRnJhbWVEYXRhID0gZnVuY3Rpb24gY29uY2F0ZW5hdGVGcmFtZURhdGEoZnJhbWVzKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBjdXJyZW50RnJhbWUsXG4gICAgICAgICAgZGF0YU9mZnNldCA9IDAsXG4gICAgICAgICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KHN1bUZyYW1lQnl0ZUxlbmd0aHMoZnJhbWVzKSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmcmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3VycmVudEZyYW1lID0gZnJhbWVzW2ldO1xuICAgICAgICBkYXRhLnNldChjdXJyZW50RnJhbWUuZGF0YSwgZGF0YU9mZnNldCk7XG4gICAgICAgIGRhdGFPZmZzZXQgKz0gY3VycmVudEZyYW1lLmRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfTtcblxuICAgIHZhciBhdWRpb0ZyYW1lVXRpbHMgPSB7XG4gICAgICBwcmVmaXhXaXRoU2lsZW5jZTogcHJlZml4V2l0aFNpbGVuY2UsXG4gICAgICB0cmltQWR0c0ZyYW1lc0J5RWFybGllc3REdHM6IHRyaW1BZHRzRnJhbWVzQnlFYXJsaWVzdER0cyxcbiAgICAgIGdlbmVyYXRlU2FtcGxlVGFibGU6IGdlbmVyYXRlU2FtcGxlVGFibGUkMSxcbiAgICAgIGNvbmNhdGVuYXRlRnJhbWVEYXRhOiBjb25jYXRlbmF0ZUZyYW1lRGF0YVxuICAgIH07XG4gICAgLyoqXG4gICAgICogbXV4LmpzXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAgICAgKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gICAgICovXG5cbiAgICB2YXIgT05FX1NFQ09ORF9JTl9UUyQxID0gY2xvY2suT05FX1NFQ09ORF9JTl9UUztcbiAgICAvKipcbiAgICAgKiBTdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgdHJhY2sgYW5kIHRoZVxuICAgICAqIGR1cmF0aW9uIGZvciBlYWNoIGZyYW1lL3NhbXBsZSB3ZSBwcm9jZXNzIGluIG9yZGVyIHRvIGNhbGN1bGF0ZVxuICAgICAqIHRoZSBiYXNlTWVkaWFEZWNvZGVUaW1lXG4gICAgICovXG5cbiAgICB2YXIgY29sbGVjdER0c0luZm8gPSBmdW5jdGlvbiBjb2xsZWN0RHRzSW5mbyh0cmFjaywgZGF0YSkge1xuICAgICAgaWYgKHR5cGVvZiBkYXRhLnB0cyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKHRyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLnB0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdHJhY2sudGltZWxpbmVTdGFydEluZm8ucHRzID0gZGF0YS5wdHM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhY2subWluU2VnbWVudFB0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdHJhY2subWluU2VnbWVudFB0cyA9IGRhdGEucHRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYWNrLm1pblNlZ21lbnRQdHMgPSBNYXRoLm1pbih0cmFjay5taW5TZWdtZW50UHRzLCBkYXRhLnB0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhY2subWF4U2VnbWVudFB0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdHJhY2subWF4U2VnbWVudFB0cyA9IGRhdGEucHRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYWNrLm1heFNlZ21lbnRQdHMgPSBNYXRoLm1heCh0cmFjay5tYXhTZWdtZW50UHRzLCBkYXRhLnB0cyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhLmR0cyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKHRyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmR0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdHJhY2sudGltZWxpbmVTdGFydEluZm8uZHRzID0gZGF0YS5kdHM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhY2subWluU2VnbWVudER0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdHJhY2subWluU2VnbWVudER0cyA9IGRhdGEuZHRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYWNrLm1pblNlZ21lbnREdHMgPSBNYXRoLm1pbih0cmFjay5taW5TZWdtZW50RHRzLCBkYXRhLmR0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhY2subWF4U2VnbWVudER0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdHJhY2subWF4U2VnbWVudER0cyA9IGRhdGEuZHRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYWNrLm1heFNlZ21lbnREdHMgPSBNYXRoLm1heCh0cmFjay5tYXhTZWdtZW50RHRzLCBkYXRhLmR0cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFyIHZhbHVlcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgYmFzZU1lZGlhRGVjb2RlVGltZSBiZXR3ZWVuXG4gICAgICogdHJhY2tzXG4gICAgICovXG5cblxuICAgIHZhciBjbGVhckR0c0luZm8gPSBmdW5jdGlvbiBjbGVhckR0c0luZm8odHJhY2spIHtcbiAgICAgIGRlbGV0ZSB0cmFjay5taW5TZWdtZW50RHRzO1xuICAgICAgZGVsZXRlIHRyYWNrLm1heFNlZ21lbnREdHM7XG4gICAgICBkZWxldGUgdHJhY2subWluU2VnbWVudFB0cztcbiAgICAgIGRlbGV0ZSB0cmFjay5tYXhTZWdtZW50UHRzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSB0cmFjaydzIGJhc2VNZWRpYURlY29kZVRpbWUgYmFzZWQgb24gdGhlIGVhcmxpZXN0XG4gICAgICogRFRTIHRoZSB0cmFuc211eGVyIGhhcyBldmVyIHNlZW4gYW5kIHRoZSBtaW5pbXVtIERUUyBmb3IgdGhlXG4gICAgICogY3VycmVudCB0cmFja1xuICAgICAqIEBwYXJhbSB0cmFjayB7b2JqZWN0fSB0cmFjayBtZXRhZGF0YSBjb25maWd1cmF0aW9uXG4gICAgICogQHBhcmFtIGtlZXBPcmlnaW5hbFRpbWVzdGFtcHMge2Jvb2xlYW59IElmIHRydWUsIGtlZXAgdGhlIHRpbWVzdGFtcHNcbiAgICAgKiAgICAgICAgaW4gdGhlIHNvdXJjZTsgZmFsc2UgdG8gYWRqdXN0IHRoZSBmaXJzdCBzZWdtZW50IHRvIHN0YXJ0IGF0IDAuXG4gICAgICovXG5cblxuICAgIHZhciBjYWxjdWxhdGVUcmFja0Jhc2VNZWRpYURlY29kZVRpbWUgPSBmdW5jdGlvbiBjYWxjdWxhdGVUcmFja0Jhc2VNZWRpYURlY29kZVRpbWUodHJhY2ssIGtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpIHtcbiAgICAgIHZhciBiYXNlTWVkaWFEZWNvZGVUaW1lLFxuICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgIG1pblNlZ21lbnREdHMgPSB0cmFjay5taW5TZWdtZW50RHRzOyAvLyBPcHRpb25hbGx5IGFkanVzdCB0aGUgdGltZSBzbyB0aGUgZmlyc3Qgc2VnbWVudCBzdGFydHMgYXQgemVyby5cblxuICAgICAgaWYgKCFrZWVwT3JpZ2luYWxUaW1lc3RhbXBzKSB7XG4gICAgICAgIG1pblNlZ21lbnREdHMgLT0gdHJhY2sudGltZWxpbmVTdGFydEluZm8uZHRzO1xuICAgICAgfSAvLyB0cmFjay50aW1lbGluZVN0YXJ0SW5mby5iYXNlTWVkaWFEZWNvZGVUaW1lIGlzIHRoZSBsb2NhdGlvbiwgaW4gdGltZSwgd2hlcmVcbiAgICAgIC8vIHdlIHdhbnQgdGhlIHN0YXJ0IG9mIHRoZSBmaXJzdCBzZWdtZW50IHRvIGJlIHBsYWNlZFxuXG5cbiAgICAgIGJhc2VNZWRpYURlY29kZVRpbWUgPSB0cmFjay50aW1lbGluZVN0YXJ0SW5mby5iYXNlTWVkaWFEZWNvZGVUaW1lOyAvLyBBZGQgdG8gdGhhdCB0aGUgZGlzdGFuY2UgdGhpcyBzZWdtZW50IGlzIGZyb20gdGhlIHZlcnkgZmlyc3RcblxuICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZSArPSBtaW5TZWdtZW50RHRzOyAvLyBiYXNlTWVkaWFEZWNvZGVUaW1lIG11c3Qgbm90IGJlY29tZSBuZWdhdGl2ZVxuXG4gICAgICBiYXNlTWVkaWFEZWNvZGVUaW1lID0gTWF0aC5tYXgoMCwgYmFzZU1lZGlhRGVjb2RlVGltZSk7XG5cbiAgICAgIGlmICh0cmFjay50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgIC8vIEF1ZGlvIGhhcyBhIGRpZmZlcmVudCBjbG9jayBlcXVhbCB0byB0aGUgc2FtcGxpbmdfcmF0ZSBzbyB3ZSBuZWVkIHRvXG4gICAgICAgIC8vIHNjYWxlIHRoZSBQVFMgdmFsdWVzIGludG8gdGhlIGNsb2NrIHJhdGUgb2YgdGhlIHRyYWNrXG4gICAgICAgIHNjYWxlID0gdHJhY2suc2FtcGxlcmF0ZSAvIE9ORV9TRUNPTkRfSU5fVFMkMTtcbiAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZSAqPSBzY2FsZTtcbiAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZSA9IE1hdGguZmxvb3IoYmFzZU1lZGlhRGVjb2RlVGltZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiYXNlTWVkaWFEZWNvZGVUaW1lO1xuICAgIH07XG5cbiAgICB2YXIgdHJhY2tEZWNvZGVJbmZvID0ge1xuICAgICAgY2xlYXJEdHNJbmZvOiBjbGVhckR0c0luZm8sXG4gICAgICBjYWxjdWxhdGVUcmFja0Jhc2VNZWRpYURlY29kZVRpbWU6IGNhbGN1bGF0ZVRyYWNrQmFzZU1lZGlhRGVjb2RlVGltZSxcbiAgICAgIGNvbGxlY3REdHNJbmZvOiBjb2xsZWN0RHRzSW5mb1xuICAgIH07XG4gICAgLyoqXG4gICAgICogbXV4LmpzXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAgICAgKiBMaWNlbnNlZCBBcGFjaGUtMi4wIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL211eC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gICAgICpcbiAgICAgKiBSZWFkcyBpbi1iYW5kIGNhcHRpb24gaW5mb3JtYXRpb24gZnJvbSBhIHZpZGVvIGVsZW1lbnRhcnlcbiAgICAgKiBzdHJlYW0uIENhcHRpb25zIG11c3QgZm9sbG93IHRoZSBDRUEtNzA4IHN0YW5kYXJkIGZvciBpbmplY3Rpb25cbiAgICAgKiBpbnRvIGFuIE1QRUctMiB0cmFuc3BvcnQgc3RyZWFtcy5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NFQS03MDhcbiAgICAgKiBAc2VlIGh0dHBzOi8vd3d3Lmdwby5nb3YvZmRzeXMvcGtnL0NGUi0yMDA3LXRpdGxlNDctdm9sMS9wZGYvQ0ZSLTIwMDctdGl0bGU0Ny12b2wxLXNlYzE1LTExOS5wZGZcbiAgICAgKi9cbiAgICAvLyBTdXBwbGVtZW50YWwgZW5oYW5jZW1lbnQgaW5mb3JtYXRpb24gKFNFSSkgTkFMIHVuaXRzIGhhdmUgYVxuICAgIC8vIHBheWxvYWQgdHlwZSBmaWVsZCB0byBpbmRpY2F0ZSBob3cgdGhleSBhcmUgdG8gYmVcbiAgICAvLyBpbnRlcnByZXRlZC4gQ0VBUy03MDggY2FwdGlvbiBjb250ZW50IGlzIGFsd2F5cyB0cmFuc21pdHRlZCB3aXRoXG4gICAgLy8gcGF5bG9hZCB0eXBlIDB4MDQuXG5cbiAgICB2YXIgVVNFUl9EQVRBX1JFR0lTVEVSRURfSVRVX1RfVDM1ID0gNCxcbiAgICAgICAgUkJTUF9UUkFJTElOR19CSVRTID0gMTI4O1xuICAgIC8qKlxuICAgICAgKiBQYXJzZSBhIHN1cHBsZW1lbnRhbCBlbmhhbmNlbWVudCBpbmZvcm1hdGlvbiAoU0VJKSBOQUwgdW5pdC5cbiAgICAgICogU3RvcHMgcGFyc2luZyBvbmNlIGEgbWVzc2FnZSBvZiB0eXBlIElUVSBUIFQzNSBoYXMgYmVlbiBmb3VuZC5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIGJ5dGVzIHtVaW50OEFycmF5fSB0aGUgYnl0ZXMgb2YgYSBTRUkgTkFMIHVuaXRcbiAgICAgICogQHJldHVybiB7b2JqZWN0fSB0aGUgcGFyc2VkIFNFSSBwYXlsb2FkXG4gICAgICAqIEBzZWUgUmVjLiBJVFUtVCBILjI2NCwgNy4zLjIuMy4xXG4gICAgICAqL1xuXG4gICAgdmFyIHBhcnNlU2VpID0gZnVuY3Rpb24gcGFyc2VTZWkoYnl0ZXMpIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgIHBheWxvYWRUeXBlOiAtMSxcbiAgICAgICAgcGF5bG9hZFNpemU6IDBcbiAgICAgIH0sXG4gICAgICAgICAgcGF5bG9hZFR5cGUgPSAwLFxuICAgICAgICAgIHBheWxvYWRTaXplID0gMDsgLy8gZ28gdGhyb3VnaCB0aGUgc2VpX3Jic3AgcGFyc2luZyBlYWNoIGVhY2ggaW5kaXZpZHVhbCBzZWlfbWVzc2FnZVxuXG4gICAgICB3aGlsZSAoaSA8IGJ5dGVzLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgLy8gc3RvcCBvbmNlIHdlIGhhdmUgaGl0IHRoZSBlbmQgb2YgdGhlIHNlaV9yYnNwXG4gICAgICAgIGlmIChieXRlc1tpXSA9PT0gUkJTUF9UUkFJTElOR19CSVRTKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gUGFyc2UgcGF5bG9hZCB0eXBlXG5cblxuICAgICAgICB3aGlsZSAoYnl0ZXNbaV0gPT09IDB4RkYpIHtcbiAgICAgICAgICBwYXlsb2FkVHlwZSArPSAyNTU7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF5bG9hZFR5cGUgKz0gYnl0ZXNbaSsrXTsgLy8gUGFyc2UgcGF5bG9hZCBzaXplXG5cbiAgICAgICAgd2hpbGUgKGJ5dGVzW2ldID09PSAweEZGKSB7XG4gICAgICAgICAgcGF5bG9hZFNpemUgKz0gMjU1O1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHBheWxvYWRTaXplICs9IGJ5dGVzW2krK107IC8vIHRoaXMgc2VpX21lc3NhZ2UgaXMgYSA2MDgvNzA4IGNhcHRpb24gc28gc2F2ZSBpdCBhbmQgYnJlYWtcbiAgICAgICAgLy8gdGhlcmUgY2FuIG9ubHkgZXZlciBiZSBvbmUgY2FwdGlvbiBtZXNzYWdlIGluIGEgZnJhbWUncyBzZWlcblxuICAgICAgICBpZiAoIXJlc3VsdC5wYXlsb2FkICYmIHBheWxvYWRUeXBlID09PSBVU0VSX0RBVEFfUkVHSVNURVJFRF9JVFVfVF9UMzUpIHtcbiAgICAgICAgICB2YXIgdXNlcklkZW50aWZpZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2kgKyAzXSwgYnl0ZXNbaSArIDRdLCBieXRlc1tpICsgNV0sIGJ5dGVzW2kgKyA2XSk7XG5cbiAgICAgICAgICBpZiAodXNlcklkZW50aWZpZXIgPT09ICdHQTk0Jykge1xuICAgICAgICAgICAgcmVzdWx0LnBheWxvYWRUeXBlID0gcGF5bG9hZFR5cGU7XG4gICAgICAgICAgICByZXN1bHQucGF5bG9hZFNpemUgPSBwYXlsb2FkU2l6ZTtcbiAgICAgICAgICAgIHJlc3VsdC5wYXlsb2FkID0gYnl0ZXMuc3ViYXJyYXkoaSwgaSArIHBheWxvYWRTaXplKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucGF5bG9hZCA9IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gc2tpcCB0aGUgcGF5bG9hZCBhbmQgcGFyc2UgdGhlIG5leHQgbWVzc2FnZVxuXG5cbiAgICAgICAgaSArPSBwYXlsb2FkU2l6ZTtcbiAgICAgICAgcGF5bG9hZFR5cGUgPSAwO1xuICAgICAgICBwYXlsb2FkU2l6ZSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTsgLy8gc2VlIEFOU0kvU0NURSAxMjgtMSAoMjAxMyksIHNlY3Rpb24gOC4xXG5cblxuICAgIHZhciBwYXJzZVVzZXJEYXRhID0gZnVuY3Rpb24gcGFyc2VVc2VyRGF0YShzZWkpIHtcbiAgICAgIC8vIGl0dV90X3QzNV9jb250cnlfY29kZSBtdXN0IGJlIDE4MSAoVW5pdGVkIFN0YXRlcykgZm9yXG4gICAgICAvLyBjYXB0aW9uc1xuICAgICAgaWYgKHNlaS5wYXlsb2FkWzBdICE9PSAxODEpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IC8vIGl0dV90X3QzNV9wcm92aWRlcl9jb2RlIHNob3VsZCBiZSA0OSAoQVRTQykgZm9yIGNhcHRpb25zXG5cblxuICAgICAgaWYgKChzZWkucGF5bG9hZFsxXSA8PCA4IHwgc2VpLnBheWxvYWRbMl0pICE9PSA0OSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gLy8gdGhlIHVzZXJfaWRlbnRpZmllciBzaG91bGQgYmUgXCJHQTk0XCIgdG8gaW5kaWNhdGUgQVRTQzEgZGF0YVxuXG5cbiAgICAgIGlmIChTdHJpbmcuZnJvbUNoYXJDb2RlKHNlaS5wYXlsb2FkWzNdLCBzZWkucGF5bG9hZFs0XSwgc2VpLnBheWxvYWRbNV0sIHNlaS5wYXlsb2FkWzZdKSAhPT0gJ0dBOTQnKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSAvLyBmaW5hbGx5LCB1c2VyX2RhdGFfdHlwZV9jb2RlIHNob3VsZCBiZSAweDAzIGZvciBjYXB0aW9uIGRhdGFcblxuXG4gICAgICBpZiAoc2VpLnBheWxvYWRbN10gIT09IDB4MDMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IC8vIHJldHVybiB0aGUgdXNlcl9kYXRhX3R5cGVfc3RydWN0dXJlIGFuZCBzdHJpcCB0aGUgdHJhaWxpbmdcbiAgICAgIC8vIG1hcmtlciBiaXRzXG5cblxuICAgICAgcmV0dXJuIHNlaS5wYXlsb2FkLnN1YmFycmF5KDgsIHNlaS5wYXlsb2FkLmxlbmd0aCAtIDEpO1xuICAgIH07IC8vIHNlZSBDRUEtNzA4LUQsIHNlY3Rpb24gNC40XG5cblxuICAgIHZhciBwYXJzZUNhcHRpb25QYWNrZXRzID0gZnVuY3Rpb24gcGFyc2VDYXB0aW9uUGFja2V0cyhwdHMsIHVzZXJEYXRhKSB7XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdLFxuICAgICAgICAgIGksXG4gICAgICAgICAgY291bnQsXG4gICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgIGRhdGE7IC8vIGlmIHRoaXMgaXMganVzdCBmaWxsZXIsIHJldHVybiBpbW1lZGlhdGVseVxuXG4gICAgICBpZiAoISh1c2VyRGF0YVswXSAmIDB4NDApKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSAvLyBwYXJzZSBvdXQgdGhlIGNjX2RhdGFfMSBhbmQgY2NfZGF0YV8yIGZpZWxkc1xuXG5cbiAgICAgIGNvdW50ID0gdXNlckRhdGFbMF0gJiAweDFmO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBvZmZzZXQgPSBpICogMztcbiAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICB0eXBlOiB1c2VyRGF0YVtvZmZzZXQgKyAyXSAmIDB4MDMsXG4gICAgICAgICAgcHRzOiBwdHNcbiAgICAgICAgfTsgLy8gY2FwdHVyZSBjYyBkYXRhIHdoZW4gY2NfdmFsaWQgaXMgMVxuXG4gICAgICAgIGlmICh1c2VyRGF0YVtvZmZzZXQgKyAyXSAmIDB4MDQpIHtcbiAgICAgICAgICBkYXRhLmNjRGF0YSA9IHVzZXJEYXRhW29mZnNldCArIDNdIDw8IDggfCB1c2VyRGF0YVtvZmZzZXQgKyA0XTtcbiAgICAgICAgICByZXN1bHRzLnB1c2goZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIHZhciBkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzID0gZnVuY3Rpb24gZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlcyhkYXRhKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICAgIGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucyA9IFtdLFxuICAgICAgICAgIGkgPSAxLFxuICAgICAgICAgIG5ld0xlbmd0aCxcbiAgICAgICAgICBuZXdEYXRhOyAvLyBGaW5kIGFsbCBgRW11bGF0aW9uIFByZXZlbnRpb24gQnl0ZXNgXG5cbiAgICAgIHdoaWxlIChpIDwgbGVuZ3RoIC0gMikge1xuICAgICAgICBpZiAoZGF0YVtpXSA9PT0gMCAmJiBkYXRhW2kgKyAxXSA9PT0gMCAmJiBkYXRhW2kgKyAyXSA9PT0gMHgwMykge1xuICAgICAgICAgIGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucy5wdXNoKGkgKyAyKTtcbiAgICAgICAgICBpICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICB9IC8vIElmIG5vIEVtdWxhdGlvbiBQcmV2ZW50aW9uIEJ5dGVzIHdlcmUgZm91bmQganVzdCByZXR1cm4gdGhlIG9yaWdpbmFsXG4gICAgICAvLyBhcnJheVxuXG5cbiAgICAgIGlmIChlbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXNQb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSAvLyBDcmVhdGUgYSBuZXcgYXJyYXkgdG8gaG9sZCB0aGUgTkFMIHVuaXQgZGF0YVxuXG5cbiAgICAgIG5ld0xlbmd0aCA9IGxlbmd0aCAtIGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucy5sZW5ndGg7XG4gICAgICBuZXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkobmV3TGVuZ3RoKTtcbiAgICAgIHZhciBzb3VyY2VJbmRleCA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXdMZW5ndGg7IHNvdXJjZUluZGV4KyssIGkrKykge1xuICAgICAgICBpZiAoc291cmNlSW5kZXggPT09IGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9uc1swXSkge1xuICAgICAgICAgIC8vIFNraXAgdGhpcyBieXRlXG4gICAgICAgICAgc291cmNlSW5kZXgrKzsgLy8gUmVtb3ZlIHRoaXMgcG9zaXRpb24gaW5kZXhcblxuICAgICAgICAgIGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucy5zaGlmdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3RGF0YVtpXSA9IGRhdGFbc291cmNlSW5kZXhdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICB9OyAvLyBleHBvcnRzXG5cblxuICAgIHZhciBjYXB0aW9uUGFja2V0UGFyc2VyID0ge1xuICAgICAgcGFyc2VTZWk6IHBhcnNlU2VpLFxuICAgICAgcGFyc2VVc2VyRGF0YTogcGFyc2VVc2VyRGF0YSxcbiAgICAgIHBhcnNlQ2FwdGlvblBhY2tldHM6IHBhcnNlQ2FwdGlvblBhY2tldHMsXG4gICAgICBkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzOiBkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzLFxuICAgICAgVVNFUl9EQVRBX1JFR0lTVEVSRURfSVRVX1RfVDM1OiBVU0VSX0RBVEFfUkVHSVNURVJFRF9JVFVfVF9UMzVcbiAgICB9OyAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIExpbmsgVG8gVHJhbnNwb3J0XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIHZhciBDYXB0aW9uU3RyZWFtID0gZnVuY3Rpb24gQ2FwdGlvblN0cmVhbSgpIHtcbiAgICAgIENhcHRpb25TdHJlYW0ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuY2FwdGlvblBhY2tldHNfID0gW107XG4gICAgICB0aGlzLmNjU3RyZWFtc18gPSBbbmV3IENlYTYwOFN0cmVhbSgwLCAwKSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgbmV3IENlYTYwOFN0cmVhbSgwLCAxKSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgbmV3IENlYTYwOFN0cmVhbSgxLCAwKSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgbmV3IENlYTYwOFN0cmVhbSgxLCAxKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICBdO1xuICAgICAgdGhpcy5yZXNldCgpOyAvLyBmb3J3YXJkIGRhdGEgYW5kIGRvbmUgZXZlbnRzIGZyb20gQ0NzIHRvIHRoaXMgQ2FwdGlvblN0cmVhbVxuXG4gICAgICB0aGlzLmNjU3RyZWFtc18uZm9yRWFjaChmdW5jdGlvbiAoY2MpIHtcbiAgICAgICAgY2Mub24oJ2RhdGEnLCB0aGlzLnRyaWdnZXIuYmluZCh0aGlzLCAnZGF0YScpKTtcbiAgICAgICAgY2Mub24oJ3BhcnRpYWxkb25lJywgdGhpcy50cmlnZ2VyLmJpbmQodGhpcywgJ3BhcnRpYWxkb25lJykpO1xuICAgICAgICBjYy5vbignZG9uZScsIHRoaXMudHJpZ2dlci5iaW5kKHRoaXMsICdkb25lJykpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfTtcblxuICAgIENhcHRpb25TdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpO1xuXG4gICAgQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIHNlaSwgdXNlckRhdGEsIG5ld0NhcHRpb25QYWNrZXRzOyAvLyBvbmx5IGV4YW1pbmUgU0VJIE5BTHNcblxuICAgICAgaWYgKGV2ZW50Lm5hbFVuaXRUeXBlICE9PSAnc2VpX3Jic3AnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gcGFyc2UgdGhlIHNlaVxuXG5cbiAgICAgIHNlaSA9IGNhcHRpb25QYWNrZXRQYXJzZXIucGFyc2VTZWkoZXZlbnQuZXNjYXBlZFJCU1ApOyAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgdXNlcl9kYXRhX3JlZ2lzdGVyZWRfaXR1X3RfdDM1XG5cbiAgICAgIGlmIChzZWkucGF5bG9hZFR5cGUgIT09IGNhcHRpb25QYWNrZXRQYXJzZXIuVVNFUl9EQVRBX1JFR0lTVEVSRURfSVRVX1RfVDM1KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gcGFyc2Ugb3V0IHRoZSB1c2VyIGRhdGEgcGF5bG9hZFxuXG5cbiAgICAgIHVzZXJEYXRhID0gY2FwdGlvblBhY2tldFBhcnNlci5wYXJzZVVzZXJEYXRhKHNlaSk7IC8vIGlnbm9yZSB1bnJlY29nbml6ZWQgdXNlckRhdGFcblxuICAgICAgaWYgKCF1c2VyRGF0YSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFNvbWV0aW1lcywgdGhlIHNhbWUgc2VnbWVudCAjIHdpbGwgYmUgZG93bmxvYWRlZCB0d2ljZS4gVG8gc3RvcCB0aGVcbiAgICAgIC8vIGNhcHRpb24gZGF0YSBmcm9tIGJlaW5nIHByb2Nlc3NlZCB0d2ljZSwgd2UgdHJhY2sgdGhlIGxhdGVzdCBkdHMgd2UndmVcbiAgICAgIC8vIHJlY2VpdmVkIGFuZCBpZ25vcmUgZXZlcnl0aGluZyB3aXRoIGEgZHRzIGJlZm9yZSB0aGF0LiBIb3dldmVyLCBzaW5jZVxuICAgICAgLy8gZGF0YSBmb3IgYSBzcGVjaWZpYyBkdHMgY2FuIGJlIHNwbGl0IGFjcm9zcyBwYWNrZXRzIG9uIGVpdGhlciBzaWRlIG9mXG4gICAgICAvLyBhIHNlZ21lbnQgYm91bmRhcnksIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHdlICpkb24ndCogaWdub3JlIHRoZSBwYWNrZXRzXG4gICAgICAvLyBmcm9tIHRoZSAqbmV4dCogc2VnbWVudCB0aGF0IGhhdmUgZHRzID09PSB0aGlzLmxhdGVzdER0c18uIEJ5IGNvbnN0YW50bHlcbiAgICAgIC8vIHRyYWNraW5nIHRoZSBudW1iZXIgb2YgcGFja2V0cyByZWNlaXZlZCB3aXRoIGR0cyA9PT0gdGhpcy5sYXRlc3REdHNfLCB3ZVxuICAgICAgLy8ga25vdyBob3cgbWFueSBzaG91bGQgYmUgaWdub3JlZCBvbmNlIHdlIHN0YXJ0IHJlY2VpdmluZyBkdXBsaWNhdGVzLlxuXG5cbiAgICAgIGlmIChldmVudC5kdHMgPCB0aGlzLmxhdGVzdER0c18pIHtcbiAgICAgICAgLy8gV2UndmUgc3RhcnRlZCBnZXR0aW5nIG9sZGVyIGRhdGEsIHNvIHNldCB0aGUgZmxhZy5cbiAgICAgICAgdGhpcy5pZ25vcmVOZXh0RXF1YWxEdHNfID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChldmVudC5kdHMgPT09IHRoaXMubGF0ZXN0RHRzXyAmJiB0aGlzLmlnbm9yZU5leHRFcXVhbER0c18pIHtcbiAgICAgICAgdGhpcy5udW1TYW1lRHRzXy0tO1xuXG4gICAgICAgIGlmICghdGhpcy5udW1TYW1lRHRzXykge1xuICAgICAgICAgIC8vIFdlJ3ZlIHJlY2VpdmVkIHRoZSBsYXN0IGR1cGxpY2F0ZSBwYWNrZXQsIHRpbWUgdG8gc3RhcnQgcHJvY2Vzc2luZyBhZ2FpblxuICAgICAgICAgIHRoaXMuaWdub3JlTmV4dEVxdWFsRHRzXyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBwYXJzZSBvdXQgQ0MgZGF0YSBwYWNrZXRzIGFuZCBzYXZlIHRoZW0gZm9yIGxhdGVyXG5cblxuICAgICAgbmV3Q2FwdGlvblBhY2tldHMgPSBjYXB0aW9uUGFja2V0UGFyc2VyLnBhcnNlQ2FwdGlvblBhY2tldHMoZXZlbnQucHRzLCB1c2VyRGF0YSk7XG4gICAgICB0aGlzLmNhcHRpb25QYWNrZXRzXyA9IHRoaXMuY2FwdGlvblBhY2tldHNfLmNvbmNhdChuZXdDYXB0aW9uUGFja2V0cyk7XG5cbiAgICAgIGlmICh0aGlzLmxhdGVzdER0c18gIT09IGV2ZW50LmR0cykge1xuICAgICAgICB0aGlzLm51bVNhbWVEdHNfID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5udW1TYW1lRHRzXysrO1xuICAgICAgdGhpcy5sYXRlc3REdHNfID0gZXZlbnQuZHRzO1xuICAgIH07XG5cbiAgICBDYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5mbHVzaENDU3RyZWFtcyA9IGZ1bmN0aW9uIChmbHVzaFR5cGUpIHtcbiAgICAgIHRoaXMuY2NTdHJlYW1zXy5mb3JFYWNoKGZ1bmN0aW9uIChjYykge1xuICAgICAgICByZXR1cm4gZmx1c2hUeXBlID09PSAnZmx1c2gnID8gY2MuZmx1c2goKSA6IGNjLnBhcnRpYWxGbHVzaCgpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfTtcblxuICAgIENhcHRpb25TdHJlYW0ucHJvdG90eXBlLmZsdXNoU3RyZWFtID0gZnVuY3Rpb24gKGZsdXNoVHlwZSkge1xuICAgICAgLy8gbWFrZSBzdXJlIHdlIGFjdHVhbGx5IHBhcnNlZCBjYXB0aW9ucyBiZWZvcmUgcHJvY2VlZGluZ1xuICAgICAgaWYgKCF0aGlzLmNhcHRpb25QYWNrZXRzXy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5mbHVzaENDU3RyZWFtcyhmbHVzaFR5cGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEluIENocm9tZSwgdGhlIEFycmF5I3NvcnQgZnVuY3Rpb24gaXMgbm90IHN0YWJsZSBzbyBhZGQgYVxuICAgICAgLy8gcHJlc29ydEluZGV4IHRoYXQgd2UgY2FuIHVzZSB0byBlbnN1cmUgd2UgZ2V0IGEgc3RhYmxlLXNvcnRcblxuXG4gICAgICB0aGlzLmNhcHRpb25QYWNrZXRzXy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtLCBpZHgpIHtcbiAgICAgICAgZWxlbS5wcmVzb3J0SW5kZXggPSBpZHg7XG4gICAgICB9KTsgLy8gc29ydCBjYXB0aW9uIGJ5dGUtcGFpcnMgYmFzZWQgb24gdGhlaXIgUFRTIHZhbHVlc1xuXG4gICAgICB0aGlzLmNhcHRpb25QYWNrZXRzXy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGlmIChhLnB0cyA9PT0gYi5wdHMpIHtcbiAgICAgICAgICByZXR1cm4gYS5wcmVzb3J0SW5kZXggLSBiLnByZXNvcnRJbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhLnB0cyAtIGIucHRzO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmNhcHRpb25QYWNrZXRzXy5mb3JFYWNoKGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgICAgaWYgKHBhY2tldC50eXBlIDwgMikge1xuICAgICAgICAgIC8vIERpc3BhdGNoIHBhY2tldCB0byB0aGUgcmlnaHQgQ2VhNjA4U3RyZWFtXG4gICAgICAgICAgdGhpcy5kaXNwYXRjaENlYTYwOFBhY2tldChwYWNrZXQpO1xuICAgICAgICB9IC8vIHRoaXMgaXMgd2hlcmUgYW4gJ2Vsc2UnIHdvdWxkIGdvIGZvciBhIGRpc3BhdGNoaW5nIHBhY2tldHNcbiAgICAgICAgLy8gdG8gYSB0aGVvcmV0aWNhbCBDZWE3MDhTdHJlYW0gdGhhdCBoYW5kbGVzIFNFUlZJQ0VuIGRhdGFcblxuICAgICAgfSwgdGhpcyk7XG4gICAgICB0aGlzLmNhcHRpb25QYWNrZXRzXy5sZW5ndGggPSAwO1xuICAgICAgdGhpcy5mbHVzaENDU3RyZWFtcyhmbHVzaFR5cGUpO1xuICAgIH07XG5cbiAgICBDYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmZsdXNoU3RyZWFtKCdmbHVzaCcpO1xuICAgIH07IC8vIE9ubHkgY2FsbGVkIGlmIGhhbmRsaW5nIHBhcnRpYWwgZGF0YVxuXG5cbiAgICBDYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5wYXJ0aWFsRmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5mbHVzaFN0cmVhbSgncGFydGlhbEZsdXNoJyk7XG4gICAgfTtcblxuICAgIENhcHRpb25TdHJlYW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5sYXRlc3REdHNfID0gbnVsbDtcbiAgICAgIHRoaXMuaWdub3JlTmV4dEVxdWFsRHRzXyA9IGZhbHNlO1xuICAgICAgdGhpcy5udW1TYW1lRHRzXyA9IDA7XG4gICAgICB0aGlzLmFjdGl2ZUNlYTYwOENoYW5uZWxfID0gW251bGwsIG51bGxdO1xuICAgICAgdGhpcy5jY1N0cmVhbXNfLmZvckVhY2goZnVuY3Rpb24gKGNjU3RyZWFtKSB7XG4gICAgICAgIGNjU3RyZWFtLnJlc2V0KCk7XG4gICAgICB9KTtcbiAgICB9OyAvLyBGcm9tIHRoZSBDRUEtNjA4IHNwZWM6XG5cbiAgICAvKlxuICAgICAqIFdoZW4gWERTIHN1Yi1wYWNrZXRzIGFyZSBpbnRlcmxlYXZlZCB3aXRoIG90aGVyIHNlcnZpY2VzLCB0aGUgZW5kIG9mIGVhY2ggc3ViLXBhY2tldCBzaGFsbCBiZSBmb2xsb3dlZFxuICAgICAqIGJ5IGEgY29udHJvbCBwYWlyIHRvIGNoYW5nZSB0byBhIGRpZmZlcmVudCBzZXJ2aWNlLiBXaGVuIGFueSBvZiB0aGUgY29udHJvbCBjb2RlcyBmcm9tIDB4MTAgdG8gMHgxRiBpc1xuICAgICAqIHVzZWQgdG8gYmVnaW4gYSBjb250cm9sIGNvZGUgcGFpciwgaXQgaW5kaWNhdGVzIHRoZSByZXR1cm4gdG8gY2FwdGlvbmluZyBvciBUZXh0IGRhdGEuIFRoZSBjb250cm9sIGNvZGUgcGFpclxuICAgICAqIGFuZCBzdWJzZXF1ZW50IGRhdGEgc2hvdWxkIHRoZW4gYmUgcHJvY2Vzc2VkIGFjY29yZGluZyB0byB0aGUgRkNDIHJ1bGVzLiBJdCBtYXkgYmUgbmVjZXNzYXJ5IGZvciB0aGVcbiAgICAgKiBsaW5lIDIxIGRhdGEgZW5jb2RlciB0byBhdXRvbWF0aWNhbGx5IGluc2VydCBhIGNvbnRyb2wgY29kZSBwYWlyIChpLmUuIFJDTCwgUlUyLCBSVTMsIFJVNCwgUkRDLCBvciBSVEQpXG4gICAgICogdG8gc3dpdGNoIHRvIGNhcHRpb25pbmcgb3IgVGV4dC5cbiAgICAqL1xuICAgIC8vIFdpdGggdGhhdCBpbiBtaW5kLCB3ZSBpZ25vcmUgYW55IGRhdGEgYmV0d2VlbiBhbiBYRFMgY29udHJvbCBjb2RlIGFuZCBhXG4gICAgLy8gc3Vic2VxdWVudCBjbG9zZWQtY2FwdGlvbmluZyBjb250cm9sIGNvZGUuXG5cblxuICAgIENhcHRpb25TdHJlYW0ucHJvdG90eXBlLmRpc3BhdGNoQ2VhNjA4UGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgLy8gTk9URTogcGFja2V0LnR5cGUgaXMgdGhlIENFQTYwOCBmaWVsZFxuICAgICAgaWYgKHRoaXMuc2V0c1RleHRPclhEU0FjdGl2ZShwYWNrZXQpKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlQ2VhNjA4Q2hhbm5lbF9bcGFja2V0LnR5cGVdID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZXRzQ2hhbm5lbDFBY3RpdmUocGFja2V0KSkge1xuICAgICAgICB0aGlzLmFjdGl2ZUNlYTYwOENoYW5uZWxfW3BhY2tldC50eXBlXSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc2V0c0NoYW5uZWwyQWN0aXZlKHBhY2tldCkpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVDZWE2MDhDaGFubmVsX1twYWNrZXQudHlwZV0gPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5hY3RpdmVDZWE2MDhDaGFubmVsX1twYWNrZXQudHlwZV0gPT09IG51bGwpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCByZWNlaXZlZCBhbnl0aGluZyB0byBzZXQgdGhlIGFjdGl2ZSBjaGFubmVsLCBvciB0aGVcbiAgICAgICAgLy8gcGFja2V0cyBhcmUgVGV4dC9YRFMgZGF0YSwgZGlzY2FyZCB0aGUgZGF0YTsgd2UgZG9uJ3Qgd2FudCBqdW1ibGVkXG4gICAgICAgIC8vIGNhcHRpb25zXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jY1N0cmVhbXNfWyhwYWNrZXQudHlwZSA8PCAxKSArIHRoaXMuYWN0aXZlQ2VhNjA4Q2hhbm5lbF9bcGFja2V0LnR5cGVdXS5wdXNoKHBhY2tldCk7XG4gICAgfTtcblxuICAgIENhcHRpb25TdHJlYW0ucHJvdG90eXBlLnNldHNDaGFubmVsMUFjdGl2ZSA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgIHJldHVybiAocGFja2V0LmNjRGF0YSAmIDB4NzgwMCkgPT09IDB4MTAwMDtcbiAgICB9O1xuXG4gICAgQ2FwdGlvblN0cmVhbS5wcm90b3R5cGUuc2V0c0NoYW5uZWwyQWN0aXZlID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcmV0dXJuIChwYWNrZXQuY2NEYXRhICYgMHg3ODAwKSA9PT0gMHgxODAwO1xuICAgIH07XG5cbiAgICBDYXB0aW9uU3RyZWFtLnByb3RvdHlwZS5zZXRzVGV4dE9yWERTQWN0aXZlID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcmV0dXJuIChwYWNrZXQuY2NEYXRhICYgMHg3MTAwKSA9PT0gMHgwMTAwIHx8IChwYWNrZXQuY2NEYXRhICYgMHg3OGZlKSA9PT0gMHgxMDJhIHx8IChwYWNrZXQuY2NEYXRhICYgMHg3OGZlKSA9PT0gMHgxODJhO1xuICAgIH07IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBTZXNzaW9uIHRvIEFwcGxpY2F0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFRoaXMgaGFzaCBtYXBzIG5vbi1BU0NJSSwgc3BlY2lhbCwgYW5kIGV4dGVuZGVkIGNoYXJhY3RlciBjb2RlcyB0byB0aGVpclxuICAgIC8vIHByb3BlciBVbmljb2RlIGVxdWl2YWxlbnQuIFRoZSBmaXJzdCBrZXlzIHRoYXQgYXJlIG9ubHkgYSBzaW5nbGUgYnl0ZVxuICAgIC8vIGFyZSB0aGUgbm9uLXN0YW5kYXJkIEFTQ0lJIGNoYXJhY3RlcnMsIHdoaWNoIHNpbXBseSBtYXAgdGhlIENFQTYwOCBieXRlXG4gICAgLy8gdG8gdGhlIHN0YW5kYXJkIEFTQ0lJL1VuaWNvZGUuIFRoZSB0d28tYnl0ZSBrZXlzIHRoYXQgZm9sbG93IGFyZSB0aGUgQ0VBNjA4XG4gICAgLy8gY2hhcmFjdGVyIGNvZGVzLCBidXQgaGF2ZSB0aGVpciBNU0IgYml0bWFza2VkIHdpdGggMHgwMyBzbyB0aGF0IGEgbG9va3VwXG4gICAgLy8gY2FuIGJlIHBlcmZvcm1lZCByZWdhcmRsZXNzIG9mIHRoZSBmaWVsZCBhbmQgZGF0YSBjaGFubmVsIG9uIHdoaWNoIHRoZVxuICAgIC8vIGNoYXJhY3RlciBjb2RlIHdhcyByZWNlaXZlZC5cblxuXG4gICAgdmFyIENIQVJBQ1RFUl9UUkFOU0xBVElPTiA9IHtcbiAgICAgIDB4MmE6IDB4ZTEsXG4gICAgICAvLyDDoVxuICAgICAgMHg1YzogMHhlOSxcbiAgICAgIC8vIMOpXG4gICAgICAweDVlOiAweGVkLFxuICAgICAgLy8gw61cbiAgICAgIDB4NWY6IDB4ZjMsXG4gICAgICAvLyDDs1xuICAgICAgMHg2MDogMHhmYSxcbiAgICAgIC8vIMO6XG4gICAgICAweDdiOiAweGU3LFxuICAgICAgLy8gw6dcbiAgICAgIDB4N2M6IDB4ZjcsXG4gICAgICAvLyDDt1xuICAgICAgMHg3ZDogMHhkMSxcbiAgICAgIC8vIMORXG4gICAgICAweDdlOiAweGYxLFxuICAgICAgLy8gw7FcbiAgICAgIDB4N2Y6IDB4MjU4OCxcbiAgICAgIC8vIOKWiFxuICAgICAgMHgwMTMwOiAweGFlLFxuICAgICAgLy8gwq5cbiAgICAgIDB4MDEzMTogMHhiMCxcbiAgICAgIC8vIMKwXG4gICAgICAweDAxMzI6IDB4YmQsXG4gICAgICAvLyDCvVxuICAgICAgMHgwMTMzOiAweGJmLFxuICAgICAgLy8gwr9cbiAgICAgIDB4MDEzNDogMHgyMTIyLFxuICAgICAgLy8g4oSiXG4gICAgICAweDAxMzU6IDB4YTIsXG4gICAgICAvLyDColxuICAgICAgMHgwMTM2OiAweGEzLFxuICAgICAgLy8gwqNcbiAgICAgIDB4MDEzNzogMHgyNjZhLFxuICAgICAgLy8g4pmqXG4gICAgICAweDAxMzg6IDB4ZTAsXG4gICAgICAvLyDDoFxuICAgICAgMHgwMTM5OiAweGEwLFxuICAgICAgLy9cbiAgICAgIDB4MDEzYTogMHhlOCxcbiAgICAgIC8vIMOoXG4gICAgICAweDAxM2I6IDB4ZTIsXG4gICAgICAvLyDDolxuICAgICAgMHgwMTNjOiAweGVhLFxuICAgICAgLy8gw6pcbiAgICAgIDB4MDEzZDogMHhlZSxcbiAgICAgIC8vIMOuXG4gICAgICAweDAxM2U6IDB4ZjQsXG4gICAgICAvLyDDtFxuICAgICAgMHgwMTNmOiAweGZiLFxuICAgICAgLy8gw7tcbiAgICAgIDB4MDIyMDogMHhjMSxcbiAgICAgIC8vIMOBXG4gICAgICAweDAyMjE6IDB4YzksXG4gICAgICAvLyDDiVxuICAgICAgMHgwMjIyOiAweGQzLFxuICAgICAgLy8gw5NcbiAgICAgIDB4MDIyMzogMHhkYSxcbiAgICAgIC8vIMOaXG4gICAgICAweDAyMjQ6IDB4ZGMsXG4gICAgICAvLyDDnFxuICAgICAgMHgwMjI1OiAweGZjLFxuICAgICAgLy8gw7xcbiAgICAgIDB4MDIyNjogMHgyMDE4LFxuICAgICAgLy8g4oCYXG4gICAgICAweDAyMjc6IDB4YTEsXG4gICAgICAvLyDCoVxuICAgICAgMHgwMjI4OiAweDJhLFxuICAgICAgLy8gKlxuICAgICAgMHgwMjI5OiAweDI3LFxuICAgICAgLy8gJ1xuICAgICAgMHgwMjJhOiAweDIwMTQsXG4gICAgICAvLyDigJRcbiAgICAgIDB4MDIyYjogMHhhOSxcbiAgICAgIC8vIMKpXG4gICAgICAweDAyMmM6IDB4MjEyMCxcbiAgICAgIC8vIOKEoFxuICAgICAgMHgwMjJkOiAweDIwMjIsXG4gICAgICAvLyDigKJcbiAgICAgIDB4MDIyZTogMHgyMDFjLFxuICAgICAgLy8g4oCcXG4gICAgICAweDAyMmY6IDB4MjAxZCxcbiAgICAgIC8vIOKAnVxuICAgICAgMHgwMjMwOiAweGMwLFxuICAgICAgLy8gw4BcbiAgICAgIDB4MDIzMTogMHhjMixcbiAgICAgIC8vIMOCXG4gICAgICAweDAyMzI6IDB4YzcsXG4gICAgICAvLyDDh1xuICAgICAgMHgwMjMzOiAweGM4LFxuICAgICAgLy8gw4hcbiAgICAgIDB4MDIzNDogMHhjYSxcbiAgICAgIC8vIMOKXG4gICAgICAweDAyMzU6IDB4Y2IsXG4gICAgICAvLyDDi1xuICAgICAgMHgwMjM2OiAweGViLFxuICAgICAgLy8gw6tcbiAgICAgIDB4MDIzNzogMHhjZSxcbiAgICAgIC8vIMOOXG4gICAgICAweDAyMzg6IDB4Y2YsXG4gICAgICAvLyDDj1xuICAgICAgMHgwMjM5OiAweGVmLFxuICAgICAgLy8gw69cbiAgICAgIDB4MDIzYTogMHhkNCxcbiAgICAgIC8vIMOUXG4gICAgICAweDAyM2I6IDB4ZDksXG4gICAgICAvLyDDmVxuICAgICAgMHgwMjNjOiAweGY5LFxuICAgICAgLy8gw7lcbiAgICAgIDB4MDIzZDogMHhkYixcbiAgICAgIC8vIMObXG4gICAgICAweDAyM2U6IDB4YWIsXG4gICAgICAvLyDCq1xuICAgICAgMHgwMjNmOiAweGJiLFxuICAgICAgLy8gwrtcbiAgICAgIDB4MDMyMDogMHhjMyxcbiAgICAgIC8vIMODXG4gICAgICAweDAzMjE6IDB4ZTMsXG4gICAgICAvLyDDo1xuICAgICAgMHgwMzIyOiAweGNkLFxuICAgICAgLy8gw41cbiAgICAgIDB4MDMyMzogMHhjYyxcbiAgICAgIC8vIMOMXG4gICAgICAweDAzMjQ6IDB4ZWMsXG4gICAgICAvLyDDrFxuICAgICAgMHgwMzI1OiAweGQyLFxuICAgICAgLy8gw5JcbiAgICAgIDB4MDMyNjogMHhmMixcbiAgICAgIC8vIMOyXG4gICAgICAweDAzMjc6IDB4ZDUsXG4gICAgICAvLyDDlVxuICAgICAgMHgwMzI4OiAweGY1LFxuICAgICAgLy8gw7VcbiAgICAgIDB4MDMyOTogMHg3YixcbiAgICAgIC8vIHtcbiAgICAgIDB4MDMyYTogMHg3ZCxcbiAgICAgIC8vIH1cbiAgICAgIDB4MDMyYjogMHg1YyxcbiAgICAgIC8vIFxcXG4gICAgICAweDAzMmM6IDB4NWUsXG4gICAgICAvLyBeXG4gICAgICAweDAzMmQ6IDB4NWYsXG4gICAgICAvLyBfXG4gICAgICAweDAzMmU6IDB4N2MsXG4gICAgICAvLyB8XG4gICAgICAweDAzMmY6IDB4N2UsXG4gICAgICAvLyB+XG4gICAgICAweDAzMzA6IDB4YzQsXG4gICAgICAvLyDDhFxuICAgICAgMHgwMzMxOiAweGU0LFxuICAgICAgLy8gw6RcbiAgICAgIDB4MDMzMjogMHhkNixcbiAgICAgIC8vIMOWXG4gICAgICAweDAzMzM6IDB4ZjYsXG4gICAgICAvLyDDtlxuICAgICAgMHgwMzM0OiAweGRmLFxuICAgICAgLy8gw59cbiAgICAgIDB4MDMzNTogMHhhNSxcbiAgICAgIC8vIMKlXG4gICAgICAweDAzMzY6IDB4YTQsXG4gICAgICAvLyDCpFxuICAgICAgMHgwMzM3OiAweDI1MDIsXG4gICAgICAvLyDilIJcbiAgICAgIDB4MDMzODogMHhjNSxcbiAgICAgIC8vIMOFXG4gICAgICAweDAzMzk6IDB4ZTUsXG4gICAgICAvLyDDpVxuICAgICAgMHgwMzNhOiAweGQ4LFxuICAgICAgLy8gw5hcbiAgICAgIDB4MDMzYjogMHhmOCxcbiAgICAgIC8vIMO4XG4gICAgICAweDAzM2M6IDB4MjUwYyxcbiAgICAgIC8vIOKUjFxuICAgICAgMHgwMzNkOiAweDI1MTAsXG4gICAgICAvLyDilJBcbiAgICAgIDB4MDMzZTogMHgyNTE0LFxuICAgICAgLy8g4pSUXG4gICAgICAweDAzM2Y6IDB4MjUxOCAvLyDilJhcblxuICAgIH07XG5cbiAgICB2YXIgZ2V0Q2hhckZyb21Db2RlID0gZnVuY3Rpb24gZ2V0Q2hhckZyb21Db2RlKGNvZGUpIHtcbiAgICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgY29kZSA9IENIQVJBQ1RFUl9UUkFOU0xBVElPTltjb2RlXSB8fCBjb2RlO1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgfTsgLy8gdGhlIGluZGV4IG9mIHRoZSBsYXN0IHJvdyBpbiBhIENFQS02MDggZGlzcGxheSBidWZmZXJcblxuXG4gICAgdmFyIEJPVFRPTV9ST1cgPSAxNDsgLy8gVGhpcyBhcnJheSBpcyB1c2VkIGZvciBtYXBwaW5nIFBBQ3MgLT4gcm93ICMsIHNpbmNlIHRoZXJlJ3Mgbm8gd2F5IG9mXG4gICAgLy8gZ2V0dGluZyBpdCB0aHJvdWdoIGJpdCBsb2dpYy5cblxuICAgIHZhciBST1dTID0gWzB4MTEwMCwgMHgxMTIwLCAweDEyMDAsIDB4MTIyMCwgMHgxNTAwLCAweDE1MjAsIDB4MTYwMCwgMHgxNjIwLCAweDE3MDAsIDB4MTcyMCwgMHgxMDAwLCAweDEzMDAsIDB4MTMyMCwgMHgxNDAwLCAweDE0MjBdOyAvLyBDRUEtNjA4IGNhcHRpb25zIGFyZSByZW5kZXJlZCBvbnRvIGEgMzR4MTUgbWF0cml4IG9mIGNoYXJhY3RlclxuICAgIC8vIGNlbGxzLiBUaGUgXCJib3R0b21cIiByb3cgaXMgdGhlIGxhc3QgZWxlbWVudCBpbiB0aGUgb3V0ZXIgYXJyYXkuXG5cbiAgICB2YXIgY3JlYXRlRGlzcGxheUJ1ZmZlciA9IGZ1bmN0aW9uIGNyZWF0ZURpc3BsYXlCdWZmZXIoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICAgICAgaSA9IEJPVFRPTV9ST1cgKyAxO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdmFyIENlYTYwOFN0cmVhbSA9IGZ1bmN0aW9uIENlYTYwOFN0cmVhbShmaWVsZCwgZGF0YUNoYW5uZWwpIHtcbiAgICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5maWVsZF8gPSBmaWVsZCB8fCAwO1xuICAgICAgdGhpcy5kYXRhQ2hhbm5lbF8gPSBkYXRhQ2hhbm5lbCB8fCAwO1xuICAgICAgdGhpcy5uYW1lXyA9ICdDQycgKyAoKHRoaXMuZmllbGRfIDw8IDEgfCB0aGlzLmRhdGFDaGFubmVsXykgKyAxKTtcbiAgICAgIHRoaXMuc2V0Q29uc3RhbnRzKCk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgICAgdmFyIGRhdGEsIHN3YXAsIGNoYXIwLCBjaGFyMSwgdGV4dDsgLy8gcmVtb3ZlIHRoZSBwYXJpdHkgYml0c1xuXG4gICAgICAgIGRhdGEgPSBwYWNrZXQuY2NEYXRhICYgMHg3ZjdmOyAvLyBpZ25vcmUgZHVwbGljYXRlIGNvbnRyb2wgY29kZXM7IHRoZSBzcGVjIGRlbWFuZHMgdGhleSdyZSBzZW50IHR3aWNlXG5cbiAgICAgICAgaWYgKGRhdGEgPT09IHRoaXMubGFzdENvbnRyb2xDb2RlXykge1xuICAgICAgICAgIHRoaXMubGFzdENvbnRyb2xDb2RlXyA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFN0b3JlIGNvbnRyb2wgY29kZXNcblxuXG4gICAgICAgIGlmICgoZGF0YSAmIDB4ZjAwMCkgPT09IDB4MTAwMCkge1xuICAgICAgICAgIHRoaXMubGFzdENvbnRyb2xDb2RlXyA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSAhPT0gdGhpcy5QQURESU5HXykge1xuICAgICAgICAgIHRoaXMubGFzdENvbnRyb2xDb2RlXyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjaGFyMCA9IGRhdGEgPj4+IDg7XG4gICAgICAgIGNoYXIxID0gZGF0YSAmIDB4ZmY7XG5cbiAgICAgICAgaWYgKGRhdGEgPT09IHRoaXMuUEFERElOR18pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gdGhpcy5SRVNVTUVfQ0FQVElPTl9MT0FESU5HXykge1xuICAgICAgICAgIHRoaXMubW9kZV8gPSAncG9wT24nO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuRU5EX09GX0NBUFRJT05fKSB7XG4gICAgICAgICAgLy8gSWYgYW4gRU9DIGlzIHJlY2VpdmVkIHdoaWxlIGluIHBhaW50LW9uIG1vZGUsIHRoZSBkaXNwbGF5ZWQgY2FwdGlvblxuICAgICAgICAgIC8vIHRleHQgc2hvdWxkIGJlIHN3YXBwZWQgdG8gbm9uLWRpc3BsYXllZCBtZW1vcnkgYXMgaWYgaXQgd2FzIGEgcG9wLW9uXG4gICAgICAgICAgLy8gY2FwdGlvbi4gQmVjYXVzZSBvZiB0aGF0LCB3ZSBzaG91bGQgZXhwbGljaXRseSBzd2l0Y2ggYmFjayB0byBwb3Atb25cbiAgICAgICAgICAvLyBtb2RlXG4gICAgICAgICAgdGhpcy5tb2RlXyA9ICdwb3BPbic7XG4gICAgICAgICAgdGhpcy5jbGVhckZvcm1hdHRpbmcocGFja2V0LnB0cyk7IC8vIGlmIGEgY2FwdGlvbiB3YXMgYmVpbmcgZGlzcGxheWVkLCBpdCdzIGdvbmUgbm93XG5cbiAgICAgICAgICB0aGlzLmZsdXNoRGlzcGxheWVkKHBhY2tldC5wdHMpOyAvLyBmbGlwIG1lbW9yeVxuXG4gICAgICAgICAgc3dhcCA9IHRoaXMuZGlzcGxheWVkXztcbiAgICAgICAgICB0aGlzLmRpc3BsYXllZF8gPSB0aGlzLm5vbkRpc3BsYXllZF87XG4gICAgICAgICAgdGhpcy5ub25EaXNwbGF5ZWRfID0gc3dhcDsgLy8gc3RhcnQgbWVhc3VyaW5nIHRoZSB0aW1lIHRvIGRpc3BsYXkgdGhlIGNhcHRpb25cblxuICAgICAgICAgIHRoaXMuc3RhcnRQdHNfID0gcGFja2V0LnB0cztcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhID09PSB0aGlzLlJPTExfVVBfMl9ST1dTXykge1xuICAgICAgICAgIHRoaXMucm9sbFVwUm93c18gPSAyO1xuICAgICAgICAgIHRoaXMuc2V0Um9sbFVwKHBhY2tldC5wdHMpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuUk9MTF9VUF8zX1JPV1NfKSB7XG4gICAgICAgICAgdGhpcy5yb2xsVXBSb3dzXyA9IDM7XG4gICAgICAgICAgdGhpcy5zZXRSb2xsVXAocGFja2V0LnB0cyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gdGhpcy5ST0xMX1VQXzRfUk9XU18pIHtcbiAgICAgICAgICB0aGlzLnJvbGxVcFJvd3NfID0gNDtcbiAgICAgICAgICB0aGlzLnNldFJvbGxVcChwYWNrZXQucHRzKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhID09PSB0aGlzLkNBUlJJQUdFX1JFVFVSTl8pIHtcbiAgICAgICAgICB0aGlzLmNsZWFyRm9ybWF0dGluZyhwYWNrZXQucHRzKTtcbiAgICAgICAgICB0aGlzLmZsdXNoRGlzcGxheWVkKHBhY2tldC5wdHMpO1xuICAgICAgICAgIHRoaXMuc2hpZnRSb3dzVXBfKCk7XG4gICAgICAgICAgdGhpcy5zdGFydFB0c18gPSBwYWNrZXQucHRzO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuQkFDS1NQQUNFXykge1xuICAgICAgICAgIGlmICh0aGlzLm1vZGVfID09PSAncG9wT24nKSB7XG4gICAgICAgICAgICB0aGlzLm5vbkRpc3BsYXllZF9bdGhpcy5yb3dfXSA9IHRoaXMubm9uRGlzcGxheWVkX1t0aGlzLnJvd19dLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93X10gPSB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfXS5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHRoaXMuRVJBU0VfRElTUExBWUVEX01FTU9SWV8pIHtcbiAgICAgICAgICB0aGlzLmZsdXNoRGlzcGxheWVkKHBhY2tldC5wdHMpO1xuICAgICAgICAgIHRoaXMuZGlzcGxheWVkXyA9IGNyZWF0ZURpc3BsYXlCdWZmZXIoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhID09PSB0aGlzLkVSQVNFX05PTl9ESVNQTEFZRURfTUVNT1JZXykge1xuICAgICAgICAgIHRoaXMubm9uRGlzcGxheWVkXyA9IGNyZWF0ZURpc3BsYXlCdWZmZXIoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhID09PSB0aGlzLlJFU1VNRV9ESVJFQ1RfQ0FQVElPTklOR18pIHtcbiAgICAgICAgICBpZiAodGhpcy5tb2RlXyAhPT0gJ3BhaW50T24nKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBUaGlzIHNob3VsZCBiZSByZW1vdmVkIHdoZW4gcHJvcGVyIGNhcHRpb24gcG9zaXRpb25pbmcgaXNcbiAgICAgICAgICAgIC8vIGltcGxlbWVudGVkXG4gICAgICAgICAgICB0aGlzLmZsdXNoRGlzcGxheWVkKHBhY2tldC5wdHMpO1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRfID0gY3JlYXRlRGlzcGxheUJ1ZmZlcigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMubW9kZV8gPSAncGFpbnRPbic7XG4gICAgICAgICAgdGhpcy5zdGFydFB0c18gPSBwYWNrZXQucHRzOyAvLyBBcHBlbmQgc3BlY2lhbCBjaGFyYWN0ZXJzIHRvIGNhcHRpb24gdGV4dFxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTcGVjaWFsQ2hhcmFjdGVyKGNoYXIwLCBjaGFyMSkpIHtcbiAgICAgICAgICAvLyBCaXRtYXNrIGNoYXIwIHNvIHRoYXQgd2UgY2FuIGFwcGx5IGNoYXJhY3RlciB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgICAgICAvLyByZWdhcmRsZXNzIG9mIGZpZWxkIGFuZCBkYXRhIGNoYW5uZWwuXG4gICAgICAgICAgLy8gVGhlbiBieXRlLXNoaWZ0IHRvIHRoZSBsZWZ0IGFuZCBPUiB3aXRoIGNoYXIxIHNvIHdlIGNhbiBwYXNzIHRoZVxuICAgICAgICAgIC8vIGVudGlyZSBjaGFyYWN0ZXIgY29kZSB0byBgZ2V0Q2hhckZyb21Db2RlYC5cbiAgICAgICAgICBjaGFyMCA9IChjaGFyMCAmIDB4MDMpIDw8IDg7XG4gICAgICAgICAgdGV4dCA9IGdldENoYXJGcm9tQ29kZShjaGFyMCB8IGNoYXIxKTtcbiAgICAgICAgICB0aGlzW3RoaXMubW9kZV9dKHBhY2tldC5wdHMsIHRleHQpO1xuICAgICAgICAgIHRoaXMuY29sdW1uXysrOyAvLyBBcHBlbmQgZXh0ZW5kZWQgY2hhcmFjdGVycyB0byBjYXB0aW9uIHRleHRcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRXh0Q2hhcmFjdGVyKGNoYXIwLCBjaGFyMSkpIHtcbiAgICAgICAgICAvLyBFeHRlbmRlZCBjaGFyYWN0ZXJzIGFsd2F5cyBmb2xsb3cgdGhlaXIgXCJub24tZXh0ZW5kZWRcIiBlcXVpdmFsZW50cy5cbiAgICAgICAgICAvLyBJRSBpZiBhIFwiw6hcIiBpcyBkZXNpcmVkLCB5b3UnbGwgYWx3YXlzIHJlY2VpdmUgXCJlw6hcIjsgbm9uLWNvbXBsaWFudFxuICAgICAgICAgIC8vIGRlY29kZXJzIGFyZSBzdXBwb3NlZCB0byBkcm9wIHRoZSBcIsOoXCIsIHdoaWxlIGNvbXBsaWFudCBkZWNvZGVyc1xuICAgICAgICAgIC8vIGJhY2tzcGFjZSB0aGUgXCJlXCIgYW5kIGluc2VydCBcIsOoXCIuXG4gICAgICAgICAgLy8gRGVsZXRlIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXJcbiAgICAgICAgICBpZiAodGhpcy5tb2RlXyA9PT0gJ3BvcE9uJykge1xuICAgICAgICAgICAgdGhpcy5ub25EaXNwbGF5ZWRfW3RoaXMucm93X10gPSB0aGlzLm5vbkRpc3BsYXllZF9bdGhpcy5yb3dfXS5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkX1t0aGlzLnJvd19dID0gdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93X10uc2xpY2UoMCwgLTEpO1xuICAgICAgICAgIH0gLy8gQml0bWFzayBjaGFyMCBzbyB0aGF0IHdlIGNhbiBhcHBseSBjaGFyYWN0ZXIgdHJhbnNmb3JtYXRpb25zXG4gICAgICAgICAgLy8gcmVnYXJkbGVzcyBvZiBmaWVsZCBhbmQgZGF0YSBjaGFubmVsLlxuICAgICAgICAgIC8vIFRoZW4gYnl0ZS1zaGlmdCB0byB0aGUgbGVmdCBhbmQgT1Igd2l0aCBjaGFyMSBzbyB3ZSBjYW4gcGFzcyB0aGVcbiAgICAgICAgICAvLyBlbnRpcmUgY2hhcmFjdGVyIGNvZGUgdG8gYGdldENoYXJGcm9tQ29kZWAuXG5cblxuICAgICAgICAgIGNoYXIwID0gKGNoYXIwICYgMHgwMykgPDwgODtcbiAgICAgICAgICB0ZXh0ID0gZ2V0Q2hhckZyb21Db2RlKGNoYXIwIHwgY2hhcjEpO1xuICAgICAgICAgIHRoaXNbdGhpcy5tb2RlX10ocGFja2V0LnB0cywgdGV4dCk7XG4gICAgICAgICAgdGhpcy5jb2x1bW5fKys7IC8vIFByb2Nlc3MgbWlkLXJvdyBjb2Rlc1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNNaWRSb3dDb2RlKGNoYXIwLCBjaGFyMSkpIHtcbiAgICAgICAgICAvLyBBdHRyaWJ1dGVzIGFyZSBub3QgYWRkaXRpdmUsIHNvIGNsZWFyIGFsbCBmb3JtYXR0aW5nXG4gICAgICAgICAgdGhpcy5jbGVhckZvcm1hdHRpbmcocGFja2V0LnB0cyk7IC8vIEFjY29yZGluZyB0byB0aGUgc3RhbmRhcmQsIG1pZC1yb3cgY29kZXNcbiAgICAgICAgICAvLyBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCBzcGFjZXMsIHNvIGFkZCBvbmUgbm93XG5cbiAgICAgICAgICB0aGlzW3RoaXMubW9kZV9dKHBhY2tldC5wdHMsICcgJyk7XG4gICAgICAgICAgdGhpcy5jb2x1bW5fKys7XG5cbiAgICAgICAgICBpZiAoKGNoYXIxICYgMHhlKSA9PT0gMHhlKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEZvcm1hdHRpbmcocGFja2V0LnB0cywgWydpJ10pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgoY2hhcjEgJiAweDEpID09PSAweDEpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRm9ybWF0dGluZyhwYWNrZXQucHRzLCBbJ3UnXSk7XG4gICAgICAgICAgfSAvLyBEZXRlY3Qgb2Zmc2V0IGNvbnRyb2wgY29kZXMgYW5kIGFkanVzdCBjdXJzb3JcblxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNPZmZzZXRDb250cm9sQ29kZShjaGFyMCwgY2hhcjEpKSB7XG4gICAgICAgICAgLy8gQ3Vyc29yIHBvc2l0aW9uIGlzIHNldCBieSBpbmRlbnQgUEFDIChzZWUgYmVsb3cpIGluIDQtY29sdW1uXG4gICAgICAgICAgLy8gaW5jcmVtZW50cywgd2l0aCBhbiBhZGRpdGlvbmFsIG9mZnNldCBjb2RlIG9mIDEtMyB0byByZWFjaCBhbnlcbiAgICAgICAgICAvLyBvZiB0aGUgMzIgY29sdW1ucyBzcGVjaWZpZWQgYnkgQ0VBLTYwOC4gU28gYWxsIHdlIG5lZWQgdG8gZG9cbiAgICAgICAgICAvLyBoZXJlIGlzIGluY3JlbWVudCB0aGUgY29sdW1uIGN1cnNvciBieSB0aGUgZ2l2ZW4gb2Zmc2V0LlxuICAgICAgICAgIHRoaXMuY29sdW1uXyArPSBjaGFyMSAmIDB4MDM7IC8vIERldGVjdCBQQUNzIChQcmVhbWJsZSBBZGRyZXNzIENvZGVzKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNQQUMoY2hhcjAsIGNoYXIxKSkge1xuICAgICAgICAgIC8vIFRoZXJlJ3Mgbm8gbG9naWMgZm9yIFBBQyAtPiByb3cgbWFwcGluZywgc28gd2UgaGF2ZSB0byBqdXN0XG4gICAgICAgICAgLy8gZmluZCB0aGUgcm93IGNvZGUgaW4gYW4gYXJyYXkgYW5kIHVzZSBpdHMgaW5kZXggOihcbiAgICAgICAgICB2YXIgcm93ID0gUk9XUy5pbmRleE9mKGRhdGEgJiAweDFmMjApOyAvLyBDb25maWd1cmUgdGhlIGNhcHRpb24gd2luZG93IGlmIHdlJ3JlIGluIHJvbGwtdXAgbW9kZVxuXG4gICAgICAgICAgaWYgKHRoaXMubW9kZV8gPT09ICdyb2xsVXAnKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGltcGxpZXMgdGhhdCB0aGUgYmFzZSByb3cgaXMgaW5jb3JyZWN0bHkgc2V0LlxuICAgICAgICAgICAgLy8gQXMgcGVyIHRoZSByZWNvbW1lbmRhdGlvbiBpbiBDRUEtNjA4KEJhc2UgUm93IEltcGxlbWVudGF0aW9uKSwgZGVmZXIgdG8gdGhlIG51bWJlclxuICAgICAgICAgICAgLy8gb2Ygcm9sbC11cCByb3dzIHNldC5cbiAgICAgICAgICAgIGlmIChyb3cgLSB0aGlzLnJvbGxVcFJvd3NfICsgMSA8IDApIHtcbiAgICAgICAgICAgICAgcm93ID0gdGhpcy5yb2xsVXBSb3dzXyAtIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0Um9sbFVwKHBhY2tldC5wdHMsIHJvdyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJvdyAhPT0gdGhpcy5yb3dfKSB7XG4gICAgICAgICAgICAvLyBmb3JtYXR0aW5nIGlzIG9ubHkgcGVyc2lzdGVudCBmb3IgY3VycmVudCByb3dcbiAgICAgICAgICAgIHRoaXMuY2xlYXJGb3JtYXR0aW5nKHBhY2tldC5wdHMpO1xuICAgICAgICAgICAgdGhpcy5yb3dfID0gcm93O1xuICAgICAgICAgIH0gLy8gQWxsIFBBQ3MgY2FuIGFwcGx5IHVuZGVybGluZSwgc28gZGV0ZWN0IGFuZCBhcHBseVxuICAgICAgICAgIC8vIChBbGwgb2RkLW51bWJlcmVkIHNlY29uZCBieXRlcyBzZXQgdW5kZXJsaW5lKVxuXG5cbiAgICAgICAgICBpZiAoY2hhcjEgJiAweDEgJiYgdGhpcy5mb3JtYXR0aW5nXy5pbmRleE9mKCd1JykgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEZvcm1hdHRpbmcocGFja2V0LnB0cywgWyd1J10pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgoZGF0YSAmIDB4MTApID09PSAweDEwKSB7XG4gICAgICAgICAgICAvLyBXZSd2ZSBnb3QgYW4gaW5kZW50IGxldmVsIGNvZGUuIEVhY2ggc3VjY2Vzc2l2ZSBldmVuIG51bWJlclxuICAgICAgICAgICAgLy8gaW5jcmVtZW50cyB0aGUgY29sdW1uIGN1cnNvciBieSA0LCBzbyB3ZSBjYW4gZ2V0IHRoZSBkZXNpcmVkXG4gICAgICAgICAgICAvLyBjb2x1bW4gcG9zaXRpb24gYnkgYml0LXNoaWZ0aW5nIHRvIHRoZSByaWdodCAodG8gZ2V0IG4vMilcbiAgICAgICAgICAgIC8vIGFuZCBtdWx0aXBseWluZyBieSA0LlxuICAgICAgICAgICAgdGhpcy5jb2x1bW5fID0gKChkYXRhICYgMHhlKSA+PiAxKSAqIDQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuaXNDb2xvclBBQyhjaGFyMSkpIHtcbiAgICAgICAgICAgIC8vIGl0J3MgYSBjb2xvciBjb2RlLCB0aG91Z2ggd2Ugb25seSBzdXBwb3J0IHdoaXRlLCB3aGljaFxuICAgICAgICAgICAgLy8gY2FuIGJlIGVpdGhlciBub3JtYWwgb3IgaXRhbGljaXplZC4gd2hpdGUgaXRhbGljcyBjYW4gYmVcbiAgICAgICAgICAgIC8vIGVpdGhlciAweDRlIG9yIDB4NmUgZGVwZW5kaW5nIG9uIHRoZSByb3csIHNvIHdlIGp1c3RcbiAgICAgICAgICAgIC8vIGJpdHdpc2UtYW5kIHdpdGggMHhlIHRvIHNlZSBpZiBpdGFsaWNzIHNob3VsZCBiZSB0dXJuZWQgb25cbiAgICAgICAgICAgIGlmICgoY2hhcjEgJiAweGUpID09PSAweGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5hZGRGb3JtYXR0aW5nKHBhY2tldC5wdHMsIFsnaSddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIFdlIGhhdmUgYSBub3JtYWwgY2hhcmFjdGVyIGluIGNoYXIwLCBhbmQgcG9zc2libHkgb25lIGluIGNoYXIxXG5cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzTm9ybWFsQ2hhcihjaGFyMCkpIHtcbiAgICAgICAgICBpZiAoY2hhcjEgPT09IDB4MDApIHtcbiAgICAgICAgICAgIGNoYXIxID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0ZXh0ID0gZ2V0Q2hhckZyb21Db2RlKGNoYXIwKTtcbiAgICAgICAgICB0ZXh0ICs9IGdldENoYXJGcm9tQ29kZShjaGFyMSk7XG4gICAgICAgICAgdGhpc1t0aGlzLm1vZGVfXShwYWNrZXQucHRzLCB0ZXh0KTtcbiAgICAgICAgICB0aGlzLmNvbHVtbl8gKz0gdGV4dC5sZW5ndGg7XG4gICAgICAgIH0gLy8gZmluaXNoIGRhdGEgcHJvY2Vzc2luZ1xuXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpOyAvLyBUcmlnZ2VyIGEgY3VlIHBvaW50IHRoYXQgY2FwdHVyZXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlXG4gICAgLy8gZGlzcGxheSBidWZmZXJcblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuZmx1c2hEaXNwbGF5ZWQgPSBmdW5jdGlvbiAocHRzKSB7XG4gICAgICB2YXIgY29udGVudCA9IHRoaXMuZGlzcGxheWVkXyAvLyByZW1vdmUgc3BhY2VzIGZyb20gdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHN0cmluZ1xuICAgICAgLm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIHJvdy50cmltKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBPcmRpbmFyaWx5LCB0aGlzIHNob3VsZG4ndCBoYXBwZW4uIEhvd2V2ZXIsIGNhcHRpb25cbiAgICAgICAgICAvLyBwYXJzaW5nIGVycm9ycyBzaG91bGQgbm90IHRocm93IGV4Y2VwdGlvbnMgYW5kXG4gICAgICAgICAgLy8gYnJlYWsgcGxheWJhY2suXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdTa2lwcGluZyBtYWxmb3JtZWQgY2FwdGlvbi4nKTtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgIH0pIC8vIGNvbWJpbmUgYWxsIHRleHQgcm93cyB0byBkaXNwbGF5IGluIG9uZSBjdWVcbiAgICAgIC5qb2luKCdcXG4nKSAvLyBhbmQgcmVtb3ZlIGJsYW5rIHJvd3MgZnJvbSB0aGUgc3RhcnQgYW5kIGVuZCwgYnV0IG5vdCB0aGUgbWlkZGxlXG4gICAgICAucmVwbGFjZSgvXlxcbit8XFxuKyQvZywgJycpO1xuXG4gICAgICBpZiAoY29udGVudC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywge1xuICAgICAgICAgIHN0YXJ0UHRzOiB0aGlzLnN0YXJ0UHRzXyxcbiAgICAgICAgICBlbmRQdHM6IHB0cyxcbiAgICAgICAgICB0ZXh0OiBjb250ZW50LFxuICAgICAgICAgIHN0cmVhbTogdGhpcy5uYW1lX1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFplcm8gb3V0IHRoZSBkYXRhLCB1c2VkIGZvciBzdGFydHVwIGFuZCBvbiBzZWVrXG4gICAgICovXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1vZGVfID0gJ3BvcE9uJzsgLy8gV2hlbiBpbiByb2xsLXVwIG1vZGUsIHRoZSBpbmRleCBvZiB0aGUgbGFzdCByb3cgdGhhdCB3aWxsXG4gICAgICAvLyBhY3R1YWxseSBkaXNwbGF5IGNhcHRpb25zLiBJZiBhIGNhcHRpb24gaXMgc2hpZnRlZCB0byBhIHJvd1xuICAgICAgLy8gd2l0aCBhIGxvd2VyIGluZGV4IHRoYW4gdGhpcywgaXQgaXMgY2xlYXJlZCBmcm9tIHRoZSBkaXNwbGF5XG4gICAgICAvLyBidWZmZXJcblxuICAgICAgdGhpcy50b3BSb3dfID0gMDtcbiAgICAgIHRoaXMuc3RhcnRQdHNfID0gMDtcbiAgICAgIHRoaXMuZGlzcGxheWVkXyA9IGNyZWF0ZURpc3BsYXlCdWZmZXIoKTtcbiAgICAgIHRoaXMubm9uRGlzcGxheWVkXyA9IGNyZWF0ZURpc3BsYXlCdWZmZXIoKTtcbiAgICAgIHRoaXMubGFzdENvbnRyb2xDb2RlXyA9IG51bGw7IC8vIFRyYWNrIHJvdyBhbmQgY29sdW1uIGZvciBwcm9wZXIgbGluZS1icmVha2luZyBhbmQgc3BhY2luZ1xuXG4gICAgICB0aGlzLmNvbHVtbl8gPSAwO1xuICAgICAgdGhpcy5yb3dfID0gQk9UVE9NX1JPVztcbiAgICAgIHRoaXMucm9sbFVwUm93c18gPSAyOyAvLyBUaGlzIHZhcmlhYmxlIGhvbGRzIGN1cnJlbnRseS1hcHBsaWVkIGZvcm1hdHRpbmdcblxuICAgICAgdGhpcy5mb3JtYXR0aW5nXyA9IFtdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB1cCBjb250cm9sIGNvZGUgYW5kIHJlbGF0ZWQgY29uc3RhbnRzIGZvciB0aGlzIGluc3RhbmNlXG4gICAgICovXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuc2V0Q29uc3RhbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzIGhhdmUgdGhlc2UgdXNlczpcbiAgICAgIC8vIGV4dF8gOiAgICBjaGFyMCBmb3IgbWlkLXJvdyBjb2RlcywgYW5kIHRoZSBiYXNlIGZvciBleHRlbmRlZFxuICAgICAgLy8gICAgICAgICAgIGNoYXJzIChleHRfKzAsIGV4dF8rMSwgYW5kIGV4dF8rMiBhcmUgY2hhcjBzIGZvclxuICAgICAgLy8gICAgICAgICAgIGV4dGVuZGVkIGNvZGVzKVxuICAgICAgLy8gY29udHJvbF86IGNoYXIwIGZvciBjb250cm9sIGNvZGVzLCBleGNlcHQgYnl0ZS1zaGlmdGVkIHRvIHRoZVxuICAgICAgLy8gICAgICAgICAgIGxlZnQgc28gdGhhdCB3ZSBjYW4gZG8gdGhpcy5jb250cm9sXyB8IENPTlRST0xfQ09ERVxuICAgICAgLy8gb2Zmc2V0XzogIGNoYXIwIGZvciB0YWIgb2Zmc2V0IGNvZGVzXG4gICAgICAvL1xuICAgICAgLy8gSXQncyBhbHNvIHdvcnRoIG5vdGluZyB0aGF0IGNvbnRyb2wgY29kZXMsIGFuZCBfb25seV8gY29udHJvbCBjb2RlcyxcbiAgICAgIC8vIGRpZmZlciBiZXR3ZWVuIGZpZWxkIDEgYW5kIGZpZWxkMi4gRmllbGQgMiBjb250cm9sIGNvZGVzIGFyZSBhbHdheXNcbiAgICAgIC8vIHRoZWlyIGZpZWxkIDEgdmFsdWUgcGx1cyAxLiBUaGF0J3Mgd2h5IHRoZXJlJ3MgdGhlIFwifCBmaWVsZFwiIG9uIHRoZVxuICAgICAgLy8gY29udHJvbCB2YWx1ZS5cbiAgICAgIGlmICh0aGlzLmRhdGFDaGFubmVsXyA9PT0gMCkge1xuICAgICAgICB0aGlzLkJBU0VfID0gMHgxMDtcbiAgICAgICAgdGhpcy5FWFRfID0gMHgxMTtcbiAgICAgICAgdGhpcy5DT05UUk9MXyA9ICgweDE0IHwgdGhpcy5maWVsZF8pIDw8IDg7XG4gICAgICAgIHRoaXMuT0ZGU0VUXyA9IDB4MTc7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YUNoYW5uZWxfID09PSAxKSB7XG4gICAgICAgIHRoaXMuQkFTRV8gPSAweDE4O1xuICAgICAgICB0aGlzLkVYVF8gPSAweDE5O1xuICAgICAgICB0aGlzLkNPTlRST0xfID0gKDB4MWMgfCB0aGlzLmZpZWxkXykgPDwgODtcbiAgICAgICAgdGhpcy5PRkZTRVRfID0gMHgxZjtcbiAgICAgIH0gLy8gQ29uc3RhbnRzIGZvciB0aGUgTFNCeXRlIGNvbW1hbmQgY29kZXMgcmVjb2duaXplZCBieSBDZWE2MDhTdHJlYW0uIFRoaXNcbiAgICAgIC8vIGxpc3QgaXMgbm90IGV4aGF1c3RpdmUuIEZvciBhIG1vcmUgY29tcHJlaGVuc2l2ZSBsaXN0aW5nIGFuZCBzZW1hbnRpY3Mgc2VlXG4gICAgICAvLyBodHRwOi8vd3d3Lmdwby5nb3YvZmRzeXMvcGtnL0NGUi0yMDEwLXRpdGxlNDctdm9sMS9wZGYvQ0ZSLTIwMTAtdGl0bGU0Ny12b2wxLXNlYzE1LTExOS5wZGZcbiAgICAgIC8vIFBhZGRpbmdcblxuXG4gICAgICB0aGlzLlBBRERJTkdfID0gMHgwMDAwOyAvLyBQb3Atb24gTW9kZVxuXG4gICAgICB0aGlzLlJFU1VNRV9DQVBUSU9OX0xPQURJTkdfID0gdGhpcy5DT05UUk9MXyB8IDB4MjA7XG4gICAgICB0aGlzLkVORF9PRl9DQVBUSU9OXyA9IHRoaXMuQ09OVFJPTF8gfCAweDJmOyAvLyBSb2xsLXVwIE1vZGVcblxuICAgICAgdGhpcy5ST0xMX1VQXzJfUk9XU18gPSB0aGlzLkNPTlRST0xfIHwgMHgyNTtcbiAgICAgIHRoaXMuUk9MTF9VUF8zX1JPV1NfID0gdGhpcy5DT05UUk9MXyB8IDB4MjY7XG4gICAgICB0aGlzLlJPTExfVVBfNF9ST1dTXyA9IHRoaXMuQ09OVFJPTF8gfCAweDI3O1xuICAgICAgdGhpcy5DQVJSSUFHRV9SRVRVUk5fID0gdGhpcy5DT05UUk9MXyB8IDB4MmQ7IC8vIHBhaW50LW9uIG1vZGVcblxuICAgICAgdGhpcy5SRVNVTUVfRElSRUNUX0NBUFRJT05JTkdfID0gdGhpcy5DT05UUk9MXyB8IDB4Mjk7IC8vIEVyYXN1cmVcblxuICAgICAgdGhpcy5CQUNLU1BBQ0VfID0gdGhpcy5DT05UUk9MXyB8IDB4MjE7XG4gICAgICB0aGlzLkVSQVNFX0RJU1BMQVlFRF9NRU1PUllfID0gdGhpcy5DT05UUk9MXyB8IDB4MmM7XG4gICAgICB0aGlzLkVSQVNFX05PTl9ESVNQTEFZRURfTUVNT1JZXyA9IHRoaXMuQ09OVFJPTF8gfCAweDJlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV0ZWN0cyBpZiB0aGUgMi1ieXRlIHBhY2tldCBkYXRhIGlzIGEgc3BlY2lhbCBjaGFyYWN0ZXJcbiAgICAgKlxuICAgICAqIFNwZWNpYWwgY2hhcmFjdGVycyBoYXZlIGEgc2Vjb25kIGJ5dGUgaW4gdGhlIHJhbmdlIDB4MzAgdG8gMHgzZixcbiAgICAgKiB3aXRoIHRoZSBmaXJzdCBieXRlIGJlaW5nIDB4MTEgKGZvciBkYXRhIGNoYW5uZWwgMSkgb3IgMHgxOSAoZm9yXG4gICAgICogZGF0YSBjaGFubmVsIDIpLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjAgVGhlIGZpcnN0IGJ5dGVcbiAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMSBUaGUgc2Vjb25kIGJ5dGVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBXaGV0aGVyIHRoZSAyIGJ5dGVzIGFyZSBhbiBzcGVjaWFsIGNoYXJhY3RlclxuICAgICAqL1xuXG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLmlzU3BlY2lhbENoYXJhY3RlciA9IGZ1bmN0aW9uIChjaGFyMCwgY2hhcjEpIHtcbiAgICAgIHJldHVybiBjaGFyMCA9PT0gdGhpcy5FWFRfICYmIGNoYXIxID49IDB4MzAgJiYgY2hhcjEgPD0gMHgzZjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVjdHMgaWYgdGhlIDItYnl0ZSBwYWNrZXQgZGF0YSBpcyBhbiBleHRlbmRlZCBjaGFyYWN0ZXJcbiAgICAgKlxuICAgICAqIEV4dGVuZGVkIGNoYXJhY3RlcnMgaGF2ZSBhIHNlY29uZCBieXRlIGluIHRoZSByYW5nZSAweDIwIHRvIDB4M2YsXG4gICAgICogd2l0aCB0aGUgZmlyc3QgYnl0ZSBiZWluZyAweDEyIG9yIDB4MTMgKGZvciBkYXRhIGNoYW5uZWwgMSkgb3JcbiAgICAgKiAweDFhIG9yIDB4MWIgKGZvciBkYXRhIGNoYW5uZWwgMikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMCBUaGUgZmlyc3QgYnl0ZVxuICAgICAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIxIFRoZSBzZWNvbmQgYnl0ZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIFdoZXRoZXIgdGhlIDIgYnl0ZXMgYXJlIGFuIGV4dGVuZGVkIGNoYXJhY3RlclxuICAgICAqL1xuXG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLmlzRXh0Q2hhcmFjdGVyID0gZnVuY3Rpb24gKGNoYXIwLCBjaGFyMSkge1xuICAgICAgcmV0dXJuIChjaGFyMCA9PT0gdGhpcy5FWFRfICsgMSB8fCBjaGFyMCA9PT0gdGhpcy5FWFRfICsgMikgJiYgY2hhcjEgPj0gMHgyMCAmJiBjaGFyMSA8PSAweDNmO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV0ZWN0cyBpZiB0aGUgMi1ieXRlIHBhY2tldCBpcyBhIG1pZC1yb3cgY29kZVxuICAgICAqXG4gICAgICogTWlkLXJvdyBjb2RlcyBoYXZlIGEgc2Vjb25kIGJ5dGUgaW4gdGhlIHJhbmdlIDB4MjAgdG8gMHgyZiwgd2l0aFxuICAgICAqIHRoZSBmaXJzdCBieXRlIGJlaW5nIDB4MTEgKGZvciBkYXRhIGNoYW5uZWwgMSkgb3IgMHgxOSAoZm9yIGRhdGFcbiAgICAgKiBjaGFubmVsIDIpLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjAgVGhlIGZpcnN0IGJ5dGVcbiAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMSBUaGUgc2Vjb25kIGJ5dGVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBXaGV0aGVyIHRoZSAyIGJ5dGVzIGFyZSBhIG1pZC1yb3cgY29kZVxuICAgICAqL1xuXG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLmlzTWlkUm93Q29kZSA9IGZ1bmN0aW9uIChjaGFyMCwgY2hhcjEpIHtcbiAgICAgIHJldHVybiBjaGFyMCA9PT0gdGhpcy5FWFRfICYmIGNoYXIxID49IDB4MjAgJiYgY2hhcjEgPD0gMHgyZjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGVjdHMgaWYgdGhlIDItYnl0ZSBwYWNrZXQgaXMgYW4gb2Zmc2V0IGNvbnRyb2wgY29kZVxuICAgICAqXG4gICAgICogT2Zmc2V0IGNvbnRyb2wgY29kZXMgaGF2ZSBhIHNlY29uZCBieXRlIGluIHRoZSByYW5nZSAweDIxIHRvIDB4MjMsXG4gICAgICogd2l0aCB0aGUgZmlyc3QgYnl0ZSBiZWluZyAweDE3IChmb3IgZGF0YSBjaGFubmVsIDEpIG9yIDB4MWYgKGZvclxuICAgICAqIGRhdGEgY2hhbm5lbCAyKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIwIFRoZSBmaXJzdCBieXRlXG4gICAgICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjEgVGhlIHNlY29uZCBieXRlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgV2hldGhlciB0aGUgMiBieXRlcyBhcmUgYW4gb2Zmc2V0IGNvbnRyb2wgY29kZVxuICAgICAqL1xuXG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLmlzT2Zmc2V0Q29udHJvbENvZGUgPSBmdW5jdGlvbiAoY2hhcjAsIGNoYXIxKSB7XG4gICAgICByZXR1cm4gY2hhcjAgPT09IHRoaXMuT0ZGU0VUXyAmJiBjaGFyMSA+PSAweDIxICYmIGNoYXIxIDw9IDB4MjM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXRlY3RzIGlmIHRoZSAyLWJ5dGUgcGFja2V0IGlzIGEgUHJlYW1ibGUgQWRkcmVzcyBDb2RlXG4gICAgICpcbiAgICAgKiBQQUNzIGhhdmUgYSBmaXJzdCBieXRlIGluIHRoZSByYW5nZSAweDEwIHRvIDB4MTcgKGZvciBkYXRhIGNoYW5uZWwgMSlcbiAgICAgKiBvciAweDE4IHRvIDB4MWYgKGZvciBkYXRhIGNoYW5uZWwgMiksIHdpdGggdGhlIHNlY29uZCBieXRlIGluIHRoZVxuICAgICAqIHJhbmdlIDB4NDAgdG8gMHg3Zi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge0ludGVnZXJ9IGNoYXIwIFRoZSBmaXJzdCBieXRlXG4gICAgICogQHBhcmFtICB7SW50ZWdlcn0gY2hhcjEgVGhlIHNlY29uZCBieXRlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgV2hldGhlciB0aGUgMiBieXRlcyBhcmUgYSBQQUNcbiAgICAgKi9cblxuXG4gICAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5pc1BBQyA9IGZ1bmN0aW9uIChjaGFyMCwgY2hhcjEpIHtcbiAgICAgIHJldHVybiBjaGFyMCA+PSB0aGlzLkJBU0VfICYmIGNoYXIwIDwgdGhpcy5CQVNFXyArIDggJiYgY2hhcjEgPj0gMHg0MCAmJiBjaGFyMSA8PSAweDdmO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV0ZWN0cyBpZiBhIHBhY2tldCdzIHNlY29uZCBieXRlIGlzIGluIHRoZSByYW5nZSBvZiBhIFBBQyBjb2xvciBjb2RlXG4gICAgICpcbiAgICAgKiBQQUMgY29sb3IgY29kZXMgaGF2ZSB0aGUgc2Vjb25kIGJ5dGUgYmUgaW4gdGhlIHJhbmdlIDB4NDAgdG8gMHg0Ziwgb3JcbiAgICAgKiAweDYwIHRvIDB4NmYuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyMSBUaGUgc2Vjb25kIGJ5dGVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBXaGV0aGVyIHRoZSBieXRlIGlzIGEgY29sb3IgUEFDXG4gICAgICovXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuaXNDb2xvclBBQyA9IGZ1bmN0aW9uIChjaGFyMSkge1xuICAgICAgcmV0dXJuIGNoYXIxID49IDB4NDAgJiYgY2hhcjEgPD0gMHg0ZiB8fCBjaGFyMSA+PSAweDYwICYmIGNoYXIxIDw9IDB4N2Y7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXRlY3RzIGlmIGEgc2luZ2xlIGJ5dGUgaXMgaW4gdGhlIHJhbmdlIG9mIGEgbm9ybWFsIGNoYXJhY3RlclxuICAgICAqXG4gICAgICogTm9ybWFsIHRleHQgYnl0ZXMgYXJlIGluIHRoZSByYW5nZSAweDIwIHRvIDB4N2YuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBjaGFyICBUaGUgYnl0ZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIFdoZXRoZXIgdGhlIGJ5dGUgaXMgYSBub3JtYWwgY2hhcmFjdGVyXG4gICAgICovXG5cblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuaXNOb3JtYWxDaGFyID0gZnVuY3Rpb24gKF9jaGFyKSB7XG4gICAgICByZXR1cm4gX2NoYXIgPj0gMHgyMCAmJiBfY2hhciA8PSAweDdmO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJlcyByb2xsLXVwXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBwdHMgICAgICAgICBDdXJyZW50IFBUU1xuICAgICAqIEBwYXJhbSAge0ludGVnZXJ9IG5ld0Jhc2VSb3cgIFVzZWQgYnkgUEFDcyB0byBzbGlkZSB0aGUgY3VycmVudCB3aW5kb3cgdG9cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIG5ldyBwb3NpdGlvblxuICAgICAqL1xuXG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLnNldFJvbGxVcCA9IGZ1bmN0aW9uIChwdHMsIG5ld0Jhc2VSb3cpIHtcbiAgICAgIC8vIFJlc2V0IHRoZSBiYXNlIHJvdyB0byB0aGUgYm90dG9tIHJvdyB3aGVuIHN3aXRjaGluZyBtb2Rlc1xuICAgICAgaWYgKHRoaXMubW9kZV8gIT09ICdyb2xsVXAnKSB7XG4gICAgICAgIHRoaXMucm93XyA9IEJPVFRPTV9ST1c7XG4gICAgICAgIHRoaXMubW9kZV8gPSAncm9sbFVwJzsgLy8gU3BlYyBzYXlzIHRvIHdpcGUgbWVtb3JpZXMgd2hlbiBzd2l0Y2hpbmcgdG8gcm9sbC11cFxuXG4gICAgICAgIHRoaXMuZmx1c2hEaXNwbGF5ZWQocHRzKTtcbiAgICAgICAgdGhpcy5ub25EaXNwbGF5ZWRfID0gY3JlYXRlRGlzcGxheUJ1ZmZlcigpO1xuICAgICAgICB0aGlzLmRpc3BsYXllZF8gPSBjcmVhdGVEaXNwbGF5QnVmZmVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdCYXNlUm93ICE9PSB1bmRlZmluZWQgJiYgbmV3QmFzZVJvdyAhPT0gdGhpcy5yb3dfKSB7XG4gICAgICAgIC8vIG1vdmUgY3VycmVudGx5IGRpc3BsYXllZCBjYXB0aW9ucyAodXAgb3IgZG93bikgdG8gdGhlIG5ldyBiYXNlIHJvd1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucm9sbFVwUm93c187IGkrKykge1xuICAgICAgICAgIHRoaXMuZGlzcGxheWVkX1tuZXdCYXNlUm93IC0gaV0gPSB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfIC0gaV07XG4gICAgICAgICAgdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93XyAtIGldID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5ld0Jhc2VSb3cgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdCYXNlUm93ID0gdGhpcy5yb3dfO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRvcFJvd18gPSBuZXdCYXNlUm93IC0gdGhpcy5yb2xsVXBSb3dzXyArIDE7XG4gICAgfTsgLy8gQWRkcyB0aGUgb3BlbmluZyBIVE1MIHRhZyBmb3IgdGhlIHBhc3NlZCBjaGFyYWN0ZXIgdG8gdGhlIGNhcHRpb24gdGV4dCxcbiAgICAvLyBhbmQga2VlcHMgdHJhY2sgb2YgaXQgZm9yIGxhdGVyIGNsb3NpbmdcblxuXG4gICAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5hZGRGb3JtYXR0aW5nID0gZnVuY3Rpb24gKHB0cywgZm9ybWF0KSB7XG4gICAgICB0aGlzLmZvcm1hdHRpbmdfID0gdGhpcy5mb3JtYXR0aW5nXy5jb25jYXQoZm9ybWF0KTtcbiAgICAgIHZhciB0ZXh0ID0gZm9ybWF0LnJlZHVjZShmdW5jdGlvbiAodGV4dCwgZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0ZXh0ICsgJzwnICsgZm9ybWF0ICsgJz4nO1xuICAgICAgfSwgJycpO1xuICAgICAgdGhpc1t0aGlzLm1vZGVfXShwdHMsIHRleHQpO1xuICAgIH07IC8vIEFkZHMgSFRNTCBjbG9zaW5nIHRhZ3MgZm9yIGN1cnJlbnQgZm9ybWF0dGluZyB0byBjYXB0aW9uIHRleHQgYW5kXG4gICAgLy8gY2xlYXJzIHJlbWVtYmVyZWQgZm9ybWF0dGluZ1xuXG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLmNsZWFyRm9ybWF0dGluZyA9IGZ1bmN0aW9uIChwdHMpIHtcbiAgICAgIGlmICghdGhpcy5mb3JtYXR0aW5nXy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGV4dCA9IHRoaXMuZm9ybWF0dGluZ18ucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAodGV4dCwgZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0ZXh0ICsgJzwvJyArIGZvcm1hdCArICc+JztcbiAgICAgIH0sICcnKTtcbiAgICAgIHRoaXMuZm9ybWF0dGluZ18gPSBbXTtcbiAgICAgIHRoaXNbdGhpcy5tb2RlX10ocHRzLCB0ZXh0KTtcbiAgICB9OyAvLyBNb2RlIEltcGxlbWVudGF0aW9uc1xuXG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLnBvcE9uID0gZnVuY3Rpb24gKHB0cywgdGV4dCkge1xuICAgICAgdmFyIGJhc2VSb3cgPSB0aGlzLm5vbkRpc3BsYXllZF9bdGhpcy5yb3dfXTsgLy8gYnVmZmVyIGNoYXJhY3RlcnNcblxuICAgICAgYmFzZVJvdyArPSB0ZXh0O1xuICAgICAgdGhpcy5ub25EaXNwbGF5ZWRfW3RoaXMucm93X10gPSBiYXNlUm93O1xuICAgIH07XG5cbiAgICBDZWE2MDhTdHJlYW0ucHJvdG90eXBlLnJvbGxVcCA9IGZ1bmN0aW9uIChwdHMsIHRleHQpIHtcbiAgICAgIHZhciBiYXNlUm93ID0gdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93X107XG4gICAgICBiYXNlUm93ICs9IHRleHQ7XG4gICAgICB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfXSA9IGJhc2VSb3c7XG4gICAgfTtcblxuICAgIENlYTYwOFN0cmVhbS5wcm90b3R5cGUuc2hpZnRSb3dzVXBfID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGk7IC8vIGNsZWFyIG91dCBpbmFjdGl2ZSByb3dzXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnRvcFJvd187IGkrKykge1xuICAgICAgICB0aGlzLmRpc3BsYXllZF9baV0gPSAnJztcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gdGhpcy5yb3dfICsgMTsgaSA8IEJPVFRPTV9ST1cgKyAxOyBpKyspIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5ZWRfW2ldID0gJyc7XG4gICAgICB9IC8vIHNoaWZ0IGRpc3BsYXllZCByb3dzIHVwXG5cblxuICAgICAgZm9yIChpID0gdGhpcy50b3BSb3dfOyBpIDwgdGhpcy5yb3dfOyBpKyspIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5ZWRfW2ldID0gdGhpcy5kaXNwbGF5ZWRfW2kgKyAxXTtcbiAgICAgIH0gLy8gY2xlYXIgb3V0IHRoZSBib3R0b20gcm93XG5cblxuICAgICAgdGhpcy5kaXNwbGF5ZWRfW3RoaXMucm93X10gPSAnJztcbiAgICB9O1xuXG4gICAgQ2VhNjA4U3RyZWFtLnByb3RvdHlwZS5wYWludE9uID0gZnVuY3Rpb24gKHB0cywgdGV4dCkge1xuICAgICAgdmFyIGJhc2VSb3cgPSB0aGlzLmRpc3BsYXllZF9bdGhpcy5yb3dfXTtcbiAgICAgIGJhc2VSb3cgKz0gdGV4dDtcbiAgICAgIHRoaXMuZGlzcGxheWVkX1t0aGlzLnJvd19dID0gYmFzZVJvdztcbiAgICB9OyAvLyBleHBvcnRzXG5cblxuICAgIHZhciBjYXB0aW9uU3RyZWFtID0ge1xuICAgICAgQ2FwdGlvblN0cmVhbTogQ2FwdGlvblN0cmVhbSxcbiAgICAgIENlYTYwOFN0cmVhbTogQ2VhNjA4U3RyZWFtXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKi9cblxuICAgIHZhciBzdHJlYW1UeXBlcyA9IHtcbiAgICAgIEgyNjRfU1RSRUFNX1RZUEU6IDB4MUIsXG4gICAgICBBRFRTX1NUUkVBTV9UWVBFOiAweDBGLFxuICAgICAgTUVUQURBVEFfU1RSRUFNX1RZUEU6IDB4MTVcbiAgICB9O1xuICAgIHZhciBNQVhfVFMgPSA4NTg5OTM0NTkyO1xuICAgIHZhciBST19USFJFU0ggPSA0Mjk0OTY3Mjk2O1xuICAgIHZhciBUWVBFX1NIQVJFRCA9ICdzaGFyZWQnO1xuXG4gICAgdmFyIGhhbmRsZVJvbGxvdmVyID0gZnVuY3Rpb24gaGFuZGxlUm9sbG92ZXIodmFsdWUsIHJlZmVyZW5jZSkge1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IDE7XG5cbiAgICAgIGlmICh2YWx1ZSA+IHJlZmVyZW5jZSkge1xuICAgICAgICAvLyBJZiB0aGUgY3VycmVudCB0aW1lc3RhbXAgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG91ciByZWZlcmVuY2UgdGltZXN0YW1wIGFuZCB3ZSBkZXRlY3QgYVxuICAgICAgICAvLyB0aW1lc3RhbXAgcm9sbG92ZXIsIHRoaXMgbWVhbnMgdGhlIHJvbGwgb3ZlciBpcyBoYXBwZW5pbmcgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbi5cbiAgICAgICAgLy8gRXhhbXBsZSBzY2VuYXJpbzogRW50ZXIgYSBsb25nIHN0cmVhbS92aWRlbyBqdXN0IGFmdGVyIGEgcm9sbG92ZXIgb2NjdXJyZWQuIFRoZSByZWZlcmVuY2VcbiAgICAgICAgLy8gcG9pbnQgd2lsbCBiZSBzZXQgdG8gYSBzbWFsbCBudW1iZXIsIGUuZy4gMS4gVGhlIHVzZXIgdGhlbiBzZWVrcyBiYWNrd2FyZHMgb3ZlciB0aGVcbiAgICAgICAgLy8gcm9sbG92ZXIgcG9pbnQuIEluIGxvYWRpbmcgdGhpcyBzZWdtZW50LCB0aGUgdGltZXN0YW1wIHZhbHVlcyB3aWxsIGJlIHZlcnkgbGFyZ2UsXG4gICAgICAgIC8vIGUuZy4gMl4zMyAtIDEuIFNpbmNlIHRoaXMgY29tZXMgYmVmb3JlIHRoZSBkYXRhIHdlIGxvYWRlZCBwcmV2aW91c2x5LCB3ZSB3YW50IHRvIGFkanVzdFxuICAgICAgICAvLyB0aGUgdGltZSBzdGFtcCB0byBiZSBgdmFsdWUgLSAyXjMzYC5cbiAgICAgICAgZGlyZWN0aW9uID0gLTE7XG4gICAgICB9IC8vIE5vdGU6IEEgc2VlayBmb3J3YXJkcyBvciBiYWNrIHRoYXQgaXMgZ3JlYXRlciB0aGFuIHRoZSBST19USFJFU0ggKDJeMzIsIH4xMyBob3Vycykgd2lsbFxuICAgICAgLy8gY2F1c2UgYW4gaW5jb3JyZWN0IGFkanVzdG1lbnQuXG5cblxuICAgICAgd2hpbGUgKE1hdGguYWJzKHJlZmVyZW5jZSAtIHZhbHVlKSA+IFJPX1RIUkVTSCkge1xuICAgICAgICB2YWx1ZSArPSBkaXJlY3Rpb24gKiBNQVhfVFM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgdmFyIFRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtID0gZnVuY3Rpb24gVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0odHlwZSkge1xuICAgICAgdmFyIGxhc3REVFMsIHJlZmVyZW5jZURUUztcbiAgICAgIFRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7IC8vIFRoZSBcInNoYXJlZFwiIHR5cGUgaXMgdXNlZCBpbiBjYXNlcyB3aGVyZSBhIHN0cmVhbSB3aWxsIGNvbnRhaW4gbXV4ZWRcbiAgICAgIC8vIHZpZGVvIGFuZCBhdWRpby4gV2UgY291bGQgdXNlIGB1bmRlZmluZWRgIGhlcmUsIGJ1dCBoYXZpbmcgYSBzdHJpbmdcbiAgICAgIC8vIG1ha2VzIGRlYnVnZ2luZyBhIGxpdHRsZSBjbGVhcmVyLlxuXG4gICAgICB0aGlzLnR5cGVfID0gdHlwZSB8fCBUWVBFX1NIQVJFRDtcblxuICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgLy8gQW55IFwic2hhcmVkXCIgcm9sbG92ZXIgc3RyZWFtcyB3aWxsIGFjY2VwdCBfYWxsXyBkYXRhLiBPdGhlcndpc2UsXG4gICAgICAgIC8vIHN0cmVhbXMgd2lsbCBvbmx5IGFjY2VwdCBkYXRhIHRoYXQgbWF0Y2hlcyB0aGVpciB0eXBlLlxuICAgICAgICBpZiAodGhpcy50eXBlXyAhPT0gVFlQRV9TSEFSRUQgJiYgZGF0YS50eXBlICE9PSB0aGlzLnR5cGVfKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlZmVyZW5jZURUUyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVmZXJlbmNlRFRTID0gZGF0YS5kdHM7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLmR0cyA9IGhhbmRsZVJvbGxvdmVyKGRhdGEuZHRzLCByZWZlcmVuY2VEVFMpO1xuICAgICAgICBkYXRhLnB0cyA9IGhhbmRsZVJvbGxvdmVyKGRhdGEucHRzLCByZWZlcmVuY2VEVFMpO1xuICAgICAgICBsYXN0RFRTID0gZGF0YS5kdHM7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIGRhdGEpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVmZXJlbmNlRFRTID0gbGFzdERUUztcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkb25lJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmVuZFRpbWVsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZW5kZWR0aW1lbGluZScpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5kaXNjb250aW51aXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZWZlcmVuY2VEVFMgPSB2b2lkIDA7XG4gICAgICAgIGxhc3REVFMgPSB2b2lkIDA7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRpc2NvbnRpbnVpdHkoKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldCcpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpO1xuICAgIHZhciB0aW1lc3RhbXBSb2xsb3ZlclN0cmVhbSA9IHtcbiAgICAgIFRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtOiBUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSxcbiAgICAgIGhhbmRsZVJvbGxvdmVyOiBoYW5kbGVSb2xsb3ZlclxuICAgIH07XG5cbiAgICB2YXIgcGVyY2VudEVuY29kZSA9IGZ1bmN0aW9uIHBlcmNlbnRFbmNvZGUoYnl0ZXMsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIHJlc3VsdCA9ICcnO1xuXG4gICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSAnJScgKyAoJzAwJyArIGJ5dGVzW2ldLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgICAgIC8vIHJldHVybiB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzcGVjaWZpZWQgYnl0ZSByYW5nZSxcbiAgICAvLyBpbnRlcnByZXRlZCBhcyBVVGYtOC5cbiAgICBwYXJzZVV0ZjggPSBmdW5jdGlvbiBwYXJzZVV0ZjgoYnl0ZXMsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGVyY2VudEVuY29kZShieXRlcywgc3RhcnQsIGVuZCkpO1xuICAgIH0sXG4gICAgICAgIC8vIHJldHVybiB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzcGVjaWZpZWQgYnl0ZSByYW5nZSxcbiAgICAvLyBpbnRlcnByZXRlZCBhcyBJU08tODg1OS0xLlxuICAgIHBhcnNlSXNvODg1OTEgPSBmdW5jdGlvbiBwYXJzZUlzbzg4NTkxKGJ5dGVzLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gdW5lc2NhcGUocGVyY2VudEVuY29kZShieXRlcywgc3RhcnQsIGVuZCkpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICB9LFxuICAgICAgICBwYXJzZVN5bmNTYWZlSW50ZWdlciA9IGZ1bmN0aW9uIHBhcnNlU3luY1NhZmVJbnRlZ2VyKGRhdGEpIHtcbiAgICAgIHJldHVybiBkYXRhWzBdIDw8IDIxIHwgZGF0YVsxXSA8PCAxNCB8IGRhdGFbMl0gPDwgNyB8IGRhdGFbM107XG4gICAgfSxcbiAgICAgICAgdGFnUGFyc2VycyA9IHtcbiAgICAgIFRYWFg6IGZ1bmN0aW9uIFRYWFgodGFnKSB7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGlmICh0YWcuZGF0YVswXSAhPT0gMykge1xuICAgICAgICAgIC8vIGlnbm9yZSBmcmFtZXMgd2l0aCB1bnJlY29nbml6ZWQgY2hhcmFjdGVyIGVuY29kaW5nc1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCB0YWcuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh0YWcuZGF0YVtpXSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gcGFyc2UgdGhlIHRleHQgZmllbGRzXG4gICAgICAgICAgICB0YWcuZGVzY3JpcHRpb24gPSBwYXJzZVV0ZjgodGFnLmRhdGEsIDEsIGkpOyAvLyBkbyBub3QgaW5jbHVkZSB0aGUgbnVsbCB0ZXJtaW5hdG9yIGluIHRoZSB0YWcgdmFsdWVcblxuICAgICAgICAgICAgdGFnLnZhbHVlID0gcGFyc2VVdGY4KHRhZy5kYXRhLCBpICsgMSwgdGFnLmRhdGEubGVuZ3RoKS5yZXBsYWNlKC9cXDAqJC8sICcnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRhZy5kYXRhID0gdGFnLnZhbHVlO1xuICAgICAgfSxcbiAgICAgIFdYWFg6IGZ1bmN0aW9uIFdYWFgodGFnKSB7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGlmICh0YWcuZGF0YVswXSAhPT0gMykge1xuICAgICAgICAgIC8vIGlnbm9yZSBmcmFtZXMgd2l0aCB1bnJlY29nbml6ZWQgY2hhcmFjdGVyIGVuY29kaW5nc1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCB0YWcuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh0YWcuZGF0YVtpXSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gcGFyc2UgdGhlIGRlc2NyaXB0aW9uIGFuZCBVUkwgZmllbGRzXG4gICAgICAgICAgICB0YWcuZGVzY3JpcHRpb24gPSBwYXJzZVV0ZjgodGFnLmRhdGEsIDEsIGkpO1xuICAgICAgICAgICAgdGFnLnVybCA9IHBhcnNlVXRmOCh0YWcuZGF0YSwgaSArIDEsIHRhZy5kYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBQUklWOiBmdW5jdGlvbiBQUklWKHRhZykge1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFnLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodGFnLmRhdGFbaV0gPT09IDApIHtcbiAgICAgICAgICAgIC8vIHBhcnNlIHRoZSBkZXNjcmlwdGlvbiBhbmQgVVJMIGZpZWxkc1xuICAgICAgICAgICAgdGFnLm93bmVyID0gcGFyc2VJc284ODU5MSh0YWcuZGF0YSwgMCwgaSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0YWcucHJpdmF0ZURhdGEgPSB0YWcuZGF0YS5zdWJhcnJheShpICsgMSk7XG4gICAgICAgIHRhZy5kYXRhID0gdGFnLnByaXZhdGVEYXRhO1xuICAgICAgfVxuICAgIH0sXG4gICAgICAgIF9NZXRhZGF0YVN0cmVhbTtcblxuICAgIF9NZXRhZGF0YVN0cmVhbSA9IGZ1bmN0aW9uIE1ldGFkYXRhU3RyZWFtKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZXR0aW5ncyA9IHtcbiAgICAgICAgZGVidWc6ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWJ1ZyksXG4gICAgICAgIC8vIHRoZSBieXRlcyBvZiB0aGUgcHJvZ3JhbS1sZXZlbCBkZXNjcmlwdG9yIGZpZWxkIGluIE1QMlRcbiAgICAgICAgLy8gc2VlIElTTy9JRUMgMTM4MTgtMToyMDEzIChFKSwgc2VjdGlvbiAyLjYgXCJQcm9ncmFtIGFuZFxuICAgICAgICAvLyBwcm9ncmFtIGVsZW1lbnQgZGVzY3JpcHRvcnNcIlxuICAgICAgICBkZXNjcmlwdG9yOiBvcHRpb25zICYmIG9wdGlvbnMuZGVzY3JpcHRvclxuICAgICAgfSxcbiAgICAgICAgICAvLyB0aGUgdG90YWwgc2l6ZSBpbiBieXRlcyBvZiB0aGUgSUQzIHRhZyBiZWluZyBwYXJzZWRcbiAgICAgIHRhZ1NpemUgPSAwLFxuICAgICAgICAgIC8vIHRhZyBkYXRhIHRoYXQgaXMgbm90IGNvbXBsZXRlIGVub3VnaCB0byBiZSBwYXJzZWRcbiAgICAgIGJ1ZmZlciA9IFtdLFxuICAgICAgICAgIC8vIHRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgY3VycmVudGx5IGluIHRoZSBidWZmZXJcbiAgICAgIGJ1ZmZlclNpemUgPSAwLFxuICAgICAgICAgIGk7XG5cbiAgICAgIF9NZXRhZGF0YVN0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpOyAvLyBjYWxjdWxhdGUgdGhlIHRleHQgdHJhY2sgaW4tYmFuZCBtZXRhZGF0YSB0cmFjayBkaXNwYXRjaCB0eXBlXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjc3RlcHMtdG8tZXhwb3NlLWEtbWVkaWEtcmVzb3VyY2Utc3BlY2lmaWMtdGV4dC10cmFja1xuXG5cbiAgICAgIHRoaXMuZGlzcGF0Y2hUeXBlID0gc3RyZWFtVHlwZXMuTUVUQURBVEFfU1RSRUFNX1RZUEUudG9TdHJpbmcoMTYpO1xuXG4gICAgICBpZiAoc2V0dGluZ3MuZGVzY3JpcHRvcikge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2V0dGluZ3MuZGVzY3JpcHRvci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hUeXBlICs9ICgnMDAnICsgc2V0dGluZ3MuZGVzY3JpcHRvcltpXS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdmFyIHRhZywgZnJhbWVTdGFydCwgZnJhbWVTaXplLCBmcmFtZSwgaSwgZnJhbWVIZWFkZXI7XG5cbiAgICAgICAgaWYgKGNodW5rLnR5cGUgIT09ICd0aW1lZC1tZXRhZGF0YScpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gaWYgZGF0YV9hbGlnbm1lbnRfaW5kaWNhdG9yIGlzIHNldCBpbiB0aGUgUEVTIGhlYWRlcixcbiAgICAgICAgLy8gd2UgbXVzdCBoYXZlIHRoZSBzdGFydCBvZiBhIG5ldyBJRDMgdGFnLiBBc3N1bWUgYW55dGhpbmdcbiAgICAgICAgLy8gcmVtYWluaW5nIGluIHRoZSBidWZmZXIgd2FzIG1hbGZvcm1lZCBhbmQgdGhyb3cgaXQgb3V0XG5cblxuICAgICAgICBpZiAoY2h1bmsuZGF0YUFsaWdubWVudEluZGljYXRvcikge1xuICAgICAgICAgIGJ1ZmZlclNpemUgPSAwO1xuICAgICAgICAgIGJ1ZmZlci5sZW5ndGggPSAwO1xuICAgICAgICB9IC8vIGlnbm9yZSBldmVudHMgdGhhdCBkb24ndCBsb29rIGxpa2UgSUQzIGRhdGFcblxuXG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09PSAwICYmIChjaHVuay5kYXRhLmxlbmd0aCA8IDEwIHx8IGNodW5rLmRhdGFbMF0gIT09ICdJJy5jaGFyQ29kZUF0KDApIHx8IGNodW5rLmRhdGFbMV0gIT09ICdEJy5jaGFyQ29kZUF0KDApIHx8IGNodW5rLmRhdGFbMl0gIT09ICczJy5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgIGlmIChzZXR0aW5ncy5kZWJ1Zykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTa2lwcGluZyB1bnJlY29nbml6ZWQgbWV0YWRhdGEgcGFja2V0Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIGFkZCB0aGlzIGNodW5rIHRvIHRoZSBkYXRhIHdlJ3ZlIGNvbGxlY3RlZCBzbyBmYXJcblxuXG4gICAgICAgIGJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgICAgYnVmZmVyU2l6ZSArPSBjaHVuay5kYXRhLmJ5dGVMZW5ndGg7IC8vIGdyYWIgdGhlIHNpemUgb2YgdGhlIGVudGlyZSBmcmFtZSBmcm9tIHRoZSBJRDMgaGVhZGVyXG5cbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAvLyB0aGUgZnJhbWUgc2l6ZSBpcyB0cmFuc21pdHRlZCBhcyBhIDI4LWJpdCBpbnRlZ2VyIGluIHRoZVxuICAgICAgICAgIC8vIGxhc3QgZm91ciBieXRlcyBvZiB0aGUgSUQzIGhlYWRlci5cbiAgICAgICAgICAvLyBUaGUgbW9zdCBzaWduaWZpY2FudCBiaXQgb2YgZWFjaCBieXRlIGlzIGRyb3BwZWQgYW5kIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdHMgY29uY2F0ZW5hdGVkIHRvIHJlY292ZXIgdGhlIGFjdHVhbCB2YWx1ZS5cbiAgICAgICAgICB0YWdTaXplID0gcGFyc2VTeW5jU2FmZUludGVnZXIoY2h1bmsuZGF0YS5zdWJhcnJheSg2LCAxMCkpOyAvLyBJRDMgcmVwb3J0cyB0aGUgdGFnIHNpemUgZXhjbHVkaW5nIHRoZSBoZWFkZXIgYnV0IGl0J3MgbW9yZVxuICAgICAgICAgIC8vIGNvbnZlbmllbnQgZm9yIG91ciBjb21wYXJpc29ucyB0byBpbmNsdWRlIGl0XG5cbiAgICAgICAgICB0YWdTaXplICs9IDEwO1xuICAgICAgICB9IC8vIGlmIHRoZSBlbnRpcmUgZnJhbWUgaGFzIG5vdCBhcnJpdmVkLCB3YWl0IGZvciBtb3JlIGRhdGFcblxuXG4gICAgICAgIGlmIChidWZmZXJTaXplIDwgdGFnU2l6ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBjb2xsZWN0IHRoZSBlbnRpcmUgZnJhbWUgc28gaXQgY2FuIGJlIHBhcnNlZFxuXG5cbiAgICAgICAgdGFnID0ge1xuICAgICAgICAgIGRhdGE6IG5ldyBVaW50OEFycmF5KHRhZ1NpemUpLFxuICAgICAgICAgIGZyYW1lczogW10sXG4gICAgICAgICAgcHRzOiBidWZmZXJbMF0ucHRzLFxuICAgICAgICAgIGR0czogYnVmZmVyWzBdLmR0c1xuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0YWdTaXplOykge1xuICAgICAgICAgIHRhZy5kYXRhLnNldChidWZmZXJbMF0uZGF0YS5zdWJhcnJheSgwLCB0YWdTaXplIC0gaSksIGkpO1xuICAgICAgICAgIGkgKz0gYnVmZmVyWzBdLmRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBidWZmZXJTaXplIC09IGJ1ZmZlclswXS5kYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgIH0gLy8gZmluZCB0aGUgc3RhcnQgb2YgdGhlIGZpcnN0IGZyYW1lIGFuZCB0aGUgZW5kIG9mIHRoZSB0YWdcblxuXG4gICAgICAgIGZyYW1lU3RhcnQgPSAxMDtcblxuICAgICAgICBpZiAodGFnLmRhdGFbNV0gJiAweDQwKSB7XG4gICAgICAgICAgLy8gYWR2YW5jZSB0aGUgZnJhbWUgc3RhcnQgcGFzdCB0aGUgZXh0ZW5kZWQgaGVhZGVyXG4gICAgICAgICAgZnJhbWVTdGFydCArPSA0OyAvLyBoZWFkZXIgc2l6ZSBmaWVsZFxuXG4gICAgICAgICAgZnJhbWVTdGFydCArPSBwYXJzZVN5bmNTYWZlSW50ZWdlcih0YWcuZGF0YS5zdWJhcnJheSgxMCwgMTQpKTsgLy8gY2xpcCBhbnkgcGFkZGluZyBvZmYgdGhlIGVuZFxuXG4gICAgICAgICAgdGFnU2l6ZSAtPSBwYXJzZVN5bmNTYWZlSW50ZWdlcih0YWcuZGF0YS5zdWJhcnJheSgxNiwgMjApKTtcbiAgICAgICAgfSAvLyBwYXJzZSBvbmUgb3IgbW9yZSBJRDMgZnJhbWVzXG4gICAgICAgIC8vIGh0dHA6Ly9pZDMub3JnL2lkM3YyLjMuMCNJRDN2Ml9mcmFtZV9vdmVydmlld1xuXG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8vIGRldGVybWluZSB0aGUgbnVtYmVyIG9mIGJ5dGVzIGluIHRoaXMgZnJhbWVcbiAgICAgICAgICBmcmFtZVNpemUgPSBwYXJzZVN5bmNTYWZlSW50ZWdlcih0YWcuZGF0YS5zdWJhcnJheShmcmFtZVN0YXJ0ICsgNCwgZnJhbWVTdGFydCArIDgpKTtcblxuICAgICAgICAgIGlmIChmcmFtZVNpemUgPCAxKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdNYWxmb3JtZWQgSUQzIGZyYW1lIGVuY291bnRlcmVkLiBTa2lwcGluZyBtZXRhZGF0YSBwYXJzaW5nLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZyYW1lSGVhZGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZSh0YWcuZGF0YVtmcmFtZVN0YXJ0XSwgdGFnLmRhdGFbZnJhbWVTdGFydCArIDFdLCB0YWcuZGF0YVtmcmFtZVN0YXJ0ICsgMl0sIHRhZy5kYXRhW2ZyYW1lU3RhcnQgKyAzXSk7XG4gICAgICAgICAgZnJhbWUgPSB7XG4gICAgICAgICAgICBpZDogZnJhbWVIZWFkZXIsXG4gICAgICAgICAgICBkYXRhOiB0YWcuZGF0YS5zdWJhcnJheShmcmFtZVN0YXJ0ICsgMTAsIGZyYW1lU3RhcnQgKyBmcmFtZVNpemUgKyAxMClcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZyYW1lLmtleSA9IGZyYW1lLmlkO1xuXG4gICAgICAgICAgaWYgKHRhZ1BhcnNlcnNbZnJhbWUuaWRdKSB7XG4gICAgICAgICAgICB0YWdQYXJzZXJzW2ZyYW1lLmlkXShmcmFtZSk7IC8vIGhhbmRsZSB0aGUgc3BlY2lhbCBQUklWIGZyYW1lIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN0YXJ0XG4gICAgICAgICAgICAvLyB0aW1lIGZvciByYXcgQUFDIGRhdGFcblxuICAgICAgICAgICAgaWYgKGZyYW1lLm93bmVyID09PSAnY29tLmFwcGxlLnN0cmVhbWluZy50cmFuc3BvcnRTdHJlYW1UaW1lc3RhbXAnKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gZnJhbWUuZGF0YSxcbiAgICAgICAgICAgICAgICAgIHNpemUgPSAoZFszXSAmIDB4MDEpIDw8IDMwIHwgZFs0XSA8PCAyMiB8IGRbNV0gPDwgMTQgfCBkWzZdIDw8IDYgfCBkWzddID4+PiAyO1xuICAgICAgICAgICAgICBzaXplICo9IDQ7XG4gICAgICAgICAgICAgIHNpemUgKz0gZFs3XSAmIDB4MDM7XG4gICAgICAgICAgICAgIGZyYW1lLnRpbWVTdGFtcCA9IHNpemU7IC8vIGluIHJhdyBBQUMsIGFsbCBzdWJzZXF1ZW50IGRhdGEgd2lsbCBiZSB0aW1lc3RhbXBlZCBiYXNlZFxuICAgICAgICAgICAgICAvLyBvbiB0aGUgdmFsdWUgb2YgdGhpcyBmcmFtZVxuICAgICAgICAgICAgICAvLyB3ZSBjb3VsZG4ndCBoYXZlIGtub3duIHRoZSBhcHByb3ByaWF0ZSBwdHMgYW5kIGR0cyBiZWZvcmVcbiAgICAgICAgICAgICAgLy8gcGFyc2luZyB0aGlzIElEMyB0YWcgc28gc2V0IHRob3NlIHZhbHVlcyBub3dcblxuICAgICAgICAgICAgICBpZiAodGFnLnB0cyA9PT0gdW5kZWZpbmVkICYmIHRhZy5kdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRhZy5wdHMgPSBmcmFtZS50aW1lU3RhbXA7XG4gICAgICAgICAgICAgICAgdGFnLmR0cyA9IGZyYW1lLnRpbWVTdGFtcDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigndGltZXN0YW1wJywgZnJhbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRhZy5mcmFtZXMucHVzaChmcmFtZSk7XG4gICAgICAgICAgZnJhbWVTdGFydCArPSAxMDsgLy8gYWR2YW5jZSBwYXN0IHRoZSBmcmFtZSBoZWFkZXJcblxuICAgICAgICAgIGZyYW1lU3RhcnQgKz0gZnJhbWVTaXplOyAvLyBhZHZhbmNlIHBhc3QgdGhlIGZyYW1lIGJvZHlcbiAgICAgICAgfSB3aGlsZSAoZnJhbWVTdGFydCA8IHRhZ1NpemUpO1xuXG4gICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIHRhZyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfTWV0YWRhdGFTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpO1xuICAgIHZhciBtZXRhZGF0YVN0cmVhbSA9IF9NZXRhZGF0YVN0cmVhbTtcbiAgICB2YXIgVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0kMSA9IHRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtLlRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtOyAvLyBvYmplY3QgdHlwZXNcblxuICAgIHZhciBfVHJhbnNwb3J0UGFja2V0U3RyZWFtLCBfVHJhbnNwb3J0UGFyc2VTdHJlYW0sIF9FbGVtZW50YXJ5U3RyZWFtOyAvLyBjb25zdGFudHNcblxuXG4gICAgdmFyIE1QMlRfUEFDS0VUX0xFTkdUSCA9IDE4OCxcbiAgICAgICAgLy8gYnl0ZXNcbiAgICBTWU5DX0JZVEUgPSAweDQ3O1xuICAgIC8qKlxuICAgICAqIFNwbGl0cyBhbiBpbmNvbWluZyBzdHJlYW0gb2YgYmluYXJ5IGRhdGEgaW50byBNUEVHLTIgVHJhbnNwb3J0XG4gICAgICogU3RyZWFtIHBhY2tldHMuXG4gICAgICovXG5cbiAgICBfVHJhbnNwb3J0UGFja2V0U3RyZWFtID0gZnVuY3Rpb24gVHJhbnNwb3J0UGFja2V0U3RyZWFtKCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KE1QMlRfUEFDS0VUX0xFTkdUSCksXG4gICAgICAgICAgYnl0ZXNJbkJ1ZmZlciA9IDA7XG5cbiAgICAgIF9UcmFuc3BvcnRQYWNrZXRTdHJlYW0ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTsgLy8gRGVsaXZlciBuZXcgYnl0ZXMgdG8gdGhlIHN0cmVhbS5cblxuICAgICAgLyoqXG4gICAgICAgKiBTcGxpdCBhIHN0cmVhbSBvZiBkYXRhIGludG8gTTJUUyBwYWNrZXRzXG4gICAgICAqKi9cblxuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSAwLFxuICAgICAgICAgICAgZW5kSW5kZXggPSBNUDJUX1BBQ0tFVF9MRU5HVEgsXG4gICAgICAgICAgICBldmVyeXRoaW5nOyAvLyBJZiB0aGVyZSBhcmUgYnl0ZXMgcmVtYWluaW5nIGZyb20gdGhlIGxhc3Qgc2VnbWVudCwgcHJlcGVuZCB0aGVtIHRvIHRoZVxuICAgICAgICAvLyBieXRlcyB0aGF0IHdlcmUgcHVzaGVkIGluXG5cbiAgICAgICAgaWYgKGJ5dGVzSW5CdWZmZXIpIHtcbiAgICAgICAgICBldmVyeXRoaW5nID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMuYnl0ZUxlbmd0aCArIGJ5dGVzSW5CdWZmZXIpO1xuICAgICAgICAgIGV2ZXJ5dGhpbmcuc2V0KGJ1ZmZlci5zdWJhcnJheSgwLCBieXRlc0luQnVmZmVyKSk7XG4gICAgICAgICAgZXZlcnl0aGluZy5zZXQoYnl0ZXMsIGJ5dGVzSW5CdWZmZXIpO1xuICAgICAgICAgIGJ5dGVzSW5CdWZmZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZXJ5dGhpbmcgPSBieXRlcztcbiAgICAgICAgfSAvLyBXaGlsZSB3ZSBoYXZlIGVub3VnaCBkYXRhIGZvciBhIHBhY2tldFxuXG5cbiAgICAgICAgd2hpbGUgKGVuZEluZGV4IDwgZXZlcnl0aGluZy5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgLy8gTG9vayBmb3IgYSBwYWlyIG9mIHN0YXJ0IGFuZCBlbmQgc3luYyBieXRlcyBpbiB0aGUgZGF0YS4uXG4gICAgICAgICAgaWYgKGV2ZXJ5dGhpbmdbc3RhcnRJbmRleF0gPT09IFNZTkNfQllURSAmJiBldmVyeXRoaW5nW2VuZEluZGV4XSA9PT0gU1lOQ19CWVRFKSB7XG4gICAgICAgICAgICAvLyBXZSBmb3VuZCBhIHBhY2tldCBzbyBlbWl0IGl0IGFuZCBqdW1wIG9uZSB3aG9sZSBwYWNrZXQgZm9yd2FyZCBpblxuICAgICAgICAgICAgLy8gdGhlIHN0cmVhbVxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgZXZlcnl0aGluZy5zdWJhcnJheShzdGFydEluZGV4LCBlbmRJbmRleCkpO1xuICAgICAgICAgICAgc3RhcnRJbmRleCArPSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gICAgICAgICAgICBlbmRJbmRleCArPSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IC8vIElmIHdlIGdldCBoZXJlLCB3ZSBoYXZlIHNvbWVob3cgYmVjb21lIGRlLXN5bmNocm9uaXplZCBhbmQgd2UgbmVlZCB0byBzdGVwXG4gICAgICAgICAgLy8gZm9yd2FyZCBvbmUgYnl0ZSBhdCBhIHRpbWUgdW50aWwgd2UgZmluZCBhIHBhaXIgb2Ygc3luYyBieXRlcyB0aGF0IGRlbm90ZVxuICAgICAgICAgIC8vIGEgcGFja2V0XG5cblxuICAgICAgICAgIHN0YXJ0SW5kZXgrKztcbiAgICAgICAgICBlbmRJbmRleCsrO1xuICAgICAgICB9IC8vIElmIHRoZXJlIHdhcyBzb21lIGRhdGEgbGVmdCBvdmVyIGF0IHRoZSBlbmQgb2YgdGhlIHNlZ21lbnQgdGhhdCBjb3VsZG4ndFxuICAgICAgICAvLyBwb3NzaWJseSBiZSBhIHdob2xlIHBhY2tldCwga2VlcCBpdCBiZWNhdXNlIGl0IG1pZ2h0IGJlIHRoZSBzdGFydCBvZiBhIHBhY2tldFxuICAgICAgICAvLyB0aGF0IGNvbnRpbnVlcyBpbiB0aGUgbmV4dCBzZWdtZW50XG5cblxuICAgICAgICBpZiAoc3RhcnRJbmRleCA8IGV2ZXJ5dGhpbmcuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgIGJ1ZmZlci5zZXQoZXZlcnl0aGluZy5zdWJhcnJheShzdGFydEluZGV4KSwgMCk7XG4gICAgICAgICAgYnl0ZXNJbkJ1ZmZlciA9IGV2ZXJ5dGhpbmcuYnl0ZUxlbmd0aCAtIHN0YXJ0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIFBhc3NlcyBpZGVudGlmaWVkIE0yVFMgcGFja2V0cyB0byB0aGUgVHJhbnNwb3J0UGFyc2VTdHJlYW0gdG8gYmUgcGFyc2VkXG4gICAgICAqKi9cblxuXG4gICAgICB0aGlzLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJZiB0aGUgYnVmZmVyIGNvbnRhaW5zIGEgd2hvbGUgcGFja2V0IHdoZW4gd2UgYXJlIGJlaW5nIGZsdXNoZWQsIGVtaXQgaXRcbiAgICAgICAgLy8gYW5kIGVtcHR5IHRoZSBidWZmZXIuIE90aGVyd2lzZSBob2xkIG9udG8gdGhlIGRhdGEgYmVjYXVzZSBpdCBtYXkgYmVcbiAgICAgICAgLy8gaW1wb3J0YW50IGZvciBkZWNvZGluZyB0aGUgbmV4dCBzZWdtZW50XG4gICAgICAgIGlmIChieXRlc0luQnVmZmVyID09PSBNUDJUX1BBQ0tFVF9MRU5HVEggJiYgYnVmZmVyWzBdID09PSBTWU5DX0JZVEUpIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCBidWZmZXIpO1xuICAgICAgICAgIGJ5dGVzSW5CdWZmZXIgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkb25lJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmVuZFRpbWVsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZW5kZWR0aW1lbGluZScpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYnl0ZXNJbkJ1ZmZlciA9IDA7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVzZXQnKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9UcmFuc3BvcnRQYWNrZXRTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpO1xuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgYW4gTVAyVCBUcmFuc3BvcnRQYWNrZXRTdHJlYW0gYW5kIGVtaXRzIGRhdGEgZXZlbnRzIHdpdGggcGFyc2VkXG4gICAgICogZm9ybXMgb2YgdGhlIGluZGl2aWR1YWwgdHJhbnNwb3J0IHN0cmVhbSBwYWNrZXRzLlxuICAgICAqL1xuXG4gICAgX1RyYW5zcG9ydFBhcnNlU3RyZWFtID0gZnVuY3Rpb24gVHJhbnNwb3J0UGFyc2VTdHJlYW0oKSB7XG4gICAgICB2YXIgcGFyc2VQc2ksIHBhcnNlUGF0LCBwYXJzZVBtdCwgc2VsZjtcblxuICAgICAgX1RyYW5zcG9ydFBhcnNlU3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5wYWNrZXRzV2FpdGluZ0ZvclBtdCA9IFtdO1xuICAgICAgdGhpcy5wcm9ncmFtTWFwVGFibGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHBhcnNlUHNpID0gZnVuY3Rpb24gcGFyc2VQc2kocGF5bG9hZCwgcHNpKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwOyAvLyBQU0kgcGFja2V0cyBtYXkgYmUgc3BsaXQgaW50byBtdWx0aXBsZSBzZWN0aW9ucyBhbmQgdGhvc2VcbiAgICAgICAgLy8gc2VjdGlvbnMgbWF5IGJlIHNwbGl0IGludG8gbXVsdGlwbGUgcGFja2V0cy4gSWYgYSBQU0lcbiAgICAgICAgLy8gc2VjdGlvbiBzdGFydHMgaW4gdGhpcyBwYWNrZXQsIHRoZSBwYXlsb2FkX3VuaXRfc3RhcnRfaW5kaWNhdG9yXG4gICAgICAgIC8vIHdpbGwgYmUgdHJ1ZSBhbmQgdGhlIGZpcnN0IGJ5dGUgb2YgdGhlIHBheWxvYWQgd2lsbCBpbmRpY2F0ZVxuICAgICAgICAvLyB0aGUgb2Zmc2V0IGZyb20gdGhlIGN1cnJlbnQgcG9zaXRpb24gdG8gdGhlIHN0YXJ0IG9mIHRoZVxuICAgICAgICAvLyBzZWN0aW9uLlxuXG4gICAgICAgIGlmIChwc2kucGF5bG9hZFVuaXRTdGFydEluZGljYXRvcikge1xuICAgICAgICAgIG9mZnNldCArPSBwYXlsb2FkW29mZnNldF0gKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBzaS50eXBlID09PSAncGF0Jykge1xuICAgICAgICAgIHBhcnNlUGF0KHBheWxvYWQuc3ViYXJyYXkob2Zmc2V0KSwgcHNpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZVBtdChwYXlsb2FkLnN1YmFycmF5KG9mZnNldCksIHBzaSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHBhcnNlUGF0ID0gZnVuY3Rpb24gcGFyc2VQYXQocGF5bG9hZCwgcGF0KSB7XG4gICAgICAgIHBhdC5zZWN0aW9uX251bWJlciA9IHBheWxvYWRbN107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgICAgcGF0Lmxhc3Rfc2VjdGlvbl9udW1iZXIgPSBwYXlsb2FkWzhdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgICAgICAvLyBza2lwIHRoZSBQU0kgaGVhZGVyIGFuZCBwYXJzZSB0aGUgZmlyc3QgUE1UIGVudHJ5XG5cbiAgICAgICAgc2VsZi5wbXRQaWQgPSAocGF5bG9hZFsxMF0gJiAweDFGKSA8PCA4IHwgcGF5bG9hZFsxMV07XG4gICAgICAgIHBhdC5wbXRQaWQgPSBzZWxmLnBtdFBpZDtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIFBhcnNlIG91dCB0aGUgcmVsZXZhbnQgZmllbGRzIG9mIGEgUHJvZ3JhbSBNYXAgVGFibGUgKFBNVCkuXG4gICAgICAgKiBAcGFyYW0gcGF5bG9hZCB7VWludDhBcnJheX0gdGhlIFBNVC1zcGVjaWZpYyBwb3J0aW9uIG9mIGFuIE1QMlRcbiAgICAgICAqIHBhY2tldC4gVGhlIGZpcnN0IGJ5dGUgaW4gdGhpcyBhcnJheSBzaG91bGQgYmUgdGhlIHRhYmxlX2lkXG4gICAgICAgKiBmaWVsZC5cbiAgICAgICAqIEBwYXJhbSBwbXQge29iamVjdH0gdGhlIG9iamVjdCB0aGF0IHNob3VsZCBiZSBkZWNvcmF0ZWQgd2l0aFxuICAgICAgICogZmllbGRzIHBhcnNlZCBmcm9tIHRoZSBQTVQuXG4gICAgICAgKi9cblxuXG4gICAgICBwYXJzZVBtdCA9IGZ1bmN0aW9uIHBhcnNlUG10KHBheWxvYWQsIHBtdCkge1xuICAgICAgICB2YXIgc2VjdGlvbkxlbmd0aCwgdGFibGVFbmQsIHByb2dyYW1JbmZvTGVuZ3RoLCBvZmZzZXQ7IC8vIFBNVHMgY2FuIGJlIHNlbnQgYWhlYWQgb2YgdGhlIHRpbWUgd2hlbiB0aGV5IHNob3VsZCBhY3R1YWxseVxuICAgICAgICAvLyB0YWtlIGVmZmVjdC4gV2UgZG9uJ3QgYmVsaWV2ZSB0aGlzIHNob3VsZCBldmVyIGJlIHRoZSBjYXNlXG4gICAgICAgIC8vIGZvciBITFMgYnV0IHdlJ2xsIGlnbm9yZSBcImZvcndhcmRcIiBQTVQgZGVjbGFyYXRpb25zIGlmIHdlIHNlZVxuICAgICAgICAvLyB0aGVtLiBGdXR1cmUgUE1UIGRlY2xhcmF0aW9ucyBoYXZlIHRoZSBjdXJyZW50X25leHRfaW5kaWNhdG9yXG4gICAgICAgIC8vIHNldCB0byB6ZXJvLlxuXG4gICAgICAgIGlmICghKHBheWxvYWRbNV0gJiAweDAxKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBvdmVyd3JpdGUgYW55IGV4aXN0aW5nIHByb2dyYW0gbWFwIHRhYmxlXG5cblxuICAgICAgICBzZWxmLnByb2dyYW1NYXBUYWJsZSA9IHtcbiAgICAgICAgICB2aWRlbzogbnVsbCxcbiAgICAgICAgICBhdWRpbzogbnVsbCxcbiAgICAgICAgICAndGltZWQtbWV0YWRhdGEnOiB7fVxuICAgICAgICB9OyAvLyB0aGUgbWFwcGluZyB0YWJsZSBlbmRzIGF0IHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgc2VjdGlvblxuXG4gICAgICAgIHNlY3Rpb25MZW5ndGggPSAocGF5bG9hZFsxXSAmIDB4MGYpIDw8IDggfCBwYXlsb2FkWzJdO1xuICAgICAgICB0YWJsZUVuZCA9IDMgKyBzZWN0aW9uTGVuZ3RoIC0gNDsgLy8gdG8gZGV0ZXJtaW5lIHdoZXJlIHRoZSB0YWJsZSBpcywgd2UgaGF2ZSB0byBmaWd1cmUgb3V0IGhvd1xuICAgICAgICAvLyBsb25nIHRoZSBwcm9ncmFtIGluZm8gZGVzY3JpcHRvcnMgYXJlXG5cbiAgICAgICAgcHJvZ3JhbUluZm9MZW5ndGggPSAocGF5bG9hZFsxMF0gJiAweDBmKSA8PCA4IHwgcGF5bG9hZFsxMV07IC8vIGFkdmFuY2UgdGhlIG9mZnNldCB0byB0aGUgZmlyc3QgZW50cnkgaW4gdGhlIG1hcHBpbmcgdGFibGVcblxuICAgICAgICBvZmZzZXQgPSAxMiArIHByb2dyYW1JbmZvTGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCB0YWJsZUVuZCkge1xuICAgICAgICAgIHZhciBzdHJlYW1UeXBlID0gcGF5bG9hZFtvZmZzZXRdO1xuICAgICAgICAgIHZhciBwaWQgPSAocGF5bG9hZFtvZmZzZXQgKyAxXSAmIDB4MUYpIDw8IDggfCBwYXlsb2FkW29mZnNldCArIDJdOyAvLyBvbmx5IG1hcCBhIHNpbmdsZSBlbGVtZW50YXJ5X3BpZCBmb3IgYXVkaW8gYW5kIHZpZGVvIHN0cmVhbSB0eXBlc1xuICAgICAgICAgIC8vIFRPRE86IHNob3VsZCB0aGlzIGJlIGRvbmUgZm9yIG1ldGFkYXRhIHRvbz8gZm9yIG5vdyBtYWludGFpbiBiZWhhdmlvciBvZlxuICAgICAgICAgIC8vICAgICAgIG11bHRpcGxlIG1ldGFkYXRhIHN0cmVhbXNcblxuICAgICAgICAgIGlmIChzdHJlYW1UeXBlID09PSBzdHJlYW1UeXBlcy5IMjY0X1NUUkVBTV9UWVBFICYmIHNlbGYucHJvZ3JhbU1hcFRhYmxlLnZpZGVvID09PSBudWxsKSB7XG4gICAgICAgICAgICBzZWxmLnByb2dyYW1NYXBUYWJsZS52aWRlbyA9IHBpZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbVR5cGUgPT09IHN0cmVhbVR5cGVzLkFEVFNfU1RSRUFNX1RZUEUgJiYgc2VsZi5wcm9ncmFtTWFwVGFibGUuYXVkaW8gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHNlbGYucHJvZ3JhbU1hcFRhYmxlLmF1ZGlvID0gcGlkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtVHlwZSA9PT0gc3RyZWFtVHlwZXMuTUVUQURBVEFfU1RSRUFNX1RZUEUpIHtcbiAgICAgICAgICAgIC8vIG1hcCBwaWQgdG8gc3RyZWFtIHR5cGUgZm9yIG1ldGFkYXRhIHN0cmVhbXNcbiAgICAgICAgICAgIHNlbGYucHJvZ3JhbU1hcFRhYmxlWyd0aW1lZC1tZXRhZGF0YSddW3BpZF0gPSBzdHJlYW1UeXBlO1xuICAgICAgICAgIH0gLy8gbW92ZSB0byB0aGUgbmV4dCB0YWJsZSBlbnRyeVxuICAgICAgICAgIC8vIHNraXAgcGFzdCB0aGUgZWxlbWVudGFyeSBzdHJlYW0gZGVzY3JpcHRvcnMsIGlmIHByZXNlbnRcblxuXG4gICAgICAgICAgb2Zmc2V0ICs9ICgocGF5bG9hZFtvZmZzZXQgKyAzXSAmIDB4MEYpIDw8IDggfCBwYXlsb2FkW29mZnNldCArIDRdKSArIDU7XG4gICAgICAgIH0gLy8gcmVjb3JkIHRoZSBtYXAgb24gdGhlIHBhY2tldCBhcyB3ZWxsXG5cblxuICAgICAgICBwbXQucHJvZ3JhbU1hcFRhYmxlID0gc2VsZi5wcm9ncmFtTWFwVGFibGU7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgKiBEZWxpdmVyIGEgbmV3IE1QMlQgcGFja2V0IHRvIHRoZSBuZXh0IHN0cmVhbSBpbiB0aGUgcGlwZWxpbmUuXG4gICAgICAgKi9cblxuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fSxcbiAgICAgICAgICAgIG9mZnNldCA9IDQ7XG4gICAgICAgIHJlc3VsdC5wYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yID0gISEocGFja2V0WzFdICYgMHg0MCk7IC8vIHBpZCBpcyBhIDEzLWJpdCBmaWVsZCBzdGFydGluZyBhdCB0aGUgbGFzdCBiaXQgb2YgcGFja2V0WzFdXG5cbiAgICAgICAgcmVzdWx0LnBpZCA9IHBhY2tldFsxXSAmIDB4MWY7XG4gICAgICAgIHJlc3VsdC5waWQgPDw9IDg7XG4gICAgICAgIHJlc3VsdC5waWQgfD0gcGFja2V0WzJdOyAvLyBpZiBhbiBhZGFwdGlvbiBmaWVsZCBpcyBwcmVzZW50LCBpdHMgbGVuZ3RoIGlzIHNwZWNpZmllZCBieSB0aGVcbiAgICAgICAgLy8gZmlmdGggYnl0ZSBvZiB0aGUgVFMgcGFja2V0IGhlYWRlci4gVGhlIGFkYXB0YXRpb24gZmllbGQgaXNcbiAgICAgICAgLy8gdXNlZCB0byBhZGQgc3R1ZmZpbmcgdG8gUEVTIHBhY2tldHMgdGhhdCBkb24ndCBmaWxsIGEgY29tcGxldGVcbiAgICAgICAgLy8gVFMgcGFja2V0LCBhbmQgdG8gc3BlY2lmeSBzb21lIGZvcm1zIG9mIHRpbWluZyBhbmQgY29udHJvbCBkYXRhXG4gICAgICAgIC8vIHRoYXQgd2UgZG8gbm90IGN1cnJlbnRseSB1c2UuXG5cbiAgICAgICAgaWYgKChwYWNrZXRbM10gJiAweDMwKSA+Pj4gNCA+IDB4MDEpIHtcbiAgICAgICAgICBvZmZzZXQgKz0gcGFja2V0W29mZnNldF0gKyAxO1xuICAgICAgICB9IC8vIHBhcnNlIHRoZSByZXN0IG9mIHRoZSBwYWNrZXQgYmFzZWQgb24gdGhlIHR5cGVcblxuXG4gICAgICAgIGlmIChyZXN1bHQucGlkID09PSAwKSB7XG4gICAgICAgICAgcmVzdWx0LnR5cGUgPSAncGF0JztcbiAgICAgICAgICBwYXJzZVBzaShwYWNrZXQuc3ViYXJyYXkob2Zmc2V0KSwgcmVzdWx0KTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCByZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5waWQgPT09IHRoaXMucG10UGlkKSB7XG4gICAgICAgICAgcmVzdWx0LnR5cGUgPSAncG10JztcbiAgICAgICAgICBwYXJzZVBzaShwYWNrZXQuc3ViYXJyYXkob2Zmc2V0KSwgcmVzdWx0KTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCByZXN1bHQpOyAvLyBpZiB0aGVyZSBhcmUgYW55IHBhY2tldHMgd2FpdGluZyBmb3IgYSBQTVQgdG8gYmUgZm91bmQsIHByb2Nlc3MgdGhlbSBub3dcblxuICAgICAgICAgIHdoaWxlICh0aGlzLnBhY2tldHNXYWl0aW5nRm9yUG10Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzUGVzXy5hcHBseSh0aGlzLCB0aGlzLnBhY2tldHNXYWl0aW5nRm9yUG10LnNoaWZ0KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb2dyYW1NYXBUYWJsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gV2hlbiB3ZSBoYXZlIG5vdCBzZWVuIGEgUE1UIHlldCwgZGVmZXIgZnVydGhlciBwcm9jZXNzaW5nIG9mXG4gICAgICAgICAgLy8gUEVTIHBhY2tldHMgdW50aWwgb25lIGhhcyBiZWVuIHBhcnNlZFxuICAgICAgICAgIHRoaXMucGFja2V0c1dhaXRpbmdGb3JQbXQucHVzaChbcGFja2V0LCBvZmZzZXQsIHJlc3VsdF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucHJvY2Vzc1Blc18ocGFja2V0LCBvZmZzZXQsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMucHJvY2Vzc1Blc18gPSBmdW5jdGlvbiAocGFja2V0LCBvZmZzZXQsIHJlc3VsdCkge1xuICAgICAgICAvLyBzZXQgdGhlIGFwcHJvcHJpYXRlIHN0cmVhbSB0eXBlXG4gICAgICAgIGlmIChyZXN1bHQucGlkID09PSB0aGlzLnByb2dyYW1NYXBUYWJsZS52aWRlbykge1xuICAgICAgICAgIHJlc3VsdC5zdHJlYW1UeXBlID0gc3RyZWFtVHlwZXMuSDI2NF9TVFJFQU1fVFlQRTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQucGlkID09PSB0aGlzLnByb2dyYW1NYXBUYWJsZS5hdWRpbykge1xuICAgICAgICAgIHJlc3VsdC5zdHJlYW1UeXBlID0gc3RyZWFtVHlwZXMuQURUU19TVFJFQU1fVFlQRTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiBub3QgdmlkZW8gb3IgYXVkaW8sIGl0IGlzIHRpbWVkLW1ldGFkYXRhIG9yIHVua25vd25cbiAgICAgICAgICAvLyBpZiB1bmtub3duLCBzdHJlYW1UeXBlIHdpbGwgYmUgdW5kZWZpbmVkXG4gICAgICAgICAgcmVzdWx0LnN0cmVhbVR5cGUgPSB0aGlzLnByb2dyYW1NYXBUYWJsZVsndGltZWQtbWV0YWRhdGEnXVtyZXN1bHQucGlkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdC50eXBlID0gJ3Blcyc7XG4gICAgICAgIHJlc3VsdC5kYXRhID0gcGFja2V0LnN1YmFycmF5KG9mZnNldCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIHJlc3VsdCk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfVHJhbnNwb3J0UGFyc2VTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpO1xuICAgIF9UcmFuc3BvcnRQYXJzZVN0cmVhbS5TVFJFQU1fVFlQRVMgPSB7XG4gICAgICBoMjY0OiAweDFiLFxuICAgICAgYWR0czogMHgwZlxuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVjb25zaXN0dXRlcyBwcm9ncmFtIGVsZW1lbnRhcnkgc3RyZWFtIChQRVMpIHBhY2tldHMgZnJvbSBwYXJzZWRcbiAgICAgKiB0cmFuc3BvcnQgc3RyZWFtIHBhY2tldHMuIFRoYXQgaXMsIGlmIHlvdSBwaXBlIGFuXG4gICAgICogbXAydC5UcmFuc3BvcnRQYXJzZVN0cmVhbSBpbnRvIGEgbXAydC5FbGVtZW50YXJ5U3RyZWFtLCB0aGUgb3V0cHV0XG4gICAgICogZXZlbnRzIHdpbGwgYmUgZXZlbnRzIHdoaWNoIGNhcHR1cmUgdGhlIGJ5dGVzIGZvciBpbmRpdmlkdWFsIFBFU1xuICAgICAqIHBhY2tldHMgcGx1cyByZWxldmFudCBtZXRhZGF0YSB0aGF0IGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHRoZVxuICAgICAqIGNvbnRhaW5lci5cbiAgICAgKi9cblxuICAgIF9FbGVtZW50YXJ5U3RyZWFtID0gZnVuY3Rpb24gRWxlbWVudGFyeVN0cmVhbSgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAvLyBQRVMgcGFja2V0IGZyYWdtZW50c1xuICAgICAgdmlkZW8gPSB7XG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9LFxuICAgICAgICAgIGF1ZGlvID0ge1xuICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfSxcbiAgICAgICAgICB0aW1lZE1ldGFkYXRhID0ge1xuICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfSxcbiAgICAgICAgICBwcm9ncmFtTWFwVGFibGUsXG4gICAgICAgICAgcGFyc2VQZXMgPSBmdW5jdGlvbiBwYXJzZVBlcyhwYXlsb2FkLCBwZXMpIHtcbiAgICAgICAgdmFyIHB0c0R0c0ZsYWdzOyAvLyBnZXQgdGhlIHBhY2tldCBsZW5ndGgsIHRoaXMgd2lsbCBiZSAwIGZvciB2aWRlb1xuXG4gICAgICAgIHBlcy5wYWNrZXRMZW5ndGggPSA2ICsgKHBheWxvYWRbNF0gPDwgOCB8IHBheWxvYWRbNV0pOyAvLyBmaW5kIG91dCBpZiB0aGlzIHBhY2tldHMgc3RhcnRzIGEgbmV3IGtleWZyYW1lXG5cbiAgICAgICAgcGVzLmRhdGFBbGlnbm1lbnRJbmRpY2F0b3IgPSAocGF5bG9hZFs2XSAmIDB4MDQpICE9PSAwOyAvLyBQRVMgcGFja2V0cyBtYXkgYmUgYW5ub3RhdGVkIHdpdGggYSBQVFMgdmFsdWUsIG9yIGEgUFRTIHZhbHVlXG4gICAgICAgIC8vIGFuZCBhIERUUyB2YWx1ZS4gRGV0ZXJtaW5lIHdoYXQgY29tYmluYXRpb24gb2YgdmFsdWVzIGlzXG4gICAgICAgIC8vIGF2YWlsYWJsZSB0byB3b3JrIHdpdGguXG5cbiAgICAgICAgcHRzRHRzRmxhZ3MgPSBwYXlsb2FkWzddOyAvLyBQVFMgYW5kIERUUyBhcmUgbm9ybWFsbHkgc3RvcmVkIGFzIGEgMzMtYml0IG51bWJlci4gIEphdmFzY3JpcHRcbiAgICAgICAgLy8gcGVyZm9ybXMgYWxsIGJpdHdpc2Ugb3BlcmF0aW9ucyBvbiAzMi1iaXQgaW50ZWdlcnMgYnV0IGphdmFzY3JpcHRcbiAgICAgICAgLy8gc3VwcG9ydHMgYSBtdWNoIGdyZWF0ZXIgcmFuZ2UgKDUyLWJpdHMpIG9mIGludGVnZXIgdXNpbmcgc3RhbmRhcmRcbiAgICAgICAgLy8gbWF0aGVtYXRpY2FsIG9wZXJhdGlvbnMuXG4gICAgICAgIC8vIFdlIGNvbnN0cnVjdCBhIDMxLWJpdCB2YWx1ZSB1c2luZyBiaXR3aXNlIG9wZXJhdG9ycyBvdmVyIHRoZSAzMVxuICAgICAgICAvLyBtb3N0IHNpZ25pZmljYW50IGJpdHMgYW5kIHRoZW4gbXVsdGlwbHkgYnkgNCAoZXF1YWwgdG8gYSBsZWZ0LXNoaWZ0XG4gICAgICAgIC8vIG9mIDIpIGJlZm9yZSB3ZSBhZGQgdGhlIGZpbmFsIDIgbGVhc3Qgc2lnbmlmaWNhbnQgYml0cyBvZiB0aGVcbiAgICAgICAgLy8gdGltZXN0YW1wIChlcXVhbCB0byBhbiBPUi4pXG5cbiAgICAgICAgaWYgKHB0c0R0c0ZsYWdzICYgMHhDMCkge1xuICAgICAgICAgIC8vIHRoZSBQVFMgYW5kIERUUyBhcmUgbm90IHdyaXR0ZW4gb3V0IGRpcmVjdGx5LiBGb3IgaW5mb3JtYXRpb25cbiAgICAgICAgICAvLyBvbiBob3cgdGhleSBhcmUgZW5jb2RlZCwgc2VlXG4gICAgICAgICAgLy8gaHR0cDovL2R2ZC5zb3VyY2Vmb3JnZS5uZXQvZHZkaW5mby9wZXMtaGRyLmh0bWxcbiAgICAgICAgICBwZXMucHRzID0gKHBheWxvYWRbOV0gJiAweDBFKSA8PCAyNyB8IChwYXlsb2FkWzEwXSAmIDB4RkYpIDw8IDIwIHwgKHBheWxvYWRbMTFdICYgMHhGRSkgPDwgMTIgfCAocGF5bG9hZFsxMl0gJiAweEZGKSA8PCA1IHwgKHBheWxvYWRbMTNdICYgMHhGRSkgPj4+IDM7XG4gICAgICAgICAgcGVzLnB0cyAqPSA0OyAvLyBMZWZ0IHNoaWZ0IGJ5IDJcblxuICAgICAgICAgIHBlcy5wdHMgKz0gKHBheWxvYWRbMTNdICYgMHgwNikgPj4+IDE7IC8vIE9SIGJ5IHRoZSB0d28gTFNCc1xuXG4gICAgICAgICAgcGVzLmR0cyA9IHBlcy5wdHM7XG5cbiAgICAgICAgICBpZiAocHRzRHRzRmxhZ3MgJiAweDQwKSB7XG4gICAgICAgICAgICBwZXMuZHRzID0gKHBheWxvYWRbMTRdICYgMHgwRSkgPDwgMjcgfCAocGF5bG9hZFsxNV0gJiAweEZGKSA8PCAyMCB8IChwYXlsb2FkWzE2XSAmIDB4RkUpIDw8IDEyIHwgKHBheWxvYWRbMTddICYgMHhGRikgPDwgNSB8IChwYXlsb2FkWzE4XSAmIDB4RkUpID4+PiAzO1xuICAgICAgICAgICAgcGVzLmR0cyAqPSA0OyAvLyBMZWZ0IHNoaWZ0IGJ5IDJcblxuICAgICAgICAgICAgcGVzLmR0cyArPSAocGF5bG9hZFsxOF0gJiAweDA2KSA+Pj4gMTsgLy8gT1IgYnkgdGhlIHR3byBMU0JzXG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHRoZSBkYXRhIHNlY3Rpb24gc3RhcnRzIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBQRVMgaGVhZGVyLlxuICAgICAgICAvLyBwZXNfaGVhZGVyX2RhdGFfbGVuZ3RoIHNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIGhlYWRlciBieXRlc1xuICAgICAgICAvLyB0aGF0IGZvbGxvdyB0aGUgbGFzdCBieXRlIG9mIHRoZSBmaWVsZC5cblxuXG4gICAgICAgIHBlcy5kYXRhID0gcGF5bG9hZC5zdWJhcnJheSg5ICsgcGF5bG9hZFs4XSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAgKiBQYXNzIGNvbXBsZXRlbHkgcGFyc2VkIFBFUyBwYWNrZXRzIHRvIHRoZSBuZXh0IHN0cmVhbSBpbiB0aGUgcGlwZWxpbmVcbiAgICAgICAqKi9cbiAgICAgIGZsdXNoU3RyZWFtID0gZnVuY3Rpb24gZmx1c2hTdHJlYW0oc3RyZWFtLCB0eXBlLCBmb3JjZUZsdXNoKSB7XG4gICAgICAgIHZhciBwYWNrZXREYXRhID0gbmV3IFVpbnQ4QXJyYXkoc3RyZWFtLnNpemUpLFxuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICB9LFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBvZmZzZXQgPSAwLFxuICAgICAgICAgICAgcGFja2V0Rmx1c2hhYmxlID0gZmFsc2UsXG4gICAgICAgICAgICBmcmFnbWVudDsgLy8gZG8gbm90aGluZyBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgZm9yIGEgY29tcGxldGVcbiAgICAgICAgLy8gUEVTIGhlYWRlclxuXG4gICAgICAgIGlmICghc3RyZWFtLmRhdGEubGVuZ3RoIHx8IHN0cmVhbS5zaXplIDwgOSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnRyYWNrSWQgPSBzdHJlYW0uZGF0YVswXS5waWQ7IC8vIHJlYXNzZW1ibGUgdGhlIHBhY2tldFxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdHJlYW0uZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGZyYWdtZW50ID0gc3RyZWFtLmRhdGFbaV07XG4gICAgICAgICAgcGFja2V0RGF0YS5zZXQoZnJhZ21lbnQuZGF0YSwgb2Zmc2V0KTtcbiAgICAgICAgICBvZmZzZXQgKz0gZnJhZ21lbnQuZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICB9IC8vIHBhcnNlIGFzc2VtYmxlZCBwYWNrZXQncyBQRVMgaGVhZGVyXG5cblxuICAgICAgICBwYXJzZVBlcyhwYWNrZXREYXRhLCBldmVudCk7IC8vIG5vbi12aWRlbyBQRVMgcGFja2V0cyBNVVNUIGhhdmUgYSBub24temVybyBQRVNfcGFja2V0X2xlbmd0aFxuICAgICAgICAvLyBjaGVjayB0aGF0IHRoZXJlIGlzIGVub3VnaCBzdHJlYW0gZGF0YSB0byBmaWxsIHRoZSBwYWNrZXRcblxuICAgICAgICBwYWNrZXRGbHVzaGFibGUgPSB0eXBlID09PSAndmlkZW8nIHx8IGV2ZW50LnBhY2tldExlbmd0aCA8PSBzdHJlYW0uc2l6ZTsgLy8gZmx1c2ggcGVuZGluZyBwYWNrZXRzIGlmIHRoZSBjb25kaXRpb25zIGFyZSByaWdodFxuXG4gICAgICAgIGlmIChmb3JjZUZsdXNoIHx8IHBhY2tldEZsdXNoYWJsZSkge1xuICAgICAgICAgIHN0cmVhbS5zaXplID0gMDtcbiAgICAgICAgICBzdHJlYW0uZGF0YS5sZW5ndGggPSAwO1xuICAgICAgICB9IC8vIG9ubHkgZW1pdCBwYWNrZXRzIHRoYXQgYXJlIGNvbXBsZXRlLiB0aGlzIGlzIHRvIGF2b2lkIGFzc2VtYmxpbmdcbiAgICAgICAgLy8gaW5jb21wbGV0ZSBQRVMgcGFja2V0cyBkdWUgdG8gcG9vciBzZWdtZW50YXRpb25cblxuXG4gICAgICAgIGlmIChwYWNrZXRGbHVzaGFibGUpIHtcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ2RhdGEnLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9FbGVtZW50YXJ5U3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG4gICAgICAvKipcbiAgICAgICAqIElkZW50aWZpZXMgTTJUUyBwYWNrZXQgdHlwZXMgYW5kIHBhcnNlcyBQRVMgcGFja2V0cyB1c2luZyBtZXRhZGF0YVxuICAgICAgICogcGFyc2VkIGZyb20gdGhlIFBNVFxuICAgICAgICoqL1xuXG5cbiAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICh7XG4gICAgICAgICAgcGF0OiBmdW5jdGlvbiBwYXQoKSB7Ly8gd2UgaGF2ZSB0byB3YWl0IGZvciB0aGUgUE1UIHRvIGFycml2ZSBhcyB3ZWxsIGJlZm9yZSB3ZVxuICAgICAgICAgICAgLy8gaGF2ZSBhbnkgbWVhbmluZ2Z1bCBtZXRhZGF0YVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcGVzOiBmdW5jdGlvbiBwZXMoKSB7XG4gICAgICAgICAgICB2YXIgc3RyZWFtLCBzdHJlYW1UeXBlO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGRhdGEuc3RyZWFtVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIHN0cmVhbVR5cGVzLkgyNjRfU1RSRUFNX1RZUEU6XG4gICAgICAgICAgICAgICAgc3RyZWFtID0gdmlkZW87XG4gICAgICAgICAgICAgICAgc3RyZWFtVHlwZSA9ICd2aWRlbyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBzdHJlYW1UeXBlcy5BRFRTX1NUUkVBTV9UWVBFOlxuICAgICAgICAgICAgICAgIHN0cmVhbSA9IGF1ZGlvO1xuICAgICAgICAgICAgICAgIHN0cmVhbVR5cGUgPSAnYXVkaW8nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2Ugc3RyZWFtVHlwZXMuTUVUQURBVEFfU1RSRUFNX1RZUEU6XG4gICAgICAgICAgICAgICAgc3RyZWFtID0gdGltZWRNZXRhZGF0YTtcbiAgICAgICAgICAgICAgICBzdHJlYW1UeXBlID0gJ3RpbWVkLW1ldGFkYXRhJztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIGlnbm9yZSB1bmtub3duIHN0cmVhbSB0eXBlc1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gLy8gaWYgYSBuZXcgcGFja2V0IGlzIHN0YXJ0aW5nLCB3ZSBjYW4gZmx1c2ggdGhlIGNvbXBsZXRlZFxuICAgICAgICAgICAgLy8gcGFja2V0XG5cblxuICAgICAgICAgICAgaWYgKGRhdGEucGF5bG9hZFVuaXRTdGFydEluZGljYXRvcikge1xuICAgICAgICAgICAgICBmbHVzaFN0cmVhbShzdHJlYW0sIHN0cmVhbVR5cGUsIHRydWUpO1xuICAgICAgICAgICAgfSAvLyBidWZmZXIgdGhpcyBmcmFnbWVudCB1bnRpbCB3ZSBhcmUgc3VyZSB3ZSd2ZSByZWNlaXZlZCB0aGVcbiAgICAgICAgICAgIC8vIGNvbXBsZXRlIHBheWxvYWRcblxuXG4gICAgICAgICAgICBzdHJlYW0uZGF0YS5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgc3RyZWFtLnNpemUgKz0gZGF0YS5kYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwbXQ6IGZ1bmN0aW9uIHBtdCgpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgICAgICAgdHlwZTogJ21ldGFkYXRhJyxcbiAgICAgICAgICAgICAgdHJhY2tzOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHByb2dyYW1NYXBUYWJsZSA9IGRhdGEucHJvZ3JhbU1hcFRhYmxlOyAvLyB0cmFuc2xhdGUgYXVkaW8gYW5kIHZpZGVvIHN0cmVhbXMgdG8gdHJhY2tzXG5cbiAgICAgICAgICAgIGlmIChwcm9ncmFtTWFwVGFibGUudmlkZW8gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZXZlbnQudHJhY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpbWVsaW5lU3RhcnRJbmZvOiB7XG4gICAgICAgICAgICAgICAgICBiYXNlTWVkaWFEZWNvZGVUaW1lOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpZDogK3Byb2dyYW1NYXBUYWJsZS52aWRlbyxcbiAgICAgICAgICAgICAgICBjb2RlYzogJ2F2YycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3ZpZGVvJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb2dyYW1NYXBUYWJsZS5hdWRpbyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBldmVudC50cmFja3MucHVzaCh7XG4gICAgICAgICAgICAgICAgdGltZWxpbmVTdGFydEluZm86IHtcbiAgICAgICAgICAgICAgICAgIGJhc2VNZWRpYURlY29kZVRpbWU6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlkOiArcHJvZ3JhbU1hcFRhYmxlLmF1ZGlvLFxuICAgICAgICAgICAgICAgIGNvZGVjOiAnYWR0cycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlbZGF0YS50eXBlXSgpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmlkZW8uc2l6ZSA9IDA7XG4gICAgICAgIHZpZGVvLmRhdGEubGVuZ3RoID0gMDtcbiAgICAgICAgYXVkaW8uc2l6ZSA9IDA7XG4gICAgICAgIGF1ZGlvLmRhdGEubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldCcpO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogRmx1c2ggYW55IHJlbWFpbmluZyBpbnB1dC4gVmlkZW8gUEVTIHBhY2tldHMgbWF5IGJlIG9mIHZhcmlhYmxlXG4gICAgICAgKiBsZW5ndGguIE5vcm1hbGx5LCB0aGUgc3RhcnQgb2YgYSBuZXcgdmlkZW8gcGFja2V0IGNhbiB0cmlnZ2VyIHRoZVxuICAgICAgICogZmluYWxpemF0aW9uIG9mIHRoZSBwcmV2aW91cyBwYWNrZXQuIFRoYXQgaXMgbm90IHBvc3NpYmxlIGlmIG5vXG4gICAgICAgKiBtb3JlIHZpZGVvIGlzIGZvcnRoY29taW5nLCBob3dldmVyLiBJbiB0aGF0IGNhc2UsIHNvbWUgb3RoZXJcbiAgICAgICAqIG1lY2hhbmlzbSAobGlrZSB0aGUgZW5kIG9mIHRoZSBmaWxlKSBoYXMgdG8gYmUgZW1wbG95ZWQuIFdoZW4gaXQgaXNcbiAgICAgICAqIGNsZWFyIHRoYXQgbm8gYWRkaXRpb25hbCBkYXRhIGlzIGZvcnRoY29taW5nLCBjYWxsaW5nIHRoaXMgbWV0aG9kXG4gICAgICAgKiB3aWxsIGZsdXNoIHRoZSBidWZmZXJlZCBwYWNrZXRzLlxuICAgICAgICovXG5cblxuICAgICAgdGhpcy5mbHVzaFN0cmVhbXNfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAhIVRISVMgT1JERVIgSVMgSU1QT1JUQU5UISFcbiAgICAgICAgLy8gdmlkZW8gZmlyc3QgdGhlbiBhdWRpb1xuICAgICAgICBmbHVzaFN0cmVhbSh2aWRlbywgJ3ZpZGVvJyk7XG4gICAgICAgIGZsdXNoU3RyZWFtKGF1ZGlvLCAnYXVkaW8nKTtcbiAgICAgICAgZmx1c2hTdHJlYW0odGltZWRNZXRhZGF0YSwgJ3RpbWVkLW1ldGFkYXRhJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZsdXNoU3RyZWFtc18oKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkb25lJyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfRWxlbWVudGFyeVN0cmVhbS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgdmFyIG0ydHMgPSB7XG4gICAgICBQQVRfUElEOiAweDAwMDAsXG4gICAgICBNUDJUX1BBQ0tFVF9MRU5HVEg6IE1QMlRfUEFDS0VUX0xFTkdUSCxcbiAgICAgIFRyYW5zcG9ydFBhY2tldFN0cmVhbTogX1RyYW5zcG9ydFBhY2tldFN0cmVhbSxcbiAgICAgIFRyYW5zcG9ydFBhcnNlU3RyZWFtOiBfVHJhbnNwb3J0UGFyc2VTdHJlYW0sXG4gICAgICBFbGVtZW50YXJ5U3RyZWFtOiBfRWxlbWVudGFyeVN0cmVhbSxcbiAgICAgIFRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtOiBUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSQxLFxuICAgICAgQ2FwdGlvblN0cmVhbTogY2FwdGlvblN0cmVhbS5DYXB0aW9uU3RyZWFtLFxuICAgICAgQ2VhNjA4U3RyZWFtOiBjYXB0aW9uU3RyZWFtLkNlYTYwOFN0cmVhbSxcbiAgICAgIE1ldGFkYXRhU3RyZWFtOiBtZXRhZGF0YVN0cmVhbVxuICAgIH07XG5cbiAgICBmb3IgKHZhciB0eXBlIGluIHN0cmVhbVR5cGVzKSB7XG4gICAgICBpZiAoc3RyZWFtVHlwZXMuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgICAgbTJ0c1t0eXBlXSA9IHN0cmVhbVR5cGVzW3R5cGVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtMnRzXzEgPSBtMnRzO1xuICAgIHZhciBPTkVfU0VDT05EX0lOX1RTJDIgPSBjbG9jay5PTkVfU0VDT05EX0lOX1RTO1xuXG4gICAgdmFyIF9BZHRzU3RyZWFtO1xuXG4gICAgdmFyIEFEVFNfU0FNUExJTkdfRlJFUVVFTkNJRVMgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXTtcbiAgICAvKlxuICAgICAqIEFjY2VwdHMgYSBFbGVtZW50YXJ5U3RyZWFtIGFuZCBlbWl0cyBkYXRhIGV2ZW50cyB3aXRoIHBhcnNlZFxuICAgICAqIEFBQyBBdWRpbyBGcmFtZXMgb2YgdGhlIGluZGl2aWR1YWwgcGFja2V0cy4gSW5wdXQgYXVkaW8gaW4gQURUU1xuICAgICAqIGZvcm1hdCBpcyB1bnBhY2tlZCBhbmQgcmUtZW1pdHRlZCBhcyBBQUMgZnJhbWVzLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwOi8vd2lraS5tdWx0aW1lZGlhLmN4L2luZGV4LnBocD90aXRsZT1BRFRTXG4gICAgICogQHNlZSBodHRwOi8vd2lraS5tdWx0aW1lZGlhLmN4Lz90aXRsZT1VbmRlcnN0YW5kaW5nX0FBQ1xuICAgICAqL1xuXG4gICAgX0FkdHNTdHJlYW0gPSBmdW5jdGlvbiBBZHRzU3RyZWFtKGhhbmRsZVBhcnRpYWxTZWdtZW50cykge1xuICAgICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgICBmcmFtZU51bSA9IDA7XG5cbiAgICAgIF9BZHRzU3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG5cbiAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgZnJhbWVMZW5ndGgsXG4gICAgICAgICAgICBwcm90ZWN0aW9uU2tpcEJ5dGVzLFxuICAgICAgICAgICAgZnJhbWVFbmQsXG4gICAgICAgICAgICBvbGRCdWZmZXIsXG4gICAgICAgICAgICBzYW1wbGVDb3VudCxcbiAgICAgICAgICAgIGFkdHNGcmFtZUR1cmF0aW9uO1xuXG4gICAgICAgIGlmICghaGFuZGxlUGFydGlhbFNlZ21lbnRzKSB7XG4gICAgICAgICAgZnJhbWVOdW0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhY2tldC50eXBlICE9PSAnYXVkaW8nKSB7XG4gICAgICAgICAgLy8gaWdub3JlIG5vbi1hdWRpbyBkYXRhXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFByZXBlbmQgYW55IGRhdGEgaW4gdGhlIGJ1ZmZlciB0byB0aGUgaW5wdXQgZGF0YSBzbyB0aGF0IHdlIGNhbiBwYXJzZVxuICAgICAgICAvLyBhYWMgZnJhbWVzIHRoZSBjcm9zcyBhIFBFUyBwYWNrZXQgYm91bmRhcnlcblxuXG4gICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICBvbGRCdWZmZXIgPSBidWZmZXI7XG4gICAgICAgICAgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkob2xkQnVmZmVyLmJ5dGVMZW5ndGggKyBwYWNrZXQuZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICBidWZmZXIuc2V0KG9sZEJ1ZmZlcik7XG4gICAgICAgICAgYnVmZmVyLnNldChwYWNrZXQuZGF0YSwgb2xkQnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1ZmZlciA9IHBhY2tldC5kYXRhO1xuICAgICAgICB9IC8vIHVucGFjayBhbnkgQURUUyBmcmFtZXMgd2hpY2ggaGF2ZSBiZWVuIGZ1bGx5IHJlY2VpdmVkXG4gICAgICAgIC8vIGZvciBkZXRhaWxzIG9uIHRoZSBBRFRTIGhlYWRlciwgc2VlIGh0dHA6Ly93aWtpLm11bHRpbWVkaWEuY3gvaW5kZXgucGhwP3RpdGxlPUFEVFNcblxuXG4gICAgICAgIHdoaWxlIChpICsgNSA8IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBMb29rIGZvciB0aGUgc3RhcnQgb2YgYW4gQURUUyBoZWFkZXIuLlxuICAgICAgICAgIGlmIChidWZmZXJbaV0gIT09IDB4RkYgfHwgKGJ1ZmZlcltpICsgMV0gJiAweEY2KSAhPT0gMHhGMCkge1xuICAgICAgICAgICAgLy8gSWYgYSB2YWxpZCBoZWFkZXIgd2FzIG5vdCBmb3VuZCwgIGp1bXAgb25lIGZvcndhcmQgYW5kIGF0dGVtcHQgdG9cbiAgICAgICAgICAgIC8vIGZpbmQgYSB2YWxpZCBBRFRTIGhlYWRlciBzdGFydGluZyBhdCB0aGUgbmV4dCBieXRlXG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IC8vIFRoZSBwcm90ZWN0aW9uIHNraXAgYml0IHRlbGxzIHVzIGlmIHdlIGhhdmUgMiBieXRlcyBvZiBDUkMgZGF0YSBhdCB0aGVcbiAgICAgICAgICAvLyBlbmQgb2YgdGhlIEFEVFMgaGVhZGVyXG5cblxuICAgICAgICAgIHByb3RlY3Rpb25Ta2lwQnl0ZXMgPSAofmJ1ZmZlcltpICsgMV0gJiAweDAxKSAqIDI7IC8vIEZyYW1lIGxlbmd0aCBpcyBhIDEzIGJpdCBpbnRlZ2VyIHN0YXJ0aW5nIDE2IGJpdHMgZnJvbSB0aGVcbiAgICAgICAgICAvLyBlbmQgb2YgdGhlIHN5bmMgc2VxdWVuY2VcblxuICAgICAgICAgIGZyYW1lTGVuZ3RoID0gKGJ1ZmZlcltpICsgM10gJiAweDAzKSA8PCAxMSB8IGJ1ZmZlcltpICsgNF0gPDwgMyB8IChidWZmZXJbaSArIDVdICYgMHhlMCkgPj4gNTtcbiAgICAgICAgICBzYW1wbGVDb3VudCA9ICgoYnVmZmVyW2kgKyA2XSAmIDB4MDMpICsgMSkgKiAxMDI0O1xuICAgICAgICAgIGFkdHNGcmFtZUR1cmF0aW9uID0gc2FtcGxlQ291bnQgKiBPTkVfU0VDT05EX0lOX1RTJDIgLyBBRFRTX1NBTVBMSU5HX0ZSRVFVRU5DSUVTWyhidWZmZXJbaSArIDJdICYgMHgzYykgPj4+IDJdO1xuICAgICAgICAgIGZyYW1lRW5kID0gaSArIGZyYW1lTGVuZ3RoOyAvLyBJZiB3ZSBkb24ndCBoYXZlIGVub3VnaCBkYXRhIHRvIGFjdHVhbGx5IGZpbmlzaCB0aGlzIEFEVFMgZnJhbWUsIHJldHVyblxuICAgICAgICAgIC8vIGFuZCB3YWl0IGZvciBtb3JlIGRhdGFcblxuICAgICAgICAgIGlmIChidWZmZXIuYnl0ZUxlbmd0aCA8IGZyYW1lRW5kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSAvLyBPdGhlcndpc2UsIGRlbGl2ZXIgdGhlIGNvbXBsZXRlIEFBQyBmcmFtZVxuXG5cbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCB7XG4gICAgICAgICAgICBwdHM6IHBhY2tldC5wdHMgKyBmcmFtZU51bSAqIGFkdHNGcmFtZUR1cmF0aW9uLFxuICAgICAgICAgICAgZHRzOiBwYWNrZXQuZHRzICsgZnJhbWVOdW0gKiBhZHRzRnJhbWVEdXJhdGlvbixcbiAgICAgICAgICAgIHNhbXBsZUNvdW50OiBzYW1wbGVDb3VudCxcbiAgICAgICAgICAgIGF1ZGlvb2JqZWN0dHlwZTogKGJ1ZmZlcltpICsgMl0gPj4+IDYgJiAweDAzKSArIDEsXG4gICAgICAgICAgICBjaGFubmVsY291bnQ6IChidWZmZXJbaSArIDJdICYgMSkgPDwgMiB8IChidWZmZXJbaSArIDNdICYgMHhjMCkgPj4+IDYsXG4gICAgICAgICAgICBzYW1wbGVyYXRlOiBBRFRTX1NBTVBMSU5HX0ZSRVFVRU5DSUVTWyhidWZmZXJbaSArIDJdICYgMHgzYykgPj4+IDJdLFxuICAgICAgICAgICAgc2FtcGxpbmdmcmVxdWVuY3lpbmRleDogKGJ1ZmZlcltpICsgMl0gJiAweDNjKSA+Pj4gMixcbiAgICAgICAgICAgIC8vIGFzc3VtZSBJU08vSUVDIDE0NDk2LTEyIEF1ZGlvU2FtcGxlRW50cnkgZGVmYXVsdCBvZiAxNlxuICAgICAgICAgICAgc2FtcGxlc2l6ZTogMTYsXG4gICAgICAgICAgICBkYXRhOiBidWZmZXIuc3ViYXJyYXkoaSArIDcgKyBwcm90ZWN0aW9uU2tpcEJ5dGVzLCBmcmFtZUVuZClcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmcmFtZU51bSsrOyAvLyBJZiB0aGUgYnVmZmVyIGlzIGVtcHR5LCBjbGVhciBpdCBhbmQgcmV0dXJuXG5cbiAgICAgICAgICBpZiAoYnVmZmVyLmJ5dGVMZW5ndGggPT09IGZyYW1lRW5kKSB7XG4gICAgICAgICAgICBidWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSAvLyBSZW1vdmUgdGhlIGZpbmlzaGVkIGZyYW1lIGZyb20gdGhlIGJ1ZmZlciBhbmQgc3RhcnQgdGhlIHByb2Nlc3MgYWdhaW5cblxuXG4gICAgICAgICAgYnVmZmVyID0gYnVmZmVyLnN1YmFycmF5KGZyYW1lRW5kKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnJhbWVOdW0gPSAwO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJ1ZmZlciA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldCcpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5lbmRUaW1lbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYnVmZmVyID0gdm9pZCAwO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2VuZGVkdGltZWxpbmUnKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9BZHRzU3RyZWFtLnByb3RvdHlwZSA9IG5ldyBzdHJlYW0oKTtcbiAgICB2YXIgYWR0cyA9IF9BZHRzU3RyZWFtO1xuICAgIC8qKlxuICAgICAqIG11eC5qc1xuICAgICAqXG4gICAgICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gICAgICogTGljZW5zZWQgQXBhY2hlLTIuMCBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy9tdXguanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgICAqL1xuXG4gICAgdmFyIEV4cEdvbG9tYjtcbiAgICAvKipcbiAgICAgKiBQYXJzZXIgZm9yIGV4cG9uZW50aWFsIEdvbG9tYiBjb2RlcywgYSB2YXJpYWJsZS1iaXR3aWR0aCBudW1iZXIgZW5jb2RpbmdcbiAgICAgKiBzY2hlbWUgdXNlZCBieSBoMjY0LlxuICAgICAqL1xuXG4gICAgRXhwR29sb21iID0gZnVuY3Rpb24gRXhwR29sb21iKHdvcmtpbmdEYXRhKSB7XG4gICAgICB2YXIgLy8gdGhlIG51bWJlciBvZiBieXRlcyBsZWZ0IHRvIGV4YW1pbmUgaW4gd29ya2luZ0RhdGFcbiAgICAgIHdvcmtpbmdCeXRlc0F2YWlsYWJsZSA9IHdvcmtpbmdEYXRhLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgLy8gdGhlIGN1cnJlbnQgd29yZCBiZWluZyBleGFtaW5lZFxuICAgICAgd29ya2luZ1dvcmQgPSAwLFxuICAgICAgICAgIC8vIDp1aW50XG4gICAgICAvLyB0aGUgbnVtYmVyIG9mIGJpdHMgbGVmdCB0byBleGFtaW5lIGluIHRoZSBjdXJyZW50IHdvcmRcbiAgICAgIHdvcmtpbmdCaXRzQXZhaWxhYmxlID0gMDsgLy8gOnVpbnQ7XG4gICAgICAvLyAoKTp1aW50XG5cbiAgICAgIHRoaXMubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gOCAqIHdvcmtpbmdCeXRlc0F2YWlsYWJsZTtcbiAgICAgIH07IC8vICgpOnVpbnRcblxuXG4gICAgICB0aGlzLmJpdHNBdmFpbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiA4ICogd29ya2luZ0J5dGVzQXZhaWxhYmxlICsgd29ya2luZ0JpdHNBdmFpbGFibGU7XG4gICAgICB9OyAvLyAoKTp2b2lkXG5cblxuICAgICAgdGhpcy5sb2FkV29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gd29ya2luZ0RhdGEuYnl0ZUxlbmd0aCAtIHdvcmtpbmdCeXRlc0F2YWlsYWJsZSxcbiAgICAgICAgICAgIHdvcmtpbmdCeXRlcyA9IG5ldyBVaW50OEFycmF5KDQpLFxuICAgICAgICAgICAgYXZhaWxhYmxlQnl0ZXMgPSBNYXRoLm1pbig0LCB3b3JraW5nQnl0ZXNBdmFpbGFibGUpO1xuXG4gICAgICAgIGlmIChhdmFpbGFibGVCeXRlcyA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gYnl0ZXMgYXZhaWxhYmxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICB3b3JraW5nQnl0ZXMuc2V0KHdvcmtpbmdEYXRhLnN1YmFycmF5KHBvc2l0aW9uLCBwb3NpdGlvbiArIGF2YWlsYWJsZUJ5dGVzKSk7XG4gICAgICAgIHdvcmtpbmdXb3JkID0gbmV3IERhdGFWaWV3KHdvcmtpbmdCeXRlcy5idWZmZXIpLmdldFVpbnQzMigwKTsgLy8gdHJhY2sgdGhlIGFtb3VudCBvZiB3b3JraW5nRGF0YSB0aGF0IGhhcyBiZWVuIHByb2Nlc3NlZFxuXG4gICAgICAgIHdvcmtpbmdCaXRzQXZhaWxhYmxlID0gYXZhaWxhYmxlQnl0ZXMgKiA4O1xuICAgICAgICB3b3JraW5nQnl0ZXNBdmFpbGFibGUgLT0gYXZhaWxhYmxlQnl0ZXM7XG4gICAgICB9OyAvLyAoY291bnQ6aW50KTp2b2lkXG5cblxuICAgICAgdGhpcy5za2lwQml0cyA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgICB2YXIgc2tpcEJ5dGVzOyAvLyA6aW50XG5cbiAgICAgICAgaWYgKHdvcmtpbmdCaXRzQXZhaWxhYmxlID4gY291bnQpIHtcbiAgICAgICAgICB3b3JraW5nV29yZCA8PD0gY291bnQ7XG4gICAgICAgICAgd29ya2luZ0JpdHNBdmFpbGFibGUgLT0gY291bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgLT0gd29ya2luZ0JpdHNBdmFpbGFibGU7XG4gICAgICAgICAgc2tpcEJ5dGVzID0gTWF0aC5mbG9vcihjb3VudCAvIDgpO1xuICAgICAgICAgIGNvdW50IC09IHNraXBCeXRlcyAqIDg7XG4gICAgICAgICAgd29ya2luZ0J5dGVzQXZhaWxhYmxlIC09IHNraXBCeXRlcztcbiAgICAgICAgICB0aGlzLmxvYWRXb3JkKCk7XG4gICAgICAgICAgd29ya2luZ1dvcmQgPDw9IGNvdW50O1xuICAgICAgICAgIHdvcmtpbmdCaXRzQXZhaWxhYmxlIC09IGNvdW50O1xuICAgICAgICB9XG4gICAgICB9OyAvLyAoc2l6ZTppbnQpOnVpbnRcblxuXG4gICAgICB0aGlzLnJlYWRCaXRzID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICAgICAgdmFyIGJpdHMgPSBNYXRoLm1pbih3b3JraW5nQml0c0F2YWlsYWJsZSwgc2l6ZSksXG4gICAgICAgICAgICAvLyA6dWludFxuICAgICAgICB2YWx1ID0gd29ya2luZ1dvcmQgPj4+IDMyIC0gYml0czsgLy8gOnVpbnRcbiAgICAgICAgLy8gaWYgc2l6ZSA+IDMxLCBoYW5kbGUgZXJyb3JcblxuICAgICAgICB3b3JraW5nQml0c0F2YWlsYWJsZSAtPSBiaXRzO1xuXG4gICAgICAgIGlmICh3b3JraW5nQml0c0F2YWlsYWJsZSA+IDApIHtcbiAgICAgICAgICB3b3JraW5nV29yZCA8PD0gYml0cztcbiAgICAgICAgfSBlbHNlIGlmICh3b3JraW5nQnl0ZXNBdmFpbGFibGUgPiAwKSB7XG4gICAgICAgICAgdGhpcy5sb2FkV29yZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYml0cyA9IHNpemUgLSBiaXRzO1xuXG4gICAgICAgIGlmIChiaXRzID4gMCkge1xuICAgICAgICAgIHJldHVybiB2YWx1IDw8IGJpdHMgfCB0aGlzLnJlYWRCaXRzKGJpdHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHU7XG4gICAgICB9OyAvLyAoKTp1aW50XG5cblxuICAgICAgdGhpcy5za2lwTGVhZGluZ1plcm9zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGVhZGluZ1plcm9Db3VudDsgLy8gOnVpbnRcblxuICAgICAgICBmb3IgKGxlYWRpbmdaZXJvQ291bnQgPSAwOyBsZWFkaW5nWmVyb0NvdW50IDwgd29ya2luZ0JpdHNBdmFpbGFibGU7ICsrbGVhZGluZ1plcm9Db3VudCkge1xuICAgICAgICAgIGlmICgod29ya2luZ1dvcmQgJiAweDgwMDAwMDAwID4+PiBsZWFkaW5nWmVyb0NvdW50KSAhPT0gMCkge1xuICAgICAgICAgICAgLy8gdGhlIGZpcnN0IGJpdCBvZiB3b3JraW5nIHdvcmQgaXMgMVxuICAgICAgICAgICAgd29ya2luZ1dvcmQgPDw9IGxlYWRpbmdaZXJvQ291bnQ7XG4gICAgICAgICAgICB3b3JraW5nQml0c0F2YWlsYWJsZSAtPSBsZWFkaW5nWmVyb0NvdW50O1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdaZXJvQ291bnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHdlIGV4aGF1c3RlZCB3b3JraW5nV29yZCBhbmQgc3RpbGwgaGF2ZSBub3QgZm91bmQgYSAxXG5cblxuICAgICAgICB0aGlzLmxvYWRXb3JkKCk7XG4gICAgICAgIHJldHVybiBsZWFkaW5nWmVyb0NvdW50ICsgdGhpcy5za2lwTGVhZGluZ1plcm9zKCk7XG4gICAgICB9OyAvLyAoKTp2b2lkXG5cblxuICAgICAgdGhpcy5za2lwVW5zaWduZWRFeHBHb2xvbWIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2tpcEJpdHMoMSArIHRoaXMuc2tpcExlYWRpbmdaZXJvcygpKTtcbiAgICAgIH07IC8vICgpOnZvaWRcblxuXG4gICAgICB0aGlzLnNraXBFeHBHb2xvbWIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2tpcEJpdHMoMSArIHRoaXMuc2tpcExlYWRpbmdaZXJvcygpKTtcbiAgICAgIH07IC8vICgpOnVpbnRcblxuXG4gICAgICB0aGlzLnJlYWRVbnNpZ25lZEV4cEdvbG9tYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNseiA9IHRoaXMuc2tpcExlYWRpbmdaZXJvcygpOyAvLyA6dWludFxuXG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKGNseiArIDEpIC0gMTtcbiAgICAgIH07IC8vICgpOmludFxuXG5cbiAgICAgIHRoaXMucmVhZEV4cEdvbG9tYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHUgPSB0aGlzLnJlYWRVbnNpZ25lZEV4cEdvbG9tYigpOyAvLyA6aW50XG5cbiAgICAgICAgaWYgKDB4MDEgJiB2YWx1KSB7XG4gICAgICAgICAgLy8gdGhlIG51bWJlciBpcyBvZGQgaWYgdGhlIGxvdyBvcmRlciBiaXQgaXMgc2V0XG4gICAgICAgICAgcmV0dXJuIDEgKyB2YWx1ID4+PiAxOyAvLyBhZGQgMSB0byBtYWtlIGl0IGV2ZW4sIGFuZCBkaXZpZGUgYnkgMlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xICogKHZhbHUgPj4+IDEpOyAvLyBkaXZpZGUgYnkgdHdvIHRoZW4gbWFrZSBpdCBuZWdhdGl2ZVxuICAgICAgfTsgLy8gU29tZSBjb252ZW5pZW5jZSBmdW5jdGlvbnNcbiAgICAgIC8vIDpCb29sZWFuXG5cblxuICAgICAgdGhpcy5yZWFkQm9vbGVhbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZEJpdHMoMSkgPT09IDE7XG4gICAgICB9OyAvLyAoKTppbnRcblxuXG4gICAgICB0aGlzLnJlYWRVbnNpZ25lZEJ5dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDgpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5sb2FkV29yZCgpO1xuICAgIH07XG5cbiAgICB2YXIgZXhwR29sb21iID0gRXhwR29sb21iO1xuXG4gICAgdmFyIF9IMjY0U3RyZWFtLCBfTmFsQnl0ZVN0cmVhbTtcblxuICAgIHZhciBQUk9GSUxFU19XSVRIX09QVElPTkFMX1NQU19EQVRBO1xuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgYSBOQUwgdW5pdCBieXRlIHN0cmVhbSBhbmQgdW5wYWNrcyB0aGUgZW1iZWRkZWQgTkFMIHVuaXRzLlxuICAgICAqL1xuXG4gICAgX05hbEJ5dGVTdHJlYW0gPSBmdW5jdGlvbiBOYWxCeXRlU3RyZWFtKCkge1xuICAgICAgdmFyIHN5bmNQb2ludCA9IDAsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBidWZmZXI7XG5cbiAgICAgIF9OYWxCeXRlU3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG4gICAgICAvKlxuICAgICAgICogU2NhbnMgYSBieXRlIHN0cmVhbSBhbmQgdHJpZ2dlcnMgYSBkYXRhIGV2ZW50IHdpdGggdGhlIE5BTCB1bml0cyBmb3VuZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIEV2ZW50IHJlY2VpdmVkIGZyb20gSDI2NFN0cmVhbVxuICAgICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhLmRhdGEgVGhlIGgyNjQgYnl0ZSBzdHJlYW0gdG8gYmUgc2Nhbm5lZFxuICAgICAgICpcbiAgICAgICAqIEBzZWUgSDI2NFN0cmVhbS5wdXNoXG4gICAgICAgKi9cblxuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgc3dhcEJ1ZmZlcjtcblxuICAgICAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGEuZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2FwQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ5dGVMZW5ndGggKyBkYXRhLmRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgc3dhcEJ1ZmZlci5zZXQoYnVmZmVyKTtcbiAgICAgICAgICBzd2FwQnVmZmVyLnNldChkYXRhLmRhdGEsIGJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICBidWZmZXIgPSBzd2FwQnVmZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxlbiA9IGJ1ZmZlci5ieXRlTGVuZ3RoOyAvLyBSZWMuIElUVS1UIEguMjY0LCBBbm5leCBCXG4gICAgICAgIC8vIHNjYW4gZm9yIE5BTCB1bml0IGJvdW5kYXJpZXNcbiAgICAgICAgLy8gYSBtYXRjaCBsb29rcyBsaWtlIHRoaXM6XG4gICAgICAgIC8vIDAgMCAxIC4uIE5BTCAuLiAwIDAgMVxuICAgICAgICAvLyBeIHN5bmMgcG9pbnQgICAgICAgIF4gaVxuICAgICAgICAvLyBvciB0aGlzOlxuICAgICAgICAvLyAwIDAgMSAuLiBOQUwgLi4gMCAwIDBcbiAgICAgICAgLy8gXiBzeW5jIHBvaW50ICAgICAgICBeIGlcbiAgICAgICAgLy8gYWR2YW5jZSB0aGUgc3luYyBwb2ludCB0byBhIE5BTCBzdGFydCwgaWYgbmVjZXNzYXJ5XG5cbiAgICAgICAgZm9yICg7IHN5bmNQb2ludCA8IGxlbiAtIDM7IHN5bmNQb2ludCsrKSB7XG4gICAgICAgICAgaWYgKGJ1ZmZlcltzeW5jUG9pbnQgKyAyXSA9PT0gMSkge1xuICAgICAgICAgICAgLy8gdGhlIHN5bmMgcG9pbnQgaXMgcHJvcGVybHkgYWxpZ25lZFxuICAgICAgICAgICAgaSA9IHN5bmNQb2ludCArIDU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIC8vIGxvb2sgYXQgdGhlIGN1cnJlbnQgYnl0ZSB0byBkZXRlcm1pbmUgaWYgd2UndmUgaGl0IHRoZSBlbmQgb2ZcbiAgICAgICAgICAvLyBhIE5BTCB1bml0IGJvdW5kYXJ5XG4gICAgICAgICAgc3dpdGNoIChidWZmZXJbaV0pIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgLy8gc2tpcCBwYXN0IG5vbi1zeW5jIHNlcXVlbmNlc1xuICAgICAgICAgICAgICBpZiAoYnVmZmVyW2kgLSAxXSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChidWZmZXJbaSAtIDJdICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9IC8vIGRlbGl2ZXIgdGhlIE5BTCB1bml0IGlmIGl0IGlzbid0IGVtcHR5XG5cblxuICAgICAgICAgICAgICBpZiAoc3luY1BvaW50ICsgMyAhPT0gaSAtIDIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCBidWZmZXIuc3ViYXJyYXkoc3luY1BvaW50ICsgMywgaSAtIDIpKTtcbiAgICAgICAgICAgICAgfSAvLyBkcm9wIHRyYWlsaW5nIHplcm9lc1xuXG5cbiAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgfSB3aGlsZSAoYnVmZmVyW2ldICE9PSAxICYmIGkgPCBsZW4pO1xuXG4gICAgICAgICAgICAgIHN5bmNQb2ludCA9IGkgLSAyO1xuICAgICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIC8vIHNraXAgcGFzdCBub24tc3luYyBzZXF1ZW5jZXNcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcltpIC0gMV0gIT09IDAgfHwgYnVmZmVyW2kgLSAyXSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfSAvLyBkZWxpdmVyIHRoZSBOQUwgdW5pdFxuXG5cbiAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgYnVmZmVyLnN1YmFycmF5KHN5bmNQb2ludCArIDMsIGkgLSAyKSk7XG4gICAgICAgICAgICAgIHN5bmNQb2ludCA9IGkgLSAyO1xuICAgICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAvLyB0aGUgY3VycmVudCBieXRlIGlzbid0IGEgb25lIG9yIHplcm8sIHNvIGl0IGNhbm5vdCBiZSBwYXJ0XG4gICAgICAgICAgICAgIC8vIG9mIGEgc3luYyBzZXF1ZW5jZVxuICAgICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBmaWx0ZXIgb3V0IHRoZSBOQUwgdW5pdHMgdGhhdCB3ZXJlIGRlbGl2ZXJlZFxuXG5cbiAgICAgICAgYnVmZmVyID0gYnVmZmVyLnN1YmFycmF5KHN5bmNQb2ludCk7XG4gICAgICAgIGkgLT0gc3luY1BvaW50O1xuICAgICAgICBzeW5jUG9pbnQgPSAwO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYnVmZmVyID0gbnVsbDtcbiAgICAgICAgc3luY1BvaW50ID0gMDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldCcpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZGVsaXZlciB0aGUgbGFzdCBidWZmZXJlZCBOQUwgdW5pdFxuICAgICAgICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5ieXRlTGVuZ3RoID4gMykge1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIGJ1ZmZlci5zdWJhcnJheShzeW5jUG9pbnQgKyAzKSk7XG4gICAgICAgIH0gLy8gcmVzZXQgdGhlIHN0cmVhbSBzdGF0ZVxuXG5cbiAgICAgICAgYnVmZmVyID0gbnVsbDtcbiAgICAgICAgc3luY1BvaW50ID0gMDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkb25lJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmVuZFRpbWVsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZW5kZWR0aW1lbGluZScpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX05hbEJ5dGVTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpOyAvLyB2YWx1ZXMgb2YgcHJvZmlsZV9pZGMgdGhhdCBpbmRpY2F0ZSBhZGRpdGlvbmFsIGZpZWxkcyBhcmUgaW5jbHVkZWQgaW4gdGhlIFNQU1xuICAgIC8vIHNlZSBSZWNvbW1lbmRhdGlvbiBJVFUtVCBILjI2NCAoNC8yMDEzKSxcbiAgICAvLyA3LjMuMi4xLjEgU2VxdWVuY2UgcGFyYW1ldGVyIHNldCBkYXRhIHN5bnRheFxuXG4gICAgUFJPRklMRVNfV0lUSF9PUFRJT05BTF9TUFNfREFUQSA9IHtcbiAgICAgIDEwMDogdHJ1ZSxcbiAgICAgIDExMDogdHJ1ZSxcbiAgICAgIDEyMjogdHJ1ZSxcbiAgICAgIDI0NDogdHJ1ZSxcbiAgICAgIDQ0OiB0cnVlLFxuICAgICAgODM6IHRydWUsXG4gICAgICA4NjogdHJ1ZSxcbiAgICAgIDExODogdHJ1ZSxcbiAgICAgIDEyODogdHJ1ZSxcbiAgICAgIDEzODogdHJ1ZSxcbiAgICAgIDEzOTogdHJ1ZSxcbiAgICAgIDEzNDogdHJ1ZVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQWNjZXB0cyBpbnB1dCBmcm9tIGEgRWxlbWVudGFyeVN0cmVhbSBhbmQgcHJvZHVjZXMgSC4yNjQgTkFMIHVuaXQgZGF0YVxuICAgICAqIGV2ZW50cy5cbiAgICAgKi9cblxuICAgIF9IMjY0U3RyZWFtID0gZnVuY3Rpb24gSDI2NFN0cmVhbSgpIHtcbiAgICAgIHZhciBuYWxCeXRlU3RyZWFtID0gbmV3IF9OYWxCeXRlU3RyZWFtKCksXG4gICAgICAgICAgc2VsZixcbiAgICAgICAgICB0cmFja0lkLFxuICAgICAgICAgIGN1cnJlbnRQdHMsXG4gICAgICAgICAgY3VycmVudER0cyxcbiAgICAgICAgICBkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzLFxuICAgICAgICAgIHJlYWRTZXF1ZW5jZVBhcmFtZXRlclNldCxcbiAgICAgICAgICBza2lwU2NhbGluZ0xpc3Q7XG5cbiAgICAgIF9IMjY0U3RyZWFtLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgLypcbiAgICAgICAqIFB1c2hlcyBhIHBhY2tldCBmcm9tIGEgc3RyZWFtIG9udG8gdGhlIE5hbEJ5dGVTdHJlYW1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gQSBwYWNrZXQgcmVjZWl2ZWQgZnJvbSBhIHN0cmVhbVxuICAgICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBwYWNrZXQuZGF0YSAtIFRoZSByYXcgYnl0ZXMgb2YgdGhlIHBhY2tldFxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHBhY2tldC5kdHMgLSBEZWNvZGUgdGltZXN0YW1wIG9mIHRoZSBwYWNrZXRcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwYWNrZXQucHRzIC0gUHJlc2VudGF0aW9uIHRpbWVzdGFtcCBvZiB0aGUgcGFja2V0XG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gcGFja2V0LnRyYWNrSWQgLSBUaGUgaWQgb2YgdGhlIGgyNjQgdHJhY2sgdGhpcyBwYWNrZXQgY2FtZSBmcm9tXG4gICAgICAgKiBAcGFyYW0geygndmlkZW8nfCdhdWRpbycpfSBwYWNrZXQudHlwZSAtIFRoZSB0eXBlIG9mIHBhY2tldFxuICAgICAgICpcbiAgICAgICAqL1xuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAgIGlmIChwYWNrZXQudHlwZSAhPT0gJ3ZpZGVvJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYWNrSWQgPSBwYWNrZXQudHJhY2tJZDtcbiAgICAgICAgY3VycmVudFB0cyA9IHBhY2tldC5wdHM7XG4gICAgICAgIGN1cnJlbnREdHMgPSBwYWNrZXQuZHRzO1xuICAgICAgICBuYWxCeXRlU3RyZWFtLnB1c2gocGFja2V0KTtcbiAgICAgIH07XG4gICAgICAvKlxuICAgICAgICogSWRlbnRpZnkgTkFMIHVuaXQgdHlwZXMgYW5kIHBhc3Mgb24gdGhlIE5BTFUsIHRyYWNrSWQsIHByZXNlbnRhdGlvbiBhbmQgZGVjb2RlIHRpbWVzdGFtcHNcbiAgICAgICAqIGZvciB0aGUgTkFMVXMgdG8gdGhlIG5leHQgc3RyZWFtIGNvbXBvbmVudC5cbiAgICAgICAqIEFsc28sIHByZXByb2Nlc3MgY2FwdGlvbiBhbmQgc2VxdWVuY2UgcGFyYW1ldGVyIE5BTFVzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YSAtIEEgTkFMIHVuaXQgaWRlbnRpZmllZCBieSBgTmFsQnl0ZVN0cmVhbS5wdXNoYFxuICAgICAgICogQHNlZSBOYWxCeXRlU3RyZWFtLnB1c2hcbiAgICAgICAqL1xuXG5cbiAgICAgIG5hbEJ5dGVTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgICAgdHJhY2tJZDogdHJhY2tJZCxcbiAgICAgICAgICBwdHM6IGN1cnJlbnRQdHMsXG4gICAgICAgICAgZHRzOiBjdXJyZW50RHRzLFxuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGFbMF0gJiAweDFmKSB7XG4gICAgICAgICAgY2FzZSAweDA1OlxuICAgICAgICAgICAgZXZlbnQubmFsVW5pdFR5cGUgPSAnc2xpY2VfbGF5ZXJfd2l0aG91dF9wYXJ0aXRpb25pbmdfcmJzcF9pZHInO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDB4MDY6XG4gICAgICAgICAgICBldmVudC5uYWxVbml0VHlwZSA9ICdzZWlfcmJzcCc7XG4gICAgICAgICAgICBldmVudC5lc2NhcGVkUkJTUCA9IGRpc2NhcmRFbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXMoZGF0YS5zdWJhcnJheSgxKSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMHgwNzpcbiAgICAgICAgICAgIGV2ZW50Lm5hbFVuaXRUeXBlID0gJ3NlcV9wYXJhbWV0ZXJfc2V0X3Jic3AnO1xuICAgICAgICAgICAgZXZlbnQuZXNjYXBlZFJCU1AgPSBkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzKGRhdGEuc3ViYXJyYXkoMSkpO1xuICAgICAgICAgICAgZXZlbnQuY29uZmlnID0gcmVhZFNlcXVlbmNlUGFyYW1ldGVyU2V0KGV2ZW50LmVzY2FwZWRSQlNQKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAweDA4OlxuICAgICAgICAgICAgZXZlbnQubmFsVW5pdFR5cGUgPSAncGljX3BhcmFtZXRlcl9zZXRfcmJzcCc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMHgwOTpcbiAgICAgICAgICAgIGV2ZW50Lm5hbFVuaXRUeXBlID0gJ2FjY2Vzc191bml0X2RlbGltaXRlcl9yYnNwJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IC8vIFRoaXMgdHJpZ2dlcnMgZGF0YSBvbiB0aGUgSDI2NFN0cmVhbVxuXG5cbiAgICAgICAgc2VsZi50cmlnZ2VyKCdkYXRhJywgZXZlbnQpO1xuICAgICAgfSk7XG4gICAgICBuYWxCeXRlU3RyZWFtLm9uKCdkb25lJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnRyaWdnZXIoJ2RvbmUnKTtcbiAgICAgIH0pO1xuICAgICAgbmFsQnl0ZVN0cmVhbS5vbigncGFydGlhbGRvbmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYudHJpZ2dlcigncGFydGlhbGRvbmUnKTtcbiAgICAgIH0pO1xuICAgICAgbmFsQnl0ZVN0cmVhbS5vbigncmVzZXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYudHJpZ2dlcigncmVzZXQnKTtcbiAgICAgIH0pO1xuICAgICAgbmFsQnl0ZVN0cmVhbS5vbignZW5kZWR0aW1lbGluZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdlbmRlZHRpbWVsaW5lJyk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbmFsQnl0ZVN0cmVhbS5mbHVzaCgpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5wYXJ0aWFsRmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG5hbEJ5dGVTdHJlYW0ucGFydGlhbEZsdXNoKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBuYWxCeXRlU3RyZWFtLnJlc2V0KCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmVuZFRpbWVsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBuYWxCeXRlU3RyZWFtLmVuZFRpbWVsaW5lKCk7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgKiBBZHZhbmNlIHRoZSBFeHBHb2xvbWIgZGVjb2RlciBwYXN0IGEgc2NhbGluZyBsaXN0LiBUaGUgc2NhbGluZ1xuICAgICAgICogbGlzdCBpcyBvcHRpb25hbGx5IHRyYW5zbWl0dGVkIGFzIHBhcnQgb2YgYSBzZXF1ZW5jZSBwYXJhbWV0ZXJcbiAgICAgICAqIHNldCBhbmQgaXMgbm90IHJlbGV2YW50IHRvIHRyYW5zbXV4aW5nLlxuICAgICAgICogQHBhcmFtIGNvdW50IHtudW1iZXJ9IHRoZSBudW1iZXIgb2YgZW50cmllcyBpbiB0aGlzIHNjYWxpbmcgbGlzdFxuICAgICAgICogQHBhcmFtIGV4cEdvbG9tYkRlY29kZXIge29iamVjdH0gYW4gRXhwR29sb21iIHBvaW50ZWQgdG8gdGhlXG4gICAgICAgKiBzdGFydCBvZiBhIHNjYWxpbmcgbGlzdFxuICAgICAgICogQHNlZSBSZWNvbW1lbmRhdGlvbiBJVFUtVCBILjI2NCwgU2VjdGlvbiA3LjMuMi4xLjEuMVxuICAgICAgICovXG5cblxuICAgICAgc2tpcFNjYWxpbmdMaXN0ID0gZnVuY3Rpb24gc2tpcFNjYWxpbmdMaXN0KGNvdW50LCBleHBHb2xvbWJEZWNvZGVyKSB7XG4gICAgICAgIHZhciBsYXN0U2NhbGUgPSA4LFxuICAgICAgICAgICAgbmV4dFNjYWxlID0gOCxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBkZWx0YVNjYWxlO1xuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgICAgaWYgKG5leHRTY2FsZSAhPT0gMCkge1xuICAgICAgICAgICAgZGVsdGFTY2FsZSA9IGV4cEdvbG9tYkRlY29kZXIucmVhZEV4cEdvbG9tYigpO1xuICAgICAgICAgICAgbmV4dFNjYWxlID0gKGxhc3RTY2FsZSArIGRlbHRhU2NhbGUgKyAyNTYpICUgMjU2O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxhc3RTY2FsZSA9IG5leHRTY2FsZSA9PT0gMCA/IGxhc3RTY2FsZSA6IG5leHRTY2FsZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogRXhwdW5nZSBhbnkgXCJFbXVsYXRpb24gUHJldmVudGlvblwiIGJ5dGVzIGZyb20gYSBcIlJhdyBCeXRlXG4gICAgICAgKiBTZXF1ZW5jZSBQYXlsb2FkXCJcbiAgICAgICAqIEBwYXJhbSBkYXRhIHtVaW50OEFycmF5fSB0aGUgYnl0ZXMgb2YgYSBSQlNQIGZyb20gYSBOQUxcbiAgICAgICAqIHVuaXRcbiAgICAgICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IHRoZSBSQlNQIHdpdGhvdXQgYW55IEVtdWxhdGlvblxuICAgICAgICogUHJldmVudGlvbiBCeXRlc1xuICAgICAgICovXG5cblxuICAgICAgZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlcyA9IGZ1bmN0aW9uIGRpc2NhcmRFbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXMoZGF0YSkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zID0gW10sXG4gICAgICAgICAgICBpID0gMSxcbiAgICAgICAgICAgIG5ld0xlbmd0aCxcbiAgICAgICAgICAgIG5ld0RhdGE7IC8vIEZpbmQgYWxsIGBFbXVsYXRpb24gUHJldmVudGlvbiBCeXRlc2BcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbmd0aCAtIDIpIHtcbiAgICAgICAgICBpZiAoZGF0YVtpXSA9PT0gMCAmJiBkYXRhW2kgKyAxXSA9PT0gMCAmJiBkYXRhW2kgKyAyXSA9PT0gMHgwMykge1xuICAgICAgICAgICAgZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zLnB1c2goaSArIDIpO1xuICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIElmIG5vIEVtdWxhdGlvbiBQcmV2ZW50aW9uIEJ5dGVzIHdlcmUgZm91bmQganVzdCByZXR1cm4gdGhlIG9yaWdpbmFsXG4gICAgICAgIC8vIGFycmF5XG5cblxuICAgICAgICBpZiAoZW11bGF0aW9uUHJldmVudGlvbkJ5dGVzUG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9IC8vIENyZWF0ZSBhIG5ldyBhcnJheSB0byBob2xkIHRoZSBOQUwgdW5pdCBkYXRhXG5cblxuICAgICAgICBuZXdMZW5ndGggPSBsZW5ndGggLSBlbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXNQb3NpdGlvbnMubGVuZ3RoO1xuICAgICAgICBuZXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkobmV3TGVuZ3RoKTtcbiAgICAgICAgdmFyIHNvdXJjZUluZGV4ID0gMDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbmV3TGVuZ3RoOyBzb3VyY2VJbmRleCsrLCBpKyspIHtcbiAgICAgICAgICBpZiAoc291cmNlSW5kZXggPT09IGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9uc1swXSkge1xuICAgICAgICAgICAgLy8gU2tpcCB0aGlzIGJ5dGVcbiAgICAgICAgICAgIHNvdXJjZUluZGV4Kys7IC8vIFJlbW92ZSB0aGlzIHBvc2l0aW9uIGluZGV4XG5cbiAgICAgICAgICAgIGVtdWxhdGlvblByZXZlbnRpb25CeXRlc1Bvc2l0aW9ucy5zaGlmdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5ld0RhdGFbaV0gPSBkYXRhW3NvdXJjZUluZGV4XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdEYXRhO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogUmVhZCBhIHNlcXVlbmNlIHBhcmFtZXRlciBzZXQgYW5kIHJldHVybiBzb21lIGludGVyZXN0aW5nIHZpZGVvXG4gICAgICAgKiBwcm9wZXJ0aWVzLiBBIHNlcXVlbmNlIHBhcmFtZXRlciBzZXQgaXMgdGhlIEgyNjQgbWV0YWRhdGEgdGhhdFxuICAgICAgICogZGVzY3JpYmVzIHRoZSBwcm9wZXJ0aWVzIG9mIHVwY29taW5nIHZpZGVvIGZyYW1lcy5cbiAgICAgICAqIEBwYXJhbSBkYXRhIHtVaW50OEFycmF5fSB0aGUgYnl0ZXMgb2YgYSBzZXF1ZW5jZSBwYXJhbWV0ZXIgc2V0XG4gICAgICAgKiBAcmV0dXJuIHtvYmplY3R9IGFuIG9iamVjdCB3aXRoIGNvbmZpZ3VyYXRpb24gcGFyc2VkIGZyb20gdGhlXG4gICAgICAgKiBzZXF1ZW5jZSBwYXJhbWV0ZXIgc2V0LCBpbmNsdWRpbmcgdGhlIGRpbWVuc2lvbnMgb2YgdGhlXG4gICAgICAgKiBhc3NvY2lhdGVkIHZpZGVvIGZyYW1lcy5cbiAgICAgICAqL1xuXG5cbiAgICAgIHJlYWRTZXF1ZW5jZVBhcmFtZXRlclNldCA9IGZ1bmN0aW9uIHJlYWRTZXF1ZW5jZVBhcmFtZXRlclNldChkYXRhKSB7XG4gICAgICAgIHZhciBmcmFtZUNyb3BMZWZ0T2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIGZyYW1lQ3JvcFJpZ2h0T2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIGZyYW1lQ3JvcFRvcE9mZnNldCA9IDAsXG4gICAgICAgICAgICBmcmFtZUNyb3BCb3R0b21PZmZzZXQgPSAwLFxuICAgICAgICAgICAgc2FyU2NhbGUgPSAxLFxuICAgICAgICAgICAgZXhwR29sb21iRGVjb2RlcixcbiAgICAgICAgICAgIHByb2ZpbGVJZGMsXG4gICAgICAgICAgICBsZXZlbElkYyxcbiAgICAgICAgICAgIHByb2ZpbGVDb21wYXRpYmlsaXR5LFxuICAgICAgICAgICAgY2hyb21hRm9ybWF0SWRjLFxuICAgICAgICAgICAgcGljT3JkZXJDbnRUeXBlLFxuICAgICAgICAgICAgbnVtUmVmRnJhbWVzSW5QaWNPcmRlckNudEN5Y2xlLFxuICAgICAgICAgICAgcGljV2lkdGhJbk1ic01pbnVzMSxcbiAgICAgICAgICAgIHBpY0hlaWdodEluTWFwVW5pdHNNaW51czEsXG4gICAgICAgICAgICBmcmFtZU1ic09ubHlGbGFnLFxuICAgICAgICAgICAgc2NhbGluZ0xpc3RDb3VudCxcbiAgICAgICAgICAgIHNhclJhdGlvLFxuICAgICAgICAgICAgYXNwZWN0UmF0aW9JZGMsXG4gICAgICAgICAgICBpO1xuICAgICAgICBleHBHb2xvbWJEZWNvZGVyID0gbmV3IGV4cEdvbG9tYihkYXRhKTtcbiAgICAgICAgcHJvZmlsZUlkYyA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkQnl0ZSgpOyAvLyBwcm9maWxlX2lkY1xuXG4gICAgICAgIHByb2ZpbGVDb21wYXRpYmlsaXR5ID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRCeXRlKCk7IC8vIGNvbnN0cmFpbnRfc2V0WzAtNV1fZmxhZ1xuXG4gICAgICAgIGxldmVsSWRjID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRCeXRlKCk7IC8vIGxldmVsX2lkYyB1KDgpXG5cbiAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwVW5zaWduZWRFeHBHb2xvbWIoKTsgLy8gc2VxX3BhcmFtZXRlcl9zZXRfaWRcbiAgICAgICAgLy8gc29tZSBwcm9maWxlcyBoYXZlIG1vcmUgb3B0aW9uYWwgZGF0YSB3ZSBkb24ndCBuZWVkXG5cbiAgICAgICAgaWYgKFBST0ZJTEVTX1dJVEhfT1BUSU9OQUxfU1BTX0RBVEFbcHJvZmlsZUlkY10pIHtcbiAgICAgICAgICBjaHJvbWFGb3JtYXRJZGMgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRVbnNpZ25lZEV4cEdvbG9tYigpO1xuXG4gICAgICAgICAgaWYgKGNocm9tYUZvcm1hdElkYyA9PT0gMykge1xuICAgICAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwQml0cygxKTsgLy8gc2VwYXJhdGVfY29sb3VyX3BsYW5lX2ZsYWdcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBleHBHb2xvbWJEZWNvZGVyLnNraXBVbnNpZ25lZEV4cEdvbG9tYigpOyAvLyBiaXRfZGVwdGhfbHVtYV9taW51czhcblxuICAgICAgICAgIGV4cEdvbG9tYkRlY29kZXIuc2tpcFVuc2lnbmVkRXhwR29sb21iKCk7IC8vIGJpdF9kZXB0aF9jaHJvbWFfbWludXM4XG5cbiAgICAgICAgICBleHBHb2xvbWJEZWNvZGVyLnNraXBCaXRzKDEpOyAvLyBxcHByaW1lX3lfemVyb190cmFuc2Zvcm1fYnlwYXNzX2ZsYWdcblxuICAgICAgICAgIGlmIChleHBHb2xvbWJEZWNvZGVyLnJlYWRCb29sZWFuKCkpIHtcbiAgICAgICAgICAgIC8vIHNlcV9zY2FsaW5nX21hdHJpeF9wcmVzZW50X2ZsYWdcbiAgICAgICAgICAgIHNjYWxpbmdMaXN0Q291bnQgPSBjaHJvbWFGb3JtYXRJZGMgIT09IDMgPyA4IDogMTI7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzY2FsaW5nTGlzdENvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGV4cEdvbG9tYkRlY29kZXIucmVhZEJvb2xlYW4oKSkge1xuICAgICAgICAgICAgICAgIC8vIHNlcV9zY2FsaW5nX2xpc3RfcHJlc2VudF9mbGFnWyBpIF1cbiAgICAgICAgICAgICAgICBpZiAoaSA8IDYpIHtcbiAgICAgICAgICAgICAgICAgIHNraXBTY2FsaW5nTGlzdCgxNiwgZXhwR29sb21iRGVjb2Rlcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHNraXBTY2FsaW5nTGlzdCg2NCwgZXhwR29sb21iRGVjb2Rlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwVW5zaWduZWRFeHBHb2xvbWIoKTsgLy8gbG9nMl9tYXhfZnJhbWVfbnVtX21pbnVzNFxuXG4gICAgICAgIHBpY09yZGVyQ250VHlwZSA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkRXhwR29sb21iKCk7XG5cbiAgICAgICAgaWYgKHBpY09yZGVyQ250VHlwZSA9PT0gMCkge1xuICAgICAgICAgIGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkRXhwR29sb21iKCk7IC8vIGxvZzJfbWF4X3BpY19vcmRlcl9jbnRfbHNiX21pbnVzNFxuICAgICAgICB9IGVsc2UgaWYgKHBpY09yZGVyQ250VHlwZSA9PT0gMSkge1xuICAgICAgICAgIGV4cEdvbG9tYkRlY29kZXIuc2tpcEJpdHMoMSk7IC8vIGRlbHRhX3BpY19vcmRlcl9hbHdheXNfemVyb19mbGFnXG5cbiAgICAgICAgICBleHBHb2xvbWJEZWNvZGVyLnNraXBFeHBHb2xvbWIoKTsgLy8gb2Zmc2V0X2Zvcl9ub25fcmVmX3BpY1xuXG4gICAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwRXhwR29sb21iKCk7IC8vIG9mZnNldF9mb3JfdG9wX3RvX2JvdHRvbV9maWVsZFxuXG4gICAgICAgICAgbnVtUmVmRnJhbWVzSW5QaWNPcmRlckNudEN5Y2xlID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRFeHBHb2xvbWIoKTtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1SZWZGcmFtZXNJblBpY09yZGVyQ250Q3ljbGU7IGkrKykge1xuICAgICAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwRXhwR29sb21iKCk7IC8vIG9mZnNldF9mb3JfcmVmX2ZyYW1lWyBpIF1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHBHb2xvbWJEZWNvZGVyLnNraXBVbnNpZ25lZEV4cEdvbG9tYigpOyAvLyBtYXhfbnVtX3JlZl9mcmFtZXNcblxuICAgICAgICBleHBHb2xvbWJEZWNvZGVyLnNraXBCaXRzKDEpOyAvLyBnYXBzX2luX2ZyYW1lX251bV92YWx1ZV9hbGxvd2VkX2ZsYWdcblxuICAgICAgICBwaWNXaWR0aEluTWJzTWludXMxID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRFeHBHb2xvbWIoKTtcbiAgICAgICAgcGljSGVpZ2h0SW5NYXBVbml0c01pbnVzMSA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkRXhwR29sb21iKCk7XG4gICAgICAgIGZyYW1lTWJzT25seUZsYWcgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRCaXRzKDEpO1xuXG4gICAgICAgIGlmIChmcmFtZU1ic09ubHlGbGFnID09PSAwKSB7XG4gICAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwQml0cygxKTsgLy8gbWJfYWRhcHRpdmVfZnJhbWVfZmllbGRfZmxhZ1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwR29sb21iRGVjb2Rlci5za2lwQml0cygxKTsgLy8gZGlyZWN0Xzh4OF9pbmZlcmVuY2VfZmxhZ1xuXG4gICAgICAgIGlmIChleHBHb2xvbWJEZWNvZGVyLnJlYWRCb29sZWFuKCkpIHtcbiAgICAgICAgICAvLyBmcmFtZV9jcm9wcGluZ19mbGFnXG4gICAgICAgICAgZnJhbWVDcm9wTGVmdE9mZnNldCA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkRXhwR29sb21iKCk7XG4gICAgICAgICAgZnJhbWVDcm9wUmlnaHRPZmZzZXQgPSBleHBHb2xvbWJEZWNvZGVyLnJlYWRVbnNpZ25lZEV4cEdvbG9tYigpO1xuICAgICAgICAgIGZyYW1lQ3JvcFRvcE9mZnNldCA9IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkRXhwR29sb21iKCk7XG4gICAgICAgICAgZnJhbWVDcm9wQm90dG9tT2Zmc2V0ID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRFeHBHb2xvbWIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChleHBHb2xvbWJEZWNvZGVyLnJlYWRCb29sZWFuKCkpIHtcbiAgICAgICAgICAvLyB2dWlfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWdcbiAgICAgICAgICBpZiAoZXhwR29sb21iRGVjb2Rlci5yZWFkQm9vbGVhbigpKSB7XG4gICAgICAgICAgICAvLyBhc3BlY3RfcmF0aW9faW5mb19wcmVzZW50X2ZsYWdcbiAgICAgICAgICAgIGFzcGVjdFJhdGlvSWRjID0gZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRCeXRlKCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoYXNwZWN0UmF0aW9JZGMpIHtcbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHNhclJhdGlvID0gWzEsIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFsxMiwgMTFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFsxMCwgMTFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFsxNiwgMTFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFs0MCwgMzNdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFsyNCwgMTFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFsyMCwgMTFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFszMiwgMTFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFs4MCwgMzNdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbMTgsIDExXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgIHNhclJhdGlvID0gWzE1LCAxMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFs2NCwgMzNdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbMTYwLCA5OV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICBzYXJSYXRpbyA9IFs0LCAzXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgIHNhclJhdGlvID0gWzMsIDJdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbMiwgMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAyNTU6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc2FyUmF0aW8gPSBbZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRCeXRlKCkgPDwgOCB8IGV4cEdvbG9tYkRlY29kZXIucmVhZFVuc2lnbmVkQnl0ZSgpLCBleHBHb2xvbWJEZWNvZGVyLnJlYWRVbnNpZ25lZEJ5dGUoKSA8PCA4IHwgZXhwR29sb21iRGVjb2Rlci5yZWFkVW5zaWduZWRCeXRlKCldO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2FyUmF0aW8pIHtcbiAgICAgICAgICAgICAgc2FyU2NhbGUgPSBzYXJSYXRpb1swXSAvIHNhclJhdGlvWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJvZmlsZUlkYzogcHJvZmlsZUlkYyxcbiAgICAgICAgICBsZXZlbElkYzogbGV2ZWxJZGMsXG4gICAgICAgICAgcHJvZmlsZUNvbXBhdGliaWxpdHk6IHByb2ZpbGVDb21wYXRpYmlsaXR5LFxuICAgICAgICAgIHdpZHRoOiBNYXRoLmNlaWwoKChwaWNXaWR0aEluTWJzTWludXMxICsgMSkgKiAxNiAtIGZyYW1lQ3JvcExlZnRPZmZzZXQgKiAyIC0gZnJhbWVDcm9wUmlnaHRPZmZzZXQgKiAyKSAqIHNhclNjYWxlKSxcbiAgICAgICAgICBoZWlnaHQ6ICgyIC0gZnJhbWVNYnNPbmx5RmxhZykgKiAocGljSGVpZ2h0SW5NYXBVbml0c01pbnVzMSArIDEpICogMTYgLSBmcmFtZUNyb3BUb3BPZmZzZXQgKiAyIC0gZnJhbWVDcm9wQm90dG9tT2Zmc2V0ICogMixcbiAgICAgICAgICBzYXJSYXRpbzogc2FyUmF0aW9cbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9IMjY0U3RyZWFtLnByb3RvdHlwZSA9IG5ldyBzdHJlYW0oKTtcbiAgICB2YXIgaDI2NCA9IHtcbiAgICAgIEgyNjRTdHJlYW06IF9IMjY0U3RyZWFtLFxuICAgICAgTmFsQnl0ZVN0cmVhbTogX05hbEJ5dGVTdHJlYW1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIG11eC5qc1xuICAgICAqXG4gICAgICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gICAgICogTGljZW5zZWQgQXBhY2hlLTIuMCBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy9tdXguanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgICAqXG4gICAgICogVXRpbGl0aWVzIHRvIGRldGVjdCBiYXNpYyBwcm9wZXJ0aWVzIGFuZCBtZXRhZGF0YSBhYm91dCBBYWMgZGF0YS5cbiAgICAgKi9cblxuICAgIHZhciBBRFRTX1NBTVBMSU5HX0ZSRVFVRU5DSUVTJDEgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXTtcblxuICAgIHZhciBwYXJzZUlkM1RhZ1NpemUgPSBmdW5jdGlvbiBwYXJzZUlkM1RhZ1NpemUoaGVhZGVyLCBieXRlSW5kZXgpIHtcbiAgICAgIHZhciByZXR1cm5TaXplID0gaGVhZGVyW2J5dGVJbmRleCArIDZdIDw8IDIxIHwgaGVhZGVyW2J5dGVJbmRleCArIDddIDw8IDE0IHwgaGVhZGVyW2J5dGVJbmRleCArIDhdIDw8IDcgfCBoZWFkZXJbYnl0ZUluZGV4ICsgOV0sXG4gICAgICAgICAgZmxhZ3MgPSBoZWFkZXJbYnl0ZUluZGV4ICsgNV0sXG4gICAgICAgICAgZm9vdGVyUHJlc2VudCA9IChmbGFncyAmIDE2KSA+PiA0OyAvLyBpZiB3ZSBnZXQgYSBuZWdhdGl2ZSByZXR1cm5TaXplIGNsYW1wIGl0IHRvIDBcblxuICAgICAgcmV0dXJuU2l6ZSA9IHJldHVyblNpemUgPj0gMCA/IHJldHVyblNpemUgOiAwO1xuXG4gICAgICBpZiAoZm9vdGVyUHJlc2VudCkge1xuICAgICAgICByZXR1cm4gcmV0dXJuU2l6ZSArIDIwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0dXJuU2l6ZSArIDEwO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0SWQzT2Zmc2V0ID0gZnVuY3Rpb24gZ2V0SWQzT2Zmc2V0KGRhdGEsIG9mZnNldCkge1xuICAgICAgaWYgKGRhdGEubGVuZ3RoIC0gb2Zmc2V0IDwgMTAgfHwgZGF0YVtvZmZzZXRdICE9PSAnSScuY2hhckNvZGVBdCgwKSB8fCBkYXRhW29mZnNldCArIDFdICE9PSAnRCcuY2hhckNvZGVBdCgwKSB8fCBkYXRhW29mZnNldCArIDJdICE9PSAnMycuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICBvZmZzZXQgKz0gcGFyc2VJZDNUYWdTaXplKGRhdGEsIG9mZnNldCk7XG4gICAgICByZXR1cm4gZ2V0SWQzT2Zmc2V0KGRhdGEsIG9mZnNldCk7XG4gICAgfTsgLy8gVE9ETzogdXNlIHZocy11dGlsc1xuXG5cbiAgICB2YXIgaXNMaWtlbHlBYWNEYXRhID0gZnVuY3Rpb24gaXNMaWtlbHlBYWNEYXRhKGRhdGEpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBnZXRJZDNPZmZzZXQoZGF0YSwgMCk7XG4gICAgICByZXR1cm4gZGF0YS5sZW5ndGggPj0gb2Zmc2V0ICsgMiAmJiAoZGF0YVtvZmZzZXRdICYgMHhGRikgPT09IDB4RkYgJiYgKGRhdGFbb2Zmc2V0ICsgMV0gJiAweEYwKSA9PT0gMHhGMCAmJiAvLyB2ZXJpZnkgdGhhdCB0aGUgMiBsYXllciBiaXRzIGFyZSAwLCBha2EgdGhpc1xuICAgICAgLy8gaXMgbm90IG1wMyBkYXRhIGJ1dCBhYWMgZGF0YS5cbiAgICAgIChkYXRhW29mZnNldCArIDFdICYgMHgxNikgPT09IDB4MTA7XG4gICAgfTtcblxuICAgIHZhciBwYXJzZVN5bmNTYWZlSW50ZWdlciQxID0gZnVuY3Rpb24gcGFyc2VTeW5jU2FmZUludGVnZXIkMShkYXRhKSB7XG4gICAgICByZXR1cm4gZGF0YVswXSA8PCAyMSB8IGRhdGFbMV0gPDwgMTQgfCBkYXRhWzJdIDw8IDcgfCBkYXRhWzNdO1xuICAgIH07IC8vIHJldHVybiBhIHBlcmNlbnQtZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3BlY2lmaWVkIGJ5dGUgcmFuZ2VcbiAgICAvLyBAc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGVyY2VudC1lbmNvZGluZ1xuXG5cbiAgICB2YXIgcGVyY2VudEVuY29kZSQxID0gZnVuY3Rpb24gcGVyY2VudEVuY29kZSQxKGJ5dGVzLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICByZXN1bHQgPSAnJztcblxuICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gJyUnICsgKCcwMCcgKyBieXRlc1tpXS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9OyAvLyByZXR1cm4gdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3BlY2lmaWVkIGJ5dGUgcmFuZ2UsXG4gICAgLy8gaW50ZXJwcmV0ZWQgYXMgSVNPLTg4NTktMS5cblxuXG4gICAgdmFyIHBhcnNlSXNvODg1OTEkMSA9IGZ1bmN0aW9uIHBhcnNlSXNvODg1OTEkMShieXRlcywgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIHVuZXNjYXBlKHBlcmNlbnRFbmNvZGUkMShieXRlcywgc3RhcnQsIGVuZCkpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICB9O1xuXG4gICAgdmFyIHBhcnNlQWR0c1NpemUgPSBmdW5jdGlvbiBwYXJzZUFkdHNTaXplKGhlYWRlciwgYnl0ZUluZGV4KSB7XG4gICAgICB2YXIgbG93VGhyZWUgPSAoaGVhZGVyW2J5dGVJbmRleCArIDVdICYgMHhFMCkgPj4gNSxcbiAgICAgICAgICBtaWRkbGUgPSBoZWFkZXJbYnl0ZUluZGV4ICsgNF0gPDwgMyxcbiAgICAgICAgICBoaWdoVHdvID0gaGVhZGVyW2J5dGVJbmRleCArIDNdICYgMHgzIDw8IDExO1xuICAgICAgcmV0dXJuIGhpZ2hUd28gfCBtaWRkbGUgfCBsb3dUaHJlZTtcbiAgICB9O1xuXG4gICAgdmFyIHBhcnNlVHlwZSA9IGZ1bmN0aW9uIHBhcnNlVHlwZShoZWFkZXIsIGJ5dGVJbmRleCkge1xuICAgICAgaWYgKGhlYWRlcltieXRlSW5kZXhdID09PSAnSScuY2hhckNvZGVBdCgwKSAmJiBoZWFkZXJbYnl0ZUluZGV4ICsgMV0gPT09ICdEJy5jaGFyQ29kZUF0KDApICYmIGhlYWRlcltieXRlSW5kZXggKyAyXSA9PT0gJzMnLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgcmV0dXJuICd0aW1lZC1tZXRhZGF0YSc7XG4gICAgICB9IGVsc2UgaWYgKGhlYWRlcltieXRlSW5kZXhdICYgMHhmZiA9PT0gMHhmZiAmJiAoaGVhZGVyW2J5dGVJbmRleCArIDFdICYgMHhmMCkgPT09IDB4ZjApIHtcbiAgICAgICAgcmV0dXJuICdhdWRpbyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICB2YXIgcGFyc2VTYW1wbGVSYXRlID0gZnVuY3Rpb24gcGFyc2VTYW1wbGVSYXRlKHBhY2tldCkge1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSArIDUgPCBwYWNrZXQubGVuZ3RoKSB7XG4gICAgICAgIGlmIChwYWNrZXRbaV0gIT09IDB4RkYgfHwgKHBhY2tldFtpICsgMV0gJiAweEY2KSAhPT0gMHhGMCkge1xuICAgICAgICAgIC8vIElmIGEgdmFsaWQgaGVhZGVyIHdhcyBub3QgZm91bmQsICBqdW1wIG9uZSBmb3J3YXJkIGFuZCBhdHRlbXB0IHRvXG4gICAgICAgICAgLy8gZmluZCBhIHZhbGlkIEFEVFMgaGVhZGVyIHN0YXJ0aW5nIGF0IHRoZSBuZXh0IGJ5dGVcbiAgICAgICAgICBpKys7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQURUU19TQU1QTElOR19GUkVRVUVOQ0lFUyQxWyhwYWNrZXRbaSArIDJdICYgMHgzYykgPj4+IDJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIHBhcnNlQWFjVGltZXN0YW1wID0gZnVuY3Rpb24gcGFyc2VBYWNUaW1lc3RhbXAocGFja2V0KSB7XG4gICAgICB2YXIgZnJhbWVTdGFydCwgZnJhbWVTaXplLCBmcmFtZSwgZnJhbWVIZWFkZXI7IC8vIGZpbmQgdGhlIHN0YXJ0IG9mIHRoZSBmaXJzdCBmcmFtZSBhbmQgdGhlIGVuZCBvZiB0aGUgdGFnXG5cbiAgICAgIGZyYW1lU3RhcnQgPSAxMDtcblxuICAgICAgaWYgKHBhY2tldFs1XSAmIDB4NDApIHtcbiAgICAgICAgLy8gYWR2YW5jZSB0aGUgZnJhbWUgc3RhcnQgcGFzdCB0aGUgZXh0ZW5kZWQgaGVhZGVyXG4gICAgICAgIGZyYW1lU3RhcnQgKz0gNDsgLy8gaGVhZGVyIHNpemUgZmllbGRcblxuICAgICAgICBmcmFtZVN0YXJ0ICs9IHBhcnNlU3luY1NhZmVJbnRlZ2VyJDEocGFja2V0LnN1YmFycmF5KDEwLCAxNCkpO1xuICAgICAgfSAvLyBwYXJzZSBvbmUgb3IgbW9yZSBJRDMgZnJhbWVzXG4gICAgICAvLyBodHRwOi8vaWQzLm9yZy9pZDN2Mi4zLjAjSUQzdjJfZnJhbWVfb3ZlcnZpZXdcblxuXG4gICAgICBkbyB7XG4gICAgICAgIC8vIGRldGVybWluZSB0aGUgbnVtYmVyIG9mIGJ5dGVzIGluIHRoaXMgZnJhbWVcbiAgICAgICAgZnJhbWVTaXplID0gcGFyc2VTeW5jU2FmZUludGVnZXIkMShwYWNrZXQuc3ViYXJyYXkoZnJhbWVTdGFydCArIDQsIGZyYW1lU3RhcnQgKyA4KSk7XG5cbiAgICAgICAgaWYgKGZyYW1lU2l6ZSA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lSGVhZGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZShwYWNrZXRbZnJhbWVTdGFydF0sIHBhY2tldFtmcmFtZVN0YXJ0ICsgMV0sIHBhY2tldFtmcmFtZVN0YXJ0ICsgMl0sIHBhY2tldFtmcmFtZVN0YXJ0ICsgM10pO1xuXG4gICAgICAgIGlmIChmcmFtZUhlYWRlciA9PT0gJ1BSSVYnKSB7XG4gICAgICAgICAgZnJhbWUgPSBwYWNrZXQuc3ViYXJyYXkoZnJhbWVTdGFydCArIDEwLCBmcmFtZVN0YXJ0ICsgZnJhbWVTaXplICsgMTApO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmcmFtZS5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmcmFtZVtpXSA9PT0gMCkge1xuICAgICAgICAgICAgICB2YXIgb3duZXIgPSBwYXJzZUlzbzg4NTkxJDEoZnJhbWUsIDAsIGkpO1xuXG4gICAgICAgICAgICAgIGlmIChvd25lciA9PT0gJ2NvbS5hcHBsZS5zdHJlYW1pbmcudHJhbnNwb3J0U3RyZWFtVGltZXN0YW1wJykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gZnJhbWUuc3ViYXJyYXkoaSArIDEpO1xuICAgICAgICAgICAgICAgIHZhciBzaXplID0gKGRbM10gJiAweDAxKSA8PCAzMCB8IGRbNF0gPDwgMjIgfCBkWzVdIDw8IDE0IHwgZFs2XSA8PCA2IHwgZFs3XSA+Pj4gMjtcbiAgICAgICAgICAgICAgICBzaXplICo9IDQ7XG4gICAgICAgICAgICAgICAgc2l6ZSArPSBkWzddICYgMHgwMztcbiAgICAgICAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lU3RhcnQgKz0gMTA7IC8vIGFkdmFuY2UgcGFzdCB0aGUgZnJhbWUgaGVhZGVyXG5cbiAgICAgICAgZnJhbWVTdGFydCArPSBmcmFtZVNpemU7IC8vIGFkdmFuY2UgcGFzdCB0aGUgZnJhbWUgYm9keVxuICAgICAgfSB3aGlsZSAoZnJhbWVTdGFydCA8IHBhY2tldC5ieXRlTGVuZ3RoKTtcblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciB1dGlscyA9IHtcbiAgICAgIGlzTGlrZWx5QWFjRGF0YTogaXNMaWtlbHlBYWNEYXRhLFxuICAgICAgcGFyc2VJZDNUYWdTaXplOiBwYXJzZUlkM1RhZ1NpemUsXG4gICAgICBwYXJzZUFkdHNTaXplOiBwYXJzZUFkdHNTaXplLFxuICAgICAgcGFyc2VUeXBlOiBwYXJzZVR5cGUsXG4gICAgICBwYXJzZVNhbXBsZVJhdGU6IHBhcnNlU2FtcGxlUmF0ZSxcbiAgICAgIHBhcnNlQWFjVGltZXN0YW1wOiBwYXJzZUFhY1RpbWVzdGFtcFxuICAgIH07IC8vIENvbnN0YW50c1xuXG4gICAgdmFyIF9BYWNTdHJlYW07XG4gICAgLyoqXG4gICAgICogU3BsaXRzIGFuIGluY29taW5nIHN0cmVhbSBvZiBiaW5hcnkgZGF0YSBpbnRvIEFEVFMgYW5kIElEMyBGcmFtZXMuXG4gICAgICovXG5cblxuICAgIF9BYWNTdHJlYW0gPSBmdW5jdGlvbiBBYWNTdHJlYW0oKSB7XG4gICAgICB2YXIgZXZlcnl0aGluZyA9IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgICAgdGltZVN0YW1wID0gMDtcblxuICAgICAgX0FhY1N0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLnNldFRpbWVzdGFtcCA9IGZ1bmN0aW9uICh0aW1lc3RhbXApIHtcbiAgICAgICAgdGltZVN0YW1wID0gdGltZXN0YW1wO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgICAgIHZhciBmcmFtZVNpemUgPSAwLFxuICAgICAgICAgICAgYnl0ZUluZGV4ID0gMCxcbiAgICAgICAgICAgIGJ5dGVzTGVmdCxcbiAgICAgICAgICAgIGNodW5rLFxuICAgICAgICAgICAgcGFja2V0LFxuICAgICAgICAgICAgdGVtcExlbmd0aDsgLy8gSWYgdGhlcmUgYXJlIGJ5dGVzIHJlbWFpbmluZyBmcm9tIHRoZSBsYXN0IHNlZ21lbnQsIHByZXBlbmQgdGhlbSB0byB0aGVcbiAgICAgICAgLy8gYnl0ZXMgdGhhdCB3ZXJlIHB1c2hlZCBpblxuXG4gICAgICAgIGlmIChldmVyeXRoaW5nLmxlbmd0aCkge1xuICAgICAgICAgIHRlbXBMZW5ndGggPSBldmVyeXRoaW5nLmxlbmd0aDtcbiAgICAgICAgICBldmVyeXRoaW5nID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMuYnl0ZUxlbmd0aCArIHRlbXBMZW5ndGgpO1xuICAgICAgICAgIGV2ZXJ5dGhpbmcuc2V0KGV2ZXJ5dGhpbmcuc3ViYXJyYXkoMCwgdGVtcExlbmd0aCkpO1xuICAgICAgICAgIGV2ZXJ5dGhpbmcuc2V0KGJ5dGVzLCB0ZW1wTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVyeXRoaW5nID0gYnl0ZXM7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoZXZlcnl0aGluZy5sZW5ndGggLSBieXRlSW5kZXggPj0gMykge1xuICAgICAgICAgIGlmIChldmVyeXRoaW5nW2J5dGVJbmRleF0gPT09ICdJJy5jaGFyQ29kZUF0KDApICYmIGV2ZXJ5dGhpbmdbYnl0ZUluZGV4ICsgMV0gPT09ICdEJy5jaGFyQ29kZUF0KDApICYmIGV2ZXJ5dGhpbmdbYnl0ZUluZGV4ICsgMl0gPT09ICczJy5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgICAgICAvLyBFeGl0IGVhcmx5IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBlbm91Z2ggdG8gcGFyc2VcbiAgICAgICAgICAgIC8vIHRoZSBJRDMgdGFnIGhlYWRlclxuICAgICAgICAgICAgaWYgKGV2ZXJ5dGhpbmcubGVuZ3RoIC0gYnl0ZUluZGV4IDwgMTApIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IC8vIGNoZWNrIGZyYW1lc2l6ZVxuXG5cbiAgICAgICAgICAgIGZyYW1lU2l6ZSA9IHV0aWxzLnBhcnNlSWQzVGFnU2l6ZShldmVyeXRoaW5nLCBieXRlSW5kZXgpOyAvLyBFeGl0IGVhcmx5IGlmIHdlIGRvbid0IGhhdmUgZW5vdWdoIGluIHRoZSBidWZmZXJcbiAgICAgICAgICAgIC8vIHRvIGVtaXQgYSBmdWxsIHBhY2tldFxuICAgICAgICAgICAgLy8gQWRkIHRvIGJ5dGVJbmRleCB0byBzdXBwb3J0IG11bHRpcGxlIElEMyB0YWdzIGluIHNlcXVlbmNlXG5cbiAgICAgICAgICAgIGlmIChieXRlSW5kZXggKyBmcmFtZVNpemUgPiBldmVyeXRoaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2h1bmsgPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICd0aW1lZC1tZXRhZGF0YScsXG4gICAgICAgICAgICAgIGRhdGE6IGV2ZXJ5dGhpbmcuc3ViYXJyYXkoYnl0ZUluZGV4LCBieXRlSW5kZXggKyBmcmFtZVNpemUpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgY2h1bmspO1xuICAgICAgICAgICAgYnl0ZUluZGV4ICs9IGZyYW1lU2l6ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKGV2ZXJ5dGhpbmdbYnl0ZUluZGV4XSAmIDB4ZmYpID09PSAweGZmICYmIChldmVyeXRoaW5nW2J5dGVJbmRleCArIDFdICYgMHhmMCkgPT09IDB4ZjApIHtcbiAgICAgICAgICAgIC8vIEV4aXQgZWFybHkgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGVub3VnaCB0byBwYXJzZVxuICAgICAgICAgICAgLy8gdGhlIEFEVFMgZnJhbWUgaGVhZGVyXG4gICAgICAgICAgICBpZiAoZXZlcnl0aGluZy5sZW5ndGggLSBieXRlSW5kZXggPCA3KSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmcmFtZVNpemUgPSB1dGlscy5wYXJzZUFkdHNTaXplKGV2ZXJ5dGhpbmcsIGJ5dGVJbmRleCk7IC8vIEV4aXQgZWFybHkgaWYgd2UgZG9uJ3QgaGF2ZSBlbm91Z2ggaW4gdGhlIGJ1ZmZlclxuICAgICAgICAgICAgLy8gdG8gZW1pdCBhIGZ1bGwgcGFja2V0XG5cbiAgICAgICAgICAgIGlmIChieXRlSW5kZXggKyBmcmFtZVNpemUgPiBldmVyeXRoaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFja2V0ID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgICAgICAgICBkYXRhOiBldmVyeXRoaW5nLnN1YmFycmF5KGJ5dGVJbmRleCwgYnl0ZUluZGV4ICsgZnJhbWVTaXplKSxcbiAgICAgICAgICAgICAgcHRzOiB0aW1lU3RhbXAsXG4gICAgICAgICAgICAgIGR0czogdGltZVN0YW1wXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhJywgcGFja2V0KTtcbiAgICAgICAgICAgIGJ5dGVJbmRleCArPSBmcmFtZVNpemU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBieXRlSW5kZXgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGJ5dGVzTGVmdCA9IGV2ZXJ5dGhpbmcubGVuZ3RoIC0gYnl0ZUluZGV4O1xuXG4gICAgICAgIGlmIChieXRlc0xlZnQgPiAwKSB7XG4gICAgICAgICAgZXZlcnl0aGluZyA9IGV2ZXJ5dGhpbmcuc3ViYXJyYXkoYnl0ZUluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVyeXRoaW5nID0gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXZlcnl0aGluZyA9IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVzZXQnKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZW5kVGltZWxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV2ZXJ5dGhpbmcgPSBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2VuZGVkdGltZWxpbmUnKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9BYWNTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpO1xuICAgIHZhciBhYWMgPSBfQWFjU3RyZWFtOyAvLyBjb25zdGFudHNcblxuICAgIHZhciBBVURJT19QUk9QRVJUSUVTID0gWydhdWRpb29iamVjdHR5cGUnLCAnY2hhbm5lbGNvdW50JywgJ3NhbXBsZXJhdGUnLCAnc2FtcGxpbmdmcmVxdWVuY3lpbmRleCcsICdzYW1wbGVzaXplJ107XG4gICAgdmFyIGF1ZGlvUHJvcGVydGllcyA9IEFVRElPX1BST1BFUlRJRVM7XG4gICAgdmFyIFZJREVPX1BST1BFUlRJRVMgPSBbJ3dpZHRoJywgJ2hlaWdodCcsICdwcm9maWxlSWRjJywgJ2xldmVsSWRjJywgJ3Byb2ZpbGVDb21wYXRpYmlsaXR5JywgJ3NhclJhdGlvJ107XG4gICAgdmFyIHZpZGVvUHJvcGVydGllcyA9IFZJREVPX1BST1BFUlRJRVM7XG4gICAgdmFyIEgyNjRTdHJlYW0kMSA9IGgyNjQuSDI2NFN0cmVhbTtcbiAgICB2YXIgaXNMaWtlbHlBYWNEYXRhJDEgPSB1dGlscy5pc0xpa2VseUFhY0RhdGE7XG4gICAgdmFyIE9ORV9TRUNPTkRfSU5fVFMkMyA9IGNsb2NrLk9ORV9TRUNPTkRfSU5fVFM7IC8vIG9iamVjdCB0eXBlc1xuXG4gICAgdmFyIF9WaWRlb1NlZ21lbnRTdHJlYW0sIF9BdWRpb1NlZ21lbnRTdHJlYW0sIF9UcmFuc211eGVyLCBfQ29hbGVzY2VTdHJlYW07XG4gICAgLyoqXG4gICAgICogQ29tcGFyZSB0d28gYXJyYXlzIChldmVuIHR5cGVkKSBmb3Igc2FtZS1uZXNzXG4gICAgICovXG5cblxuICAgIHZhciBhcnJheUVxdWFscyA9IGZ1bmN0aW9uIGFycmF5RXF1YWxzKGEsIGIpIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gLy8gY29tcGFyZSB0aGUgdmFsdWUgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheVxuXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICB2YXIgZ2VuZXJhdGVWaWRlb1NlZ21lbnRUaW1pbmdJbmZvID0gZnVuY3Rpb24gZ2VuZXJhdGVWaWRlb1NlZ21lbnRUaW1pbmdJbmZvKGJhc2VNZWRpYURlY29kZVRpbWUsIHN0YXJ0RHRzLCBzdGFydFB0cywgZW5kRHRzLCBlbmRQdHMsIHByZXBlbmRlZENvbnRlbnREdXJhdGlvbikge1xuICAgICAgdmFyIHB0c09mZnNldEZyb21EdHMgPSBzdGFydFB0cyAtIHN0YXJ0RHRzLFxuICAgICAgICAgIGRlY29kZUR1cmF0aW9uID0gZW5kRHRzIC0gc3RhcnREdHMsXG4gICAgICAgICAgcHJlc2VudGF0aW9uRHVyYXRpb24gPSBlbmRQdHMgLSBzdGFydFB0czsgLy8gVGhlIFBUUyBhbmQgRFRTIHZhbHVlcyBhcmUgYmFzZWQgb24gdGhlIGFjdHVhbCBzdHJlYW0gdGltZXMgZnJvbSB0aGUgc2VnbWVudCxcbiAgICAgIC8vIGhvd2V2ZXIsIHRoZSBwbGF5ZXIgdGltZSB2YWx1ZXMgd2lsbCByZWZsZWN0IGEgc3RhcnQgZnJvbSB0aGUgYmFzZU1lZGlhRGVjb2RlVGltZS5cbiAgICAgIC8vIEluIG9yZGVyIHRvIHByb3ZpZGUgcmVsZXZhbnQgdmFsdWVzIGZvciB0aGUgcGxheWVyIHRpbWVzLCBiYXNlIHRpbWluZyBpbmZvIG9uIHRoZVxuICAgICAgLy8gYmFzZU1lZGlhRGVjb2RlVGltZSBhbmQgdGhlIERUUyBhbmQgUFRTIGR1cmF0aW9ucyBvZiB0aGUgc2VnbWVudC5cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICBkdHM6IGJhc2VNZWRpYURlY29kZVRpbWUsXG4gICAgICAgICAgcHRzOiBiYXNlTWVkaWFEZWNvZGVUaW1lICsgcHRzT2Zmc2V0RnJvbUR0c1xuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHtcbiAgICAgICAgICBkdHM6IGJhc2VNZWRpYURlY29kZVRpbWUgKyBkZWNvZGVEdXJhdGlvbixcbiAgICAgICAgICBwdHM6IGJhc2VNZWRpYURlY29kZVRpbWUgKyBwcmVzZW50YXRpb25EdXJhdGlvblxuICAgICAgICB9LFxuICAgICAgICBwcmVwZW5kZWRDb250ZW50RHVyYXRpb246IHByZXBlbmRlZENvbnRlbnREdXJhdGlvbixcbiAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZTogYmFzZU1lZGlhRGVjb2RlVGltZVxuICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBzaW5nbGUtdHJhY2ssIElTTyBCTUZGIG1lZGlhIHNlZ21lbnQgZnJvbSBBQUMgZGF0YVxuICAgICAqIGV2ZW50cy4gVGhlIG91dHB1dCBvZiB0aGlzIHN0cmVhbSBjYW4gYmUgZmVkIHRvIGEgU291cmNlQnVmZmVyXG4gICAgICogY29uZmlndXJlZCB3aXRoIGEgc3VpdGFibGUgaW5pdGlhbGl6YXRpb24gc2VnbWVudC5cbiAgICAgKiBAcGFyYW0gdHJhY2sge29iamVjdH0gdHJhY2sgbWV0YWRhdGEgY29uZmlndXJhdGlvblxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtvYmplY3R9IHRyYW5zbXV4ZXIgb3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzIHtib29sZWFufSBJZiB0cnVlLCBrZWVwIHRoZSB0aW1lc3RhbXBzXG4gICAgICogICAgICAgIGluIHRoZSBzb3VyY2U7IGZhbHNlIHRvIGFkanVzdCB0aGUgZmlyc3Qgc2VnbWVudCB0byBzdGFydCBhdCAwLlxuICAgICAqL1xuXG5cbiAgICBfQXVkaW9TZWdtZW50U3RyZWFtID0gZnVuY3Rpb24gQXVkaW9TZWdtZW50U3RyZWFtKHRyYWNrLCBvcHRpb25zKSB7XG4gICAgICB2YXIgYWR0c0ZyYW1lcyA9IFtdLFxuICAgICAgICAgIHNlcXVlbmNlTnVtYmVyID0gMCxcbiAgICAgICAgICBlYXJsaWVzdEFsbG93ZWREdHMgPSAwLFxuICAgICAgICAgIGF1ZGlvQXBwZW5kU3RhcnRUcyA9IDAsXG4gICAgICAgICAgdmlkZW9CYXNlTWVkaWFEZWNvZGVUaW1lID0gSW5maW5pdHk7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgX0F1ZGlvU2VnbWVudFN0cmVhbS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0cmFja0RlY29kZUluZm8uY29sbGVjdER0c0luZm8odHJhY2ssIGRhdGEpO1xuXG4gICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgIGF1ZGlvUHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICB0cmFja1twcm9wXSA9IGRhdGFbcHJvcF07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gYnVmZmVyIGF1ZGlvIGRhdGEgdW50aWwgZW5kKCkgaXMgY2FsbGVkXG5cblxuICAgICAgICBhZHRzRnJhbWVzLnB1c2goZGF0YSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldEVhcmxpZXN0RHRzID0gZnVuY3Rpb24gKGVhcmxpZXN0RHRzKSB7XG4gICAgICAgIGVhcmxpZXN0QWxsb3dlZER0cyA9IGVhcmxpZXN0RHRzO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRWaWRlb0Jhc2VNZWRpYURlY29kZVRpbWUgPSBmdW5jdGlvbiAoYmFzZU1lZGlhRGVjb2RlVGltZSkge1xuICAgICAgICB2aWRlb0Jhc2VNZWRpYURlY29kZVRpbWUgPSBiYXNlTWVkaWFEZWNvZGVUaW1lO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRBdWRpb0FwcGVuZFN0YXJ0ID0gZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICBhdWRpb0FwcGVuZFN0YXJ0VHMgPSB0aW1lc3RhbXA7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZnJhbWVzLCBtb29mLCBtZGF0LCBib3hlcywgZnJhbWVEdXJhdGlvbjsgLy8gcmV0dXJuIGVhcmx5IGlmIG5vIGF1ZGlvIGRhdGEgaGFzIGJlZW4gb2JzZXJ2ZWRcblxuICAgICAgICBpZiAoYWR0c0ZyYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnLCAnQXVkaW9TZWdtZW50U3RyZWFtJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZnJhbWVzID0gYXVkaW9GcmFtZVV0aWxzLnRyaW1BZHRzRnJhbWVzQnlFYXJsaWVzdER0cyhhZHRzRnJhbWVzLCB0cmFjaywgZWFybGllc3RBbGxvd2VkRHRzKTtcbiAgICAgICAgdHJhY2suYmFzZU1lZGlhRGVjb2RlVGltZSA9IHRyYWNrRGVjb2RlSW5mby5jYWxjdWxhdGVUcmFja0Jhc2VNZWRpYURlY29kZVRpbWUodHJhY2ssIG9wdGlvbnMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyk7XG4gICAgICAgIGF1ZGlvRnJhbWVVdGlscy5wcmVmaXhXaXRoU2lsZW5jZSh0cmFjaywgZnJhbWVzLCBhdWRpb0FwcGVuZFN0YXJ0VHMsIHZpZGVvQmFzZU1lZGlhRGVjb2RlVGltZSk7IC8vIHdlIGhhdmUgdG8gYnVpbGQgdGhlIGluZGV4IGZyb20gYnl0ZSBsb2NhdGlvbnMgdG9cbiAgICAgICAgLy8gc2FtcGxlcyAodGhhdCBpcywgYWR0cyBmcmFtZXMpIGluIHRoZSBhdWRpbyBkYXRhXG5cbiAgICAgICAgdHJhY2suc2FtcGxlcyA9IGF1ZGlvRnJhbWVVdGlscy5nZW5lcmF0ZVNhbXBsZVRhYmxlKGZyYW1lcyk7IC8vIGNvbmNhdGVuYXRlIHRoZSBhdWRpbyBkYXRhIHRvIGNvbnN0dWN0IHRoZSBtZGF0XG5cbiAgICAgICAgbWRhdCA9IG1wNEdlbmVyYXRvci5tZGF0KGF1ZGlvRnJhbWVVdGlscy5jb25jYXRlbmF0ZUZyYW1lRGF0YShmcmFtZXMpKTtcbiAgICAgICAgYWR0c0ZyYW1lcyA9IFtdO1xuICAgICAgICBtb29mID0gbXA0R2VuZXJhdG9yLm1vb2Yoc2VxdWVuY2VOdW1iZXIsIFt0cmFja10pO1xuICAgICAgICBib3hlcyA9IG5ldyBVaW50OEFycmF5KG1vb2YuYnl0ZUxlbmd0aCArIG1kYXQuYnl0ZUxlbmd0aCk7IC8vIGJ1bXAgdGhlIHNlcXVlbmNlIG51bWJlciBmb3IgbmV4dCB0aW1lXG5cbiAgICAgICAgc2VxdWVuY2VOdW1iZXIrKztcbiAgICAgICAgYm94ZXMuc2V0KG1vb2YpO1xuICAgICAgICBib3hlcy5zZXQobWRhdCwgbW9vZi5ieXRlTGVuZ3RoKTtcbiAgICAgICAgdHJhY2tEZWNvZGVJbmZvLmNsZWFyRHRzSW5mbyh0cmFjayk7XG4gICAgICAgIGZyYW1lRHVyYXRpb24gPSBNYXRoLmNlaWwoT05FX1NFQ09ORF9JTl9UUyQzICogMTAyNCAvIHRyYWNrLnNhbXBsZXJhdGUpOyAvLyBUT0RPIHRoaXMgY2hlY2sgd2FzIGFkZGVkIHRvIG1haW50YWluIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IChwYXJ0aWN1bGFybHkgd2l0aFxuICAgICAgICAvLyB0ZXN0cykgb24gYWRkaW5nIHRoZSB0aW1pbmdJbmZvIGV2ZW50LiBIb3dldmVyLCBpdCBzZWVtcyB1bmxpa2VseSB0aGF0IHRoZXJlJ3MgYVxuICAgICAgICAvLyB2YWxpZCB1c2UtY2FzZSB3aGVyZSBhbiBpbml0IHNlZ21lbnQvZGF0YSBzaG91bGQgYmUgdHJpZ2dlcmVkIHdpdGhvdXQgYXNzb2NpYXRlZFxuICAgICAgICAvLyBmcmFtZXMuIExlYXZpbmcgZm9yIG5vdywgYnV0IHNob3VsZCBiZSBsb29rZWQgaW50by5cblxuICAgICAgICBpZiAoZnJhbWVzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMudHJpZ2dlcigndGltaW5nSW5mbycsIHtcbiAgICAgICAgICAgIHN0YXJ0OiBmcmFtZXNbMF0ucHRzLFxuICAgICAgICAgICAgZW5kOiBmcmFtZXNbMF0ucHRzICsgZnJhbWVzLmxlbmd0aCAqIGZyYW1lRHVyYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIHtcbiAgICAgICAgICB0cmFjazogdHJhY2ssXG4gICAgICAgICAgYm94ZXM6IGJveGVzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnLCAnQXVkaW9TZWdtZW50U3RyZWFtJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cmFja0RlY29kZUluZm8uY2xlYXJEdHNJbmZvKHRyYWNrKTtcbiAgICAgICAgYWR0c0ZyYW1lcyA9IFtdO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Jlc2V0Jyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfQXVkaW9TZWdtZW50U3RyZWFtLnByb3RvdHlwZSA9IG5ldyBzdHJlYW0oKTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgc2luZ2xlLXRyYWNrLCBJU08gQk1GRiBtZWRpYSBzZWdtZW50IGZyb20gSDI2NCBkYXRhXG4gICAgICogZXZlbnRzLiBUaGUgb3V0cHV0IG9mIHRoaXMgc3RyZWFtIGNhbiBiZSBmZWQgdG8gYSBTb3VyY2VCdWZmZXJcbiAgICAgKiBjb25maWd1cmVkIHdpdGggYSBzdWl0YWJsZSBpbml0aWFsaXphdGlvbiBzZWdtZW50LlxuICAgICAqIEBwYXJhbSB0cmFjayB7b2JqZWN0fSB0cmFjayBtZXRhZGF0YSBjb25maWd1cmF0aW9uXG4gICAgICogQHBhcmFtIG9wdGlvbnMge29iamVjdH0gdHJhbnNtdXhlciBvcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSBvcHRpb25zLmFsaWduR29wc0F0RW5kIHtib29sZWFufSBJZiB0cnVlLCBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlXG4gICAgICogICAgICAgIGdvcHNUb0FsaWduV2l0aCBsaXN0IHdoZW4gYXR0ZW1wdGluZyB0byBhbGlnbiBnb3AgcHRzXG4gICAgICogQHBhcmFtIG9wdGlvbnMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyB7Ym9vbGVhbn0gSWYgdHJ1ZSwga2VlcCB0aGUgdGltZXN0YW1wc1xuICAgICAqICAgICAgICBpbiB0aGUgc291cmNlOyBmYWxzZSB0byBhZGp1c3QgdGhlIGZpcnN0IHNlZ21lbnQgdG8gc3RhcnQgYXQgMC5cbiAgICAgKi9cblxuICAgIF9WaWRlb1NlZ21lbnRTdHJlYW0gPSBmdW5jdGlvbiBWaWRlb1NlZ21lbnRTdHJlYW0odHJhY2ssIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZXF1ZW5jZU51bWJlciA9IDAsXG4gICAgICAgICAgbmFsVW5pdHMgPSBbXSxcbiAgICAgICAgICBnb3BzVG9BbGlnbldpdGggPSBbXSxcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcHBzO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIF9WaWRlb1NlZ21lbnRTdHJlYW0ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcblxuICAgICAgZGVsZXRlIHRyYWNrLm1pblBUUztcbiAgICAgIHRoaXMuZ29wQ2FjaGVfID0gW107XG4gICAgICAvKipcbiAgICAgICAgKiBDb25zdHJ1Y3RzIGEgSVNPIEJNRkYgc2VnbWVudCBnaXZlbiBIMjY0IG5hbFVuaXRzXG4gICAgICAgICogQHBhcmFtIHtPYmplY3R9IG5hbFVuaXQgQSBkYXRhIGV2ZW50IHJlcHJlc2VudGluZyBhIG5hbFVuaXRcbiAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFsVW5pdC5uYWxVbml0VHlwZVxuICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBuYWxVbml0LmNvbmZpZyBQcm9wZXJ0aWVzIGZvciBhIG1wNCB0cmFja1xuICAgICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gbmFsVW5pdC5kYXRhIFRoZSBuYWxVbml0IGJ5dGVzXG4gICAgICAgICogQHNlZSBsaWIvY29kZWNzL2gyNjQuanNcbiAgICAgICAqKi9cblxuICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKG5hbFVuaXQpIHtcbiAgICAgICAgdHJhY2tEZWNvZGVJbmZvLmNvbGxlY3REdHNJbmZvKHRyYWNrLCBuYWxVbml0KTsgLy8gcmVjb3JkIHRoZSB0cmFjayBjb25maWdcblxuICAgICAgICBpZiAobmFsVW5pdC5uYWxVbml0VHlwZSA9PT0gJ3NlcV9wYXJhbWV0ZXJfc2V0X3Jic3AnICYmICFjb25maWcpIHtcbiAgICAgICAgICBjb25maWcgPSBuYWxVbml0LmNvbmZpZztcbiAgICAgICAgICB0cmFjay5zcHMgPSBbbmFsVW5pdC5kYXRhXTtcbiAgICAgICAgICB2aWRlb1Byb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgdHJhY2tbcHJvcF0gPSBjb25maWdbcHJvcF07XG4gICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmFsVW5pdC5uYWxVbml0VHlwZSA9PT0gJ3BpY19wYXJhbWV0ZXJfc2V0X3Jic3AnICYmICFwcHMpIHtcbiAgICAgICAgICBwcHMgPSBuYWxVbml0LmRhdGE7XG4gICAgICAgICAgdHJhY2sucHBzID0gW25hbFVuaXQuZGF0YV07XG4gICAgICAgIH0gLy8gYnVmZmVyIHZpZGVvIHVudGlsIGZsdXNoKCkgaXMgY2FsbGVkXG5cblxuICAgICAgICBuYWxVbml0cy5wdXNoKG5hbFVuaXQpO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICAqIFBhc3MgY29uc3RydWN0ZWQgSVNPIEJNRkYgdHJhY2sgYW5kIGJveGVzIG9uIHRvIHRoZVxuICAgICAgICAqIG5leHQgc3RyZWFtIGluIHRoZSBwaXBlbGluZVxuICAgICAgICoqL1xuXG5cbiAgICAgIHRoaXMuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmcmFtZXMsXG4gICAgICAgICAgICBnb3BGb3JGdXNpb24sXG4gICAgICAgICAgICBnb3BzLFxuICAgICAgICAgICAgbW9vZixcbiAgICAgICAgICAgIG1kYXQsXG4gICAgICAgICAgICBib3hlcyxcbiAgICAgICAgICAgIHByZXBlbmRlZENvbnRlbnREdXJhdGlvbiA9IDAsXG4gICAgICAgICAgICBmaXJzdEdvcCxcbiAgICAgICAgICAgIGxhc3RHb3A7IC8vIFRocm93IGF3YXkgbmFsVW5pdHMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBieXRlIHN0cmVhbSB1bnRpbFxuICAgICAgICAvLyB3ZSBmaW5kIHRoZSBmaXJzdCBBVURcblxuICAgICAgICB3aGlsZSAobmFsVW5pdHMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG5hbFVuaXRzWzBdLm5hbFVuaXRUeXBlID09PSAnYWNjZXNzX3VuaXRfZGVsaW1pdGVyX3Jic3AnKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuYWxVbml0cy5zaGlmdCgpO1xuICAgICAgICB9IC8vIFJldHVybiBlYXJseSBpZiBubyB2aWRlbyBkYXRhIGhhcyBiZWVuIG9ic2VydmVkXG5cblxuICAgICAgICBpZiAobmFsVW5pdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5yZXNldFN0cmVhbV8oKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnLCAnVmlkZW9TZWdtZW50U3RyZWFtJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIE9yZ2FuaXplIHRoZSByYXcgbmFsLXVuaXRzIGludG8gYXJyYXlzIHRoYXQgcmVwcmVzZW50XG4gICAgICAgIC8vIGhpZ2hlci1sZXZlbCBjb25zdHJ1Y3RzIHN1Y2ggYXMgZnJhbWVzIGFuZCBnb3BzXG4gICAgICAgIC8vIChncm91cC1vZi1waWN0dXJlcylcblxuXG4gICAgICAgIGZyYW1lcyA9IGZyYW1lVXRpbHMuZ3JvdXBOYWxzSW50b0ZyYW1lcyhuYWxVbml0cyk7XG4gICAgICAgIGdvcHMgPSBmcmFtZVV0aWxzLmdyb3VwRnJhbWVzSW50b0dvcHMoZnJhbWVzKTsgLy8gSWYgdGhlIGZpcnN0IGZyYW1lIG9mIHRoaXMgZnJhZ21lbnQgaXMgbm90IGEga2V5ZnJhbWUgd2UgaGF2ZVxuICAgICAgICAvLyBhIHByb2JsZW0gc2luY2UgTVNFIChvbiBDaHJvbWUpIHJlcXVpcmVzIGEgbGVhZGluZyBrZXlmcmFtZS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgaGF2ZSB0d28gYXBwcm9hY2hlcyB0byByZXBhaXJpbmcgdGhpcyBzaXR1YXRpb246XG4gICAgICAgIC8vIDEpIEdPUC1GVVNJT046XG4gICAgICAgIC8vICAgIFRoaXMgaXMgd2hlcmUgd2Uga2VlcCB0cmFjayBvZiB0aGUgR09QUyAoZ3JvdXAtb2YtcGljdHVyZXMpXG4gICAgICAgIC8vICAgIGZyb20gcHJldmlvdXMgZnJhZ21lbnRzIGFuZCBhdHRlbXB0IHRvIGZpbmQgb25lIHRoYXQgd2UgY2FuXG4gICAgICAgIC8vICAgIHByZXBlbmQgdG8gdGhlIGN1cnJlbnQgZnJhZ21lbnQgaW4gb3JkZXIgdG8gY3JlYXRlIGEgdmFsaWRcbiAgICAgICAgLy8gICAgZnJhZ21lbnQuXG4gICAgICAgIC8vIDIpIEtFWUZSQU1FLVBVTExJTkc6XG4gICAgICAgIC8vICAgIEhlcmUgd2Ugc2VhcmNoIGZvciB0aGUgZmlyc3Qga2V5ZnJhbWUgaW4gdGhlIGZyYWdtZW50IGFuZFxuICAgICAgICAvLyAgICB0aHJvdyBhd2F5IGFsbCB0aGUgZnJhbWVzIGJldHdlZW4gdGhlIHN0YXJ0IG9mIHRoZSBmcmFnbWVudFxuICAgICAgICAvLyAgICBhbmQgdGhhdCBrZXlmcmFtZS4gV2UgdGhlbiBleHRlbmQgdGhlIGR1cmF0aW9uIGFuZCBwdWxsIHRoZVxuICAgICAgICAvLyAgICBQVFMgb2YgdGhlIGtleWZyYW1lIGZvcndhcmQgc28gdGhhdCBpdCBjb3ZlcnMgdGhlIHRpbWUgcmFuZ2VcbiAgICAgICAgLy8gICAgb2YgdGhlIGZyYW1lcyB0aGF0IHdlcmUgZGlzcG9zZWQgb2YuXG4gICAgICAgIC8vXG4gICAgICAgIC8vICMxIGlzIGZhciBwcmVmZXJlYWJsZSBvdmVyICMyIHdoaWNoIGNhbiBjYXVzZSBcInN0dXR0ZXJpbmdcIiBidXRcbiAgICAgICAgLy8gcmVxdWlyZXMgbW9yZSB0aGluZ3MgdG8gYmUganVzdCByaWdodC5cblxuICAgICAgICBpZiAoIWdvcHNbMF1bMF0ua2V5RnJhbWUpIHtcbiAgICAgICAgICAvLyBTZWFyY2ggZm9yIGEgZ29wIGZvciBmdXNpb24gZnJvbSBvdXIgZ29wQ2FjaGVcbiAgICAgICAgICBnb3BGb3JGdXNpb24gPSB0aGlzLmdldEdvcEZvckZ1c2lvbl8obmFsVW5pdHNbMF0sIHRyYWNrKTtcblxuICAgICAgICAgIGlmIChnb3BGb3JGdXNpb24pIHtcbiAgICAgICAgICAgIC8vIGluIG9yZGVyIHRvIHByb3ZpZGUgbW9yZSBhY2N1cmF0ZSB0aW1pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNlZ21lbnQsIHNhdmVcbiAgICAgICAgICAgIC8vIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBwcmVwZW5kZWQgdG8gdGhlIG9yaWdpbmFsIHNlZ21lbnQgZHVlIHRvIEdPUCBmdXNpb25cbiAgICAgICAgICAgIHByZXBlbmRlZENvbnRlbnREdXJhdGlvbiA9IGdvcEZvckZ1c2lvbi5kdXJhdGlvbjtcbiAgICAgICAgICAgIGdvcHMudW5zaGlmdChnb3BGb3JGdXNpb24pOyAvLyBBZGp1c3QgR29wcycgbWV0YWRhdGEgdG8gYWNjb3VudCBmb3IgdGhlIGluY2x1c2lvbiBvZiB0aGVcbiAgICAgICAgICAgIC8vIG5ldyBnb3AgYXQgdGhlIGJlZ2lubmluZ1xuXG4gICAgICAgICAgICBnb3BzLmJ5dGVMZW5ndGggKz0gZ29wRm9yRnVzaW9uLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBnb3BzLm5hbENvdW50ICs9IGdvcEZvckZ1c2lvbi5uYWxDb3VudDtcbiAgICAgICAgICAgIGdvcHMucHRzID0gZ29wRm9yRnVzaW9uLnB0cztcbiAgICAgICAgICAgIGdvcHMuZHRzID0gZ29wRm9yRnVzaW9uLmR0cztcbiAgICAgICAgICAgIGdvcHMuZHVyYXRpb24gKz0gZ29wRm9yRnVzaW9uLmR1cmF0aW9uO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBkaWRuJ3QgZmluZCBhIGNhbmRpZGF0ZSBnb3AgZmFsbCBiYWNrIHRvIGtleWZyYW1lLXB1bGxpbmdcbiAgICAgICAgICAgIGdvcHMgPSBmcmFtZVV0aWxzLmV4dGVuZEZpcnN0S2V5RnJhbWUoZ29wcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIFRyaW0gZ29wcyB0byBhbGlnbiB3aXRoIGdvcHNUb0FsaWduV2l0aFxuXG5cbiAgICAgICAgaWYgKGdvcHNUb0FsaWduV2l0aC5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgYWxpZ25lZEdvcHM7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5hbGlnbkdvcHNBdEVuZCkge1xuICAgICAgICAgICAgYWxpZ25lZEdvcHMgPSB0aGlzLmFsaWduR29wc0F0RW5kXyhnb3BzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWxpZ25lZEdvcHMgPSB0aGlzLmFsaWduR29wc0F0U3RhcnRfKGdvcHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghYWxpZ25lZEdvcHMpIHtcbiAgICAgICAgICAgIC8vIHNhdmUgYWxsIHRoZSBuYWxzIGluIHRoZSBsYXN0IEdPUCBpbnRvIHRoZSBnb3AgY2FjaGVcbiAgICAgICAgICAgIHRoaXMuZ29wQ2FjaGVfLnVuc2hpZnQoe1xuICAgICAgICAgICAgICBnb3A6IGdvcHMucG9wKCksXG4gICAgICAgICAgICAgIHBwczogdHJhY2sucHBzLFxuICAgICAgICAgICAgICBzcHM6IHRyYWNrLnNwc1xuICAgICAgICAgICAgfSk7IC8vIEtlZXAgYSBtYXhpbXVtIG9mIDYgR09QcyBpbiB0aGUgY2FjaGVcblxuICAgICAgICAgICAgdGhpcy5nb3BDYWNoZV8ubGVuZ3RoID0gTWF0aC5taW4oNiwgdGhpcy5nb3BDYWNoZV8ubGVuZ3RoKTsgLy8gQ2xlYXIgbmFsVW5pdHNcblxuICAgICAgICAgICAgbmFsVW5pdHMgPSBbXTsgLy8gcmV0dXJuIGVhcmx5IG5vIGdvcHMgY2FuIGJlIGFsaWduZWQgd2l0aCBkZXNpcmVkIGdvcHNUb0FsaWduV2l0aFxuXG4gICAgICAgICAgICB0aGlzLnJlc2V0U3RyZWFtXygpO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdkb25lJywgJ1ZpZGVvU2VnbWVudFN0cmVhbScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gU29tZSBnb3BzIHdlcmUgdHJpbW1lZC4gY2xlYXIgZHRzIGluZm8gc28gbWluU2VnbWVudER0cyBhbmQgcHRzIGFyZSBjb3JyZWN0XG4gICAgICAgICAgLy8gd2hlbiByZWNhbGN1bGF0ZWQgYmVmb3JlIHNlbmRpbmcgb2ZmIHRvIENvYWxlc2NlU3RyZWFtXG5cblxuICAgICAgICAgIHRyYWNrRGVjb2RlSW5mby5jbGVhckR0c0luZm8odHJhY2spO1xuICAgICAgICAgIGdvcHMgPSBhbGlnbmVkR29wcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYWNrRGVjb2RlSW5mby5jb2xsZWN0RHRzSW5mbyh0cmFjaywgZ29wcyk7IC8vIEZpcnN0LCB3ZSBoYXZlIHRvIGJ1aWxkIHRoZSBpbmRleCBmcm9tIGJ5dGUgbG9jYXRpb25zIHRvXG4gICAgICAgIC8vIHNhbXBsZXMgKHRoYXQgaXMsIGZyYW1lcykgaW4gdGhlIHZpZGVvIGRhdGFcblxuICAgICAgICB0cmFjay5zYW1wbGVzID0gZnJhbWVVdGlscy5nZW5lcmF0ZVNhbXBsZVRhYmxlKGdvcHMpOyAvLyBDb25jYXRlbmF0ZSB0aGUgdmlkZW8gZGF0YSBhbmQgY29uc3RydWN0IHRoZSBtZGF0XG5cbiAgICAgICAgbWRhdCA9IG1wNEdlbmVyYXRvci5tZGF0KGZyYW1lVXRpbHMuY29uY2F0ZW5hdGVOYWxEYXRhKGdvcHMpKTtcbiAgICAgICAgdHJhY2suYmFzZU1lZGlhRGVjb2RlVGltZSA9IHRyYWNrRGVjb2RlSW5mby5jYWxjdWxhdGVUcmFja0Jhc2VNZWRpYURlY29kZVRpbWUodHJhY2ssIG9wdGlvbnMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyk7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncHJvY2Vzc2VkR29wc0luZm8nLCBnb3BzLm1hcChmdW5jdGlvbiAoZ29wKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHB0czogZ29wLnB0cyxcbiAgICAgICAgICAgIGR0czogZ29wLmR0cyxcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IGdvcC5ieXRlTGVuZ3RoXG4gICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgICAgICBmaXJzdEdvcCA9IGdvcHNbMF07XG4gICAgICAgIGxhc3RHb3AgPSBnb3BzW2dvcHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHRoaXMudHJpZ2dlcignc2VnbWVudFRpbWluZ0luZm8nLCBnZW5lcmF0ZVZpZGVvU2VnbWVudFRpbWluZ0luZm8odHJhY2suYmFzZU1lZGlhRGVjb2RlVGltZSwgZmlyc3RHb3AuZHRzLCBmaXJzdEdvcC5wdHMsIGxhc3RHb3AuZHRzICsgbGFzdEdvcC5kdXJhdGlvbiwgbGFzdEdvcC5wdHMgKyBsYXN0R29wLmR1cmF0aW9uLCBwcmVwZW5kZWRDb250ZW50RHVyYXRpb24pKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCd0aW1pbmdJbmZvJywge1xuICAgICAgICAgIHN0YXJ0OiBnb3BzWzBdLnB0cyxcbiAgICAgICAgICBlbmQ6IGdvcHNbZ29wcy5sZW5ndGggLSAxXS5wdHMgKyBnb3BzW2dvcHMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSk7IC8vIHNhdmUgYWxsIHRoZSBuYWxzIGluIHRoZSBsYXN0IEdPUCBpbnRvIHRoZSBnb3AgY2FjaGVcblxuICAgICAgICB0aGlzLmdvcENhY2hlXy51bnNoaWZ0KHtcbiAgICAgICAgICBnb3A6IGdvcHMucG9wKCksXG4gICAgICAgICAgcHBzOiB0cmFjay5wcHMsXG4gICAgICAgICAgc3BzOiB0cmFjay5zcHNcbiAgICAgICAgfSk7IC8vIEtlZXAgYSBtYXhpbXVtIG9mIDYgR09QcyBpbiB0aGUgY2FjaGVcblxuICAgICAgICB0aGlzLmdvcENhY2hlXy5sZW5ndGggPSBNYXRoLm1pbig2LCB0aGlzLmdvcENhY2hlXy5sZW5ndGgpOyAvLyBDbGVhciBuYWxVbml0c1xuXG4gICAgICAgIG5hbFVuaXRzID0gW107XG4gICAgICAgIHRoaXMudHJpZ2dlcignYmFzZU1lZGlhRGVjb2RlVGltZScsIHRyYWNrLmJhc2VNZWRpYURlY29kZVRpbWUpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3RpbWVsaW5lU3RhcnRJbmZvJywgdHJhY2sudGltZWxpbmVTdGFydEluZm8pO1xuICAgICAgICBtb29mID0gbXA0R2VuZXJhdG9yLm1vb2Yoc2VxdWVuY2VOdW1iZXIsIFt0cmFja10pOyAvLyBpdCB3b3VsZCBiZSBncmVhdCB0byBhbGxvY2F0ZSB0aGlzIGFycmF5IHVwIGZyb250IGluc3RlYWQgb2ZcbiAgICAgICAgLy8gdGhyb3dpbmcgYXdheSBodW5kcmVkcyBvZiBtZWRpYSBzZWdtZW50IGZyYWdtZW50c1xuXG4gICAgICAgIGJveGVzID0gbmV3IFVpbnQ4QXJyYXkobW9vZi5ieXRlTGVuZ3RoICsgbWRhdC5ieXRlTGVuZ3RoKTsgLy8gQnVtcCB0aGUgc2VxdWVuY2UgbnVtYmVyIGZvciBuZXh0IHRpbWVcblxuICAgICAgICBzZXF1ZW5jZU51bWJlcisrO1xuICAgICAgICBib3hlcy5zZXQobW9vZik7XG4gICAgICAgIGJveGVzLnNldChtZGF0LCBtb29mLmJ5dGVMZW5ndGgpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCB7XG4gICAgICAgICAgdHJhY2s6IHRyYWNrLFxuICAgICAgICAgIGJveGVzOiBib3hlc1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXNldFN0cmVhbV8oKTsgLy8gQ29udGludWUgd2l0aCB0aGUgZmx1c2ggcHJvY2VzcyBub3dcblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnLCAnVmlkZW9TZWdtZW50U3RyZWFtJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlc2V0U3RyZWFtXygpO1xuICAgICAgICBuYWxVbml0cyA9IFtdO1xuICAgICAgICB0aGlzLmdvcENhY2hlXy5sZW5ndGggPSAwO1xuICAgICAgICBnb3BzVG9BbGlnbldpdGgubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldCcpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldFN0cmVhbV8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyYWNrRGVjb2RlSW5mby5jbGVhckR0c0luZm8odHJhY2spOyAvLyByZXNldCBjb25maWcgYW5kIHBwcyBiZWNhdXNlIHRoZXkgbWF5IGRpZmZlciBhY3Jvc3Mgc2VnbWVudHNcbiAgICAgICAgLy8gZm9yIGluc3RhbmNlLCB3aGVuIHdlIGFyZSByZW5kaXRpb24gc3dpdGNoaW5nXG5cbiAgICAgICAgY29uZmlnID0gdW5kZWZpbmVkO1xuICAgICAgICBwcHMgPSB1bmRlZmluZWQ7XG4gICAgICB9OyAvLyBTZWFyY2ggZm9yIGEgY2FuZGlkYXRlIEdvcCBmb3IgZ29wLWZ1c2lvbiBmcm9tIHRoZSBnb3AgY2FjaGUgYW5kXG4gICAgICAvLyByZXR1cm4gaXQgb3IgcmV0dXJuIG51bGwgaWYgbm8gZ29vZCBjYW5kaWRhdGUgd2FzIGZvdW5kXG5cblxuICAgICAgdGhpcy5nZXRHb3BGb3JGdXNpb25fID0gZnVuY3Rpb24gKG5hbFVuaXQpIHtcbiAgICAgICAgdmFyIGhhbGZTZWNvbmQgPSA0NTAwMCxcbiAgICAgICAgICAgIC8vIEhhbGYtYS1zZWNvbmQgaW4gYSA5MGtoeiBjbG9ja1xuICAgICAgICBhbGxvd2FibGVPdmVybGFwID0gMTAwMDAsXG4gICAgICAgICAgICAvLyBBYm91dCAzIGZyYW1lcyBAIDMwZnBzXG4gICAgICAgIG5lYXJlc3REaXN0YW5jZSA9IEluZmluaXR5LFxuICAgICAgICAgICAgZHRzRGlzdGFuY2UsXG4gICAgICAgICAgICBuZWFyZXN0R29wT2JqLFxuICAgICAgICAgICAgY3VycmVudEdvcCxcbiAgICAgICAgICAgIGN1cnJlbnRHb3BPYmosXG4gICAgICAgICAgICBpOyAvLyBTZWFyY2ggZm9yIHRoZSBHT1AgbmVhcmVzdCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoaXMgbmFsIHVuaXRcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5nb3BDYWNoZV8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjdXJyZW50R29wT2JqID0gdGhpcy5nb3BDYWNoZV9baV07XG4gICAgICAgICAgY3VycmVudEdvcCA9IGN1cnJlbnRHb3BPYmouZ29wOyAvLyBSZWplY3QgR29wcyB3aXRoIGRpZmZlcmVudCBTUFMgb3IgUFBTXG5cbiAgICAgICAgICBpZiAoISh0cmFjay5wcHMgJiYgYXJyYXlFcXVhbHModHJhY2sucHBzWzBdLCBjdXJyZW50R29wT2JqLnBwc1swXSkpIHx8ICEodHJhY2suc3BzICYmIGFycmF5RXF1YWxzKHRyYWNrLnNwc1swXSwgY3VycmVudEdvcE9iai5zcHNbMF0pKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSAvLyBSZWplY3QgR29wcyB0aGF0IHdvdWxkIHJlcXVpcmUgYSBuZWdhdGl2ZSBiYXNlTWVkaWFEZWNvZGVUaW1lXG5cblxuICAgICAgICAgIGlmIChjdXJyZW50R29wLmR0cyA8IHRyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmR0cykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSAvLyBUaGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgZW5kIG9mIHRoZSBnb3AgYW5kIHRoZSBzdGFydCBvZiB0aGUgbmFsVW5pdFxuXG5cbiAgICAgICAgICBkdHNEaXN0YW5jZSA9IG5hbFVuaXQuZHRzIC0gY3VycmVudEdvcC5kdHMgLSBjdXJyZW50R29wLmR1cmF0aW9uOyAvLyBPbmx5IGNvbnNpZGVyIEdPUFMgdGhhdCBzdGFydCBiZWZvcmUgdGhlIG5hbCB1bml0IGFuZCBlbmQgd2l0aGluXG4gICAgICAgICAgLy8gYSBoYWxmLXNlY29uZCBvZiB0aGUgbmFsIHVuaXRcblxuICAgICAgICAgIGlmIChkdHNEaXN0YW5jZSA+PSAtYWxsb3dhYmxlT3ZlcmxhcCAmJiBkdHNEaXN0YW5jZSA8PSBoYWxmU2Vjb25kKSB7XG4gICAgICAgICAgICAvLyBBbHdheXMgdXNlIHRoZSBjbG9zZXN0IEdPUCB3ZSBmb3VuZCBpZiB0aGVyZSBpcyBtb3JlIHRoYW5cbiAgICAgICAgICAgIC8vIG9uZSBjYW5kaWRhdGVcbiAgICAgICAgICAgIGlmICghbmVhcmVzdEdvcE9iaiB8fCBuZWFyZXN0RGlzdGFuY2UgPiBkdHNEaXN0YW5jZSkge1xuICAgICAgICAgICAgICBuZWFyZXN0R29wT2JqID0gY3VycmVudEdvcE9iajtcbiAgICAgICAgICAgICAgbmVhcmVzdERpc3RhbmNlID0gZHRzRGlzdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5lYXJlc3RHb3BPYmopIHtcbiAgICAgICAgICByZXR1cm4gbmVhcmVzdEdvcE9iai5nb3A7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07IC8vIHRyaW0gZ29wIGxpc3QgdG8gdGhlIGZpcnN0IGdvcCBmb3VuZCB0aGF0IGhhcyBhIG1hdGNoaW5nIHB0cyB3aXRoIGEgZ29wIGluIHRoZSBsaXN0XG4gICAgICAvLyBvZiBnb3BzVG9BbGlnbldpdGggc3RhcnRpbmcgZnJvbSB0aGUgU1RBUlQgb2YgdGhlIGxpc3RcblxuXG4gICAgICB0aGlzLmFsaWduR29wc0F0U3RhcnRfID0gZnVuY3Rpb24gKGdvcHMpIHtcbiAgICAgICAgdmFyIGFsaWduSW5kZXgsIGdvcEluZGV4LCBhbGlnbiwgZ29wLCBieXRlTGVuZ3RoLCBuYWxDb3VudCwgZHVyYXRpb24sIGFsaWduZWRHb3BzO1xuICAgICAgICBieXRlTGVuZ3RoID0gZ29wcy5ieXRlTGVuZ3RoO1xuICAgICAgICBuYWxDb3VudCA9IGdvcHMubmFsQ291bnQ7XG4gICAgICAgIGR1cmF0aW9uID0gZ29wcy5kdXJhdGlvbjtcbiAgICAgICAgYWxpZ25JbmRleCA9IGdvcEluZGV4ID0gMDtcblxuICAgICAgICB3aGlsZSAoYWxpZ25JbmRleCA8IGdvcHNUb0FsaWduV2l0aC5sZW5ndGggJiYgZ29wSW5kZXggPCBnb3BzLmxlbmd0aCkge1xuICAgICAgICAgIGFsaWduID0gZ29wc1RvQWxpZ25XaXRoW2FsaWduSW5kZXhdO1xuICAgICAgICAgIGdvcCA9IGdvcHNbZ29wSW5kZXhdO1xuXG4gICAgICAgICAgaWYgKGFsaWduLnB0cyA9PT0gZ29wLnB0cykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGdvcC5wdHMgPiBhbGlnbi5wdHMpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgY3VycmVudCBnb3Agc3RhcnRzIGFmdGVyIHRoZSBjdXJyZW50IGdvcCB3ZSB3YW50IHRvIGFsaWduIG9uLCBzbyBpbmNyZW1lbnRcbiAgICAgICAgICAgIC8vIGFsaWduIGluZGV4XG4gICAgICAgICAgICBhbGlnbkluZGV4Kys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IC8vIGN1cnJlbnQgZ29wIHN0YXJ0cyBiZWZvcmUgdGhlIGN1cnJlbnQgZ29wIHdlIHdhbnQgdG8gYWxpZ24gb24uIHNvIGluY3JlbWVudCBnb3BcbiAgICAgICAgICAvLyBpbmRleFxuXG5cbiAgICAgICAgICBnb3BJbmRleCsrO1xuICAgICAgICAgIGJ5dGVMZW5ndGggLT0gZ29wLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgbmFsQ291bnQgLT0gZ29wLm5hbENvdW50O1xuICAgICAgICAgIGR1cmF0aW9uIC09IGdvcC5kdXJhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnb3BJbmRleCA9PT0gMCkge1xuICAgICAgICAgIC8vIG5vIGdvcHMgdG8gdHJpbVxuICAgICAgICAgIHJldHVybiBnb3BzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdvcEluZGV4ID09PSBnb3BzLmxlbmd0aCkge1xuICAgICAgICAgIC8vIGFsbCBnb3BzIHRyaW1tZWQsIHNraXAgYXBwZW5kaW5nIGFsbCBnb3BzXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBhbGlnbmVkR29wcyA9IGdvcHMuc2xpY2UoZ29wSW5kZXgpO1xuICAgICAgICBhbGlnbmVkR29wcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgICAgICAgYWxpZ25lZEdvcHMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgYWxpZ25lZEdvcHMubmFsQ291bnQgPSBuYWxDb3VudDtcbiAgICAgICAgYWxpZ25lZEdvcHMucHRzID0gYWxpZ25lZEdvcHNbMF0ucHRzO1xuICAgICAgICBhbGlnbmVkR29wcy5kdHMgPSBhbGlnbmVkR29wc1swXS5kdHM7XG4gICAgICAgIHJldHVybiBhbGlnbmVkR29wcztcbiAgICAgIH07IC8vIHRyaW0gZ29wIGxpc3QgdG8gdGhlIGZpcnN0IGdvcCBmb3VuZCB0aGF0IGhhcyBhIG1hdGNoaW5nIHB0cyB3aXRoIGEgZ29wIGluIHRoZSBsaXN0XG4gICAgICAvLyBvZiBnb3BzVG9BbGlnbldpdGggc3RhcnRpbmcgZnJvbSB0aGUgRU5EIG9mIHRoZSBsaXN0XG5cblxuICAgICAgdGhpcy5hbGlnbkdvcHNBdEVuZF8gPSBmdW5jdGlvbiAoZ29wcykge1xuICAgICAgICB2YXIgYWxpZ25JbmRleCwgZ29wSW5kZXgsIGFsaWduLCBnb3AsIGFsaWduRW5kSW5kZXgsIG1hdGNoRm91bmQ7XG4gICAgICAgIGFsaWduSW5kZXggPSBnb3BzVG9BbGlnbldpdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgZ29wSW5kZXggPSBnb3BzLmxlbmd0aCAtIDE7XG4gICAgICAgIGFsaWduRW5kSW5kZXggPSBudWxsO1xuICAgICAgICBtYXRjaEZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgd2hpbGUgKGFsaWduSW5kZXggPj0gMCAmJiBnb3BJbmRleCA+PSAwKSB7XG4gICAgICAgICAgYWxpZ24gPSBnb3BzVG9BbGlnbldpdGhbYWxpZ25JbmRleF07XG4gICAgICAgICAgZ29wID0gZ29wc1tnb3BJbmRleF07XG5cbiAgICAgICAgICBpZiAoYWxpZ24ucHRzID09PSBnb3AucHRzKSB7XG4gICAgICAgICAgICBtYXRjaEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbGlnbi5wdHMgPiBnb3AucHRzKSB7XG4gICAgICAgICAgICBhbGlnbkluZGV4LS07XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYWxpZ25JbmRleCA9PT0gZ29wc1RvQWxpZ25XaXRoLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIC8vIGdvcC5wdHMgaXMgZ3JlYXRlciB0aGFuIHRoZSBsYXN0IGFsaWdubWVudCBjYW5kaWRhdGUuIElmIG5vIG1hdGNoIGlzIGZvdW5kXG4gICAgICAgICAgICAvLyBieSB0aGUgZW5kIG9mIHRoaXMgbG9vcCwgd2Ugc3RpbGwgd2FudCB0byBhcHBlbmQgZ29wcyB0aGF0IGNvbWUgYWZ0ZXIgdGhpc1xuICAgICAgICAgICAgLy8gcG9pbnRcbiAgICAgICAgICAgIGFsaWduRW5kSW5kZXggPSBnb3BJbmRleDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnb3BJbmRleC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFtYXRjaEZvdW5kICYmIGFsaWduRW5kSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmltSW5kZXg7XG5cbiAgICAgICAgaWYgKG1hdGNoRm91bmQpIHtcbiAgICAgICAgICB0cmltSW5kZXggPSBnb3BJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmltSW5kZXggPSBhbGlnbkVuZEluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyaW1JbmRleCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBnb3BzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFsaWduZWRHb3BzID0gZ29wcy5zbGljZSh0cmltSW5kZXgpO1xuICAgICAgICB2YXIgbWV0YWRhdGEgPSBhbGlnbmVkR29wcy5yZWR1Y2UoZnVuY3Rpb24gKHRvdGFsLCBnb3ApIHtcbiAgICAgICAgICB0b3RhbC5ieXRlTGVuZ3RoICs9IGdvcC5ieXRlTGVuZ3RoO1xuICAgICAgICAgIHRvdGFsLmR1cmF0aW9uICs9IGdvcC5kdXJhdGlvbjtcbiAgICAgICAgICB0b3RhbC5uYWxDb3VudCArPSBnb3AubmFsQ291bnQ7XG4gICAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgYnl0ZUxlbmd0aDogMCxcbiAgICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgICBuYWxDb3VudDogMFxuICAgICAgICB9KTtcbiAgICAgICAgYWxpZ25lZEdvcHMuYnl0ZUxlbmd0aCA9IG1ldGFkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgIGFsaWduZWRHb3BzLmR1cmF0aW9uID0gbWV0YWRhdGEuZHVyYXRpb247XG4gICAgICAgIGFsaWduZWRHb3BzLm5hbENvdW50ID0gbWV0YWRhdGEubmFsQ291bnQ7XG4gICAgICAgIGFsaWduZWRHb3BzLnB0cyA9IGFsaWduZWRHb3BzWzBdLnB0cztcbiAgICAgICAgYWxpZ25lZEdvcHMuZHRzID0gYWxpZ25lZEdvcHNbMF0uZHRzO1xuICAgICAgICByZXR1cm4gYWxpZ25lZEdvcHM7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFsaWduR29wc1dpdGggPSBmdW5jdGlvbiAobmV3R29wc1RvQWxpZ25XaXRoKSB7XG4gICAgICAgIGdvcHNUb0FsaWduV2l0aCA9IG5ld0dvcHNUb0FsaWduV2l0aDtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9WaWRlb1NlZ21lbnRTdHJlYW0ucHJvdG90eXBlID0gbmV3IHN0cmVhbSgpO1xuICAgIC8qKlxuICAgICAqIEEgU3RyZWFtIHRoYXQgY2FuIGNvbWJpbmUgbXVsdGlwbGUgc3RyZWFtcyAoaWUuIGF1ZGlvICYgdmlkZW8pXG4gICAgICogaW50byBhIHNpbmdsZSBvdXRwdXQgc2VnbWVudCBmb3IgTVNFLiBBbHNvIHN1cHBvcnRzIGF1ZGlvLW9ubHlcbiAgICAgKiBhbmQgdmlkZW8tb25seSBzdHJlYW1zLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtvYmplY3R9IHRyYW5zbXV4ZXIgb3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzIHtib29sZWFufSBJZiB0cnVlLCBrZWVwIHRoZSB0aW1lc3RhbXBzXG4gICAgICogICAgICAgIGluIHRoZSBzb3VyY2U7IGZhbHNlIHRvIGFkanVzdCB0aGUgZmlyc3Qgc2VnbWVudCB0byBzdGFydCBhdCBtZWRpYSB0aW1lbGluZSBzdGFydC5cbiAgICAgKi9cblxuICAgIF9Db2FsZXNjZVN0cmVhbSA9IGZ1bmN0aW9uIENvYWxlc2NlU3RyZWFtKG9wdGlvbnMsIG1ldGFkYXRhU3RyZWFtKSB7XG4gICAgICAvLyBOdW1iZXIgb2YgVHJhY2tzIHBlciBvdXRwdXQgc2VnbWVudFxuICAgICAgLy8gSWYgZ3JlYXRlciB0aGFuIDEsIHdlIGNvbWJpbmUgbXVsdGlwbGVcbiAgICAgIC8vIHRyYWNrcyBpbnRvIGEgc2luZ2xlIHNlZ21lbnRcbiAgICAgIHRoaXMubnVtYmVyT2ZUcmFja3MgPSAwO1xuICAgICAgdGhpcy5tZXRhZGF0YVN0cmVhbSA9IG1ldGFkYXRhU3RyZWFtO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZW11eCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5yZW11eFRyYWNrcyA9ICEhb3B0aW9ucy5yZW11eDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtdXhUcmFja3MgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRoaXMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyA9IG9wdGlvbnMua2VlcE9yaWdpbmFsVGltZXN0YW1wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBlbmRpbmdUcmFja3MgPSBbXTtcbiAgICAgIHRoaXMudmlkZW9UcmFjayA9IG51bGw7XG4gICAgICB0aGlzLnBlbmRpbmdCb3hlcyA9IFtdO1xuICAgICAgdGhpcy5wZW5kaW5nQ2FwdGlvbnMgPSBbXTtcbiAgICAgIHRoaXMucGVuZGluZ01ldGFkYXRhID0gW107XG4gICAgICB0aGlzLnBlbmRpbmdCeXRlcyA9IDA7XG4gICAgICB0aGlzLmVtaXR0ZWRUcmFja3MgPSAwO1xuXG4gICAgICBfQ29hbGVzY2VTdHJlYW0ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTsgLy8gVGFrZSBvdXRwdXQgZnJvbSBtdWx0aXBsZVxuXG5cbiAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICAgICAgLy8gYnVmZmVyIGluY29taW5nIGNhcHRpb25zIHVudGlsIHRoZSBhc3NvY2lhdGVkIHZpZGVvIHNlZ21lbnRcbiAgICAgICAgLy8gZmluaXNoZXNcbiAgICAgICAgaWYgKG91dHB1dC50ZXh0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ0NhcHRpb25zLnB1c2gob3V0cHV0KTtcbiAgICAgICAgfSAvLyBidWZmZXIgaW5jb21pbmcgaWQzIHRhZ3MgdW50aWwgdGhlIGZpbmFsIGZsdXNoXG5cblxuICAgICAgICBpZiAob3V0cHV0LmZyYW1lcykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdNZXRhZGF0YS5wdXNoKG91dHB1dCk7XG4gICAgICAgIH0gLy8gQWRkIHRoaXMgdHJhY2sgdG8gdGhlIGxpc3Qgb2YgcGVuZGluZyB0cmFja3MgYW5kIHN0b3JlXG4gICAgICAgIC8vIGltcG9ydGFudCBpbmZvcm1hdGlvbiByZXF1aXJlZCBmb3IgdGhlIGNvbnN0cnVjdGlvbiBvZlxuICAgICAgICAvLyB0aGUgZmluYWwgc2VnbWVudFxuXG5cbiAgICAgICAgdGhpcy5wZW5kaW5nVHJhY2tzLnB1c2gob3V0cHV0LnRyYWNrKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nQnl0ZXMgKz0gb3V0cHV0LmJveGVzLmJ5dGVMZW5ndGg7IC8vIFRPRE86IGlzIHRoZXJlIGFuIGlzc3VlIGZvciB0aGlzIGFnYWluc3QgY2hyb21lP1xuICAgICAgICAvLyBXZSB1bnNoaWZ0IGF1ZGlvIGFuZCBwdXNoIHZpZGVvIGJlY2F1c2VcbiAgICAgICAgLy8gYXMgb2YgQ2hyb21lIDc1IHdoZW4gc3dpdGNoaW5nIGZyb21cbiAgICAgICAgLy8gb25lIGluaXQgc2VnbWVudCB0byBhbm90aGVyIGlmIHRoZSB2aWRlb1xuICAgICAgICAvLyBtZGF0IGRvZXMgbm90IGFwcGVhciBhZnRlciB0aGUgYXVkaW8gbWRhdFxuICAgICAgICAvLyBvbmx5IGF1ZGlvIHdpbGwgcGxheSBmb3IgdGhlIGR1cmF0aW9uIG9mIG91ciB0cmFuc211eC5cblxuICAgICAgICBpZiAob3V0cHV0LnRyYWNrLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICB0aGlzLnZpZGVvVHJhY2sgPSBvdXRwdXQudHJhY2s7XG4gICAgICAgICAgdGhpcy5wZW5kaW5nQm94ZXMucHVzaChvdXRwdXQuYm94ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG91dHB1dC50cmFjay50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgdGhpcy5hdWRpb1RyYWNrID0gb3V0cHV0LnRyYWNrO1xuICAgICAgICAgIHRoaXMucGVuZGluZ0JveGVzLnVuc2hpZnQob3V0cHV0LmJveGVzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX0NvYWxlc2NlU3RyZWFtLnByb3RvdHlwZSA9IG5ldyBzdHJlYW0oKTtcblxuICAgIF9Db2FsZXNjZVN0cmVhbS5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoZmx1c2hTb3VyY2UpIHtcbiAgICAgIHZhciBvZmZzZXQgPSAwLFxuICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICBjYXB0aW9uczogW10sXG4gICAgICAgIGNhcHRpb25TdHJlYW1zOiB7fSxcbiAgICAgICAgbWV0YWRhdGE6IFtdLFxuICAgICAgICBpbmZvOiB7fVxuICAgICAgfSxcbiAgICAgICAgICBjYXB0aW9uLFxuICAgICAgICAgIGlkMyxcbiAgICAgICAgICBpbml0U2VnbWVudCxcbiAgICAgICAgICB0aW1lbGluZVN0YXJ0UHRzID0gMCxcbiAgICAgICAgICBpO1xuXG4gICAgICBpZiAodGhpcy5wZW5kaW5nVHJhY2tzLmxlbmd0aCA8IHRoaXMubnVtYmVyT2ZUcmFja3MpIHtcbiAgICAgICAgaWYgKGZsdXNoU291cmNlICE9PSAnVmlkZW9TZWdtZW50U3RyZWFtJyAmJiBmbHVzaFNvdXJjZSAhPT0gJ0F1ZGlvU2VnbWVudFN0cmVhbScpIHtcbiAgICAgICAgICAvLyBSZXR1cm4gYmVjYXVzZSB3ZSBoYXZlbid0IHJlY2VpdmVkIGEgZmx1c2ggZnJvbSBhIGRhdGEtZ2VuZXJhdGluZ1xuICAgICAgICAgIC8vIHBvcnRpb24gb2YgdGhlIHNlZ21lbnQgKG1lYW5pbmcgdGhhdCB3ZSBoYXZlIG9ubHkgcmVjaWV2ZWQgbWV0YS1kYXRhXG4gICAgICAgICAgLy8gb3IgY2FwdGlvbnMuKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlbXV4VHJhY2tzKSB7XG4gICAgICAgICAgLy8gUmV0dXJuIHVudGlsIHdlIGhhdmUgZW5vdWdoIHRyYWNrcyBmcm9tIHRoZSBwaXBlbGluZSB0byByZW11eCAoaWYgd2VcbiAgICAgICAgICAvLyBhcmUgcmVtdXhpbmcgYXVkaW8gYW5kIHZpZGVvIGludG8gYSBzaW5nbGUgTVA0KVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBlbmRpbmdUcmFja3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugd2hlcmUgd2UgcmVjZWl2ZSBhIGZsdXNoIHdpdGhvdXQgYW55IGRhdGEgaGF2aW5nIGJlZW5cbiAgICAgICAgICAvLyByZWNlaXZlZCB3ZSBjb25zaWRlciBpdCBhbiBlbWl0dGVkIHRyYWNrIGZvciB0aGUgcHVycG9zZXMgb2YgY29hbGVzY2luZ1xuICAgICAgICAgIC8vIGBkb25lYCBldmVudHMuXG4gICAgICAgICAgLy8gV2UgZG8gdGhpcyBmb3IgdGhlIGNhc2Ugd2hlcmUgdGhlcmUgaXMgYW4gYXVkaW8gYW5kIHZpZGVvIHRyYWNrIGluIHRoZVxuICAgICAgICAgIC8vIHNlZ21lbnQgYnV0IG5vIGF1ZGlvIGRhdGEuIChzZWVuIGluIHNldmVyYWwgcGxheWxpc3RzIHdpdGggYWx0ZXJuYXRlXG4gICAgICAgICAgLy8gYXVkaW8gdHJhY2tzIGFuZCBubyBhdWRpbyBwcmVzZW50IGluIHRoZSBtYWluIFRTIHNlZ21lbnRzLilcbiAgICAgICAgICB0aGlzLmVtaXR0ZWRUcmFja3MrKztcblxuICAgICAgICAgIGlmICh0aGlzLmVtaXR0ZWRUcmFja3MgPj0gdGhpcy5udW1iZXJPZlRyYWNrcykge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdkb25lJyk7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZWRUcmFja3MgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy52aWRlb1RyYWNrKSB7XG4gICAgICAgIHRpbWVsaW5lU3RhcnRQdHMgPSB0aGlzLnZpZGVvVHJhY2sudGltZWxpbmVTdGFydEluZm8ucHRzO1xuICAgICAgICB2aWRlb1Byb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgIGV2ZW50LmluZm9bcHJvcF0gPSB0aGlzLnZpZGVvVHJhY2tbcHJvcF07XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmF1ZGlvVHJhY2spIHtcbiAgICAgICAgdGltZWxpbmVTdGFydFB0cyA9IHRoaXMuYXVkaW9UcmFjay50aW1lbGluZVN0YXJ0SW5mby5wdHM7XG4gICAgICAgIGF1ZGlvUHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgZXZlbnQuaW5mb1twcm9wXSA9IHRoaXMuYXVkaW9UcmFja1twcm9wXTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnZpZGVvVHJhY2sgfHwgdGhpcy5hdWRpb1RyYWNrKSB7XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdUcmFja3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgZXZlbnQudHlwZSA9IHRoaXMucGVuZGluZ1RyYWNrc1swXS50eXBlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50LnR5cGUgPSAnY29tYmluZWQnO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbWl0dGVkVHJhY2tzICs9IHRoaXMucGVuZGluZ1RyYWNrcy5sZW5ndGg7XG4gICAgICAgIGluaXRTZWdtZW50ID0gbXA0R2VuZXJhdG9yLmluaXRTZWdtZW50KHRoaXMucGVuZGluZ1RyYWNrcyk7IC8vIENyZWF0ZSBhIG5ldyB0eXBlZCBhcnJheSB0byBob2xkIHRoZSBpbml0IHNlZ21lbnRcblxuICAgICAgICBldmVudC5pbml0U2VnbWVudCA9IG5ldyBVaW50OEFycmF5KGluaXRTZWdtZW50LmJ5dGVMZW5ndGgpOyAvLyBDcmVhdGUgYW4gaW5pdCBzZWdtZW50IGNvbnRhaW5pbmcgYSBtb292XG4gICAgICAgIC8vIGFuZCB0cmFjayBkZWZpbml0aW9uc1xuXG4gICAgICAgIGV2ZW50LmluaXRTZWdtZW50LnNldChpbml0U2VnbWVudCk7IC8vIENyZWF0ZSBhIG5ldyB0eXBlZCBhcnJheSB0byBob2xkIHRoZSBtb29mK21kYXRzXG5cbiAgICAgICAgZXZlbnQuZGF0YSA9IG5ldyBVaW50OEFycmF5KHRoaXMucGVuZGluZ0J5dGVzKTsgLy8gQXBwZW5kIGVhY2ggbW9vZittZGF0IChvbmUgcGVyIHRyYWNrKSB0b2dldGhlclxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnBlbmRpbmdCb3hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGV2ZW50LmRhdGEuc2V0KHRoaXMucGVuZGluZ0JveGVzW2ldLCBvZmZzZXQpO1xuICAgICAgICAgIG9mZnNldCArPSB0aGlzLnBlbmRpbmdCb3hlc1tpXS5ieXRlTGVuZ3RoO1xuICAgICAgICB9IC8vIFRyYW5zbGF0ZSBjYXB0aW9uIFBUUyB0aW1lcyBpbnRvIHNlY29uZCBvZmZzZXRzIHRvIG1hdGNoIHRoZVxuICAgICAgICAvLyB2aWRlbyB0aW1lbGluZSBmb3IgdGhlIHNlZ21lbnQsIGFuZCBhZGQgdHJhY2sgaW5mb1xuXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMucGVuZGluZ0NhcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY2FwdGlvbiA9IHRoaXMucGVuZGluZ0NhcHRpb25zW2ldO1xuICAgICAgICAgIGNhcHRpb24uc3RhcnRUaW1lID0gY2xvY2subWV0YWRhdGFUc1RvU2Vjb25kcyhjYXB0aW9uLnN0YXJ0UHRzLCB0aW1lbGluZVN0YXJ0UHRzLCB0aGlzLmtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpO1xuICAgICAgICAgIGNhcHRpb24uZW5kVGltZSA9IGNsb2NrLm1ldGFkYXRhVHNUb1NlY29uZHMoY2FwdGlvbi5lbmRQdHMsIHRpbWVsaW5lU3RhcnRQdHMsIHRoaXMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyk7XG4gICAgICAgICAgZXZlbnQuY2FwdGlvblN0cmVhbXNbY2FwdGlvbi5zdHJlYW1dID0gdHJ1ZTtcbiAgICAgICAgICBldmVudC5jYXB0aW9ucy5wdXNoKGNhcHRpb24pO1xuICAgICAgICB9IC8vIFRyYW5zbGF0ZSBJRDMgZnJhbWUgUFRTIHRpbWVzIGludG8gc2Vjb25kIG9mZnNldHMgdG8gbWF0Y2ggdGhlXG4gICAgICAgIC8vIHZpZGVvIHRpbWVsaW5lIGZvciB0aGUgc2VnbWVudFxuXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMucGVuZGluZ01ldGFkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWQzID0gdGhpcy5wZW5kaW5nTWV0YWRhdGFbaV07XG4gICAgICAgICAgaWQzLmN1ZVRpbWUgPSBjbG9jay5tZXRhZGF0YVRzVG9TZWNvbmRzKGlkMy5wdHMsIHRpbWVsaW5lU3RhcnRQdHMsIHRoaXMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyk7XG4gICAgICAgICAgZXZlbnQubWV0YWRhdGEucHVzaChpZDMpO1xuICAgICAgICB9IC8vIFdlIGFkZCB0aGlzIHRvIGV2ZXJ5IHNpbmdsZSBlbWl0dGVkIHNlZ21lbnQgZXZlbiB0aG91Z2ggd2Ugb25seSBuZWVkXG4gICAgICAgIC8vIGl0IGZvciB0aGUgZmlyc3RcblxuXG4gICAgICAgIGV2ZW50Lm1ldGFkYXRhLmRpc3BhdGNoVHlwZSA9IHRoaXMubWV0YWRhdGFTdHJlYW0uZGlzcGF0Y2hUeXBlOyAvLyBSZXNldCBzdHJlYW0gc3RhdGVcblxuICAgICAgICB0aGlzLnBlbmRpbmdUcmFja3MubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy52aWRlb1RyYWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5wZW5kaW5nQm94ZXMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5wZW5kaW5nQ2FwdGlvbnMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5wZW5kaW5nQnl0ZXMgPSAwO1xuICAgICAgICB0aGlzLnBlbmRpbmdNZXRhZGF0YS5sZW5ndGggPSAwOyAvLyBFbWl0IHRoZSBidWlsdCBzZWdtZW50XG4gICAgICAgIC8vIFdlIGluY2x1ZGUgY2FwdGlvbnMgYW5kIElEMyB0YWdzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSxcbiAgICAgICAgLy8gaWRlYWxseSB3ZSBzaG91bGQgc2VuZCBvbmx5IHZpZGVvIGFuZCBhdWRpbyBpbiB0aGUgZGF0YSBldmVudFxuXG4gICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIGV2ZW50KTsgLy8gRW1pdCBlYWNoIGNhcHRpb24gdG8gdGhlIG91dHNpZGUgd29ybGRcbiAgICAgICAgLy8gSWRlYWxseSwgdGhpcyB3b3VsZCBoYXBwZW4gaW1tZWRpYXRlbHkgb24gcGFyc2luZyBjYXB0aW9ucyxcbiAgICAgICAgLy8gYnV0IHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgdmlkZW8gZGF0YSBpcyBzZW50IGJhY2sgZmlyc3RcbiAgICAgICAgLy8gc28gdGhhdCBjYXB0aW9uIHRpbWluZyBjYW4gYmUgYWRqdXN0ZWQgdG8gbWF0Y2ggdmlkZW8gdGltaW5nXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50LmNhcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY2FwdGlvbiA9IGV2ZW50LmNhcHRpb25zW2ldO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignY2FwdGlvbicsIGNhcHRpb24pO1xuICAgICAgICB9IC8vIEVtaXQgZWFjaCBpZDMgdGFnIHRvIHRoZSBvdXRzaWRlIHdvcmxkXG4gICAgICAgIC8vIElkZWFsbHksIHRoaXMgd291bGQgaGFwcGVuIGltbWVkaWF0ZWx5IG9uIHBhcnNpbmcgdGhlIHRhZyxcbiAgICAgICAgLy8gYnV0IHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgdmlkZW8gZGF0YSBpcyBzZW50IGJhY2sgZmlyc3RcbiAgICAgICAgLy8gc28gdGhhdCBJRDMgZnJhbWUgdGltaW5nIGNhbiBiZSBhZGp1c3RlZCB0byBtYXRjaCB2aWRlbyB0aW1pbmdcblxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudC5tZXRhZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlkMyA9IGV2ZW50Lm1ldGFkYXRhW2ldO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignaWQzRnJhbWUnLCBpZDMpO1xuICAgICAgICB9XG4gICAgICB9IC8vIE9ubHkgZW1pdCBgZG9uZWAgaWYgYWxsIHRyYWNrcyBoYXZlIGJlZW4gZmx1c2hlZCBhbmQgZW1pdHRlZFxuXG5cbiAgICAgIGlmICh0aGlzLmVtaXR0ZWRUcmFja3MgPj0gdGhpcy5udW1iZXJPZlRyYWNrcykge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnKTtcbiAgICAgICAgdGhpcy5lbWl0dGVkVHJhY2tzID0gMDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX0NvYWxlc2NlU3RyZWFtLnByb3RvdHlwZS5zZXRSZW11eCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHRoaXMucmVtdXhUcmFja3MgPSB2YWw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBIFN0cmVhbSB0aGF0IGV4cGVjdHMgTVAyVCBiaW5hcnkgZGF0YSBhcyBpbnB1dCBhbmQgcHJvZHVjZXNcbiAgICAgKiBjb3JyZXNwb25kaW5nIG1lZGlhIHNlZ21lbnRzLCBzdWl0YWJsZSBmb3IgdXNlIHdpdGggTWVkaWEgU291cmNlXG4gICAgICogRXh0ZW5zaW9uIChNU0UpIGltcGxlbWVudGF0aW9ucyB0aGF0IHN1cHBvcnQgdGhlIElTTyBCTUZGIGJ5dGVcbiAgICAgKiBzdHJlYW0gZm9ybWF0LCBsaWtlIENocm9tZS5cbiAgICAgKi9cblxuXG4gICAgX1RyYW5zbXV4ZXIgPSBmdW5jdGlvbiBUcmFuc211eGVyKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICBoYXNGbHVzaGVkID0gdHJ1ZSxcbiAgICAgICAgICB2aWRlb1RyYWNrLFxuICAgICAgICAgIGF1ZGlvVHJhY2s7XG5cbiAgICAgIF9UcmFuc211eGVyLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyk7XG5cbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgdGhpcy5iYXNlTWVkaWFEZWNvZGVUaW1lID0gb3B0aW9ucy5iYXNlTWVkaWFEZWNvZGVUaW1lIHx8IDA7XG4gICAgICB0aGlzLnRyYW5zbXV4UGlwZWxpbmVfID0ge307XG5cbiAgICAgIHRoaXMuc2V0dXBBYWNQaXBlbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBpcGVsaW5lID0ge307XG4gICAgICAgIHRoaXMudHJhbnNtdXhQaXBlbGluZV8gPSBwaXBlbGluZTtcbiAgICAgICAgcGlwZWxpbmUudHlwZSA9ICdhYWMnO1xuICAgICAgICBwaXBlbGluZS5tZXRhZGF0YVN0cmVhbSA9IG5ldyBtMnRzXzEuTWV0YWRhdGFTdHJlYW0oKTsgLy8gc2V0IHVwIHRoZSBwYXJzaW5nIHBpcGVsaW5lXG5cbiAgICAgICAgcGlwZWxpbmUuYWFjU3RyZWFtID0gbmV3IGFhYygpO1xuICAgICAgICBwaXBlbGluZS5hdWRpb1RpbWVzdGFtcFJvbGxvdmVyU3RyZWFtID0gbmV3IG0ydHNfMS5UaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSgnYXVkaW8nKTtcbiAgICAgICAgcGlwZWxpbmUudGltZWRNZXRhZGF0YVRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtID0gbmV3IG0ydHNfMS5UaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSgndGltZWQtbWV0YWRhdGEnKTtcbiAgICAgICAgcGlwZWxpbmUuYWR0c1N0cmVhbSA9IG5ldyBhZHRzKCk7XG4gICAgICAgIHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtID0gbmV3IF9Db2FsZXNjZVN0cmVhbShvcHRpb25zLCBwaXBlbGluZS5tZXRhZGF0YVN0cmVhbSk7XG4gICAgICAgIHBpcGVsaW5lLmhlYWRPZlBpcGVsaW5lID0gcGlwZWxpbmUuYWFjU3RyZWFtO1xuICAgICAgICBwaXBlbGluZS5hYWNTdHJlYW0ucGlwZShwaXBlbGluZS5hdWRpb1RpbWVzdGFtcFJvbGxvdmVyU3RyZWFtKS5waXBlKHBpcGVsaW5lLmFkdHNTdHJlYW0pO1xuICAgICAgICBwaXBlbGluZS5hYWNTdHJlYW0ucGlwZShwaXBlbGluZS50aW1lZE1ldGFkYXRhVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0pLnBpcGUocGlwZWxpbmUubWV0YWRhdGFTdHJlYW0pLnBpcGUocGlwZWxpbmUuY29hbGVzY2VTdHJlYW0pO1xuICAgICAgICBwaXBlbGluZS5tZXRhZGF0YVN0cmVhbS5vbigndGltZXN0YW1wJywgZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgcGlwZWxpbmUuYWFjU3RyZWFtLnNldFRpbWVzdGFtcChmcmFtZS50aW1lU3RhbXApO1xuICAgICAgICB9KTtcbiAgICAgICAgcGlwZWxpbmUuYWFjU3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICBpZiAoZGF0YS50eXBlICE9PSAndGltZWQtbWV0YWRhdGEnICYmIGRhdGEudHlwZSAhPT0gJ2F1ZGlvJyB8fCBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdWRpb1RyYWNrID0gYXVkaW9UcmFjayB8fCB7XG4gICAgICAgICAgICB0aW1lbGluZVN0YXJ0SW5mbzoge1xuICAgICAgICAgICAgICBiYXNlTWVkaWFEZWNvZGVUaW1lOiBzZWxmLmJhc2VNZWRpYURlY29kZVRpbWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2RlYzogJ2FkdHMnLFxuICAgICAgICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgICAgICAgIH07IC8vIGhvb2sgdXAgdGhlIGF1ZGlvIHNlZ21lbnQgc3RyZWFtIHRvIHRoZSBmaXJzdCB0cmFjayB3aXRoIGFhYyBkYXRhXG5cbiAgICAgICAgICBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbS5udW1iZXJPZlRyYWNrcysrO1xuICAgICAgICAgIHBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbSA9IG5ldyBfQXVkaW9TZWdtZW50U3RyZWFtKGF1ZGlvVHJhY2ssIG9wdGlvbnMpO1xuICAgICAgICAgIHBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbS5vbigndGltaW5nSW5mbycsIHNlbGYudHJpZ2dlci5iaW5kKHNlbGYsICdhdWRpb1RpbWluZ0luZm8nKSk7IC8vIFNldCB1cCB0aGUgZmluYWwgcGFydCBvZiB0aGUgYXVkaW8gcGlwZWxpbmVcblxuICAgICAgICAgIHBpcGVsaW5lLmFkdHNTdHJlYW0ucGlwZShwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0pLnBpcGUocGlwZWxpbmUuY29hbGVzY2VTdHJlYW0pOyAvLyBlbWl0IHBtdCBpbmZvXG5cbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ3RyYWNraW5mbycsIHtcbiAgICAgICAgICAgIGhhc0F1ZGlvOiAhIWF1ZGlvVHJhY2ssXG4gICAgICAgICAgICBoYXNWaWRlbzogISF2aWRlb1RyYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pOyAvLyBSZS1lbWl0IGFueSBkYXRhIGNvbWluZyBmcm9tIHRoZSBjb2FsZXNjZSBzdHJlYW0gdG8gdGhlIG91dHNpZGUgd29ybGRcblxuICAgICAgICBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbS5vbignZGF0YScsIHRoaXMudHJpZ2dlci5iaW5kKHRoaXMsICdkYXRhJykpOyAvLyBMZXQgdGhlIGNvbnN1bWVyIGtub3cgd2UgaGF2ZSBmaW5pc2hlZCBmbHVzaGluZyB0aGUgZW50aXJlIHBpcGVsaW5lXG5cbiAgICAgICAgcGlwZWxpbmUuY29hbGVzY2VTdHJlYW0ub24oJ2RvbmUnLCB0aGlzLnRyaWdnZXIuYmluZCh0aGlzLCAnZG9uZScpKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc2V0dXBUc1BpcGVsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGlwZWxpbmUgPSB7fTtcbiAgICAgICAgdGhpcy50cmFuc211eFBpcGVsaW5lXyA9IHBpcGVsaW5lO1xuICAgICAgICBwaXBlbGluZS50eXBlID0gJ3RzJztcbiAgICAgICAgcGlwZWxpbmUubWV0YWRhdGFTdHJlYW0gPSBuZXcgbTJ0c18xLk1ldGFkYXRhU3RyZWFtKCk7IC8vIHNldCB1cCB0aGUgcGFyc2luZyBwaXBlbGluZVxuXG4gICAgICAgIHBpcGVsaW5lLnBhY2tldFN0cmVhbSA9IG5ldyBtMnRzXzEuVHJhbnNwb3J0UGFja2V0U3RyZWFtKCk7XG4gICAgICAgIHBpcGVsaW5lLnBhcnNlU3RyZWFtID0gbmV3IG0ydHNfMS5UcmFuc3BvcnRQYXJzZVN0cmVhbSgpO1xuICAgICAgICBwaXBlbGluZS5lbGVtZW50YXJ5U3RyZWFtID0gbmV3IG0ydHNfMS5FbGVtZW50YXJ5U3RyZWFtKCk7XG4gICAgICAgIHBpcGVsaW5lLnRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtID0gbmV3IG0ydHNfMS5UaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSgpO1xuICAgICAgICBwaXBlbGluZS5hZHRzU3RyZWFtID0gbmV3IGFkdHMoKTtcbiAgICAgICAgcGlwZWxpbmUuaDI2NFN0cmVhbSA9IG5ldyBIMjY0U3RyZWFtJDEoKTtcbiAgICAgICAgcGlwZWxpbmUuY2FwdGlvblN0cmVhbSA9IG5ldyBtMnRzXzEuQ2FwdGlvblN0cmVhbSgpO1xuICAgICAgICBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbSA9IG5ldyBfQ29hbGVzY2VTdHJlYW0ob3B0aW9ucywgcGlwZWxpbmUubWV0YWRhdGFTdHJlYW0pO1xuICAgICAgICBwaXBlbGluZS5oZWFkT2ZQaXBlbGluZSA9IHBpcGVsaW5lLnBhY2tldFN0cmVhbTsgLy8gZGlzYXNzZW1ibGUgTVBFRzItVFMgcGFja2V0cyBpbnRvIGVsZW1lbnRhcnkgc3RyZWFtc1xuXG4gICAgICAgIHBpcGVsaW5lLnBhY2tldFN0cmVhbS5waXBlKHBpcGVsaW5lLnBhcnNlU3RyZWFtKS5waXBlKHBpcGVsaW5lLmVsZW1lbnRhcnlTdHJlYW0pLnBpcGUocGlwZWxpbmUudGltZXN0YW1wUm9sbG92ZXJTdHJlYW0pOyAvLyAhIVRISVMgT1JERVIgSVMgSU1QT1JUQU5UISFcbiAgICAgICAgLy8gZGVtdXggdGhlIHN0cmVhbXNcblxuICAgICAgICBwaXBlbGluZS50aW1lc3RhbXBSb2xsb3ZlclN0cmVhbS5waXBlKHBpcGVsaW5lLmgyNjRTdHJlYW0pO1xuICAgICAgICBwaXBlbGluZS50aW1lc3RhbXBSb2xsb3ZlclN0cmVhbS5waXBlKHBpcGVsaW5lLmFkdHNTdHJlYW0pO1xuICAgICAgICBwaXBlbGluZS50aW1lc3RhbXBSb2xsb3ZlclN0cmVhbS5waXBlKHBpcGVsaW5lLm1ldGFkYXRhU3RyZWFtKS5waXBlKHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtKTsgLy8gSG9vayB1cCBDRUEtNjA4LzcwOCBjYXB0aW9uIHN0cmVhbVxuXG4gICAgICAgIHBpcGVsaW5lLmgyNjRTdHJlYW0ucGlwZShwaXBlbGluZS5jYXB0aW9uU3RyZWFtKS5waXBlKHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtKTtcbiAgICAgICAgcGlwZWxpbmUuZWxlbWVudGFyeVN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgICBpZiAoZGF0YS50eXBlID09PSAnbWV0YWRhdGEnKSB7XG4gICAgICAgICAgICBpID0gZGF0YS50cmFja3MubGVuZ3RoOyAvLyBzY2FuIHRoZSB0cmFja3MgbGlzdGVkIGluIHRoZSBtZXRhZGF0YVxuXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgIGlmICghdmlkZW9UcmFjayAmJiBkYXRhLnRyYWNrc1tpXS50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgdmlkZW9UcmFjayA9IGRhdGEudHJhY2tzW2ldO1xuICAgICAgICAgICAgICAgIHZpZGVvVHJhY2sudGltZWxpbmVTdGFydEluZm8uYmFzZU1lZGlhRGVjb2RlVGltZSA9IHNlbGYuYmFzZU1lZGlhRGVjb2RlVGltZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghYXVkaW9UcmFjayAmJiBkYXRhLnRyYWNrc1tpXS50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICAgICAgYXVkaW9UcmFjayA9IGRhdGEudHJhY2tzW2ldO1xuICAgICAgICAgICAgICAgIGF1ZGlvVHJhY2sudGltZWxpbmVTdGFydEluZm8uYmFzZU1lZGlhRGVjb2RlVGltZSA9IHNlbGYuYmFzZU1lZGlhRGVjb2RlVGltZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAvLyBob29rIHVwIHRoZSB2aWRlbyBzZWdtZW50IHN0cmVhbSB0byB0aGUgZmlyc3QgdHJhY2sgd2l0aCBoMjY0IGRhdGFcblxuXG4gICAgICAgICAgICBpZiAodmlkZW9UcmFjayAmJiAhcGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtKSB7XG4gICAgICAgICAgICAgIHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtLm51bWJlck9mVHJhY2tzKys7XG4gICAgICAgICAgICAgIHBpcGVsaW5lLnZpZGVvU2VnbWVudFN0cmVhbSA9IG5ldyBfVmlkZW9TZWdtZW50U3RyZWFtKHZpZGVvVHJhY2ssIG9wdGlvbnMpO1xuICAgICAgICAgICAgICBwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0ub24oJ3RpbWVsaW5lU3RhcnRJbmZvJywgZnVuY3Rpb24gKHRpbWVsaW5lU3RhcnRJbmZvKSB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiB2aWRlbyBlbWl0cyB0aW1lbGluZVN0YXJ0SW5mbyBkYXRhIGFmdGVyIGEgZmx1c2gsIHdlIGZvcndhcmQgdGhhdFxuICAgICAgICAgICAgICAgIC8vIGluZm8gdG8gdGhlIEF1ZGlvU2VnbWVudFN0cmVhbSwgaWYgaXQgZXhpc3RzLCBiZWNhdXNlIHZpZGVvIHRpbWVsaW5lXG4gICAgICAgICAgICAgICAgLy8gZGF0YSB0YWtlcyBwcmVjZWRlbmNlLiAgRG8gbm90IGRvIHRoaXMgaWYga2VlcE9yaWdpbmFsVGltZXN0YW1wcyBpcyBzZXQsXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGlzIGlzIGEgcGFydGljdWxhcmx5IHN1YnRsZSBmb3JtIG9mIHRpbWVzdGFtcCBhbHRlcmF0aW9uLlxuICAgICAgICAgICAgICAgIGlmIChhdWRpb1RyYWNrICYmICFvcHRpb25zLmtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpIHtcbiAgICAgICAgICAgICAgICAgIGF1ZGlvVHJhY2sudGltZWxpbmVTdGFydEluZm8gPSB0aW1lbGluZVN0YXJ0SW5mbzsgLy8gT24gdGhlIGZpcnN0IHNlZ21lbnQgd2UgdHJpbSBBQUMgZnJhbWVzIHRoYXQgZXhpc3QgYmVmb3JlIHRoZVxuICAgICAgICAgICAgICAgICAgLy8gdmVyeSBlYXJsaWVzdCBEVFMgd2UgaGF2ZSBzZWVuIGluIHZpZGVvIGJlY2F1c2UgQ2hyb21lIHdpbGxcbiAgICAgICAgICAgICAgICAgIC8vIGludGVycHJldCBhbnkgdmlkZW8gdHJhY2sgd2l0aCBhIGJhc2VNZWRpYURlY29kZVRpbWUgdGhhdCBpc1xuICAgICAgICAgICAgICAgICAgLy8gbm9uLXplcm8gYXMgYSBnYXAuXG5cbiAgICAgICAgICAgICAgICAgIHBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbS5zZXRFYXJsaWVzdER0cyh0aW1lbGluZVN0YXJ0SW5mby5kdHMgLSBzZWxmLmJhc2VNZWRpYURlY29kZVRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHBpcGVsaW5lLnZpZGVvU2VnbWVudFN0cmVhbS5vbigncHJvY2Vzc2VkR29wc0luZm8nLCBzZWxmLnRyaWdnZXIuYmluZChzZWxmLCAnZ29wSW5mbycpKTtcbiAgICAgICAgICAgICAgcGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtLm9uKCdzZWdtZW50VGltaW5nSW5mbycsIHNlbGYudHJpZ2dlci5iaW5kKHNlbGYsICd2aWRlb1NlZ21lbnRUaW1pbmdJbmZvJykpO1xuICAgICAgICAgICAgICBwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0ub24oJ2Jhc2VNZWRpYURlY29kZVRpbWUnLCBmdW5jdGlvbiAoYmFzZU1lZGlhRGVjb2RlVGltZSkge1xuICAgICAgICAgICAgICAgIGlmIChhdWRpb1RyYWNrKSB7XG4gICAgICAgICAgICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0uc2V0VmlkZW9CYXNlTWVkaWFEZWNvZGVUaW1lKGJhc2VNZWRpYURlY29kZVRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHBpcGVsaW5lLnZpZGVvU2VnbWVudFN0cmVhbS5vbigndGltaW5nSW5mbycsIHNlbGYudHJpZ2dlci5iaW5kKHNlbGYsICd2aWRlb1RpbWluZ0luZm8nKSk7IC8vIFNldCB1cCB0aGUgZmluYWwgcGFydCBvZiB0aGUgdmlkZW8gcGlwZWxpbmVcblxuICAgICAgICAgICAgICBwaXBlbGluZS5oMjY0U3RyZWFtLnBpcGUocGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtKS5waXBlKHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGF1ZGlvVHJhY2sgJiYgIXBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbSkge1xuICAgICAgICAgICAgICAvLyBob29rIHVwIHRoZSBhdWRpbyBzZWdtZW50IHN0cmVhbSB0byB0aGUgZmlyc3QgdHJhY2sgd2l0aCBhYWMgZGF0YVxuICAgICAgICAgICAgICBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbS5udW1iZXJPZlRyYWNrcysrO1xuICAgICAgICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0gPSBuZXcgX0F1ZGlvU2VnbWVudFN0cmVhbShhdWRpb1RyYWNrLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgcGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtLm9uKCd0aW1pbmdJbmZvJywgc2VsZi50cmlnZ2VyLmJpbmQoc2VsZiwgJ2F1ZGlvVGltaW5nSW5mbycpKTsgLy8gU2V0IHVwIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBhdWRpbyBwaXBlbGluZVxuXG4gICAgICAgICAgICAgIHBpcGVsaW5lLmFkdHNTdHJlYW0ucGlwZShwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0pLnBpcGUocGlwZWxpbmUuY29hbGVzY2VTdHJlYW0pO1xuICAgICAgICAgICAgfSAvLyBlbWl0IHBtdCBpbmZvXG5cblxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCd0cmFja2luZm8nLCB7XG4gICAgICAgICAgICAgIGhhc0F1ZGlvOiAhIWF1ZGlvVHJhY2ssXG4gICAgICAgICAgICAgIGhhc1ZpZGVvOiAhIXZpZGVvVHJhY2tcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7IC8vIFJlLWVtaXQgYW55IGRhdGEgY29taW5nIGZyb20gdGhlIGNvYWxlc2NlIHN0cmVhbSB0byB0aGUgb3V0c2lkZSB3b3JsZFxuXG4gICAgICAgIHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtLm9uKCdkYXRhJywgdGhpcy50cmlnZ2VyLmJpbmQodGhpcywgJ2RhdGEnKSk7XG4gICAgICAgIHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtLm9uKCdpZDNGcmFtZScsIGZ1bmN0aW9uIChpZDNGcmFtZSkge1xuICAgICAgICAgIGlkM0ZyYW1lLmRpc3BhdGNoVHlwZSA9IHBpcGVsaW5lLm1ldGFkYXRhU3RyZWFtLmRpc3BhdGNoVHlwZTtcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ2lkM0ZyYW1lJywgaWQzRnJhbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcGlwZWxpbmUuY29hbGVzY2VTdHJlYW0ub24oJ2NhcHRpb24nLCB0aGlzLnRyaWdnZXIuYmluZCh0aGlzLCAnY2FwdGlvbicpKTsgLy8gTGV0IHRoZSBjb25zdW1lciBrbm93IHdlIGhhdmUgZmluaXNoZWQgZmx1c2hpbmcgdGhlIGVudGlyZSBwaXBlbGluZVxuXG4gICAgICAgIHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtLm9uKCdkb25lJywgdGhpcy50cmlnZ2VyLmJpbmQodGhpcywgJ2RvbmUnKSk7XG4gICAgICB9OyAvLyBob29rIHVwIHRoZSBzZWdtZW50IHN0cmVhbXMgb25jZSB0cmFjayBtZXRhZGF0YSBpcyBkZWxpdmVyZWRcblxuXG4gICAgICB0aGlzLnNldEJhc2VNZWRpYURlY29kZVRpbWUgPSBmdW5jdGlvbiAoYmFzZU1lZGlhRGVjb2RlVGltZSkge1xuICAgICAgICB2YXIgcGlwZWxpbmUgPSB0aGlzLnRyYW5zbXV4UGlwZWxpbmVfO1xuXG4gICAgICAgIGlmICghb3B0aW9ucy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzKSB7XG4gICAgICAgICAgdGhpcy5iYXNlTWVkaWFEZWNvZGVUaW1lID0gYmFzZU1lZGlhRGVjb2RlVGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhdWRpb1RyYWNrKSB7XG4gICAgICAgICAgYXVkaW9UcmFjay50aW1lbGluZVN0YXJ0SW5mby5kdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgYXVkaW9UcmFjay50aW1lbGluZVN0YXJ0SW5mby5wdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdHJhY2tEZWNvZGVJbmZvLmNsZWFyRHRzSW5mbyhhdWRpb1RyYWNrKTtcblxuICAgICAgICAgIGlmIChwaXBlbGluZS5hdWRpb1RpbWVzdGFtcFJvbGxvdmVyU3RyZWFtKSB7XG4gICAgICAgICAgICBwaXBlbGluZS5hdWRpb1RpbWVzdGFtcFJvbGxvdmVyU3RyZWFtLmRpc2NvbnRpbnVpdHkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmlkZW9UcmFjaykge1xuICAgICAgICAgIGlmIChwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0pIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLnZpZGVvU2VnbWVudFN0cmVhbS5nb3BDYWNoZV8gPSBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2aWRlb1RyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmR0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB2aWRlb1RyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLnB0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0cmFja0RlY29kZUluZm8uY2xlYXJEdHNJbmZvKHZpZGVvVHJhY2spO1xuICAgICAgICAgIHBpcGVsaW5lLmNhcHRpb25TdHJlYW0ucmVzZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaXBlbGluZS50aW1lc3RhbXBSb2xsb3ZlclN0cmVhbSkge1xuICAgICAgICAgIHBpcGVsaW5lLnRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtLmRpc2NvbnRpbnVpdHkoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRBdWRpb0FwcGVuZFN0YXJ0ID0gZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICBpZiAoYXVkaW9UcmFjaykge1xuICAgICAgICAgIHRoaXMudHJhbnNtdXhQaXBlbGluZV8uYXVkaW9TZWdtZW50U3RyZWFtLnNldEF1ZGlvQXBwZW5kU3RhcnQodGltZXN0YW1wKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRSZW11eCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFyIHBpcGVsaW5lID0gdGhpcy50cmFuc211eFBpcGVsaW5lXztcbiAgICAgICAgb3B0aW9ucy5yZW11eCA9IHZhbDtcblxuICAgICAgICBpZiAocGlwZWxpbmUgJiYgcGlwZWxpbmUuY29hbGVzY2VTdHJlYW0pIHtcbiAgICAgICAgICBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbS5zZXRSZW11eCh2YWwpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFsaWduR29wc1dpdGggPSBmdW5jdGlvbiAoZ29wc1RvQWxpZ25XaXRoKSB7XG4gICAgICAgIGlmICh2aWRlb1RyYWNrICYmIHRoaXMudHJhbnNtdXhQaXBlbGluZV8udmlkZW9TZWdtZW50U3RyZWFtKSB7XG4gICAgICAgICAgdGhpcy50cmFuc211eFBpcGVsaW5lXy52aWRlb1NlZ21lbnRTdHJlYW0uYWxpZ25Hb3BzV2l0aChnb3BzVG9BbGlnbldpdGgpO1xuICAgICAgICB9XG4gICAgICB9OyAvLyBmZWVkIGluY29taW5nIGRhdGEgdG8gdGhlIGZyb250IG9mIHRoZSBwYXJzaW5nIHBpcGVsaW5lXG5cblxuICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKGhhc0ZsdXNoZWQpIHtcbiAgICAgICAgICB2YXIgaXNBYWMgPSBpc0xpa2VseUFhY0RhdGEkMShkYXRhKTtcblxuICAgICAgICAgIGlmIChpc0FhYyAmJiB0aGlzLnRyYW5zbXV4UGlwZWxpbmVfLnR5cGUgIT09ICdhYWMnKSB7XG4gICAgICAgICAgICB0aGlzLnNldHVwQWFjUGlwZWxpbmUoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFpc0FhYyAmJiB0aGlzLnRyYW5zbXV4UGlwZWxpbmVfLnR5cGUgIT09ICd0cycpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBUc1BpcGVsaW5lKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaGFzRmx1c2hlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmFuc211eFBpcGVsaW5lXy5oZWFkT2ZQaXBlbGluZS5wdXNoKGRhdGEpO1xuICAgICAgfTsgLy8gZmx1c2ggYW55IGJ1ZmZlcmVkIGRhdGFcblxuXG4gICAgICB0aGlzLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBoYXNGbHVzaGVkID0gdHJ1ZTsgLy8gU3RhcnQgYXQgdGhlIHRvcCBvZiB0aGUgcGlwZWxpbmUgYW5kIGZsdXNoIGFsbCBwZW5kaW5nIHdvcmtcblxuICAgICAgICB0aGlzLnRyYW5zbXV4UGlwZWxpbmVfLmhlYWRPZlBpcGVsaW5lLmZsdXNoKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmVuZFRpbWVsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRyYW5zbXV4UGlwZWxpbmVfLmhlYWRPZlBpcGVsaW5lLmVuZFRpbWVsaW5lKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy50cmFuc211eFBpcGVsaW5lXy5oZWFkT2ZQaXBlbGluZSkge1xuICAgICAgICAgIHRoaXMudHJhbnNtdXhQaXBlbGluZV8uaGVhZE9mUGlwZWxpbmUucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gQ2FwdGlvbiBkYXRhIGhhcyB0byBiZSByZXNldCB3aGVuIHNlZWtpbmcgb3V0c2lkZSBidWZmZXJlZCByYW5nZVxuXG5cbiAgICAgIHRoaXMucmVzZXRDYXB0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNtdXhQaXBlbGluZV8uY2FwdGlvblN0cmVhbSkge1xuICAgICAgICAgIHRoaXMudHJhbnNtdXhQaXBlbGluZV8uY2FwdGlvblN0cmVhbS5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfVHJhbnNtdXhlci5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgdmFyIHRyYW5zbXV4ZXIgPSB7XG4gICAgICBUcmFuc211eGVyOiBfVHJhbnNtdXhlcixcbiAgICAgIFZpZGVvU2VnbWVudFN0cmVhbTogX1ZpZGVvU2VnbWVudFN0cmVhbSxcbiAgICAgIEF1ZGlvU2VnbWVudFN0cmVhbTogX0F1ZGlvU2VnbWVudFN0cmVhbSxcbiAgICAgIEFVRElPX1BST1BFUlRJRVM6IGF1ZGlvUHJvcGVydGllcyxcbiAgICAgIFZJREVPX1BST1BFUlRJRVM6IHZpZGVvUHJvcGVydGllcyxcbiAgICAgIC8vIGV4cG9ydGVkIGZvciB0ZXN0aW5nXG4gICAgICBnZW5lcmF0ZVZpZGVvU2VnbWVudFRpbWluZ0luZm86IGdlbmVyYXRlVmlkZW9TZWdtZW50VGltaW5nSW5mb1xuICAgIH07XG4gICAgdmFyIHRyYW5zbXV4ZXJfMSA9IHRyYW5zbXV4ZXIuVHJhbnNtdXhlcjtcbiAgICAvKipcbiAgICAgKiBtdXguanNcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICAgICAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgKi9cblxuICAgIHZhciBjb2RlY3MgPSB7XG4gICAgICBBZHRzOiBhZHRzLFxuICAgICAgaDI2NDogaDI2NFxuICAgIH07XG4gICAgdmFyIE9ORV9TRUNPTkRfSU5fVFMkNCA9IGNsb2NrLk9ORV9TRUNPTkRfSU5fVFM7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIHNpbmdsZS10cmFjaywgSVNPIEJNRkYgbWVkaWEgc2VnbWVudCBmcm9tIEFBQyBkYXRhXG4gICAgICogZXZlbnRzLiBUaGUgb3V0cHV0IG9mIHRoaXMgc3RyZWFtIGNhbiBiZSBmZWQgdG8gYSBTb3VyY2VCdWZmZXJcbiAgICAgKiBjb25maWd1cmVkIHdpdGggYSBzdWl0YWJsZSBpbml0aWFsaXphdGlvbiBzZWdtZW50LlxuICAgICAqL1xuXG4gICAgdmFyIEF1ZGlvU2VnbWVudFN0cmVhbSQxID0gZnVuY3Rpb24gQXVkaW9TZWdtZW50U3RyZWFtJDEodHJhY2ssIG9wdGlvbnMpIHtcbiAgICAgIHZhciBhZHRzRnJhbWVzID0gW10sXG4gICAgICAgICAgc2VxdWVuY2VOdW1iZXIgPSAwLFxuICAgICAgICAgIGVhcmxpZXN0QWxsb3dlZER0cyA9IDAsXG4gICAgICAgICAgYXVkaW9BcHBlbmRTdGFydFRzID0gMCxcbiAgICAgICAgICB2aWRlb0Jhc2VNZWRpYURlY29kZVRpbWUgPSBJbmZpbml0eSxcbiAgICAgICAgICBzZWdtZW50U3RhcnRQdHMgPSBudWxsLFxuICAgICAgICAgIHNlZ21lbnRFbmRQdHMgPSBudWxsO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBBdWRpb1NlZ21lbnRTdHJlYW0kMS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0cmFja0RlY29kZUluZm8uY29sbGVjdER0c0luZm8odHJhY2ssIGRhdGEpO1xuXG4gICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgIGF1ZGlvUHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICB0cmFja1twcm9wXSA9IGRhdGFbcHJvcF07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gYnVmZmVyIGF1ZGlvIGRhdGEgdW50aWwgZW5kKCkgaXMgY2FsbGVkXG5cblxuICAgICAgICBhZHRzRnJhbWVzLnB1c2goZGF0YSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldEVhcmxpZXN0RHRzID0gZnVuY3Rpb24gKGVhcmxpZXN0RHRzKSB7XG4gICAgICAgIGVhcmxpZXN0QWxsb3dlZER0cyA9IGVhcmxpZXN0RHRzO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRWaWRlb0Jhc2VNZWRpYURlY29kZVRpbWUgPSBmdW5jdGlvbiAoYmFzZU1lZGlhRGVjb2RlVGltZSkge1xuICAgICAgICB2aWRlb0Jhc2VNZWRpYURlY29kZVRpbWUgPSBiYXNlTWVkaWFEZWNvZGVUaW1lO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRBdWRpb0FwcGVuZFN0YXJ0ID0gZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICBhdWRpb0FwcGVuZFN0YXJ0VHMgPSB0aW1lc3RhbXA7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnByb2Nlc3NGcmFtZXNfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZnJhbWVzLCBtb29mLCBtZGF0LCBib3hlcywgdGltaW5nSW5mbzsgLy8gcmV0dXJuIGVhcmx5IGlmIG5vIGF1ZGlvIGRhdGEgaGFzIGJlZW4gb2JzZXJ2ZWRcblxuICAgICAgICBpZiAoYWR0c0ZyYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmcmFtZXMgPSBhdWRpb0ZyYW1lVXRpbHMudHJpbUFkdHNGcmFtZXNCeUVhcmxpZXN0RHRzKGFkdHNGcmFtZXMsIHRyYWNrLCBlYXJsaWVzdEFsbG93ZWREdHMpO1xuXG4gICAgICAgIGlmIChmcmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgLy8gcmV0dXJuIGVhcmx5IGlmIHRoZSBmcmFtZXMgYXJlIGFsbCBhZnRlciB0aGUgZWFybGllc3QgYWxsb3dlZCBEVFNcbiAgICAgICAgICAvLyBUT0RPIHNob3VsZCB3ZSBjbGVhciB0aGUgYWR0c0ZyYW1lcz9cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cmFjay5iYXNlTWVkaWFEZWNvZGVUaW1lID0gdHJhY2tEZWNvZGVJbmZvLmNhbGN1bGF0ZVRyYWNrQmFzZU1lZGlhRGVjb2RlVGltZSh0cmFjaywgb3B0aW9ucy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzKTtcbiAgICAgICAgYXVkaW9GcmFtZVV0aWxzLnByZWZpeFdpdGhTaWxlbmNlKHRyYWNrLCBmcmFtZXMsIGF1ZGlvQXBwZW5kU3RhcnRUcywgdmlkZW9CYXNlTWVkaWFEZWNvZGVUaW1lKTsgLy8gd2UgaGF2ZSB0byBidWlsZCB0aGUgaW5kZXggZnJvbSBieXRlIGxvY2F0aW9ucyB0b1xuICAgICAgICAvLyBzYW1wbGVzICh0aGF0IGlzLCBhZHRzIGZyYW1lcykgaW4gdGhlIGF1ZGlvIGRhdGFcblxuICAgICAgICB0cmFjay5zYW1wbGVzID0gYXVkaW9GcmFtZVV0aWxzLmdlbmVyYXRlU2FtcGxlVGFibGUoZnJhbWVzKTsgLy8gY29uY2F0ZW5hdGUgdGhlIGF1ZGlvIGRhdGEgdG8gY29uc3R1Y3QgdGhlIG1kYXRcblxuICAgICAgICBtZGF0ID0gbXA0R2VuZXJhdG9yLm1kYXQoYXVkaW9GcmFtZVV0aWxzLmNvbmNhdGVuYXRlRnJhbWVEYXRhKGZyYW1lcykpO1xuICAgICAgICBhZHRzRnJhbWVzID0gW107XG4gICAgICAgIG1vb2YgPSBtcDRHZW5lcmF0b3IubW9vZihzZXF1ZW5jZU51bWJlciwgW3RyYWNrXSk7IC8vIGJ1bXAgdGhlIHNlcXVlbmNlIG51bWJlciBmb3IgbmV4dCB0aW1lXG5cbiAgICAgICAgc2VxdWVuY2VOdW1iZXIrKztcbiAgICAgICAgdHJhY2suaW5pdFNlZ21lbnQgPSBtcDRHZW5lcmF0b3IuaW5pdFNlZ21lbnQoW3RyYWNrXSk7IC8vIGl0IHdvdWxkIGJlIGdyZWF0IHRvIGFsbG9jYXRlIHRoaXMgYXJyYXkgdXAgZnJvbnQgaW5zdGVhZCBvZlxuICAgICAgICAvLyB0aHJvd2luZyBhd2F5IGh1bmRyZWRzIG9mIG1lZGlhIHNlZ21lbnQgZnJhZ21lbnRzXG5cbiAgICAgICAgYm94ZXMgPSBuZXcgVWludDhBcnJheShtb29mLmJ5dGVMZW5ndGggKyBtZGF0LmJ5dGVMZW5ndGgpO1xuICAgICAgICBib3hlcy5zZXQobW9vZik7XG4gICAgICAgIGJveGVzLnNldChtZGF0LCBtb29mLmJ5dGVMZW5ndGgpO1xuICAgICAgICB0cmFja0RlY29kZUluZm8uY2xlYXJEdHNJbmZvKHRyYWNrKTtcblxuICAgICAgICBpZiAoc2VnbWVudFN0YXJ0UHRzID09PSBudWxsKSB7XG4gICAgICAgICAgc2VnbWVudEVuZFB0cyA9IHNlZ21lbnRTdGFydFB0cyA9IGZyYW1lc1swXS5wdHM7XG4gICAgICAgIH1cblxuICAgICAgICBzZWdtZW50RW5kUHRzICs9IGZyYW1lcy5sZW5ndGggKiAoT05FX1NFQ09ORF9JTl9UUyQ0ICogMTAyNCAvIHRyYWNrLnNhbXBsZXJhdGUpO1xuICAgICAgICB0aW1pbmdJbmZvID0ge1xuICAgICAgICAgIHN0YXJ0OiBzZWdtZW50U3RhcnRQdHNcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCd0aW1pbmdJbmZvJywgdGltaW5nSW5mbyk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZGF0YScsIHtcbiAgICAgICAgICB0cmFjazogdHJhY2ssXG4gICAgICAgICAgYm94ZXM6IGJveGVzXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzRnJhbWVzXygpOyAvLyB0cmlnZ2VyIGZpbmFsIHRpbWluZyBpbmZvXG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCd0aW1pbmdJbmZvJywge1xuICAgICAgICAgIHN0YXJ0OiBzZWdtZW50U3RhcnRQdHMsXG4gICAgICAgICAgZW5kOiBzZWdtZW50RW5kUHRzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlc2V0VGltaW5nXygpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvbmUnLCAnQXVkaW9TZWdtZW50U3RyZWFtJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnBhcnRpYWxGbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzRnJhbWVzXygpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3BhcnRpYWxkb25lJywgJ0F1ZGlvU2VnbWVudFN0cmVhbScpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5lbmRUaW1lbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2VuZGVkdGltZWxpbmUnLCAnQXVkaW9TZWdtZW50U3RyZWFtJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0VGltaW5nXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJhY2tEZWNvZGVJbmZvLmNsZWFyRHRzSW5mbyh0cmFjayk7XG4gICAgICAgIHNlZ21lbnRTdGFydFB0cyA9IG51bGw7XG4gICAgICAgIHNlZ21lbnRFbmRQdHMgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZXNldFRpbWluZ18oKTtcbiAgICAgICAgYWR0c0ZyYW1lcyA9IFtdO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Jlc2V0Jyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBBdWRpb1NlZ21lbnRTdHJlYW0kMS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgdmFyIGF1ZGlvU2VnbWVudFN0cmVhbSA9IEF1ZGlvU2VnbWVudFN0cmVhbSQxO1xuXG4gICAgdmFyIFZpZGVvU2VnbWVudFN0cmVhbSQxID0gZnVuY3Rpb24gVmlkZW9TZWdtZW50U3RyZWFtJDEodHJhY2ssIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZXF1ZW5jZU51bWJlciA9IDAsXG4gICAgICAgICAgbmFsVW5pdHMgPSBbXSxcbiAgICAgICAgICBmcmFtZUNhY2hlID0gW10sXG4gICAgICAgICAgLy8gZ29wc1RvQWxpZ25XaXRoID0gW10sXG4gICAgICBjb25maWcsXG4gICAgICAgICAgcHBzLFxuICAgICAgICAgIHNlZ21lbnRTdGFydFB0cyA9IG51bGwsXG4gICAgICAgICAgc2VnbWVudEVuZFB0cyA9IG51bGwsXG4gICAgICAgICAgZ29wcyxcbiAgICAgICAgICBlbnN1cmVOZXh0RnJhbWVJc0tleUZyYW1lID0gdHJ1ZTtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgVmlkZW9TZWdtZW50U3RyZWFtJDEucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcblxuICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKG5hbFVuaXQpIHtcbiAgICAgICAgdHJhY2tEZWNvZGVJbmZvLmNvbGxlY3REdHNJbmZvKHRyYWNrLCBuYWxVbml0KTtcblxuICAgICAgICBpZiAodHlwZW9mIHRyYWNrLnRpbWVsaW5lU3RhcnRJbmZvLmR0cyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0cmFjay50aW1lbGluZVN0YXJ0SW5mby5kdHMgPSBuYWxVbml0LmR0cztcbiAgICAgICAgfSAvLyByZWNvcmQgdGhlIHRyYWNrIGNvbmZpZ1xuXG5cbiAgICAgICAgaWYgKG5hbFVuaXQubmFsVW5pdFR5cGUgPT09ICdzZXFfcGFyYW1ldGVyX3NldF9yYnNwJyAmJiAhY29uZmlnKSB7XG4gICAgICAgICAgY29uZmlnID0gbmFsVW5pdC5jb25maWc7XG4gICAgICAgICAgdHJhY2suc3BzID0gW25hbFVuaXQuZGF0YV07XG4gICAgICAgICAgdmlkZW9Qcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIHRyYWNrW3Byb3BdID0gY29uZmlnW3Byb3BdO1xuICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hbFVuaXQubmFsVW5pdFR5cGUgPT09ICdwaWNfcGFyYW1ldGVyX3NldF9yYnNwJyAmJiAhcHBzKSB7XG4gICAgICAgICAgcHBzID0gbmFsVW5pdC5kYXRhO1xuICAgICAgICAgIHRyYWNrLnBwcyA9IFtuYWxVbml0LmRhdGFdO1xuICAgICAgICB9IC8vIGJ1ZmZlciB2aWRlbyB1bnRpbCBmbHVzaCgpIGlzIGNhbGxlZFxuXG5cbiAgICAgICAgbmFsVW5pdHMucHVzaChuYWxVbml0KTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucHJvY2Vzc05hbHNfID0gZnVuY3Rpb24gKGNhY2hlTGFzdEZyYW1lKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBuYWxVbml0cyA9IGZyYW1lQ2FjaGUuY29uY2F0KG5hbFVuaXRzKTsgLy8gVGhyb3cgYXdheSBuYWxVbml0cyBhdCB0aGUgc3RhcnQgb2YgdGhlIGJ5dGUgc3RyZWFtIHVudGlsXG4gICAgICAgIC8vIHdlIGZpbmQgdGhlIGZpcnN0IEFVRFxuXG4gICAgICAgIHdoaWxlIChuYWxVbml0cy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAobmFsVW5pdHNbMF0ubmFsVW5pdFR5cGUgPT09ICdhY2Nlc3NfdW5pdF9kZWxpbWl0ZXJfcmJzcCcpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5hbFVuaXRzLnNoaWZ0KCk7XG4gICAgICAgIH0gLy8gUmV0dXJuIGVhcmx5IGlmIG5vIHZpZGVvIGRhdGEgaGFzIGJlZW4gb2JzZXJ2ZWRcblxuXG4gICAgICAgIGlmIChuYWxVbml0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZnJhbWVzID0gZnJhbWVVdGlscy5ncm91cE5hbHNJbnRvRnJhbWVzKG5hbFVuaXRzKTtcblxuICAgICAgICBpZiAoIWZyYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gbm90ZSB0aGF0IHRoZSBmcmFtZSBjYWNoZSBtYXkgYWxzbyBwcm90ZWN0IHVzIGZyb20gY2FzZXMgd2hlcmUgd2UgaGF2ZW4ndFxuICAgICAgICAvLyBwdXNoZWQgZGF0YSBmb3IgdGhlIGVudGlyZSBmaXJzdCBvciBsYXN0IGZyYW1lIHlldFxuXG5cbiAgICAgICAgZnJhbWVDYWNoZSA9IGZyYW1lc1tmcmFtZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKGNhY2hlTGFzdEZyYW1lKSB7XG4gICAgICAgICAgZnJhbWVzLnBvcCgpO1xuICAgICAgICAgIGZyYW1lcy5kdXJhdGlvbiAtPSBmcmFtZUNhY2hlLmR1cmF0aW9uO1xuICAgICAgICAgIGZyYW1lcy5uYWxDb3VudCAtPSBmcmFtZUNhY2hlLmxlbmd0aDtcbiAgICAgICAgICBmcmFtZXMuYnl0ZUxlbmd0aCAtPSBmcmFtZUNhY2hlLmJ5dGVMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWZyYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICBuYWxVbml0cyA9IFtdO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJpZ2dlcigndGltZWxpbmVTdGFydEluZm8nLCB0cmFjay50aW1lbGluZVN0YXJ0SW5mbyk7XG5cbiAgICAgICAgaWYgKGVuc3VyZU5leHRGcmFtZUlzS2V5RnJhbWUpIHtcbiAgICAgICAgICBnb3BzID0gZnJhbWVVdGlscy5ncm91cEZyYW1lc0ludG9Hb3BzKGZyYW1lcyk7XG5cbiAgICAgICAgICBpZiAoIWdvcHNbMF1bMF0ua2V5RnJhbWUpIHtcbiAgICAgICAgICAgIGdvcHMgPSBmcmFtZVV0aWxzLmV4dGVuZEZpcnN0S2V5RnJhbWUoZ29wcyk7XG5cbiAgICAgICAgICAgIGlmICghZ29wc1swXVswXS5rZXlGcmFtZSkge1xuICAgICAgICAgICAgICAvLyB3ZSBoYXZlbid0IHlldCBnb3R0ZW4gYSBrZXkgZnJhbWUsIHNvIHJlc2V0IG5hbCB1bml0cyB0byB3YWl0IGZvciBtb3JlIG5hbFxuICAgICAgICAgICAgICAvLyB1bml0c1xuICAgICAgICAgICAgICBuYWxVbml0cyA9IFtdLmNvbmNhdC5hcHBseShbXSwgZnJhbWVzKS5jb25jYXQoZnJhbWVDYWNoZSk7XG4gICAgICAgICAgICAgIGZyYW1lQ2FjaGUgPSBbXTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmcmFtZXMgPSBbXS5jb25jYXQuYXBwbHkoW10sIGdvcHMpO1xuICAgICAgICAgICAgZnJhbWVzLmR1cmF0aW9uID0gZ29wcy5kdXJhdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbnN1cmVOZXh0RnJhbWVJc0tleUZyYW1lID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VnbWVudFN0YXJ0UHRzID09PSBudWxsKSB7XG4gICAgICAgICAgc2VnbWVudFN0YXJ0UHRzID0gZnJhbWVzWzBdLnB0cztcbiAgICAgICAgICBzZWdtZW50RW5kUHRzID0gc2VnbWVudFN0YXJ0UHRzO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VnbWVudEVuZFB0cyArPSBmcmFtZXMuZHVyYXRpb247XG4gICAgICAgIHRoaXMudHJpZ2dlcigndGltaW5nSW5mbycsIHtcbiAgICAgICAgICBzdGFydDogc2VnbWVudFN0YXJ0UHRzLFxuICAgICAgICAgIGVuZDogc2VnbWVudEVuZFB0c1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGZyYW1lID0gZnJhbWVzW2ldO1xuICAgICAgICAgIHRyYWNrLnNhbXBsZXMgPSBmcmFtZVV0aWxzLmdlbmVyYXRlU2FtcGxlVGFibGVGb3JGcmFtZShmcmFtZSk7XG4gICAgICAgICAgdmFyIG1kYXQgPSBtcDRHZW5lcmF0b3IubWRhdChmcmFtZVV0aWxzLmNvbmNhdGVuYXRlTmFsRGF0YUZvckZyYW1lKGZyYW1lKSk7XG4gICAgICAgICAgdHJhY2tEZWNvZGVJbmZvLmNsZWFyRHRzSW5mbyh0cmFjayk7XG4gICAgICAgICAgdHJhY2tEZWNvZGVJbmZvLmNvbGxlY3REdHNJbmZvKHRyYWNrLCBmcmFtZSk7XG4gICAgICAgICAgdHJhY2suYmFzZU1lZGlhRGVjb2RlVGltZSA9IHRyYWNrRGVjb2RlSW5mby5jYWxjdWxhdGVUcmFja0Jhc2VNZWRpYURlY29kZVRpbWUodHJhY2ssIG9wdGlvbnMua2VlcE9yaWdpbmFsVGltZXN0YW1wcyk7XG4gICAgICAgICAgdmFyIG1vb2YgPSBtcDRHZW5lcmF0b3IubW9vZihzZXF1ZW5jZU51bWJlciwgW3RyYWNrXSk7XG4gICAgICAgICAgc2VxdWVuY2VOdW1iZXIrKztcbiAgICAgICAgICB0cmFjay5pbml0U2VnbWVudCA9IG1wNEdlbmVyYXRvci5pbml0U2VnbWVudChbdHJhY2tdKTtcbiAgICAgICAgICB2YXIgYm94ZXMgPSBuZXcgVWludDhBcnJheShtb29mLmJ5dGVMZW5ndGggKyBtZGF0LmJ5dGVMZW5ndGgpO1xuICAgICAgICAgIGJveGVzLnNldChtb29mKTtcbiAgICAgICAgICBib3hlcy5zZXQobWRhdCwgbW9vZi5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RhdGEnLCB7XG4gICAgICAgICAgICB0cmFjazogdHJhY2ssXG4gICAgICAgICAgICBib3hlczogYm94ZXMsXG4gICAgICAgICAgICBzZXF1ZW5jZTogc2VxdWVuY2VOdW1iZXIsXG4gICAgICAgICAgICB2aWRlb0ZyYW1lRHRzOiBmcmFtZS5kdHMsXG4gICAgICAgICAgICB2aWRlb0ZyYW1lUHRzOiBmcmFtZS5wdHNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5hbFVuaXRzID0gW107XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0VGltaW5nQW5kQ29uZmlnXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uZmlnID0gdW5kZWZpbmVkO1xuICAgICAgICBwcHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHNlZ21lbnRTdGFydFB0cyA9IG51bGw7XG4gICAgICAgIHNlZ21lbnRFbmRQdHMgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5wYXJ0aWFsRmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucHJvY2Vzc05hbHNfKHRydWUpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3BhcnRpYWxkb25lJywgJ1ZpZGVvU2VnbWVudFN0cmVhbScpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzTmFsc18oZmFsc2UpOyAvLyByZXNldCBjb25maWcgYW5kIHBwcyBiZWNhdXNlIHRoZXkgbWF5IGRpZmZlciBhY3Jvc3Mgc2VnbWVudHNcbiAgICAgICAgLy8gZm9yIGluc3RhbmNlLCB3aGVuIHdlIGFyZSByZW5kaXRpb24gc3dpdGNoaW5nXG5cbiAgICAgICAgdGhpcy5yZXNldFRpbWluZ0FuZENvbmZpZ18oKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkb25lJywgJ1ZpZGVvU2VnbWVudFN0cmVhbScpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5lbmRUaW1lbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2VuZGVkdGltZWxpbmUnLCAnVmlkZW9TZWdtZW50U3RyZWFtJyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlc2V0VGltaW5nQW5kQ29uZmlnXygpO1xuICAgICAgICBmcmFtZUNhY2hlID0gW107XG4gICAgICAgIG5hbFVuaXRzID0gW107XG4gICAgICAgIGVuc3VyZU5leHRGcmFtZUlzS2V5RnJhbWUgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Jlc2V0Jyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBWaWRlb1NlZ21lbnRTdHJlYW0kMS5wcm90b3R5cGUgPSBuZXcgc3RyZWFtKCk7XG4gICAgdmFyIHZpZGVvU2VnbWVudFN0cmVhbSA9IFZpZGVvU2VnbWVudFN0cmVhbSQxO1xuICAgIHZhciBpc0xpa2VseUFhY0RhdGEkMiA9IHV0aWxzLmlzTGlrZWx5QWFjRGF0YTtcblxuICAgIHZhciBjcmVhdGVQaXBlbGluZSA9IGZ1bmN0aW9uIGNyZWF0ZVBpcGVsaW5lKG9iamVjdCkge1xuICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IG5ldyBzdHJlYW0oKTtcbiAgICAgIG9iamVjdC5wcm90b3R5cGUuaW5pdC5jYWxsKG9iamVjdCk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH07XG5cbiAgICB2YXIgdHNQaXBlbGluZSA9IGZ1bmN0aW9uIHRzUGlwZWxpbmUob3B0aW9ucykge1xuICAgICAgdmFyIHBpcGVsaW5lID0ge1xuICAgICAgICB0eXBlOiAndHMnLFxuICAgICAgICB0cmFja3M6IHtcbiAgICAgICAgICBhdWRpbzogbnVsbCxcbiAgICAgICAgICB2aWRlbzogbnVsbFxuICAgICAgICB9LFxuICAgICAgICBwYWNrZXQ6IG5ldyBtMnRzXzEuVHJhbnNwb3J0UGFja2V0U3RyZWFtKCksXG4gICAgICAgIHBhcnNlOiBuZXcgbTJ0c18xLlRyYW5zcG9ydFBhcnNlU3RyZWFtKCksXG4gICAgICAgIGVsZW1lbnRhcnk6IG5ldyBtMnRzXzEuRWxlbWVudGFyeVN0cmVhbSgpLFxuICAgICAgICB0aW1lc3RhbXBSb2xsb3ZlcjogbmV3IG0ydHNfMS5UaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSgpLFxuICAgICAgICBhZHRzOiBuZXcgY29kZWNzLkFkdHMoKSxcbiAgICAgICAgaDI2NDogbmV3IGNvZGVjcy5oMjY0LkgyNjRTdHJlYW0oKSxcbiAgICAgICAgY2FwdGlvblN0cmVhbTogbmV3IG0ydHNfMS5DYXB0aW9uU3RyZWFtKCksXG4gICAgICAgIG1ldGFkYXRhU3RyZWFtOiBuZXcgbTJ0c18xLk1ldGFkYXRhU3RyZWFtKClcbiAgICAgIH07XG4gICAgICBwaXBlbGluZS5oZWFkT2ZQaXBlbGluZSA9IHBpcGVsaW5lLnBhY2tldDsgLy8gVHJhbnNwb3J0IFN0cmVhbVxuXG4gICAgICBwaXBlbGluZS5wYWNrZXQucGlwZShwaXBlbGluZS5wYXJzZSkucGlwZShwaXBlbGluZS5lbGVtZW50YXJ5KS5waXBlKHBpcGVsaW5lLnRpbWVzdGFtcFJvbGxvdmVyKTsgLy8gSDI2NFxuXG4gICAgICBwaXBlbGluZS50aW1lc3RhbXBSb2xsb3Zlci5waXBlKHBpcGVsaW5lLmgyNjQpOyAvLyBIb29rIHVwIENFQS02MDgvNzA4IGNhcHRpb24gc3RyZWFtXG5cbiAgICAgIHBpcGVsaW5lLmgyNjQucGlwZShwaXBlbGluZS5jYXB0aW9uU3RyZWFtKTtcbiAgICAgIHBpcGVsaW5lLnRpbWVzdGFtcFJvbGxvdmVyLnBpcGUocGlwZWxpbmUubWV0YWRhdGFTdHJlYW0pOyAvLyBBRFRTXG5cbiAgICAgIHBpcGVsaW5lLnRpbWVzdGFtcFJvbGxvdmVyLnBpcGUocGlwZWxpbmUuYWR0cyk7XG4gICAgICBwaXBlbGluZS5lbGVtZW50YXJ5Lm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEudHlwZSAhPT0gJ21ldGFkYXRhJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS50cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoIXBpcGVsaW5lLnRyYWNrc1tkYXRhLnRyYWNrc1tpXS50eXBlXSkge1xuICAgICAgICAgICAgcGlwZWxpbmUudHJhY2tzW2RhdGEudHJhY2tzW2ldLnR5cGVdID0gZGF0YS50cmFja3NbaV07XG4gICAgICAgICAgICBwaXBlbGluZS50cmFja3NbZGF0YS50cmFja3NbaV0udHlwZV0udGltZWxpbmVTdGFydEluZm8uYmFzZU1lZGlhRGVjb2RlVGltZSA9IG9wdGlvbnMuYmFzZU1lZGlhRGVjb2RlVGltZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGlwZWxpbmUudHJhY2tzLnZpZGVvICYmICFwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0pIHtcbiAgICAgICAgICBwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0gPSBuZXcgdmlkZW9TZWdtZW50U3RyZWFtKHBpcGVsaW5lLnRyYWNrcy52aWRlbywgb3B0aW9ucyk7XG4gICAgICAgICAgcGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtLm9uKCd0aW1lbGluZVN0YXJ0SW5mbycsIGZ1bmN0aW9uICh0aW1lbGluZVN0YXJ0SW5mbykge1xuICAgICAgICAgICAgaWYgKHBpcGVsaW5lLnRyYWNrcy5hdWRpbyAmJiAhb3B0aW9ucy5rZWVwT3JpZ2luYWxUaW1lc3RhbXBzKSB7XG4gICAgICAgICAgICAgIHBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbS5zZXRFYXJsaWVzdER0cyh0aW1lbGluZVN0YXJ0SW5mby5kdHMgLSBvcHRpb25zLmJhc2VNZWRpYURlY29kZVRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHBpcGVsaW5lLnZpZGVvU2VnbWVudFN0cmVhbS5vbigndGltaW5nSW5mbycsIHBpcGVsaW5lLnRyaWdnZXIuYmluZChwaXBlbGluZSwgJ3ZpZGVvVGltaW5nSW5mbycpKTtcbiAgICAgICAgICBwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcGlwZWxpbmUudHJpZ2dlcignZGF0YScsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtLm9uKCdkb25lJywgcGlwZWxpbmUudHJpZ2dlci5iaW5kKHBpcGVsaW5lLCAnZG9uZScpKTtcbiAgICAgICAgICBwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0ub24oJ3BhcnRpYWxkb25lJywgcGlwZWxpbmUudHJpZ2dlci5iaW5kKHBpcGVsaW5lLCAncGFydGlhbGRvbmUnKSk7XG4gICAgICAgICAgcGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtLm9uKCdlbmRlZHRpbWVsaW5lJywgcGlwZWxpbmUudHJpZ2dlci5iaW5kKHBpcGVsaW5lLCAnZW5kZWR0aW1lbGluZScpKTtcbiAgICAgICAgICBwaXBlbGluZS5oMjY0LnBpcGUocGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaXBlbGluZS50cmFja3MuYXVkaW8gJiYgIXBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbSkge1xuICAgICAgICAgIHBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbSA9IG5ldyBhdWRpb1NlZ21lbnRTdHJlYW0ocGlwZWxpbmUudHJhY2tzLmF1ZGlvLCBvcHRpb25zKTtcbiAgICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcGlwZWxpbmUudHJpZ2dlcignZGF0YScsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ2F1ZGlvJyxcbiAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtLm9uKCdkb25lJywgcGlwZWxpbmUudHJpZ2dlci5iaW5kKHBpcGVsaW5lLCAnZG9uZScpKTtcbiAgICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0ub24oJ3BhcnRpYWxkb25lJywgcGlwZWxpbmUudHJpZ2dlci5iaW5kKHBpcGVsaW5lLCAncGFydGlhbGRvbmUnKSk7XG4gICAgICAgICAgcGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtLm9uKCdlbmRlZHRpbWVsaW5lJywgcGlwZWxpbmUudHJpZ2dlci5iaW5kKHBpcGVsaW5lLCAnZW5kZWR0aW1lbGluZScpKTtcbiAgICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0ub24oJ3RpbWluZ0luZm8nLCBwaXBlbGluZS50cmlnZ2VyLmJpbmQocGlwZWxpbmUsICdhdWRpb1RpbWluZ0luZm8nKSk7XG4gICAgICAgICAgcGlwZWxpbmUuYWR0cy5waXBlKHBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbSk7XG4gICAgICAgIH0gLy8gZW1pdCBwbXQgaW5mb1xuXG5cbiAgICAgICAgcGlwZWxpbmUudHJpZ2dlcigndHJhY2tpbmZvJywge1xuICAgICAgICAgIGhhc0F1ZGlvOiAhIXBpcGVsaW5lLnRyYWNrcy5hdWRpbyxcbiAgICAgICAgICBoYXNWaWRlbzogISFwaXBlbGluZS50cmFja3MudmlkZW9cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHBpcGVsaW5lLmNhcHRpb25TdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2FwdGlvbikge1xuICAgICAgICB2YXIgdGltZWxpbmVTdGFydFB0cztcblxuICAgICAgICBpZiAocGlwZWxpbmUudHJhY2tzLnZpZGVvKSB7XG4gICAgICAgICAgdGltZWxpbmVTdGFydFB0cyA9IHBpcGVsaW5lLnRyYWNrcy52aWRlby50aW1lbGluZVN0YXJ0SW5mby5wdHMgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgb25seSBoYXBwZW4gaWYgd2UgZW5jb3VudGVyIGNhcHRpb24gcGFja2V0cyBiZWZvcmVcbiAgICAgICAgICAvLyB2aWRlbyBkYXRhIGluIGEgc2VnbWVudC4gVGhpcyBpcyBhbiB1bnVzdWFsL3VubGlrZWx5IHNjZW5hcmlvLFxuICAgICAgICAgIC8vIHNvIHdlIGFzc3VtZSB0aGUgdGltZWxpbmUgc3RhcnRzIGF0IHplcm8gZm9yIG5vdy5cbiAgICAgICAgICB0aW1lbGluZVN0YXJ0UHRzID0gMDtcbiAgICAgICAgfSAvLyBUcmFuc2xhdGUgY2FwdGlvbiBQVFMgdGltZXMgaW50byBzZWNvbmQgb2Zmc2V0cyBpbnRvIHRoZVxuICAgICAgICAvLyB2aWRlbyB0aW1lbGluZSBmb3IgdGhlIHNlZ21lbnRcblxuXG4gICAgICAgIGNhcHRpb24uc3RhcnRUaW1lID0gY2xvY2subWV0YWRhdGFUc1RvU2Vjb25kcyhjYXB0aW9uLnN0YXJ0UHRzLCB0aW1lbGluZVN0YXJ0UHRzLCBvcHRpb25zLmtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpO1xuICAgICAgICBjYXB0aW9uLmVuZFRpbWUgPSBjbG9jay5tZXRhZGF0YVRzVG9TZWNvbmRzKGNhcHRpb24uZW5kUHRzLCB0aW1lbGluZVN0YXJ0UHRzLCBvcHRpb25zLmtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpO1xuICAgICAgICBwaXBlbGluZS50cmlnZ2VyKCdjYXB0aW9uJywgY2FwdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHBpcGVsaW5lID0gY3JlYXRlUGlwZWxpbmUocGlwZWxpbmUpO1xuICAgICAgcGlwZWxpbmUubWV0YWRhdGFTdHJlYW0ub24oJ2RhdGEnLCBwaXBlbGluZS50cmlnZ2VyLmJpbmQocGlwZWxpbmUsICdpZDNGcmFtZScpKTtcbiAgICAgIHJldHVybiBwaXBlbGluZTtcbiAgICB9O1xuXG4gICAgdmFyIGFhY1BpcGVsaW5lID0gZnVuY3Rpb24gYWFjUGlwZWxpbmUob3B0aW9ucykge1xuICAgICAgdmFyIHBpcGVsaW5lID0ge1xuICAgICAgICB0eXBlOiAnYWFjJyxcbiAgICAgICAgdHJhY2tzOiB7XG4gICAgICAgICAgYXVkaW86IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgbWV0YWRhdGFTdHJlYW06IG5ldyBtMnRzXzEuTWV0YWRhdGFTdHJlYW0oKSxcbiAgICAgICAgYWFjU3RyZWFtOiBuZXcgYWFjKCksXG4gICAgICAgIGF1ZGlvUm9sbG92ZXI6IG5ldyBtMnRzXzEuVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0oJ2F1ZGlvJyksXG4gICAgICAgIHRpbWVkTWV0YWRhdGFSb2xsb3ZlcjogbmV3IG0ydHNfMS5UaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSgndGltZWQtbWV0YWRhdGEnKSxcbiAgICAgICAgYWR0c1N0cmVhbTogbmV3IGFkdHModHJ1ZSlcbiAgICAgIH07IC8vIHNldCB1cCB0aGUgcGFyc2luZyBwaXBlbGluZVxuXG4gICAgICBwaXBlbGluZS5oZWFkT2ZQaXBlbGluZSA9IHBpcGVsaW5lLmFhY1N0cmVhbTtcbiAgICAgIHBpcGVsaW5lLmFhY1N0cmVhbS5waXBlKHBpcGVsaW5lLmF1ZGlvUm9sbG92ZXIpLnBpcGUocGlwZWxpbmUuYWR0c1N0cmVhbSk7XG4gICAgICBwaXBlbGluZS5hYWNTdHJlYW0ucGlwZShwaXBlbGluZS50aW1lZE1ldGFkYXRhUm9sbG92ZXIpLnBpcGUocGlwZWxpbmUubWV0YWRhdGFTdHJlYW0pO1xuICAgICAgcGlwZWxpbmUubWV0YWRhdGFTdHJlYW0ub24oJ3RpbWVzdGFtcCcsIGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICBwaXBlbGluZS5hYWNTdHJlYW0uc2V0VGltZXN0YW1wKGZyYW1lLnRpbWVTdGFtcCk7XG4gICAgICB9KTtcbiAgICAgIHBpcGVsaW5lLmFhY1N0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLnR5cGUgIT09ICd0aW1lZC1tZXRhZGF0YScgJiYgZGF0YS50eXBlICE9PSAnYXVkaW8nIHx8IHBpcGVsaW5lLmF1ZGlvU2VnbWVudFN0cmVhbSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBpcGVsaW5lLnRyYWNrcy5hdWRpbyA9IHBpcGVsaW5lLnRyYWNrcy5hdWRpbyB8fCB7XG4gICAgICAgICAgdGltZWxpbmVTdGFydEluZm86IHtcbiAgICAgICAgICAgIGJhc2VNZWRpYURlY29kZVRpbWU6IG9wdGlvbnMuYmFzZU1lZGlhRGVjb2RlVGltZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29kZWM6ICdhZHRzJyxcbiAgICAgICAgICB0eXBlOiAnYXVkaW8nXG4gICAgICAgIH07IC8vIGhvb2sgdXAgdGhlIGF1ZGlvIHNlZ21lbnQgc3RyZWFtIHRvIHRoZSBmaXJzdCB0cmFjayB3aXRoIGFhYyBkYXRhXG5cbiAgICAgICAgcGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtID0gbmV3IGF1ZGlvU2VnbWVudFN0cmVhbShwaXBlbGluZS50cmFja3MuYXVkaW8sIG9wdGlvbnMpO1xuICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHBpcGVsaW5lLnRyaWdnZXIoJ2RhdGEnLCB7XG4gICAgICAgICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtLm9uKCdwYXJ0aWFsZG9uZScsIHBpcGVsaW5lLnRyaWdnZXIuYmluZChwaXBlbGluZSwgJ3BhcnRpYWxkb25lJykpO1xuICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0ub24oJ2RvbmUnLCBwaXBlbGluZS50cmlnZ2VyLmJpbmQocGlwZWxpbmUsICdkb25lJykpO1xuICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0ub24oJ2VuZGVkdGltZWxpbmUnLCBwaXBlbGluZS50cmlnZ2VyLmJpbmQocGlwZWxpbmUsICdlbmRlZHRpbWVsaW5lJykpO1xuICAgICAgICBwaXBlbGluZS5hdWRpb1NlZ21lbnRTdHJlYW0ub24oJ3RpbWluZ0luZm8nLCBwaXBlbGluZS50cmlnZ2VyLmJpbmQocGlwZWxpbmUsICdhdWRpb1RpbWluZ0luZm8nKSk7IC8vIFNldCB1cCB0aGUgZmluYWwgcGFydCBvZiB0aGUgYXVkaW8gcGlwZWxpbmVcblxuICAgICAgICBwaXBlbGluZS5hZHRzU3RyZWFtLnBpcGUocGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtKTtcbiAgICAgICAgcGlwZWxpbmUudHJpZ2dlcigndHJhY2tpbmZvJywge1xuICAgICAgICAgIGhhc0F1ZGlvOiAhIXBpcGVsaW5lLnRyYWNrcy5hdWRpbyxcbiAgICAgICAgICBoYXNWaWRlbzogISFwaXBlbGluZS50cmFja3MudmlkZW9cbiAgICAgICAgfSk7XG4gICAgICB9KTsgLy8gc2V0IHRoZSBwaXBlbGluZSB1cCBhcyBhIHN0cmVhbSBiZWZvcmUgYmluZGluZyB0byBnZXQgYWNjZXNzIHRvIHRoZSB0cmlnZ2VyIGZ1bmN0aW9uXG5cbiAgICAgIHBpcGVsaW5lID0gY3JlYXRlUGlwZWxpbmUocGlwZWxpbmUpO1xuICAgICAgcGlwZWxpbmUubWV0YWRhdGFTdHJlYW0ub24oJ2RhdGEnLCBwaXBlbGluZS50cmlnZ2VyLmJpbmQocGlwZWxpbmUsICdpZDNGcmFtZScpKTtcbiAgICAgIHJldHVybiBwaXBlbGluZTtcbiAgICB9O1xuXG4gICAgdmFyIHNldHVwUGlwZWxpbmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cFBpcGVsaW5lTGlzdGVuZXJzKHBpcGVsaW5lLCB0cmFuc211eGVyKSB7XG4gICAgICBwaXBlbGluZS5vbignZGF0YScsIHRyYW5zbXV4ZXIudHJpZ2dlci5iaW5kKHRyYW5zbXV4ZXIsICdkYXRhJykpO1xuICAgICAgcGlwZWxpbmUub24oJ2RvbmUnLCB0cmFuc211eGVyLnRyaWdnZXIuYmluZCh0cmFuc211eGVyLCAnZG9uZScpKTtcbiAgICAgIHBpcGVsaW5lLm9uKCdwYXJ0aWFsZG9uZScsIHRyYW5zbXV4ZXIudHJpZ2dlci5iaW5kKHRyYW5zbXV4ZXIsICdwYXJ0aWFsZG9uZScpKTtcbiAgICAgIHBpcGVsaW5lLm9uKCdlbmRlZHRpbWVsaW5lJywgdHJhbnNtdXhlci50cmlnZ2VyLmJpbmQodHJhbnNtdXhlciwgJ2VuZGVkdGltZWxpbmUnKSk7XG4gICAgICBwaXBlbGluZS5vbignYXVkaW9UaW1pbmdJbmZvJywgdHJhbnNtdXhlci50cmlnZ2VyLmJpbmQodHJhbnNtdXhlciwgJ2F1ZGlvVGltaW5nSW5mbycpKTtcbiAgICAgIHBpcGVsaW5lLm9uKCd2aWRlb1RpbWluZ0luZm8nLCB0cmFuc211eGVyLnRyaWdnZXIuYmluZCh0cmFuc211eGVyLCAndmlkZW9UaW1pbmdJbmZvJykpO1xuICAgICAgcGlwZWxpbmUub24oJ3RyYWNraW5mbycsIHRyYW5zbXV4ZXIudHJpZ2dlci5iaW5kKHRyYW5zbXV4ZXIsICd0cmFja2luZm8nKSk7XG4gICAgICBwaXBlbGluZS5vbignaWQzRnJhbWUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gYWRkIHRoaXMgdG8gZXZlcnkgc2luZ2xlIGVtaXR0ZWQgc2VnbWVudCBldmVuIHRob3VnaCBpdCdzIG9ubHkgbmVlZGVkIGZvciB0aGUgZmlyc3RcbiAgICAgICAgZXZlbnQuZGlzcGF0Y2hUeXBlID0gcGlwZWxpbmUubWV0YWRhdGFTdHJlYW0uZGlzcGF0Y2hUeXBlOyAvLyBrZWVwIG9yaWdpbmFsIHRpbWUsIGNhbiBiZSBhZGp1c3RlZCBpZiBuZWVkZWQgYXQgYSBoaWdoZXIgbGV2ZWxcblxuICAgICAgICBldmVudC5jdWVUaW1lID0gY2xvY2sudmlkZW9Uc1RvU2Vjb25kcyhldmVudC5wdHMpO1xuICAgICAgICB0cmFuc211eGVyLnRyaWdnZXIoJ2lkM0ZyYW1lJywgZXZlbnQpO1xuICAgICAgfSk7XG4gICAgICBwaXBlbGluZS5vbignY2FwdGlvbicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0cmFuc211eGVyLnRyaWdnZXIoJ2NhcHRpb24nLCBldmVudCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIFRyYW5zbXV4ZXIkMSA9IGZ1bmN0aW9uIFRyYW5zbXV4ZXIkMShvcHRpb25zKSB7XG4gICAgICB2YXIgcGlwZWxpbmUgPSBudWxsLFxuICAgICAgICAgIGhhc0ZsdXNoZWQgPSB0cnVlO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBUcmFuc211eGVyJDEucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgIG9wdGlvbnMuYmFzZU1lZGlhRGVjb2RlVGltZSA9IG9wdGlvbnMuYmFzZU1lZGlhRGVjb2RlVGltZSB8fCAwO1xuXG4gICAgICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICAgICAgaWYgKGhhc0ZsdXNoZWQpIHtcbiAgICAgICAgICB2YXIgaXNBYWMgPSBpc0xpa2VseUFhY0RhdGEkMihieXRlcyk7XG5cbiAgICAgICAgICBpZiAoaXNBYWMgJiYgKCFwaXBlbGluZSB8fCBwaXBlbGluZS50eXBlICE9PSAnYWFjJykpIHtcbiAgICAgICAgICAgIHBpcGVsaW5lID0gYWFjUGlwZWxpbmUob3B0aW9ucyk7XG4gICAgICAgICAgICBzZXR1cFBpcGVsaW5lTGlzdGVuZXJzKHBpcGVsaW5lLCB0aGlzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFpc0FhYyAmJiAoIXBpcGVsaW5lIHx8IHBpcGVsaW5lLnR5cGUgIT09ICd0cycpKSB7XG4gICAgICAgICAgICBwaXBlbGluZSA9IHRzUGlwZWxpbmUob3B0aW9ucyk7XG4gICAgICAgICAgICBzZXR1cFBpcGVsaW5lTGlzdGVuZXJzKHBpcGVsaW5lLCB0aGlzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBoYXNGbHVzaGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBwaXBlbGluZS5oZWFkT2ZQaXBlbGluZS5wdXNoKGJ5dGVzKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghcGlwZWxpbmUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBoYXNGbHVzaGVkID0gdHJ1ZTtcbiAgICAgICAgcGlwZWxpbmUuaGVhZE9mUGlwZWxpbmUuZmx1c2goKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucGFydGlhbEZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXBpcGVsaW5lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGlwZWxpbmUuaGVhZE9mUGlwZWxpbmUucGFydGlhbEZsdXNoKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmVuZFRpbWVsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXBpcGVsaW5lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGlwZWxpbmUuaGVhZE9mUGlwZWxpbmUuZW5kVGltZWxpbmUoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghcGlwZWxpbmUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwaXBlbGluZS5oZWFkT2ZQaXBlbGluZS5yZXNldCgpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRCYXNlTWVkaWFEZWNvZGVUaW1lID0gZnVuY3Rpb24gKGJhc2VNZWRpYURlY29kZVRpbWUpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmtlZXBPcmlnaW5hbFRpbWVzdGFtcHMpIHtcbiAgICAgICAgICBvcHRpb25zLmJhc2VNZWRpYURlY29kZVRpbWUgPSBiYXNlTWVkaWFEZWNvZGVUaW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwaXBlbGluZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaXBlbGluZS50cmFja3MuYXVkaW8pIHtcbiAgICAgICAgICBwaXBlbGluZS50cmFja3MuYXVkaW8udGltZWxpbmVTdGFydEluZm8uZHRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHBpcGVsaW5lLnRyYWNrcy5hdWRpby50aW1lbGluZVN0YXJ0SW5mby5wdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdHJhY2tEZWNvZGVJbmZvLmNsZWFyRHRzSW5mbyhwaXBlbGluZS50cmFja3MuYXVkaW8pO1xuXG4gICAgICAgICAgaWYgKHBpcGVsaW5lLmF1ZGlvUm9sbG92ZXIpIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLmF1ZGlvUm9sbG92ZXIuZGlzY29udGludWl0eSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaXBlbGluZS50cmFja3MudmlkZW8pIHtcbiAgICAgICAgICBpZiAocGlwZWxpbmUudmlkZW9TZWdtZW50U3RyZWFtKSB7XG4gICAgICAgICAgICBwaXBlbGluZS52aWRlb1NlZ21lbnRTdHJlYW0uZ29wQ2FjaGVfID0gW107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGlwZWxpbmUudHJhY2tzLnZpZGVvLnRpbWVsaW5lU3RhcnRJbmZvLmR0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBwaXBlbGluZS50cmFja3MudmlkZW8udGltZWxpbmVTdGFydEluZm8ucHRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHRyYWNrRGVjb2RlSW5mby5jbGVhckR0c0luZm8ocGlwZWxpbmUudHJhY2tzLnZpZGVvKTsgLy8gcGlwZWxpbmUuY2FwdGlvblN0cmVhbS5yZXNldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBpcGVsaW5lLnRpbWVzdGFtcFJvbGxvdmVyKSB7XG4gICAgICAgICAgcGlwZWxpbmUudGltZXN0YW1wUm9sbG92ZXIuZGlzY29udGludWl0eSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldFJlbXV4ID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICBvcHRpb25zLnJlbXV4ID0gdmFsO1xuXG4gICAgICAgIGlmIChwaXBlbGluZSAmJiBwaXBlbGluZS5jb2FsZXNjZVN0cmVhbSkge1xuICAgICAgICAgIHBpcGVsaW5lLmNvYWxlc2NlU3RyZWFtLnNldFJlbXV4KHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc2V0QXVkaW9BcHBlbmRTdGFydCA9IGZ1bmN0aW9uIChhdWRpb0FwcGVuZFN0YXJ0KSB7XG4gICAgICAgIGlmICghcGlwZWxpbmUgfHwgIXBpcGVsaW5lLnRyYWNrcy5hdWRpbyB8fCAhcGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGlwZWxpbmUuYXVkaW9TZWdtZW50U3RyZWFtLnNldEF1ZGlvQXBwZW5kU3RhcnQoYXVkaW9BcHBlbmRTdGFydCk7XG4gICAgICB9OyAvLyBUT0RPIEdPUCBhbGlnbm1lbnQgc3VwcG9ydFxuICAgICAgLy8gU3VwcG9ydCBtYXkgYmUgYSBiaXQgdHJpY2tpZXIgdGhhbiB3aXRoIGZ1bGwgc2VnbWVudCBhcHBlbmRzLCBhcyBHT1BzIG1heSBiZSBzcGxpdFxuICAgICAgLy8gYW5kIHByb2Nlc3NlZCBpbiBhIG1vcmUgZ3JhbnVsYXIgZmFzaGlvblxuXG5cbiAgICAgIHRoaXMuYWxpZ25Hb3BzV2l0aCA9IGZ1bmN0aW9uIChnb3BzVG9BbGlnbldpdGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgVHJhbnNtdXhlciQxLnByb3RvdHlwZSA9IG5ldyBzdHJlYW0oKTtcbiAgICB2YXIgdHJhbnNtdXhlciQxID0gVHJhbnNtdXhlciQxO1xuICAgIC8qKlxuICAgICAqIG11eC5qc1xuICAgICAqXG4gICAgICogQ29weXJpZ2h0IChjKSBCcmlnaHRjb3ZlXG4gICAgICogTGljZW5zZWQgQXBhY2hlLTIuMCBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy9tdXguanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgICAqL1xuXG4gICAgdmFyIHRvVW5zaWduZWQgPSBmdW5jdGlvbiB0b1Vuc2lnbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj4+IDA7XG4gICAgfTtcblxuICAgIHZhciB0b0hleFN0cmluZyA9IGZ1bmN0aW9uIHRvSGV4U3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gKCcwMCcgKyB2YWx1ZS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICB9O1xuXG4gICAgdmFyIGJpbiA9IHtcbiAgICAgIHRvVW5zaWduZWQ6IHRvVW5zaWduZWQsXG4gICAgICB0b0hleFN0cmluZzogdG9IZXhTdHJpbmdcbiAgICB9O1xuXG4gICAgdmFyIHBhcnNlVHlwZSQxID0gZnVuY3Rpb24gcGFyc2VUeXBlJDEoYnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbMF0pO1xuICAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmZmVyWzFdKTtcbiAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZmZlclsyXSk7XG4gICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXJbM10pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdmFyIHBhcnNlVHlwZV8xID0gcGFyc2VUeXBlJDE7XG4gICAgdmFyIHRvVW5zaWduZWQkMSA9IGJpbi50b1Vuc2lnbmVkO1xuXG4gICAgdmFyIGZpbmRCb3ggPSBmdW5jdGlvbiBmaW5kQm94KGRhdGEsIHBhdGgpIHtcbiAgICAgIHZhciByZXN1bHRzID0gW10sXG4gICAgICAgICAgaSxcbiAgICAgICAgICBzaXplLFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgZW5kLFxuICAgICAgICAgIHN1YnJlc3VsdHM7XG5cbiAgICAgIGlmICghcGF0aC5sZW5ndGgpIHtcbiAgICAgICAgLy8gc2hvcnQtY2lyY3VpdCB0aGUgc2VhcmNoIGZvciBlbXB0eSBwYXRoc1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGEuYnl0ZUxlbmd0aDspIHtcbiAgICAgICAgc2l6ZSA9IHRvVW5zaWduZWQkMShkYXRhW2ldIDw8IDI0IHwgZGF0YVtpICsgMV0gPDwgMTYgfCBkYXRhW2kgKyAyXSA8PCA4IHwgZGF0YVtpICsgM10pO1xuICAgICAgICB0eXBlID0gcGFyc2VUeXBlXzEoZGF0YS5zdWJhcnJheShpICsgNCwgaSArIDgpKTtcbiAgICAgICAgZW5kID0gc2l6ZSA+IDEgPyBpICsgc2l6ZSA6IGRhdGEuYnl0ZUxlbmd0aDtcblxuICAgICAgICBpZiAodHlwZSA9PT0gcGF0aFswXSkge1xuICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgZW5kIG9mIHRoZSBwYXRoIGFuZCB3ZSd2ZSBmb3VuZCB0aGUgYm94IHdlIHdlcmVcbiAgICAgICAgICAgIC8vIGxvb2tpbmcgZm9yXG4gICAgICAgICAgICByZXN1bHRzLnB1c2goZGF0YS5zdWJhcnJheShpICsgOCwgZW5kKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgdGhlIG5leHQgYm94IGFsb25nIHRoZSBwYXRoXG4gICAgICAgICAgICBzdWJyZXN1bHRzID0gZmluZEJveChkYXRhLnN1YmFycmF5KGkgKyA4LCBlbmQpLCBwYXRoLnNsaWNlKDEpKTtcblxuICAgICAgICAgICAgaWYgKHN1YnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdChzdWJyZXN1bHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpID0gZW5kO1xuICAgICAgfSAvLyB3ZSd2ZSBmaW5pc2hlZCBzZWFyY2hpbmcgYWxsIG9mIGRhdGFcblxuXG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuXG4gICAgdmFyIGZpbmRCb3hfMSA9IGZpbmRCb3g7XG4gICAgdmFyIHRvVW5zaWduZWQkMiA9IGJpbi50b1Vuc2lnbmVkO1xuXG4gICAgdmFyIHRmZHQgPSBmdW5jdGlvbiB0ZmR0KGRhdGEpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHZlcnNpb246IGRhdGFbMF0sXG4gICAgICAgIGZsYWdzOiBuZXcgVWludDhBcnJheShkYXRhLnN1YmFycmF5KDEsIDQpKSxcbiAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZTogdG9VbnNpZ25lZCQyKGRhdGFbNF0gPDwgMjQgfCBkYXRhWzVdIDw8IDE2IHwgZGF0YVs2XSA8PCA4IHwgZGF0YVs3XSlcbiAgICAgIH07XG5cbiAgICAgIGlmIChyZXN1bHQudmVyc2lvbiA9PT0gMSkge1xuICAgICAgICByZXN1bHQuYmFzZU1lZGlhRGVjb2RlVGltZSAqPSBNYXRoLnBvdygyLCAzMik7XG4gICAgICAgIHJlc3VsdC5iYXNlTWVkaWFEZWNvZGVUaW1lICs9IHRvVW5zaWduZWQkMihkYXRhWzhdIDw8IDI0IHwgZGF0YVs5XSA8PCAxNiB8IGRhdGFbMTBdIDw8IDggfCBkYXRhWzExXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHZhciBwYXJzZVRmZHQgPSB0ZmR0O1xuXG4gICAgdmFyIHBhcnNlU2FtcGxlRmxhZ3MgPSBmdW5jdGlvbiBwYXJzZVNhbXBsZUZsYWdzKGZsYWdzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0xlYWRpbmc6IChmbGFnc1swXSAmIDB4MGMpID4+PiAyLFxuICAgICAgICBkZXBlbmRzT246IGZsYWdzWzBdICYgMHgwMyxcbiAgICAgICAgaXNEZXBlbmRlZE9uOiAoZmxhZ3NbMV0gJiAweGMwKSA+Pj4gNixcbiAgICAgICAgaGFzUmVkdW5kYW5jeTogKGZsYWdzWzFdICYgMHgzMCkgPj4+IDQsXG4gICAgICAgIHBhZGRpbmdWYWx1ZTogKGZsYWdzWzFdICYgMHgwZSkgPj4+IDEsXG4gICAgICAgIGlzTm9uU3luY1NhbXBsZTogZmxhZ3NbMV0gJiAweDAxLFxuICAgICAgICBkZWdyYWRhdGlvblByaW9yaXR5OiBmbGFnc1syXSA8PCA4IHwgZmxhZ3NbM11cbiAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBwYXJzZVNhbXBsZUZsYWdzXzEgPSBwYXJzZVNhbXBsZUZsYWdzO1xuXG4gICAgdmFyIHRydW4kMSA9IGZ1bmN0aW9uIHRydW4kMShkYXRhKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICB2ZXJzaW9uOiBkYXRhWzBdLFxuICAgICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICAgIHNhbXBsZXM6IFtdXG4gICAgICB9LFxuICAgICAgICAgIHZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKSxcbiAgICAgICAgICAvLyBGbGFnIGludGVycHJldGF0aW9uXG4gICAgICBkYXRhT2Zmc2V0UHJlc2VudCA9IHJlc3VsdC5mbGFnc1syXSAmIDB4MDEsXG4gICAgICAgICAgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4MVxuICAgICAgZmlyc3RTYW1wbGVGbGFnc1ByZXNlbnQgPSByZXN1bHQuZmxhZ3NbMl0gJiAweDA0LFxuICAgICAgICAgIC8vIGNvbXBhcmUgd2l0aCAybmQgYnl0ZSBvZiAweDRcbiAgICAgIHNhbXBsZUR1cmF0aW9uUHJlc2VudCA9IHJlc3VsdC5mbGFnc1sxXSAmIDB4MDEsXG4gICAgICAgICAgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4MTAwXG4gICAgICBzYW1wbGVTaXplUHJlc2VudCA9IHJlc3VsdC5mbGFnc1sxXSAmIDB4MDIsXG4gICAgICAgICAgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4MjAwXG4gICAgICBzYW1wbGVGbGFnc1ByZXNlbnQgPSByZXN1bHQuZmxhZ3NbMV0gJiAweDA0LFxuICAgICAgICAgIC8vIGNvbXBhcmUgd2l0aCAybmQgYnl0ZSBvZiAweDQwMFxuICAgICAgc2FtcGxlQ29tcG9zaXRpb25UaW1lT2Zmc2V0UHJlc2VudCA9IHJlc3VsdC5mbGFnc1sxXSAmIDB4MDgsXG4gICAgICAgICAgLy8gY29tcGFyZSB3aXRoIDJuZCBieXRlIG9mIDB4ODAwXG4gICAgICBzYW1wbGVDb3VudCA9IHZpZXcuZ2V0VWludDMyKDQpLFxuICAgICAgICAgIG9mZnNldCA9IDgsXG4gICAgICAgICAgc2FtcGxlO1xuXG4gICAgICBpZiAoZGF0YU9mZnNldFByZXNlbnQpIHtcbiAgICAgICAgLy8gMzIgYml0IHNpZ25lZCBpbnRlZ2VyXG4gICAgICAgIHJlc3VsdC5kYXRhT2Zmc2V0ID0gdmlldy5nZXRJbnQzMihvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgIH0gLy8gT3ZlcnJpZGVzIHRoZSBmbGFncyBmb3IgdGhlIGZpcnN0IHNhbXBsZSBvbmx5LiBUaGUgb3JkZXIgb2ZcbiAgICAgIC8vIG9wdGlvbmFsIHZhbHVlcyB3aWxsIGJlOiBkdXJhdGlvbiwgc2l6ZSwgY29tcG9zaXRpb25UaW1lT2Zmc2V0XG5cblxuICAgICAgaWYgKGZpcnN0U2FtcGxlRmxhZ3NQcmVzZW50ICYmIHNhbXBsZUNvdW50KSB7XG4gICAgICAgIHNhbXBsZSA9IHtcbiAgICAgICAgICBmbGFnczogcGFyc2VTYW1wbGVGbGFnc18xKGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyA0KSlcbiAgICAgICAgfTtcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG5cbiAgICAgICAgaWYgKHNhbXBsZUR1cmF0aW9uUHJlc2VudCkge1xuICAgICAgICAgIHNhbXBsZS5kdXJhdGlvbiA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCk7XG4gICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2FtcGxlU2l6ZVByZXNlbnQpIHtcbiAgICAgICAgICBzYW1wbGUuc2l6ZSA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCk7XG4gICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2FtcGxlQ29tcG9zaXRpb25UaW1lT2Zmc2V0UHJlc2VudCkge1xuICAgICAgICAgIGlmIChyZXN1bHQudmVyc2lvbiA9PT0gMSkge1xuICAgICAgICAgICAgc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldCA9IHZpZXcuZ2V0SW50MzIob2Zmc2V0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldCA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQuc2FtcGxlcy5wdXNoKHNhbXBsZSk7XG4gICAgICAgIHNhbXBsZUNvdW50LS07XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChzYW1wbGVDb3VudC0tKSB7XG4gICAgICAgIHNhbXBsZSA9IHt9O1xuXG4gICAgICAgIGlmIChzYW1wbGVEdXJhdGlvblByZXNlbnQpIHtcbiAgICAgICAgICBzYW1wbGUuZHVyYXRpb24gPSB2aWV3LmdldFVpbnQzMihvZmZzZXQpO1xuICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNhbXBsZVNpemVQcmVzZW50KSB7XG4gICAgICAgICAgc2FtcGxlLnNpemUgPSB2aWV3LmdldFVpbnQzMihvZmZzZXQpO1xuICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNhbXBsZUZsYWdzUHJlc2VudCkge1xuICAgICAgICAgIHNhbXBsZS5mbGFncyA9IHBhcnNlU2FtcGxlRmxhZ3NfMShkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgNCkpO1xuICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNhbXBsZUNvbXBvc2l0aW9uVGltZU9mZnNldFByZXNlbnQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0LnZlcnNpb24gPT09IDEpIHtcbiAgICAgICAgICAgIHNhbXBsZS5jb21wb3NpdGlvblRpbWVPZmZzZXQgPSB2aWV3LmdldEludDMyKG9mZnNldCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNhbXBsZS5jb21wb3NpdGlvblRpbWVPZmZzZXQgPSB2aWV3LmdldFVpbnQzMihvZmZzZXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB2YXIgcGFyc2VUcnVuID0gdHJ1biQxO1xuXG4gICAgdmFyIHRmaGQgPSBmdW5jdGlvbiB0ZmhkKGRhdGEpIHtcbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCksXG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB2ZXJzaW9uOiBkYXRhWzBdLFxuICAgICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICAgIHRyYWNrSWQ6IHZpZXcuZ2V0VWludDMyKDQpXG4gICAgICB9LFxuICAgICAgICAgIGJhc2VEYXRhT2Zmc2V0UHJlc2VudCA9IHJlc3VsdC5mbGFnc1syXSAmIDB4MDEsXG4gICAgICAgICAgc2FtcGxlRGVzY3JpcHRpb25JbmRleFByZXNlbnQgPSByZXN1bHQuZmxhZ3NbMl0gJiAweDAyLFxuICAgICAgICAgIGRlZmF1bHRTYW1wbGVEdXJhdGlvblByZXNlbnQgPSByZXN1bHQuZmxhZ3NbMl0gJiAweDA4LFxuICAgICAgICAgIGRlZmF1bHRTYW1wbGVTaXplUHJlc2VudCA9IHJlc3VsdC5mbGFnc1syXSAmIDB4MTAsXG4gICAgICAgICAgZGVmYXVsdFNhbXBsZUZsYWdzUHJlc2VudCA9IHJlc3VsdC5mbGFnc1syXSAmIDB4MjAsXG4gICAgICAgICAgZHVyYXRpb25Jc0VtcHR5ID0gcmVzdWx0LmZsYWdzWzBdICYgMHgwMTAwMDAsXG4gICAgICAgICAgZGVmYXVsdEJhc2VJc01vb2YgPSByZXN1bHQuZmxhZ3NbMF0gJiAweDAyMDAwMCxcbiAgICAgICAgICBpO1xuICAgICAgaSA9IDg7XG5cbiAgICAgIGlmIChiYXNlRGF0YU9mZnNldFByZXNlbnQpIHtcbiAgICAgICAgaSArPSA0OyAvLyB0cnVuY2F0ZSB0b3AgNCBieXRlc1xuICAgICAgICAvLyBGSVhNRTogc2hvdWxkIHdlIHJlYWQgdGhlIGZ1bGwgNjQgYml0cz9cblxuICAgICAgICByZXN1bHQuYmFzZURhdGFPZmZzZXQgPSB2aWV3LmdldFVpbnQzMigxMik7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNhbXBsZURlc2NyaXB0aW9uSW5kZXhQcmVzZW50KSB7XG4gICAgICAgIHJlc3VsdC5zYW1wbGVEZXNjcmlwdGlvbkluZGV4ID0gdmlldy5nZXRVaW50MzIoaSk7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlZmF1bHRTYW1wbGVEdXJhdGlvblByZXNlbnQpIHtcbiAgICAgICAgcmVzdWx0LmRlZmF1bHRTYW1wbGVEdXJhdGlvbiA9IHZpZXcuZ2V0VWludDMyKGkpO1xuICAgICAgICBpICs9IDQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZWZhdWx0U2FtcGxlU2l6ZVByZXNlbnQpIHtcbiAgICAgICAgcmVzdWx0LmRlZmF1bHRTYW1wbGVTaXplID0gdmlldy5nZXRVaW50MzIoaSk7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlZmF1bHRTYW1wbGVGbGFnc1ByZXNlbnQpIHtcbiAgICAgICAgcmVzdWx0LmRlZmF1bHRTYW1wbGVGbGFncyA9IHZpZXcuZ2V0VWludDMyKGkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZHVyYXRpb25Jc0VtcHR5KSB7XG4gICAgICAgIHJlc3VsdC5kdXJhdGlvbklzRW1wdHkgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWJhc2VEYXRhT2Zmc2V0UHJlc2VudCAmJiBkZWZhdWx0QmFzZUlzTW9vZikge1xuICAgICAgICByZXN1bHQuYmFzZURhdGFPZmZzZXRJc01vb2YgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB2YXIgcGFyc2VUZmhkID0gdGZoZDtcbiAgICB2YXIgZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlcyQxID0gY2FwdGlvblBhY2tldFBhcnNlci5kaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzO1xuICAgIHZhciBDYXB0aW9uU3RyZWFtJDEgPSBjYXB0aW9uU3RyZWFtLkNhcHRpb25TdHJlYW07XG4gICAgLyoqXG4gICAgICAqIE1hcHMgYW4gb2Zmc2V0IGluIHRoZSBtZGF0IHRvIGEgc2FtcGxlIGJhc2VkIG9uIHRoZSB0aGUgc2l6ZSBvZiB0aGUgc2FtcGxlcy5cbiAgICAgICogQXNzdW1lcyB0aGF0IGBwYXJzZVNhbXBsZXNgIGhhcyBiZWVuIGNhbGxlZCBmaXJzdC5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgaW50byB0aGUgbWRhdFxuICAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBzYW1wbGVzIC0gQW4gYXJyYXkgb2Ygc2FtcGxlcywgcGFyc2VkIHVzaW5nIGBwYXJzZVNhbXBsZXNgXG4gICAgICAqIEByZXR1cm4gez9PYmplY3R9IFRoZSBtYXRjaGluZyBzYW1wbGUsIG9yIG51bGwgaWYgbm8gbWF0Y2ggd2FzIGZvdW5kLlxuICAgICAgKlxuICAgICAgKiBAc2VlIElTTy1CTUZGLTEyLzIwMTUsIFNlY3Rpb24gOC44LjhcbiAgICAgKiovXG5cbiAgICB2YXIgbWFwVG9TYW1wbGUgPSBmdW5jdGlvbiBtYXBUb1NhbXBsZShvZmZzZXQsIHNhbXBsZXMpIHtcbiAgICAgIHZhciBhcHByb3hpbWF0ZU9mZnNldCA9IG9mZnNldDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzYW1wbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzYW1wbGUgPSBzYW1wbGVzW2ldO1xuXG4gICAgICAgIGlmIChhcHByb3hpbWF0ZU9mZnNldCA8IHNhbXBsZS5zaXplKSB7XG4gICAgICAgICAgcmV0dXJuIHNhbXBsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcHJveGltYXRlT2Zmc2V0IC09IHNhbXBsZS5zaXplO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAgKiBGaW5kcyBTRUkgbmFsIHVuaXRzIGNvbnRhaW5lZCBpbiBhIE1lZGlhIERhdGEgQm94LlxuICAgICAgKiBBc3N1bWVzIHRoYXQgYHBhcnNlU2FtcGxlc2AgaGFzIGJlZW4gY2FsbGVkIGZpcnN0LlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGF2Y1N0cmVhbSAtIFRoZSBieXRlcyBvZiB0aGUgbWRhdFxuICAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBzYW1wbGVzIC0gVGhlIHNhbXBsZXMgcGFyc2VkIG91dCBieSBgcGFyc2VTYW1wbGVzYFxuICAgICAgKiBAcGFyYW0ge051bWJlcn0gdHJhY2tJZCAtIFRoZSB0cmFja0lkIG9mIHRoaXMgdmlkZW8gdHJhY2tcbiAgICAgICogQHJldHVybiB7T2JqZWN0W119IHNlaU5hbHMgLSB0aGUgcGFyc2VkIFNFSSBOQUxVcyBmb3VuZC5cbiAgICAgICogICBUaGUgY29udGVudHMgb2YgdGhlIHNlaU5hbCBzaG91bGQgbWF0Y2ggd2hhdCBpcyBleHBlY3RlZCBieVxuICAgICAgKiAgIENhcHRpb25TdHJlYW0ucHVzaCAobmFsVW5pdFR5cGUsIHNpemUsIGRhdGEsIGVzY2FwZWRSQlNQLCBwdHMsIGR0cylcbiAgICAgICpcbiAgICAgICogQHNlZSBJU08tQk1GRi0xMi8yMDE1LCBTZWN0aW9uIDguMS4xXG4gICAgICAqIEBzZWUgUmVjLiBJVFUtVCBILjI2NCwgNy4zLjIuMy4xXG4gICAgICoqL1xuXG5cbiAgICB2YXIgZmluZFNlaU5hbHMgPSBmdW5jdGlvbiBmaW5kU2VpTmFscyhhdmNTdHJlYW0sIHNhbXBsZXMsIHRyYWNrSWQpIHtcbiAgICAgIHZhciBhdmNWaWV3ID0gbmV3IERhdGFWaWV3KGF2Y1N0cmVhbS5idWZmZXIsIGF2Y1N0cmVhbS5ieXRlT2Zmc2V0LCBhdmNTdHJlYW0uYnl0ZUxlbmd0aCksXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VpTmFsLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgIGxhc3RNYXRjaGVkU2FtcGxlO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpICsgNCA8IGF2Y1N0cmVhbS5sZW5ndGg7IGkgKz0gbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IGF2Y1ZpZXcuZ2V0VWludDMyKGkpO1xuICAgICAgICBpICs9IDQ7IC8vIEJhaWwgaWYgdGhpcyBkb2Vzbid0IGFwcGVhciB0byBiZSBhbiBIMjY0IHN0cmVhbVxuXG4gICAgICAgIGlmIChsZW5ndGggPD0gMCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChhdmNTdHJlYW1baV0gJiAweDFGKSB7XG4gICAgICAgICAgY2FzZSAweDA2OlxuICAgICAgICAgICAgdmFyIGRhdGEgPSBhdmNTdHJlYW0uc3ViYXJyYXkoaSArIDEsIGkgKyAxICsgbGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBtYXRjaGluZ1NhbXBsZSA9IG1hcFRvU2FtcGxlKGksIHNhbXBsZXMpO1xuICAgICAgICAgICAgc2VpTmFsID0ge1xuICAgICAgICAgICAgICBuYWxVbml0VHlwZTogJ3NlaV9yYnNwJyxcbiAgICAgICAgICAgICAgc2l6ZTogbGVuZ3RoLFxuICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgICBlc2NhcGVkUkJTUDogZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlcyQxKGRhdGEpLFxuICAgICAgICAgICAgICB0cmFja0lkOiB0cmFja0lkXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdTYW1wbGUpIHtcbiAgICAgICAgICAgICAgc2VpTmFsLnB0cyA9IG1hdGNoaW5nU2FtcGxlLnB0cztcbiAgICAgICAgICAgICAgc2VpTmFsLmR0cyA9IG1hdGNoaW5nU2FtcGxlLmR0cztcbiAgICAgICAgICAgICAgbGFzdE1hdGNoZWRTYW1wbGUgPSBtYXRjaGluZ1NhbXBsZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdE1hdGNoZWRTYW1wbGUpIHtcbiAgICAgICAgICAgICAgLy8gSWYgYSBtYXRjaGluZyBzYW1wbGUgY2Fubm90IGJlIGZvdW5kLCB1c2UgdGhlIGxhc3RcbiAgICAgICAgICAgICAgLy8gc2FtcGxlJ3MgdmFsdWVzIGFzIHRoZXkgc2hvdWxkIGJlIGFzIGNsb3NlIGFzIHBvc3NpYmxlXG4gICAgICAgICAgICAgIHNlaU5hbC5wdHMgPSBsYXN0TWF0Y2hlZFNhbXBsZS5wdHM7XG4gICAgICAgICAgICAgIHNlaU5hbC5kdHMgPSBsYXN0TWF0Y2hlZFNhbXBsZS5kdHM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIldlJ3ZlIGVuY291bnRlcmVkIGEgbmFsIHVuaXQgd2l0aG91dCBkYXRhLiBTZWUgbXV4LmpzIzIzMy5cIik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHQucHVzaChzZWlOYWwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAgKiBQYXJzZXMgc2FtcGxlIGluZm9ybWF0aW9uIG91dCBvZiBUcmFjayBSdW4gQm94ZXMgYW5kIGNhbGN1bGF0ZXNcbiAgICAgICogdGhlIGFic29sdXRlIHByZXNlbnRhdGlvbiBhbmQgZGVjb2RlIHRpbWVzdGFtcHMgb2YgZWFjaCBzYW1wbGUuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7QXJyYXk8VWludDhBcnJheT59IHRydW5zIC0gVGhlIFRydW4gUnVuIGJveGVzIHRvIGJlIHBhcnNlZFxuICAgICAgKiBAcGFyYW0ge051bWJlcn0gYmFzZU1lZGlhRGVjb2RlVGltZSAtIGJhc2UgbWVkaWEgZGVjb2RlIHRpbWUgZnJvbSB0ZmR0XG4gICAgICAgICAgQHNlZSBJU08tQk1GRi0xMi8yMDE1LCBTZWN0aW9uIDguOC4xMlxuICAgICAgKiBAcGFyYW0ge09iamVjdH0gdGZoZCAtIFRoZSBwYXJzZWQgVHJhY2sgRnJhZ21lbnQgSGVhZGVyXG4gICAgICAqICAgQHNlZSBpbnNwZWN0LnBhcnNlVGZoZFxuICAgICAgKiBAcmV0dXJuIHtPYmplY3RbXX0gdGhlIHBhcnNlZCBzYW1wbGVzXG4gICAgICAqXG4gICAgICAqIEBzZWUgSVNPLUJNRkYtMTIvMjAxNSwgU2VjdGlvbiA4LjguOFxuICAgICAqKi9cblxuXG4gICAgdmFyIHBhcnNlU2FtcGxlcyA9IGZ1bmN0aW9uIHBhcnNlU2FtcGxlcyh0cnVucywgYmFzZU1lZGlhRGVjb2RlVGltZSwgdGZoZCkge1xuICAgICAgdmFyIGN1cnJlbnREdHMgPSBiYXNlTWVkaWFEZWNvZGVUaW1lO1xuICAgICAgdmFyIGRlZmF1bHRTYW1wbGVEdXJhdGlvbiA9IHRmaGQuZGVmYXVsdFNhbXBsZUR1cmF0aW9uIHx8IDA7XG4gICAgICB2YXIgZGVmYXVsdFNhbXBsZVNpemUgPSB0ZmhkLmRlZmF1bHRTYW1wbGVTaXplIHx8IDA7XG4gICAgICB2YXIgdHJhY2tJZCA9IHRmaGQudHJhY2tJZDtcbiAgICAgIHZhciBhbGxTYW1wbGVzID0gW107XG4gICAgICB0cnVucy5mb3JFYWNoKGZ1bmN0aW9uICh0cnVuKSB7XG4gICAgICAgIC8vIE5vdGU6IFdlIGN1cnJlbnRseSBkbyBub3QgcGFyc2UgdGhlIHNhbXBsZSB0YWJsZSBhcyB3ZWxsXG4gICAgICAgIC8vIGFzIHRoZSB0cnVuLiBJdCdzIHBvc3NpYmxlIHNvbWUgc291cmNlcyB3aWxsIHJlcXVpcmUgdGhpcy5cbiAgICAgICAgLy8gbW9vdiA+IHRyYWsgPiBtZGlhID4gbWluZiA+IHN0YmxcbiAgICAgICAgdmFyIHRyYWNrUnVuID0gcGFyc2VUcnVuKHRydW4pO1xuICAgICAgICB2YXIgc2FtcGxlcyA9IHRyYWNrUnVuLnNhbXBsZXM7XG4gICAgICAgIHNhbXBsZXMuZm9yRWFjaChmdW5jdGlvbiAoc2FtcGxlKSB7XG4gICAgICAgICAgaWYgKHNhbXBsZS5kdXJhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzYW1wbGUuZHVyYXRpb24gPSBkZWZhdWx0U2FtcGxlRHVyYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNhbXBsZS5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNhbXBsZS5zaXplID0gZGVmYXVsdFNhbXBsZVNpemU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2FtcGxlLnRyYWNrSWQgPSB0cmFja0lkO1xuICAgICAgICAgIHNhbXBsZS5kdHMgPSBjdXJyZW50RHRzO1xuXG4gICAgICAgICAgaWYgKHNhbXBsZS5jb21wb3NpdGlvblRpbWVPZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2FtcGxlLmNvbXBvc2l0aW9uVGltZU9mZnNldCA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2FtcGxlLnB0cyA9IGN1cnJlbnREdHMgKyBzYW1wbGUuY29tcG9zaXRpb25UaW1lT2Zmc2V0O1xuICAgICAgICAgIGN1cnJlbnREdHMgKz0gc2FtcGxlLmR1cmF0aW9uO1xuICAgICAgICB9KTtcbiAgICAgICAgYWxsU2FtcGxlcyA9IGFsbFNhbXBsZXMuY29uY2F0KHNhbXBsZXMpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWxsU2FtcGxlcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAgKiBQYXJzZXMgb3V0IGNhcHRpb24gbmFscyBmcm9tIGFuIEZNUDQgc2VnbWVudCdzIHZpZGVvIHRyYWNrcy5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBzZWdtZW50IC0gVGhlIGJ5dGVzIG9mIGEgc2luZ2xlIHNlZ21lbnRcbiAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHZpZGVvVHJhY2tJZCAtIFRoZSB0cmFja0lkIG9mIGEgdmlkZW8gdHJhY2sgaW4gdGhlIHNlZ21lbnRcbiAgICAgICogQHJldHVybiB7T2JqZWN0LjxOdW1iZXIsIE9iamVjdFtdPn0gQSBtYXBwaW5nIG9mIHZpZGVvIHRyYWNrSWQgdG9cbiAgICAgICogICBhIGxpc3Qgb2Ygc2VpTmFscyBmb3VuZCBpbiB0aGF0IHRyYWNrXG4gICAgICoqL1xuXG5cbiAgICB2YXIgcGFyc2VDYXB0aW9uTmFscyA9IGZ1bmN0aW9uIHBhcnNlQ2FwdGlvbk5hbHMoc2VnbWVudCwgdmlkZW9UcmFja0lkKSB7XG4gICAgICAvLyBUbyBnZXQgdGhlIHNhbXBsZXNcbiAgICAgIHZhciB0cmFmcyA9IGZpbmRCb3hfMShzZWdtZW50LCBbJ21vb2YnLCAndHJhZiddKTsgLy8gVG8gZ2V0IFNFSSBOQUwgdW5pdHNcblxuICAgICAgdmFyIG1kYXRzID0gZmluZEJveF8xKHNlZ21lbnQsIFsnbWRhdCddKTtcbiAgICAgIHZhciBjYXB0aW9uTmFscyA9IHt9O1xuICAgICAgdmFyIG1kYXRUcmFmUGFpcnMgPSBbXTsgLy8gUGFpciB1cCBlYWNoIHRyYWYgd2l0aCBhIG1kYXQgYXMgbW9vZnMgYW5kIG1kYXRzIGFyZSBpbiBwYWlyc1xuXG4gICAgICBtZGF0cy5mb3JFYWNoKGZ1bmN0aW9uIChtZGF0LCBpbmRleCkge1xuICAgICAgICB2YXIgbWF0Y2hpbmdUcmFmID0gdHJhZnNbaW5kZXhdO1xuICAgICAgICBtZGF0VHJhZlBhaXJzLnB1c2goe1xuICAgICAgICAgIG1kYXQ6IG1kYXQsXG4gICAgICAgICAgdHJhZjogbWF0Y2hpbmdUcmFmXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBtZGF0VHJhZlBhaXJzLmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgdmFyIG1kYXQgPSBwYWlyLm1kYXQ7XG4gICAgICAgIHZhciB0cmFmID0gcGFpci50cmFmO1xuICAgICAgICB2YXIgdGZoZCA9IGZpbmRCb3hfMSh0cmFmLCBbJ3RmaGQnXSk7IC8vIEV4YWN0bHkgMSB0ZmhkIHBlciB0cmFmXG5cbiAgICAgICAgdmFyIGhlYWRlckluZm8gPSBwYXJzZVRmaGQodGZoZFswXSk7XG4gICAgICAgIHZhciB0cmFja0lkID0gaGVhZGVySW5mby50cmFja0lkO1xuICAgICAgICB2YXIgdGZkdCA9IGZpbmRCb3hfMSh0cmFmLCBbJ3RmZHQnXSk7IC8vIEVpdGhlciAwIG9yIDEgdGZkdCBwZXIgdHJhZlxuXG4gICAgICAgIHZhciBiYXNlTWVkaWFEZWNvZGVUaW1lID0gdGZkdC5sZW5ndGggPiAwID8gcGFyc2VUZmR0KHRmZHRbMF0pLmJhc2VNZWRpYURlY29kZVRpbWUgOiAwO1xuICAgICAgICB2YXIgdHJ1bnMgPSBmaW5kQm94XzEodHJhZiwgWyd0cnVuJ10pO1xuICAgICAgICB2YXIgc2FtcGxlcztcbiAgICAgICAgdmFyIHNlaU5hbHM7IC8vIE9ubHkgcGFyc2UgdmlkZW8gZGF0YSBmb3IgdGhlIGNob3NlbiB2aWRlbyB0cmFja1xuXG4gICAgICAgIGlmICh2aWRlb1RyYWNrSWQgPT09IHRyYWNrSWQgJiYgdHJ1bnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNhbXBsZXMgPSBwYXJzZVNhbXBsZXModHJ1bnMsIGJhc2VNZWRpYURlY29kZVRpbWUsIGhlYWRlckluZm8pO1xuICAgICAgICAgIHNlaU5hbHMgPSBmaW5kU2VpTmFscyhtZGF0LCBzYW1wbGVzLCB0cmFja0lkKTtcblxuICAgICAgICAgIGlmICghY2FwdGlvbk5hbHNbdHJhY2tJZF0pIHtcbiAgICAgICAgICAgIGNhcHRpb25OYWxzW3RyYWNrSWRdID0gW107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2FwdGlvbk5hbHNbdHJhY2tJZF0gPSBjYXB0aW9uTmFsc1t0cmFja0lkXS5jb25jYXQoc2VpTmFscyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNhcHRpb25OYWxzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICAqIFBhcnNlcyBvdXQgaW5iYW5kIGNhcHRpb25zIGZyb20gYW4gTVA0IGNvbnRhaW5lciBhbmQgcmV0dXJuc1xuICAgICAgKiBjYXB0aW9uIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBieSBXZWJWVFQgYW5kIHRoZSBUZXh0VHJhY2sgQVBJLlxuICAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9WVFRDdWVcbiAgICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVGV4dFRyYWNrXG4gICAgICAqIEFzc3VtZXMgdGhhdCBgcHJvYmUuZ2V0VmlkZW9UcmFja0lkc2AgYW5kIGBwcm9iZS50aW1lc2NhbGVgIGhhdmUgYmVlbiBjYWxsZWQgZmlyc3RcbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBzZWdtZW50IC0gVGhlIGZtcDQgc2VnbWVudCBjb250YWluaW5nIGVtYmVkZGVkIGNhcHRpb25zXG4gICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0cmFja0lkIC0gVGhlIGlkIG9mIHRoZSB2aWRlbyB0cmFjayB0byBwYXJzZVxuICAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZXNjYWxlIC0gVGhlIHRpbWVzY2FsZSBmb3IgdGhlIHZpZGVvIHRyYWNrIGZyb20gdGhlIGluaXQgc2VnbWVudFxuICAgICAgKlxuICAgICAgKiBAcmV0dXJuIHs/T2JqZWN0W119IHBhcnNlZENhcHRpb25zIC0gQSBsaXN0IG9mIGNhcHRpb25zIG9yIG51bGwgaWYgbm8gdmlkZW8gdHJhY2tzXG4gICAgICAqIEByZXR1cm4ge051bWJlcn0gcGFyc2VkQ2FwdGlvbnNbXS5zdGFydFRpbWUgLSBUaGUgdGltZSB0byBzaG93IHRoZSBjYXB0aW9uIGluIHNlY29uZHNcbiAgICAgICogQHJldHVybiB7TnVtYmVyfSBwYXJzZWRDYXB0aW9uc1tdLmVuZFRpbWUgLSBUaGUgdGltZSB0byBzdG9wIHNob3dpbmcgdGhlIGNhcHRpb24gaW4gc2Vjb25kc1xuICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHBhcnNlZENhcHRpb25zW10udGV4dCAtIFRoZSB2aXNpYmxlIGNvbnRlbnQgb2YgdGhlIGNhcHRpb25cbiAgICAgKiovXG5cblxuICAgIHZhciBwYXJzZUVtYmVkZGVkQ2FwdGlvbnMgPSBmdW5jdGlvbiBwYXJzZUVtYmVkZGVkQ2FwdGlvbnMoc2VnbWVudCwgdHJhY2tJZCwgdGltZXNjYWxlKSB7XG4gICAgICB2YXIgc2VpTmFsczsgLy8gdGhlIElTTy1CTUZGIHNwZWMgc2F5cyB0aGF0IHRyYWNrSWQgY2FuJ3QgYmUgemVybywgYnV0IHRoZXJlJ3Mgc29tZSBicm9rZW4gY29udGVudCBvdXQgdGhlcmVcblxuICAgICAgaWYgKHRyYWNrSWQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHNlaU5hbHMgPSBwYXJzZUNhcHRpb25OYWxzKHNlZ21lbnQsIHRyYWNrSWQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2VpTmFsczogc2VpTmFsc1t0cmFja0lkXSxcbiAgICAgICAgdGltZXNjYWxlOiB0aW1lc2NhbGVcbiAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgICogQ29udmVydHMgU0VJIE5BTFVzIGludG8gY2FwdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCBieSB2aWRlby5qc1xuICAgICAqKi9cblxuXG4gICAgdmFyIENhcHRpb25QYXJzZXIgPSBmdW5jdGlvbiBDYXB0aW9uUGFyc2VyKCkge1xuICAgICAgdmFyIGlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgIHZhciBjYXB0aW9uU3RyZWFtOyAvLyBTdG9yZXMgc2VnbWVudHMgc2VlbiBiZWZvcmUgdHJhY2tJZCBhbmQgdGltZXNjYWxlIGFyZSBzZXRcblxuICAgICAgdmFyIHNlZ21lbnRDYWNoZTsgLy8gU3RvcmVzIHZpZGVvIHRyYWNrIElEIG9mIHRoZSB0cmFjayBiZWluZyBwYXJzZWRcblxuICAgICAgdmFyIHRyYWNrSWQ7IC8vIFN0b3JlcyB0aGUgdGltZXNjYWxlIG9mIHRoZSB0cmFjayBiZWluZyBwYXJzZWRcblxuICAgICAgdmFyIHRpbWVzY2FsZTsgLy8gU3RvcmVzIGNhcHRpb25zIHBhcnNlZCBzbyBmYXJcblxuICAgICAgdmFyIHBhcnNlZENhcHRpb25zOyAvLyBTdG9yZXMgd2hldGhlciB3ZSBhcmUgcmVjZWl2aW5nIHBhcnRpYWwgZGF0YSBvciBub3RcblxuICAgICAgdmFyIHBhcnNpbmdQYXJ0aWFsO1xuICAgICAgLyoqXG4gICAgICAgICogQSBtZXRob2QgdG8gaW5kaWNhdGUgd2hldGhlciBhIENhcHRpb25QYXJzZXIgaGFzIGJlZW4gaW5pdGFsaXplZFxuICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICoqL1xuXG4gICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpc0luaXRpYWxpemVkO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICAqIEluaXRpYWxpemVzIHRoZSB1bmRlcmx5aW5nIENhcHRpb25TdHJlYW0sIFNFSSBOQUwgcGFyc2luZ1xuICAgICAgICAqIGFuZCBtYW5hZ2VtZW50LCBhbmQgY2FwdGlvbiBjb2xsZWN0aW9uXG4gICAgICAgKiovXG5cblxuICAgICAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgY2FwdGlvblN0cmVhbSA9IG5ldyBDYXB0aW9uU3RyZWFtJDEoKTtcbiAgICAgICAgaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHBhcnNpbmdQYXJ0aWFsID0gb3B0aW9ucyA/IG9wdGlvbnMuaXNQYXJ0aWFsIDogZmFsc2U7IC8vIENvbGxlY3QgZGlzcGF0Y2hlZCBjYXB0aW9uc1xuXG4gICAgICAgIGNhcHRpb25TdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAvLyBDb252ZXJ0IHRvIHNlY29uZHMgaW4gdGhlIHNvdXJjZSdzIHRpbWVzY2FsZVxuICAgICAgICAgIGV2ZW50LnN0YXJ0VGltZSA9IGV2ZW50LnN0YXJ0UHRzIC8gdGltZXNjYWxlO1xuICAgICAgICAgIGV2ZW50LmVuZFRpbWUgPSBldmVudC5lbmRQdHMgLyB0aW1lc2NhbGU7XG4gICAgICAgICAgcGFyc2VkQ2FwdGlvbnMuY2FwdGlvbnMucHVzaChldmVudCk7XG4gICAgICAgICAgcGFyc2VkQ2FwdGlvbnMuY2FwdGlvblN0cmVhbXNbZXZlbnQuc3RyZWFtXSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICAqIERldGVybWluZXMgaWYgYSBuZXcgdmlkZW8gdHJhY2sgd2lsbCBiZSBzZWxlY3RlZFxuICAgICAgICAqIG9yIGlmIHRoZSB0aW1lc2NhbGUgY2hhbmdlZFxuICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICAgKiovXG5cblxuICAgICAgdGhpcy5pc05ld0luaXQgPSBmdW5jdGlvbiAodmlkZW9UcmFja0lkcywgdGltZXNjYWxlcykge1xuICAgICAgICBpZiAodmlkZW9UcmFja0lkcyAmJiB2aWRlb1RyYWNrSWRzLmxlbmd0aCA9PT0gMCB8fCB0aW1lc2NhbGVzICYmIHR5cGVvZiB0aW1lc2NhbGVzID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh0aW1lc2NhbGVzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhY2tJZCAhPT0gdmlkZW9UcmFja0lkc1swXSB8fCB0aW1lc2NhbGUgIT09IHRpbWVzY2FsZXNbdHJhY2tJZF07XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgICogUGFyc2VzIG91dCBTRUkgY2FwdGlvbnMgYW5kIGludGVyYWN0cyB3aXRoIHVuZGVybHlpbmdcbiAgICAgICAgKiBDYXB0aW9uU3RyZWFtIHRvIHJldHVybiBkaXNwYXRjaGVkIGNhcHRpb25zXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHNlZ21lbnQgLSBUaGUgZm1wNCBzZWdtZW50IGNvbnRhaW5pbmcgZW1iZWRkZWQgY2FwdGlvbnNcbiAgICAgICAgKiBAcGFyYW0ge051bWJlcltdfSB2aWRlb1RyYWNrSWRzIC0gQSBsaXN0IG9mIHZpZGVvIHRyYWNrcyBmb3VuZCBpbiB0aGUgaW5pdCBzZWdtZW50XG4gICAgICAgICogQHBhcmFtIHtPYmplY3QuPE51bWJlciwgTnVtYmVyPn0gdGltZXNjYWxlcyAtIFRoZSB0aW1lc2NhbGVzIGZvdW5kIGluIHRoZSBpbml0IHNlZ21lbnRcbiAgICAgICAgKiBAc2VlIHBhcnNlRW1iZWRkZWRDYXB0aW9uc1xuICAgICAgICAqIEBzZWUgbTJ0cy9jYXB0aW9uLXN0cmVhbS5qc1xuICAgICAgICoqL1xuXG5cbiAgICAgIHRoaXMucGFyc2UgPSBmdW5jdGlvbiAoc2VnbWVudCwgdmlkZW9UcmFja0lkcywgdGltZXNjYWxlcykge1xuICAgICAgICB2YXIgcGFyc2VkRGF0YTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCgpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7IC8vIFRoaXMgaXMgbm90IGxpa2VseSB0byBiZSBhIHZpZGVvIHNlZ21lbnRcbiAgICAgICAgfSBlbHNlIGlmICghdmlkZW9UcmFja0lkcyB8fCAhdGltZXNjYWxlcykge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNOZXdJbml0KHZpZGVvVHJhY2tJZHMsIHRpbWVzY2FsZXMpKSB7XG4gICAgICAgICAgLy8gVXNlIHRoZSBmaXJzdCB2aWRlbyB0cmFjayBvbmx5IGFzIHRoZXJlIGlzIG5vXG4gICAgICAgICAgLy8gbWVjaGFuaXNtIHRvIHN3aXRjaCB0byBvdGhlciB2aWRlbyB0cmFja3NcbiAgICAgICAgICB0cmFja0lkID0gdmlkZW9UcmFja0lkc1swXTtcbiAgICAgICAgICB0aW1lc2NhbGUgPSB0aW1lc2NhbGVzW3RyYWNrSWRdOyAvLyBJZiBhbiBpbml0IHNlZ21lbnQgaGFzIG5vdCBiZWVuIHNlZW4geWV0LCBob2xkIG9udG8gc2VnbWVudFxuICAgICAgICAgIC8vIGRhdGEgdW50aWwgd2UgaGF2ZSBvbmUuXG4gICAgICAgICAgLy8gdGhlIElTTy1CTUZGIHNwZWMgc2F5cyB0aGF0IHRyYWNrSWQgY2FuJ3QgYmUgemVybywgYnV0IHRoZXJlJ3Mgc29tZSBicm9rZW4gY29udGVudCBvdXQgdGhlcmVcbiAgICAgICAgfSBlbHNlIGlmICh0cmFja0lkID09PSBudWxsIHx8ICF0aW1lc2NhbGUpIHtcbiAgICAgICAgICBzZWdtZW50Q2FjaGUucHVzaChzZWdtZW50KTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSAvLyBOb3cgdGhhdCBhIHRpbWVzY2FsZSBhbmQgdHJhY2tJZCBpcyBzZXQsIHBhcnNlIGNhY2hlZCBzZWdtZW50c1xuXG5cbiAgICAgICAgd2hpbGUgKHNlZ21lbnRDYWNoZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGNhY2hlZFNlZ21lbnQgPSBzZWdtZW50Q2FjaGUuc2hpZnQoKTtcbiAgICAgICAgICB0aGlzLnBhcnNlKGNhY2hlZFNlZ21lbnQsIHZpZGVvVHJhY2tJZHMsIHRpbWVzY2FsZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkRGF0YSA9IHBhcnNlRW1iZWRkZWRDYXB0aW9ucyhzZWdtZW50LCB0cmFja0lkLCB0aW1lc2NhbGUpO1xuXG4gICAgICAgIGlmIChwYXJzZWREYXRhID09PSBudWxsIHx8ICFwYXJzZWREYXRhLnNlaU5hbHMpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHVzaE5hbHMocGFyc2VkRGF0YS5zZWlOYWxzKTsgLy8gRm9yY2UgdGhlIHBhcnNlZCBjYXB0aW9ucyB0byBiZSBkaXNwYXRjaGVkXG5cbiAgICAgICAgdGhpcy5mbHVzaFN0cmVhbSgpO1xuICAgICAgICByZXR1cm4gcGFyc2VkQ2FwdGlvbnM7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgICogUHVzaGVzIFNFSSBOQUxVcyBvbnRvIENhcHRpb25TdHJlYW1cbiAgICAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBuYWxzIC0gQSBsaXN0IG9mIFNFSSBuYWxzIHBhcnNlZCB1c2luZyBgcGFyc2VDYXB0aW9uTmFsc2BcbiAgICAgICAgKiBBc3N1bWVzIHRoYXQgYHBhcnNlQ2FwdGlvbk5hbHNgIGhhcyBiZWVuIGNhbGxlZCBmaXJzdFxuICAgICAgICAqIEBzZWUgbTJ0cy9jYXB0aW9uLXN0cmVhbS5qc1xuICAgICAgICAqKi9cblxuXG4gICAgICB0aGlzLnB1c2hOYWxzID0gZnVuY3Rpb24gKG5hbHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQoKSB8fCAhbmFscyB8fCBuYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbmFscy5mb3JFYWNoKGZ1bmN0aW9uIChuYWwpIHtcbiAgICAgICAgICBjYXB0aW9uU3RyZWFtLnB1c2gobmFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgICogRmx1c2hlcyB1bmRlcmx5aW5nIENhcHRpb25TdHJlYW0gdG8gZGlzcGF0Y2ggcHJvY2Vzc2VkLCBkaXNwbGF5YWJsZSBjYXB0aW9uc1xuICAgICAgICAqIEBzZWUgbTJ0cy9jYXB0aW9uLXN0cmVhbS5qc1xuICAgICAgICoqL1xuXG5cbiAgICAgIHRoaXMuZmx1c2hTdHJlYW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkKCkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGFyc2luZ1BhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0aW9uU3RyZWFtLmZsdXNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdGlvblN0cmVhbS5wYXJ0aWFsRmx1c2goKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICAqIFJlc2V0IGNhcHRpb24gYnVja2V0cyBmb3IgbmV3IGRhdGFcbiAgICAgICAqKi9cblxuXG4gICAgICB0aGlzLmNsZWFyUGFyc2VkQ2FwdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHBhcnNlZENhcHRpb25zLmNhcHRpb25zID0gW107XG4gICAgICAgIHBhcnNlZENhcHRpb25zLmNhcHRpb25TdHJlYW1zID0ge307XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgICogUmVzZXRzIHVuZGVybHlpbmcgQ2FwdGlvblN0cmVhbVxuICAgICAgICAqIEBzZWUgbTJ0cy9jYXB0aW9uLXN0cmVhbS5qc1xuICAgICAgICoqL1xuXG5cbiAgICAgIHRoaXMucmVzZXRDYXB0aW9uU3RyZWFtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCgpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjYXB0aW9uU3RyZWFtLnJlc2V0KCk7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIGNsZWFyIGFsbCBjYXB0aW9ucyBmbHVzaGVkIGZyb20gdGhlXG4gICAgICAgICogQ2FwdGlvblN0cmVhbSBhbmQgc3RpbGwgYmVpbmcgcGFyc2VkXG4gICAgICAgICogQHNlZSBtMnRzL2NhcHRpb24tc3RyZWFtLmpzXG4gICAgICAgKiovXG5cblxuICAgICAgdGhpcy5jbGVhckFsbENhcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNsZWFyUGFyc2VkQ2FwdGlvbnMoKTtcbiAgICAgICAgdGhpcy5yZXNldENhcHRpb25TdHJlYW0oKTtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAgKiBSZXNldCBjYXB0aW9uIHBhcnNlclxuICAgICAgICoqL1xuXG5cbiAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlZ21lbnRDYWNoZSA9IFtdO1xuICAgICAgICB0cmFja0lkID0gbnVsbDtcbiAgICAgICAgdGltZXNjYWxlID0gbnVsbDtcblxuICAgICAgICBpZiAoIXBhcnNlZENhcHRpb25zKSB7XG4gICAgICAgICAgcGFyc2VkQ2FwdGlvbnMgPSB7XG4gICAgICAgICAgICBjYXB0aW9uczogW10sXG4gICAgICAgICAgICAvLyBDQzEsIENDMiwgQ0MzLCBDQzRcbiAgICAgICAgICAgIGNhcHRpb25TdHJlYW1zOiB7fVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jbGVhclBhcnNlZENhcHRpb25zKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlc2V0Q2FwdGlvblN0cmVhbSgpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH07XG5cbiAgICB2YXIgY2FwdGlvblBhcnNlciA9IENhcHRpb25QYXJzZXI7XG4gICAgLyogZ2xvYmFsIHNlbGYgKi9cblxuICAgIHZhciB0eXBlRnJvbVN0cmVhbVN0cmluZyA9IGZ1bmN0aW9uIHR5cGVGcm9tU3RyZWFtU3RyaW5nKHN0cmVhbVN0cmluZykge1xuICAgICAgaWYgKHN0cmVhbVN0cmluZyA9PT0gJ0F1ZGlvU2VnbWVudFN0cmVhbScpIHtcbiAgICAgICAgcmV0dXJuICdhdWRpbyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHJlYW1TdHJpbmcgPT09ICdWaWRlb1NlZ21lbnRTdHJlYW0nID8gJ3ZpZGVvJyA6ICcnO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmUtZW1pdHMgdHJhbnNtdXhlciBldmVudHMgYnkgY29udmVydGluZyB0aGVtIGludG8gbWVzc2FnZXMgdG8gdGhlXG4gICAgICogd29ybGQgb3V0c2lkZSB0aGUgd29ya2VyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zbXV4ZXIgdGhlIHRyYW5zbXV4ZXIgdG8gd2lyZSBldmVudHMgb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG5cbiAgICB2YXIgd2lyZUZ1bGxUcmFuc211eGVyRXZlbnRzID0gZnVuY3Rpb24gd2lyZUZ1bGxUcmFuc211eGVyRXZlbnRzKHNlbGYsIHRyYW5zbXV4ZXIpIHtcbiAgICAgIHRyYW5zbXV4ZXIub24oJ2RhdGEnLCBmdW5jdGlvbiAoc2VnbWVudCkge1xuICAgICAgICAvLyB0cmFuc2ZlciBvd25lcnNoaXAgb2YgdGhlIHVuZGVybHlpbmcgQXJyYXlCdWZmZXJcbiAgICAgICAgLy8gaW5zdGVhZCBvZiBkb2luZyBhIGNvcHkgdG8gc2F2ZSBtZW1vcnlcbiAgICAgICAgLy8gQXJyYXlCdWZmZXJzIGFyZSB0cmFuc2ZlcmFibGUgYnV0IGdlbmVyaWMgVHlwZWRBcnJheXMgYXJlIG5vdFxuICAgICAgICAvLyBAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViX1dvcmtlcnNfQVBJL1VzaW5nX3dlYl93b3JrZXJzI1Bhc3NpbmdfZGF0YV9ieV90cmFuc2ZlcnJpbmdfb3duZXJzaGlwXyh0cmFuc2ZlcmFibGVfb2JqZWN0cylcbiAgICAgICAgdmFyIGluaXRBcnJheSA9IHNlZ21lbnQuaW5pdFNlZ21lbnQ7XG4gICAgICAgIHNlZ21lbnQuaW5pdFNlZ21lbnQgPSB7XG4gICAgICAgICAgZGF0YTogaW5pdEFycmF5LmJ1ZmZlcixcbiAgICAgICAgICBieXRlT2Zmc2V0OiBpbml0QXJyYXkuYnl0ZU9mZnNldCxcbiAgICAgICAgICBieXRlTGVuZ3RoOiBpbml0QXJyYXkuYnl0ZUxlbmd0aFxuICAgICAgICB9O1xuICAgICAgICB2YXIgdHlwZWRBcnJheSA9IHNlZ21lbnQuZGF0YTtcbiAgICAgICAgc2VnbWVudC5kYXRhID0gdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ2RhdGEnLFxuICAgICAgICAgIHNlZ21lbnQ6IHNlZ21lbnQsXG4gICAgICAgICAgYnl0ZU9mZnNldDogdHlwZWRBcnJheS5ieXRlT2Zmc2V0LFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IHR5cGVkQXJyYXkuYnl0ZUxlbmd0aFxuICAgICAgICB9LCBbc2VnbWVudC5kYXRhXSk7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zbXV4ZXIub24oJ2RvbmUnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICdkb25lJ1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdHJhbnNtdXhlci5vbignZ29wSW5mbycsIGZ1bmN0aW9uIChnb3BJbmZvKSB7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ2dvcEluZm8nLFxuICAgICAgICAgIGdvcEluZm86IGdvcEluZm9cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zbXV4ZXIub24oJ3ZpZGVvU2VnbWVudFRpbWluZ0luZm8nLCBmdW5jdGlvbiAodGltaW5nSW5mbykge1xuICAgICAgICB2YXIgdmlkZW9TZWdtZW50VGltaW5nSW5mbyA9IHtcbiAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgZGVjb2RlOiBjbG9ja180KHRpbWluZ0luZm8uc3RhcnQuZHRzKSxcbiAgICAgICAgICAgIHByZXNlbnRhdGlvbjogY2xvY2tfNCh0aW1pbmdJbmZvLnN0YXJ0LnB0cylcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgZGVjb2RlOiBjbG9ja180KHRpbWluZ0luZm8uZW5kLmR0cyksXG4gICAgICAgICAgICBwcmVzZW50YXRpb246IGNsb2NrXzQodGltaW5nSW5mby5lbmQucHRzKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmFzZU1lZGlhRGVjb2RlVGltZTogY2xvY2tfNCh0aW1pbmdJbmZvLmJhc2VNZWRpYURlY29kZVRpbWUpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRpbWluZ0luZm8ucHJlcGVuZGVkQ29udGVudER1cmF0aW9uKSB7XG4gICAgICAgICAgdmlkZW9TZWdtZW50VGltaW5nSW5mby5wcmVwZW5kZWRDb250ZW50RHVyYXRpb24gPSBjbG9ja180KHRpbWluZ0luZm8ucHJlcGVuZGVkQ29udGVudER1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ3ZpZGVvU2VnbWVudFRpbWluZ0luZm8nLFxuICAgICAgICAgIHZpZGVvU2VnbWVudFRpbWluZ0luZm86IHZpZGVvU2VnbWVudFRpbWluZ0luZm9cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zbXV4ZXIub24oJ2lkM0ZyYW1lJywgZnVuY3Rpb24gKGlkM0ZyYW1lKSB7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ2lkM0ZyYW1lJyxcbiAgICAgICAgICBpZDNGcmFtZTogaWQzRnJhbWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zbXV4ZXIub24oJ2NhcHRpb24nLCBmdW5jdGlvbiAoY2FwdGlvbikge1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICdjYXB0aW9uJyxcbiAgICAgICAgICBjYXB0aW9uOiBjYXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0cmFuc211eGVyLm9uKCd0cmFja2luZm8nLCBmdW5jdGlvbiAodHJhY2tJbmZvKSB7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ3RyYWNraW5mbycsXG4gICAgICAgICAgdHJhY2tJbmZvOiB0cmFja0luZm9cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zbXV4ZXIub24oJ2F1ZGlvVGltaW5nSW5mbycsIGZ1bmN0aW9uIChhdWRpb1RpbWluZ0luZm8pIHtcbiAgICAgICAgLy8gY29udmVydCB0byB2aWRlbyBUUyBzaW5jZSB3ZSBwcmlvcml0aXplIHZpZGVvIHRpbWUgb3ZlciBhdWRpb1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICdhdWRpb1RpbWluZ0luZm8nLFxuICAgICAgICAgIGF1ZGlvVGltaW5nSW5mbzoge1xuICAgICAgICAgICAgc3RhcnQ6IGNsb2NrXzQoYXVkaW9UaW1pbmdJbmZvLnN0YXJ0KSxcbiAgICAgICAgICAgIGVuZDogY2xvY2tfNChhdWRpb1RpbWluZ0luZm8uZW5kKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zbXV4ZXIub24oJ3ZpZGVvVGltaW5nSW5mbycsIGZ1bmN0aW9uICh2aWRlb1RpbWluZ0luZm8pIHtcbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgYWN0aW9uOiAndmlkZW9UaW1pbmdJbmZvJyxcbiAgICAgICAgICB2aWRlb1RpbWluZ0luZm86IHtcbiAgICAgICAgICAgIHN0YXJ0OiBjbG9ja180KHZpZGVvVGltaW5nSW5mby5zdGFydCksXG4gICAgICAgICAgICBlbmQ6IGNsb2NrXzQodmlkZW9UaW1pbmdJbmZvLmVuZClcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciB3aXJlUGFydGlhbFRyYW5zbXV4ZXJFdmVudHMgPSBmdW5jdGlvbiB3aXJlUGFydGlhbFRyYW5zbXV4ZXJFdmVudHMoc2VsZiwgdHJhbnNtdXhlcikge1xuICAgICAgdHJhbnNtdXhlci5vbignZGF0YScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyB0cmFuc2ZlciBvd25lcnNoaXAgb2YgdGhlIHVuZGVybHlpbmcgQXJyYXlCdWZmZXJcbiAgICAgICAgLy8gaW5zdGVhZCBvZiBkb2luZyBhIGNvcHkgdG8gc2F2ZSBtZW1vcnlcbiAgICAgICAgLy8gQXJyYXlCdWZmZXJzIGFyZSB0cmFuc2ZlcmFibGUgYnV0IGdlbmVyaWMgVHlwZWRBcnJheXMgYXJlIG5vdFxuICAgICAgICAvLyBAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViX1dvcmtlcnNfQVBJL1VzaW5nX3dlYl93b3JrZXJzI1Bhc3NpbmdfZGF0YV9ieV90cmFuc2ZlcnJpbmdfb3duZXJzaGlwXyh0cmFuc2ZlcmFibGVfb2JqZWN0cylcbiAgICAgICAgdmFyIGluaXRTZWdtZW50ID0ge1xuICAgICAgICAgIGRhdGE6IGV2ZW50LmRhdGEudHJhY2suaW5pdFNlZ21lbnQuYnVmZmVyLFxuICAgICAgICAgIGJ5dGVPZmZzZXQ6IGV2ZW50LmRhdGEudHJhY2suaW5pdFNlZ21lbnQuYnl0ZU9mZnNldCxcbiAgICAgICAgICBieXRlTGVuZ3RoOiBldmVudC5kYXRhLnRyYWNrLmluaXRTZWdtZW50LmJ5dGVMZW5ndGhcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGJveGVzID0ge1xuICAgICAgICAgIGRhdGE6IGV2ZW50LmRhdGEuYm94ZXMuYnVmZmVyLFxuICAgICAgICAgIGJ5dGVPZmZzZXQ6IGV2ZW50LmRhdGEuYm94ZXMuYnl0ZU9mZnNldCxcbiAgICAgICAgICBieXRlTGVuZ3RoOiBldmVudC5kYXRhLmJveGVzLmJ5dGVMZW5ndGhcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHNlZ21lbnQgPSB7XG4gICAgICAgICAgYm94ZXM6IGJveGVzLFxuICAgICAgICAgIGluaXRTZWdtZW50OiBpbml0U2VnbWVudCxcbiAgICAgICAgICB0eXBlOiBldmVudC50eXBlLFxuICAgICAgICAgIHNlcXVlbmNlOiBldmVudC5kYXRhLnNlcXVlbmNlXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBldmVudC5kYXRhLnZpZGVvRnJhbWVEdHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc2VnbWVudC52aWRlb0ZyYW1lRHRzVGltZSA9IGNsb2NrXzQoZXZlbnQuZGF0YS52aWRlb0ZyYW1lRHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnQuZGF0YS52aWRlb0ZyYW1lUHRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNlZ21lbnQudmlkZW9GcmFtZVB0c1RpbWUgPSBjbG9ja180KGV2ZW50LmRhdGEudmlkZW9GcmFtZVB0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICdkYXRhJyxcbiAgICAgICAgICBzZWdtZW50OiBzZWdtZW50XG4gICAgICAgIH0sIFtzZWdtZW50LmJveGVzLmRhdGEsIHNlZ21lbnQuaW5pdFNlZ21lbnQuZGF0YV0pO1xuICAgICAgfSk7XG4gICAgICB0cmFuc211eGVyLm9uKCdpZDNGcmFtZScsIGZ1bmN0aW9uIChpZDNGcmFtZSkge1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICdpZDNGcmFtZScsXG4gICAgICAgICAgaWQzRnJhbWU6IGlkM0ZyYW1lXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0cmFuc211eGVyLm9uKCdjYXB0aW9uJywgZnVuY3Rpb24gKGNhcHRpb24pIHtcbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgYWN0aW9uOiAnY2FwdGlvbicsXG4gICAgICAgICAgY2FwdGlvbjogY2FwdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdHJhbnNtdXhlci5vbignZG9uZScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ2RvbmUnLFxuICAgICAgICAgIHR5cGU6IHR5cGVGcm9tU3RyZWFtU3RyaW5nKGRhdGEpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0cmFuc211eGVyLm9uKCdwYXJ0aWFsZG9uZScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ3BhcnRpYWxkb25lJyxcbiAgICAgICAgICB0eXBlOiB0eXBlRnJvbVN0cmVhbVN0cmluZyhkYXRhKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdHJhbnNtdXhlci5vbignZW5kZWRzZWdtZW50JywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgYWN0aW9uOiAnZW5kZWRTZWdtZW50JyxcbiAgICAgICAgICB0eXBlOiB0eXBlRnJvbVN0cmVhbVN0cmluZyhkYXRhKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdHJhbnNtdXhlci5vbigndHJhY2tpbmZvJywgZnVuY3Rpb24gKHRyYWNrSW5mbykge1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICd0cmFja2luZm8nLFxuICAgICAgICAgIHRyYWNrSW5mbzogdHJhY2tJbmZvXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0cmFuc211eGVyLm9uKCdhdWRpb1RpbWluZ0luZm8nLCBmdW5jdGlvbiAoYXVkaW9UaW1pbmdJbmZvKSB7XG4gICAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiBmbHVzaCBpcyBjYWxsZWQgd2hlbiBub1xuICAgICAgICAvLyBhdWRpbyBoYXMgYmVlbiBwcm9jZXNzZWQuIFRoaXMgc2hvdWxkIGJlIGFuXG4gICAgICAgIC8vIHVudXN1YWwgY2FzZSwgYnV0IGlmIGl0IGRvZXMgb2NjdXIgc2hvdWxkIG5vdFxuICAgICAgICAvLyByZXN1bHQgaW4gdmFsaWQgZGF0YSBiZWluZyByZXR1cm5lZFxuICAgICAgICBpZiAoYXVkaW9UaW1pbmdJbmZvLnN0YXJ0ID09PSBudWxsKSB7XG4gICAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBhY3Rpb246ICdhdWRpb1RpbWluZ0luZm8nLFxuICAgICAgICAgICAgYXVkaW9UaW1pbmdJbmZvOiBhdWRpb1RpbWluZ0luZm9cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gY29udmVydCB0byB2aWRlbyBUUyBzaW5jZSB3ZSBwcmlvcml0aXplIHZpZGVvIHRpbWUgb3ZlciBhdWRpb1xuXG5cbiAgICAgICAgdmFyIHRpbWluZ0luZm9JblNlY29uZHMgPSB7XG4gICAgICAgICAgc3RhcnQ6IGNsb2NrXzQoYXVkaW9UaW1pbmdJbmZvLnN0YXJ0KVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChhdWRpb1RpbWluZ0luZm8uZW5kKSB7XG4gICAgICAgICAgdGltaW5nSW5mb0luU2Vjb25kcy5lbmQgPSBjbG9ja180KGF1ZGlvVGltaW5nSW5mby5lbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgYWN0aW9uOiAnYXVkaW9UaW1pbmdJbmZvJyxcbiAgICAgICAgICBhdWRpb1RpbWluZ0luZm86IHRpbWluZ0luZm9JblNlY29uZHNcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zbXV4ZXIub24oJ3ZpZGVvVGltaW5nSW5mbycsIGZ1bmN0aW9uICh2aWRlb1RpbWluZ0luZm8pIHtcbiAgICAgICAgdmFyIHRpbWluZ0luZm9JblNlY29uZHMgPSB7XG4gICAgICAgICAgc3RhcnQ6IGNsb2NrXzQodmlkZW9UaW1pbmdJbmZvLnN0YXJ0KVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh2aWRlb1RpbWluZ0luZm8uZW5kKSB7XG4gICAgICAgICAgdGltaW5nSW5mb0luU2Vjb25kcy5lbmQgPSBjbG9ja180KHZpZGVvVGltaW5nSW5mby5lbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgYWN0aW9uOiAndmlkZW9UaW1pbmdJbmZvJyxcbiAgICAgICAgICB2aWRlb1RpbWluZ0luZm86IHRpbWluZ0luZm9JblNlY29uZHNcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsbCBpbmNvbWluZyBtZXNzYWdlcyByb3V0ZSB0aHJvdWdoIHRoaXMgaGFzaC4gSWYgbm8gZnVuY3Rpb24gZXhpc3RzXG4gICAgICogdG8gaGFuZGxlIGFuIGluY29taW5nIG1lc3NhZ2UsIHRoZW4gd2UgaWdub3JlIHRoZSBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQGNsYXNzIE1lc3NhZ2VIYW5kbGVyc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHRoZSBvcHRpb25zIHRvIGluaXRpYWxpemUgd2l0aFxuICAgICAqL1xuXG5cbiAgICB2YXIgTWVzc2FnZUhhbmRsZXJzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIE1lc3NhZ2VIYW5kbGVycyhzZWxmLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHRoaXMuc2VsZiA9IHNlbGY7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBpbml0aWFsaXplIG91ciB3ZWIgd29ya2VyIGFuZCB3aXJlIGFsbCB0aGUgZXZlbnRzLlxuICAgICAgICovXG5cblxuICAgICAgdmFyIF9wcm90byA9IE1lc3NhZ2VIYW5kbGVycy5wcm90b3R5cGU7XG5cbiAgICAgIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNtdXhlcikge1xuICAgICAgICAgIHRoaXMudHJhbnNtdXhlci5kaXNwb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyYW5zbXV4ZXIgPSB0aGlzLm9wdGlvbnMuaGFuZGxlUGFydGlhbERhdGEgPyBuZXcgdHJhbnNtdXhlciQxKHRoaXMub3B0aW9ucykgOiBuZXcgdHJhbnNtdXhlcl8xKHRoaXMub3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYW5kbGVQYXJ0aWFsRGF0YSkge1xuICAgICAgICAgIHdpcmVQYXJ0aWFsVHJhbnNtdXhlckV2ZW50cyh0aGlzLnNlbGYsIHRoaXMudHJhbnNtdXhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2lyZUZ1bGxUcmFuc211eGVyRXZlbnRzKHRoaXMuc2VsZiwgdGhpcy50cmFuc211eGVyKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnB1c2hNcDRDYXB0aW9ucyA9IGZ1bmN0aW9uIHB1c2hNcDRDYXB0aW9ucyhkYXRhKSB7XG4gICAgICAgIGlmICghdGhpcy5jYXB0aW9uUGFyc2VyKSB7XG4gICAgICAgICAgdGhpcy5jYXB0aW9uUGFyc2VyID0gbmV3IGNhcHRpb25QYXJzZXIoKTtcbiAgICAgICAgICB0aGlzLmNhcHRpb25QYXJzZXIuaW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlZ21lbnQgPSBuZXcgVWludDhBcnJheShkYXRhLmRhdGEsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgdmFyIHBhcnNlZCA9IHRoaXMuY2FwdGlvblBhcnNlci5wYXJzZShzZWdtZW50LCBkYXRhLnRyYWNrSWRzLCBkYXRhLnRpbWVzY2FsZXMpO1xuICAgICAgICB0aGlzLnNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ21wNENhcHRpb25zJyxcbiAgICAgICAgICBjYXB0aW9uczogcGFyc2VkICYmIHBhcnNlZC5jYXB0aW9ucyB8fCBbXSxcbiAgICAgICAgICBkYXRhOiBzZWdtZW50LmJ1ZmZlclxuICAgICAgICB9LCBbc2VnbWVudC5idWZmZXJdKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5jbGVhckFsbE1wNENhcHRpb25zID0gZnVuY3Rpb24gY2xlYXJBbGxNcDRDYXB0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FwdGlvblBhcnNlcikge1xuICAgICAgICAgIHRoaXMuY2FwdGlvblBhcnNlci5jbGVhckFsbENhcHRpb25zKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5jbGVhclBhcnNlZE1wNENhcHRpb25zID0gZnVuY3Rpb24gY2xlYXJQYXJzZWRNcDRDYXB0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FwdGlvblBhcnNlcikge1xuICAgICAgICAgIHRoaXMuY2FwdGlvblBhcnNlci5jbGVhclBhcnNlZENhcHRpb25zKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogQWRkcyBkYXRhIChhIHRzIHNlZ21lbnQpIHRvIHRoZSBzdGFydCBvZiB0aGUgdHJhbnNtdXhlciBwaXBlbGluZSBmb3JcbiAgICAgICAqIHByb2Nlc3NpbmcuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gZGF0YSBkYXRhIHRvIHB1c2ggaW50byB0aGUgbXV4ZXJcbiAgICAgICAqL1xuICAgICAgO1xuXG4gICAgICBfcHJvdG8ucHVzaCA9IGZ1bmN0aW9uIHB1c2goZGF0YSkge1xuICAgICAgICAvLyBDYXN0IGFycmF5IGJ1ZmZlciB0byBjb3JyZWN0IHR5cGUgZm9yIHRyYW5zbXV4ZXJcbiAgICAgICAgdmFyIHNlZ21lbnQgPSBuZXcgVWludDhBcnJheShkYXRhLmRhdGEsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgdGhpcy50cmFuc211eGVyLnB1c2goc2VnbWVudCk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIFJlY3JlYXRlIHRoZSB0cmFuc211eGVyIHNvIHRoYXQgdGhlIG5leHQgc2VnbWVudCBhZGRlZCB2aWEgYHB1c2hgXG4gICAgICAgKiBzdGFydCB3aXRoIGEgZnJlc2ggdHJhbnNtdXhlci5cbiAgICAgICAqL1xuICAgICAgO1xuXG4gICAgICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgICAgdGhpcy50cmFuc211eGVyLnJlc2V0KCk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIFNldCB0aGUgdmFsdWUgdGhhdCB3aWxsIGJlIHVzZWQgYXMgdGhlIGBiYXNlTWVkaWFEZWNvZGVUaW1lYCB0aW1lIGZvciB0aGVcbiAgICAgICAqIG5leHQgc2VnbWVudCBwdXNoZWQgaW4uIFN1YnNlcXVlbnQgc2VnbWVudHMgd2lsbCBoYXZlIHRoZWlyIGBiYXNlTWVkaWFEZWNvZGVUaW1lYFxuICAgICAgICogc2V0IHJlbGF0aXZlIHRvIHRoZSBmaXJzdCBiYXNlZCBvbiB0aGUgUFRTIHZhbHVlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSB1c2VkIHRvIHNldCB0aGUgdGltZXN0YW1wIG9mZnNldCBpbiB0aGUgbXV4ZXJcbiAgICAgICAqL1xuICAgICAgO1xuXG4gICAgICBfcHJvdG8uc2V0VGltZXN0YW1wT2Zmc2V0ID0gZnVuY3Rpb24gc2V0VGltZXN0YW1wT2Zmc2V0KGRhdGEpIHtcbiAgICAgICAgdmFyIHRpbWVzdGFtcE9mZnNldCA9IGRhdGEudGltZXN0YW1wT2Zmc2V0IHx8IDA7XG4gICAgICAgIHRoaXMudHJhbnNtdXhlci5zZXRCYXNlTWVkaWFEZWNvZGVUaW1lKE1hdGgucm91bmQoY2xvY2tfMih0aW1lc3RhbXBPZmZzZXQpKSk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uc2V0QXVkaW9BcHBlbmRTdGFydCA9IGZ1bmN0aW9uIHNldEF1ZGlvQXBwZW5kU3RhcnQoZGF0YSkge1xuICAgICAgICB0aGlzLnRyYW5zbXV4ZXIuc2V0QXVkaW9BcHBlbmRTdGFydChNYXRoLmNlaWwoY2xvY2tfMihkYXRhLmFwcGVuZFN0YXJ0KSkpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnNldFJlbXV4ID0gZnVuY3Rpb24gc2V0UmVtdXgoZGF0YSkge1xuICAgICAgICB0aGlzLnRyYW5zbXV4ZXIuc2V0UmVtdXgoZGF0YS5yZW11eCk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEZvcmNlcyB0aGUgcGlwZWxpbmUgdG8gZmluaXNoIHByb2Nlc3NpbmcgdGhlIGxhc3Qgc2VnbWVudCBhbmQgZW1pdCBpdCdzXG4gICAgICAgKiByZXN1bHRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIGV2ZW50IGRhdGEsIG5vdCByZWFsbHkgdXNlZFxuICAgICAgICovXG4gICAgICA7XG5cbiAgICAgIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKGRhdGEpIHtcbiAgICAgICAgdGhpcy50cmFuc211eGVyLmZsdXNoKCk7IC8vIHRyYW5zbXV4ZWQgZG9uZSBhY3Rpb24gaXMgZmlyZWQgYWZ0ZXIgYm90aCBhdWRpby92aWRlbyBwaXBlbGluZXMgYXJlIGZsdXNoZWRcblxuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246ICdkb25lJyxcbiAgICAgICAgICB0eXBlOiAndHJhbnNtdXhlZCdcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8ucGFydGlhbEZsdXNoID0gZnVuY3Rpb24gcGFydGlhbEZsdXNoKGRhdGEpIHtcbiAgICAgICAgdGhpcy50cmFuc211eGVyLnBhcnRpYWxGbHVzaCgpOyAvLyB0cmFuc211eGVkIHBhcnRpYWxkb25lIGFjdGlvbiBpcyBmaXJlZCBhZnRlciBib3RoIGF1ZGlvL3ZpZGVvIHBpcGVsaW5lcyBhcmUgZmx1c2hlZFxuXG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ3BhcnRpYWxkb25lJyxcbiAgICAgICAgICB0eXBlOiAndHJhbnNtdXhlZCdcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZW5kVGltZWxpbmUgPSBmdW5jdGlvbiBlbmRUaW1lbGluZSgpIHtcbiAgICAgICAgdGhpcy50cmFuc211eGVyLmVuZFRpbWVsaW5lKCk7IC8vIHRyYW5zbXV4ZWQgZW5kZWR0aW1lbGluZSBhY3Rpb24gaXMgZmlyZWQgYWZ0ZXIgYm90aCBhdWRpby92aWRlbyBwaXBlbGluZXMgZW5kIHRoZWlyXG4gICAgICAgIC8vIHRpbWVsaW5lc1xuXG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFjdGlvbjogJ2VuZGVkdGltZWxpbmUnLFxuICAgICAgICAgIHR5cGU6ICd0cmFuc211eGVkJ1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5hbGlnbkdvcHNXaXRoID0gZnVuY3Rpb24gYWxpZ25Hb3BzV2l0aChkYXRhKSB7XG4gICAgICAgIHRoaXMudHJhbnNtdXhlci5hbGlnbkdvcHNXaXRoKGRhdGEuZ29wc1RvQWxpZ25XaXRoLnNsaWNlKCkpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIE1lc3NhZ2VIYW5kbGVycztcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogT3VyIHdlYiB3b3JrZXIgaW50ZXJmYWNlIHNvIHRoYXQgdGhpbmdzIGNhbiB0YWxrIHRvIG11eC5qc1xuICAgICAqIHRoYXQgd2lsbCBiZSBydW5uaW5nIGluIGEgd2ViIHdvcmtlci4gdGhlIHNjb3BlIGlzIHBhc3NlZCB0byB0aGlzIGJ5XG4gICAgICogd2Vid29ya2lmeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIHRoZSBzY29wZSBmb3IgdGhlIHdlYiB3b3JrZXJcbiAgICAgKi9cblxuXG4gICAgdmFyIFRyYW5zbXV4ZXJXb3JrZXIgPSBmdW5jdGlvbiBUcmFuc211eGVyV29ya2VyKHNlbGYpIHtcbiAgICAgIHNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5kYXRhLmFjdGlvbiA9PT0gJ2luaXQnICYmIGV2ZW50LmRhdGEub3B0aW9ucykge1xuICAgICAgICAgIHRoaXMubWVzc2FnZUhhbmRsZXJzID0gbmV3IE1lc3NhZ2VIYW5kbGVycyhzZWxmLCBldmVudC5kYXRhLm9wdGlvbnMpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5tZXNzYWdlSGFuZGxlcnMpIHtcbiAgICAgICAgICB0aGlzLm1lc3NhZ2VIYW5kbGVycyA9IG5ldyBNZXNzYWdlSGFuZGxlcnMoc2VsZik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQuZGF0YSAmJiBldmVudC5kYXRhLmFjdGlvbiAmJiBldmVudC5kYXRhLmFjdGlvbiAhPT0gJ2luaXQnKSB7XG4gICAgICAgICAgaWYgKHRoaXMubWVzc2FnZUhhbmRsZXJzW2V2ZW50LmRhdGEuYWN0aW9uXSkge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlSGFuZGxlcnNbZXZlbnQuZGF0YS5hY3Rpb25dKGV2ZW50LmRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIHRyYW5zbXV4ZXJXb3JrZXIgPSBuZXcgVHJhbnNtdXhlcldvcmtlcihzZWxmKTtcbiAgICByZXR1cm4gdHJhbnNtdXhlcldvcmtlcjtcbiAgfSgpO1xufSk7XG4vKipcbiAqIEBmaWxlIC0gY29kZWNzLmpzIC0gSGFuZGxlcyB0YXNrcyByZWdhcmRpbmcgY29kZWMgc3RyaW5ncyBzdWNoIGFzIHRyYW5zbGF0aW5nIHRoZW0gdG9cbiAqIGNvZGVjIHN0cmluZ3MsIG9yIHRyYW5zbGF0aW5nIGNvZGVjIHN0cmluZ3MgaW50byBvYmplY3RzIHRoYXQgY2FuIGJlIGV4YW1pbmVkLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIHNldCBvZiBjb2RlYyBzdHJpbmdzIHBhcnNlZCBmcm9tIHRoZSBwbGF5bGlzdCBvciB0aGUgZGVmYXVsdFxuICogY29kZWMgc3RyaW5ncyBpZiBubyBjb2RlY3Mgd2VyZSBzcGVjaWZpZWQgaW4gdGhlIHBsYXlsaXN0XG4gKlxuICogQHBhcmFtIHtQbGF5bGlzdH0gbWVkaWEgdGhlIGN1cnJlbnQgbWVkaWEgcGxheWxpc3RcbiAqIEByZXR1cm4ge09iamVjdH0gYW4gb2JqZWN0IHdpdGggdGhlIHZpZGVvIGFuZCBhdWRpbyBjb2RlY3NcbiAqL1xuXG52YXIgZ2V0Q29kZWNzID0gZnVuY3Rpb24gZ2V0Q29kZWNzKG1lZGlhKSB7XG4gIC8vIGlmIHRoZSBjb2RlY3Mgd2VyZSBleHBsaWNpdGx5IHNwZWNpZmllZCwgdXNlIHRoZW0gaW5zdGVhZCBvZiB0aGVcbiAgLy8gZGVmYXVsdHNcbiAgdmFyIG1lZGlhQXR0cmlidXRlcyA9IG1lZGlhLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKG1lZGlhQXR0cmlidXRlcy5DT0RFQ1MpIHtcbiAgICByZXR1cm4gcGFyc2VDb2RlY3MobWVkaWFBdHRyaWJ1dGVzLkNPREVDUyk7XG4gIH1cbn07XG5cbnZhciBpc01hYXQgPSBmdW5jdGlvbiBpc01hYXQobWFzdGVyLCBtZWRpYSkge1xuICB2YXIgbWVkaWFBdHRyaWJ1dGVzID0gbWVkaWEuYXR0cmlidXRlcyB8fCB7fTtcbiAgcmV0dXJuIG1hc3RlciAmJiBtYXN0ZXIubWVkaWFHcm91cHMgJiYgbWFzdGVyLm1lZGlhR3JvdXBzLkFVRElPICYmIG1lZGlhQXR0cmlidXRlcy5BVURJTyAmJiBtYXN0ZXIubWVkaWFHcm91cHMuQVVESU9bbWVkaWFBdHRyaWJ1dGVzLkFVRElPXTtcbn07XG5cbnZhciBpc011eGVkID0gZnVuY3Rpb24gaXNNdXhlZChtYXN0ZXIsIG1lZGlhKSB7XG4gIGlmICghaXNNYWF0KG1hc3RlciwgbWVkaWEpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgbWVkaWFBdHRyaWJ1dGVzID0gbWVkaWEuYXR0cmlidXRlcyB8fCB7fTtcbiAgdmFyIGF1ZGlvR3JvdXAgPSBtYXN0ZXIubWVkaWFHcm91cHMuQVVESU9bbWVkaWFBdHRyaWJ1dGVzLkFVRElPXTtcblxuICBmb3IgKHZhciBncm91cElkIGluIGF1ZGlvR3JvdXApIHtcbiAgICAvLyBJZiBhbiBhdWRpbyBncm91cCBoYXMgYSBVUkkgKHRoZSBjYXNlIGZvciBITFMsIGFzIEhMUyB3aWxsIHVzZSBleHRlcm5hbCBwbGF5bGlzdHMpLFxuICAgIC8vIG9yIHRoZXJlIGFyZSBsaXN0ZWQgcGxheWxpc3RzICh0aGUgY2FzZSBmb3IgREFTSCwgYXMgdGhlIG1hbmlmZXN0IHdpbGwgaGF2ZSBhbHJlYWR5XG4gICAgLy8gcHJvdmlkZWQgYWxsIG9mIHRoZSBkZXRhaWxzIG5lY2Vzc2FyeSB0byBnZW5lcmF0ZSB0aGUgYXVkaW8gcGxheWxpc3QsIGFzIG9wcG9zZWQgdG9cbiAgICAvLyBITFMnIGV4dGVybmFsbHkgcmVxdWVzdGVkIHBsYXlsaXN0cyksIHRoZW4gdGhlIGNvbnRlbnQgaXMgZGVtdXhlZC5cbiAgICBpZiAoIWF1ZGlvR3JvdXBbZ3JvdXBJZF0udXJpICYmICFhdWRpb0dyb3VwW2dyb3VwSWRdLnBsYXlsaXN0cykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29kZWMgc3RyaW5ncyBmb3IgYSB3b3JraW5nIGNvbmZpZ3VyYXRpb24gb2ZcbiAqIFNvdXJjZUJ1ZmZlcnMgdG8gcGxheSB2YXJpYW50IHN0cmVhbXMgaW4gYSBtYXN0ZXIgcGxheWxpc3QuIElmXG4gKiB0aGVyZSBpcyBubyBwb3NzaWJsZSB3b3JraW5nIGNvbmZpZ3VyYXRpb24sIGFuIGVtcHR5IG9iamVjdCB3aWxsIGJlXG4gKiByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0gbWFzdGVyIHtPYmplY3R9IHRoZSBtM3U4IG9iamVjdCBmb3IgdGhlIG1hc3RlciBwbGF5bGlzdFxuICogQHBhcmFtIG1lZGlhIHtPYmplY3R9IHRoZSBtM3U4IG9iamVjdCBmb3IgdGhlIHZhcmlhbnQgcGxheWxpc3RcbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIGNvZGVjIHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBjb2RlY3NGb3JQbGF5bGlzdCA9IGZ1bmN0aW9uIGNvZGVjc0ZvclBsYXlsaXN0KG1hc3RlciwgbWVkaWEpIHtcbiAgdmFyIG1lZGlhQXR0cmlidXRlcyA9IG1lZGlhLmF0dHJpYnV0ZXMgfHwge307XG4gIHZhciBjb2RlY0luZm8gPSBnZXRDb2RlY3MobWVkaWEpIHx8IHt9OyAvLyBITFMgd2l0aCBtdWx0aXBsZS1hdWRpbyB0cmFja3MgbXVzdCBhbHdheXMgZ2V0IGFuIGF1ZGlvIGNvZGVjLlxuICAvLyBQdXQgYW5vdGhlciB3YXksIHRoZXJlIGlzIG5vIHdheSB0byBoYXZlIGEgdmlkZW8tb25seSBtdWx0aXBsZS1hdWRpbyBITFMhXG5cbiAgaWYgKGlzTWFhdChtYXN0ZXIsIG1lZGlhKSAmJiAhY29kZWNJbmZvLmF1ZGlvKSB7XG4gICAgaWYgKCFpc011eGVkKG1hc3RlciwgbWVkaWEpKSB7XG4gICAgICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgY29kZWNzIHRvIGJlIHNwZWNpZmllZCBvbiB0aGUgYXVkaW8gbWVkaWEgZ3JvdXAgcGxheWxpc3QgYnV0XG4gICAgICAvLyBub3Qgb24gdGhlIHJlbmRpdGlvbiBwbGF5bGlzdC4gVGhpcyBpcyBtb3N0bHkgdGhlIGNhc2UgZm9yIERBU0gsIHdoZXJlIGF1ZGlvIGFuZFxuICAgICAgLy8gdmlkZW8gYXJlIGFsd2F5cyBzZXBhcmF0ZSAoYW5kIHNlcGFyYXRlbHkgc3BlY2lmaWVkKS5cbiAgICAgIHZhciBkZWZhdWx0Q29kZWNzID0gY29kZWNzRnJvbURlZmF1bHQobWFzdGVyLCBtZWRpYUF0dHJpYnV0ZXMuQVVESU8pO1xuXG4gICAgICBpZiAoZGVmYXVsdENvZGVjcykge1xuICAgICAgICBjb2RlY0luZm8uYXVkaW8gPSBkZWZhdWx0Q29kZWNzLmF1ZGlvO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBjb2RlY3MgPSB7fTtcblxuICBpZiAoY29kZWNJbmZvLnZpZGVvKSB7XG4gICAgY29kZWNzLnZpZGVvID0gdHJhbnNsYXRlTGVnYWN5Q29kZWMoXCJcIiArIGNvZGVjSW5mby52aWRlby50eXBlICsgY29kZWNJbmZvLnZpZGVvLmRldGFpbHMpO1xuICB9XG5cbiAgaWYgKGNvZGVjSW5mby5hdWRpbykge1xuICAgIGNvZGVjcy5hdWRpbyA9IHRyYW5zbGF0ZUxlZ2FjeUNvZGVjKFwiXCIgKyBjb2RlY0luZm8uYXVkaW8udHlwZSArIGNvZGVjSW5mby5hdWRpby5kZXRhaWxzKTtcbiAgfVxuXG4gIHJldHVybiBjb2RlY3M7XG59O1xuXG52YXIgbG9nZ2VyID0gZnVuY3Rpb24gbG9nZ2VyKHNvdXJjZSkge1xuICBpZiAodmlkZW9qcyQxLmxvZy5kZWJ1Zykge1xuICAgIHJldHVybiB2aWRlb2pzJDEubG9nLmRlYnVnLmJpbmQodmlkZW9qcyQxLCAnVkhTOicsIHNvdXJjZSArIFwiID5cIik7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge307XG59O1xuXG52YXIgbG9nRm4gPSBsb2dnZXIoJ1BsYXlsaXN0U2VsZWN0b3InKTtcblxudmFyIHJlcHJlc2VudGF0aW9uVG9TdHJpbmcgPSBmdW5jdGlvbiByZXByZXNlbnRhdGlvblRvU3RyaW5nKHJlcHJlc2VudGF0aW9uKSB7XG4gIGlmICghcmVwcmVzZW50YXRpb24gfHwgIXJlcHJlc2VudGF0aW9uLnBsYXlsaXN0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBsYXlsaXN0ID0gcmVwcmVzZW50YXRpb24ucGxheWxpc3Q7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgaWQ6IHBsYXlsaXN0LmlkLFxuICAgIGJhbmR3aWR0aDogcmVwcmVzZW50YXRpb24uYmFuZHdpZHRoLFxuICAgIHdpZHRoOiByZXByZXNlbnRhdGlvbi53aWR0aCxcbiAgICBoZWlnaHQ6IHJlcHJlc2VudGF0aW9uLmhlaWdodCxcbiAgICBjb2RlY3M6IHBsYXlsaXN0LmF0dHJpYnV0ZXMgJiYgcGxheWxpc3QuYXR0cmlidXRlcy5DT0RFQ1MgfHwgJydcbiAgfSk7XG59OyAvLyBVdGlsaXRpZXNcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBDU1MgdmFsdWUgZm9yIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgb24gYW4gZWxlbWVudFxuICogdXNpbmcgYGdldENvbXB1dGVkU3R5bGVgLiBGaXJlZm94IGhhcyBhIGxvbmctc3RhbmRpbmcgaXNzdWUgd2hlcmVcbiAqIGdldENvbXB1dGVkU3R5bGUoKSBtYXkgcmV0dXJuIG51bGwgd2hlbiBydW5uaW5nIGluIGFuIGlmcmFtZSB3aXRoXG4gKiBgZGlzcGxheTogbm9uZWAuXG4gKlxuICogQHNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIHRoZSBodG1sZWxlbWVudCB0byB3b3JrIG9uXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhlIHByb3ByZXR5IHRvIGdldCB0aGUgc3R5bGUgZm9yXG4gKi9cblxuXG52YXIgc2FmZUdldENvbXB1dGVkU3R5bGUgPSBmdW5jdGlvbiBzYWZlR2V0Q29tcHV0ZWRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgaWYgKCFlbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciByZXN1bHQgPSB3aW5kb3ckMS5nZXRDb21wdXRlZFN0eWxlKGVsKTtcblxuICBpZiAoIXJlc3VsdCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiByZXN1bHRbcHJvcGVydHldO1xufTtcbi8qKlxuICogUmVzdWFibGUgc3RhYmxlIHNvcnQgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge1BsYXlsaXN0c30gYXJyYXlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNvcnRGbiBEaWZmZXJlbnQgY29tcGFyYXRvcnNcbiAqIEBmdW5jdGlvbiBzdGFibGVTb3J0XG4gKi9cblxuXG52YXIgc3RhYmxlU29ydCA9IGZ1bmN0aW9uIHN0YWJsZVNvcnQoYXJyYXksIHNvcnRGbikge1xuICB2YXIgbmV3QXJyYXkgPSBhcnJheS5zbGljZSgpO1xuICBhcnJheS5zb3J0KGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgIHZhciBjbXAgPSBzb3J0Rm4obGVmdCwgcmlnaHQpO1xuXG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG5ld0FycmF5LmluZGV4T2YobGVmdCkgLSBuZXdBcnJheS5pbmRleE9mKHJpZ2h0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY21wO1xuICB9KTtcbn07XG4vKipcbiAqIEEgY29tcGFyYXRvciBmdW5jdGlvbiB0byBzb3J0IHR3byBwbGF5bGlzdCBvYmplY3QgYnkgYmFuZHdpZHRoLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBsZWZ0IGEgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gcmlnaHQgYSBtZWRpYSBwbGF5bGlzdCBvYmplY3RcbiAqIEByZXR1cm4ge251bWJlcn0gR3JlYXRlciB0aGFuIHplcm8gaWYgdGhlIGJhbmR3aWR0aCBhdHRyaWJ1dGUgb2ZcbiAqIGxlZnQgaXMgZ3JlYXRlciB0aGFuIHRoZSBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZSBvZiByaWdodC4gTGVzc1xuICogdGhhbiB6ZXJvIGlmIHRoZSBiYW5kd2lkdGggb2YgcmlnaHQgaXMgZ3JlYXRlciB0aGFuIGxlZnQgYW5kXG4gKiBleGFjdGx5IHplcm8gaWYgdGhlIHR3byBhcmUgZXF1YWwuXG4gKi9cblxuXG52YXIgY29tcGFyZVBsYXlsaXN0QmFuZHdpZHRoID0gZnVuY3Rpb24gY29tcGFyZVBsYXlsaXN0QmFuZHdpZHRoKGxlZnQsIHJpZ2h0KSB7XG4gIHZhciBsZWZ0QmFuZHdpZHRoO1xuICB2YXIgcmlnaHRCYW5kd2lkdGg7XG5cbiAgaWYgKGxlZnQuYXR0cmlidXRlcy5CQU5EV0lEVEgpIHtcbiAgICBsZWZ0QmFuZHdpZHRoID0gbGVmdC5hdHRyaWJ1dGVzLkJBTkRXSURUSDtcbiAgfVxuXG4gIGxlZnRCYW5kd2lkdGggPSBsZWZ0QmFuZHdpZHRoIHx8IHdpbmRvdyQxLk51bWJlci5NQVhfVkFMVUU7XG5cbiAgaWYgKHJpZ2h0LmF0dHJpYnV0ZXMuQkFORFdJRFRIKSB7XG4gICAgcmlnaHRCYW5kd2lkdGggPSByaWdodC5hdHRyaWJ1dGVzLkJBTkRXSURUSDtcbiAgfVxuXG4gIHJpZ2h0QmFuZHdpZHRoID0gcmlnaHRCYW5kd2lkdGggfHwgd2luZG93JDEuTnVtYmVyLk1BWF9WQUxVRTtcbiAgcmV0dXJuIGxlZnRCYW5kd2lkdGggLSByaWdodEJhbmR3aWR0aDtcbn07XG4vKipcbiAqIEEgY29tcGFyYXRvciBmdW5jdGlvbiB0byBzb3J0IHR3byBwbGF5bGlzdCBvYmplY3QgYnkgcmVzb2x1dGlvbiAod2lkdGgpLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBsZWZ0IGEgbWVkaWEgcGxheWxpc3Qgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gcmlnaHQgYSBtZWRpYSBwbGF5bGlzdCBvYmplY3RcbiAqIEByZXR1cm4ge251bWJlcn0gR3JlYXRlciB0aGFuIHplcm8gaWYgdGhlIHJlc29sdXRpb24ud2lkdGggYXR0cmlidXRlIG9mXG4gKiBsZWZ0IGlzIGdyZWF0ZXIgdGhhbiB0aGUgY29ycmVzcG9uZGluZyBhdHRyaWJ1dGUgb2YgcmlnaHQuIExlc3NcbiAqIHRoYW4gemVybyBpZiB0aGUgcmVzb2x1dGlvbi53aWR0aCBvZiByaWdodCBpcyBncmVhdGVyIHRoYW4gbGVmdCBhbmRcbiAqIGV4YWN0bHkgemVybyBpZiB0aGUgdHdvIGFyZSBlcXVhbC5cbiAqL1xuXG5cbnZhciBjb21wYXJlUGxheWxpc3RSZXNvbHV0aW9uID0gZnVuY3Rpb24gY29tcGFyZVBsYXlsaXN0UmVzb2x1dGlvbihsZWZ0LCByaWdodCkge1xuICB2YXIgbGVmdFdpZHRoO1xuICB2YXIgcmlnaHRXaWR0aDtcblxuICBpZiAobGVmdC5hdHRyaWJ1dGVzLlJFU09MVVRJT04gJiYgbGVmdC5hdHRyaWJ1dGVzLlJFU09MVVRJT04ud2lkdGgpIHtcbiAgICBsZWZ0V2lkdGggPSBsZWZ0LmF0dHJpYnV0ZXMuUkVTT0xVVElPTi53aWR0aDtcbiAgfVxuXG4gIGxlZnRXaWR0aCA9IGxlZnRXaWR0aCB8fCB3aW5kb3ckMS5OdW1iZXIuTUFYX1ZBTFVFO1xuXG4gIGlmIChyaWdodC5hdHRyaWJ1dGVzLlJFU09MVVRJT04gJiYgcmlnaHQuYXR0cmlidXRlcy5SRVNPTFVUSU9OLndpZHRoKSB7XG4gICAgcmlnaHRXaWR0aCA9IHJpZ2h0LmF0dHJpYnV0ZXMuUkVTT0xVVElPTi53aWR0aDtcbiAgfVxuXG4gIHJpZ2h0V2lkdGggPSByaWdodFdpZHRoIHx8IHdpbmRvdyQxLk51bWJlci5NQVhfVkFMVUU7IC8vIE5PVEUgLSBGYWxsYmFjayB0byBiYW5kd2lkdGggc29ydCBhcyBhcHByb3ByaWF0ZSBpbiBjYXNlcyB3aGVyZSBtdWx0aXBsZSByZW5kaXRpb25zXG4gIC8vIGhhdmUgdGhlIHNhbWUgbWVkaWEgZGltZW5zaW9ucy8gcmVzb2x1dGlvblxuXG4gIGlmIChsZWZ0V2lkdGggPT09IHJpZ2h0V2lkdGggJiYgbGVmdC5hdHRyaWJ1dGVzLkJBTkRXSURUSCAmJiByaWdodC5hdHRyaWJ1dGVzLkJBTkRXSURUSCkge1xuICAgIHJldHVybiBsZWZ0LmF0dHJpYnV0ZXMuQkFORFdJRFRIIC0gcmlnaHQuYXR0cmlidXRlcy5CQU5EV0lEVEg7XG4gIH1cblxuICByZXR1cm4gbGVmdFdpZHRoIC0gcmlnaHRXaWR0aDtcbn07XG4vKipcbiAqIENob29zZXMgdGhlIGFwcHJvcHJpYXRlIG1lZGlhIHBsYXlsaXN0IGJhc2VkIG9uIGJhbmR3aWR0aCBhbmQgcGxheWVyIHNpemVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWFzdGVyXG4gKiAgICAgICAgT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXN0ZXIgbWFuaWZlc3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBwbGF5ZXJCYW5kd2lkdGhcbiAqICAgICAgICBDdXJyZW50IGNhbGN1bGF0ZWQgYmFuZHdpZHRoIG9mIHRoZSBwbGF5ZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwbGF5ZXJXaWR0aFxuICogICAgICAgIEN1cnJlbnQgd2lkdGggb2YgdGhlIHBsYXllciBlbGVtZW50IChzaG91bGQgYWNjb3VudCBmb3IgdGhlIGRldmljZSBwaXhlbCByYXRpbylcbiAqIEBwYXJhbSB7bnVtYmVyfSBwbGF5ZXJIZWlnaHRcbiAqICAgICAgICBDdXJyZW50IGhlaWdodCBvZiB0aGUgcGxheWVyIGVsZW1lbnQgKHNob3VsZCBhY2NvdW50IGZvciB0aGUgZGV2aWNlIHBpeGVsIHJhdGlvKVxuICogQHBhcmFtIHtib29sZWFufSBsaW1pdFJlbmRpdGlvbkJ5UGxheWVyRGltZW5zaW9uc1xuICogICAgICAgIFRydWUgaWYgdGhlIHBsYXllciB3aWR0aCBhbmQgaGVpZ2h0IHNob3VsZCBiZSB1c2VkIGR1cmluZyB0aGUgc2VsZWN0aW9uLCBmYWxzZSBvdGhlcndpc2VcbiAqIEByZXR1cm4ge1BsYXlsaXN0fSB0aGUgaGlnaGVzdCBiaXRyYXRlIHBsYXlsaXN0IGxlc3MgdGhhbiB0aGVcbiAqIGN1cnJlbnRseSBkZXRlY3RlZCBiYW5kd2lkdGgsIGFjY291bnRpbmcgZm9yIHNvbWUgYW1vdW50IG9mXG4gKiBiYW5kd2lkdGggdmFyaWFuY2VcbiAqL1xuXG5cbnZhciBzaW1wbGVTZWxlY3RvciA9IGZ1bmN0aW9uIHNpbXBsZVNlbGVjdG9yKG1hc3RlciwgcGxheWVyQmFuZHdpZHRoLCBwbGF5ZXJXaWR0aCwgcGxheWVySGVpZ2h0LCBsaW1pdFJlbmRpdGlvbkJ5UGxheWVyRGltZW5zaW9ucykge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBiYW5kd2lkdGg6IHBsYXllckJhbmR3aWR0aCxcbiAgICB3aWR0aDogcGxheWVyV2lkdGgsXG4gICAgaGVpZ2h0OiBwbGF5ZXJIZWlnaHQsXG4gICAgbGltaXRSZW5kaXRpb25CeVBsYXllckRpbWVuc2lvbnM6IGxpbWl0UmVuZGl0aW9uQnlQbGF5ZXJEaW1lbnNpb25zXG4gIH07IC8vIGNvbnZlcnQgdGhlIHBsYXlsaXN0cyB0byBhbiBpbnRlcm1lZGlhcnkgcmVwcmVzZW50YXRpb24gdG8gbWFrZSBjb21wYXJpc29ucyBlYXNpZXJcblxuICB2YXIgc29ydGVkUGxheWxpc3RSZXBzID0gbWFzdGVyLnBsYXlsaXN0cy5tYXAoZnVuY3Rpb24gKHBsYXlsaXN0KSB7XG4gICAgdmFyIGJhbmR3aWR0aDtcbiAgICB2YXIgd2lkdGggPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLlJFU09MVVRJT04gJiYgcGxheWxpc3QuYXR0cmlidXRlcy5SRVNPTFVUSU9OLndpZHRoO1xuICAgIHZhciBoZWlnaHQgPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLlJFU09MVVRJT04gJiYgcGxheWxpc3QuYXR0cmlidXRlcy5SRVNPTFVUSU9OLmhlaWdodDtcbiAgICBiYW5kd2lkdGggPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLkJBTkRXSURUSDtcbiAgICBiYW5kd2lkdGggPSBiYW5kd2lkdGggfHwgd2luZG93JDEuTnVtYmVyLk1BWF9WQUxVRTtcbiAgICByZXR1cm4ge1xuICAgICAgYmFuZHdpZHRoOiBiYW5kd2lkdGgsXG4gICAgICB3aWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIHBsYXlsaXN0OiBwbGF5bGlzdFxuICAgIH07XG4gIH0pO1xuICBzdGFibGVTb3J0KHNvcnRlZFBsYXlsaXN0UmVwcywgZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7XG4gICAgcmV0dXJuIGxlZnQuYmFuZHdpZHRoIC0gcmlnaHQuYmFuZHdpZHRoO1xuICB9KTsgLy8gZmlsdGVyIG91dCBhbnkgcGxheWxpc3RzIHRoYXQgaGF2ZSBiZWVuIGV4Y2x1ZGVkIGR1ZSB0b1xuICAvLyBpbmNvbXBhdGlibGUgY29uZmlndXJhdGlvbnNcblxuICBzb3J0ZWRQbGF5bGlzdFJlcHMgPSBzb3J0ZWRQbGF5bGlzdFJlcHMuZmlsdGVyKGZ1bmN0aW9uIChyZXApIHtcbiAgICByZXR1cm4gIVBsYXlsaXN0LmlzSW5jb21wYXRpYmxlKHJlcC5wbGF5bGlzdCk7XG4gIH0pOyAvLyBmaWx0ZXIgb3V0IGFueSBwbGF5bGlzdHMgdGhhdCBoYXZlIGJlZW4gZGlzYWJsZWQgbWFudWFsbHkgdGhyb3VnaCB0aGUgcmVwcmVzZW50YXRpb25zXG4gIC8vIGFwaSBvciBibGFja2xpc3RlZCB0ZW1wb3JhcmlseSBkdWUgdG8gcGxheWJhY2sgZXJyb3JzLlxuXG4gIHZhciBlbmFibGVkUGxheWxpc3RSZXBzID0gc29ydGVkUGxheWxpc3RSZXBzLmZpbHRlcihmdW5jdGlvbiAocmVwKSB7XG4gICAgcmV0dXJuIFBsYXlsaXN0LmlzRW5hYmxlZChyZXAucGxheWxpc3QpO1xuICB9KTtcblxuICBpZiAoIWVuYWJsZWRQbGF5bGlzdFJlcHMubGVuZ3RoKSB7XG4gICAgLy8gaWYgdGhlcmUgYXJlIG5vIGVuYWJsZWQgcGxheWxpc3RzLCB0aGVuIHRoZXkgaGF2ZSBhbGwgYmVlbiBibGFja2xpc3RlZCBvciBkaXNhYmxlZFxuICAgIC8vIGJ5IHRoZSB1c2VyIHRocm91Z2ggdGhlIHJlcHJlc2VudGF0aW9ucyBhcGkuIEluIHRoaXMgY2FzZSwgaWdub3JlIGJsYWNrbGlzdGluZyBhbmRcbiAgICAvLyBmYWxsYmFjayB0byB3aGF0IHRoZSB1c2VyIHdhbnRzIGJ5IHVzaW5nIHBsYXlsaXN0cyB0aGUgdXNlciBoYXMgbm90IGRpc2FibGVkLlxuICAgIGVuYWJsZWRQbGF5bGlzdFJlcHMgPSBzb3J0ZWRQbGF5bGlzdFJlcHMuZmlsdGVyKGZ1bmN0aW9uIChyZXApIHtcbiAgICAgIHJldHVybiAhUGxheWxpc3QuaXNEaXNhYmxlZChyZXAucGxheWxpc3QpO1xuICAgIH0pO1xuICB9IC8vIGZpbHRlciBvdXQgYW55IHZhcmlhbnQgdGhhdCBoYXMgZ3JlYXRlciBlZmZlY3RpdmUgYml0cmF0ZVxuICAvLyB0aGFuIHRoZSBjdXJyZW50IGVzdGltYXRlZCBiYW5kd2lkdGhcblxuXG4gIHZhciBiYW5kd2lkdGhQbGF5bGlzdFJlcHMgPSBlbmFibGVkUGxheWxpc3RSZXBzLmZpbHRlcihmdW5jdGlvbiAocmVwKSB7XG4gICAgcmV0dXJuIHJlcC5iYW5kd2lkdGggKiBDb25maWcuQkFORFdJRFRIX1ZBUklBTkNFIDwgcGxheWVyQmFuZHdpZHRoO1xuICB9KTtcbiAgdmFyIGhpZ2hlc3RSZW1haW5pbmdCYW5kd2lkdGhSZXAgPSBiYW5kd2lkdGhQbGF5bGlzdFJlcHNbYmFuZHdpZHRoUGxheWxpc3RSZXBzLmxlbmd0aCAtIDFdOyAvLyBnZXQgYWxsIG9mIHRoZSByZW5kaXRpb25zIHdpdGggdGhlIHNhbWUgKGhpZ2hlc3QpIGJhbmR3aWR0aFxuICAvLyBhbmQgdGhlbiB0YWtpbmcgdGhlIHZlcnkgZmlyc3QgZWxlbWVudFxuXG4gIHZhciBiYW5kd2lkdGhCZXN0UmVwID0gYmFuZHdpZHRoUGxheWxpc3RSZXBzLmZpbHRlcihmdW5jdGlvbiAocmVwKSB7XG4gICAgcmV0dXJuIHJlcC5iYW5kd2lkdGggPT09IGhpZ2hlc3RSZW1haW5pbmdCYW5kd2lkdGhSZXAuYmFuZHdpZHRoO1xuICB9KVswXTsgLy8gaWYgd2UncmUgbm90IGdvaW5nIHRvIGxpbWl0IHJlbmRpdGlvbnMgYnkgcGxheWVyIHNpemUsIG1ha2UgYW4gZWFybHkgZGVjaXNpb24uXG5cbiAgaWYgKGxpbWl0UmVuZGl0aW9uQnlQbGF5ZXJEaW1lbnNpb25zID09PSBmYWxzZSkge1xuICAgIHZhciBfY2hvc2VuUmVwID0gYmFuZHdpZHRoQmVzdFJlcCB8fCBlbmFibGVkUGxheWxpc3RSZXBzWzBdIHx8IHNvcnRlZFBsYXlsaXN0UmVwc1swXTtcblxuICAgIGlmIChfY2hvc2VuUmVwICYmIF9jaG9zZW5SZXAucGxheWxpc3QpIHtcbiAgICAgIHZhciB0eXBlID0gJ3NvcnRlZFBsYXlsaXN0UmVwcyc7XG5cbiAgICAgIGlmIChiYW5kd2lkdGhCZXN0UmVwKSB7XG4gICAgICAgIHR5cGUgPSAnYmFuZHdpZHRoQmVzdFJlcCc7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmFibGVkUGxheWxpc3RSZXBzWzBdKSB7XG4gICAgICAgIHR5cGUgPSAnZW5hYmxlZFBsYXlsaXN0UmVwcyc7XG4gICAgICB9XG5cbiAgICAgIGxvZ0ZuKFwiY2hvb3NpbmcgXCIgKyByZXByZXNlbnRhdGlvblRvU3RyaW5nKF9jaG9zZW5SZXApICsgXCIgdXNpbmcgXCIgKyB0eXBlICsgXCIgd2l0aCBvcHRpb25zXCIsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIF9jaG9zZW5SZXAucGxheWxpc3Q7XG4gICAgfVxuXG4gICAgbG9nRm4oJ2NvdWxkIG5vdCBjaG9vc2UgYSBwbGF5bGlzdCB3aXRoIG9wdGlvbnMnLCBvcHRpb25zKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBmaWx0ZXIgb3V0IHBsYXlsaXN0cyB3aXRob3V0IHJlc29sdXRpb24gaW5mb3JtYXRpb25cblxuXG4gIHZhciBoYXZlUmVzb2x1dGlvbiA9IGJhbmR3aWR0aFBsYXlsaXN0UmVwcy5maWx0ZXIoZnVuY3Rpb24gKHJlcCkge1xuICAgIHJldHVybiByZXAud2lkdGggJiYgcmVwLmhlaWdodDtcbiAgfSk7IC8vIHNvcnQgdmFyaWFudHMgYnkgcmVzb2x1dGlvblxuXG4gIHN0YWJsZVNvcnQoaGF2ZVJlc29sdXRpb24sIGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBsZWZ0LndpZHRoIC0gcmlnaHQud2lkdGg7XG4gIH0pOyAvLyBpZiB3ZSBoYXZlIHRoZSBleGFjdCByZXNvbHV0aW9uIGFzIHRoZSBwbGF5ZXIgdXNlIGl0XG5cbiAgdmFyIHJlc29sdXRpb25CZXN0UmVwTGlzdCA9IGhhdmVSZXNvbHV0aW9uLmZpbHRlcihmdW5jdGlvbiAocmVwKSB7XG4gICAgcmV0dXJuIHJlcC53aWR0aCA9PT0gcGxheWVyV2lkdGggJiYgcmVwLmhlaWdodCA9PT0gcGxheWVySGVpZ2h0O1xuICB9KTtcbiAgaGlnaGVzdFJlbWFpbmluZ0JhbmR3aWR0aFJlcCA9IHJlc29sdXRpb25CZXN0UmVwTGlzdFtyZXNvbHV0aW9uQmVzdFJlcExpc3QubGVuZ3RoIC0gMV07IC8vIGVuc3VyZSB0aGF0IHdlIHBpY2sgdGhlIGhpZ2hlc3QgYmFuZHdpZHRoIHZhcmlhbnQgdGhhdCBoYXZlIGV4YWN0IHJlc29sdXRpb25cblxuICB2YXIgcmVzb2x1dGlvbkJlc3RSZXAgPSByZXNvbHV0aW9uQmVzdFJlcExpc3QuZmlsdGVyKGZ1bmN0aW9uIChyZXApIHtcbiAgICByZXR1cm4gcmVwLmJhbmR3aWR0aCA9PT0gaGlnaGVzdFJlbWFpbmluZ0JhbmR3aWR0aFJlcC5iYW5kd2lkdGg7XG4gIH0pWzBdO1xuICB2YXIgcmVzb2x1dGlvblBsdXNPbmVMaXN0O1xuICB2YXIgcmVzb2x1dGlvblBsdXNPbmVTbWFsbGVzdDtcbiAgdmFyIHJlc29sdXRpb25QbHVzT25lUmVwOyAvLyBmaW5kIHRoZSBzbWFsbGVzdCB2YXJpYW50IHRoYXQgaXMgbGFyZ2VyIHRoYW4gdGhlIHBsYXllclxuICAvLyBpZiB0aGVyZSBpcyBubyBtYXRjaCBvZiBleGFjdCByZXNvbHV0aW9uXG5cbiAgaWYgKCFyZXNvbHV0aW9uQmVzdFJlcCkge1xuICAgIHJlc29sdXRpb25QbHVzT25lTGlzdCA9IGhhdmVSZXNvbHV0aW9uLmZpbHRlcihmdW5jdGlvbiAocmVwKSB7XG4gICAgICByZXR1cm4gcmVwLndpZHRoID4gcGxheWVyV2lkdGggfHwgcmVwLmhlaWdodCA+IHBsYXllckhlaWdodDtcbiAgICB9KTsgLy8gZmluZCBhbGwgdGhlIHZhcmlhbnRzIGhhdmUgdGhlIHNhbWUgc21hbGxlc3QgcmVzb2x1dGlvblxuXG4gICAgcmVzb2x1dGlvblBsdXNPbmVTbWFsbGVzdCA9IHJlc29sdXRpb25QbHVzT25lTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHJlcCkge1xuICAgICAgcmV0dXJuIHJlcC53aWR0aCA9PT0gcmVzb2x1dGlvblBsdXNPbmVMaXN0WzBdLndpZHRoICYmIHJlcC5oZWlnaHQgPT09IHJlc29sdXRpb25QbHVzT25lTGlzdFswXS5oZWlnaHQ7XG4gICAgfSk7IC8vIGVuc3VyZSB0aGF0IHdlIGFsc28gcGljayB0aGUgaGlnaGVzdCBiYW5kd2lkdGggdmFyaWFudCB0aGF0XG4gICAgLy8gaXMganVzdC1sYXJnZXItdGhhbiB0aGUgdmlkZW8gcGxheWVyXG5cbiAgICBoaWdoZXN0UmVtYWluaW5nQmFuZHdpZHRoUmVwID0gcmVzb2x1dGlvblBsdXNPbmVTbWFsbGVzdFtyZXNvbHV0aW9uUGx1c09uZVNtYWxsZXN0Lmxlbmd0aCAtIDFdO1xuICAgIHJlc29sdXRpb25QbHVzT25lUmVwID0gcmVzb2x1dGlvblBsdXNPbmVTbWFsbGVzdC5maWx0ZXIoZnVuY3Rpb24gKHJlcCkge1xuICAgICAgcmV0dXJuIHJlcC5iYW5kd2lkdGggPT09IGhpZ2hlc3RSZW1haW5pbmdCYW5kd2lkdGhSZXAuYmFuZHdpZHRoO1xuICAgIH0pWzBdO1xuICB9IC8vIGZhbGxiYWNrIGNoYWluIG9mIHZhcmlhbnRzXG5cblxuICB2YXIgY2hvc2VuUmVwID0gcmVzb2x1dGlvblBsdXNPbmVSZXAgfHwgcmVzb2x1dGlvbkJlc3RSZXAgfHwgYmFuZHdpZHRoQmVzdFJlcCB8fCBlbmFibGVkUGxheWxpc3RSZXBzWzBdIHx8IHNvcnRlZFBsYXlsaXN0UmVwc1swXTtcblxuICBpZiAoY2hvc2VuUmVwICYmIGNob3NlblJlcC5wbGF5bGlzdCkge1xuICAgIHZhciBfdHlwZSA9ICdzb3J0ZWRQbGF5bGlzdFJlcHMnO1xuXG4gICAgaWYgKHJlc29sdXRpb25QbHVzT25lUmVwKSB7XG4gICAgICBfdHlwZSA9ICdyZXNvbHV0aW9uUGx1c09uZVJlcCc7XG4gICAgfSBlbHNlIGlmIChyZXNvbHV0aW9uQmVzdFJlcCkge1xuICAgICAgX3R5cGUgPSAncmVzb2x1dGlvbkJlc3RSZXAnO1xuICAgIH0gZWxzZSBpZiAoYmFuZHdpZHRoQmVzdFJlcCkge1xuICAgICAgX3R5cGUgPSAnYmFuZHdpZHRoQmVzdFJlcCc7XG4gICAgfSBlbHNlIGlmIChlbmFibGVkUGxheWxpc3RSZXBzWzBdKSB7XG4gICAgICBfdHlwZSA9ICdlbmFibGVkUGxheWxpc3RSZXBzJztcbiAgICB9XG5cbiAgICBsb2dGbihcImNob29zaW5nIFwiICsgcmVwcmVzZW50YXRpb25Ub1N0cmluZyhjaG9zZW5SZXApICsgXCIgdXNpbmcgXCIgKyBfdHlwZSArIFwiIHdpdGggb3B0aW9uc1wiLCBvcHRpb25zKTtcbiAgICByZXR1cm4gY2hvc2VuUmVwLnBsYXlsaXN0O1xuICB9XG5cbiAgbG9nRm4oJ2NvdWxkIG5vdCBjaG9vc2UgYSBwbGF5bGlzdCB3aXRoIG9wdGlvbnMnLCBvcHRpb25zKTtcbiAgcmV0dXJuIG51bGw7XG59OyAvLyBQbGF5bGlzdCBTZWxlY3RvcnNcblxuLyoqXG4gKiBDaG9vc2VzIHRoZSBhcHByb3ByaWF0ZSBtZWRpYSBwbGF5bGlzdCBiYXNlZCBvbiB0aGUgbW9zdCByZWNlbnRcbiAqIGJhbmR3aWR0aCBlc3RpbWF0ZSBhbmQgdGhlIHBsYXllciBzaXplLlxuICpcbiAqIEV4cGVjdHMgdG8gYmUgY2FsbGVkIHdpdGhpbiB0aGUgY29udGV4dCBvZiBhbiBpbnN0YW5jZSBvZiBWaHNIYW5kbGVyXG4gKlxuICogQHJldHVybiB7UGxheWxpc3R9IHRoZSBoaWdoZXN0IGJpdHJhdGUgcGxheWxpc3QgbGVzcyB0aGFuIHRoZVxuICogY3VycmVudGx5IGRldGVjdGVkIGJhbmR3aWR0aCwgYWNjb3VudGluZyBmb3Igc29tZSBhbW91bnQgb2ZcbiAqIGJhbmR3aWR0aCB2YXJpYW5jZVxuICovXG5cblxudmFyIGxhc3RCYW5kd2lkdGhTZWxlY3RvciA9IGZ1bmN0aW9uIGxhc3RCYW5kd2lkdGhTZWxlY3RvcigpIHtcbiAgdmFyIHBpeGVsUmF0aW8gPSB0aGlzLnVzZURldmljZVBpeGVsUmF0aW8gPyB3aW5kb3ckMS5kZXZpY2VQaXhlbFJhdGlvIHx8IDEgOiAxO1xuICByZXR1cm4gc2ltcGxlU2VsZWN0b3IodGhpcy5wbGF5bGlzdHMubWFzdGVyLCB0aGlzLnN5c3RlbUJhbmR3aWR0aCwgcGFyc2VJbnQoc2FmZUdldENvbXB1dGVkU3R5bGUodGhpcy50ZWNoXy5lbCgpLCAnd2lkdGgnKSwgMTApICogcGl4ZWxSYXRpbywgcGFyc2VJbnQoc2FmZUdldENvbXB1dGVkU3R5bGUodGhpcy50ZWNoXy5lbCgpLCAnaGVpZ2h0JyksIDEwKSAqIHBpeGVsUmF0aW8sIHRoaXMubGltaXRSZW5kaXRpb25CeVBsYXllckRpbWVuc2lvbnMpO1xufTtcbi8qKlxuICogQ2hvb3NlcyB0aGUgYXBwcm9wcmlhdGUgbWVkaWEgcGxheWxpc3QgYmFzZWQgb24gdGhlIHBvdGVudGlhbCB0byByZWJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICogICAgICAgIE9iamVjdCBvZiBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byB1c2UgdGhpcyBzZWxlY3RvclxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzLm1hc3RlclxuICogICAgICAgIE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWFzdGVyIG1hbmlmZXN0XG4gKiBAcGFyYW0ge251bWJlcn0gc2V0dGluZ3MuY3VycmVudFRpbWVcbiAqICAgICAgICBUaGUgY3VycmVudCB0aW1lIG9mIHRoZSBwbGF5ZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzZXR0aW5ncy5iYW5kd2lkdGhcbiAqICAgICAgICBDdXJyZW50IG1lYXN1cmVkIGJhbmR3aWR0aFxuICogQHBhcmFtIHtudW1iZXJ9IHNldHRpbmdzLmR1cmF0aW9uXG4gKiAgICAgICAgRHVyYXRpb24gb2YgdGhlIG1lZGlhXG4gKiBAcGFyYW0ge251bWJlcn0gc2V0dGluZ3Muc2VnbWVudER1cmF0aW9uXG4gKiAgICAgICAgU2VnbWVudCBkdXJhdGlvbiB0byBiZSB1c2VkIGluIHJvdW5kIHRyaXAgdGltZSBjYWxjdWxhdGlvbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBzZXR0aW5ncy50aW1lVW50aWxSZWJ1ZmZlclxuICogICAgICAgIFRpbWUgbGVmdCBpbiBzZWNvbmRzIHVudGlsIHRoZSBwbGF5ZXIgaGFzIHRvIHJlYnVmZmVyXG4gKiBAcGFyYW0ge251bWJlcn0gc2V0dGluZ3MuY3VycmVudFRpbWVsaW5lXG4gKiAgICAgICAgVGhlIGN1cnJlbnQgdGltZWxpbmUgc2VnbWVudHMgYXJlIGJlaW5nIGxvYWRlZCBmcm9tXG4gKiBAcGFyYW0ge1N5bmNDb250cm9sbGVyfSBzZXR0aW5ncy5zeW5jQ29udHJvbGxlclxuICogICAgICAgIFN5bmNDb250cm9sbGVyIGZvciBkZXRlcm1pbmluZyBpZiB3ZSBoYXZlIGEgc3luYyBwb2ludCBmb3IgYSBnaXZlbiBwbGF5bGlzdFxuICogQHJldHVybiB7T2JqZWN0fG51bGx9XG4gKiAgICAgICAgIHtPYmplY3R9IHJldHVybi5wbGF5bGlzdFxuICogICAgICAgICBUaGUgaGlnaGVzdCBiYW5kd2lkdGggcGxheWxpc3Qgd2l0aCB0aGUgbGVhc3QgYW1vdW50IG9mIHJlYnVmZmVyaW5nXG4gKiAgICAgICAgIHtOdW1iZXJ9IHJldHVybi5yZWJ1ZmZlcmluZ0ltcGFjdFxuICogICAgICAgICBUaGUgYW1vdW50IG9mIHRpbWUgaW4gc2Vjb25kcyBzd2l0Y2hpbmcgdG8gdGhpcyBwbGF5bGlzdCB3aWxsIHJlYnVmZmVyLiBBXG4gKiAgICAgICAgIG5lZ2F0aXZlIHZhbHVlIG1lYW5zIHRoYXQgc3dpdGNoaW5nIHdpbGwgY2F1c2UgemVybyByZWJ1ZmZlcmluZy5cbiAqL1xuXG5cbnZhciBtaW5SZWJ1ZmZlck1heEJhbmR3aWR0aFNlbGVjdG9yID0gZnVuY3Rpb24gbWluUmVidWZmZXJNYXhCYW5kd2lkdGhTZWxlY3RvcihzZXR0aW5ncykge1xuICB2YXIgbWFzdGVyID0gc2V0dGluZ3MubWFzdGVyLFxuICAgICAgY3VycmVudFRpbWUgPSBzZXR0aW5ncy5jdXJyZW50VGltZSxcbiAgICAgIGJhbmR3aWR0aCA9IHNldHRpbmdzLmJhbmR3aWR0aCxcbiAgICAgIGR1cmF0aW9uID0gc2V0dGluZ3MuZHVyYXRpb24sXG4gICAgICBzZWdtZW50RHVyYXRpb24gPSBzZXR0aW5ncy5zZWdtZW50RHVyYXRpb24sXG4gICAgICB0aW1lVW50aWxSZWJ1ZmZlciA9IHNldHRpbmdzLnRpbWVVbnRpbFJlYnVmZmVyLFxuICAgICAgY3VycmVudFRpbWVsaW5lID0gc2V0dGluZ3MuY3VycmVudFRpbWVsaW5lLFxuICAgICAgc3luY0NvbnRyb2xsZXIgPSBzZXR0aW5ncy5zeW5jQ29udHJvbGxlcjsgLy8gZmlsdGVyIG91dCBhbnkgcGxheWxpc3RzIHRoYXQgaGF2ZSBiZWVuIGV4Y2x1ZGVkIGR1ZSB0b1xuICAvLyBpbmNvbXBhdGlibGUgY29uZmlndXJhdGlvbnNcblxuICB2YXIgY29tcGF0aWJsZVBsYXlsaXN0cyA9IG1hc3Rlci5wbGF5bGlzdHMuZmlsdGVyKGZ1bmN0aW9uIChwbGF5bGlzdCkge1xuICAgIHJldHVybiAhUGxheWxpc3QuaXNJbmNvbXBhdGlibGUocGxheWxpc3QpO1xuICB9KTsgLy8gZmlsdGVyIG91dCBhbnkgcGxheWxpc3RzIHRoYXQgaGF2ZSBiZWVuIGRpc2FibGVkIG1hbnVhbGx5IHRocm91Z2ggdGhlIHJlcHJlc2VudGF0aW9uc1xuICAvLyBhcGkgb3IgYmxhY2tsaXN0ZWQgdGVtcG9yYXJpbHkgZHVlIHRvIHBsYXliYWNrIGVycm9ycy5cblxuICB2YXIgZW5hYmxlZFBsYXlsaXN0cyA9IGNvbXBhdGlibGVQbGF5bGlzdHMuZmlsdGVyKFBsYXlsaXN0LmlzRW5hYmxlZCk7XG5cbiAgaWYgKCFlbmFibGVkUGxheWxpc3RzLmxlbmd0aCkge1xuICAgIC8vIGlmIHRoZXJlIGFyZSBubyBlbmFibGVkIHBsYXlsaXN0cywgdGhlbiB0aGV5IGhhdmUgYWxsIGJlZW4gYmxhY2tsaXN0ZWQgb3IgZGlzYWJsZWRcbiAgICAvLyBieSB0aGUgdXNlciB0aHJvdWdoIHRoZSByZXByZXNlbnRhdGlvbnMgYXBpLiBJbiB0aGlzIGNhc2UsIGlnbm9yZSBibGFja2xpc3RpbmcgYW5kXG4gICAgLy8gZmFsbGJhY2sgdG8gd2hhdCB0aGUgdXNlciB3YW50cyBieSB1c2luZyBwbGF5bGlzdHMgdGhlIHVzZXIgaGFzIG5vdCBkaXNhYmxlZC5cbiAgICBlbmFibGVkUGxheWxpc3RzID0gY29tcGF0aWJsZVBsYXlsaXN0cy5maWx0ZXIoZnVuY3Rpb24gKHBsYXlsaXN0KSB7XG4gICAgICByZXR1cm4gIVBsYXlsaXN0LmlzRGlzYWJsZWQocGxheWxpc3QpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGJhbmR3aWR0aFBsYXlsaXN0cyA9IGVuYWJsZWRQbGF5bGlzdHMuZmlsdGVyKFBsYXlsaXN0Lmhhc0F0dHJpYnV0ZS5iaW5kKG51bGwsICdCQU5EV0lEVEgnKSk7XG4gIHZhciByZWJ1ZmZlcmluZ0VzdGltYXRlcyA9IGJhbmR3aWR0aFBsYXlsaXN0cy5tYXAoZnVuY3Rpb24gKHBsYXlsaXN0KSB7XG4gICAgdmFyIHN5bmNQb2ludCA9IHN5bmNDb250cm9sbGVyLmdldFN5bmNQb2ludChwbGF5bGlzdCwgZHVyYXRpb24sIGN1cnJlbnRUaW1lbGluZSwgY3VycmVudFRpbWUpOyAvLyBJZiB0aGVyZSBpcyBubyBzeW5jIHBvaW50IGZvciB0aGlzIHBsYXlsaXN0LCBzd2l0Y2hpbmcgdG8gaXQgd2lsbCByZXF1aXJlIGFcbiAgICAvLyBzeW5jIHJlcXVlc3QgZmlyc3QuIFRoaXMgd2lsbCBkb3VibGUgdGhlIHJlcXVlc3QgdGltZVxuXG4gICAgdmFyIG51bVJlcXVlc3RzID0gc3luY1BvaW50ID8gMSA6IDI7XG4gICAgdmFyIHJlcXVlc3RUaW1lRXN0aW1hdGUgPSBQbGF5bGlzdC5lc3RpbWF0ZVNlZ21lbnRSZXF1ZXN0VGltZShzZWdtZW50RHVyYXRpb24sIGJhbmR3aWR0aCwgcGxheWxpc3QpO1xuICAgIHZhciByZWJ1ZmZlcmluZ0ltcGFjdCA9IHJlcXVlc3RUaW1lRXN0aW1hdGUgKiBudW1SZXF1ZXN0cyAtIHRpbWVVbnRpbFJlYnVmZmVyO1xuICAgIHJldHVybiB7XG4gICAgICBwbGF5bGlzdDogcGxheWxpc3QsXG4gICAgICByZWJ1ZmZlcmluZ0ltcGFjdDogcmVidWZmZXJpbmdJbXBhY3RcbiAgICB9O1xuICB9KTtcbiAgdmFyIG5vUmVidWZmZXJpbmdQbGF5bGlzdHMgPSByZWJ1ZmZlcmluZ0VzdGltYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGVzdGltYXRlKSB7XG4gICAgcmV0dXJuIGVzdGltYXRlLnJlYnVmZmVyaW5nSW1wYWN0IDw9IDA7XG4gIH0pOyAvLyBTb3J0IGJ5IGJhbmR3aWR0aCBERVNDXG5cbiAgc3RhYmxlU29ydChub1JlYnVmZmVyaW5nUGxheWxpc3RzLCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBjb21wYXJlUGxheWxpc3RCYW5kd2lkdGgoYi5wbGF5bGlzdCwgYS5wbGF5bGlzdCk7XG4gIH0pO1xuXG4gIGlmIChub1JlYnVmZmVyaW5nUGxheWxpc3RzLmxlbmd0aCkge1xuICAgIHJldHVybiBub1JlYnVmZmVyaW5nUGxheWxpc3RzWzBdO1xuICB9XG5cbiAgc3RhYmxlU29ydChyZWJ1ZmZlcmluZ0VzdGltYXRlcywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYS5yZWJ1ZmZlcmluZ0ltcGFjdCAtIGIucmVidWZmZXJpbmdJbXBhY3Q7XG4gIH0pO1xuICByZXR1cm4gcmVidWZmZXJpbmdFc3RpbWF0ZXNbMF0gfHwgbnVsbDtcbn07XG4vKipcbiAqIENob29zZXMgdGhlIGFwcHJvcHJpYXRlIG1lZGlhIHBsYXlsaXN0LCB3aGljaCBpbiB0aGlzIGNhc2UgaXMgdGhlIGxvd2VzdCBiaXRyYXRlXG4gKiBvbmUgd2l0aCB2aWRlby4gIElmIG5vIHJlbmRpdGlvbnMgd2l0aCB2aWRlbyBleGlzdCwgcmV0dXJuIHRoZSBsb3dlc3QgYXVkaW8gcmVuZGl0aW9uLlxuICpcbiAqIEV4cGVjdHMgdG8gYmUgY2FsbGVkIHdpdGhpbiB0aGUgY29udGV4dCBvZiBhbiBpbnN0YW5jZSBvZiBWaHNIYW5kbGVyXG4gKlxuICogQHJldHVybiB7T2JqZWN0fG51bGx9XG4gKiAgICAgICAgIHtPYmplY3R9IHJldHVybi5wbGF5bGlzdFxuICogICAgICAgICBUaGUgbG93ZXN0IGJpdHJhdGUgcGxheWxpc3QgdGhhdCBjb250YWlucyBhIHZpZGVvIGNvZGVjLiAgSWYgbm8gc3VjaCByZW5kaXRpb25cbiAqICAgICAgICAgZXhpc3RzIHBpY2sgdGhlIGxvd2VzdCBhdWRpbyByZW5kaXRpb24uXG4gKi9cblxuXG52YXIgbG93ZXN0Qml0cmF0ZUNvbXBhdGlibGVWYXJpYW50U2VsZWN0b3IgPSBmdW5jdGlvbiBsb3dlc3RCaXRyYXRlQ29tcGF0aWJsZVZhcmlhbnRTZWxlY3RvcigpIHtcbiAgdmFyIF90aGlzID0gdGhpczsgLy8gZmlsdGVyIG91dCBhbnkgcGxheWxpc3RzIHRoYXQgaGF2ZSBiZWVuIGV4Y2x1ZGVkIGR1ZSB0b1xuICAvLyBpbmNvbXBhdGlibGUgY29uZmlndXJhdGlvbnMgb3IgcGxheWJhY2sgZXJyb3JzXG5cblxuICB2YXIgcGxheWxpc3RzID0gdGhpcy5wbGF5bGlzdHMubWFzdGVyLnBsYXlsaXN0cy5maWx0ZXIoUGxheWxpc3QuaXNFbmFibGVkKTsgLy8gU29ydCBhc2NlbmRpbmcgYnkgYml0cmF0ZVxuXG4gIHN0YWJsZVNvcnQocGxheWxpc3RzLCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBjb21wYXJlUGxheWxpc3RCYW5kd2lkdGgoYSwgYik7XG4gIH0pOyAvLyBQYXJzZSBhbmQgYXNzdW1lIHRoYXQgcGxheWxpc3RzIHdpdGggbm8gdmlkZW8gY29kZWMgaGF2ZSBubyB2aWRlb1xuICAvLyAodGhpcyBpcyBub3QgbmVjZXNzYXJpbHkgdHJ1ZSwgYWx0aG91Z2ggaXQgaXMgZ2VuZXJhbGx5IHRydWUpLlxuICAvL1xuICAvLyBJZiBhbiBlbnRpcmUgbWFuaWZlc3QgaGFzIG5vIHZhbGlkIHZpZGVvcyBldmVyeXRoaW5nIHdpbGwgZ2V0IGZpbHRlcmVkXG4gIC8vIG91dC5cblxuICB2YXIgcGxheWxpc3RzV2l0aFZpZGVvID0gcGxheWxpc3RzLmZpbHRlcihmdW5jdGlvbiAocGxheWxpc3QpIHtcbiAgICByZXR1cm4gISFjb2RlY3NGb3JQbGF5bGlzdChfdGhpcy5wbGF5bGlzdHMubWFzdGVyLCBwbGF5bGlzdCkudmlkZW87XG4gIH0pO1xuICByZXR1cm4gcGxheWxpc3RzV2l0aFZpZGVvWzBdIHx8IG51bGw7XG59O1xuLyoqXG4gKiBAZmlsZSB0ZXh0LXRyYWNrcy5qc1xuICovXG5cbi8qKlxuICogQ3JlYXRlIGNhcHRpb25zIHRleHQgdHJhY2tzIG9uIHZpZGVvLmpzIGlmIHRoZXkgZG8gbm90IGV4aXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluYmFuZFRleHRUcmFja3MgYSByZWZlcmVuY2UgdG8gY3VycmVudCBpbmJhbmRUZXh0VHJhY2tzXG4gKiBAcGFyYW0ge09iamVjdH0gdGVjaCB0aGUgdmlkZW8uanMgdGVjaFxuICogQHBhcmFtIHtPYmplY3R9IGNhcHRpb25TdHJlYW0gdGhlIGNhcHRpb24gc3RyZWFtIHRvIGNyZWF0ZVxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBjcmVhdGVDYXB0aW9uc1RyYWNrSWZOb3RFeGlzdHMgPSBmdW5jdGlvbiBjcmVhdGVDYXB0aW9uc1RyYWNrSWZOb3RFeGlzdHMoaW5iYW5kVGV4dFRyYWNrcywgdGVjaCwgY2FwdGlvblN0cmVhbSkge1xuICBpZiAoIWluYmFuZFRleHRUcmFja3NbY2FwdGlvblN0cmVhbV0pIHtcbiAgICB0ZWNoLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgIG5hbWU6ICd2aHMtNjA4J1xuICAgIH0pO1xuICAgIHRlY2gudHJpZ2dlcih7XG4gICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgbmFtZTogJ2hscy02MDgnXG4gICAgfSk7XG4gICAgdmFyIHRyYWNrID0gdGVjaC50ZXh0VHJhY2tzKCkuZ2V0VHJhY2tCeUlkKGNhcHRpb25TdHJlYW0pO1xuXG4gICAgaWYgKHRyYWNrKSB7XG4gICAgICAvLyBSZXN1c2UgYW4gZXhpc3RpbmcgdHJhY2sgd2l0aCBhIENDIyBpZCBiZWNhdXNlIHRoaXMgd2FzXG4gICAgICAvLyB2ZXJ5IGxpa2VseSBjcmVhdGVkIGJ5IHZpZGVvanMtY29udHJpYi1obHMgZnJvbSBpbmZvcm1hdGlvblxuICAgICAgLy8gaW4gdGhlIG0zdTggZm9yIHVzIHRvIHVzZVxuICAgICAgaW5iYW5kVGV4dFRyYWNrc1tjYXB0aW9uU3RyZWFtXSA9IHRyYWNrO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UsIGNyZWF0ZSBhIHRyYWNrIHdpdGggdGhlIGRlZmF1bHQgYENDI2AgbGFiZWwgYW5kXG4gICAgICAvLyB3aXRob3V0IGEgbGFuZ3VhZ2VcbiAgICAgIGluYmFuZFRleHRUcmFja3NbY2FwdGlvblN0cmVhbV0gPSB0ZWNoLmFkZFJlbW90ZVRleHRUcmFjayh7XG4gICAgICAgIGtpbmQ6ICdjYXB0aW9ucycsXG4gICAgICAgIGlkOiBjYXB0aW9uU3RyZWFtLFxuICAgICAgICBsYWJlbDogY2FwdGlvblN0cmVhbVxuICAgICAgfSwgZmFsc2UpLnRyYWNrO1xuICAgIH1cbiAgfVxufTtcbi8qKlxuICogQWRkIGNhcHRpb24gdGV4dCB0cmFjayBkYXRhIHRvIGEgc291cmNlIGhhbmRsZXIgZ2l2ZW4gYW4gYXJyYXkgb2YgY2FwdGlvbnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqICAgQHBhcmFtIHtPYmplY3R9IGluYmFuZFRleHRUcmFja3MgdGhlIGluYmFuZCB0ZXh0IHRyYWNrc1xuICogICBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wT2Zmc2V0IHRoZSB0aW1lc3RhbXAgb2Zmc2V0IG9mIHRoZSBzb3VyY2UgYnVmZmVyXG4gKiAgIEBwYXJhbSB7QXJyYXl9IGNhcHRpb25BcnJheSBhbiBhcnJheSBvZiBjYXB0aW9uIGRhdGFcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgYWRkQ2FwdGlvbkRhdGEgPSBmdW5jdGlvbiBhZGRDYXB0aW9uRGF0YShfcmVmKSB7XG4gIHZhciBpbmJhbmRUZXh0VHJhY2tzID0gX3JlZi5pbmJhbmRUZXh0VHJhY2tzLFxuICAgICAgY2FwdGlvbkFycmF5ID0gX3JlZi5jYXB0aW9uQXJyYXksXG4gICAgICB0aW1lc3RhbXBPZmZzZXQgPSBfcmVmLnRpbWVzdGFtcE9mZnNldDtcblxuICBpZiAoIWNhcHRpb25BcnJheSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBDdWUgPSB3aW5kb3ckMS5XZWJLaXREYXRhQ3VlIHx8IHdpbmRvdyQxLlZUVEN1ZTtcbiAgY2FwdGlvbkFycmF5LmZvckVhY2goZnVuY3Rpb24gKGNhcHRpb24pIHtcbiAgICB2YXIgdHJhY2sgPSBjYXB0aW9uLnN0cmVhbTtcbiAgICBpbmJhbmRUZXh0VHJhY2tzW3RyYWNrXS5hZGRDdWUobmV3IEN1ZShjYXB0aW9uLnN0YXJ0VGltZSArIHRpbWVzdGFtcE9mZnNldCwgY2FwdGlvbi5lbmRUaW1lICsgdGltZXN0YW1wT2Zmc2V0LCBjYXB0aW9uLnRleHQpKTtcbiAgfSk7XG59O1xuLyoqXG4gKiBEZWZpbmUgcHJvcGVydGllcyBvbiBhIGN1ZSBmb3IgYmFja3dhcmRzIGNvbXBhdGFiaWxpdHksXG4gKiBidXQgd2FybiB0aGUgdXNlciB0aGF0IHRoZSB3YXkgdGhhdCB0aGV5IGFyZSB1c2luZyBpdFxuICogaXMgZGVwcmljYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGF0IGEgbGF0ZXIgZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0N1ZX0gY3VlIHRoZSBjdWUgdG8gYWRkIHRoZSBwcm9wZXJ0aWVzIG9uXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIGRlcHJlY2F0ZU9sZEN1ZSA9IGZ1bmN0aW9uIGRlcHJlY2F0ZU9sZEN1ZShjdWUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY3VlLmZyYW1lLCB7XG4gICAgaWQ6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ2N1ZS5mcmFtZS5pZCBpcyBkZXByZWNhdGVkLiBVc2UgY3VlLnZhbHVlLmtleSBpbnN0ZWFkLicpO1xuICAgICAgICByZXR1cm4gY3VlLnZhbHVlLmtleTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbHVlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdjdWUuZnJhbWUudmFsdWUgaXMgZGVwcmVjYXRlZC4gVXNlIGN1ZS52YWx1ZS5kYXRhIGluc3RlYWQuJyk7XG4gICAgICAgIHJldHVybiBjdWUudmFsdWUuZGF0YTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHByaXZhdGVEYXRhOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdjdWUuZnJhbWUucHJpdmF0ZURhdGEgaXMgZGVwcmVjYXRlZC4gVXNlIGN1ZS52YWx1ZS5kYXRhIGluc3RlYWQuJyk7XG4gICAgICAgIHJldHVybiBjdWUudmFsdWUuZGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbi8qKlxuICogQWRkIG1ldGFkYXRhIHRleHQgdHJhY2sgZGF0YSB0byBhIHNvdXJjZSBoYW5kbGVyIGdpdmVuIGFuIGFycmF5IG9mIG1ldGFkYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9XG4gKiAgIEBwYXJhbSB7T2JqZWN0fSBpbmJhbmRUZXh0VHJhY2tzIHRoZSBpbmJhbmQgdGV4dCB0cmFja3NcbiAqICAgQHBhcmFtIHtBcnJheX0gbWV0YWRhdGFBcnJheSBhbiBhcnJheSBvZiBtZXRhIGRhdGFcbiAqICAgQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcE9mZnNldCB0aGUgdGltZXN0YW1wIG9mZnNldCBvZiB0aGUgc291cmNlIGJ1ZmZlclxuICogICBAcGFyYW0ge251bWJlcn0gdmlkZW9EdXJhdGlvbiB0aGUgZHVyYXRpb24gb2YgdGhlIHZpZGVvXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIGFkZE1ldGFkYXRhID0gZnVuY3Rpb24gYWRkTWV0YWRhdGEoX3JlZjIpIHtcbiAgdmFyIGluYmFuZFRleHRUcmFja3MgPSBfcmVmMi5pbmJhbmRUZXh0VHJhY2tzLFxuICAgICAgbWV0YWRhdGFBcnJheSA9IF9yZWYyLm1ldGFkYXRhQXJyYXksXG4gICAgICB0aW1lc3RhbXBPZmZzZXQgPSBfcmVmMi50aW1lc3RhbXBPZmZzZXQsXG4gICAgICB2aWRlb0R1cmF0aW9uID0gX3JlZjIudmlkZW9EdXJhdGlvbjtcblxuICBpZiAoIW1ldGFkYXRhQXJyYXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgQ3VlID0gd2luZG93JDEuV2ViS2l0RGF0YUN1ZSB8fCB3aW5kb3ckMS5WVFRDdWU7XG4gIHZhciBtZXRhZGF0YVRyYWNrID0gaW5iYW5kVGV4dFRyYWNrcy5tZXRhZGF0YVRyYWNrXztcblxuICBpZiAoIW1ldGFkYXRhVHJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBtZXRhZGF0YUFycmF5LmZvckVhY2goZnVuY3Rpb24gKG1ldGFkYXRhKSB7XG4gICAgdmFyIHRpbWUgPSBtZXRhZGF0YS5jdWVUaW1lICsgdGltZXN0YW1wT2Zmc2V0OyAvLyBpZiB0aW1lIGlzbid0IGEgZmluaXRlIG51bWJlciBiZXR3ZWVuIDAgYW5kIEluZmluaXR5LCBsaWtlIE5hTixcbiAgICAvLyBpZ25vcmUgdGhpcyBiaXQgb2YgbWV0YWRhdGEuXG4gICAgLy8gVGhpcyBsaWtlbHkgb2NjdXJzIHdoZW4geW91IGhhdmUgYW4gbm9uLXRpbWVkIElEMyB0YWcgbGlrZSBUSVQyLFxuICAgIC8vIHdoaWNoIGlzIHRoZSBcIlRpdGxlL1NvbmduYW1lL0NvbnRlbnQgZGVzY3JpcHRpb25cIiBmcmFtZVxuXG4gICAgaWYgKHR5cGVvZiB0aW1lICE9PSAnbnVtYmVyJyB8fCB3aW5kb3ckMS5pc05hTih0aW1lKSB8fCB0aW1lIDwgMCB8fCAhKHRpbWUgPCBJbmZpbml0eSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtZXRhZGF0YS5mcmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgIHZhciBjdWUgPSBuZXcgQ3VlKHRpbWUsIHRpbWUsIGZyYW1lLnZhbHVlIHx8IGZyYW1lLnVybCB8fCBmcmFtZS5kYXRhIHx8ICcnKTtcbiAgICAgIGN1ZS5mcmFtZSA9IGZyYW1lO1xuICAgICAgY3VlLnZhbHVlID0gZnJhbWU7XG4gICAgICBkZXByZWNhdGVPbGRDdWUoY3VlKTtcbiAgICAgIG1ldGFkYXRhVHJhY2suYWRkQ3VlKGN1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmICghbWV0YWRhdGFUcmFjay5jdWVzIHx8ICFtZXRhZGF0YVRyYWNrLmN1ZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFVwZGF0aW5nIHRoZSBtZXRhZGV0YSBjdWVzIHNvIHRoYXRcbiAgLy8gdGhlIGVuZFRpbWUgb2YgZWFjaCBjdWUgaXMgdGhlIHN0YXJ0VGltZSBvZiB0aGUgbmV4dCBjdWVcbiAgLy8gdGhlIGVuZFRpbWUgb2YgbGFzdCBjdWUgaXMgdGhlIGR1cmF0aW9uIG9mIHRoZSB2aWRlb1xuXG5cbiAgdmFyIGN1ZXMgPSBtZXRhZGF0YVRyYWNrLmN1ZXM7XG4gIHZhciBjdWVzQXJyYXkgPSBbXTsgLy8gQ3JlYXRlIGEgY29weSBvZiB0aGUgVGV4dFRyYWNrQ3VlTGlzdC4uLlxuICAvLyAuLi5kaXNyZWdhcmRpbmcgY3VlcyB3aXRoIGEgZmFsc2V5IHZhbHVlXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGN1ZXNbaV0pIHtcbiAgICAgIGN1ZXNBcnJheS5wdXNoKGN1ZXNbaV0pO1xuICAgIH1cbiAgfSAvLyBHcm91cCBjdWVzIGJ5IHRoZWlyIHN0YXJ0VGltZSB2YWx1ZVxuXG5cbiAgdmFyIGN1ZXNHcm91cGVkQnlTdGFydFRpbWUgPSBjdWVzQXJyYXkucmVkdWNlKGZ1bmN0aW9uIChvYmosIGN1ZSkge1xuICAgIHZhciB0aW1lU2xvdCA9IG9ialtjdWUuc3RhcnRUaW1lXSB8fCBbXTtcbiAgICB0aW1lU2xvdC5wdXNoKGN1ZSk7XG4gICAgb2JqW2N1ZS5zdGFydFRpbWVdID0gdGltZVNsb3Q7XG4gICAgcmV0dXJuIG9iajtcbiAgfSwge30pOyAvLyBTb3J0IHN0YXJ0VGltZXMgYnkgYXNjZW5kaW5nIG9yZGVyXG5cbiAgdmFyIHNvcnRlZFN0YXJ0VGltZXMgPSBPYmplY3Qua2V5cyhjdWVzR3JvdXBlZEJ5U3RhcnRUaW1lKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIE51bWJlcihhKSAtIE51bWJlcihiKTtcbiAgfSk7IC8vIE1hcCBlYWNoIGN1ZSBncm91cCdzIGVuZFRpbWUgdG8gdGhlIG5leHQgZ3JvdXAncyBzdGFydFRpbWVcblxuICBzb3J0ZWRTdGFydFRpbWVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXJ0VGltZSwgaWR4KSB7XG4gICAgdmFyIGN1ZUdyb3VwID0gY3Vlc0dyb3VwZWRCeVN0YXJ0VGltZVtzdGFydFRpbWVdO1xuICAgIHZhciBuZXh0VGltZSA9IE51bWJlcihzb3J0ZWRTdGFydFRpbWVzW2lkeCArIDFdKSB8fCB2aWRlb0R1cmF0aW9uOyAvLyBNYXAgZWFjaCBjdWUncyBlbmRUaW1lIHRoZSBuZXh0IGdyb3VwJ3Mgc3RhcnRUaW1lXG5cbiAgICBjdWVHcm91cC5mb3JFYWNoKGZ1bmN0aW9uIChjdWUpIHtcbiAgICAgIGN1ZS5lbmRUaW1lID0gbmV4dFRpbWU7XG4gICAgfSk7XG4gIH0pO1xufTtcbi8qKlxuICogQ3JlYXRlIG1ldGFkYXRhIHRleHQgdHJhY2sgb24gdmlkZW8uanMgaWYgaXQgZG9lcyBub3QgZXhpc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5iYW5kVGV4dFRyYWNrcyBhIHJlZmVyZW5jZSB0byBjdXJyZW50IGluYmFuZFRleHRUcmFja3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaFR5cGUgdGhlIGluYmFuZCBtZXRhZGF0YSB0cmFjayBkaXNwYXRjaCB0eXBlXG4gKiBAcGFyYW0ge09iamVjdH0gdGVjaCB0aGUgdmlkZW8uanMgdGVjaFxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBjcmVhdGVNZXRhZGF0YVRyYWNrSWZOb3RFeGlzdHMgPSBmdW5jdGlvbiBjcmVhdGVNZXRhZGF0YVRyYWNrSWZOb3RFeGlzdHMoaW5iYW5kVGV4dFRyYWNrcywgZGlzcGF0Y2hUeXBlLCB0ZWNoKSB7XG4gIGlmIChpbmJhbmRUZXh0VHJhY2tzLm1ldGFkYXRhVHJhY2tfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5iYW5kVGV4dFRyYWNrcy5tZXRhZGF0YVRyYWNrXyA9IHRlY2guYWRkUmVtb3RlVGV4dFRyYWNrKHtcbiAgICBraW5kOiAnbWV0YWRhdGEnLFxuICAgIGxhYmVsOiAnVGltZWQgTWV0YWRhdGEnXG4gIH0sIGZhbHNlKS50cmFjaztcbiAgaW5iYW5kVGV4dFRyYWNrcy5tZXRhZGF0YVRyYWNrXy5pbkJhbmRNZXRhZGF0YVRyYWNrRGlzcGF0Y2hUeXBlID0gZGlzcGF0Y2hUeXBlO1xufTtcbi8qKlxuICogUmVtb3ZlIGN1ZXMgZnJvbSBhIHRyYWNrIG9uIHZpZGVvLmpzLlxuICpcbiAqIEBwYXJhbSB7RG91YmxlfSBzdGFydCBzdGFydCBvZiB3aGVyZSB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBjdWVcbiAqIEBwYXJhbSB7RG91YmxlfSBlbmQgZW5kIG9mIHdoZXJlIHRoZSB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBjdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0cmFjayB0aGUgdGV4dCB0cmFjayB0byByZW1vdmUgdGhlIGN1ZXMgZnJvbVxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciByZW1vdmVDdWVzRnJvbVRyYWNrID0gZnVuY3Rpb24gcmVtb3ZlQ3Vlc0Zyb21UcmFjayhzdGFydCwgZW5kLCB0cmFjaykge1xuICB2YXIgaTtcbiAgdmFyIGN1ZTtcblxuICBpZiAoIXRyYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF0cmFjay5jdWVzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaSA9IHRyYWNrLmN1ZXMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBjdWUgPSB0cmFjay5jdWVzW2ldOyAvLyBSZW1vdmUgYW55IG92ZXJsYXBwaW5nIGN1ZVxuXG4gICAgaWYgKGN1ZS5zdGFydFRpbWUgPj0gc3RhcnQgJiYgY3VlLmVuZFRpbWUgPD0gZW5kKSB7XG4gICAgICB0cmFjay5yZW1vdmVDdWUoY3VlKTtcbiAgICB9XG4gIH1cbn07XG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIGdvcHMgaW4gdGhlIGJ1ZmZlciB0aGF0IGhhdmUgYSBwdHMgdmFsdWUgb2YgMyBzZWNvbmRzIG9yIG1vcmUgaW5cbiAqIGZyb250IG9mIGN1cnJlbnQgdGltZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJcbiAqICAgICAgICBUaGUgY3VycmVudCBidWZmZXIgb2YgZ29wIGluZm9ybWF0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudFRpbWVcbiAqICAgICAgICBUaGUgY3VycmVudCB0aW1lXG4gKiBAcGFyYW0ge0RvdWJsZX0gbWFwcGluZ1xuICogICAgICAgIE9mZnNldCB0byBtYXAgZGlzcGxheSB0aW1lIHRvIHN0cmVhbSBwcmVzZW50YXRpb24gdGltZVxuICogQHJldHVybiB7QXJyYXl9XG4gKiAgICAgICAgIExpc3Qgb2YgZ29wcyBjb25zaWRlcmVkIHNhZmUgdG8gYXBwZW5kIG92ZXJcbiAqL1xuXG5cbnZhciBnb3BzU2FmZVRvQWxpZ25XaXRoID0gZnVuY3Rpb24gZ29wc1NhZmVUb0FsaWduV2l0aChidWZmZXIsIGN1cnJlbnRUaW1lLCBtYXBwaW5nKSB7XG4gIGlmICh0eXBlb2YgY3VycmVudFRpbWUgPT09ICd1bmRlZmluZWQnIHx8IGN1cnJlbnRUaW1lID09PSBudWxsIHx8ICFidWZmZXIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vIHB0cyB2YWx1ZSBmb3IgY3VycmVudCB0aW1lICsgMyBzZWNvbmRzIHRvIGdpdmUgYSBiaXQgbW9yZSB3aWdnbGUgcm9vbVxuXG5cbiAgdmFyIGN1cnJlbnRUaW1lUHRzID0gTWF0aC5jZWlsKChjdXJyZW50VGltZSAtIG1hcHBpbmcgKyAzKSAqIE9ORV9TRUNPTkRfSU5fVFMpO1xuICB2YXIgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGJ1ZmZlcltpXS5wdHMgPiBjdXJyZW50VGltZVB0cykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlci5zbGljZShpKTtcbn07XG4vKipcbiAqIEFwcGVuZHMgZ29wIGluZm9ybWF0aW9uICh0aW1pbmcgYW5kIGJ5dGVMZW5ndGgpIHJlY2VpdmVkIGJ5IHRoZSB0cmFuc211eGVyIGZvciB0aGVcbiAqIGdvcHMgYXBwZW5kZWQgaW4gdGhlIGxhc3QgY2FsbCB0byBhcHBlbmRCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJcbiAqICAgICAgICBUaGUgY3VycmVudCBidWZmZXIgb2YgZ29wIGluZm9ybWF0aW9uXG4gKiBAcGFyYW0ge0FycmF5fSBnb3BzXG4gKiAgICAgICAgTGlzdCBvZiBuZXcgZ29wIGluZm9ybWF0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHJlcGxhY2VcbiAqICAgICAgICBJZiB0cnVlLCByZXBsYWNlIHRoZSBidWZmZXIgd2l0aCB0aGUgbmV3IGdvcCBpbmZvcm1hdGlvbi4gSWYgZmFsc2UsIGFwcGVuZCB0aGVcbiAqICAgICAgICBuZXcgZ29wIGluZm9ybWF0aW9uIHRvIHRoZSBidWZmZXIgaW4gdGhlIHJpZ2h0IGxvY2F0aW9uIG9mIHRpbWUuXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqICAgICAgICAgVXBkYXRlZCBsaXN0IG9mIGdvcCBpbmZvcm1hdGlvblxuICovXG5cblxudmFyIHVwZGF0ZUdvcEJ1ZmZlciA9IGZ1bmN0aW9uIHVwZGF0ZUdvcEJ1ZmZlcihidWZmZXIsIGdvcHMsIHJlcGxhY2UpIHtcbiAgaWYgKCFnb3BzLmxlbmd0aCkge1xuICAgIHJldHVybiBidWZmZXI7XG4gIH1cblxuICBpZiAocmVwbGFjZSkge1xuICAgIC8vIElmIHdlIGFyZSBpbiBzYWZlIGFwcGVuZCBtb2RlLCB0aGVuIGNvbXBsZXRlbHkgb3ZlcndyaXRlIHRoZSBnb3AgYnVmZmVyXG4gICAgLy8gd2l0aCB0aGUgbW9zdCByZWNlbnQgYXBwZW5lZGVkIGRhdGEuIFRoaXMgd2lsbCBtYWtlIHN1cmUgdGhhdCB3aGVuIGFwcGVuZGluZ1xuICAgIC8vIGZ1dHVyZSBzZWdtZW50cywgd2Ugb25seSB0cnkgdG8gYWxpZ24gd2l0aCBnb3BzIHRoYXQgYXJlIGJvdGggYWhlYWQgb2YgY3VycmVudFxuICAgIC8vIHRpbWUgYW5kIGluIHRoZSBsYXN0IHNlZ21lbnQgYXBwZW5kZWQuXG4gICAgcmV0dXJuIGdvcHMuc2xpY2UoKTtcbiAgfVxuXG4gIHZhciBzdGFydCA9IGdvcHNbMF0ucHRzO1xuICB2YXIgaSA9IDA7XG5cbiAgZm9yIChpOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGJ1ZmZlcltpXS5wdHMgPj0gc3RhcnQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWZmZXIuc2xpY2UoMCwgaSkuY29uY2F0KGdvcHMpO1xufTtcbi8qKlxuICogUmVtb3ZlcyBnb3AgaW5mb3JtYXRpb24gaW4gYnVmZmVyIHRoYXQgb3ZlcmxhcHMgd2l0aCBwcm92aWRlZCBzdGFydCBhbmQgZW5kXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYnVmZmVyXG4gKiAgICAgICAgVGhlIGN1cnJlbnQgYnVmZmVyIG9mIGdvcCBpbmZvcm1hdGlvblxuICogQHBhcmFtIHtEb3VibGV9IHN0YXJ0XG4gKiAgICAgICAgcG9zaXRpb24gdG8gc3RhcnQgdGhlIHJlbW92ZSBhdFxuICogQHBhcmFtIHtEb3VibGV9IGVuZFxuICogICAgICAgIHBvc2l0aW9uIHRvIGVuZCB0aGUgcmVtb3ZlIGF0XG4gKiBAcGFyYW0ge0RvdWJsZX0gbWFwcGluZ1xuICogICAgICAgIE9mZnNldCB0byBtYXAgZGlzcGxheSB0aW1lIHRvIHN0cmVhbSBwcmVzZW50YXRpb24gdGltZVxuICovXG5cblxudmFyIHJlbW92ZUdvcEJ1ZmZlciA9IGZ1bmN0aW9uIHJlbW92ZUdvcEJ1ZmZlcihidWZmZXIsIHN0YXJ0LCBlbmQsIG1hcHBpbmcpIHtcbiAgdmFyIHN0YXJ0UHRzID0gTWF0aC5jZWlsKChzdGFydCAtIG1hcHBpbmcpICogT05FX1NFQ09ORF9JTl9UUyk7XG4gIHZhciBlbmRQdHMgPSBNYXRoLmNlaWwoKGVuZCAtIG1hcHBpbmcpICogT05FX1NFQ09ORF9JTl9UUyk7XG4gIHZhciB1cGRhdGVkQnVmZmVyID0gYnVmZmVyLnNsaWNlKCk7XG4gIHZhciBpID0gYnVmZmVyLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGJ1ZmZlcltpXS5wdHMgPD0gZW5kUHRzKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoaSA9PT0gLTEpIHtcbiAgICAvLyBubyByZW1vdmFsIGJlY2F1c2UgZW5kIG9mIHJlbW92ZSByYW5nZSBpcyBiZWZvcmUgc3RhcnQgb2YgYnVmZmVyXG4gICAgcmV0dXJuIHVwZGF0ZWRCdWZmZXI7XG4gIH1cblxuICB2YXIgaiA9IGkgKyAxO1xuXG4gIHdoaWxlIChqLS0pIHtcbiAgICBpZiAoYnVmZmVyW2pdLnB0cyA8PSBzdGFydFB0cykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9IC8vIGNsYW1wIHJlbW92ZSByYW5nZSBzdGFydCB0byAwIGluZGV4XG5cblxuICBqID0gTWF0aC5tYXgoaiwgMCk7XG4gIHVwZGF0ZWRCdWZmZXIuc3BsaWNlKGosIGkgLSBqICsgMSk7XG4gIHJldHVybiB1cGRhdGVkQnVmZmVyO1xufTtcblxudmFyIHNoYWxsb3dFcXVhbCA9IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChhLCBiKSB7XG4gIC8vIGlmIGJvdGggYXJlIHVuZGVmaW5lZFxuICAvLyBvciBvbmUgb3IgdGhlIG90aGVyIGlzIHVuZGVmaW5lZFxuICAvLyB0aGV5IGFyZSBub3QgZXF1YWxcbiAgaWYgKCFhICYmICFiIHx8ICFhICYmIGIgfHwgYSAmJiAhYikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyB0aGV5IGFyZSB0aGUgc2FtZSBvYmplY3QgYW5kIHRodXMsIGVxdWFsXG5cblxuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIHNvcnQga2V5cyBzbyB3ZSBjYW4gbWFrZSBzdXJlIHRoZXkgaGF2ZVxuICAvLyBhbGwgdGhlIHNhbWUga2V5cyBsYXRlci5cblxuXG4gIHZhciBha2V5cyA9IE9iamVjdC5rZXlzKGEpLnNvcnQoKTtcbiAgdmFyIGJrZXlzID0gT2JqZWN0LmtleXMoYikuc29ydCgpOyAvLyBkaWZmZXJlbnQgbnVtYmVyIG9mIGtleXMsIG5vdCBlcXVhbFxuXG4gIGlmIChha2V5cy5sZW5ndGggIT09IGJrZXlzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gYWtleXNbaV07IC8vIGRpZmZlcmVudCBzb3J0ZWQga2V5cywgbm90IGVxdWFsXG5cbiAgICBpZiAoa2V5ICE9PSBia2V5c1tpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gZGlmZmVyZW50IHZhbHVlcywgbm90IGVxdWFsXG5cblxuICAgIGlmIChhW2tleV0gIT09IGJba2V5XSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxudmFyIENIRUNLX0JVRkZFUl9ERUxBWSA9IDUwMDtcblxudmFyIGZpbml0ZSA9IGZ1bmN0aW9uIGZpbml0ZShudW0pIHtcbiAgcmV0dXJuIHR5cGVvZiBudW0gPT09ICdudW1iZXInICYmIGlzRmluaXRlKG51bSk7XG59O1xuXG52YXIgaWxsZWdhbE1lZGlhU3dpdGNoID0gZnVuY3Rpb24gaWxsZWdhbE1lZGlhU3dpdGNoKGxvYWRlclR5cGUsIHN0YXJ0aW5nTWVkaWEsIHRyYWNrSW5mbykge1xuICAvLyBBbHRob3VnaCB0aGVzZSBjaGVja3Mgc2hvdWxkIG1vc3QgbGlrZWx5IGNvdmVyIG5vbiAnbWFpbicgdHlwZXMsIGZvciBub3cgaXQgbmFycm93c1xuICAvLyB0aGUgc2NvcGUgb2Ygb3VyIGNoZWNrcy5cbiAgaWYgKGxvYWRlclR5cGUgIT09ICdtYWluJyB8fCAhc3RhcnRpbmdNZWRpYSB8fCAhdHJhY2tJbmZvKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIXRyYWNrSW5mby5oYXNBdWRpbyAmJiAhdHJhY2tJbmZvLmhhc1ZpZGVvKSB7XG4gICAgcmV0dXJuICdOZWl0aGVyIGF1ZGlvIG5vciB2aWRlbyBmb3VuZCBpbiBzZWdtZW50Lic7XG4gIH1cblxuICBpZiAoc3RhcnRpbmdNZWRpYS5oYXNWaWRlbyAmJiAhdHJhY2tJbmZvLmhhc1ZpZGVvKSB7XG4gICAgcmV0dXJuICdPbmx5IGF1ZGlvIGZvdW5kIGluIHNlZ21lbnQgd2hlbiB3ZSBleHBlY3RlZCB2aWRlby4nICsgJyBXZSBjYW5cXCd0IHN3aXRjaCB0byBhdWRpbyBvbmx5IGZyb20gYSBzdHJlYW0gdGhhdCBoYWQgdmlkZW8uJyArICcgVG8gZ2V0IHJpZCBvZiB0aGlzIG1lc3NhZ2UsIHBsZWFzZSBhZGQgY29kZWMgaW5mb3JtYXRpb24gdG8gdGhlIG1hbmlmZXN0Lic7XG4gIH1cblxuICBpZiAoIXN0YXJ0aW5nTWVkaWEuaGFzVmlkZW8gJiYgdHJhY2tJbmZvLmhhc1ZpZGVvKSB7XG4gICAgcmV0dXJuICdWaWRlbyBmb3VuZCBpbiBzZWdtZW50IHdoZW4gd2UgZXhwZWN0ZWQgb25seSBhdWRpby4nICsgJyBXZSBjYW5cXCd0IHN3aXRjaCB0byBhIHN0cmVhbSB3aXRoIHZpZGVvIGZyb20gYW4gYXVkaW8gb25seSBzdHJlYW0uJyArICcgVG8gZ2V0IHJpZCBvZiB0aGlzIG1lc3NhZ2UsIHBsZWFzZSBhZGQgY29kZWMgaW5mb3JtYXRpb24gdG8gdGhlIG1hbmlmZXN0Lic7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG4vKipcbiAqIENhbGN1bGF0ZXMgYSB0aW1lIHZhbHVlIHRoYXQgaXMgc2FmZSB0byByZW1vdmUgZnJvbSB0aGUgYmFjayBidWZmZXIgd2l0aG91dCBpbnRlcnJ1cHRpbmdcbiAqIHBsYXliYWNrLlxuICpcbiAqIEBwYXJhbSB7VGltZVJhbmdlfSBzZWVrYWJsZVxuICogICAgICAgIFRoZSBjdXJyZW50IHNlZWthYmxlIHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudFRpbWVcbiAqICAgICAgICBUaGUgY3VycmVudCB0aW1lIG9mIHRoZSBwbGF5ZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXREdXJhdGlvblxuICogICAgICAgIFRoZSB0YXJnZXQgZHVyYXRpb24gb2YgdGhlIGN1cnJlbnQgcGxheWxpc3RcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqICAgICAgICAgVGltZSB0aGF0IGlzIHNhZmUgdG8gcmVtb3ZlIGZyb20gdGhlIGJhY2sgYnVmZmVyIHdpdGhvdXQgaW50ZXJydXB0aW5nIHBsYXliYWNrXG4gKi9cblxuXG52YXIgc2FmZUJhY2tCdWZmZXJUcmltVGltZSA9IGZ1bmN0aW9uIHNhZmVCYWNrQnVmZmVyVHJpbVRpbWUoc2Vla2FibGUsIGN1cnJlbnRUaW1lLCB0YXJnZXREdXJhdGlvbikge1xuICAvLyAzMCBzZWNvbmRzIGJlZm9yZSB0aGUgcGxheWhlYWQgcHJvdmlkZXMgYSBzYWZlIGRlZmF1bHQgZm9yIHRyaW1taW5nLlxuICAvL1xuICAvLyBDaG9vc2luZyBhIHJlYXNvbmFibGUgZGVmYXVsdCBpcyBwYXJ0aWN1bGFybHkgaW1wb3J0YW50IGZvciBoaWdoIGJpdHJhdGUgY29udGVudCBhbmRcbiAgLy8gVk9EIHZpZGVvcy9saXZlIHN0cmVhbXMgd2l0aCBsYXJnZSB3aW5kb3dzLCBhcyB0aGUgYnVmZmVyIG1heSBlbmQgdXAgb3ZlcmZpbGxlZCBhbmRcbiAgLy8gdGhyb3cgYW4gQVBQRU5EX0JVRkZFUl9FUlIuXG4gIHZhciB0cmltVGltZSA9IGN1cnJlbnRUaW1lIC0gQ29uZmlnLkJBQ0tfQlVGRkVSX0xFTkdUSDtcblxuICBpZiAoc2Vla2FibGUubGVuZ3RoKSB7XG4gICAgLy8gU29tZSBsaXZlIHBsYXlsaXN0cyBtYXkgaGF2ZSBhIHNob3J0ZXIgd2luZG93IG9mIGNvbnRlbnQgdGhhbiB0aGUgZnVsbCBhbGxvd2VkIGJhY2tcbiAgICAvLyBidWZmZXIuIEZvciB0aGVzZSBwbGF5bGlzdHMsIGRvbid0IHNhdmUgY29udGVudCB0aGF0J3Mgbm8gbG9uZ2VyIHdpdGhpbiB0aGUgd2luZG93LlxuICAgIHRyaW1UaW1lID0gTWF0aC5tYXgodHJpbVRpbWUsIHNlZWthYmxlLnN0YXJ0KDApKTtcbiAgfSAvLyBEb24ndCByZW1vdmUgd2l0aGluIHRhcmdldCBkdXJhdGlvbiBvZiB0aGUgY3VycmVudCB0aW1lIHRvIGF2b2lkIHRoZSBwb3NzaWJpbGl0eSBvZlxuICAvLyByZW1vdmluZyB0aGUgR09QIGN1cnJlbnRseSBiZWluZyBwbGF5ZWQsIGFzIHJlbW92aW5nIGl0IGNhbiBjYXVzZSBwbGF5YmFjayBzdGFsbHMuXG5cblxuICB2YXIgbWF4VHJpbVRpbWUgPSBjdXJyZW50VGltZSAtIHRhcmdldER1cmF0aW9uO1xuICByZXR1cm4gTWF0aC5taW4obWF4VHJpbVRpbWUsIHRyaW1UaW1lKTtcbn07XG5cbnZhciBzZWdtZW50SW5mb1N0cmluZyA9IGZ1bmN0aW9uIHNlZ21lbnRJbmZvU3RyaW5nKHNlZ21lbnRJbmZvKSB7XG4gIHZhciBfc2VnbWVudEluZm8kc2VnbWVudCA9IHNlZ21lbnRJbmZvLnNlZ21lbnQsXG4gICAgICBzdGFydCA9IF9zZWdtZW50SW5mbyRzZWdtZW50LnN0YXJ0LFxuICAgICAgZW5kID0gX3NlZ21lbnRJbmZvJHNlZ21lbnQuZW5kLFxuICAgICAgX3NlZ21lbnRJbmZvJHBsYXlsaXN0ID0gc2VnbWVudEluZm8ucGxheWxpc3QsXG4gICAgICBzZXEgPSBfc2VnbWVudEluZm8kcGxheWxpc3QubWVkaWFTZXF1ZW5jZSxcbiAgICAgIGlkID0gX3NlZ21lbnRJbmZvJHBsYXlsaXN0LmlkLFxuICAgICAgX3NlZ21lbnRJbmZvJHBsYXlsaXN0MiA9IF9zZWdtZW50SW5mbyRwbGF5bGlzdC5zZWdtZW50cyxcbiAgICAgIHNlZ21lbnRzID0gX3NlZ21lbnRJbmZvJHBsYXlsaXN0MiA9PT0gdm9pZCAwID8gW10gOiBfc2VnbWVudEluZm8kcGxheWxpc3QyLFxuICAgICAgaW5kZXggPSBzZWdtZW50SW5mby5tZWRpYUluZGV4LFxuICAgICAgdGltZWxpbmUgPSBzZWdtZW50SW5mby50aW1lbGluZTtcbiAgcmV0dXJuIFtcImFwcGVuZGluZyBbXCIgKyBpbmRleCArIFwiXSBvZiBbXCIgKyBzZXEgKyBcIiwgXCIgKyAoc2VxICsgc2VnbWVudHMubGVuZ3RoKSArIFwiXSBmcm9tIHBsYXlsaXN0IFtcIiArIGlkICsgXCJdXCIsIFwiW1wiICsgc3RhcnQgKyBcIiA9PiBcIiArIGVuZCArIFwiXSBpbiB0aW1lbGluZSBbXCIgKyB0aW1lbGluZSArIFwiXVwiXS5qb2luKCcgJyk7XG59O1xuXG52YXIgdGltaW5nSW5mb1Byb3BlcnR5Rm9yTWVkaWEgPSBmdW5jdGlvbiB0aW1pbmdJbmZvUHJvcGVydHlGb3JNZWRpYShtZWRpYVR5cGUpIHtcbiAgcmV0dXJuIG1lZGlhVHlwZSArIFwiVGltaW5nSW5mb1wiO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgdGltZXN0YW1wIG9mZnNldCB0byB1c2UgZm9yIHRoZSBzZWdtZW50LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzZWdtZW50VGltZWxpbmVcbiAqICAgICAgICBUaGUgdGltZWxpbmUgb2YgdGhlIHNlZ21lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50VGltZWxpbmVcbiAqICAgICAgICBUaGUgdGltZWxpbmUgY3VycmVudGx5IGJlaW5nIGZvbGxvd2VkIGJ5IHRoZSBsb2FkZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydE9mU2VnbWVudFxuICogICAgICAgIFRoZSBlc3RpbWF0ZWQgc2VnbWVudCBzdGFydFxuICogQHBhcmFtIHtUaW1lUmFuZ2VbXX0gYnVmZmVyZWRcbiAqICAgICAgICBUaGUgbG9hZGVyJ3MgYnVmZmVyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG92ZXJyaWRlQ2hlY2tcbiAqICAgICAgICBJZiB0cnVlLCBubyBjaGVja3MgYXJlIG1hZGUgdG8gc2VlIGlmIHRoZSB0aW1lc3RhbXAgb2Zmc2V0IHZhbHVlIHNob3VsZCBiZSBzZXQsXG4gKiAgICAgICAgYnV0IHNldHMgaXQgZGlyZWN0bHkgdG8gYSB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ8bnVsbH1cbiAqICAgICAgICAgRWl0aGVyIGEgbnVtYmVyIHJlcHJlc2VudGluZyBhIG5ldyB0aW1lc3RhbXAgb2Zmc2V0LCBvciBudWxsIGlmIHRoZSBzZWdtZW50IGlzXG4gKiAgICAgICAgIHBhcnQgb2YgdGhlIHNhbWUgdGltZWxpbmVcbiAqL1xuXG5cbnZhciB0aW1lc3RhbXBPZmZzZXRGb3JTZWdtZW50ID0gZnVuY3Rpb24gdGltZXN0YW1wT2Zmc2V0Rm9yU2VnbWVudChfcmVmKSB7XG4gIHZhciBzZWdtZW50VGltZWxpbmUgPSBfcmVmLnNlZ21lbnRUaW1lbGluZSxcbiAgICAgIGN1cnJlbnRUaW1lbGluZSA9IF9yZWYuY3VycmVudFRpbWVsaW5lLFxuICAgICAgc3RhcnRPZlNlZ21lbnQgPSBfcmVmLnN0YXJ0T2ZTZWdtZW50LFxuICAgICAgYnVmZmVyZWQgPSBfcmVmLmJ1ZmZlcmVkLFxuICAgICAgb3ZlcnJpZGVDaGVjayA9IF9yZWYub3ZlcnJpZGVDaGVjazsgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGFyZSBjcm9zc2luZyBhIGRpc2NvbnRpbnVpdHkgdG8gc2VlIGlmIHdlIG5lZWQgdG8gc2V0IHRoZVxuICAvLyB0aW1lc3RhbXAgb2Zmc2V0IG9uIHRoZSB0cmFuc211eGVyIGFuZCBzb3VyY2UgYnVmZmVyLlxuICAvL1xuICAvLyBQcmV2aW91c2x5LCB3ZSBjaGFuZ2VkIHRoZSB0aW1lc3RhbXBPZmZzZXQgaWYgdGhlIHN0YXJ0IG9mIHRoaXMgc2VnbWVudCB3YXMgbGVzcyB0aGFuXG4gIC8vIHRoZSBjdXJyZW50bHkgc2V0IHRpbWVzdGFtcE9mZnNldCwgYnV0IHRoaXMgaXNuJ3QgZGVzaXJhYmxlIGFzIGl0IGNhbiBwcm9kdWNlIGJhZFxuICAvLyBiZWhhdmlvciwgZXNwZWNpYWxseSBhcm91bmQgbG9uZyBydW5uaW5nIGxpdmUgc3RyZWFtcy5cblxuICBpZiAoIW92ZXJyaWRlQ2hlY2sgJiYgc2VnbWVudFRpbWVsaW5lID09PSBjdXJyZW50VGltZWxpbmUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBzZWdtZW50SW5mby5zdGFydE9mU2VnbWVudCB1c2VkIHRvIGJlIHVzZWQgYXMgdGhlIHRpbWVzdGFtcCBvZmZzZXQsIGhvd2V2ZXIsIHRoYXRcbiAgLy8gdmFsdWUgdXNlcyB0aGUgZW5kIG9mIHRoZSBsYXN0IHNlZ21lbnQgaWYgaXQgaXMgYXZhaWxhYmxlLiBXaGlsZSB0aGlzIHZhbHVlXG4gIC8vIHNob3VsZCBvZnRlbiBiZSBjb3JyZWN0LCBpdCdzIGJldHRlciB0byByZWx5IG9uIHRoZSBidWZmZXJlZCBlbmQsIGFzIHRoZSBuZXdcbiAgLy8gY29udGVudCBwb3N0IGRpc2NvbnRpbnVpdHkgc2hvdWxkIGxpbmUgdXAgd2l0aCB0aGUgYnVmZmVyZWQgZW5kIGFzIGlmIGl0IHdlcmVcbiAgLy8gdGltZSAwIGZvciB0aGUgbmV3IGNvbnRlbnQuXG5cblxuICByZXR1cm4gYnVmZmVyZWQubGVuZ3RoID8gYnVmZmVyZWQuZW5kKGJ1ZmZlcmVkLmxlbmd0aCAtIDEpIDogc3RhcnRPZlNlZ21lbnQ7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBsb2FkZXIgc2hvdWxkIHdhaXQgZm9yIGEgdGltZWxpbmUgY2hhbmdlIGZyb20gdGhlIHRpbWVsaW5lXG4gKiBjaGFuZ2UgY29udHJvbGxlciBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgc2VnbWVudC5cbiAqXG4gKiBQcmltYXJ5IHRpbWluZyBpbiBWSFMgZ29lcyBieSB2aWRlby4gVGhpcyBpcyBkaWZmZXJlbnQgZnJvbSBtb3N0IG1lZGlhIHBsYXllcnMsIGFzXG4gKiBhdWRpbyBpcyBtb3JlIG9mdGVuIHVzZWQgYXMgdGhlIHByaW1hcnkgdGltaW5nIHNvdXJjZS4gRm9yIHRoZSBmb3Jlc2VlYWJsZSBmdXR1cmUsIFZIU1xuICogd2lsbCBjb250aW51ZSB0byB1c2UgdmlkZW8gYXMgdGhlIHByaW1hcnkgdGltaW5nIHNvdXJjZSwgZHVlIHRvIHRoZSBjdXJyZW50IGxvZ2ljIGFuZFxuICogZXhwZWN0YXRpb25zIGJ1aWx0IGFyb3VuZCBpdC5cblxuICogU2luY2UgdGhlIHRpbWluZyBmb2xsb3dzIHZpZGVvLCBpbiBvcmRlciB0byBtYWludGFpbiBzeW5jLCB0aGUgdmlkZW8gbG9hZGVyIGlzXG4gKiByZXNwb25zaWJsZSBmb3Igc2V0dGluZyBib3RoIGF1ZGlvIGFuZCB2aWRlbyBzb3VyY2UgYnVmZmVyIHRpbWVzdGFtcCBvZmZzZXRzLlxuICpcbiAqIFNldHRpbmcgZGlmZmVyZW50IHZhbHVlcyBmb3IgYXVkaW8gYW5kIHZpZGVvIHNvdXJjZSBidWZmZXJzIGNvdWxkIGxlYWQgdG9cbiAqIGRlc3luY2luZy4gVGhlIGZvbGxvd2luZyBleGFtcGxlcyBkZW1vbnN0cmF0ZSBzb21lIG9mIHRoZSBzaXR1YXRpb25zIHdoZXJlIHRoaXNcbiAqIGRpc3RpbmN0aW9uIGlzIGltcG9ydGFudC4gTm90ZSB0aGF0IGFsbCBvZiB0aGVzZSBjYXNlcyBpbnZvbHZlIGRlbXV4ZWQgY29udGVudC4gV2hlblxuICogY29udGVudCBpcyBtdXhlZCwgdGhlIGF1ZGlvIGFuZCB2aWRlbyBhcmUgcGFja2FnZWQgdG9nZXRoZXIsIHRoZXJlZm9yZSBzeW5jaW5nXG4gKiBzZXBhcmF0ZSBtZWRpYSBwbGF5bGlzdHMgaXMgbm90IGFuIGlzc3VlLlxuICpcbiAqIENBU0UgMTogQXVkaW8gcHJlcGFyZXMgdG8gbG9hZCBhIG5ldyB0aW1lbGluZSBiZWZvcmUgdmlkZW86XG4gKlxuICogVGltZWxpbmU6ICAgICAgIDAgICAgICAgICAgICAgICAgIDFcbiAqIEF1ZGlvIFNlZ21lbnRzOiAwIDEgMiAzIDQgNSBESVNDTyA2IDcgOCA5XG4gKiBBdWRpbyBMb2FkZXI6ICAgICAgICAgICAgICAgICAgICAgXlxuICogVmlkZW8gU2VnbWVudHM6IDAgMSAyIDMgNCA1IERJU0NPIDYgNyA4IDlcbiAqIFZpZGVvIExvYWRlciAgICAgICAgICAgICAgXlxuICpcbiAqIEluIHRoZSBhYm92ZSBleGFtcGxlLCB0aGUgYXVkaW8gbG9hZGVyIGlzIHByZXBhcmluZyB0byBsb2FkIHRoZSA2dGggc2VnbWVudCwgdGhlIGZpcnN0XG4gKiBhZnRlciBhIGRpc2NvbnRpbnVpdHksIHdoaWxlIHRoZSB2aWRlbyBsb2FkZXIgaXMgc3RpbGwgbG9hZGluZyB0aGUgNXRoIHNlZ21lbnQsIGJlZm9yZVxuICogdGhlIGRpc2NvbnRpbnVpdHkuXG4gKlxuICogSWYgdGhlIGF1ZGlvIGxvYWRlciBnb2VzIGFoZWFkIGFuZCBsb2FkcyBhbmQgYXBwZW5kcyB0aGUgNnRoIHNlZ21lbnQgYmVmb3JlIHRoZSB2aWRlb1xuICogbG9hZGVyIGNyb3NzZXMgdGhlIGRpc2NvbnRpbnVpdHksIHRoZW4gd2hlbiBhcHBlbmRlZCwgdGhlIDZ0aCBhdWRpbyBzZWdtZW50IHdpbGwgdXNlXG4gKiB0aGUgdGltZXN0YW1wIG9mZnNldCBmcm9tIHRpbWVsaW5lIDAuIFRoaXMgd2lsbCBsaWtlbHkgbGVhZCB0byBkZXN5bmNpbmcuIEluIGFkZGl0aW9uLFxuICogdGhlIGF1ZGlvIGxvYWRlciBtdXN0IHByb3ZpZGUgdGhlIGF1ZGlvQXBwZW5kU3RhcnQgdmFsdWUgdG8gdHJpbSB0aGUgY29udGVudCBpbiB0aGVcbiAqIHRyYW5zbXV4ZXIsIGFuZCB0aGF0IHZhbHVlIHJlbGllcyBvbiB0aGUgYXVkaW8gdGltZXN0YW1wIG9mZnNldC4gU2luY2UgdGhlIGF1ZGlvXG4gKiB0aW1lc3RhbXAgb2Zmc2V0IGlzIHNldCBieSB0aGUgdmlkZW8gKG1haW4pIGxvYWRlciwgdGhlIGF1ZGlvIGxvYWRlciBzaG91bGRuJ3QgbG9hZCB0aGVcbiAqIHNlZ21lbnQgdW50aWwgdGhhdCB2YWx1ZSBpcyBwcm92aWRlZC5cbiAqXG4gKiBDQVNFIDI6IFZpZGVvIHByZXBhcmVzIHRvIGxvYWQgYSBuZXcgdGltZWxpbmUgYmVmb3JlIGF1ZGlvOlxuICpcbiAqIFRpbWVsaW5lOiAgICAgICAwICAgICAgICAgICAgICAgICAxXG4gKiBBdWRpbyBTZWdtZW50czogMCAxIDIgMyA0IDUgRElTQ08gNiA3IDggOVxuICogQXVkaW8gTG9hZGVyOiAgICAgICAgICAgICBeXG4gKiBWaWRlbyBTZWdtZW50czogMCAxIDIgMyA0IDUgRElTQ08gNiA3IDggOVxuICogVmlkZW8gTG9hZGVyICAgICAgICAgICAgICAgICAgICAgIF5cbiAqXG4gKiBJbiB0aGUgYWJvdmUgZXhhbXBsZSwgdGhlIHZpZGVvIGxvYWRlciBpcyBwcmVwYXJpbmcgdG8gbG9hZCB0aGUgNnRoIHNlZ21lbnQsIHRoZSBmaXJzdFxuICogYWZ0ZXIgYSBkaXNjb250aW51aXR5LCB3aGlsZSB0aGUgYXVkaW8gbG9hZGVyIGlzIHN0aWxsIGxvYWRpbmcgdGhlIDV0aCBzZWdtZW50LCBiZWZvcmVcbiAqIHRoZSBkaXNjb250aW51aXR5LlxuICpcbiAqIElmIHRoZSB2aWRlbyBsb2FkZXIgZ29lcyBhaGVhZCBhbmQgbG9hZHMgYW5kIGFwcGVuZHMgdGhlIDZ0aCBzZWdtZW50LCB0aGVuIG9uY2UgdGhlXG4gKiBzZWdtZW50IGlzIGxvYWRlZCBhbmQgcHJvY2Vzc2VkLCBib3RoIHRoZSB2aWRlbyBhbmQgYXVkaW8gdGltZXN0YW1wIG9mZnNldHMgd2lsbCBiZVxuICogc2V0LCBzaW5jZSB2aWRlbyBpcyB1c2VkIGFzIHRoZSBwcmltYXJ5IHRpbWluZyBzb3VyY2UuIFRoaXMgaXMgdG8gZW5zdXJlIGNvbnRlbnQgbGluZXNcbiAqIHVwIGFwcHJvcHJpYXRlbHksIGFzIGFueSBtb2RpZmljYXRpb25zIHRvIHRoZSB2aWRlbyB0aW1pbmcgYXJlIHJlZmxlY3RlZCBieSBhdWRpbyB3aGVuXG4gKiB0aGUgdmlkZW8gbG9hZGVyIHNldHMgdGhlIGF1ZGlvIGFuZCB2aWRlbyB0aW1lc3RhbXAgb2Zmc2V0cyB0byB0aGUgc2FtZSB2YWx1ZS4gSG93ZXZlcixcbiAqIHNldHRpbmcgdGhlIHRpbWVzdGFtcCBvZmZzZXQgZm9yIGF1ZGlvIGJlZm9yZSBhdWRpbyBoYXMgaGFkIGEgY2hhbmNlIHRvIGNoYW5nZVxuICogdGltZWxpbmVzIHdpbGwgbGlrZWx5IGxlYWQgdG8gZGVzeW5jaW5nLCBhcyB0aGUgYXVkaW8gbG9hZGVyIHdpbGwgYXBwZW5kIHNlZ21lbnQgNSB3aXRoXG4gKiBhIHRpbWVzdGFtcCBpbnRlbmRlZCB0byBhcHBseSB0byBzZWdtZW50cyBmcm9tIHRpbWVsaW5lIDEgcmF0aGVyIHRoYW4gdGltZWxpbmUgMC5cbiAqXG4gKiBDQVNFIDM6IFdoZW4gc2Vla2luZywgYXVkaW8gcHJlcGFyZXMgdG8gbG9hZCBhIG5ldyB0aW1lbGluZSBiZWZvcmUgdmlkZW9cbiAqXG4gKiBUaW1lbGluZTogICAgICAgMCAgICAgICAgICAgICAgICAgMVxuICogQXVkaW8gU2VnbWVudHM6IDAgMSAyIDMgNCA1IERJU0NPIDYgNyA4IDlcbiAqIEF1ZGlvIExvYWRlcjogICAgICAgICAgIF5cbiAqIFZpZGVvIFNlZ21lbnRzOiAwIDEgMiAzIDQgNSBESVNDTyA2IDcgOCA5XG4gKiBWaWRlbyBMb2FkZXIgICAgICAgICAgICBeXG4gKlxuICogSW4gdGhlIGFib3ZlIGV4YW1wbGUsIGJvdGggYXVkaW8gYW5kIHZpZGVvIGxvYWRlcnMgYXJlIGxvYWRpbmcgc2VnbWVudHMgZnJvbSB0aW1lbGluZVxuICogMCwgYnV0IGltYWdpbmUgdGhhdCB0aGUgc2VlayBvcmlnaW5hdGVkIGZyb20gdGltZWxpbmUgMS5cbiAqXG4gKiBXaGVuIHNlZWtpbmcgdG8gYSBuZXcgdGltZWxpbmUsIHRoZSB0aW1lc3RhbXAgb2Zmc2V0IHdpbGwgYmUgc2V0IGJhc2VkIG9uIHRoZSBleHBlY3RlZFxuICogc2VnbWVudCBzdGFydCBvZiB0aGUgbG9hZGVkIHZpZGVvIHNlZ21lbnQuIEluIG9yZGVyIHRvIG1haW50YWluIHN5bmMsIHRoZSBhdWRpbyBsb2FkZXJcbiAqIG11c3Qgd2FpdCBmb3IgdGhlIHZpZGVvIGxvYWRlciB0byBsb2FkIGl0cyBzZWdtZW50IGFuZCB1cGRhdGUgYm90aCB0aGUgYXVkaW8gYW5kIHZpZGVvXG4gKiB0aW1lc3RhbXAgb2Zmc2V0cyBiZWZvcmUgaXQgbWF5IGxvYWQgYW5kIGFwcGVuZCBpdHMgb3duIHNlZ21lbnQuIFRoaXMgaXMgdGhlIGNhc2VcbiAqIHdoZXRoZXIgdGhlIHNlZWsgcmVzdWx0cyBpbiBhIG1pc21hdGNoZWQgc2VnbWVudCByZXF1ZXN0IChlLmcuLCB0aGUgYXVkaW8gbG9hZGVyXG4gKiBjaG9vc2VzIHRvIGxvYWQgc2VnbWVudCAzIGFuZCB0aGUgdmlkZW8gbG9hZGVyIGNob29zZXMgdG8gbG9hZCBzZWdtZW50IDQpIG9yIHRoZVxuICogbG9hZGVycyBjaG9vc2UgdG8gbG9hZCB0aGUgc2FtZSBzZWdtZW50IGluZGV4IGZyb20gZWFjaCBwbGF5bGlzdCwgYXMgdGhlIHNlZ21lbnRzIG1heVxuICogbm90IGJlIGFsaWduZWQgcGVyZmVjdGx5LCBldmVuIGZvciBtYXRjaGluZyBzZWdtZW50IGluZGV4ZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRpbWVsaW5lY2hhbmdlQ29udHJvbGxlclxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRUaW1lbGluZVxuICogICAgICAgIFRoZSB0aW1lbGluZSBjdXJyZW50bHkgYmVpbmcgZm9sbG93ZWQgYnkgdGhlIGxvYWRlclxuICogQHBhcmFtIHtudW1iZXJ9IHNlZ21lbnRUaW1lbGluZVxuICogICAgICAgIFRoZSB0aW1lbGluZSBvZiB0aGUgc2VnbWVudCBiZWluZyBsb2FkZWRcbiAqIEBwYXJhbSB7KCdtYWluJ3wnYXVkaW8nKX0gbG9hZGVyVHlwZVxuICogICAgICAgIFRoZSBsb2FkZXIgdHlwZVxuICogQHBhcmFtIHtib29sZWFufSBhdWRpb0Rpc2FibGVkXG4gKiAgICAgICAgV2hldGhlciB0aGUgYXVkaW8gaXMgZGlzYWJsZWQgZm9yIHRoZSBsb2FkZXIuIFRoaXMgc2hvdWxkIG9ubHkgYmUgdHJ1ZSB3aGVuIHRoZVxuICogICAgICAgIGxvYWRlciBtYXkgaGF2ZSBtdXhlZCBhdWRpbyBpbiBpdHMgc2VnbWVudCwgYnV0IHNob3VsZCBub3QgYXBwZW5kIGl0LCBlLmcuLCBmb3JcbiAqICAgICAgICB0aGUgbWFpbiBsb2FkZXIgd2hlbiBhbiBhbHRlcm5hdGUgYXVkaW8gcGxheWxpc3QgaXMgYWN0aXZlLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiAgICAgICAgIFdoZXRoZXIgdGhlIGxvYWRlciBzaG91bGQgd2FpdCBmb3IgYSB0aW1lbGluZSBjaGFuZ2UgZnJvbSB0aGUgdGltZWxpbmUgY2hhbmdlXG4gKiAgICAgICAgIGNvbnRyb2xsZXIgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIHNlZ21lbnRcbiAqL1xuXG5cbnZhciBzaG91bGRXYWl0Rm9yVGltZWxpbmVDaGFuZ2UgPSBmdW5jdGlvbiBzaG91bGRXYWl0Rm9yVGltZWxpbmVDaGFuZ2UoX3JlZjIpIHtcbiAgdmFyIHRpbWVsaW5lQ2hhbmdlQ29udHJvbGxlciA9IF9yZWYyLnRpbWVsaW5lQ2hhbmdlQ29udHJvbGxlcixcbiAgICAgIGN1cnJlbnRUaW1lbGluZSA9IF9yZWYyLmN1cnJlbnRUaW1lbGluZSxcbiAgICAgIHNlZ21lbnRUaW1lbGluZSA9IF9yZWYyLnNlZ21lbnRUaW1lbGluZSxcbiAgICAgIGxvYWRlclR5cGUgPSBfcmVmMi5sb2FkZXJUeXBlLFxuICAgICAgYXVkaW9EaXNhYmxlZCA9IF9yZWYyLmF1ZGlvRGlzYWJsZWQ7XG5cbiAgaWYgKGN1cnJlbnRUaW1lbGluZSA9PT0gc2VnbWVudFRpbWVsaW5lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGxvYWRlclR5cGUgPT09ICdhdWRpbycpIHtcbiAgICB2YXIgbGFzdE1haW5UaW1lbGluZUNoYW5nZSA9IHRpbWVsaW5lQ2hhbmdlQ29udHJvbGxlci5sYXN0VGltZWxpbmVDaGFuZ2Uoe1xuICAgICAgdHlwZTogJ21haW4nXG4gICAgfSk7IC8vIEF1ZGlvIGxvYWRlciBzaG91bGQgd2FpdCBpZjpcbiAgICAvL1xuICAgIC8vICogbWFpbiBoYXNuJ3QgaGFkIGEgdGltZWxpbmUgY2hhbmdlIHlldCAodGh1cyBoYXMgbm90IGxvYWRlZCBpdHMgZmlyc3Qgc2VnbWVudClcbiAgICAvLyAqIG1haW4gaGFzbid0IHlldCBjaGFuZ2VkIHRvIHRoZSB0aW1lbGluZSBhdWRpbyBpcyBsb29raW5nIHRvIGxvYWRcblxuICAgIHJldHVybiAhbGFzdE1haW5UaW1lbGluZUNoYW5nZSB8fCBsYXN0TWFpblRpbWVsaW5lQ2hhbmdlLnRvICE9PSBzZWdtZW50VGltZWxpbmU7XG4gIH0gLy8gVGhlIG1haW4gbG9hZGVyIG9ubHkgbmVlZHMgdG8gd2FpdCBmb3IgdGltZWxpbmUgY2hhbmdlcyBpZiB0aGVyZSdzIGRlbXV4ZWQgYXVkaW8uXG4gIC8vIE90aGVyd2lzZSwgdGhlcmUncyBub3RoaW5nIHRvIHdhaXQgZm9yLCBzaW5jZSBhdWRpbyB3b3VsZCBiZSBtdXhlZCBpbnRvIHRoZSBtYWluXG4gIC8vIGxvYWRlcidzIHNlZ21lbnRzIChvciB0aGUgY29udGVudCBpcyBhdWRpby92aWRlbyBvbmx5IGFuZCBoYW5kbGVkIGJ5IHRoZSBtYWluXG4gIC8vIGxvYWRlcikuXG5cblxuICBpZiAobG9hZGVyVHlwZSA9PT0gJ21haW4nICYmIGF1ZGlvRGlzYWJsZWQpIHtcbiAgICB2YXIgcGVuZGluZ0F1ZGlvVGltZWxpbmVDaGFuZ2UgPSB0aW1lbGluZUNoYW5nZUNvbnRyb2xsZXIucGVuZGluZ1RpbWVsaW5lQ2hhbmdlKHtcbiAgICAgIHR5cGU6ICdhdWRpbydcbiAgICB9KTsgLy8gTWFpbiBsb2FkZXIgc2hvdWxkIHdhaXQgZm9yIHRoZSBhdWRpbyBsb2FkZXIgaWYgYXVkaW8gaXMgbm90IHBlbmRpbmcgYSB0aW1lbGluZVxuICAgIC8vIGNoYW5nZSB0byB0aGUgY3VycmVudCB0aW1lbGluZS5cbiAgICAvL1xuICAgIC8vIFNpbmNlIHRoZSBtYWluIGxvYWRlciBpcyByZXNwb25zaWJsZSBmb3Igc2V0dGluZyB0aGUgdGltZXN0YW1wIG9mZnNldCBmb3IgYm90aFxuICAgIC8vIGF1ZGlvIGFuZCB2aWRlbywgdGhlIG1haW4gbG9hZGVyIG11c3Qgd2FpdCBmb3IgYXVkaW8gdG8gYmUgYWJvdXQgdG8gY2hhbmdlIHRvIGl0c1xuICAgIC8vIHRpbWVsaW5lIGJlZm9yZSBzZXR0aW5nIHRoZSBvZmZzZXQsIG90aGVyd2lzZSwgaWYgYXVkaW8gaXMgYmVoaW5kIGluIGxvYWRpbmcsXG4gICAgLy8gc2VnbWVudHMgZnJvbSB0aGUgcHJldmlvdXMgdGltZWxpbmUgd291bGQgYmUgYWRqdXN0ZWQgYnkgdGhlIG5ldyB0aW1lc3RhbXAgb2Zmc2V0LlxuICAgIC8vXG4gICAgLy8gVGhpcyByZXF1aXJlbWVudCBtZWFucyB0aGF0IHZpZGVvIHdpbGwgbm90IGNyb3NzIGEgdGltZWxpbmUgdW50aWwgdGhlIGF1ZGlvIGlzXG4gICAgLy8gYWJvdXQgdG8gY3Jvc3MgdG8gaXQsIHNvIHRoYXQgd2F5IGF1ZGlvIGFuZCB2aWRlbyB3aWxsIGFsd2F5cyBjcm9zcyB0aGUgdGltZWxpbmVcbiAgICAvLyB0b2dldGhlci5cbiAgICAvL1xuICAgIC8vIEluIGFkZGl0aW9uIHRvIG5vcm1hbCB0aW1lbGluZSBjaGFuZ2VzLCB0aGVzZSBydWxlcyBhbHNvIGFwcGx5IHRvIHRoZSBzdGFydCBvZiBhXG4gICAgLy8gc3RyZWFtIChnb2luZyBmcm9tIGEgbm9uLWV4aXN0ZW50IHRpbWVsaW5lLCAtMSwgdG8gdGltZWxpbmUgMCkuIEl0J3MgaW1wb3J0YW50XG4gICAgLy8gdGhhdCB0aGVzZSBydWxlcyBhcHBseSB0byB0aGUgZmlyc3QgdGltZWxpbmUgY2hhbmdlIGJlY2F1c2UgaWYgdGhleSBkaWQgbm90LCBpdCdzXG4gICAgLy8gcG9zc2libGUgdGhhdCB0aGUgbWFpbiBsb2FkZXIgd2lsbCBjcm9zcyB0d28gdGltZWxpbmVzIGJlZm9yZSB0aGUgYXVkaW8gbG9hZGVyIGhhc1xuICAgIC8vIGNyb3NzZWQgb25lLiBMb2dpYyBtYXkgYmUgaW1wbGVtZW50ZWQgdG8gaGFuZGxlIHRoZSBzdGFydHVwIGFzIGEgc3BlY2lhbCBjYXNlLCBidXRcbiAgICAvLyBpdCdzIGVhc2llciB0byBzaW1wbHkgdHJlYXQgYWxsIHRpbWVsaW5lIGNoYW5nZXMgdGhlIHNhbWUuXG5cbiAgICBpZiAocGVuZGluZ0F1ZGlvVGltZWxpbmVDaGFuZ2UgJiYgcGVuZGluZ0F1ZGlvVGltZWxpbmVDaGFuZ2UudG8gPT09IHNlZ21lbnRUaW1lbGluZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgbWFuYWdlcyBzZWdtZW50IGxvYWRpbmcgYW5kIGFwcGVuZGluZy5cbiAqXG4gKiBAY2xhc3MgU2VnbWVudExvYWRlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgcmVxdWlyZWQgYW5kIG9wdGlvbmFsIG9wdGlvbnNcbiAqIEBleHRlbmRzIHZpZGVvanMuRXZlbnRUYXJnZXRcbiAqL1xuXG5cbnZhciBTZWdtZW50TG9hZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfdmlkZW9qcyRFdmVudFRhcmdldCkge1xuICBfaW5oZXJpdHNMb29zZShTZWdtZW50TG9hZGVyLCBfdmlkZW9qcyRFdmVudFRhcmdldCk7XG5cbiAgZnVuY3Rpb24gU2VnbWVudExvYWRlcihzZXR0aW5ncywgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX3ZpZGVvanMkRXZlbnRUYXJnZXQuY2FsbCh0aGlzKSB8fCB0aGlzOyAvLyBjaGVjayBwcmUtY29uZGl0aW9uc1xuXG4gICAgaWYgKCFzZXR0aW5ncykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW5pdGlhbGl6YXRpb24gc2V0dGluZ3MgYXJlIHJlcXVpcmVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5jdXJyZW50VGltZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gY3VycmVudFRpbWUgZ2V0dGVyIHNwZWNpZmllZCcpO1xuICAgIH1cblxuICAgIGlmICghc2V0dGluZ3MubWVkaWFTb3VyY2UpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIE1lZGlhU291cmNlIHNwZWNpZmllZCcpO1xuICAgIH0gLy8gcHVibGljIHByb3BlcnRpZXNcblxuXG4gICAgX3RoaXMuYmFuZHdpZHRoID0gc2V0dGluZ3MuYmFuZHdpZHRoO1xuICAgIF90aGlzLnRocm91Z2hwdXQgPSB7XG4gICAgICByYXRlOiAwLFxuICAgICAgY291bnQ6IDBcbiAgICB9O1xuICAgIF90aGlzLnJvdW5kVHJpcCA9IE5hTjtcblxuICAgIF90aGlzLnJlc2V0U3RhdHNfKCk7XG5cbiAgICBfdGhpcy5tZWRpYUluZGV4ID0gbnVsbDsgLy8gcHJpdmF0ZSBzZXR0aW5nc1xuXG4gICAgX3RoaXMuaGFzUGxheWVkXyA9IHNldHRpbmdzLmhhc1BsYXllZDtcbiAgICBfdGhpcy5jdXJyZW50VGltZV8gPSBzZXR0aW5ncy5jdXJyZW50VGltZTtcbiAgICBfdGhpcy5zZWVrYWJsZV8gPSBzZXR0aW5ncy5zZWVrYWJsZTtcbiAgICBfdGhpcy5zZWVraW5nXyA9IHNldHRpbmdzLnNlZWtpbmc7XG4gICAgX3RoaXMuZHVyYXRpb25fID0gc2V0dGluZ3MuZHVyYXRpb247XG4gICAgX3RoaXMubWVkaWFTb3VyY2VfID0gc2V0dGluZ3MubWVkaWFTb3VyY2U7XG4gICAgX3RoaXMudmhzXyA9IHNldHRpbmdzLnZocztcbiAgICBfdGhpcy5sb2FkZXJUeXBlXyA9IHNldHRpbmdzLmxvYWRlclR5cGU7XG4gICAgX3RoaXMuY3VycmVudE1lZGlhSW5mb18gPSB2b2lkIDA7XG4gICAgX3RoaXMuc3RhcnRpbmdNZWRpYUluZm9fID0gdm9pZCAwO1xuICAgIF90aGlzLnNlZ21lbnRNZXRhZGF0YVRyYWNrXyA9IHNldHRpbmdzLnNlZ21lbnRNZXRhZGF0YVRyYWNrO1xuICAgIF90aGlzLmdvYWxCdWZmZXJMZW5ndGhfID0gc2V0dGluZ3MuZ29hbEJ1ZmZlckxlbmd0aDtcbiAgICBfdGhpcy5zb3VyY2VUeXBlXyA9IHNldHRpbmdzLnNvdXJjZVR5cGU7XG4gICAgX3RoaXMuc291cmNlVXBkYXRlcl8gPSBzZXR0aW5ncy5zb3VyY2VVcGRhdGVyO1xuICAgIF90aGlzLmluYmFuZFRleHRUcmFja3NfID0gc2V0dGluZ3MuaW5iYW5kVGV4dFRyYWNrcztcbiAgICBfdGhpcy5zdGF0ZV8gPSAnSU5JVCc7XG4gICAgX3RoaXMuaGFuZGxlUGFydGlhbERhdGFfID0gc2V0dGluZ3MuaGFuZGxlUGFydGlhbERhdGE7XG4gICAgX3RoaXMudGltZWxpbmVDaGFuZ2VDb250cm9sbGVyXyA9IHNldHRpbmdzLnRpbWVsaW5lQ2hhbmdlQ29udHJvbGxlcjtcbiAgICBfdGhpcy5zaG91bGRTYXZlU2VnbWVudFRpbWluZ0luZm9fID0gdHJ1ZTsgLy8gcHJpdmF0ZSBpbnN0YW5jZSB2YXJpYWJsZXNcblxuICAgIF90aGlzLmNoZWNrQnVmZmVyVGltZW91dF8gPSBudWxsO1xuICAgIF90aGlzLmVycm9yXyA9IHZvaWQgMDtcbiAgICBfdGhpcy5jdXJyZW50VGltZWxpbmVfID0gLTE7XG4gICAgX3RoaXMucGVuZGluZ1NlZ21lbnRfID0gbnVsbDtcbiAgICBfdGhpcy54aHJPcHRpb25zXyA9IG51bGw7XG4gICAgX3RoaXMucGVuZGluZ1NlZ21lbnRzXyA9IFtdO1xuICAgIF90aGlzLmF1ZGlvRGlzYWJsZWRfID0gZmFsc2U7XG4gICAgX3RoaXMuaXNQZW5kaW5nVGltZXN0YW1wT2Zmc2V0XyA9IGZhbHNlOyAvLyBUT0RPIHBvc3NpYmx5IG1vdmUgZ29wQnVmZmVyIGFuZCB0aW1lTWFwcGluZyBpbmZvIHRvIGEgc2VwYXJhdGUgY29udHJvbGxlclxuXG4gICAgX3RoaXMuZ29wQnVmZmVyXyA9IFtdO1xuICAgIF90aGlzLnRpbWVNYXBwaW5nXyA9IDA7XG4gICAgX3RoaXMuc2FmZUFwcGVuZF8gPSB2aWRlb2pzJDEuYnJvd3Nlci5JRV9WRVJTSU9OID49IDExO1xuICAgIF90aGlzLmFwcGVuZEluaXRTZWdtZW50XyA9IHtcbiAgICAgIGF1ZGlvOiB0cnVlLFxuICAgICAgdmlkZW86IHRydWVcbiAgICB9O1xuICAgIF90aGlzLnBsYXlsaXN0T2ZMYXN0SW5pdFNlZ21lbnRfID0ge1xuICAgICAgYXVkaW86IG51bGwsXG4gICAgICB2aWRlbzogbnVsbFxuICAgIH07XG4gICAgX3RoaXMuY2FsbFF1ZXVlXyA9IFtdOyAvLyBJZiB0aGUgc2VnbWVudCBsb2FkZXIgcHJlcGFyZXMgdG8gbG9hZCBhIHNlZ21lbnQsIGJ1dCBkb2VzIG5vdCBoYXZlIGVub3VnaFxuICAgIC8vIGluZm9ybWF0aW9uIHlldCB0byBzdGFydCB0aGUgbG9hZGluZyBwcm9jZXNzIChlLmcuLCBpZiB0aGUgYXVkaW8gbG9hZGVyIHdhbnRzIHRvXG4gICAgLy8gbG9hZCBhIHNlZ21lbnQgZnJvbSB0aGUgbmV4dCB0aW1lbGluZSBidXQgdGhlIG1haW4gbG9hZGVyIGhhc24ndCB5ZXQgY3Jvc3NlZCB0aGF0XG4gICAgLy8gdGltZWxpbmUpLCB0aGVuIHRoZSBsb2FkIGNhbGwgd2lsbCBiZSBhZGRlZCB0byB0aGUgcXVldWUgdW50aWwgaXQgaXMgcmVhZHkgdG8gYmVcbiAgICAvLyBwcm9jZXNzZWQuXG5cbiAgICBfdGhpcy5sb2FkUXVldWVfID0gW107XG4gICAgX3RoaXMubWV0YWRhdGFRdWV1ZV8gPSB7XG4gICAgICBpZDM6IFtdLFxuICAgICAgY2FwdGlvbjogW11cbiAgICB9OyAvLyBGcmFnbWVudGVkIG1wNCBwbGF5YmFja1xuXG4gICAgX3RoaXMuYWN0aXZlSW5pdFNlZ21lbnRJZF8gPSBudWxsO1xuICAgIF90aGlzLmluaXRTZWdtZW50c18gPSB7fTsgLy8gSExTZSBwbGF5YmFja1xuXG4gICAgX3RoaXMuY2FjaGVFbmNyeXB0aW9uS2V5c18gPSBzZXR0aW5ncy5jYWNoZUVuY3J5cHRpb25LZXlzO1xuICAgIF90aGlzLmtleUNhY2hlXyA9IHt9O1xuICAgIF90aGlzLmRlY3J5cHRlcl8gPSBzZXR0aW5ncy5kZWNyeXB0ZXI7IC8vIE1hbmFnZXMgdGhlIHRyYWNraW5nIGFuZCBnZW5lcmF0aW9uIG9mIHN5bmMtcG9pbnRzLCBtYXBwaW5nc1xuICAgIC8vIGJldHdlZW4gYSB0aW1lIGluIHRoZSBkaXNwbGF5IHRpbWUgYW5kIGEgc2VnbWVudCBpbmRleCB3aXRoaW5cbiAgICAvLyBhIHBsYXlsaXN0XG5cbiAgICBfdGhpcy5zeW5jQ29udHJvbGxlcl8gPSBzZXR0aW5ncy5zeW5jQ29udHJvbGxlcjtcbiAgICBfdGhpcy5zeW5jUG9pbnRfID0ge1xuICAgICAgc2VnbWVudEluZGV4OiAwLFxuICAgICAgdGltZTogMFxuICAgIH07XG4gICAgX3RoaXMudHJhbnNtdXhlcl8gPSBfdGhpcy5jcmVhdGVUcmFuc211eGVyXygpO1xuXG4gICAgX3RoaXMudHJpZ2dlclN5bmNJbmZvVXBkYXRlXyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy50cmlnZ2VyKCdzeW5jaW5mb3VwZGF0ZScpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zeW5jQ29udHJvbGxlcl8ub24oJ3N5bmNpbmZvdXBkYXRlJywgX3RoaXMudHJpZ2dlclN5bmNJbmZvVXBkYXRlXyk7XG5cbiAgICBfdGhpcy5tZWRpYVNvdXJjZV8uYWRkRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMuaXNFbmRPZlN0cmVhbV8oKSkge1xuICAgICAgICBfdGhpcy5lbmRlZF8gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTsgLy8gLi4uZm9yIGRldGVybWluaW5nIHRoZSBmZXRjaCBsb2NhdGlvblxuXG5cbiAgICBfdGhpcy5mZXRjaEF0QnVmZmVyXyA9IGZhbHNlO1xuICAgIF90aGlzLmxvZ2dlcl8gPSBsb2dnZXIoXCJTZWdtZW50TG9hZGVyW1wiICsgX3RoaXMubG9hZGVyVHlwZV8gKyBcIl1cIik7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAnc3RhdGUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVfO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1N0YXRlKSB7XG4gICAgICAgIGlmIChuZXdTdGF0ZSAhPT0gdGhpcy5zdGF0ZV8pIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlcl8odGhpcy5zdGF0ZV8gKyBcIiAtPiBcIiArIG5ld1N0YXRlKTtcbiAgICAgICAgICB0aGlzLnN0YXRlXyA9IG5ld1N0YXRlO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignc3RhdGVjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX3RoaXMuc291cmNlVXBkYXRlcl8ub24oJ3JlYWR5JywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmhhc0Vub3VnaEluZm9Ub0FwcGVuZF8oKSkge1xuICAgICAgICBfdGhpcy5wcm9jZXNzQ2FsbFF1ZXVlXygpO1xuICAgICAgfVxuICAgIH0pOyAvLyBPbmx5IHRoZSBtYWluIGxvYWRlciBuZWVkcyB0byBsaXN0ZW4gZm9yIHBlbmRpbmcgdGltZWxpbmUgY2hhbmdlcywgYXMgdGhlIG1haW5cbiAgICAvLyBsb2FkZXIgc2hvdWxkIHdhaXQgZm9yIGF1ZGlvIHRvIGJlIHJlYWR5IHRvIGNoYW5nZSBpdHMgdGltZWxpbmUgc28gdGhhdCBib3RoIG1haW5cbiAgICAvLyBhbmQgYXVkaW8gdGltZWxpbmVzIGNoYW5nZSB0b2dldGhlci4gRm9yIG1vcmUgZGV0YWlscywgc2VlIHRoZVxuICAgIC8vIHNob3VsZFdhaXRGb3JUaW1lbGluZUNoYW5nZSBmdW5jdGlvbi5cblxuXG4gICAgaWYgKF90aGlzLmxvYWRlclR5cGVfID09PSAnbWFpbicpIHtcbiAgICAgIF90aGlzLnRpbWVsaW5lQ2hhbmdlQ29udHJvbGxlcl8ub24oJ3BlbmRpbmd0aW1lbGluZWNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLmhhc0Vub3VnaEluZm9Ub0FwcGVuZF8oKSkge1xuICAgICAgICAgIF90aGlzLnByb2Nlc3NDYWxsUXVldWVfKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gLy8gVGhlIG1haW4gbG9hZGVyIG9ubHkgbGlzdGVucyBvbiBwZW5kaW5nIHRpbWVsaW5lIGNoYW5nZXMsIGJ1dCB0aGUgYXVkaW8gbG9hZGVyLFxuICAgIC8vIHNpbmNlIGl0cyBsb2FkcyBmb2xsb3cgbWFpbiwgbmVlZHMgdG8gbGlzdGVuIG9uIHRpbWVsaW5lIGNoYW5nZXMuIEZvciBtb3JlIGRldGFpbHMsXG4gICAgLy8gc2VlIHRoZSBzaG91bGRXYWl0Rm9yVGltZWxpbmVDaGFuZ2UgZnVuY3Rpb24uXG5cblxuICAgIGlmIChfdGhpcy5sb2FkZXJUeXBlXyA9PT0gJ2F1ZGlvJykge1xuICAgICAgX3RoaXMudGltZWxpbmVDaGFuZ2VDb250cm9sbGVyXy5vbigndGltZWxpbmVjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5oYXNFbm91Z2hJbmZvVG9Mb2FkXygpKSB7XG4gICAgICAgICAgX3RoaXMucHJvY2Vzc0xvYWRRdWV1ZV8oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdGhpcy5oYXNFbm91Z2hJbmZvVG9BcHBlbmRfKCkpIHtcbiAgICAgICAgICBfdGhpcy5wcm9jZXNzQ2FsbFF1ZXVlXygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2VnbWVudExvYWRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZVRyYW5zbXV4ZXJfID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNtdXhlcl8oKSB7XG4gICAgdmFyIHRyYW5zbXV4ZXIgPSBuZXcgVHJhbnNtdXhXb3JrZXIoKTtcbiAgICB0cmFuc211eGVyLnBvc3RNZXNzYWdlKHtcbiAgICAgIGFjdGlvbjogJ2luaXQnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICByZW11eDogZmFsc2UsXG4gICAgICAgIGFsaWduR29wc0F0RW5kOiB0aGlzLnNhZmVBcHBlbmRfLFxuICAgICAgICBrZWVwT3JpZ2luYWxUaW1lc3RhbXBzOiB0cnVlLFxuICAgICAgICBoYW5kbGVQYXJ0aWFsRGF0YTogdGhpcy5oYW5kbGVQYXJ0aWFsRGF0YV9cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHJhbnNtdXhlcjtcbiAgfVxuICAvKipcbiAgICogcmVzZXQgYWxsIG9mIG91ciBtZWRpYSBzdGF0c1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNldFN0YXRzXyA9IGZ1bmN0aW9uIHJlc2V0U3RhdHNfKCkge1xuICAgIHRoaXMubWVkaWFCeXRlc1RyYW5zZmVycmVkID0gMDtcbiAgICB0aGlzLm1lZGlhUmVxdWVzdHMgPSAwO1xuICAgIHRoaXMubWVkaWFSZXF1ZXN0c0Fib3J0ZWQgPSAwO1xuICAgIHRoaXMubWVkaWFSZXF1ZXN0c1RpbWVkb3V0ID0gMDtcbiAgICB0aGlzLm1lZGlhUmVxdWVzdHNFcnJvcmVkID0gMDtcbiAgICB0aGlzLm1lZGlhVHJhbnNmZXJEdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5tZWRpYVNlY29uZHNMb2FkZWQgPSAwO1xuICB9XG4gIC8qKlxuICAgKiBkaXNwb3NlIG9mIHRoZSBTZWdtZW50TG9hZGVyIGFuZCByZXNldCB0byB0aGUgZGVmYXVsdCBzdGF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2Rpc3Bvc2UnKTtcbiAgICB0aGlzLnN0YXRlID0gJ0RJU1BPU0VEJztcbiAgICB0aGlzLnBhdXNlKCk7XG4gICAgdGhpcy5hYm9ydF8oKTtcblxuICAgIGlmICh0aGlzLnRyYW5zbXV4ZXJfKSB7XG4gICAgICB0aGlzLnRyYW5zbXV4ZXJfLnRlcm1pbmF0ZSgpOyAvLyBBbHRob3VnaCBpdCBpc24ndCBhbiBpbnN0YW5jZSBvZiBhIGNsYXNzLCB0aGUgc2VnbWVudCB0cmFuc211eGVyIG11c3Qgc3RpbGwgYmVcbiAgICAgIC8vIGNsZWFuZWQgdXAuXG5cbiAgICAgIHNlZ21lbnRUcmFuc211eGVyLmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc2V0U3RhdHNfKCk7XG5cbiAgICBpZiAodGhpcy5jaGVja0J1ZmZlclRpbWVvdXRfKSB7XG4gICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5jaGVja0J1ZmZlclRpbWVvdXRfKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zeW5jQ29udHJvbGxlcl8gJiYgdGhpcy50cmlnZ2VyU3luY0luZm9VcGRhdGVfKSB7XG4gICAgICB0aGlzLnN5bmNDb250cm9sbGVyXy5vZmYoJ3N5bmNpbmZvdXBkYXRlJywgdGhpcy50cmlnZ2VyU3luY0luZm9VcGRhdGVfKTtcbiAgICB9XG5cbiAgICB0aGlzLm9mZigpO1xuICB9O1xuXG4gIF9wcm90by5zZXRBdWRpbyA9IGZ1bmN0aW9uIHNldEF1ZGlvKGVuYWJsZSkge1xuICAgIHRoaXMuYXVkaW9EaXNhYmxlZF8gPSAhZW5hYmxlO1xuXG4gICAgaWYgKGVuYWJsZSkge1xuICAgICAgdGhpcy5hcHBlbmRJbml0U2VnbWVudF8uYXVkaW8gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZW1vdmUgY3VycmVudCB0cmFjayBhdWRpbyBpZiBpdCBnZXRzIGRpc2FibGVkXG4gICAgICB0aGlzLnNvdXJjZVVwZGF0ZXJfLnJlbW92ZUF1ZGlvKDAsIHRoaXMuZHVyYXRpb25fKCkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogYWJvcnQgYW55dGhpbmcgdGhhdCBpcyBjdXJyZW50bHkgZG9pbmcgb24gd2l0aCB0aGUgU2VnbWVudExvYWRlclxuICAgKiBhbmQgcmVzZXQgdG8gYSBkZWZhdWx0IHN0YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFib3J0ID0gZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgIT09ICdXQUlUSU5HJykge1xuICAgICAgaWYgKHRoaXMucGVuZGluZ1NlZ21lbnRfKSB7XG4gICAgICAgIHRoaXMucGVuZGluZ1NlZ21lbnRfID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuYWJvcnRfKCk7IC8vIFdlIGFib3J0ZWQgdGhlIHJlcXVlc3RzIHdlIHdlcmUgd2FpdGluZyBvbiwgc28gcmVzZXQgdGhlIGxvYWRlcidzIHN0YXRlIHRvIFJFQURZXG4gICAgLy8gc2luY2Ugd2UgYXJlIG5vIGxvbmdlciBcIndhaXRpbmdcIiBvbiBhbnkgcmVxdWVzdHMuIFhIUiBjYWxsYmFjayBpcyBub3QgYWx3YXlzIHJ1blxuICAgIC8vIHdoZW4gdGhlIHJlcXVlc3QgaXMgYWJvcnRlZC4gVGhpcyB3aWxsIHByZXZlbnQgdGhlIGxvYWRlciBmcm9tIGJlaW5nIHN0dWNrIGluIHRoZVxuICAgIC8vIFdBSVRJTkcgc3RhdGUgaW5kZWZpbml0ZWx5LlxuXG4gICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7IC8vIGRvbid0IHdhaXQgZm9yIGJ1ZmZlciBjaGVjayB0aW1lb3V0cyB0byBiZWdpbiBmZXRjaGluZyB0aGVcbiAgICAvLyBuZXh0IHNlZ21lbnRcblxuICAgIGlmICghdGhpcy5wYXVzZWQoKSkge1xuICAgICAgdGhpcy5tb25pdG9yQnVmZmVyXygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogYWJvcnQgYWxsIHBlbmRpbmcgeGhyIHJlcXVlc3RzIGFuZCBudWxsIGFueSBwZW5kaW5nIHNlZ2VtZW50c1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hYm9ydF8gPSBmdW5jdGlvbiBhYm9ydF8oKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZ1NlZ21lbnRfICYmIHRoaXMucGVuZGluZ1NlZ21lbnRfLmFib3J0UmVxdWVzdHMpIHtcbiAgICAgIHRoaXMucGVuZGluZ1NlZ21lbnRfLmFib3J0UmVxdWVzdHMoKTtcbiAgICB9IC8vIGNsZWFyIG91dCB0aGUgc2VnbWVudCBiZWluZyBwcm9jZXNzZWRcblxuXG4gICAgdGhpcy5wZW5kaW5nU2VnbWVudF8gPSBudWxsO1xuICAgIHRoaXMuY2FsbFF1ZXVlXyA9IFtdO1xuICAgIHRoaXMubG9hZFF1ZXVlXyA9IFtdO1xuICAgIHRoaXMubWV0YWRhdGFRdWV1ZV8uaWQzID0gW107XG4gICAgdGhpcy5tZXRhZGF0YVF1ZXVlXy5jYXB0aW9uID0gW107XG4gICAgdGhpcy50aW1lbGluZUNoYW5nZUNvbnRyb2xsZXJfLmNsZWFyUGVuZGluZ1RpbWVsaW5lQ2hhbmdlKHRoaXMubG9hZGVyVHlwZV8pO1xuICB9O1xuXG4gIF9wcm90by5jaGVja0ZvckFib3J0XyA9IGZ1bmN0aW9uIGNoZWNrRm9yQWJvcnRfKHJlcXVlc3RJZCkge1xuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBBUFBFTkRJTkcsIHRoZW4gYWJvcnRzIHdpbGwgbm90IG1vZGlmeSB0aGUgc3RhdGUsIG1lYW5pbmcgdGhlIGZpcnN0XG4gICAgLy8gY2FsbGJhY2sgdGhhdCBoYXBwZW5zIHNob3VsZCByZXNldCB0aGUgc3RhdGUgdG8gUkVBRFkgc28gdGhhdCBsb2FkaW5nIGNhbiBjb250aW51ZS5cbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ0FQUEVORElORycgJiYgIXRoaXMucGVuZGluZ1NlZ21lbnRfKSB7XG4gICAgICB0aGlzLnN0YXRlID0gJ1JFQURZJztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5wZW5kaW5nU2VnbWVudF8gfHwgdGhpcy5wZW5kaW5nU2VnbWVudF8ucmVxdWVzdElkICE9PSByZXF1ZXN0SWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogc2V0IGFuIGVycm9yIG9uIHRoZSBzZWdtZW50IGxvYWRlciBhbmQgbnVsbCBvdXQgYW55IHBlbmRpbmcgc2VnZW1lbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIHRoZSBlcnJvciB0byBzZXQgb24gdGhlIFNlZ21lbnRMb2FkZXJcbiAgICogQHJldHVybiB7RXJyb3J9IHRoZSBlcnJvciB0aGF0IHdhcyBzZXQgb3IgdGhhdCBpcyBjdXJyZW50bHkgc2V0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVycm9yID0gZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBfZXJyb3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmxvZ2dlcl8oJ2Vycm9yIG9jY3VycmVkOicsIF9lcnJvcik7XG4gICAgICB0aGlzLmVycm9yXyA9IF9lcnJvcjtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdTZWdtZW50XyA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXMuZXJyb3JfO1xuICB9O1xuXG4gIF9wcm90by5lbmRPZlN0cmVhbSA9IGZ1bmN0aW9uIGVuZE9mU3RyZWFtKCkge1xuICAgIHRoaXMuZW5kZWRfID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLnRyYW5zbXV4ZXJfKSB7XG4gICAgICAvLyBuZWVkIHRvIGNsZWFyIG91dCBhbnkgY2FjaGVkIGRhdGEgdG8gcHJlcGFyZSBmb3IgdGhlIG5ldyBzZWdtZW50XG4gICAgICBzZWdtZW50VHJhbnNtdXhlci5yZXNldCh0aGlzLnRyYW5zbXV4ZXJfKTtcbiAgICB9XG5cbiAgICB0aGlzLmdvcEJ1ZmZlcl8ubGVuZ3RoID0gMDtcbiAgICB0aGlzLnBhdXNlKCk7XG4gICAgdGhpcy50cmlnZ2VyKCdlbmRlZCcpO1xuICB9XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hpY2ggdGltZSByYW5nZXMgYXJlIGJ1ZmZlcmVkXG4gICAqXG4gICAqIEByZXR1cm4ge1RpbWVSYW5nZX1cbiAgICogICAgICAgICBUaW1lUmFuZ2Ugb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBidWZmZXJlZCByYW5nZXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYnVmZmVyZWRfID0gZnVuY3Rpb24gYnVmZmVyZWRfKCkge1xuICAgIGlmICghdGhpcy5zb3VyY2VVcGRhdGVyXyB8fCAhdGhpcy5zdGFydGluZ01lZGlhSW5mb18pIHtcbiAgICAgIHJldHVybiB2aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlcygpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxvYWRlclR5cGVfID09PSAnbWFpbicpIHtcbiAgICAgIHZhciBfdGhpcyRzdGFydGluZ01lZGlhSW4gPSB0aGlzLnN0YXJ0aW5nTWVkaWFJbmZvXyxcbiAgICAgICAgICBoYXNBdWRpbyA9IF90aGlzJHN0YXJ0aW5nTWVkaWFJbi5oYXNBdWRpbyxcbiAgICAgICAgICBoYXNWaWRlbyA9IF90aGlzJHN0YXJ0aW5nTWVkaWFJbi5oYXNWaWRlbyxcbiAgICAgICAgICBpc011eGVkID0gX3RoaXMkc3RhcnRpbmdNZWRpYUluLmlzTXV4ZWQ7XG5cbiAgICAgIGlmIChoYXNWaWRlbyAmJiBoYXNBdWRpbyAmJiAhdGhpcy5hdWRpb0Rpc2FibGVkXyAmJiAhaXNNdXhlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VVcGRhdGVyXy5idWZmZXJlZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzVmlkZW8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlVXBkYXRlcl8udmlkZW9CdWZmZXJlZCgpO1xuICAgICAgfVxuICAgIH0gLy8gT25lIGNhc2UgdGhhdCBjYW4gYmUgaWdub3JlZCBmb3Igbm93IGlzIGF1ZGlvIG9ubHkgd2l0aCBhbHQgYXVkaW8sXG4gICAgLy8gYXMgd2UgZG9uJ3QgeWV0IGhhdmUgcHJvcGVyIHN1cHBvcnQgZm9yIHRoYXQuXG5cblxuICAgIHJldHVybiB0aGlzLnNvdXJjZVVwZGF0ZXJfLmF1ZGlvQnVmZmVyZWQoKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhbmQgc2V0cyBpbml0IHNlZ21lbnQgZm9yIHRoZSBwcm92aWRlZCBtYXBcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcFxuICAgKiAgICAgICAgVGhlIG1hcCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBpbml0IHNlZ21lbnQgdG8gZ2V0IG9yIHNldFxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBzZXRcbiAgICogICAgICAgIElmIHRydWUsIHRoZSBpbml0IHNlZ21lbnQgZm9yIHRoZSBwcm92aWRlZCBtYXAgc2hvdWxkIGJlIHNhdmVkXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogICAgICAgICBtYXAgb2JqZWN0IGZvciBkZXNpcmVkIGluaXQgc2VnbWVudFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbml0U2VnbWVudEZvck1hcCA9IGZ1bmN0aW9uIGluaXRTZWdtZW50Rm9yTWFwKG1hcCwgc2V0KSB7XG4gICAgaWYgKHNldCA9PT0gdm9pZCAwKSB7XG4gICAgICBzZXQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIW1hcCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGlkID0gaW5pdFNlZ21lbnRJZChtYXApO1xuICAgIHZhciBzdG9yZWRNYXAgPSB0aGlzLmluaXRTZWdtZW50c19baWRdO1xuXG4gICAgaWYgKHNldCAmJiAhc3RvcmVkTWFwICYmIG1hcC5ieXRlcykge1xuICAgICAgdGhpcy5pbml0U2VnbWVudHNfW2lkXSA9IHN0b3JlZE1hcCA9IHtcbiAgICAgICAgcmVzb2x2ZWRVcmk6IG1hcC5yZXNvbHZlZFVyaSxcbiAgICAgICAgYnl0ZXJhbmdlOiBtYXAuYnl0ZXJhbmdlLFxuICAgICAgICBieXRlczogbWFwLmJ5dGVzLFxuICAgICAgICB0cmFja3M6IG1hcC50cmFja3MsXG4gICAgICAgIHRpbWVzY2FsZXM6IG1hcC50aW1lc2NhbGVzXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzdG9yZWRNYXAgfHwgbWFwO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGFuZCBzZXRzIGtleSBmb3IgdGhlIHByb3ZpZGVkIGtleVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0ga2V5XG4gICAqICAgICAgICBUaGUga2V5IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGtleSB0byBnZXQgb3Igc2V0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNldFxuICAgKiAgICAgICAgSWYgdHJ1ZSwgdGhlIGtleSBmb3IgdGhlIHByb3ZpZGVkIGtleSBzaG91bGQgYmUgc2F2ZWRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiAgICAgICAgIEtleSBvYmplY3QgZm9yIGRlc2lyZWQga2V5XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNlZ21lbnRLZXkgPSBmdW5jdGlvbiBzZWdtZW50S2V5KGtleSwgc2V0KSB7XG4gICAgaWYgKHNldCA9PT0gdm9pZCAwKSB7XG4gICAgICBzZXQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWtleSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGlkID0gc2VnbWVudEtleUlkKGtleSk7XG4gICAgdmFyIHN0b3JlZEtleSA9IHRoaXMua2V5Q2FjaGVfW2lkXTsgLy8gVE9ETzogV2Ugc2hvdWxkIHVzZSB0aGUgSFRUUCBFeHBpcmVzIGhlYWRlciB0byBpbnZhbGlkYXRlIG91ciBjYWNoZSBwZXJcbiAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtcGFudG9zLWh0dHAtbGl2ZS1zdHJlYW1pbmctMjMjc2VjdGlvbi02LjIuM1xuXG4gICAgaWYgKHRoaXMuY2FjaGVFbmNyeXB0aW9uS2V5c18gJiYgc2V0ICYmICFzdG9yZWRLZXkgJiYga2V5LmJ5dGVzKSB7XG4gICAgICB0aGlzLmtleUNhY2hlX1tpZF0gPSBzdG9yZWRLZXkgPSB7XG4gICAgICAgIHJlc29sdmVkVXJpOiBrZXkucmVzb2x2ZWRVcmksXG4gICAgICAgIGJ5dGVzOiBrZXkuYnl0ZXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIHJlc29sdmVkVXJpOiAoc3RvcmVkS2V5IHx8IGtleSkucmVzb2x2ZWRVcmlcbiAgICB9O1xuXG4gICAgaWYgKHN0b3JlZEtleSkge1xuICAgICAgcmVzdWx0LmJ5dGVzID0gc3RvcmVkS2V5LmJ5dGVzO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhbGwgY29uZmlndXJhdGlvbiByZXF1aXJlZCBmb3IgbG9hZGluZyBpcyBwcmVzZW50LCBvdGhlcndpc2UgZmFsc2UuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFsbCBjb25maWd1cmF0aW9uIGlzIHJlYWR5IGZvciBsb2FkaW5nXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvdWxkQmVnaW5Mb2FkaW5nXyA9IGZ1bmN0aW9uIGNvdWxkQmVnaW5Mb2FkaW5nXygpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5bGlzdF8gJiYgIXRoaXMucGF1c2VkKCk7XG4gIH1cbiAgLyoqXG4gICAqIGxvYWQgYSBwbGF5bGlzdCBhbmQgc3RhcnQgdG8gZmlsbCB0aGUgYnVmZmVyXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxvYWQgPSBmdW5jdGlvbiBsb2FkKCkge1xuICAgIC8vIHVuLXBhdXNlXG4gICAgdGhpcy5tb25pdG9yQnVmZmVyXygpOyAvLyBpZiB3ZSBkb24ndCBoYXZlIGEgcGxheWxpc3QgeWV0LCBrZWVwIHdhaXRpbmcgZm9yIG9uZSB0byBiZVxuICAgIC8vIHNwZWNpZmllZFxuXG4gICAgaWYgKCF0aGlzLnBsYXlsaXN0Xykge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gbm90IHN1cmUgaWYgdGhpcyBpcyB0aGUgYmVzdCBwbGFjZSBmb3IgdGhpc1xuXG5cbiAgICB0aGlzLnN5bmNDb250cm9sbGVyXy5zZXREYXRlVGltZU1hcHBpbmcodGhpcy5wbGF5bGlzdF8pOyAvLyBpZiBhbGwgdGhlIGNvbmZpZ3VyYXRpb24gaXMgcmVhZHksIGluaXRpYWxpemUgYW5kIGJlZ2luIGxvYWRpbmdcblxuICAgIGlmICh0aGlzLnN0YXRlID09PSAnSU5JVCcgJiYgdGhpcy5jb3VsZEJlZ2luTG9hZGluZ18oKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5pdF8oKTtcbiAgICB9IC8vIGlmIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgcHJvY2Vzc2luZyBhIHNlZ21lbnQgYWxyZWFkeSwgZG9uJ3RcbiAgICAvLyBraWNrIG9mZiBhbiBhZGRpdGlvbmFsIHNlZ21lbnQgcmVxdWVzdFxuXG5cbiAgICBpZiAoIXRoaXMuY291bGRCZWdpbkxvYWRpbmdfKCkgfHwgdGhpcy5zdGF0ZSAhPT0gJ1JFQURZJyAmJiB0aGlzLnN0YXRlICE9PSAnSU5JVCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0gJ1JFQURZJztcbiAgfVxuICAvKipcbiAgICogT25jZSBhbGwgdGhlIHN0YXJ0aW5nIHBhcmFtZXRlcnMgaGF2ZSBiZWVuIHNwZWNpZmllZCwgYmVnaW5cbiAgICogb3BlcmF0aW9uLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBpbnZva2VkIGZyb20gdGhlIElOSVRcbiAgICogc3RhdGUuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluaXRfID0gZnVuY3Rpb24gaW5pdF8oKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7IC8vIGlmIHRoaXMgaXMgdGhlIGF1ZGlvIHNlZ21lbnQgbG9hZGVyLCBhbmQgaXQgaGFzbid0IGJlZW4gaW5pdGVkIGJlZm9yZSwgdGhlbiBhbnkgb2xkXG4gICAgLy8gYXVkaW8gZGF0YSBmcm9tIHRoZSBtdXhlZCBjb250ZW50IHNob3VsZCBiZSByZW1vdmVkXG5cbiAgICB0aGlzLnJlc2V0RXZlcnl0aGluZygpO1xuICAgIHJldHVybiB0aGlzLm1vbml0b3JCdWZmZXJfKCk7XG4gIH1cbiAgLyoqXG4gICAqIHNldCBhIHBsYXlsaXN0IG9uIHRoZSBzZWdtZW50IGxvYWRlclxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXlsaXN0TG9hZGVyfSBtZWRpYSB0aGUgcGxheWxpc3QgdG8gc2V0IG9uIHRoZSBzZWdtZW50IGxvYWRlclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wbGF5bGlzdCA9IGZ1bmN0aW9uIHBsYXlsaXN0KG5ld1BsYXlsaXN0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICghbmV3UGxheWxpc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb2xkUGxheWxpc3QgPSB0aGlzLnBsYXlsaXN0XztcbiAgICB2YXIgc2VnbWVudEluZm8gPSB0aGlzLnBlbmRpbmdTZWdtZW50XztcbiAgICB0aGlzLnBsYXlsaXN0XyA9IG5ld1BsYXlsaXN0O1xuICAgIHRoaXMueGhyT3B0aW9uc18gPSBvcHRpb25zOyAvLyB3aGVuIHdlIGhhdmVuJ3Qgc3RhcnRlZCBwbGF5aW5nIHlldCwgdGhlIHN0YXJ0IG9mIGEgbGl2ZSBwbGF5bGlzdFxuICAgIC8vIGlzIGFsd2F5cyBvdXIgemVyby10aW1lIHNvIGZvcmNlIGEgc3luYyB1cGRhdGUgZWFjaCB0aW1lIHRoZSBwbGF5bGlzdFxuICAgIC8vIGlzIHJlZnJlc2hlZCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAvL1xuICAgIC8vIFVzZSB0aGUgSU5JVCBzdGF0ZSB0byBkZXRlcm1pbmUgaWYgcGxheWJhY2sgaGFzIHN0YXJ0ZWQsIGFzIHRoZSBwbGF5bGlzdCBzeW5jIGluZm9cbiAgICAvLyBzaG91bGQgYmUgZml4ZWQgb25jZSByZXF1ZXN0cyBiZWdpbiAoYXMgc3luYyBwb2ludHMgYXJlIGdlbmVyYXRlZCBiYXNlZCBvbiBzeW5jXG4gICAgLy8gaW5mbyksIGJ1dCBub3QgYmVmb3JlIHRoZW4uXG5cbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ0lOSVQnKSB7XG4gICAgICBuZXdQbGF5bGlzdC5zeW5jSW5mbyA9IHtcbiAgICAgICAgbWVkaWFTZXF1ZW5jZTogbmV3UGxheWxpc3QubWVkaWFTZXF1ZW5jZSxcbiAgICAgICAgdGltZTogMFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgb2xkSWQgPSBudWxsO1xuXG4gICAgaWYgKG9sZFBsYXlsaXN0KSB7XG4gICAgICBpZiAob2xkUGxheWxpc3QuaWQpIHtcbiAgICAgICAgb2xkSWQgPSBvbGRQbGF5bGlzdC5pZDtcbiAgICAgIH0gZWxzZSBpZiAob2xkUGxheWxpc3QudXJpKSB7XG4gICAgICAgIG9sZElkID0gb2xkUGxheWxpc3QudXJpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyXyhcInBsYXlsaXN0IHVwZGF0ZSBbXCIgKyBvbGRJZCArIFwiID0+IFwiICsgKG5ld1BsYXlsaXN0LmlkIHx8IG5ld1BsYXlsaXN0LnVyaSkgKyBcIl1cIik7IC8vIGluIFZPRCwgdGhpcyBpcyBhbHdheXMgYSByZW5kaXRpb24gc3dpdGNoIChvciB3ZSB1cGRhdGVkIG91ciBzeW5jSW5mbyBhYm92ZSlcbiAgICAvLyBpbiBMSVZFLCB3ZSBhbHdheXMgd2FudCB0byB1cGRhdGUgd2l0aCBuZXcgcGxheWxpc3RzIChpbmNsdWRpbmcgcmVmcmVzaGVzKVxuXG4gICAgdGhpcy50cmlnZ2VyKCdzeW5jaW5mb3VwZGF0ZScpOyAvLyBpZiB3ZSB3ZXJlIHVucGF1c2VkIGJ1dCB3YWl0aW5nIGZvciBhIHBsYXlsaXN0LCBzdGFydFxuICAgIC8vIGJ1ZmZlcmluZyBub3dcblxuICAgIGlmICh0aGlzLnN0YXRlID09PSAnSU5JVCcgJiYgdGhpcy5jb3VsZEJlZ2luTG9hZGluZ18oKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5pdF8oKTtcbiAgICB9XG5cbiAgICBpZiAoIW9sZFBsYXlsaXN0IHx8IG9sZFBsYXlsaXN0LnVyaSAhPT0gbmV3UGxheWxpc3QudXJpKSB7XG4gICAgICBpZiAodGhpcy5tZWRpYUluZGV4ICE9PSBudWxsIHx8IHRoaXMuaGFuZGxlUGFydGlhbERhdGFfKSB7XG4gICAgICAgIC8vIHdlIG11c3QgXCJyZXN5bmNcIiB0aGUgc2VnbWVudCBsb2FkZXIgd2hlbiB3ZSBzd2l0Y2ggcmVuZGl0aW9ucyBhbmRcbiAgICAgICAgLy8gdGhlIHNlZ21lbnQgbG9hZGVyIGlzIGFscmVhZHkgc3luY2VkIHRvIHRoZSBwcmV2aW91cyByZW5kaXRpb25cbiAgICAgICAgLy9cbiAgICAgICAgLy8gb3IgaWYgd2UncmUgaGFuZGxpbmcgcGFydGlhbCBkYXRhLCB3ZSBuZWVkIHRvIGVuc3VyZSB0aGUgdHJhbnNtdXhlciBpcyBjbGVhcmVkXG4gICAgICAgIC8vIG91dCBiZWZvcmUgd2Ugc3RhcnQgYWRkaW5nIG1vcmUgZGF0YVxuICAgICAgICB0aGlzLnJlc3luY0xvYWRlcigpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmN1cnJlbnRNZWRpYUluZm9fID0gdm9pZCAwO1xuICAgICAgdGhpcy50cmlnZ2VyKCdwbGF5bGlzdHVwZGF0ZScpOyAvLyB0aGUgcmVzdCBvZiB0aGlzIGZ1bmN0aW9uIGRlcGVuZHMgb24gYG9sZFBsYXlsaXN0YCBiZWluZyBkZWZpbmVkXG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHdlIHJlbG9hZGVkIHRoZSBzYW1lIHBsYXlsaXN0IHNvIHdlIGFyZSBpbiBhIGxpdmUgc2NlbmFyaW9cbiAgICAvLyBhbmQgd2Ugd2lsbCBsaWtlbHkgbmVlZCB0byBhZGp1c3QgdGhlIG1lZGlhSW5kZXhcblxuXG4gICAgdmFyIG1lZGlhU2VxdWVuY2VEaWZmID0gbmV3UGxheWxpc3QubWVkaWFTZXF1ZW5jZSAtIG9sZFBsYXlsaXN0Lm1lZGlhU2VxdWVuY2U7XG4gICAgdGhpcy5sb2dnZXJfKFwibGl2ZSB3aW5kb3cgc2hpZnQgW1wiICsgbWVkaWFTZXF1ZW5jZURpZmYgKyBcIl1cIik7IC8vIHVwZGF0ZSB0aGUgbWVkaWFJbmRleCBvbiB0aGUgU2VnbWVudExvYWRlclxuICAgIC8vIHRoaXMgaXMgaW1wb3J0YW50IGJlY2F1c2Ugd2UgY2FuIGFib3J0IGEgcmVxdWVzdCBhbmQgdGhpcyB2YWx1ZSBtdXN0IGJlXG4gICAgLy8gZXF1YWwgdG8gdGhlIGxhc3QgYXBwZW5kZWQgbWVkaWFJbmRleFxuXG4gICAgaWYgKHRoaXMubWVkaWFJbmRleCAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5tZWRpYUluZGV4IC09IG1lZGlhU2VxdWVuY2VEaWZmO1xuICAgIH0gLy8gdXBkYXRlIHRoZSBtZWRpYUluZGV4IG9uIHRoZSBTZWdtZW50SW5mbyBvYmplY3RcbiAgICAvLyB0aGlzIGlzIGltcG9ydGFudCBiZWNhdXNlIHdlIHdpbGwgdXBkYXRlIHRoaXMubWVkaWFJbmRleCB3aXRoIHRoaXMgdmFsdWVcbiAgICAvLyBpbiBgaGFuZGxlQXBwZW5kc0RvbmVfYCBhZnRlciB0aGUgc2VnbWVudCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgYXBwZW5kZWRcblxuXG4gICAgaWYgKHNlZ21lbnRJbmZvKSB7XG4gICAgICBzZWdtZW50SW5mby5tZWRpYUluZGV4IC09IG1lZGlhU2VxdWVuY2VEaWZmOyAvLyB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgcmVmZXJlbmNlZCBzZWdtZW50IHNvIHRoYXQgdGltaW5nIGluZm9ybWF0aW9uIGlzXG4gICAgICAvLyBzYXZlZCBmb3IgdGhlIG5ldyBwbGF5bGlzdCdzIHNlZ21lbnQsIGhvd2V2ZXIsIGlmIHRoZSBzZWdtZW50IGZlbGwgb2ZmIHRoZVxuICAgICAgLy8gcGxheWxpc3QsIHdlIGNhbiBsZWF2ZSB0aGUgb2xkIHJlZmVyZW5jZSBhbmQganVzdCBsb3NlIHRoZSB0aW1pbmcgaW5mb1xuXG4gICAgICBpZiAoc2VnbWVudEluZm8ubWVkaWFJbmRleCA+PSAwKSB7XG4gICAgICAgIHNlZ21lbnRJbmZvLnNlZ21lbnQgPSBuZXdQbGF5bGlzdC5zZWdtZW50c1tzZWdtZW50SW5mby5tZWRpYUluZGV4XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN5bmNDb250cm9sbGVyXy5zYXZlRXhwaXJlZFNlZ21lbnRJbmZvKG9sZFBsYXlsaXN0LCBuZXdQbGF5bGlzdCk7XG4gIH1cbiAgLyoqXG4gICAqIFByZXZlbnQgdGhlIGxvYWRlciBmcm9tIGZldGNoaW5nIGFkZGl0aW9uYWwgc2VnbWVudHMuIElmIHRoZXJlXG4gICAqIGlzIGEgc2VnbWVudCByZXF1ZXN0IG91dHN0YW5kaW5nLCBpdCB3aWxsIGZpbmlzaCBwcm9jZXNzaW5nXG4gICAqIGJlZm9yZSB0aGUgbG9hZGVyIGhhbHRzLiBBIHNlZ21lbnQgbG9hZGVyIGNhbiBiZSB1bnBhdXNlZCBieVxuICAgKiBjYWxsaW5nIGxvYWQoKS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBpZiAodGhpcy5jaGVja0J1ZmZlclRpbWVvdXRfKSB7XG4gICAgICB3aW5kb3ckMS5jbGVhclRpbWVvdXQodGhpcy5jaGVja0J1ZmZlclRpbWVvdXRfKTtcbiAgICAgIHRoaXMuY2hlY2tCdWZmZXJUaW1lb3V0XyA9IG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHNlZ21lbnQgbG9hZGVyIGlzIGZldGNoaW5nIGFkZGl0aW9uYWxcbiAgICogc2VnbWVudHMgd2hlbiBnaXZlbiB0aGUgb3Bwb3J0dW5pdHkuIFRoaXMgcHJvcGVydHkgY2FuIGJlXG4gICAqIG1vZGlmaWVkIHRocm91Z2ggY2FsbHMgdG8gcGF1c2UoKSBhbmQgbG9hZCgpLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXVzZWQgPSBmdW5jdGlvbiBwYXVzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2tCdWZmZXJUaW1lb3V0XyA9PT0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGFsbCB0aGUgYnVmZmVyZWQgZGF0YSBhbmQgcmVzZXQgdGhlIFNlZ21lbnRMb2FkZXJcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2RvbmVdIGFuIG9wdGlvbmFsIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIHJlbW92ZVxuICAgKiBvcGVyYXRpb24gaXMgY29tcGxldGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXRFdmVyeXRoaW5nID0gZnVuY3Rpb24gcmVzZXRFdmVyeXRoaW5nKGRvbmUpIHtcbiAgICB0aGlzLmVuZGVkXyA9IGZhbHNlO1xuICAgIHRoaXMuYXBwZW5kSW5pdFNlZ21lbnRfID0ge1xuICAgICAgYXVkaW86IHRydWUsXG4gICAgICB2aWRlbzogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5yZXNldExvYWRlcigpOyAvLyByZW1vdmUgZnJvbSAwLCB0aGUgZWFybGllc3QgcG9pbnQsIHRvIEluZmluaXR5LCB0byBzaWduaWZ5IHJlbW92YWwgb2YgZXZlcnl0aGluZy5cbiAgICAvLyBWVFQgU2VnbWVudCBMb2FkZXIgZG9lc24ndCBuZWVkIHRvIGRvIGFueXRoaW5nIGJ1dCBpbiB0aGUgcmVndWxhciBTZWdtZW50TG9hZGVyLFxuICAgIC8vIHdlIHRoZW4gY2xhbXAgdGhlIHZhbHVlIHRvIGR1cmF0aW9uIGlmIG5lY2Vzc2FyeS5cblxuICAgIHRoaXMucmVtb3ZlKDAsIEluZmluaXR5LCBkb25lKTsgLy8gY2xlYXJzIGZtcDQgY2FwdGlvbnNcblxuICAgIGlmICh0aGlzLnRyYW5zbXV4ZXJfKSB7XG4gICAgICB0aGlzLnRyYW5zbXV4ZXJfLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgYWN0aW9uOiAnY2xlYXJBbGxNcDRDYXB0aW9ucydcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRm9yY2UgdGhlIFNlZ21lbnRMb2FkZXIgdG8gcmVzeW5jIGFuZCBzdGFydCBsb2FkaW5nIGFyb3VuZCB0aGUgY3VycmVudFRpbWUgaW5zdGVhZFxuICAgKiBvZiBzdGFydGluZyBhdCB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgICpcbiAgICogVXNlZnVsIGZvciBmYXN0IHF1YWxpdHkgY2hhbmdlc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNldExvYWRlciA9IGZ1bmN0aW9uIHJlc2V0TG9hZGVyKCkge1xuICAgIHRoaXMuZmV0Y2hBdEJ1ZmZlcl8gPSBmYWxzZTtcbiAgICB0aGlzLnJlc3luY0xvYWRlcigpO1xuICB9XG4gIC8qKlxuICAgKiBGb3JjZSB0aGUgU2VnbWVudExvYWRlciB0byByZXN0YXJ0IHN5bmNocm9uaXphdGlvbiBhbmQgbWFrZSBhIGNvbnNlcnZhdGl2ZSBndWVzc1xuICAgKiBiZWZvcmUgcmV0dXJuaW5nIHRvIHRoZSBzaW1wbGUgd2Fsay1mb3J3YXJkIG1ldGhvZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXN5bmNMb2FkZXIgPSBmdW5jdGlvbiByZXN5bmNMb2FkZXIoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNtdXhlcl8pIHtcbiAgICAgIC8vIG5lZWQgdG8gY2xlYXIgb3V0IGFueSBjYWNoZWQgZGF0YSB0byBwcmVwYXJlIGZvciB0aGUgbmV3IHNlZ21lbnRcbiAgICAgIHNlZ21lbnRUcmFuc211eGVyLnJlc2V0KHRoaXMudHJhbnNtdXhlcl8pO1xuICAgIH1cblxuICAgIHRoaXMubWVkaWFJbmRleCA9IG51bGw7XG4gICAgdGhpcy5zeW5jUG9pbnRfID0gbnVsbDtcbiAgICB0aGlzLmlzUGVuZGluZ1RpbWVzdGFtcE9mZnNldF8gPSBmYWxzZTtcbiAgICB0aGlzLmNhbGxRdWV1ZV8gPSBbXTtcbiAgICB0aGlzLmxvYWRRdWV1ZV8gPSBbXTtcbiAgICB0aGlzLm1ldGFkYXRhUXVldWVfLmlkMyA9IFtdO1xuICAgIHRoaXMubWV0YWRhdGFRdWV1ZV8uY2FwdGlvbiA9IFtdO1xuICAgIHRoaXMuYWJvcnQoKTtcblxuICAgIGlmICh0aGlzLnRyYW5zbXV4ZXJfKSB7XG4gICAgICB0aGlzLnRyYW5zbXV4ZXJfLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgYWN0aW9uOiAnY2xlYXJQYXJzZWRNcDRDYXB0aW9ucydcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGFueSBkYXRhIGluIHRoZSBzb3VyY2UgYnVmZmVyIGJldHdlZW4gc3RhcnQgYW5kIGVuZCB0aW1lc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSB0aGUgc3RhcnQgdGltZSBvZiB0aGUgcmVnaW9uIHRvIHJlbW92ZSBmcm9tIHRoZSBidWZmZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCAtIHRoZSBlbmQgdGltZSBvZiB0aGUgcmVnaW9uIHRvIHJlbW92ZSBmcm9tIHRoZSBidWZmZXJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2RvbmVdIC0gYW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgcmVtb3ZlXG4gICAqIG9wZXJhdGlvbiBpcyBjb21wbGV0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoc3RhcnQsIGVuZCwgZG9uZSkge1xuICAgIGlmIChkb25lID09PSB2b2lkIDApIHtcbiAgICAgIGRvbmUgPSBmdW5jdGlvbiBkb25lKCkge307XG4gICAgfSAvLyBjbGFtcCBlbmQgdG8gZHVyYXRpb24gaWYgd2UgbmVlZCB0byByZW1vdmUgZXZlcnl0aGluZy5cbiAgICAvLyBUaGlzIGlzIGR1ZSB0byBhIGJyb3dzZXIgYnVnIHRoYXQgY2F1c2VzIGlzc3VlcyBpZiB3ZSByZW1vdmUgdG8gSW5maW5pdHkuXG4gICAgLy8gdmlkZW9qcy92aWRlb2pzLWNvbnRyaWItaGxzIzEyMjVcblxuXG4gICAgaWYgKGVuZCA9PT0gSW5maW5pdHkpIHtcbiAgICAgIGVuZCA9IHRoaXMuZHVyYXRpb25fKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnNvdXJjZVVwZGF0ZXJfIHx8ICF0aGlzLmN1cnJlbnRNZWRpYUluZm9fKSB7XG4gICAgICAvLyBub3RoaW5nIHRvIHJlbW92ZSBpZiB3ZSBoYXZlbid0IHByb2Nlc3NlZCBhbnkgbWVkaWFcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHNldCBpdCB0byBvbmUgdG8gY29tcGxldGUgdGhpcyBmdW5jdGlvbidzIHJlbW92ZXNcblxuXG4gICAgdmFyIHJlbW92ZXNSZW1haW5pbmcgPSAxO1xuXG4gICAgdmFyIHJlbW92ZUZpbmlzaGVkID0gZnVuY3Rpb24gcmVtb3ZlRmluaXNoZWQoKSB7XG4gICAgICByZW1vdmVzUmVtYWluaW5nLS07XG5cbiAgICAgIGlmIChyZW1vdmVzUmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCF0aGlzLmF1ZGlvRGlzYWJsZWRfKSB7XG4gICAgICByZW1vdmVzUmVtYWluaW5nKys7XG4gICAgICB0aGlzLnNvdXJjZVVwZGF0ZXJfLnJlbW92ZUF1ZGlvKHN0YXJ0LCBlbmQsIHJlbW92ZUZpbmlzaGVkKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb2FkZXJUeXBlXyA9PT0gJ21haW4nICYmIHRoaXMuY3VycmVudE1lZGlhSW5mb18gJiYgdGhpcy5jdXJyZW50TWVkaWFJbmZvXy5oYXNWaWRlbykge1xuICAgICAgdGhpcy5nb3BCdWZmZXJfID0gcmVtb3ZlR29wQnVmZmVyKHRoaXMuZ29wQnVmZmVyXywgc3RhcnQsIGVuZCwgdGhpcy50aW1lTWFwcGluZ18pO1xuICAgICAgcmVtb3Zlc1JlbWFpbmluZysrO1xuICAgICAgdGhpcy5zb3VyY2VVcGRhdGVyXy5yZW1vdmVWaWRlbyhzdGFydCwgZW5kLCByZW1vdmVGaW5pc2hlZCk7XG4gICAgfSAvLyByZW1vdmUgYW55IGNhcHRpb25zIGFuZCBJRDMgdGFnc1xuXG5cbiAgICBmb3IgKHZhciB0cmFjayBpbiB0aGlzLmluYmFuZFRleHRUcmFja3NfKSB7XG4gICAgICByZW1vdmVDdWVzRnJvbVRyYWNrKHN0YXJ0LCBlbmQsIHRoaXMuaW5iYW5kVGV4dFRyYWNrc19bdHJhY2tdKTtcbiAgICB9XG5cbiAgICByZW1vdmVDdWVzRnJvbVRyYWNrKHN0YXJ0LCBlbmQsIHRoaXMuc2VnbWVudE1ldGFkYXRhVHJhY2tfKTsgLy8gZmluaXNoZWQgdGhpcyBmdW5jdGlvbidzIHJlbW92ZXNcblxuICAgIHJlbW92ZUZpbmlzaGVkKCk7XG4gIH1cbiAgLyoqXG4gICAqIChyZS0pc2NoZWR1bGUgbW9uaXRvckJ1ZmZlclRpY2tfIHRvIHJ1biBhcyBzb29uIGFzIHBvc3NpYmxlXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm1vbml0b3JCdWZmZXJfID0gZnVuY3Rpb24gbW9uaXRvckJ1ZmZlcl8oKSB7XG4gICAgaWYgKHRoaXMuY2hlY2tCdWZmZXJUaW1lb3V0Xykge1xuICAgICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMuY2hlY2tCdWZmZXJUaW1lb3V0Xyk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja0J1ZmZlclRpbWVvdXRfID0gd2luZG93JDEuc2V0VGltZW91dCh0aGlzLm1vbml0b3JCdWZmZXJUaWNrXy5iaW5kKHRoaXMpLCAxKTtcbiAgfVxuICAvKipcbiAgICogQXMgbG9uZyBhcyB0aGUgU2VnbWVudExvYWRlciBpcyBpbiB0aGUgUkVBRFkgc3RhdGUsIHBlcmlvZGljYWxseVxuICAgKiBpbnZva2UgZmlsbEJ1ZmZlcl8oKS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ubW9uaXRvckJ1ZmZlclRpY2tfID0gZnVuY3Rpb24gbW9uaXRvckJ1ZmZlclRpY2tfKCkge1xuICAgIGlmICh0aGlzLnN0YXRlID09PSAnUkVBRFknKSB7XG4gICAgICB0aGlzLmZpbGxCdWZmZXJfKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2hlY2tCdWZmZXJUaW1lb3V0Xykge1xuICAgICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMuY2hlY2tCdWZmZXJUaW1lb3V0Xyk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja0J1ZmZlclRpbWVvdXRfID0gd2luZG93JDEuc2V0VGltZW91dCh0aGlzLm1vbml0b3JCdWZmZXJUaWNrXy5iaW5kKHRoaXMpLCBDSEVDS19CVUZGRVJfREVMQVkpO1xuICB9XG4gIC8qKlxuICAgKiBmaWxsIHRoZSBidWZmZXIgd2l0aCBzZWdlbWVudHMgdW5sZXNzIHRoZSBzb3VyY2VCdWZmZXJzIGFyZVxuICAgKiBjdXJyZW50bHkgdXBkYXRpbmdcbiAgICpcbiAgICogTm90ZTogdGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBldmVyIGJlIGNhbGxlZCBieSBtb25pdG9yQnVmZmVyX1xuICAgKiBhbmQgbmV2ZXIgZGlyZWN0bHlcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZmlsbEJ1ZmZlcl8gPSBmdW5jdGlvbiBmaWxsQnVmZmVyXygpIHtcbiAgICAvLyBUT0RPIHNpbmNlIHRoZSBzb3VyY2UgYnVmZmVyIG1haW50YWlucyBhIHF1ZXVlLCBhbmQgd2Ugc2hvdWxkbid0IGNhbGwgdGhpcyBmdW5jdGlvblxuICAgIC8vIGV4Y2VwdCB3aGVuIHdlJ3JlIHJlYWR5IGZvciB0aGUgbmV4dCBzZWdtZW50LCB0aGlzIGNoZWNrIGNhbiBtb3N0IGxpa2VseSBiZSByZW1vdmVkXG4gICAgaWYgKHRoaXMuc291cmNlVXBkYXRlcl8udXBkYXRpbmcoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5zeW5jUG9pbnRfKSB7XG4gICAgICB0aGlzLnN5bmNQb2ludF8gPSB0aGlzLnN5bmNDb250cm9sbGVyXy5nZXRTeW5jUG9pbnQodGhpcy5wbGF5bGlzdF8sIHRoaXMuZHVyYXRpb25fKCksIHRoaXMuY3VycmVudFRpbWVsaW5lXywgdGhpcy5jdXJyZW50VGltZV8oKSk7XG4gICAgfVxuXG4gICAgdmFyIGJ1ZmZlcmVkID0gdGhpcy5idWZmZXJlZF8oKTsgLy8gc2VlIGlmIHdlIG5lZWQgdG8gYmVnaW4gbG9hZGluZyBpbW1lZGlhdGVseVxuXG4gICAgdmFyIHNlZ21lbnRJbmZvID0gdGhpcy5jaGVja0J1ZmZlcl8oYnVmZmVyZWQsIHRoaXMucGxheWxpc3RfLCB0aGlzLm1lZGlhSW5kZXgsIHRoaXMuaGFzUGxheWVkXygpLCB0aGlzLmN1cnJlbnRUaW1lXygpLCB0aGlzLnN5bmNQb2ludF8pO1xuXG4gICAgaWYgKCFzZWdtZW50SW5mbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlZ21lbnRJbmZvLnRpbWVzdGFtcE9mZnNldCA9IHRpbWVzdGFtcE9mZnNldEZvclNlZ21lbnQoe1xuICAgICAgc2VnbWVudFRpbWVsaW5lOiBzZWdtZW50SW5mby50aW1lbGluZSxcbiAgICAgIGN1cnJlbnRUaW1lbGluZTogdGhpcy5jdXJyZW50VGltZWxpbmVfLFxuICAgICAgc3RhcnRPZlNlZ21lbnQ6IHNlZ21lbnRJbmZvLnN0YXJ0T2ZTZWdtZW50LFxuICAgICAgYnVmZmVyZWQ6IGJ1ZmZlcmVkLFxuICAgICAgb3ZlcnJpZGVDaGVjazogdGhpcy5pc1BlbmRpbmdUaW1lc3RhbXBPZmZzZXRfXG4gICAgfSk7XG4gICAgdGhpcy5pc1BlbmRpbmdUaW1lc3RhbXBPZmZzZXRfID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIHNlZ21lbnRJbmZvLnRpbWVzdGFtcE9mZnNldCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMudGltZWxpbmVDaGFuZ2VDb250cm9sbGVyXy5wZW5kaW5nVGltZWxpbmVDaGFuZ2Uoe1xuICAgICAgICB0eXBlOiB0aGlzLmxvYWRlclR5cGVfLFxuICAgICAgICBmcm9tOiB0aGlzLmN1cnJlbnRUaW1lbGluZV8sXG4gICAgICAgIHRvOiBzZWdtZW50SW5mby50aW1lbGluZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkU2VnbWVudF8oc2VnbWVudEluZm8pO1xuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHdlIHNob3VsZCBjYWxsIGVuZE9mU3RyZWFtIG9uIHRoZSBtZWRpYSBzb3VyY2UgYmFzZWRcbiAgICogb24gdGhlIHN0YXRlIG9mIHRoZSBidWZmZXIgb3IgaWYgYXBwZW5lZCBzZWdtZW50IHdhcyB0aGUgZmluYWxcbiAgICogc2VnbWVudCBpbiB0aGUgcGxheWxpc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWVkaWFJbmRleF0gdGhlIG1lZGlhIGluZGV4IG9mIHNlZ21lbnQgd2UgbGFzdCBhcHBlbmRlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gW3BsYXlsaXN0XSBhIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBkbyB3ZSBuZWVkIHRvIGNhbGwgZW5kT2ZTdHJlYW0gb24gdGhlIE1lZGlhU291cmNlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmlzRW5kT2ZTdHJlYW1fID0gZnVuY3Rpb24gaXNFbmRPZlN0cmVhbV8obWVkaWFJbmRleCwgcGxheWxpc3QpIHtcbiAgICBpZiAobWVkaWFJbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgICBtZWRpYUluZGV4ID0gdGhpcy5tZWRpYUluZGV4O1xuICAgIH1cblxuICAgIGlmIChwbGF5bGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwbGF5bGlzdCA9IHRoaXMucGxheWxpc3RfO1xuICAgIH1cblxuICAgIGlmICghcGxheWxpc3QgfHwgIXRoaXMubWVkaWFTb3VyY2VfKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBtZWRpYUluZGV4IGlzIHplcm8gYmFzZWQgYnV0IGxlbmd0aCBpcyAxIGJhc2VkXG5cblxuICAgIHZhciBhcHBlbmRlZExhc3RTZWdtZW50ID0gbWVkaWFJbmRleCArIDEgPT09IHBsYXlsaXN0LnNlZ21lbnRzLmxlbmd0aDsgLy8gaWYgd2UndmUgYnVmZmVyZWQgdG8gdGhlIGVuZCBvZiB0aGUgdmlkZW8sIHdlIG5lZWQgdG8gY2FsbCBlbmRPZlN0cmVhbVxuICAgIC8vIHNvIHRoYXQgTWVkaWFTb3VyY2VzIGNhbiB0cmlnZ2VyIHRoZSBgZW5kZWRgIGV2ZW50IHdoZW4gaXQgcnVucyBvdXQgb2ZcbiAgICAvLyBidWZmZXJlZCBkYXRhIGluc3RlYWQgb2Ygd2FpdGluZyBmb3IgbWVcblxuICAgIHJldHVybiBwbGF5bGlzdC5lbmRMaXN0ICYmIHRoaXMubWVkaWFTb3VyY2VfLnJlYWR5U3RhdGUgPT09ICdvcGVuJyAmJiBhcHBlbmRlZExhc3RTZWdtZW50O1xuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoYXQgc2VnbWVudCByZXF1ZXN0IHNob3VsZCBiZSBtYWRlLCBnaXZlbiBjdXJyZW50IHBsYXliYWNrXG4gICAqIHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge1RpbWVSYW5nZXN9IGJ1ZmZlcmVkIC0gdGhlIHN0YXRlIG9mIHRoZSBidWZmZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IC0gdGhlIHBsYXlsaXN0IG9iamVjdCB0byBmZXRjaCBzZWdtZW50cyBmcm9tXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtZWRpYUluZGV4IC0gdGhlIHByZXZpb3VzIG1lZGlhSW5kZXggZmV0Y2hlZCBvciBudWxsXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGxheWVkIC0gYSBmbGFnIGluZGljYXRpbmcgd2hldGhlciB3ZSBoYXZlIHBsYXllZCBvciBub3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRUaW1lIC0gdGhlIHBsYXliYWNrIHBvc2l0aW9uIGluIHNlY29uZHNcbiAgICogQHBhcmFtIHtPYmplY3R9IHN5bmNQb2ludCAtIGEgc2VnbWVudCBpbmZvIG9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGVcbiAgICogQHJldHVybiB7T2JqZWN0fSBhIHNlZ21lbnQgcmVxdWVzdCBvYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlIHNlZ21lbnQgdG8gbG9hZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jaGVja0J1ZmZlcl8gPSBmdW5jdGlvbiBjaGVja0J1ZmZlcl8oYnVmZmVyZWQsIHBsYXlsaXN0LCBjdXJyZW50TWVkaWFJbmRleCwgaGFzUGxheWVkLCBjdXJyZW50VGltZSwgc3luY1BvaW50KSB7XG4gICAgdmFyIGxhc3RCdWZmZXJlZEVuZCA9IDA7XG5cbiAgICBpZiAoYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICBsYXN0QnVmZmVyZWRFbmQgPSBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgdmFyIGJ1ZmZlcmVkVGltZSA9IE1hdGgubWF4KDAsIGxhc3RCdWZmZXJlZEVuZCAtIGN1cnJlbnRUaW1lKTtcblxuICAgIGlmICghcGxheWxpc3Quc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IC8vIGlmIHRoZXJlIGlzIHBsZW50eSBvZiBjb250ZW50IGJ1ZmZlcmVkLCBhbmQgdGhlIHZpZGVvIGhhc1xuICAgIC8vIGJlZW4gcGxheWVkIGJlZm9yZSByZWxheCBmb3IgYXdoaWxlXG5cblxuICAgIGlmIChidWZmZXJlZFRpbWUgPj0gdGhpcy5nb2FsQnVmZmVyTGVuZ3RoXygpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IC8vIGlmIHRoZSB2aWRlbyBoYXMgbm90IHlldCBwbGF5ZWQgb25jZSwgYW5kIHdlIGFscmVhZHkgaGF2ZVxuICAgIC8vIG9uZSBzZWdtZW50IGRvd25sb2FkZWQgZG8gbm90aGluZ1xuXG5cbiAgICBpZiAoIWhhc1BsYXllZCAmJiBidWZmZXJlZFRpbWUgPj0gMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG5leHRNZWRpYUluZGV4ID0gbnVsbDtcbiAgICB2YXIgc3RhcnRPZlNlZ21lbnQ7XG4gICAgdmFyIGlzU3luY1JlcXVlc3QgPSBmYWxzZTsgLy8gV2hlbiB0aGUgc3luY1BvaW50IGlzIG51bGwsIHRoZXJlIGlzIG5vIHdheSBvZiBkZXRlcm1pbmluZyBhIGdvb2RcbiAgICAvLyBjb25zZXJ2YXRpdmUgc2VnbWVudCBpbmRleCB0byBmZXRjaCBmcm9tXG4gICAgLy8gVGhlIGJlc3QgdGhpbmcgdG8gZG8gaGVyZSBpcyB0byBnZXQgdGhlIGtpbmQgb2Ygc3luYy1wb2ludCBkYXRhIGJ5XG4gICAgLy8gbWFraW5nIGEgcmVxdWVzdFxuXG4gICAgaWYgKHN5bmNQb2ludCA9PT0gbnVsbCkge1xuICAgICAgbmV4dE1lZGlhSW5kZXggPSB0aGlzLmdldFN5bmNTZWdtZW50Q2FuZGlkYXRlXyhwbGF5bGlzdCk7XG4gICAgICBpc1N5bmNSZXF1ZXN0ID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRNZWRpYUluZGV4ICE9PSBudWxsKSB7XG4gICAgICAvLyBVbmRlciBub3JtYWwgcGxheWJhY2sgY29uZGl0aW9ucyBmZXRjaGluZyBpcyBhIHNpbXBsZSB3YWxrIGZvcndhcmRcbiAgICAgIHZhciBzZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbY3VycmVudE1lZGlhSW5kZXhdO1xuXG4gICAgICBpZiAoc2VnbWVudCAmJiBzZWdtZW50LmVuZCkge1xuICAgICAgICBzdGFydE9mU2VnbWVudCA9IHNlZ21lbnQuZW5kO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnRPZlNlZ21lbnQgPSBsYXN0QnVmZmVyZWRFbmQ7XG4gICAgICB9XG5cbiAgICAgIG5leHRNZWRpYUluZGV4ID0gY3VycmVudE1lZGlhSW5kZXggKyAxOyAvLyBUaGVyZSBpcyBhIHN5bmMtcG9pbnQgYnV0IHRoZSBsYWNrIG9mIGEgbWVkaWFJbmRleCBpbmRpY2F0ZXMgdGhhdFxuICAgICAgLy8gd2UgbmVlZCB0byBtYWtlIGEgZ29vZCBjb25zZXJ2YXRpdmUgZ3Vlc3MgYWJvdXQgd2hpY2ggc2VnbWVudCB0b1xuICAgICAgLy8gZmV0Y2hcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmV0Y2hBdEJ1ZmZlcl8pIHtcbiAgICAgIC8vIEZpbmQgdGhlIHNlZ21lbnQgY29udGFpbmluZyB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgICAgIHZhciBtZWRpYVNvdXJjZUluZm8gPSBQbGF5bGlzdC5nZXRNZWRpYUluZm9Gb3JUaW1lKHBsYXlsaXN0LCBsYXN0QnVmZmVyZWRFbmQsIHN5bmNQb2ludC5zZWdtZW50SW5kZXgsIHN5bmNQb2ludC50aW1lKTtcbiAgICAgIG5leHRNZWRpYUluZGV4ID0gbWVkaWFTb3VyY2VJbmZvLm1lZGlhSW5kZXg7XG4gICAgICBzdGFydE9mU2VnbWVudCA9IG1lZGlhU291cmNlSW5mby5zdGFydFRpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZpbmQgdGhlIHNlZ21lbnQgY29udGFpbmluZyBjdXJyZW50VGltZVxuICAgICAgdmFyIF9tZWRpYVNvdXJjZUluZm8gPSBQbGF5bGlzdC5nZXRNZWRpYUluZm9Gb3JUaW1lKHBsYXlsaXN0LCBjdXJyZW50VGltZSwgc3luY1BvaW50LnNlZ21lbnRJbmRleCwgc3luY1BvaW50LnRpbWUpO1xuXG4gICAgICBuZXh0TWVkaWFJbmRleCA9IF9tZWRpYVNvdXJjZUluZm8ubWVkaWFJbmRleDtcbiAgICAgIHN0YXJ0T2ZTZWdtZW50ID0gX21lZGlhU291cmNlSW5mby5zdGFydFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHNlZ21lbnRJbmZvID0gdGhpcy5nZW5lcmF0ZVNlZ21lbnRJbmZvXyhwbGF5bGlzdCwgbmV4dE1lZGlhSW5kZXgsIHN0YXJ0T2ZTZWdtZW50LCBpc1N5bmNSZXF1ZXN0KTtcblxuICAgIGlmICghc2VnbWVudEluZm8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGlmIHRoaXMgaXMgdGhlIGxhc3Qgc2VnbWVudCBpbiB0aGUgcGxheWxpc3RcbiAgICAvLyB3ZSBhcmUgbm90IHNlZWtpbmcgYW5kIGVuZCBvZiBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiBjYWxsZWRcbiAgICAvLyBkbyBub3QgcmUtcmVxdWVzdFxuXG5cbiAgICBpZiAodGhpcy5tZWRpYVNvdXJjZV8gJiYgdGhpcy5wbGF5bGlzdF8gJiYgc2VnbWVudEluZm8ubWVkaWFJbmRleCA9PT0gdGhpcy5wbGF5bGlzdF8uc2VnbWVudHMubGVuZ3RoIC0gMSAmJiB0aGlzLm1lZGlhU291cmNlXy5yZWFkeVN0YXRlID09PSAnZW5kZWQnICYmICF0aGlzLnNlZWtpbmdfKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlcl8oXCJjaGVja0J1ZmZlcl8gcmV0dXJuaW5nIFwiICsgc2VnbWVudEluZm8udXJpLCB7XG4gICAgICBzZWdtZW50SW5mbzogc2VnbWVudEluZm8sXG4gICAgICBwbGF5bGlzdDogcGxheWxpc3QsXG4gICAgICBjdXJyZW50TWVkaWFJbmRleDogY3VycmVudE1lZGlhSW5kZXgsXG4gICAgICBuZXh0TWVkaWFJbmRleDogbmV4dE1lZGlhSW5kZXgsXG4gICAgICBzdGFydE9mU2VnbWVudDogc3RhcnRPZlNlZ21lbnQsXG4gICAgICBpc1N5bmNSZXF1ZXN0OiBpc1N5bmNSZXF1ZXN0XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlZ21lbnRJbmZvO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgc2VnbWVudCBsb2FkZXIgaGFzIG5vIHJlY291cnNlIGV4Y2VwdCB0byBmZXRjaCBhIHNlZ21lbnQgaW4gdGhlXG4gICAqIGN1cnJlbnQgcGxheWxpc3QgYW5kIHVzZSB0aGUgaW50ZXJuYWwgdGltZXN0YW1wcyBpbiB0aGF0IHNlZ21lbnQgdG9cbiAgICogZ2VuZXJhdGUgYSBzeW5jUG9pbnQuIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIGdvb2QgY2FuZGlkYXRlIGluZGV4XG4gICAqIGZvciB0aGF0IHByb2Nlc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdCAtIHRoZSBwbGF5bGlzdCBvYmplY3QgdG8gbG9vayBmb3IgYVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEFuIGluZGV4IG9mIGEgc2VnbWVudCBmcm9tIHRoZSBwbGF5bGlzdCB0byBsb2FkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFN5bmNTZWdtZW50Q2FuZGlkYXRlXyA9IGZ1bmN0aW9uIGdldFN5bmNTZWdtZW50Q2FuZGlkYXRlXyhwbGF5bGlzdCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuY3VycmVudFRpbWVsaW5lXyA9PT0gLTEpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBzZWdtZW50SW5kZXhBcnJheSA9IHBsYXlsaXN0LnNlZ21lbnRzLm1hcChmdW5jdGlvbiAocywgaSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGltZWxpbmU6IHMudGltZWxpbmUsXG4gICAgICAgIHNlZ21lbnRJbmRleDogaVxuICAgICAgfTtcbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLnRpbWVsaW5lID09PSBfdGhpczIuY3VycmVudFRpbWVsaW5lXztcbiAgICB9KTtcblxuICAgIGlmIChzZWdtZW50SW5kZXhBcnJheS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBzZWdtZW50SW5kZXhBcnJheVtNYXRoLm1pbihzZWdtZW50SW5kZXhBcnJheS5sZW5ndGggLSAxLCAxKV0uc2VnbWVudEluZGV4O1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLm1heChwbGF5bGlzdC5zZWdtZW50cy5sZW5ndGggLSAxLCAwKTtcbiAgfTtcblxuICBfcHJvdG8uZ2VuZXJhdGVTZWdtZW50SW5mb18gPSBmdW5jdGlvbiBnZW5lcmF0ZVNlZ21lbnRJbmZvXyhwbGF5bGlzdCwgbWVkaWFJbmRleCwgc3RhcnRPZlNlZ21lbnQsIGlzU3luY1JlcXVlc3QpIHtcbiAgICBpZiAobWVkaWFJbmRleCA8IDAgfHwgbWVkaWFJbmRleCA+PSBwbGF5bGlzdC5zZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzZWdtZW50ID0gcGxheWxpc3Quc2VnbWVudHNbbWVkaWFJbmRleF07XG4gICAgdmFyIGF1ZGlvQnVmZmVyZWQgPSB0aGlzLnNvdXJjZVVwZGF0ZXJfLmF1ZGlvQnVmZmVyZWQoKTtcbiAgICB2YXIgdmlkZW9CdWZmZXJlZCA9IHRoaXMuc291cmNlVXBkYXRlcl8udmlkZW9CdWZmZXJlZCgpO1xuICAgIHZhciBhdWRpb0FwcGVuZFN0YXJ0O1xuICAgIHZhciBnb3BzVG9BbGlnbldpdGg7XG5cbiAgICBpZiAoYXVkaW9CdWZmZXJlZC5sZW5ndGgpIHtcbiAgICAgIC8vIHNpbmNlIHRoZSB0cmFuc211eGVyIGlzIHVzaW5nIHRoZSBhY3R1YWwgdGltaW5nIHZhbHVlcywgYnV0IHRoZSBidWZmZXIgaXNcbiAgICAgIC8vIGFkanVzdGVkIGJ5IHRoZSB0aW1lc3RhbXAgb2Zmc2V0LCB3ZSBtdXN0IGFkanVzdCB0aGUgdmFsdWUgaGVyZVxuICAgICAgYXVkaW9BcHBlbmRTdGFydCA9IGF1ZGlvQnVmZmVyZWQuZW5kKGF1ZGlvQnVmZmVyZWQubGVuZ3RoIC0gMSkgLSB0aGlzLnNvdXJjZVVwZGF0ZXJfLmF1ZGlvVGltZXN0YW1wT2Zmc2V0KCk7XG4gICAgfVxuXG4gICAgaWYgKHZpZGVvQnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICBnb3BzVG9BbGlnbldpdGggPSBnb3BzU2FmZVRvQWxpZ25XaXRoKHRoaXMuZ29wQnVmZmVyXywgLy8gc2luY2UgdGhlIHRyYW5zbXV4ZXIgaXMgdXNpbmcgdGhlIGFjdHVhbCB0aW1pbmcgdmFsdWVzLCBidXQgdGhlIHRpbWUgaXNcbiAgICAgIC8vIGFkanVzdGVkIGJ5IHRoZSB0aW1lc3RtYXAgb2Zmc2V0LCB3ZSBtdXN0IGFkanVzdCB0aGUgdmFsdWUgaGVyZVxuICAgICAgdGhpcy5jdXJyZW50VGltZV8oKSAtIHRoaXMuc291cmNlVXBkYXRlcl8udmlkZW9UaW1lc3RhbXBPZmZzZXQoKSwgdGhpcy50aW1lTWFwcGluZ18pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICByZXF1ZXN0SWQ6ICdzZWdtZW50LWxvYWRlci0nICsgTWF0aC5yYW5kb20oKSxcbiAgICAgIC8vIHJlc29sdmUgdGhlIHNlZ21lbnQgVVJMIHJlbGF0aXZlIHRvIHRoZSBwbGF5bGlzdFxuICAgICAgdXJpOiBzZWdtZW50LnJlc29sdmVkVXJpLFxuICAgICAgLy8gdGhlIHNlZ21lbnQncyBtZWRpYUluZGV4IGF0IHRoZSB0aW1lIGl0IHdhcyByZXF1ZXN0ZWRcbiAgICAgIG1lZGlhSW5kZXg6IG1lZGlhSW5kZXgsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB0byB1cGRhdGUgdGhlIFNlZ21lbnRMb2FkZXIncyBzdGF0ZSB3aXRoIHRoaXNcbiAgICAgIC8vIHNlZ21lbnQncyBtZWRpYUluZGV4XG4gICAgICBpc1N5bmNSZXF1ZXN0OiBpc1N5bmNSZXF1ZXN0LFxuICAgICAgc3RhcnRPZlNlZ21lbnQ6IHN0YXJ0T2ZTZWdtZW50LFxuICAgICAgLy8gdGhlIHNlZ21lbnQncyBwbGF5bGlzdFxuICAgICAgcGxheWxpc3Q6IHBsYXlsaXN0LFxuICAgICAgLy8gdW5lbmNyeXB0ZWQgYnl0ZXMgb2YgdGhlIHNlZ21lbnRcbiAgICAgIGJ5dGVzOiBudWxsLFxuICAgICAgLy8gd2hlbiBhIGtleSBpcyBkZWZpbmVkIGZvciB0aGlzIHNlZ21lbnQsIHRoZSBlbmNyeXB0ZWQgYnl0ZXNcbiAgICAgIGVuY3J5cHRlZEJ5dGVzOiBudWxsLFxuICAgICAgLy8gVGhlIHRhcmdldCB0aW1lc3RhbXBPZmZzZXQgZm9yIHRoaXMgc2VnbWVudCB3aGVuIHdlIGFwcGVuZCBpdFxuICAgICAgLy8gdG8gdGhlIHNvdXJjZSBidWZmZXJcbiAgICAgIHRpbWVzdGFtcE9mZnNldDogbnVsbCxcbiAgICAgIC8vIFRoZSB0aW1lbGluZSB0aGF0IHRoZSBzZWdtZW50IGlzIGluXG4gICAgICB0aW1lbGluZTogc2VnbWVudC50aW1lbGluZSxcbiAgICAgIC8vIFRoZSBleHBlY3RlZCBkdXJhdGlvbiBvZiB0aGUgc2VnbWVudCBpbiBzZWNvbmRzXG4gICAgICBkdXJhdGlvbjogc2VnbWVudC5kdXJhdGlvbixcbiAgICAgIC8vIHJldGFpbiB0aGUgc2VnbWVudCBpbiBjYXNlIHRoZSBwbGF5bGlzdCB1cGRhdGVzIHdoaWxlIGRvaW5nIGFuIGFzeW5jIHByb2Nlc3NcbiAgICAgIHNlZ21lbnQ6IHNlZ21lbnQsXG4gICAgICBieXRlTGVuZ3RoOiAwLFxuICAgICAgdHJhbnNtdXhlcjogdGhpcy50cmFuc211eGVyXyxcbiAgICAgIGF1ZGlvQXBwZW5kU3RhcnQ6IGF1ZGlvQXBwZW5kU3RhcnQsXG4gICAgICBnb3BzVG9BbGlnbldpdGg6IGdvcHNUb0FsaWduV2l0aFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIG5ldHdvcmsgaGFzIGVub3VnaCBiYW5kd2lkdGggdG8gY29tcGxldGUgdGhlIGN1cnJlbnQgc2VnbWVudFxuICAgKiByZXF1ZXN0IGluIGEgdGltZWx5IG1hbm5lci4gSWYgbm90LCB0aGUgcmVxdWVzdCB3aWxsIGJlIGFib3J0ZWQgZWFybHkgYW5kIGJhbmR3aWR0aFxuICAgKiB1cGRhdGVkIHRvIHRyaWdnZXIgYSBwbGF5bGlzdCBzd2l0Y2guXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0c1xuICAgKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgc3RhdHMgYWJvdXQgdGhlIHJlcXVlc3QgdGltaW5nIGFuZCBzaXplXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHJlcXVlc3Qgd2FzIGFib3J0ZWQsIGZhbHNlIG90aGVyd2lzZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hYm9ydFJlcXVlc3RFYXJseV8gPSBmdW5jdGlvbiBhYm9ydFJlcXVlc3RFYXJseV8oc3RhdHMpIHtcbiAgICBpZiAodGhpcy52aHNfLnRlY2hfLnBhdXNlZCgpIHx8IC8vIERvbid0IGFib3J0IGlmIHRoZSBjdXJyZW50IHBsYXlsaXN0IGlzIG9uIHRoZSBsb3dlc3RFbmFibGVkUmVuZGl0aW9uXG4gICAgLy8gVE9ETzogUmVwbGFjZSB1c2luZyB0aW1lb3V0IHdpdGggYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGlzIHBsYXlsaXN0IGlzXG4gICAgLy8gICAgICAgdGhlIGxvd2VzdEVuYWJsZWRSZW5kaXRpb24uXG4gICAgIXRoaXMueGhyT3B0aW9uc18udGltZW91dCB8fCAvLyBEb24ndCBhYm9ydCBpZiB3ZSBoYXZlIG5vIGJhbmR3aWR0aCBpbmZvcm1hdGlvbiB0byBlc3RpbWF0ZSBzZWdtZW50IHNpemVzXG4gICAgIXRoaXMucGxheWxpc3RfLmF0dHJpYnV0ZXMuQkFORFdJRFRIKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBXYWl0IGF0IGxlYXN0IDEgc2Vjb25kIHNpbmNlIHRoZSBmaXJzdCBieXRlIG9mIGRhdGEgaGFzIGJlZW4gcmVjZWl2ZWQgYmVmb3JlXG4gICAgLy8gdXNpbmcgdGhlIGNhbGN1bGF0ZWQgYmFuZHdpZHRoIGZyb20gdGhlIHByb2dyZXNzIGV2ZW50IHRvIGFsbG93IHRoZSBiaXRyYXRlXG4gICAgLy8gdG8gc3RhYmlsaXplXG5cblxuICAgIGlmIChEYXRlLm5vdygpIC0gKHN0YXRzLmZpcnN0Qnl0ZXNSZWNlaXZlZEF0IHx8IERhdGUubm93KCkpIDwgMTAwMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50VGltZSA9IHRoaXMuY3VycmVudFRpbWVfKCk7XG4gICAgdmFyIG1lYXN1cmVkQmFuZHdpZHRoID0gc3RhdHMuYmFuZHdpZHRoO1xuICAgIHZhciBzZWdtZW50RHVyYXRpb24gPSB0aGlzLnBlbmRpbmdTZWdtZW50Xy5kdXJhdGlvbjtcbiAgICB2YXIgcmVxdWVzdFRpbWVSZW1haW5pbmcgPSBQbGF5bGlzdC5lc3RpbWF0ZVNlZ21lbnRSZXF1ZXN0VGltZShzZWdtZW50RHVyYXRpb24sIG1lYXN1cmVkQmFuZHdpZHRoLCB0aGlzLnBsYXlsaXN0Xywgc3RhdHMuYnl0ZXNSZWNlaXZlZCk7IC8vIFN1YnRyYWN0IDEgZnJvbSB0aGUgdGltZVVudGlsUmVidWZmZXIgc28gd2Ugc3RpbGwgY29uc2lkZXIgYW4gZWFybHkgYWJvcnRcbiAgICAvLyBpZiB3ZSBhcmUgb25seSBsZWZ0IHdpdGggbGVzcyB0aGFuIDEgc2Vjb25kIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgIC8vIEEgbmVnYXRpdmUgdGltZVVudGlsUmVidWZmZXJpbmcgaW5kaWNhdGVzIHdlIGFyZSBhbHJlYWR5IHJlYnVmZmVyaW5nXG5cbiAgICB2YXIgdGltZVVudGlsUmVidWZmZXIkMSA9IHRpbWVVbnRpbFJlYnVmZmVyKHRoaXMuYnVmZmVyZWRfKCksIGN1cnJlbnRUaW1lLCB0aGlzLnZoc18udGVjaF8ucGxheWJhY2tSYXRlKCkpIC0gMTsgLy8gT25seSBjb25zaWRlciBhYm9ydGluZyBlYXJseSBpZiB0aGUgZXN0aW1hdGVkIHRpbWUgdG8gZmluaXNoIHRoZSBkb3dubG9hZFxuICAgIC8vIGlzIGxhcmdlciB0aGFuIHRoZSBlc3RpbWF0ZWQgdGltZSB1bnRpbCB0aGUgcGxheWVyIHJ1bnMgb3V0IG9mIGZvcndhcmQgYnVmZmVyXG5cbiAgICBpZiAocmVxdWVzdFRpbWVSZW1haW5pbmcgPD0gdGltZVVudGlsUmVidWZmZXIkMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBzd2l0Y2hDYW5kaWRhdGUgPSBtaW5SZWJ1ZmZlck1heEJhbmR3aWR0aFNlbGVjdG9yKHtcbiAgICAgIG1hc3RlcjogdGhpcy52aHNfLnBsYXlsaXN0cy5tYXN0ZXIsXG4gICAgICBjdXJyZW50VGltZTogY3VycmVudFRpbWUsXG4gICAgICBiYW5kd2lkdGg6IG1lYXN1cmVkQmFuZHdpZHRoLFxuICAgICAgZHVyYXRpb246IHRoaXMuZHVyYXRpb25fKCksXG4gICAgICBzZWdtZW50RHVyYXRpb246IHNlZ21lbnREdXJhdGlvbixcbiAgICAgIHRpbWVVbnRpbFJlYnVmZmVyOiB0aW1lVW50aWxSZWJ1ZmZlciQxLFxuICAgICAgY3VycmVudFRpbWVsaW5lOiB0aGlzLmN1cnJlbnRUaW1lbGluZV8sXG4gICAgICBzeW5jQ29udHJvbGxlcjogdGhpcy5zeW5jQ29udHJvbGxlcl9cbiAgICB9KTtcblxuICAgIGlmICghc3dpdGNoQ2FuZGlkYXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlYnVmZmVyaW5nSW1wYWN0ID0gcmVxdWVzdFRpbWVSZW1haW5pbmcgLSB0aW1lVW50aWxSZWJ1ZmZlciQxO1xuICAgIHZhciB0aW1lU2F2ZWRCeVN3aXRjaGluZyA9IHJlYnVmZmVyaW5nSW1wYWN0IC0gc3dpdGNoQ2FuZGlkYXRlLnJlYnVmZmVyaW5nSW1wYWN0O1xuICAgIHZhciBtaW5pbXVtVGltZVNhdmluZyA9IDAuNTsgLy8gSWYgd2UgYXJlIGFscmVhZHkgcmVidWZmZXJpbmcsIGluY3JlYXNlIHRoZSBhbW91bnQgb2YgdmFyaWFuY2Ugd2UgYWRkIHRvIHRoZVxuICAgIC8vIHBvdGVudGlhbCByb3VuZCB0cmlwIHRpbWUgb2YgdGhlIG5ldyByZXF1ZXN0IHNvIHRoYXQgd2UgYXJlIG5vdCB0b28gYWdncmVzc2l2ZVxuICAgIC8vIHdpdGggc3dpdGNoaW5nIHRvIGEgcGxheWxpc3QgdGhhdCBtaWdodCBzYXZlIHVzIGEgZnJhY3Rpb24gb2YgYSBzZWNvbmQuXG5cbiAgICBpZiAodGltZVVudGlsUmVidWZmZXIkMSA8PSBUSU1FX0ZVREdFX0ZBQ1RPUikge1xuICAgICAgbWluaW11bVRpbWVTYXZpbmcgPSAxO1xuICAgIH1cblxuICAgIGlmICghc3dpdGNoQ2FuZGlkYXRlLnBsYXlsaXN0IHx8IHN3aXRjaENhbmRpZGF0ZS5wbGF5bGlzdC51cmkgPT09IHRoaXMucGxheWxpc3RfLnVyaSB8fCB0aW1lU2F2ZWRCeVN3aXRjaGluZyA8IG1pbmltdW1UaW1lU2F2aW5nKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBzZXQgdGhlIGJhbmR3aWR0aCB0byB0aGF0IG9mIHRoZSBkZXNpcmVkIHBsYXlsaXN0IGJlaW5nIHN1cmUgdG8gc2NhbGUgYnlcbiAgICAvLyBCQU5EV0lEVEhfVkFSSUFOQ0UgYW5kIGFkZCBvbmUgc28gdGhlIHBsYXlsaXN0IHNlbGVjdG9yIGRvZXMgbm90IGV4Y2x1ZGUgaXRcbiAgICAvLyBkb24ndCB0cmlnZ2VyIGEgYmFuZHdpZHRodXBkYXRlIGFzIHRoZSBiYW5kd2lkdGggaXMgYXJ0aWZpYWxcblxuXG4gICAgdGhpcy5iYW5kd2lkdGggPSBzd2l0Y2hDYW5kaWRhdGUucGxheWxpc3QuYXR0cmlidXRlcy5CQU5EV0lEVEggKiBDb25maWcuQkFORFdJRFRIX1ZBUklBTkNFICsgMTtcbiAgICB0aGlzLmFib3J0KCk7XG4gICAgdGhpcy50cmlnZ2VyKCdlYXJseWFib3J0Jyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUFib3J0XyA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0XygpIHtcbiAgICB0aGlzLm1lZGlhUmVxdWVzdHNBYm9ydGVkICs9IDE7XG4gIH1cbiAgLyoqXG4gICAqIFhIUiBgcHJvZ3Jlc3NgIGV2ZW50IGhhbmRsZXJcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH1cbiAgICogICAgICAgIFRoZSBYSFIgYHByb2dyZXNzYCBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gc2ltcGxlU2VnbWVudFxuICAgKiAgICAgICAgQSBzaW1wbGlmaWVkIHNlZ21lbnQgb2JqZWN0IGNvcHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlUHJvZ3Jlc3NfID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3NfKGV2ZW50LCBzaW1wbGVTZWdtZW50KSB7XG4gICAgaWYgKHRoaXMuY2hlY2tGb3JBYm9ydF8oc2ltcGxlU2VnbWVudC5yZXF1ZXN0SWQpIHx8IHRoaXMuYWJvcnRSZXF1ZXN0RWFybHlfKHNpbXBsZVNlZ21lbnQuc3RhdHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKCdwcm9ncmVzcycpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVUcmFja0luZm9fID0gZnVuY3Rpb24gaGFuZGxlVHJhY2tJbmZvXyhzaW1wbGVTZWdtZW50LCB0cmFja0luZm8pIHtcbiAgICBpZiAodGhpcy5jaGVja0ZvckFib3J0XyhzaW1wbGVTZWdtZW50LnJlcXVlc3RJZCkgfHwgdGhpcy5hYm9ydFJlcXVlc3RFYXJseV8oc2ltcGxlU2VnbWVudC5zdGF0cykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jaGVja0ZvcklsbGVnYWxNZWRpYVN3aXRjaCh0cmFja0luZm8pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJhY2tJbmZvID0gdHJhY2tJbmZvIHx8IHt9OyAvLyBXaGVuIHdlIGhhdmUgdHJhY2sgaW5mbywgZGV0ZXJtaW5lIHdoYXQgbWVkaWEgdHlwZXMgdGhpcyBsb2FkZXIgaXMgZGVhbGluZyB3aXRoLlxuICAgIC8vIEd1YXJkIGFnYWluc3QgY2FzZXMgd2hlcmUgd2UncmUgbm90IGdldHRpbmcgdHJhY2sgaW5mbyBhdCBhbGwgdW50aWwgd2UgYXJlXG4gICAgLy8gY2VydGFpbiB0aGF0IGFsbCBzdHJlYW1zIHdpbGwgcHJvdmlkZSBpdC5cblxuICAgIGlmICghc2hhbGxvd0VxdWFsKHRoaXMuY3VycmVudE1lZGlhSW5mb18sIHRyYWNrSW5mbykpIHtcbiAgICAgIHRoaXMuYXBwZW5kSW5pdFNlZ21lbnRfID0ge1xuICAgICAgICBhdWRpbzogdHJ1ZSxcbiAgICAgICAgdmlkZW86IHRydWVcbiAgICAgIH07XG4gICAgICB0aGlzLnN0YXJ0aW5nTWVkaWFJbmZvXyA9IHRyYWNrSW5mbztcbiAgICAgIHRoaXMuY3VycmVudE1lZGlhSW5mb18gPSB0cmFja0luZm87XG4gICAgICB0aGlzLmxvZ2dlcl8oJ3RyYWNraW5mbyB1cGRhdGUnLCB0cmFja0luZm8pO1xuICAgICAgdGhpcy50cmlnZ2VyKCd0cmFja2luZm8nKTtcbiAgICB9IC8vIHRyYWNraW5mbyBtYXkgY2F1c2UgYW4gYWJvcnQgaWYgdGhlIHRyYWNraW5mb1xuICAgIC8vIGNhdXNlcyBhIGNvZGVjIGNoYW5nZSB0byBhbiB1bnN1cHBvcnRlZCBjb2RlYy5cblxuXG4gICAgaWYgKHRoaXMuY2hlY2tGb3JBYm9ydF8oc2ltcGxlU2VnbWVudC5yZXF1ZXN0SWQpIHx8IHRoaXMuYWJvcnRSZXF1ZXN0RWFybHlfKHNpbXBsZVNlZ21lbnQuc3RhdHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBzZXQgdHJhY2tpbmZvIG9uIHRoZSBwZW5kaW5nIHNlZ21lbnQgc28gdGhhdFxuICAgIC8vIGl0IGNhbiBhcHBlbmQuXG5cblxuICAgIHRoaXMucGVuZGluZ1NlZ21lbnRfLnRyYWNrSW5mbyA9IHRyYWNrSW5mbzsgLy8gY2hlY2sgaWYgYW55IGNhbGxzIHdlcmUgd2FpdGluZyBvbiB0aGUgdHJhY2sgaW5mb1xuXG4gICAgaWYgKHRoaXMuaGFzRW5vdWdoSW5mb1RvQXBwZW5kXygpKSB7XG4gICAgICB0aGlzLnByb2Nlc3NDYWxsUXVldWVfKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5oYW5kbGVUaW1pbmdJbmZvXyA9IGZ1bmN0aW9uIGhhbmRsZVRpbWluZ0luZm9fKHNpbXBsZVNlZ21lbnQsIG1lZGlhVHlwZSwgdGltZVR5cGUsIHRpbWUpIHtcbiAgICBpZiAodGhpcy5jaGVja0ZvckFib3J0XyhzaW1wbGVTZWdtZW50LnJlcXVlc3RJZCkgfHwgdGhpcy5hYm9ydFJlcXVlc3RFYXJseV8oc2ltcGxlU2VnbWVudC5zdGF0cykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2VnbWVudEluZm8gPSB0aGlzLnBlbmRpbmdTZWdtZW50XztcbiAgICB2YXIgdGltaW5nSW5mb1Byb3BlcnR5ID0gdGltaW5nSW5mb1Byb3BlcnR5Rm9yTWVkaWEobWVkaWFUeXBlKTtcbiAgICBzZWdtZW50SW5mb1t0aW1pbmdJbmZvUHJvcGVydHldID0gc2VnbWVudEluZm9bdGltaW5nSW5mb1Byb3BlcnR5XSB8fCB7fTtcbiAgICBzZWdtZW50SW5mb1t0aW1pbmdJbmZvUHJvcGVydHldW3RpbWVUeXBlXSA9IHRpbWU7XG4gICAgdGhpcy5sb2dnZXJfKFwidGltaW5naW5mbzogXCIgKyBtZWRpYVR5cGUgKyBcIiAtIFwiICsgdGltZVR5cGUgKyBcIiAtIFwiICsgdGltZSk7IC8vIGNoZWNrIGlmIGFueSBjYWxscyB3ZXJlIHdhaXRpbmcgb24gdGhlIHRpbWluZyBpbmZvXG5cbiAgICBpZiAodGhpcy5oYXNFbm91Z2hJbmZvVG9BcHBlbmRfKCkpIHtcbiAgICAgIHRoaXMucHJvY2Vzc0NhbGxRdWV1ZV8oKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNhcHRpb25zXyA9IGZ1bmN0aW9uIGhhbmRsZUNhcHRpb25zXyhzaW1wbGVTZWdtZW50LCBjYXB0aW9uRGF0YSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuY2hlY2tGb3JBYm9ydF8oc2ltcGxlU2VnbWVudC5yZXF1ZXN0SWQpIHx8IHRoaXMuYWJvcnRSZXF1ZXN0RWFybHlfKHNpbXBsZVNlZ21lbnQuc3RhdHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUaGlzIGNvdWxkIG9ubHkgaGFwcGVuIHdpdGggZm1wNCBzZWdtZW50cywgYnV0XG4gICAgLy8gc2hvdWxkIHN0aWxsIG5vdCBoYXBwZW4gaW4gZ2VuZXJhbFxuXG5cbiAgICBpZiAoY2FwdGlvbkRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmxvZ2dlcl8oJ1NlZ21lbnRMb2FkZXIgcmVjZWl2ZWQgbm8gY2FwdGlvbnMgZnJvbSBhIGNhcHRpb24gZXZlbnQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2VnbWVudEluZm8gPSB0aGlzLnBlbmRpbmdTZWdtZW50XzsgLy8gV2FpdCB1bnRpbCB3ZSBoYXZlIHNvbWUgdmlkZW8gZGF0YSBzbyB0aGF0IGNhcHRpb24gdGltaW5nXG4gICAgLy8gY2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB0aW1lc3RhbXAgb2Zmc2V0XG5cbiAgICBpZiAoIXNlZ21lbnRJbmZvLmhhc0FwcGVuZGVkRGF0YV8pIHtcbiAgICAgIHRoaXMubWV0YWRhdGFRdWV1ZV8uY2FwdGlvbi5wdXNoKHRoaXMuaGFuZGxlQ2FwdGlvbnNfLmJpbmQodGhpcywgc2ltcGxlU2VnbWVudCwgY2FwdGlvbkRhdGEpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGltZXN0YW1wT2Zmc2V0ID0gdGhpcy5zb3VyY2VVcGRhdGVyXy52aWRlb1RpbWVzdGFtcE9mZnNldCgpID09PSBudWxsID8gdGhpcy5zb3VyY2VVcGRhdGVyXy5hdWRpb1RpbWVzdGFtcE9mZnNldCgpIDogdGhpcy5zb3VyY2VVcGRhdGVyXy52aWRlb1RpbWVzdGFtcE9mZnNldCgpO1xuICAgIHZhciBjYXB0aW9uVHJhY2tzID0ge307IC8vIGdldCB0b3RhbCBzdGFydC9lbmQgYW5kIGNhcHRpb25zIGZvciBlYWNoIHRyYWNrL3N0cmVhbVxuXG4gICAgY2FwdGlvbkRhdGEuZm9yRWFjaChmdW5jdGlvbiAoY2FwdGlvbikge1xuICAgICAgLy8gY2FwdGlvbi5zdHJlYW0gaXMgYWN0dWFsbHkgYSB0cmFjayBuYW1lLi4uXG4gICAgICAvLyBzZXQgdG8gdGhlIGV4aXN0aW5nIHZhbHVlcyBpbiB0cmFja3Mgb3IgZGVmYXVsdCB2YWx1ZXNcbiAgICAgIGNhcHRpb25UcmFja3NbY2FwdGlvbi5zdHJlYW1dID0gY2FwdGlvblRyYWNrc1tjYXB0aW9uLnN0cmVhbV0gfHwge1xuICAgICAgICAvLyBJbmZpbml0eSwgYXMgYW55IG90aGVyIHZhbHVlIHdpbGwgYmUgbGVzcyB0aGFuIHRoaXNcbiAgICAgICAgc3RhcnRUaW1lOiBJbmZpbml0eSxcbiAgICAgICAgY2FwdGlvbnM6IFtdLFxuICAgICAgICAvLyAwIGFzIGFuIG90aGVyIHZhbHVlIHdpbGwgYmUgbW9yZSB0aGFuIHRoaXNcbiAgICAgICAgZW5kVGltZTogMFxuICAgICAgfTtcbiAgICAgIHZhciBjYXB0aW9uVHJhY2sgPSBjYXB0aW9uVHJhY2tzW2NhcHRpb24uc3RyZWFtXTtcbiAgICAgIGNhcHRpb25UcmFjay5zdGFydFRpbWUgPSBNYXRoLm1pbihjYXB0aW9uVHJhY2suc3RhcnRUaW1lLCBjYXB0aW9uLnN0YXJ0VGltZSArIHRpbWVzdGFtcE9mZnNldCk7XG4gICAgICBjYXB0aW9uVHJhY2suZW5kVGltZSA9IE1hdGgubWF4KGNhcHRpb25UcmFjay5lbmRUaW1lLCBjYXB0aW9uLmVuZFRpbWUgKyB0aW1lc3RhbXBPZmZzZXQpO1xuICAgICAgY2FwdGlvblRyYWNrLmNhcHRpb25zLnB1c2goY2FwdGlvbik7XG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXMoY2FwdGlvblRyYWNrcykuZm9yRWFjaChmdW5jdGlvbiAodHJhY2tOYW1lKSB7XG4gICAgICB2YXIgX2NhcHRpb25UcmFja3MkdHJhY2tOID0gY2FwdGlvblRyYWNrc1t0cmFja05hbWVdLFxuICAgICAgICAgIHN0YXJ0VGltZSA9IF9jYXB0aW9uVHJhY2tzJHRyYWNrTi5zdGFydFRpbWUsXG4gICAgICAgICAgZW5kVGltZSA9IF9jYXB0aW9uVHJhY2tzJHRyYWNrTi5lbmRUaW1lLFxuICAgICAgICAgIGNhcHRpb25zID0gX2NhcHRpb25UcmFja3MkdHJhY2tOLmNhcHRpb25zO1xuICAgICAgdmFyIGluYmFuZFRleHRUcmFja3MgPSBfdGhpczMuaW5iYW5kVGV4dFRyYWNrc187XG5cbiAgICAgIF90aGlzMy5sb2dnZXJfKFwiYWRkaW5nIGN1ZXMgZnJvbSBcIiArIHN0YXJ0VGltZSArIFwiIC0+IFwiICsgZW5kVGltZSArIFwiIGZvciBcIiArIHRyYWNrTmFtZSk7XG5cbiAgICAgIGNyZWF0ZUNhcHRpb25zVHJhY2tJZk5vdEV4aXN0cyhpbmJhbmRUZXh0VHJhY2tzLCBfdGhpczMudmhzXy50ZWNoXywgdHJhY2tOYW1lKTsgLy8gY2xlYXIgb3V0IGFueSBjdWVzIHRoYXQgc3RhcnQgYW5kIGVuZCBhdCB0aGUgc2FtZSB0aW1lIHBlcmlvZCBmb3IgdGhlIHNhbWUgdHJhY2suXG4gICAgICAvLyBXZSBkbyB0aGlzIGJlY2F1c2UgYSByZW5kaXRpb24gY2hhbmdlIHRoYXQgYWxzbyBjaGFuZ2VzIHRoZSB0aW1lc2NhbGUgZm9yIGNhcHRpb25zXG4gICAgICAvLyB3aWxsIHJlc3VsdCBpbiBjYXB0aW9ucyBiZWluZyByZS1wYXJzZWQgZm9yIGNlcnRhaW4gc2VnbWVudHMuIElmIHdlIGFkZCB0aGVtIGFnYWluXG4gICAgICAvLyB3aXRob3V0IGNsZWFyaW5nIHdlIHdpbGwgaGF2ZSB0d28gb2YgdGhlIHNhbWUgY2FwdGlvbnMgdmlzaWJsZS5cblxuICAgICAgcmVtb3ZlQ3Vlc0Zyb21UcmFjayhzdGFydFRpbWUsIGVuZFRpbWUsIGluYmFuZFRleHRUcmFja3NbdHJhY2tOYW1lXSk7XG4gICAgICBhZGRDYXB0aW9uRGF0YSh7XG4gICAgICAgIGNhcHRpb25BcnJheTogY2FwdGlvbnMsXG4gICAgICAgIGluYmFuZFRleHRUcmFja3M6IGluYmFuZFRleHRUcmFja3MsXG4gICAgICAgIHRpbWVzdGFtcE9mZnNldDogdGltZXN0YW1wT2Zmc2V0XG4gICAgICB9KTtcbiAgICB9KTsgLy8gUmVzZXQgc3RvcmVkIGNhcHRpb25zIHNpbmNlIHdlIGFkZGVkIHBhcnNlZFxuICAgIC8vIGNhcHRpb25zIHRvIGEgdGV4dCB0cmFjayBhdCB0aGlzIHBvaW50XG5cbiAgICBpZiAodGhpcy50cmFuc211eGVyXykge1xuICAgICAgdGhpcy50cmFuc211eGVyXy5wb3N0TWVzc2FnZSh7XG4gICAgICAgIGFjdGlvbjogJ2NsZWFyUGFyc2VkTXA0Q2FwdGlvbnMnXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUlkM18gPSBmdW5jdGlvbiBoYW5kbGVJZDNfKHNpbXBsZVNlZ21lbnQsIGlkM0ZyYW1lcywgZGlzcGF0Y2hUeXBlKSB7XG4gICAgaWYgKHRoaXMuY2hlY2tGb3JBYm9ydF8oc2ltcGxlU2VnbWVudC5yZXF1ZXN0SWQpIHx8IHRoaXMuYWJvcnRSZXF1ZXN0RWFybHlfKHNpbXBsZVNlZ21lbnQuc3RhdHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNlZ21lbnRJbmZvID0gdGhpcy5wZW5kaW5nU2VnbWVudF87IC8vIHdlIG5lZWQgdG8gaGF2ZSBhcHBlbmRlZCBkYXRhIGluIG9yZGVyIGZvciB0aGUgdGltZXN0YW1wIG9mZnNldCB0byBiZSBzZXRcblxuICAgIGlmICghc2VnbWVudEluZm8uaGFzQXBwZW5kZWREYXRhXykge1xuICAgICAgdGhpcy5tZXRhZGF0YVF1ZXVlXy5pZDMucHVzaCh0aGlzLmhhbmRsZUlkM18uYmluZCh0aGlzLCBzaW1wbGVTZWdtZW50LCBpZDNGcmFtZXMsIGRpc3BhdGNoVHlwZSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0aW1lc3RhbXBPZmZzZXQgPSB0aGlzLnNvdXJjZVVwZGF0ZXJfLnZpZGVvVGltZXN0YW1wT2Zmc2V0KCkgPT09IG51bGwgPyB0aGlzLnNvdXJjZVVwZGF0ZXJfLmF1ZGlvVGltZXN0YW1wT2Zmc2V0KCkgOiB0aGlzLnNvdXJjZVVwZGF0ZXJfLnZpZGVvVGltZXN0YW1wT2Zmc2V0KCk7IC8vIFRoZXJlJ3MgcG90ZW50aWFsbHkgYW4gaXNzdWUgd2hlcmUgd2UgY291bGQgZG91YmxlIGFkZCBtZXRhZGF0YSBpZiB0aGVyZSdzIGEgbXV4ZWRcbiAgICAvLyBhdWRpby92aWRlbyBzb3VyY2Ugd2l0aCBhIG1ldGFkYXRhIHRyYWNrLCBhbmQgYW4gYWx0IGF1ZGlvIHdpdGggYSBtZXRhZGF0YSB0cmFjay5cbiAgICAvLyBIb3dldmVyLCB0aGlzIHByb2JhYmx5IHdvbid0IGhhcHBlbiwgYW5kIGlmIGl0IGRvZXMgaXQgY2FuIGJlIGhhbmRsZWQgdGhlbi5cblxuICAgIGNyZWF0ZU1ldGFkYXRhVHJhY2tJZk5vdEV4aXN0cyh0aGlzLmluYmFuZFRleHRUcmFja3NfLCBkaXNwYXRjaFR5cGUsIHRoaXMudmhzXy50ZWNoXyk7XG4gICAgYWRkTWV0YWRhdGEoe1xuICAgICAgaW5iYW5kVGV4dFRyYWNrczogdGhpcy5pbmJhbmRUZXh0VHJhY2tzXyxcbiAgICAgIG1ldGFkYXRhQXJyYXk6IGlkM0ZyYW1lcyxcbiAgICAgIHRpbWVzdGFtcE9mZnNldDogdGltZXN0YW1wT2Zmc2V0LFxuICAgICAgdmlkZW9EdXJhdGlvbjogdGhpcy5kdXJhdGlvbl8oKVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wcm9jZXNzTWV0YWRhdGFRdWV1ZV8gPSBmdW5jdGlvbiBwcm9jZXNzTWV0YWRhdGFRdWV1ZV8oKSB7XG4gICAgdGhpcy5tZXRhZGF0YVF1ZXVlXy5pZDMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH0pO1xuICAgIHRoaXMubWV0YWRhdGFRdWV1ZV8uY2FwdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfSk7XG4gICAgdGhpcy5tZXRhZGF0YVF1ZXVlXy5pZDMgPSBbXTtcbiAgICB0aGlzLm1ldGFkYXRhUXVldWVfLmNhcHRpb24gPSBbXTtcbiAgfTtcblxuICBfcHJvdG8ucHJvY2Vzc0NhbGxRdWV1ZV8gPSBmdW5jdGlvbiBwcm9jZXNzQ2FsbFF1ZXVlXygpIHtcbiAgICB2YXIgY2FsbFF1ZXVlID0gdGhpcy5jYWxsUXVldWVfOyAvLyBDbGVhciBvdXQgdGhlIHF1ZXVlIGJlZm9yZSB0aGUgcXVldWVkIGZ1bmN0aW9ucyBhcmUgcnVuLCBzaW5jZSBzb21lIG9mIHRoZVxuICAgIC8vIGZ1bmN0aW9ucyBtYXkgY2hlY2sgdGhlIGxlbmd0aCBvZiB0aGUgbG9hZCBxdWV1ZSBhbmQgZGVmYXVsdCB0byBwdXNoaW5nIHRoZW1zZWx2ZXNcbiAgICAvLyBiYWNrIG9udG8gdGhlIHF1ZXVlLlxuXG4gICAgdGhpcy5jYWxsUXVldWVfID0gW107XG4gICAgY2FsbFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGZ1bikge1xuICAgICAgcmV0dXJuIGZ1bigpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wcm9jZXNzTG9hZFF1ZXVlXyA9IGZ1bmN0aW9uIHByb2Nlc3NMb2FkUXVldWVfKCkge1xuICAgIHZhciBsb2FkUXVldWUgPSB0aGlzLmxvYWRRdWV1ZV87IC8vIENsZWFyIG91dCB0aGUgcXVldWUgYmVmb3JlIHRoZSBxdWV1ZWQgZnVuY3Rpb25zIGFyZSBydW4sIHNpbmNlIHNvbWUgb2YgdGhlXG4gICAgLy8gZnVuY3Rpb25zIG1heSBjaGVjayB0aGUgbGVuZ3RoIG9mIHRoZSBsb2FkIHF1ZXVlIGFuZCBkZWZhdWx0IHRvIHB1c2hpbmcgdGhlbXNlbHZlc1xuICAgIC8vIGJhY2sgb250byB0aGUgcXVldWUuXG5cbiAgICB0aGlzLmxvYWRRdWV1ZV8gPSBbXTtcbiAgICBsb2FkUXVldWUuZm9yRWFjaChmdW5jdGlvbiAoZnVuKSB7XG4gICAgICByZXR1cm4gZnVuKCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgbG9hZGVyIGhhcyBlbm91Z2ggaW5mbyB0byBsb2FkIHRoZSBuZXh0IHNlZ21lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgV2hldGhlciBvciBub3QgdGhlIGxvYWRlciBoYXMgZW5vdWdoIGluZm8gdG8gbG9hZCB0aGUgbmV4dCBzZWdtZW50XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhc0Vub3VnaEluZm9Ub0xvYWRfID0gZnVuY3Rpb24gaGFzRW5vdWdoSW5mb1RvTG9hZF8oKSB7XG4gICAgLy8gU2luY2UgcHJpbWFyeSB0aW1pbmcgZ29lcyBieSB2aWRlbywgb25seSB0aGUgYXVkaW8gbG9hZGVyIHBvdGVudGlhbGx5IG5lZWRzIHRvIHdhaXRcbiAgICAvLyB0byBsb2FkLlxuICAgIGlmICh0aGlzLmxvYWRlclR5cGVfICE9PSAnYXVkaW8nKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgc2VnbWVudEluZm8gPSB0aGlzLnBlbmRpbmdTZWdtZW50XzsgLy8gQSBmaWxsIGJ1ZmZlciBtdXN0IGhhdmUgYWxyZWFkeSBydW4gdG8gZXN0YWJsaXNoIGEgcGVuZGluZyBzZWdtZW50IGJlZm9yZSB0aGVyZSdzXG4gICAgLy8gZW5vdWdoIGluZm8gdG8gbG9hZC5cblxuICAgIGlmICghc2VnbWVudEluZm8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIFRoZSBmaXJzdCBzZWdtZW50IGNhbiBhbmQgc2hvdWxkIGJlIGxvYWRlZCBpbW1lZGlhdGVseSBzbyB0aGF0IHNvdXJjZSBidWZmZXJzIGFyZVxuICAgIC8vIGNyZWF0ZWQgdG9nZXRoZXIgKGJlZm9yZSBhcHBlbmRpbmcpLiBTb3VyY2UgYnVmZmVyIGNyZWF0aW9uIHVzZXMgdGhlIHByZXNlbmNlIG9mXG4gICAgLy8gYXVkaW8gYW5kIHZpZGVvIGRhdGEgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gY3JlYXRlIGF1ZGlvL3ZpZGVvIHNvdXJjZSBidWZmZXJzLCBhbmRcbiAgICAvLyB1c2VzIHByb2Nlc3NlZCAodHJhbnNtdXhlZCBvciBwYXJzZWQpIG1lZGlhIHRvIGRldGVybWluZSB0aGUgdHlwZXMgcmVxdWlyZWQuXG5cblxuICAgIGlmICghdGhpcy5jdXJyZW50TWVkaWFJbmZvXykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCAvLyBUZWNobmljYWxseSwgaW5zdGVhZCBvZiB3YWl0aW5nIHRvIGxvYWQgYSBzZWdtZW50IG9uIHRpbWVsaW5lIGNoYW5nZXMsIGEgc2VnbWVudFxuICAgIC8vIGNhbiBiZSByZXF1ZXN0ZWQgYW5kIGRvd25sb2FkZWQgYW5kIG9ubHkgd2FpdCBiZWZvcmUgaXQgaXMgdHJhbnNtdXhlZCBvciBwYXJzZWQuXG4gICAgLy8gQnV0IGluIHByYWN0aWNlLCB0aGVyZSBhcmUgYSBmZXcgcmVhc29ucyB3aHkgaXQgaXMgYmV0dGVyIHRvIHdhaXQgdW50aWwgYSBsb2FkZXJcbiAgICAvLyBpcyByZWFkeSB0byBhcHBlbmQgdGhhdCBzZWdtZW50IGJlZm9yZSByZXF1ZXN0aW5nIGFuZCBkb3dubG9hZGluZzpcbiAgICAvL1xuICAgIC8vIDEuIEJlY2F1c2UgYXVkaW8gYW5kIG1haW4gbG9hZGVycyBjcm9zcyBkaXNjb250aW51aXRpZXMgdG9nZXRoZXIsIGlmIHRoaXMgbG9hZGVyXG4gICAgLy8gICAgaXMgd2FpdGluZyBmb3IgdGhlIG90aGVyIHRvIGNhdGNoIHVwLCB0aGVuIGluc3RlYWQgb2YgcmVxdWVzdGluZyBhbm90aGVyXG4gICAgLy8gICAgc2VnbWVudCBhbmQgdXNpbmcgdXAgbW9yZSBiYW5kd2lkdGgsIGJ5IG5vdCB5ZXQgbG9hZGluZywgbW9yZSBiYW5kd2lkdGggaXNcbiAgICAvLyAgICBhbGxvdHRlZCB0byB0aGUgbG9hZGVyIGN1cnJlbnRseSBiZWhpbmQuXG4gICAgLy8gMi4gbWVkaWEtc2VnbWVudC1yZXF1ZXN0IGRvZXNuJ3QgaGF2ZSB0byBoYXZlIGxvZ2ljIHRvIGNvbnNpZGVyIHdoZXRoZXIgYSBzZWdtZW50XG4gICAgLy8gaXMgcmVhZHkgdG8gYmUgcHJvY2Vzc2VkIG9yIG5vdCwgaXNvbGF0aW5nIHRoZSBxdWV1ZWluZyBiZWhhdmlvciB0byB0aGUgbG9hZGVyLlxuICAgIC8vIDMuIFRoZSBhdWRpbyBsb2FkZXIgYmFzZXMgc29tZSBvZiBpdHMgc2VnbWVudCBwcm9wZXJ0aWVzIG9uIHRpbWluZyBpbmZvcm1hdGlvblxuICAgIC8vICAgIHByb3ZpZGVkIGJ5IHRoZSBtYWluIGxvYWRlciwgbWVhbmluZyB0aGF0LCBpZiB0aGUgbG9naWMgZm9yIHdhaXRpbmcgb25cbiAgICAvLyAgICBwcm9jZXNzaW5nIHdhcyBpbiBtZWRpYS1zZWdtZW50LXJlcXVlc3QsIHRoZW4gaXQgd291bGQgYWxzbyBuZWVkIHRvIGtub3cgaG93XG4gICAgLy8gICAgdG8gcmUtZ2VuZXJhdGUgdGhlIHNlZ21lbnQgaW5mb3JtYXRpb24gYWZ0ZXIgdGhlIG1haW4gbG9hZGVyIGNhdWdodCB1cC5cbiAgICBzaG91bGRXYWl0Rm9yVGltZWxpbmVDaGFuZ2Uoe1xuICAgICAgdGltZWxpbmVDaGFuZ2VDb250cm9sbGVyOiB0aGlzLnRpbWVsaW5lQ2hhbmdlQ29udHJvbGxlcl8sXG4gICAgICBjdXJyZW50VGltZWxpbmU6IHRoaXMuY3VycmVudFRpbWVsaW5lXyxcbiAgICAgIHNlZ21lbnRUaW1lbGluZTogc2VnbWVudEluZm8udGltZWxpbmUsXG4gICAgICBsb2FkZXJUeXBlOiB0aGlzLmxvYWRlclR5cGVfLFxuICAgICAgYXVkaW9EaXNhYmxlZDogdGhpcy5hdWRpb0Rpc2FibGVkX1xuICAgIH0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmhhc0Vub3VnaEluZm9Ub0FwcGVuZF8gPSBmdW5jdGlvbiBoYXNFbm91Z2hJbmZvVG9BcHBlbmRfKCkge1xuICAgIGlmICghdGhpcy5zb3VyY2VVcGRhdGVyXy5yZWFkeSgpKSB7XG4gICAgICAvLyB3YWl0aW5nIG9uIG9uZSBvZiB0aGUgc2VnbWVudCBsb2FkZXJzIHRvIGdldCBlbm91Z2ggZGF0YSB0byBjcmVhdGUgc291cmNlIGJ1ZmZlcnNcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgc2VnbWVudEluZm8gPSB0aGlzLnBlbmRpbmdTZWdtZW50XzsgLy8gbm8gc2VnbWVudCB0byBhcHBlbmQgYW55IGRhdGEgZm9yIG9yXG4gICAgLy8gd2UgZG8gbm90IGhhdmUgaW5mb3JtYXRpb24gb24gdGhpcyBzcGVjaWZpY1xuICAgIC8vIHNlZ21lbnQgeWV0XG5cbiAgICBpZiAoIXNlZ21lbnRJbmZvIHx8ICFzZWdtZW50SW5mby50cmFja0luZm8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGFuZGxlUGFydGlhbERhdGFfKSB7XG4gICAgICB2YXIgX3RoaXMkY3VycmVudE1lZGlhSW5mID0gdGhpcy5jdXJyZW50TWVkaWFJbmZvXyxcbiAgICAgICAgICBoYXNBdWRpbyA9IF90aGlzJGN1cnJlbnRNZWRpYUluZi5oYXNBdWRpbyxcbiAgICAgICAgICBoYXNWaWRlbyA9IF90aGlzJGN1cnJlbnRNZWRpYUluZi5oYXNWaWRlbyxcbiAgICAgICAgICBpc011eGVkID0gX3RoaXMkY3VycmVudE1lZGlhSW5mLmlzTXV4ZWQ7XG5cbiAgICAgIGlmIChoYXNWaWRlbyAmJiAhc2VnbWVudEluZm8udmlkZW9UaW1pbmdJbmZvKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gLy8gbXV4ZWQgY29udGVudCBvbmx5IHJlbGllcyBvbiB2aWRlbyB0aW1pbmcgaW5mb3JtYXRpb24gZm9yIG5vdy5cblxuXG4gICAgICBpZiAoaGFzQXVkaW8gJiYgIXRoaXMuYXVkaW9EaXNhYmxlZF8gJiYgIWlzTXV4ZWQgJiYgIXNlZ21lbnRJbmZvLmF1ZGlvVGltaW5nSW5mbykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFdhaXRGb3JUaW1lbGluZUNoYW5nZSh7XG4gICAgICB0aW1lbGluZUNoYW5nZUNvbnRyb2xsZXI6IHRoaXMudGltZWxpbmVDaGFuZ2VDb250cm9sbGVyXyxcbiAgICAgIGN1cnJlbnRUaW1lbGluZTogdGhpcy5jdXJyZW50VGltZWxpbmVfLFxuICAgICAgc2VnbWVudFRpbWVsaW5lOiBzZWdtZW50SW5mby50aW1lbGluZSxcbiAgICAgIGxvYWRlclR5cGU6IHRoaXMubG9hZGVyVHlwZV8sXG4gICAgICBhdWRpb0Rpc2FibGVkOiB0aGlzLmF1ZGlvRGlzYWJsZWRfXG4gICAgfSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlRGF0YV8gPSBmdW5jdGlvbiBoYW5kbGVEYXRhXyhzaW1wbGVTZWdtZW50LCByZXN1bHQpIHtcbiAgICBpZiAodGhpcy5jaGVja0ZvckFib3J0XyhzaW1wbGVTZWdtZW50LnJlcXVlc3RJZCkgfHwgdGhpcy5hYm9ydFJlcXVlc3RFYXJseV8oc2ltcGxlU2VnbWVudC5zdGF0cykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoZXJlJ3MgYW55dGhpbmcgaW4gdGhlIGNhbGwgcXVldWUsIHRoZW4gdGhpcyBkYXRhIGNhbWUgbGF0ZXIgYW5kIHNob3VsZCBiZVxuICAgIC8vIGV4ZWN1dGVkIGFmdGVyIHRoZSBjYWxscyBjdXJyZW50bHkgcXVldWVkLlxuXG5cbiAgICBpZiAodGhpcy5jYWxsUXVldWVfLmxlbmd0aCB8fCAhdGhpcy5oYXNFbm91Z2hJbmZvVG9BcHBlbmRfKCkpIHtcbiAgICAgIHRoaXMuY2FsbFF1ZXVlXy5wdXNoKHRoaXMuaGFuZGxlRGF0YV8uYmluZCh0aGlzLCBzaW1wbGVTZWdtZW50LCByZXN1bHQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2VnbWVudEluZm8gPSB0aGlzLnBlbmRpbmdTZWdtZW50XzsgLy8gdXBkYXRlIHRoZSB0aW1lIG1hcHBpbmcgc28gd2UgY2FuIHRyYW5zbGF0ZSBmcm9tIGRpc3BsYXkgdGltZSB0byBtZWRpYSB0aW1lXG5cbiAgICB0aGlzLnNldFRpbWVNYXBwaW5nXyhzZWdtZW50SW5mby50aW1lbGluZSk7IC8vIGZvciB0cmFja2luZyBvdmVyYWxsIHN0YXRzXG5cbiAgICB0aGlzLnVwZGF0ZU1lZGlhU2Vjb25kc0xvYWRlZF8oc2VnbWVudEluZm8uc2VnbWVudCk7IC8vIE5vdGUgdGhhdCB0aGUgc3RhdGUgaXNuJ3QgY2hhbmdlZCBmcm9tIGxvYWRpbmcgdG8gYXBwZW5kaW5nLiBUaGlzIGlzIGJlY2F1c2UgYWJvcnRcbiAgICAvLyBsb2dpYyBtYXkgY2hhbmdlIGJlaGF2aW9yIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUsIGFuZCBjaGFuZ2luZyBzdGF0ZSB0b28gZWFybHkgbWF5XG4gICAgLy8gaW5mbGF0ZSBvdXIgZXN0aW1hdGVzIG9mIGJhbmR3aWR0aC4gSW4gdGhlIGZ1dHVyZSB0aGlzIHNob3VsZCBiZSByZS1leGFtaW5lZCB0b1xuICAgIC8vIG5vdGUgbW9yZSBncmFudWxhciBzdGF0ZXMuXG4gICAgLy8gZG9uJ3QgcHJvY2VzcyBhbmQgYXBwZW5kIGRhdGEgaWYgdGhlIG1lZGlhU291cmNlIGlzIGNsb3NlZFxuXG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2VfLnJlYWR5U3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBpZiB0aGlzIHJlcXVlc3QgaW5jbHVkZWQgYW4gaW5pdGlhbGl6YXRpb24gc2VnbWVudCwgc2F2ZSB0aGF0IGRhdGFcbiAgICAvLyB0byB0aGUgaW5pdFNlZ21lbnQgY2FjaGVcblxuXG4gICAgaWYgKHNpbXBsZVNlZ21lbnQubWFwKSB7XG4gICAgICBzaW1wbGVTZWdtZW50Lm1hcCA9IHRoaXMuaW5pdFNlZ21lbnRGb3JNYXAoc2ltcGxlU2VnbWVudC5tYXAsIHRydWUpOyAvLyBtb3ZlIG92ZXIgaW5pdCBzZWdtZW50IHByb3BlcnRpZXMgdG8gbWVkaWEgcmVxdWVzdFxuXG4gICAgICBzZWdtZW50SW5mby5zZWdtZW50Lm1hcCA9IHNpbXBsZVNlZ21lbnQubWFwO1xuICAgIH0gLy8gaWYgdGhpcyByZXF1ZXN0IGluY2x1ZGVkIGEgc2VnbWVudCBrZXksIHNhdmUgdGhhdCBkYXRhIGluIHRoZSBjYWNoZVxuXG5cbiAgICBpZiAoc2ltcGxlU2VnbWVudC5rZXkpIHtcbiAgICAgIHRoaXMuc2VnbWVudEtleShzaW1wbGVTZWdtZW50LmtleSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgc2VnbWVudEluZm8uaXNGbXA0ID0gc2ltcGxlU2VnbWVudC5pc0ZtcDQ7XG4gICAgc2VnbWVudEluZm8udGltaW5nSW5mbyA9IHNlZ21lbnRJbmZvLnRpbWluZ0luZm8gfHwge307XG5cbiAgICBpZiAoc2VnbWVudEluZm8uaXNGbXA0KSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2ZtcDQnKTtcbiAgICAgIHNlZ21lbnRJbmZvLnRpbWluZ0luZm8uc3RhcnQgPSBzZWdtZW50SW5mb1t0aW1pbmdJbmZvUHJvcGVydHlGb3JNZWRpYShyZXN1bHQudHlwZSldLnN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXNlVmlkZW9UaW1pbmdJbmZvID0gdGhpcy5sb2FkZXJUeXBlXyA9PT0gJ21haW4nICYmIHRoaXMuY3VycmVudE1lZGlhSW5mb18uaGFzVmlkZW87XG4gICAgICB2YXIgZmlyc3RWaWRlb0ZyYW1lVGltZUZvckRhdGE7XG5cbiAgICAgIGlmICh1c2VWaWRlb1RpbWluZ0luZm8pIHtcbiAgICAgICAgZmlyc3RWaWRlb0ZyYW1lVGltZUZvckRhdGEgPSB0aGlzLmhhbmRsZVBhcnRpYWxEYXRhXyA/IHJlc3VsdC52aWRlb0ZyYW1lUHRzVGltZSA6IHNlZ21lbnRJbmZvLnZpZGVvVGltaW5nSW5mby5zdGFydDtcbiAgICAgIH0gLy8gU2VnbWVudCBsb2FkZXIga25vd3MgbW9yZSBhYm91dCBzZWdtZW50IHRpbWluZyB0aGFuIHRoZSB0cmFuc211eGVyIChpbiBjZXJ0YWluXG4gICAgICAvLyBhc3BlY3RzKSwgc28gbWFrZSBhbnkgY2hhbmdlcyByZXF1aXJlZCBmb3IgYSBtb3JlIGFjY3VyYXRlIHN0YXJ0IHRpbWUuXG4gICAgICAvLyBEb24ndCBzZXQgdGhlIGVuZCB0aW1lIHlldCwgYXMgdGhlIHNlZ21lbnQgbWF5IG5vdCBiZSBmaW5pc2hlZCBwcm9jZXNzaW5nLlxuXG5cbiAgICAgIHNlZ21lbnRJbmZvLnRpbWluZ0luZm8uc3RhcnQgPSB0aGlzLnRydWVTZWdtZW50U3RhcnRfKHtcbiAgICAgICAgY3VycmVudFN0YXJ0OiBzZWdtZW50SW5mby50aW1pbmdJbmZvLnN0YXJ0LFxuICAgICAgICBwbGF5bGlzdDogc2VnbWVudEluZm8ucGxheWxpc3QsXG4gICAgICAgIG1lZGlhSW5kZXg6IHNlZ21lbnRJbmZvLm1lZGlhSW5kZXgsXG4gICAgICAgIGN1cnJlbnRWaWRlb1RpbWVzdGFtcE9mZnNldDogdGhpcy5zb3VyY2VVcGRhdGVyXy52aWRlb1RpbWVzdGFtcE9mZnNldCgpLFxuICAgICAgICB1c2VWaWRlb1RpbWluZ0luZm86IHVzZVZpZGVvVGltaW5nSW5mbyxcbiAgICAgICAgZmlyc3RWaWRlb0ZyYW1lVGltZUZvckRhdGE6IGZpcnN0VmlkZW9GcmFtZVRpbWVGb3JEYXRhLFxuICAgICAgICB2aWRlb1RpbWluZ0luZm86IHNlZ21lbnRJbmZvLnZpZGVvVGltaW5nSW5mbyxcbiAgICAgICAgYXVkaW9UaW1pbmdJbmZvOiBzZWdtZW50SW5mby5hdWRpb1RpbWluZ0luZm9cbiAgICAgIH0pO1xuICAgIH0gLy8gSW5pdCBzZWdtZW50cyBmb3IgYXVkaW8gYW5kIHZpZGVvIG9ubHkgbmVlZCB0byBiZSBhcHBlbmRlZCBpbiBjZXJ0YWluIGNhc2VzLiBOb3dcbiAgICAvLyB0aGF0IGRhdGEgaXMgYWJvdXQgdG8gYmUgYXBwZW5kZWQsIHdlIGNhbiBjaGVjayB0aGUgZmluYWwgY2FzZXMgdG8gZGV0ZXJtaW5lXG4gICAgLy8gd2hldGhlciB3ZSBzaG91bGQgYXBwZW5kIGFuIGluaXQgc2VnbWVudC5cblxuXG4gICAgdGhpcy51cGRhdGVBcHBlbmRJbml0U2VnbWVudFN0YXR1cyhzZWdtZW50SW5mbywgcmVzdWx0LnR5cGUpOyAvLyBUaW1lc3RhbXAgb2Zmc2V0IHNob3VsZCBiZSB1cGRhdGVkIG9uY2Ugd2UgZ2V0IG5ldyBkYXRhIGFuZCBoYXZlIGl0cyB0aW1pbmcgaW5mbyxcbiAgICAvLyBhcyB3ZSB1c2UgdGhlIHN0YXJ0IG9mIHRoZSBzZWdtZW50IHRvIG9mZnNldCB0aGUgYmVzdCBndWVzcyAocGxheWxpc3QgcHJvdmlkZWQpXG4gICAgLy8gdGltZXN0YW1wIG9mZnNldC5cblxuICAgIHRoaXMudXBkYXRlU291cmNlQnVmZmVyVGltZXN0YW1wT2Zmc2V0XyhzZWdtZW50SW5mbyk7IC8vIFNhdmUgc29tZSBzdGF0ZSBzbyB0aGF0IGluIHRoZSBmdXR1cmUgYW55dGhpbmcgd2FpdGluZyBvbiBmaXJzdCBhcHBlbmQgKGFuZC9vclxuICAgIC8vIHRpbWVzdGFtcCBvZmZzZXQocykpIGNhbiBwcm9jZXNzIGltbWVkaWF0ZWx5LiBXaGlsZSB0aGUgZXh0cmEgc3RhdGUgaXNuJ3Qgb3B0aW1hbCxcbiAgICAvLyB3ZSBuZWVkIHNvbWUgbm90aW9uIG9mIHdoZXRoZXIgdGhlIHRpbWVzdGFtcCBvZmZzZXQgb3Igb3RoZXIgcmVsZXZhbnQgaW5mb3JtYXRpb25cbiAgICAvLyBoYXMgaGFkIGEgY2hhbmNlIHRvIGJlIHNldC5cblxuICAgIHNlZ21lbnRJbmZvLmhhc0FwcGVuZGVkRGF0YV8gPSB0cnVlOyAvLyBOb3cgdGhhdCB0aGUgdGltZXN0YW1wIG9mZnNldCBzaG91bGQgYmUgc2V0LCB3ZSBjYW4gYXBwZW5kIGFueSB3YWl0aW5nIElEMyB0YWdzLlxuXG4gICAgdGhpcy5wcm9jZXNzTWV0YWRhdGFRdWV1ZV8oKTtcbiAgICB0aGlzLmFwcGVuZERhdGFfKHNlZ21lbnRJbmZvLCByZXN1bHQpO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVBcHBlbmRJbml0U2VnbWVudFN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZUFwcGVuZEluaXRTZWdtZW50U3RhdHVzKHNlZ21lbnRJbmZvLCB0eXBlKSB7XG4gICAgLy8gYWx0IGF1ZGlvIGRvZXNuJ3QgbWFuYWdlIHRpbWVzdGFtcCBvZmZzZXRcbiAgICBpZiAodGhpcy5sb2FkZXJUeXBlXyA9PT0gJ21haW4nICYmIHR5cGVvZiBzZWdtZW50SW5mby50aW1lc3RhbXBPZmZzZXQgPT09ICdudW1iZXInICYmIC8vIGluIHRoZSBjYXNlIHRoYXQgd2UncmUgaGFuZGxpbmcgcGFydGlhbCBkYXRhLCB3ZSBkb24ndCB3YW50IHRvIGFwcGVuZCBhbiBpbml0XG4gICAgLy8gc2VnbWVudCBmb3IgZWFjaCBjaHVua1xuICAgICFzZWdtZW50SW5mby5jaGFuZ2VkVGltZXN0YW1wT2Zmc2V0KSB7XG4gICAgICAvLyBpZiB0aGUgdGltZXN0YW1wIG9mZnNldCBjaGFuZ2VkLCB0aGUgdGltZWxpbmUgbWF5IGhhdmUgY2hhbmdlZCwgc28gd2UgaGF2ZSB0byByZS1cbiAgICAgIC8vIGFwcGVuZCBpbml0IHNlZ21lbnRzXG4gICAgICB0aGlzLmFwcGVuZEluaXRTZWdtZW50XyA9IHtcbiAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgIHZpZGVvOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBsYXlsaXN0T2ZMYXN0SW5pdFNlZ21lbnRfW3R5cGVdICE9PSBzZWdtZW50SW5mby5wbGF5bGlzdCkge1xuICAgICAgLy8gbWFrZSBzdXJlIHdlIGFwcGVuZCBpbml0IHNlZ21lbnQgb24gcGxheWxpc3QgY2hhbmdlcywgaW4gY2FzZSB0aGUgbWVkaWEgY29uZmlnXG4gICAgICAvLyBjaGFuZ2VkXG4gICAgICB0aGlzLmFwcGVuZEluaXRTZWdtZW50X1t0eXBlXSA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRJbml0U2VnbWVudEFuZFVwZGF0ZVN0YXRlXyA9IGZ1bmN0aW9uIGdldEluaXRTZWdtZW50QW5kVXBkYXRlU3RhdGVfKF9yZWYzKSB7XG4gICAgdmFyIHR5cGUgPSBfcmVmMy50eXBlLFxuICAgICAgICBpbml0U2VnbWVudCA9IF9yZWYzLmluaXRTZWdtZW50LFxuICAgICAgICBtYXAgPSBfcmVmMy5tYXAsXG4gICAgICAgIHBsYXlsaXN0ID0gX3JlZjMucGxheWxpc3Q7IC8vIFwiVGhlIEVYVC1YLU1BUCB0YWcgc3BlY2lmaWVzIGhvdyB0byBvYnRhaW4gdGhlIE1lZGlhIEluaXRpYWxpemF0aW9uIFNlY3Rpb25cbiAgICAvLyAoU2VjdGlvbiAzKSByZXF1aXJlZCB0byBwYXJzZSB0aGUgYXBwbGljYWJsZSBNZWRpYSBTZWdtZW50cy4gIEl0IGFwcGxpZXMgdG8gZXZlcnlcbiAgICAvLyBNZWRpYSBTZWdtZW50IHRoYXQgYXBwZWFycyBhZnRlciBpdCBpbiB0aGUgUGxheWxpc3QgdW50aWwgdGhlIG5leHQgRVhULVgtTUFQIHRhZ1xuICAgIC8vIG9yIHVudGlsIHRoZSBlbmQgb2YgdGhlIHBsYXlsaXN0LlwiXG4gICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LXBhbnRvcy1odHRwLWxpdmUtc3RyZWFtaW5nLTIzI3NlY3Rpb24tNC4zLjIuNVxuXG4gICAgaWYgKG1hcCkge1xuICAgICAgdmFyIGlkID0gaW5pdFNlZ21lbnRJZChtYXApO1xuXG4gICAgICBpZiAodGhpcy5hY3RpdmVJbml0U2VnbWVudElkXyA9PT0gaWQpIHtcbiAgICAgICAgLy8gZG9uJ3QgbmVlZCB0byByZS1hcHBlbmQgdGhlIGluaXQgc2VnbWVudCBpZiB0aGUgSUQgbWF0Y2hlc1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gLy8gYSBtYXAtc3BlY2lmaWVkIGluaXQgc2VnbWVudCB0YWtlcyBwcmlvcml0eSBvdmVyIGFueSB0cmFuc211eGVkIChvciBvdGhlcndpc2VcbiAgICAgIC8vIG9idGFpbmVkKSBpbml0IHNlZ21lbnRcbiAgICAgIC8vXG4gICAgICAvLyB0aGlzIGFsc28gY2FjaGVzIHRoZSBpbml0IHNlZ21lbnQgZm9yIGxhdGVyIHVzZVxuXG5cbiAgICAgIGluaXRTZWdtZW50ID0gdGhpcy5pbml0U2VnbWVudEZvck1hcChtYXAsIHRydWUpLmJ5dGVzO1xuICAgICAgdGhpcy5hY3RpdmVJbml0U2VnbWVudElkXyA9IGlkO1xuICAgIH0gLy8gV2UgdXNlZCB0byBhbHdheXMgcHJlcGVuZCBpbml0IHNlZ21lbnRzIGZvciB2aWRlbywgaG93ZXZlciwgdGhhdCBzaG91bGRuJ3QgYmVcbiAgICAvLyBuZWNlc3NhcnkuIEluc3RlYWQsIHdlIHNob3VsZCBvbmx5IGFwcGVuZCBvbiBjaGFuZ2VzLCBzaW1pbGFyIHRvIHdoYXQgd2UndmUgYWx3YXlzXG4gICAgLy8gZG9uZSBmb3IgYXVkaW8uIFRoaXMgaXMgbW9yZSBpbXBvcnRhbnQgKHRob3VnaCBtYXkgbm90IGJlIHRoYXQgaW1wb3J0YW50KSBmb3JcbiAgICAvLyBmcmFtZS1ieS1mcmFtZSBhcHBlbmRpbmcgZm9yIExITFMsIHNpbXBseSBiZWNhdXNlIG9mIHRoZSBpbmNyZWFzZWQgcXVhbnRpdHkgb2ZcbiAgICAvLyBhcHBlbmRzLlxuXG5cbiAgICBpZiAoaW5pdFNlZ21lbnQgJiYgdGhpcy5hcHBlbmRJbml0U2VnbWVudF9bdHlwZV0pIHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSB0cmFjayB0aGUgcGxheWxpc3QgdGhhdCB3ZSBsYXN0IHVzZWQgZm9yIHRoZSBpbml0IHNlZ21lbnQsIHNvIHRoYXRcbiAgICAgIC8vIHdlIGNhbiByZS1hcHBlbmQgdGhlIGluaXQgc2VnbWVudCBpbiB0aGUgZXZlbnQgdGhhdCB3ZSBnZXQgZGF0YSBmcm9tIGEgbmV3XG4gICAgICAvLyBwbGF5bGlzdC4gRGlzY29udGludWl0aWVzIGFuZCB0cmFjayBjaGFuZ2VzIGFyZSBoYW5kbGVkIGluIG90aGVyIHNlY3Rpb25zLlxuICAgICAgdGhpcy5wbGF5bGlzdE9mTGFzdEluaXRTZWdtZW50X1t0eXBlXSA9IHBsYXlsaXN0OyAvLyB3ZSBzaG91bGQgb25seSBiZSBhcHBlbmRpbmcgdGhlIG5leHQgaW5pdCBzZWdtZW50IGlmIHdlIGRldGVjdCBhIGNoYW5nZSwgb3IgaWZcbiAgICAgIC8vIHRoZSBzZWdtZW50IGhhcyBhIG1hcFxuXG4gICAgICB0aGlzLmFwcGVuZEluaXRTZWdtZW50X1t0eXBlXSA9IG1hcCA/IHRydWUgOiBmYWxzZTsgLy8gd2UgbmVlZCB0byBjbGVhciBvdXQgdGhlIGZtcDQgYWN0aXZlIGluaXQgc2VnbWVudCBpZCwgc2luY2VcbiAgICAgIC8vIHdlIGFyZSBhcHBlbmRpbmcgdGhlIG11eGVyIGluaXQgc2VnbWVudFxuXG4gICAgICB0aGlzLmFjdGl2ZUluaXRTZWdtZW50SWRfID0gbnVsbDtcbiAgICAgIHJldHVybiBpbml0U2VnbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uYXBwZW5kVG9Tb3VyY2VCdWZmZXJfID0gZnVuY3Rpb24gYXBwZW5kVG9Tb3VyY2VCdWZmZXJfKF9yZWY0KSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgc2VnbWVudEluZm8gPSBfcmVmNC5zZWdtZW50SW5mbyxcbiAgICAgICAgdHlwZSA9IF9yZWY0LnR5cGUsXG4gICAgICAgIGluaXRTZWdtZW50ID0gX3JlZjQuaW5pdFNlZ21lbnQsXG4gICAgICAgIGRhdGEgPSBfcmVmNC5kYXRhO1xuICAgIHZhciBzZWdtZW50cyA9IFtkYXRhXTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aDtcblxuICAgIGlmIChpbml0U2VnbWVudCkge1xuICAgICAgLy8gaWYgdGhlIG1lZGlhIGluaXRpYWxpemF0aW9uIHNlZ21lbnQgaXMgY2hhbmdpbmcsIGFwcGVuZCBpdCBiZWZvcmUgdGhlIGNvbnRlbnRcbiAgICAgIC8vIHNlZ21lbnRcbiAgICAgIHNlZ21lbnRzLnVuc2hpZnQoaW5pdFNlZ21lbnQpO1xuICAgICAgYnl0ZUxlbmd0aCArPSBpbml0U2VnbWVudC5ieXRlTGVuZ3RoO1xuICAgIH0gLy8gVGVjaG5pY2FsbHkgd2Ugc2hvdWxkIGJlIE9LIGFwcGVuZGluZyB0aGUgaW5pdCBzZWdtZW50IHNlcGFyYXRlbHksIGhvd2V2ZXIsIHdlXG4gICAgLy8gaGF2ZW4ndCB5ZXQgdGVzdGVkIHRoYXQsIGFuZCBwcmVwZW5kaW5nIGlzIGhvdyB3ZSBoYXZlIGFsd2F5cyBkb25lIHRoaW5ncy5cblxuXG4gICAgdmFyIGJ5dGVzID0gY29uY2F0U2VnbWVudHMoe1xuICAgICAgYnl0ZXM6IGJ5dGVMZW5ndGgsXG4gICAgICBzZWdtZW50czogc2VnbWVudHNcbiAgICB9KTtcbiAgICB0aGlzLnNvdXJjZVVwZGF0ZXJfLmFwcGVuZEJ1ZmZlcih7XG4gICAgICBzZWdtZW50SW5mbzogc2VnbWVudEluZm8sXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgYnl0ZXM6IGJ5dGVzXG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgX3RoaXM0LmVycm9yKHR5cGUgKyBcIiBhcHBlbmQgb2YgXCIgKyBieXRlcy5sZW5ndGggKyBcImIgZmFpbGVkIGZvciBzZWdtZW50ICNcIiArIHNlZ21lbnRJbmZvLm1lZGlhSW5kZXggKyBcIiBpbiBwbGF5bGlzdCBcIiArIHNlZ21lbnRJbmZvLnBsYXlsaXN0LmlkKTsgLy8gSWYgYW4gYXBwZW5kIGVycm9ycywgd2UgY2FuJ3QgcmVjb3Zlci5cbiAgICAgICAgLy8gKHNlZSBodHRwczovL3czYy5naXRodWIuaW8vbWVkaWEtc291cmNlLyNzb3VyY2VidWZmZXItYXBwZW5kLWVycm9yKS5cbiAgICAgICAgLy8gVHJpZ2dlciBhIHNwZWNpYWwgZXJyb3Igc28gdGhhdCBpdCBjYW4gYmUgaGFuZGxlZCBzZXBhcmF0ZWx5IGZyb20gbm9ybWFsLFxuICAgICAgICAvLyByZWNvdmVyYWJsZSBlcnJvcnMuXG5cblxuICAgICAgICBfdGhpczQudHJpZ2dlcignYXBwZW5kZXJyb3InKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlVmlkZW9TZWdtZW50VGltaW5nSW5mb18gPSBmdW5jdGlvbiBoYW5kbGVWaWRlb1NlZ21lbnRUaW1pbmdJbmZvXyhyZXF1ZXN0SWQsIHZpZGVvU2VnbWVudFRpbWluZ0luZm8pIHtcbiAgICBpZiAoIXRoaXMucGVuZGluZ1NlZ21lbnRfIHx8IHJlcXVlc3RJZCAhPT0gdGhpcy5wZW5kaW5nU2VnbWVudF8ucmVxdWVzdElkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNlZ21lbnQgPSB0aGlzLnBlbmRpbmdTZWdtZW50Xy5zZWdtZW50O1xuXG4gICAgaWYgKCFzZWdtZW50LnZpZGVvVGltaW5nSW5mbykge1xuICAgICAgc2VnbWVudC52aWRlb1RpbWluZ0luZm8gPSB7fTtcbiAgICB9XG5cbiAgICBzZWdtZW50LnZpZGVvVGltaW5nSW5mby50cmFuc211eGVyUHJlcGVuZGVkU2Vjb25kcyA9IHZpZGVvU2VnbWVudFRpbWluZ0luZm8ucHJlcGVuZGVkQ29udGVudER1cmF0aW9uIHx8IDA7XG4gICAgc2VnbWVudC52aWRlb1RpbWluZ0luZm8udHJhbnNtdXhlZFByZXNlbnRhdGlvblN0YXJ0ID0gdmlkZW9TZWdtZW50VGltaW5nSW5mby5zdGFydC5wcmVzZW50YXRpb247XG4gICAgc2VnbWVudC52aWRlb1RpbWluZ0luZm8udHJhbnNtdXhlZFByZXNlbnRhdGlvbkVuZCA9IHZpZGVvU2VnbWVudFRpbWluZ0luZm8uZW5kLnByZXNlbnRhdGlvbjsgLy8gbWFpbmx5IHVzZWQgYXMgYSByZWZlcmVuY2UgZm9yIGRlYnVnZ2luZ1xuXG4gICAgc2VnbWVudC52aWRlb1RpbWluZ0luZm8uYmFzZU1lZGlhRGVjb2RlVGltZSA9IHZpZGVvU2VnbWVudFRpbWluZ0luZm8uYmFzZU1lZGlhRGVjb2RlVGltZTtcbiAgfTtcblxuICBfcHJvdG8uYXBwZW5kRGF0YV8gPSBmdW5jdGlvbiBhcHBlbmREYXRhXyhzZWdtZW50SW5mbywgcmVzdWx0KSB7XG4gICAgdmFyIHR5cGUgPSByZXN1bHQudHlwZSxcbiAgICAgICAgZGF0YSA9IHJlc3VsdC5kYXRhO1xuXG4gICAgaWYgKCFkYXRhIHx8ICFkYXRhLmJ5dGVMZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJyAmJiB0aGlzLmF1ZGlvRGlzYWJsZWRfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGluaXRTZWdtZW50ID0gdGhpcy5nZXRJbml0U2VnbWVudEFuZFVwZGF0ZVN0YXRlXyh7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgaW5pdFNlZ21lbnQ6IHJlc3VsdC5pbml0U2VnbWVudCxcbiAgICAgIHBsYXlsaXN0OiBzZWdtZW50SW5mby5wbGF5bGlzdCxcbiAgICAgIG1hcDogc2VnbWVudEluZm8uaXNGbXA0ID8gc2VnbWVudEluZm8uc2VnbWVudC5tYXAgOiBudWxsXG4gICAgfSk7XG4gICAgdGhpcy5hcHBlbmRUb1NvdXJjZUJ1ZmZlcl8oe1xuICAgICAgc2VnbWVudEluZm86IHNlZ21lbnRJbmZvLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGluaXRTZWdtZW50OiBpbml0U2VnbWVudCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogbG9hZCBhIHNwZWNpZmljIHNlZ21lbnQgZnJvbSBhIHJlcXVlc3QgaW50byB0aGUgYnVmZmVyXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxvYWRTZWdtZW50XyA9IGZ1bmN0aW9uIGxvYWRTZWdtZW50XyhzZWdtZW50SW5mbykge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdGhpcy5zdGF0ZSA9ICdXQUlUSU5HJztcbiAgICB0aGlzLnBlbmRpbmdTZWdtZW50XyA9IHNlZ21lbnRJbmZvO1xuICAgIHRoaXMudHJpbUJhY2tCdWZmZXJfKHNlZ21lbnRJbmZvKTtcblxuICAgIGlmICh0eXBlb2Ygc2VnbWVudEluZm8udGltZXN0YW1wT2Zmc2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKHRoaXMudHJhbnNtdXhlcl8pIHtcbiAgICAgICAgdGhpcy50cmFuc211eGVyXy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgYWN0aW9uOiAnY2xlYXJBbGxNcDRDYXB0aW9ucydcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhhc0Vub3VnaEluZm9Ub0xvYWRfKCkpIHtcbiAgICAgIHRoaXMubG9hZFF1ZXVlXy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlcmVkID0gX3RoaXM1LmJ1ZmZlcmVkXygpO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc2VnbWVudEluZm8udGltZXN0YW1wT2Zmc2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIC8vIFRoZSB0aW1lc3RhbXAgb2Zmc2V0IG5lZWRzIHRvIGJlIHJlZ2VuZXJhdGVkLCBhcyB0aGUgYnVmZmVyIG1vc3QgbGlrZWx5XG4gICAgICAgICAgLy8gY2hhbmdlZCBzaW5jZSB0aGUgZnVuY3Rpb24gd2FzIGFkZGVkIHRvIHRoZSBxdWV1ZS4gVGhpcyBpcyBleHBlY3RlZCwgYXMgdGhlXG4gICAgICAgICAgLy8gbG9hZCBpcyB1c3VhbGx5IHBlbmRpbmcgdGhlIG1haW4gbG9hZGVyIGFwcGVuZGluZyBuZXcgc2VnbWVudHMuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBOb3RlIGFsc28gdGhhdCB0aGUgb3ZlcnJpZGVDaGVjayBwcm9wZXJ0eSBpcyBzZXQgdG8gdHJ1ZS4gVGhpcyBpcyBiZWNhdXNlXG4gICAgICAgICAgLy8gaXNQZW5kaW5nVGltZXN0YW1wT2Zmc2V0IGlzIHNldCBiYWNrIHRvIGZhbHNlIGFmdGVyIHRoZSBmaXJzdCBzZXQgb2YgdGhlXG4gICAgICAgICAgLy8gdGltZXN0YW1wIG9mZnNldCAoYmVmb3JlIGl0IHdhcyBhZGRlZCB0byB0aGUgcXVldWUpLiBCdXQgdGhlIHByZXNlbmNlIG9mXG4gICAgICAgICAgLy8gdGltZXN0YW1wIG9mZnNldCBhcyBhIHByb3BlcnR5IG9mIHNlZ21lbnRJbmZvIHNlcnZlcyBhcyBlbm91Z2ggZXZpZGVuY2UgdGhhdFxuICAgICAgICAgIC8vIGl0IHNob3VsZCBiZSByZWdlbmVyYXRlZC5cbiAgICAgICAgICBzZWdtZW50SW5mby50aW1lc3RhbXBPZmZzZXQgPSB0aW1lc3RhbXBPZmZzZXRGb3JTZWdtZW50KHtcbiAgICAgICAgICAgIHNlZ21lbnRUaW1lbGluZTogc2VnbWVudEluZm8udGltZWxpbmUsXG4gICAgICAgICAgICBjdXJyZW50VGltZWxpbmU6IF90aGlzNS5jdXJyZW50VGltZWxpbmVfLFxuICAgICAgICAgICAgc3RhcnRPZlNlZ21lbnQ6IHNlZ21lbnRJbmZvLnN0YXJ0T2ZTZWdtZW50LFxuICAgICAgICAgICAgYnVmZmVyZWQ6IGJ1ZmZlcmVkLFxuICAgICAgICAgICAgb3ZlcnJpZGVDaGVjazogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHNlZ21lbnRJbmZvLmF1ZGlvQXBwZW5kU3RhcnQ7XG5cbiAgICAgICAgdmFyIGF1ZGlvQnVmZmVyZWQgPSBfdGhpczUuc291cmNlVXBkYXRlcl8uYXVkaW9CdWZmZXJlZCgpO1xuXG4gICAgICAgIGlmIChhdWRpb0J1ZmZlcmVkLmxlbmd0aCkge1xuICAgICAgICAgIC8vIEJlY2F1c2UgdGhlIGF1ZGlvIHRpbWVzdGFtcCBvZmZzZXQgbWF5IGhhdmUgYmVlbiBjaGFuZ2VkIGJ5IHRoZSBtYWluIGxvYWRlcixcbiAgICAgICAgICAvLyB0aGUgYXVkaW9BcHBlbmRTdGFydCBzaG91bGQgYmUgcmVnZW5lcmF0ZWQuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBTaW5jZSB0aGUgdHJhbnNtdXhlciBpcyB1c2luZyB0aGUgYWN0dWFsIHRpbWluZyB2YWx1ZXMsIGJ1dCB0aGUgYnVmZmVyIGlzXG4gICAgICAgICAgLy8gYWRqdXN0ZWQgYnkgdGhlIHRpbWVzdGFtcCBvZmZzZXQsIHRoZSB2YWx1ZSBtdXN0IGJlIGFkanVzdGVkLlxuICAgICAgICAgIHNlZ21lbnRJbmZvLmF1ZGlvQXBwZW5kU3RhcnQgPSBhdWRpb0J1ZmZlcmVkLmVuZChhdWRpb0J1ZmZlcmVkLmxlbmd0aCAtIDEpIC0gX3RoaXM1LnNvdXJjZVVwZGF0ZXJfLmF1ZGlvVGltZXN0YW1wT2Zmc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczUudXBkYXRlVHJhbnNtdXhlckFuZFJlcXVlc3RTZWdtZW50XyhzZWdtZW50SW5mbyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVRyYW5zbXV4ZXJBbmRSZXF1ZXN0U2VnbWVudF8oc2VnbWVudEluZm8pO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVUcmFuc211eGVyQW5kUmVxdWVzdFNlZ21lbnRfID0gZnVuY3Rpb24gdXBkYXRlVHJhbnNtdXhlckFuZFJlcXVlc3RTZWdtZW50XyhzZWdtZW50SW5mbykge1xuICAgIC8vIFdlJ2xsIHVwZGF0ZSB0aGUgc291cmNlIGJ1ZmZlcidzIHRpbWVzdGFtcCBvZmZzZXQgb25jZSB3ZSBoYXZlIHRyYW5zbXV4ZWQgZGF0YSwgYnV0XG4gICAgLy8gdGhlIHRyYW5zbXV4ZXIgc3RpbGwgbmVlZHMgdG8gYmUgdXBkYXRlZCBiZWZvcmUgdGhlbi5cbiAgICAvL1xuICAgIC8vIEV2ZW4gdGhvdWdoIGtlZXBPcmlnaW5hbFRpbWVzdGFtcHMgaXMgc2V0IHRvIHRydWUgZm9yIHRoZSB0cmFuc211eGVyLCB0aW1lc3RhbXBcbiAgICAvLyBvZmZzZXQgbXVzdCBiZSBwYXNzZWQgdG8gdGhlIHRyYW5zbXV4ZXIgZm9yIHN0cmVhbSBjb3JyZWN0aW5nIGFkanVzdG1lbnRzLlxuICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZVRyYW5zbXV4ZXJUaW1lc3RhbXBPZmZzZXRfKHNlZ21lbnRJbmZvLnRpbWVzdGFtcE9mZnNldCkpIHtcbiAgICAgIHRoaXMuZ29wQnVmZmVyXy5sZW5ndGggPSAwOyAvLyBnb3BzVG9BbGlnbldpdGggd2FzIHNldCBiZWZvcmUgdGhlIEdPUCBidWZmZXIgd2FzIGNsZWFyZWRcblxuICAgICAgc2VnbWVudEluZm8uZ29wc1RvQWxpZ25XaXRoID0gW107XG4gICAgICB0aGlzLnRpbWVNYXBwaW5nXyA9IDA7IC8vIHJlc2V0IHZhbHVlcyBpbiB0aGUgdHJhbnNtdXhlciBzaW5jZSBhIGRpc2NvbnRpbnVpdHkgc2hvdWxkIHN0YXJ0IGZyZXNoXG5cbiAgICAgIHRoaXMudHJhbnNtdXhlcl8ucG9zdE1lc3NhZ2Uoe1xuICAgICAgICBhY3Rpb246ICdyZXNldCdcbiAgICAgIH0pO1xuICAgICAgdGhpcy50cmFuc211eGVyXy5wb3N0TWVzc2FnZSh7XG4gICAgICAgIGFjdGlvbjogJ3NldFRpbWVzdGFtcE9mZnNldCcsXG4gICAgICAgIHRpbWVzdGFtcE9mZnNldDogc2VnbWVudEluZm8udGltZXN0YW1wT2Zmc2V0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgc2ltcGxlU2VnbWVudCA9IHRoaXMuY3JlYXRlU2ltcGxpZmllZFNlZ21lbnRPYmpfKHNlZ21lbnRJbmZvKTtcbiAgICBzZWdtZW50SW5mby5hYm9ydFJlcXVlc3RzID0gbWVkaWFTZWdtZW50UmVxdWVzdCh7XG4gICAgICB4aHI6IHRoaXMudmhzXy54aHIsXG4gICAgICB4aHJPcHRpb25zOiB0aGlzLnhock9wdGlvbnNfLFxuICAgICAgZGVjcnlwdGlvbldvcmtlcjogdGhpcy5kZWNyeXB0ZXJfLFxuICAgICAgc2VnbWVudDogc2ltcGxlU2VnbWVudCxcbiAgICAgIGhhbmRsZVBhcnRpYWxEYXRhOiB0aGlzLmhhbmRsZVBhcnRpYWxEYXRhXyxcbiAgICAgIGFib3J0Rm46IHRoaXMuaGFuZGxlQWJvcnRfLmJpbmQodGhpcyksXG4gICAgICBwcm9ncmVzc0ZuOiB0aGlzLmhhbmRsZVByb2dyZXNzXy5iaW5kKHRoaXMpLFxuICAgICAgdHJhY2tJbmZvRm46IHRoaXMuaGFuZGxlVHJhY2tJbmZvXy5iaW5kKHRoaXMpLFxuICAgICAgdGltaW5nSW5mb0ZuOiB0aGlzLmhhbmRsZVRpbWluZ0luZm9fLmJpbmQodGhpcyksXG4gICAgICB2aWRlb1NlZ21lbnRUaW1pbmdJbmZvRm46IHRoaXMuaGFuZGxlVmlkZW9TZWdtZW50VGltaW5nSW5mb18uYmluZCh0aGlzLCBzZWdtZW50SW5mby5yZXF1ZXN0SWQpLFxuICAgICAgY2FwdGlvbnNGbjogdGhpcy5oYW5kbGVDYXB0aW9uc18uYmluZCh0aGlzKSxcbiAgICAgIGlkM0ZuOiB0aGlzLmhhbmRsZUlkM18uYmluZCh0aGlzKSxcbiAgICAgIGRhdGFGbjogdGhpcy5oYW5kbGVEYXRhXy5iaW5kKHRoaXMpLFxuICAgICAgZG9uZUZuOiB0aGlzLnNlZ21lbnRSZXF1ZXN0RmluaXNoZWRfLmJpbmQodGhpcylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogdHJpbSB0aGUgYmFjayBidWZmZXIgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvbyBtdWNoIGRhdGFcbiAgICogaW4gdGhlIHNvdXJjZSBidWZmZXJcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnRJbmZvIC0gdGhlIGN1cnJlbnQgc2VnbWVudFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50cmltQmFja0J1ZmZlcl8gPSBmdW5jdGlvbiB0cmltQmFja0J1ZmZlcl8oc2VnbWVudEluZm8pIHtcbiAgICB2YXIgcmVtb3ZlVG9UaW1lID0gc2FmZUJhY2tCdWZmZXJUcmltVGltZSh0aGlzLnNlZWthYmxlXygpLCB0aGlzLmN1cnJlbnRUaW1lXygpLCB0aGlzLnBsYXlsaXN0Xy50YXJnZXREdXJhdGlvbiB8fCAxMCk7IC8vIENocm9tZSBoYXMgYSBoYXJkIGxpbWl0IG9mIDE1ME1CIG9mXG4gICAgLy8gYnVmZmVyIGFuZCBhIHZlcnkgY29uc2VydmF0aXZlIFwiZ2FyYmFnZSBjb2xsZWN0b3JcIlxuICAgIC8vIFdlIG1hbnVhbGx5IGNsZWFyIG91dCB0aGUgb2xkIGJ1ZmZlciB0byBlbnN1cmVcbiAgICAvLyB3ZSBkb24ndCB0cmlnZ2VyIHRoZSBRdW90YUV4Y2VlZGVkIGVycm9yXG4gICAgLy8gb24gdGhlIHNvdXJjZSBidWZmZXIgZHVyaW5nIHN1YnNlcXVlbnQgYXBwZW5kc1xuXG4gICAgaWYgKHJlbW92ZVRvVGltZSA+IDApIHtcbiAgICAgIHRoaXMucmVtb3ZlKDAsIHJlbW92ZVRvVGltZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBjcmVhdGVkIGEgc2ltcGxpZmllZCBjb3B5IG9mIHRoZSBzZWdtZW50IG9iamVjdCB3aXRoIGp1c3QgdGhlXG4gICAqIGluZm9ybWF0aW9uIG5lY2Vzc2FyeSB0byBwZXJmb3JtIHRoZSBYSFIgYW5kIGRlY3J5cHRpb25cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnRJbmZvIC0gdGhlIGN1cnJlbnQgc2VnbWVudFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGEgc2ltcGxpZmllZCBzZWdtZW50IG9iamVjdCBjb3B5XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVNpbXBsaWZpZWRTZWdtZW50T2JqXyA9IGZ1bmN0aW9uIGNyZWF0ZVNpbXBsaWZpZWRTZWdtZW50T2JqXyhzZWdtZW50SW5mbykge1xuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudEluZm8uc2VnbWVudDtcbiAgICB2YXIgc2ltcGxlU2VnbWVudCA9IHtcbiAgICAgIHJlc29sdmVkVXJpOiBzZWdtZW50LnJlc29sdmVkVXJpLFxuICAgICAgYnl0ZXJhbmdlOiBzZWdtZW50LmJ5dGVyYW5nZSxcbiAgICAgIHJlcXVlc3RJZDogc2VnbWVudEluZm8ucmVxdWVzdElkLFxuICAgICAgdHJhbnNtdXhlcjogc2VnbWVudEluZm8udHJhbnNtdXhlcixcbiAgICAgIGF1ZGlvQXBwZW5kU3RhcnQ6IHNlZ21lbnRJbmZvLmF1ZGlvQXBwZW5kU3RhcnQsXG4gICAgICBnb3BzVG9BbGlnbldpdGg6IHNlZ21lbnRJbmZvLmdvcHNUb0FsaWduV2l0aFxuICAgIH07XG4gICAgdmFyIHByZXZpb3VzU2VnbWVudCA9IHNlZ21lbnRJbmZvLnBsYXlsaXN0LnNlZ21lbnRzW3NlZ21lbnRJbmZvLm1lZGlhSW5kZXhdO1xuXG4gICAgaWYgKHByZXZpb3VzU2VnbWVudCAmJiBwcmV2aW91c1NlZ21lbnQuZW5kICYmIHByZXZpb3VzU2VnbWVudC50aW1lbGluZSA9PT0gc2VnbWVudC50aW1lbGluZSkge1xuICAgICAgc2ltcGxlU2VnbWVudC5iYXNlU3RhcnRUaW1lID0gcHJldmlvdXNTZWdtZW50LmVuZCArIHNlZ21lbnRJbmZvLnRpbWVzdGFtcE9mZnNldDtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudC5rZXkpIHtcbiAgICAgIC8vIGlmIHRoZSBtZWRpYSBzZXF1ZW5jZSBpcyBncmVhdGVyIHRoYW4gMl4zMiwgdGhlIElWIHdpbGwgYmUgaW5jb3JyZWN0XG4gICAgICAvLyBhc3N1bWluZyAxMHMgc2VnbWVudHMsIHRoYXQgd291bGQgYmUgYWJvdXQgMTMwMCB5ZWFyc1xuICAgICAgdmFyIGl2ID0gc2VnbWVudC5rZXkuaXYgfHwgbmV3IFVpbnQzMkFycmF5KFswLCAwLCAwLCBzZWdtZW50SW5mby5tZWRpYUluZGV4ICsgc2VnbWVudEluZm8ucGxheWxpc3QubWVkaWFTZXF1ZW5jZV0pO1xuICAgICAgc2ltcGxlU2VnbWVudC5rZXkgPSB0aGlzLnNlZ21lbnRLZXkoc2VnbWVudC5rZXkpO1xuICAgICAgc2ltcGxlU2VnbWVudC5rZXkuaXYgPSBpdjtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudC5tYXApIHtcbiAgICAgIHNpbXBsZVNlZ21lbnQubWFwID0gdGhpcy5pbml0U2VnbWVudEZvck1hcChzZWdtZW50Lm1hcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpbXBsZVNlZ21lbnQ7XG4gIH07XG5cbiAgX3Byb3RvLnNhdmVUcmFuc2ZlclN0YXRzXyA9IGZ1bmN0aW9uIHNhdmVUcmFuc2ZlclN0YXRzXyhzdGF0cykge1xuICAgIC8vIGV2ZXJ5IHJlcXVlc3QgY291bnRzIGFzIGEgbWVkaWEgcmVxdWVzdCBldmVuIGlmIGl0IGhhcyBiZWVuIGFib3J0ZWRcbiAgICAvLyBvciBjYW5jZWxlZCBkdWUgdG8gYSB0aW1lb3V0XG4gICAgdGhpcy5tZWRpYVJlcXVlc3RzICs9IDE7XG5cbiAgICBpZiAoc3RhdHMpIHtcbiAgICAgIHRoaXMubWVkaWFCeXRlc1RyYW5zZmVycmVkICs9IHN0YXRzLmJ5dGVzUmVjZWl2ZWQ7XG4gICAgICB0aGlzLm1lZGlhVHJhbnNmZXJEdXJhdGlvbiArPSBzdGF0cy5yb3VuZFRyaXBUaW1lO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2F2ZUJhbmR3aWR0aFJlbGF0ZWRTdGF0c18gPSBmdW5jdGlvbiBzYXZlQmFuZHdpZHRoUmVsYXRlZFN0YXRzXyhzdGF0cykge1xuICAgIHRoaXMuYmFuZHdpZHRoID0gc3RhdHMuYmFuZHdpZHRoO1xuICAgIHRoaXMucm91bmRUcmlwID0gc3RhdHMucm91bmRUcmlwVGltZTsgLy8gYnl0ZUxlbmd0aCB3aWxsIGJlIHVzZWQgZm9yIHRocm91Z2hwdXQsIGFuZCBzaG91bGQgYmUgYmFzZWQgb24gYnl0ZXMgcmVjZWlldmVkLFxuICAgIC8vIHdoaWNoIHdlIG9ubHkga25vdyBhdCB0aGUgZW5kIG9mIHRoZSByZXF1ZXN0IGFuZCBzaG91bGQgcmVmbGVjdCB0b3RhbCBieXRlc1xuICAgIC8vIGRvd25sb2FkZWQgcmF0aGVyIHRoYW4ganVzdCBieXRlcyBwcm9jZXNzZWQgZnJvbSBjb21wb25lbnRzIG9mIHRoZSBzZWdtZW50XG5cbiAgICB0aGlzLnBlbmRpbmdTZWdtZW50Xy5ieXRlTGVuZ3RoID0gc3RhdHMuYnl0ZXNSZWNlaXZlZDtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlVGltZW91dF8gPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0XygpIHtcbiAgICAvLyBhbHRob3VnaCB0aGUgVlRUIHNlZ21lbnQgbG9hZGVyIGJhbmR3aWR0aCBpc24ndCByZWFsbHkgdXNlZCwgaXQncyBnb29kIHRvXG4gICAgLy8gbWFpbnRhaW4gZnVuY3RpbmFsaXR5IGJldHdlZW4gc2VnbWVudCBsb2FkZXJzXG4gICAgdGhpcy5tZWRpYVJlcXVlc3RzVGltZWRvdXQgKz0gMTtcbiAgICB0aGlzLmJhbmR3aWR0aCA9IDE7XG4gICAgdGhpcy5yb3VuZFRyaXAgPSBOYU47XG4gICAgdGhpcy50cmlnZ2VyKCdiYW5kd2lkdGh1cGRhdGUnKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHRoZSBjYWxsYmFjayBmcm9tIHRoZSBzZWdtZW50UmVxdWVzdCBmdW5jdGlvbiBhbmQgc2V0IHRoZVxuICAgKiBhc3NvY2lhdGVkIFNlZ21lbnRMb2FkZXIgc3RhdGUgYW5kIGVycm9ycyBpZiBuZWNlc3NhcnlcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2VnbWVudFJlcXVlc3RGaW5pc2hlZF8gPSBmdW5jdGlvbiBzZWdtZW50UmVxdWVzdEZpbmlzaGVkXyhlcnJvciwgc2ltcGxlU2VnbWVudCwgcmVzdWx0KSB7XG4gICAgLy8gVE9ETyBoYW5kbGUgc3BlY2lhbCBjYXNlcywgZS5nLiwgbXV4ZWQgYXVkaW8vdmlkZW8gYnV0IG9ubHkgYXVkaW8gaW4gdGhlIHNlZ21lbnRcbiAgICAvLyBjaGVjayB0aGUgY2FsbCBxdWV1ZSBkaXJlY3RseSBzaW5jZSB0aGlzIGZ1bmN0aW9uIGRvZXNuJ3QgbmVlZCB0byBkZWFsIHdpdGggYW55XG4gICAgLy8gZGF0YSwgYW5kIGNhbiBjb250aW51ZSBldmVuIGlmIHRoZSBzb3VyY2UgYnVmZmVycyBhcmUgbm90IHNldCB1cCBhbmQgd2UgZGlkbid0IGdldFxuICAgIC8vIGFueSBkYXRhIGZyb20gdGhlIHNlZ21lbnRcbiAgICBpZiAodGhpcy5jYWxsUXVldWVfLmxlbmd0aCkge1xuICAgICAgdGhpcy5jYWxsUXVldWVfLnB1c2godGhpcy5zZWdtZW50UmVxdWVzdEZpbmlzaGVkXy5iaW5kKHRoaXMsIGVycm9yLCBzaW1wbGVTZWdtZW50LCByZXN1bHQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNhdmVUcmFuc2ZlclN0YXRzXyhzaW1wbGVTZWdtZW50LnN0YXRzKTsgLy8gVGhlIHJlcXVlc3Qgd2FzIGFib3J0ZWQgYW5kIHRoZSBTZWdtZW50TG9hZGVyIGhhcyBhbHJlYWR5IGJlZW4gcmVzZXRcblxuICAgIGlmICghdGhpcy5wZW5kaW5nU2VnbWVudF8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHRoZSByZXF1ZXN0IHdhcyBhYm9ydGVkIGFuZCB0aGUgU2VnbWVudExvYWRlciBoYXMgYWxyZWFkeSBzdGFydGVkXG4gICAgLy8gYW5vdGhlciByZXF1ZXN0LiB0aGlzIGNhbiBoYXBwZW4gd2hlbiB0aGUgdGltZW91dCBmb3IgYW4gYWJvcnRlZFxuICAgIC8vIHJlcXVlc3QgdHJpZ2dlcnMgZHVlIHRvIGEgbGltaXRhdGlvbiBpbiB0aGUgWEhSIGxpYnJhcnlcbiAgICAvLyBkbyBub3QgY291bnQgdGhpcyBhcyBhbnkgc29ydCBvZiByZXF1ZXN0IG9yIHdlIHJpc2sgZG91YmxlLWNvdW50aW5nXG5cblxuICAgIGlmIChzaW1wbGVTZWdtZW50LnJlcXVlc3RJZCAhPT0gdGhpcy5wZW5kaW5nU2VnbWVudF8ucmVxdWVzdElkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBhbiBlcnJvciBvY2N1cnJlZCBmcm9tIHRoZSBhY3RpdmUgcGVuZGluZ1NlZ21lbnRfIHNvIHJlc2V0IGV2ZXJ5dGhpbmdcblxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICB0aGlzLnBlbmRpbmdTZWdtZW50XyA9IG51bGw7XG4gICAgICB0aGlzLnN0YXRlID0gJ1JFQURZJzsgLy8gYWJvcnRzIGFyZSBub3QgYSB0cnVlIGVycm9yIGNvbmRpdGlvbiBhbmQgbm90aGluZyBjb3JyZWN0aXZlIG5lZWRzIHRvIGJlIGRvbmVcblxuICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFJFUVVFU1RfRVJST1JTLkFCT1JURUQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBhdXNlKCk7IC8vIHRoZSBlcnJvciBpcyByZWFsbHkganVzdCB0aGF0IGF0IGxlYXN0IG9uZSBvZiB0aGUgcmVxdWVzdHMgdGltZWQtb3V0XG4gICAgICAvLyBzZXQgdGhlIGJhbmR3aWR0aCB0byBhIHZlcnkgbG93IHZhbHVlIGFuZCB0cmlnZ2VyIGFuIEFCUiBzd2l0Y2ggdG9cbiAgICAgIC8vIHRha2UgZW1lcmdlbmN5IGFjdGlvblxuXG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gUkVRVUVTVF9FUlJPUlMuVElNRU9VVCkge1xuICAgICAgICB0aGlzLmhhbmRsZVRpbWVvdXRfKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gaWYgY29udHJvbC1mbG93IGhhcyBhcnJpdmVkIGhlcmUsIHRoZW4gdGhlIGVycm9yIGlzIHJlYWxcbiAgICAgIC8vIGVtaXQgYW4gZXJyb3IgZXZlbnQgdG8gYmxhY2tsaXN0IHRoZSBjdXJyZW50IHBsYXlsaXN0XG5cblxuICAgICAgdGhpcy5tZWRpYVJlcXVlc3RzRXJyb3JlZCArPSAxO1xuICAgICAgdGhpcy5lcnJvcihlcnJvcik7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2Vycm9yJyk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyB0aGUgcmVzcG9uc2Ugd2FzIGEgc3VjY2VzcyBzbyBzZXQgYW55IGJhbmR3aWR0aCBzdGF0cyB0aGUgcmVxdWVzdFxuICAgIC8vIGdlbmVyYXRlZCBmb3IgQUJSIHB1cnBvc2VzXG5cblxuICAgIHRoaXMuc2F2ZUJhbmR3aWR0aFJlbGF0ZWRTdGF0c18oc2ltcGxlU2VnbWVudC5zdGF0cyk7XG4gICAgdmFyIHNlZ21lbnRJbmZvID0gdGhpcy5wZW5kaW5nU2VnbWVudF87XG4gICAgc2VnbWVudEluZm8uZW5kT2ZBbGxSZXF1ZXN0cyA9IHNpbXBsZVNlZ21lbnQuZW5kT2ZBbGxSZXF1ZXN0cztcblxuICAgIGlmIChyZXN1bHQuZ29wSW5mbykge1xuICAgICAgdGhpcy5nb3BCdWZmZXJfID0gdXBkYXRlR29wQnVmZmVyKHRoaXMuZ29wQnVmZmVyXywgcmVzdWx0LmdvcEluZm8sIHRoaXMuc2FmZUFwcGVuZF8pO1xuICAgIH0gLy8gQWx0aG91Z2ggd2UgbWF5IGhhdmUgYWxyZWFkeSBzdGFydGVkIGFwcGVuZGluZyBvbiBwcm9ncmVzcywgd2Ugc2hvdWxkbid0IHN3aXRjaCB0aGVcbiAgICAvLyBzdGF0ZSBhd2F5IGZyb20gbG9hZGluZyB1bnRpbCB3ZSBhcmUgb2ZmaWNpYWxseSBkb25lIGxvYWRpbmcgdGhlIHNlZ21lbnQgZGF0YS5cblxuXG4gICAgdGhpcy5zdGF0ZSA9ICdBUFBFTkRJTkcnO1xuICAgIHZhciBpc0VuZE9mU3RyZWFtID0gdGhpcy5pc0VuZE9mU3RyZWFtXyhzZWdtZW50SW5mby5tZWRpYUluZGV4LCBzZWdtZW50SW5mby5wbGF5bGlzdCk7XG4gICAgdmFyIGlzV2Fsa2luZ0ZvcndhcmQgPSB0aGlzLm1lZGlhSW5kZXggIT09IG51bGw7XG4gICAgdmFyIGlzRGlzY29udGludWl0eSA9IHNlZ21lbnRJbmZvLnRpbWVsaW5lICE9PSB0aGlzLmN1cnJlbnRUaW1lbGluZV8gJiYgLy8gVE9ETyB2ZXJpZnkgdGhpcyBiZWhhdmlvclxuICAgIC8vIGN1cnJlbnRUaW1lbGluZSBzdGFydHMgYXQgLTEsIGJ1dCB3ZSBzaG91bGRuJ3QgZW5kIHRoZSB0aW1lbGluZSBzd2l0Y2hpbmcgdG8gMCxcbiAgICAvLyB0aGUgZmlyc3QgdGltZWxpbmVcbiAgICBzZWdtZW50SW5mby50aW1lbGluZSA+IDA7XG5cbiAgICBpZiAoIXNlZ21lbnRJbmZvLmlzRm1wNCAmJiAoaXNFbmRPZlN0cmVhbSB8fCBpc1dhbGtpbmdGb3J3YXJkICYmIGlzRGlzY29udGludWl0eSkpIHtcbiAgICAgIHNlZ21lbnRUcmFuc211eGVyLmVuZFRpbWVsaW5lKHRoaXMudHJhbnNtdXhlcl8pO1xuICAgIH0gLy8gdXNlZCBmb3IgdGVzdGluZ1xuXG5cbiAgICB0aGlzLnRyaWdnZXIoJ2FwcGVuZGluZycpO1xuICAgIHRoaXMud2FpdEZvckFwcGVuZHNUb0NvbXBsZXRlXyhzZWdtZW50SW5mbyk7XG4gIH07XG5cbiAgX3Byb3RvLnNldFRpbWVNYXBwaW5nXyA9IGZ1bmN0aW9uIHNldFRpbWVNYXBwaW5nXyh0aW1lbGluZSkge1xuICAgIHZhciB0aW1lbGluZU1hcHBpbmcgPSB0aGlzLnN5bmNDb250cm9sbGVyXy5tYXBwaW5nRm9yVGltZWxpbmUodGltZWxpbmUpO1xuXG4gICAgaWYgKHRpbWVsaW5lTWFwcGluZyAhPT0gbnVsbCkge1xuICAgICAgdGhpcy50aW1lTWFwcGluZ18gPSB0aW1lbGluZU1hcHBpbmc7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by51cGRhdGVNZWRpYVNlY29uZHNMb2FkZWRfID0gZnVuY3Rpb24gdXBkYXRlTWVkaWFTZWNvbmRzTG9hZGVkXyhzZWdtZW50KSB7XG4gICAgaWYgKHR5cGVvZiBzZWdtZW50LnN0YXJ0ID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygc2VnbWVudC5lbmQgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLm1lZGlhU2Vjb25kc0xvYWRlZCArPSBzZWdtZW50LmVuZCAtIHNlZ21lbnQuc3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWVkaWFTZWNvbmRzTG9hZGVkICs9IHNlZ21lbnQuZHVyYXRpb247XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zaG91bGRVcGRhdGVUcmFuc211eGVyVGltZXN0YW1wT2Zmc2V0XyA9IGZ1bmN0aW9uIHNob3VsZFVwZGF0ZVRyYW5zbXV4ZXJUaW1lc3RhbXBPZmZzZXRfKHRpbWVzdGFtcE9mZnNldCkge1xuICAgIGlmICh0aW1lc3RhbXBPZmZzZXQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIG5vdGUgdGhhdCB3ZSdyZSBwb3RlbnRpYWxseSB1c2luZyB0aGUgc2FtZSB0aW1lc3RhbXAgb2Zmc2V0IGZvciBib3RoIHZpZGVvIGFuZFxuICAgIC8vIGF1ZGlvXG5cblxuICAgIGlmICh0aGlzLmxvYWRlclR5cGVfID09PSAnbWFpbicgJiYgdGltZXN0YW1wT2Zmc2V0ICE9PSB0aGlzLnNvdXJjZVVwZGF0ZXJfLnZpZGVvVGltZXN0YW1wT2Zmc2V0KCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5hdWRpb0Rpc2FibGVkXyAmJiB0aW1lc3RhbXBPZmZzZXQgIT09IHRoaXMuc291cmNlVXBkYXRlcl8uYXVkaW9UaW1lc3RhbXBPZmZzZXQoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by50cnVlU2VnbWVudFN0YXJ0XyA9IGZ1bmN0aW9uIHRydWVTZWdtZW50U3RhcnRfKF9yZWY1KSB7XG4gICAgdmFyIGN1cnJlbnRTdGFydCA9IF9yZWY1LmN1cnJlbnRTdGFydCxcbiAgICAgICAgcGxheWxpc3QgPSBfcmVmNS5wbGF5bGlzdCxcbiAgICAgICAgbWVkaWFJbmRleCA9IF9yZWY1Lm1lZGlhSW5kZXgsXG4gICAgICAgIGZpcnN0VmlkZW9GcmFtZVRpbWVGb3JEYXRhID0gX3JlZjUuZmlyc3RWaWRlb0ZyYW1lVGltZUZvckRhdGEsXG4gICAgICAgIGN1cnJlbnRWaWRlb1RpbWVzdGFtcE9mZnNldCA9IF9yZWY1LmN1cnJlbnRWaWRlb1RpbWVzdGFtcE9mZnNldCxcbiAgICAgICAgdXNlVmlkZW9UaW1pbmdJbmZvID0gX3JlZjUudXNlVmlkZW9UaW1pbmdJbmZvLFxuICAgICAgICB2aWRlb1RpbWluZ0luZm8gPSBfcmVmNS52aWRlb1RpbWluZ0luZm8sXG4gICAgICAgIGF1ZGlvVGltaW5nSW5mbyA9IF9yZWY1LmF1ZGlvVGltaW5nSW5mbztcblxuICAgIGlmICh0eXBlb2YgY3VycmVudFN0YXJ0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gaWYgc3RhcnQgd2FzIHNldCBvbmNlLCBrZWVwIHVzaW5nIGl0XG4gICAgICByZXR1cm4gY3VycmVudFN0YXJ0O1xuICAgIH1cblxuICAgIGlmICghdXNlVmlkZW9UaW1pbmdJbmZvKSB7XG4gICAgICByZXR1cm4gYXVkaW9UaW1pbmdJbmZvLnN0YXJ0O1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1NlZ21lbnQgPSBwbGF5bGlzdC5zZWdtZW50c1ttZWRpYUluZGV4IC0gMV07IC8vIFRoZSBzdGFydCBvZiBhIHNlZ21lbnQgc2hvdWxkIGJlIHRoZSBzdGFydCBvZiB0aGUgZmlyc3QgZnVsbCBmcmFtZSBjb250YWluZWRcbiAgICAvLyB3aXRoaW4gdGhhdCBzZWdtZW50LiBTaW5jZSB0aGUgdHJhbnNtdXhlciBtYWludGFpbnMgYSBjYWNoZSBvZiBpbmNvbXBsZXRlIGRhdGFcbiAgICAvLyBmcm9tIGFuZC9vciB0aGUgbGFzdCBmcmFtZSBzZWVuLCB0aGUgc3RhcnQgdGltZSBtYXkgcmVmbGVjdCBhIGZyYW1lIHRoYXQgc3RhcnRzXG4gICAgLy8gaW4gdGhlIHByZXZpb3VzIHNlZ21lbnQuIENoZWNrIGZvciB0aGF0IGNhc2UgYW5kIGVuc3VyZSB0aGUgc3RhcnQgdGltZSBpc1xuICAgIC8vIGFjY3VyYXRlIGZvciB0aGUgc2VnbWVudC5cblxuICAgIGlmIChtZWRpYUluZGV4ID09PSAwIHx8ICFwcmV2aW91c1NlZ21lbnQgfHwgdHlwZW9mIHByZXZpb3VzU2VnbWVudC5zdGFydCA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJldmlvdXNTZWdtZW50LmVuZCAhPT0gZmlyc3RWaWRlb0ZyYW1lVGltZUZvckRhdGEgKyBjdXJyZW50VmlkZW9UaW1lc3RhbXBPZmZzZXQpIHtcbiAgICAgIHJldHVybiBmaXJzdFZpZGVvRnJhbWVUaW1lRm9yRGF0YTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmlkZW9UaW1pbmdJbmZvLnN0YXJ0O1xuICB9O1xuXG4gIF9wcm90by53YWl0Rm9yQXBwZW5kc1RvQ29tcGxldGVfID0gZnVuY3Rpb24gd2FpdEZvckFwcGVuZHNUb0NvbXBsZXRlXyhzZWdtZW50SW5mbykge1xuICAgIGlmICghdGhpcy5jdXJyZW50TWVkaWFJbmZvXykge1xuICAgICAgdGhpcy5lcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6ICdObyBzdGFydGluZyBtZWRpYSByZXR1cm5lZCwgbGlrZWx5IGR1ZSB0byBhbiB1bnN1cHBvcnRlZCBtZWRpYSBmb3JtYXQuJyxcbiAgICAgICAgYmxhY2tsaXN0RHVyYXRpb246IEluZmluaXR5XG4gICAgICB9KTtcbiAgICAgIHRoaXMudHJpZ2dlcignZXJyb3InKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEFsdGhvdWdoIHRyYW5zbXV4aW5nIGlzIGRvbmUsIGFwcGVuZHMgbWF5IG5vdCB5ZXQgYmUgZmluaXNoZWQuIFRocm93IGEgbWFya2VyXG4gICAgLy8gb24gZWFjaCBxdWV1ZSB0aGlzIGxvYWRlciBpcyByZXNwb25zaWJsZSBmb3IgdG8gZW5zdXJlIHRoYXQgdGhlIGFwcGVuZHMgYXJlXG4gICAgLy8gY29tcGxldGUuXG5cblxuICAgIHZhciBfdGhpcyRjdXJyZW50TWVkaWFJbmYyID0gdGhpcy5jdXJyZW50TWVkaWFJbmZvXyxcbiAgICAgICAgaGFzQXVkaW8gPSBfdGhpcyRjdXJyZW50TWVkaWFJbmYyLmhhc0F1ZGlvLFxuICAgICAgICBoYXNWaWRlbyA9IF90aGlzJGN1cnJlbnRNZWRpYUluZjIuaGFzVmlkZW8sXG4gICAgICAgIGlzTXV4ZWQgPSBfdGhpcyRjdXJyZW50TWVkaWFJbmYyLmlzTXV4ZWQ7XG4gICAgdmFyIHdhaXRGb3JWaWRlbyA9IHRoaXMubG9hZGVyVHlwZV8gPT09ICdtYWluJyAmJiBoYXNWaWRlbzsgLy8gVE9ETzogZG9lcyB0aGlzIGJyZWFrIHBhcnRpYWwgc3VwcG9ydCBmb3IgbXV4ZWQgY29udGVudD9cblxuICAgIHZhciB3YWl0Rm9yQXVkaW8gPSAhdGhpcy5hdWRpb0Rpc2FibGVkXyAmJiBoYXNBdWRpbyAmJiAhaXNNdXhlZDtcbiAgICBzZWdtZW50SW5mby53YWl0aW5nT25BcHBlbmRzID0gMDsgLy8gc2VnbWVudHMgd2l0aCBubyBkYXRhXG5cbiAgICBpZiAoIXNlZ21lbnRJbmZvLmhhc0FwcGVuZGVkRGF0YV8pIHtcbiAgICAgIGlmICghc2VnbWVudEluZm8udGltaW5nSW5mbyAmJiB0eXBlb2Ygc2VnbWVudEluZm8udGltZXN0YW1wT2Zmc2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBXaGVuIHRoZXJlJ3Mgbm8gYXVkaW8gb3IgdmlkZW8gZGF0YSBpbiB0aGUgc2VnbWVudCwgdGhlcmUncyBubyBhdWRpbyBvciB2aWRlb1xuICAgICAgICAvLyB0aW1pbmcgaW5mb3JtYXRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gYXVkaW8gb3IgdmlkZW8gdGltaW5nIGluZm9ybWF0aW9uLCB0aGVuIHRoZSB0aW1lc3RhbXAgb2Zmc2V0XG4gICAgICAgIC8vIGNhbid0IGJlIGFkanVzdGVkIHRvIHRoZSBhcHByb3ByaWF0ZSB2YWx1ZSBmb3IgdGhlIHRyYW5zbXV4ZXIgYW5kIHNvdXJjZVxuICAgICAgICAvLyBidWZmZXJzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGVyZWZvcmUsIHRoZSBuZXh0IHNlZ21lbnQgc2hvdWxkIGJlIHVzZWQgdG8gc2V0IHRoZSB0aW1lc3RhbXAgb2Zmc2V0LlxuICAgICAgICB0aGlzLmlzUGVuZGluZ1RpbWVzdGFtcE9mZnNldF8gPSB0cnVlO1xuICAgICAgfSAvLyBvdmVycmlkZSBzZXR0aW5ncyBmb3IgbWV0YWRhdGEgb25seSBzZWdtZW50c1xuXG5cbiAgICAgIHNlZ21lbnRJbmZvLnRpbWluZ0luZm8gPSB7XG4gICAgICAgIHN0YXJ0OiAwXG4gICAgICB9O1xuICAgICAgc2VnbWVudEluZm8ud2FpdGluZ09uQXBwZW5kcysrO1xuXG4gICAgICBpZiAoIXRoaXMuaXNQZW5kaW5nVGltZXN0YW1wT2Zmc2V0Xykge1xuICAgICAgICAvLyB1cGRhdGUgdGhlIHRpbWVzdGFtcG9mZnNldFxuICAgICAgICB0aGlzLnVwZGF0ZVNvdXJjZUJ1ZmZlclRpbWVzdGFtcE9mZnNldF8oc2VnbWVudEluZm8pOyAvLyBtYWtlIHN1cmUgdGhlIG1ldGFkYXRhIHF1ZXVlIGlzIHByb2Nlc3NlZCBldmVuIHRob3VnaCB3ZSBoYXZlXG4gICAgICAgIC8vIG5vIHZpZGVvL2F1ZGlvIGRhdGEuXG5cbiAgICAgICAgdGhpcy5wcm9jZXNzTWV0YWRhdGFRdWV1ZV8oKTtcbiAgICAgIH0gLy8gYXBwZW5kIGlzIFwiZG9uZVwiIGluc3RhbnRseSB3aXRoIG5vIGRhdGEuXG5cblxuICAgICAgdGhpcy5jaGVja0FwcGVuZHNEb25lXyhzZWdtZW50SW5mbyk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTaW5jZSBzb3VyY2UgdXBkYXRlciBjb3VsZCBjYWxsIGJhY2sgc3luY2hyb25vdXNseSwgZG8gdGhlIGluY3JlbWVudHMgZmlyc3QuXG5cblxuICAgIGlmICh3YWl0Rm9yVmlkZW8pIHtcbiAgICAgIHNlZ21lbnRJbmZvLndhaXRpbmdPbkFwcGVuZHMrKztcbiAgICB9XG5cbiAgICBpZiAod2FpdEZvckF1ZGlvKSB7XG4gICAgICBzZWdtZW50SW5mby53YWl0aW5nT25BcHBlbmRzKys7XG4gICAgfVxuXG4gICAgaWYgKHdhaXRGb3JWaWRlbykge1xuICAgICAgdGhpcy5zb3VyY2VVcGRhdGVyXy52aWRlb1F1ZXVlQ2FsbGJhY2sodGhpcy5jaGVja0FwcGVuZHNEb25lXy5iaW5kKHRoaXMsIHNlZ21lbnRJbmZvKSk7XG4gICAgfVxuXG4gICAgaWYgKHdhaXRGb3JBdWRpbykge1xuICAgICAgdGhpcy5zb3VyY2VVcGRhdGVyXy5hdWRpb1F1ZXVlQ2FsbGJhY2sodGhpcy5jaGVja0FwcGVuZHNEb25lXy5iaW5kKHRoaXMsIHNlZ21lbnRJbmZvKSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jaGVja0FwcGVuZHNEb25lXyA9IGZ1bmN0aW9uIGNoZWNrQXBwZW5kc0RvbmVfKHNlZ21lbnRJbmZvKSB7XG4gICAgaWYgKHRoaXMuY2hlY2tGb3JBYm9ydF8oc2VnbWVudEluZm8ucmVxdWVzdElkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlZ21lbnRJbmZvLndhaXRpbmdPbkFwcGVuZHMtLTtcblxuICAgIGlmIChzZWdtZW50SW5mby53YWl0aW5nT25BcHBlbmRzID09PSAwKSB7XG4gICAgICB0aGlzLmhhbmRsZUFwcGVuZHNEb25lXygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY2hlY2tGb3JJbGxlZ2FsTWVkaWFTd2l0Y2ggPSBmdW5jdGlvbiBjaGVja0ZvcklsbGVnYWxNZWRpYVN3aXRjaCh0cmFja0luZm8pIHtcbiAgICB2YXIgaWxsZWdhbE1lZGlhU3dpdGNoRXJyb3IgPSBpbGxlZ2FsTWVkaWFTd2l0Y2godGhpcy5sb2FkZXJUeXBlXywgdGhpcy5jdXJyZW50TWVkaWFJbmZvXywgdHJhY2tJbmZvKTtcblxuICAgIGlmIChpbGxlZ2FsTWVkaWFTd2l0Y2hFcnJvcikge1xuICAgICAgdGhpcy5lcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6IGlsbGVnYWxNZWRpYVN3aXRjaEVycm9yLFxuICAgICAgICBibGFja2xpc3REdXJhdGlvbjogSW5maW5pdHlcbiAgICAgIH0pO1xuICAgICAgdGhpcy50cmlnZ2VyKCdlcnJvcicpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTb3VyY2VCdWZmZXJUaW1lc3RhbXBPZmZzZXRfID0gZnVuY3Rpb24gdXBkYXRlU291cmNlQnVmZmVyVGltZXN0YW1wT2Zmc2V0XyhzZWdtZW50SW5mbykge1xuICAgIGlmIChzZWdtZW50SW5mby50aW1lc3RhbXBPZmZzZXQgPT09IG51bGwgfHwgLy8gd2UgZG9uJ3QgeWV0IGhhdmUgdGhlIHN0YXJ0IGZvciB3aGF0ZXZlciBtZWRpYSB0eXBlICh2aWRlbyBvciBhdWRpbykgaGFzXG4gICAgLy8gcHJpb3JpdHksIHRpbWluZy13aXNlLCBzbyB3ZSBtdXN0IHdhaXRcbiAgICB0eXBlb2Ygc2VnbWVudEluZm8udGltaW5nSW5mby5zdGFydCAhPT0gJ251bWJlcicgfHwgLy8gYWxyZWFkeSB1cGRhdGVkIHRoZSB0aW1lc3RhbXAgb2Zmc2V0IGZvciB0aGlzIHNlZ21lbnRcbiAgICBzZWdtZW50SW5mby5jaGFuZ2VkVGltZXN0YW1wT2Zmc2V0IHx8IC8vIHRoZSBhbHQgYXVkaW8gbG9hZGVyIHNob3VsZCBub3QgYmUgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhlIHRpbWVzdGFtcCBvZmZzZXRcbiAgICB0aGlzLmxvYWRlclR5cGVfICE9PSAnbWFpbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGlkQ2hhbmdlID0gZmFsc2U7IC8vIFByaW1hcnkgdGltaW5nIGdvZXMgYnkgdmlkZW8sIGFuZCBhdWRpbyBpcyB0cmltbWVkIGluIHRoZSB0cmFuc211eGVyLCBtZWFuaW5nIHRoYXRcbiAgICAvLyB0aGUgdGltaW5nIGluZm8gaGVyZSBjb21lcyBmcm9tIHZpZGVvLiBJbiB0aGUgZXZlbnQgdGhhdCB0aGUgYXVkaW8gaXMgbG9uZ2VyIHRoYW5cbiAgICAvLyB0aGUgdmlkZW8sIHRoaXMgd2lsbCB0cmltIHRoZSBzdGFydCBvZiB0aGUgYXVkaW8uXG4gICAgLy8gVGhpcyBhbHNvIHRyaW1zIGFueSBvZmZzZXQgZnJvbSAwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG1lZGlhXG5cbiAgICBzZWdtZW50SW5mby50aW1lc3RhbXBPZmZzZXQgLT0gc2VnbWVudEluZm8udGltaW5nSW5mby5zdGFydDsgLy8gSW4gdGhlIGV2ZW50IHRoYXQgdGhlcmUgYXJlIHBhcnRpYWwgc2VnbWVudCBkb3dubG9hZHMsIGVhY2ggd2lsbCB0cnkgdG8gdXBkYXRlIHRoZVxuICAgIC8vIHRpbWVzdGFtcCBvZmZzZXQuIFJldGFpbmluZyB0aGlzIGJpdCBvZiBzdGF0ZSBwcmV2ZW50cyB1cyBmcm9tIHVwZGF0aW5nIGluIHRoZVxuICAgIC8vIGZ1dHVyZSAod2l0aGluIHRoZSBzYW1lIHNlZ21lbnQpLCBob3dldmVyLCB0aGVyZSBtYXkgYmUgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSBpdC5cblxuICAgIHNlZ21lbnRJbmZvLmNoYW5nZWRUaW1lc3RhbXBPZmZzZXQgPSB0cnVlO1xuXG4gICAgaWYgKHNlZ21lbnRJbmZvLnRpbWVzdGFtcE9mZnNldCAhPT0gdGhpcy5zb3VyY2VVcGRhdGVyXy52aWRlb1RpbWVzdGFtcE9mZnNldCgpKSB7XG4gICAgICB0aGlzLnNvdXJjZVVwZGF0ZXJfLnZpZGVvVGltZXN0YW1wT2Zmc2V0KHNlZ21lbnRJbmZvLnRpbWVzdGFtcE9mZnNldCk7XG4gICAgICBkaWRDaGFuZ2UgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChzZWdtZW50SW5mby50aW1lc3RhbXBPZmZzZXQgIT09IHRoaXMuc291cmNlVXBkYXRlcl8uYXVkaW9UaW1lc3RhbXBPZmZzZXQoKSkge1xuICAgICAgdGhpcy5zb3VyY2VVcGRhdGVyXy5hdWRpb1RpbWVzdGFtcE9mZnNldChzZWdtZW50SW5mby50aW1lc3RhbXBPZmZzZXQpO1xuICAgICAgZGlkQ2hhbmdlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZGlkQ2hhbmdlKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3RpbWVzdGFtcG9mZnNldCcpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udXBkYXRlVGltaW5nSW5mb0VuZF8gPSBmdW5jdGlvbiB1cGRhdGVUaW1pbmdJbmZvRW5kXyhzZWdtZW50SW5mbykge1xuICAgIHNlZ21lbnRJbmZvLnRpbWluZ0luZm8gPSBzZWdtZW50SW5mby50aW1pbmdJbmZvIHx8IHt9O1xuICAgIHZhciB1c2VWaWRlb1RpbWluZ0luZm8gPSB0aGlzLmxvYWRlclR5cGVfID09PSAnbWFpbicgJiYgdGhpcy5jdXJyZW50TWVkaWFJbmZvXy5oYXNWaWRlbztcbiAgICB2YXIgcHJpb3JpdGl6ZWRUaW1pbmdJbmZvID0gdXNlVmlkZW9UaW1pbmdJbmZvICYmIHNlZ21lbnRJbmZvLnZpZGVvVGltaW5nSW5mbyA/IHNlZ21lbnRJbmZvLnZpZGVvVGltaW5nSW5mbyA6IHNlZ21lbnRJbmZvLmF1ZGlvVGltaW5nSW5mbztcblxuICAgIGlmICghcHJpb3JpdGl6ZWRUaW1pbmdJbmZvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VnbWVudEluZm8udGltaW5nSW5mby5lbmQgPSB0eXBlb2YgcHJpb3JpdGl6ZWRUaW1pbmdJbmZvLmVuZCA9PT0gJ251bWJlcicgPyAvLyBFbmQgdGltZSBtYXkgbm90IGV4aXN0IGluIGEgY2FzZSB3aGVyZSB3ZSBhcmVuJ3QgcGFyc2luZyB0aGUgZnVsbCBzZWdtZW50IChvbmVcbiAgICAvLyBjdXJyZW50IGV4YW1wbGUgaXMgdGhlIGNhc2Ugb2YgZm1wNCksIHNvIHVzZSB0aGUgcm91Z2ggZHVyYXRpb24gdG8gY2FsY3VsYXRlIGFuXG4gICAgLy8gZW5kIHRpbWUuXG4gICAgcHJpb3JpdGl6ZWRUaW1pbmdJbmZvLmVuZCA6IHByaW9yaXRpemVkVGltaW5nSW5mby5zdGFydCArIHNlZ21lbnRJbmZvLmR1cmF0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBjYWxsYmFjayB0byBydW4gd2hlbiBhcHBlbmRCdWZmZXIgaXMgZmluaXNoZWQuIGRldGVjdHMgaWYgd2UgYXJlXG4gICAqIGluIGEgZ29vZCBzdGF0ZSB0byBkbyB0aGluZ3Mgd2l0aCB0aGUgZGF0YSB3ZSBnb3QsIG9yIGlmIHdlIG5lZWRcbiAgICogdG8gd2FpdCBmb3IgbW9yZVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVBcHBlbmRzRG9uZV8gPSBmdW5jdGlvbiBoYW5kbGVBcHBlbmRzRG9uZV8oKSB7XG4gICAgLy8gYXBwZW5kc2RvbmUgY2FuIGNhdXNlIGFuIGFib3J0XG4gICAgaWYgKHRoaXMucGVuZGluZ1NlZ21lbnRfKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2FwcGVuZHNkb25lJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnBlbmRpbmdTZWdtZW50Xykge1xuICAgICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7IC8vIFRPRE8gc2hvdWxkIHRoaXMgbW92ZSBpbnRvIHRoaXMuY2hlY2tGb3JBYm9ydCB0byBzcGVlZCB1cCByZXF1ZXN0cyBwb3N0IGFib3J0IGluXG4gICAgICAvLyBhbGwgYXBwZW5kaW5nIGNhc2VzP1xuXG4gICAgICBpZiAoIXRoaXMucGF1c2VkKCkpIHtcbiAgICAgICAgdGhpcy5tb25pdG9yQnVmZmVyXygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNlZ21lbnRJbmZvID0gdGhpcy5wZW5kaW5nU2VnbWVudF87IC8vIE5vdyB0aGF0IHRoZSBlbmQgb2YgdGhlIHNlZ21lbnQgaGFzIGJlZW4gcmVhY2hlZCwgd2UgY2FuIHNldCB0aGUgZW5kIHRpbWUuIEl0J3NcbiAgICAvLyBiZXN0IHRvIHdhaXQgdW50aWwgYWxsIGFwcGVuZHMgYXJlIGRvbmUgc28gd2UncmUgc3VyZSB0aGF0IHRoZSBwcmltYXJ5IG1lZGlhIGlzXG4gICAgLy8gZmluaXNoZWQgKGFuZCB3ZSBoYXZlIGl0cyBlbmQgdGltZSkuXG5cbiAgICB0aGlzLnVwZGF0ZVRpbWluZ0luZm9FbmRfKHNlZ21lbnRJbmZvKTtcblxuICAgIGlmICh0aGlzLnNob3VsZFNhdmVTZWdtZW50VGltaW5nSW5mb18pIHtcbiAgICAgIC8vIFRpbWVsaW5lIG1hcHBpbmdzIHNob3VsZCBvbmx5IGJlIHNhdmVkIGZvciB0aGUgbWFpbiBsb2FkZXIuIFRoaXMgaXMgZm9yIG11bHRpcGxlXG4gICAgICAvLyByZWFzb25zOlxuICAgICAgLy9cbiAgICAgIC8vIDEpIE9ubHkgb25lIG1hcHBpbmcgaXMgc2F2ZWQgcGVyIHRpbWVsaW5lLCBtZWFuaW5nIHRoYXQgaWYgYm90aCB0aGUgYXVkaW8gbG9hZGVyXG4gICAgICAvLyAgICBhbmQgdGhlIG1haW4gbG9hZGVyIHRyeSB0byBzYXZlIHRoZSB0aW1lbGluZSBtYXBwaW5nLCB3aGljaGV2ZXIgY29tZXMgbGF0ZXJcbiAgICAgIC8vICAgIHdpbGwgb3ZlcndyaXRlIHRoZSBmaXJzdC4gSW4gdGhlb3J5IHRoaXMgaXMgT0ssIGFzIHRoZSBtYXBwaW5ncyBzaG91bGQgYmUgdGhlXG4gICAgICAvLyAgICBzYW1lLCBob3dldmVyLCBpdCBicmVha3MgZm9yICgyKVxuICAgICAgLy8gMikgSW4gdGhlIGV2ZW50IG9mIGEgbGl2ZSBzdHJlYW0sIHRoZSBpbml0aWFsIGxpdmUgcG9pbnQgd2lsbCBtYWtlIGZvciBhIHNvbWV3aGF0XG4gICAgICAvLyAgICBhcmJpdHJhcnkgbWFwcGluZy4gSWYgYXVkaW8gYW5kIHZpZGVvIHN0cmVhbXMgYXJlIG5vdCBwZXJmZWN0bHkgaW4tc3luYywgdGhlblxuICAgICAgLy8gICAgdGhlIG1hcHBpbmcgd2lsbCBiZSBvZmYgZm9yIG9uZSBvZiB0aGUgc3RyZWFtcywgZGVwZW5kZW50IG9uIHdoaWNoIG9uZSB3YXNcbiAgICAgIC8vICAgIGZpcnN0IHNhdmVkIChzZWUgKDEpKS5cbiAgICAgIC8vIDMpIFByaW1hcnkgdGltaW5nIGdvZXMgYnkgdmlkZW8gaW4gVkhTLCBzbyB0aGUgbWFwcGluZyBzaG91bGQgYmUgdmlkZW8uXG4gICAgICAvL1xuICAgICAgLy8gU2luY2UgdGhlIGF1ZGlvIGxvYWRlciB3aWxsIHdhaXQgZm9yIHRoZSBtYWluIGxvYWRlciB0byBsb2FkIHRoZSBmaXJzdCBzZWdtZW50LFxuICAgICAgLy8gdGhlIG1haW4gbG9hZGVyIHdpbGwgc2F2ZSB0aGUgZmlyc3QgdGltZWxpbmUgbWFwcGluZywgYW5kIGVuc3VyZSB0aGF0IHRoZXJlIHdvbid0XG4gICAgICAvLyBiZSBhIGNhc2Ugd2hlcmUgYXVkaW8gbG9hZHMgdHdvIHNlZ21lbnRzIHdpdGhvdXQgc2F2aW5nIGEgbWFwcGluZyAodGh1cyBsZWFkaW5nXG4gICAgICAvLyB0byBtaXNzaW5nIHNlZ21lbnQgdGltaW5nIGluZm8pLlxuICAgICAgdGhpcy5zeW5jQ29udHJvbGxlcl8uc2F2ZVNlZ21lbnRUaW1pbmdJbmZvKHtcbiAgICAgICAgc2VnbWVudEluZm86IHNlZ21lbnRJbmZvLFxuICAgICAgICBzaG91bGRTYXZlVGltZWxpbmVNYXBwaW5nOiB0aGlzLmxvYWRlclR5cGVfID09PSAnbWFpbidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyXyhzZWdtZW50SW5mb1N0cmluZyhzZWdtZW50SW5mbykpO1xuICAgIHRoaXMucmVjb3JkVGhyb3VnaHB1dF8oc2VnbWVudEluZm8pO1xuICAgIHRoaXMucGVuZGluZ1NlZ21lbnRfID0gbnVsbDtcbiAgICB0aGlzLnN0YXRlID0gJ1JFQURZJzsgLy8gVE9ETyBtaW5vciwgYnV0IGZvciBwYXJ0aWFsIHNlZ21lbnQgZG93bmxvYWRzLCB0aGlzIGNhbiBiZSBkb25lIGVhcmxpZXIgdG8gc2F2ZVxuICAgIC8vIG9uIGJhbmR3aWR0aCBhbmQgZG93bmxvYWQgdGltZVxuXG4gICAgaWYgKHNlZ21lbnRJbmZvLmlzU3luY1JlcXVlc3QpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignc3luY2luZm91cGRhdGUnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmFkZFNlZ21lbnRNZXRhZGF0YUN1ZV8oc2VnbWVudEluZm8pO1xuICAgIHRoaXMuZmV0Y2hBdEJ1ZmZlcl8gPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuY3VycmVudFRpbWVsaW5lXyAhPT0gc2VnbWVudEluZm8udGltZWxpbmUpIHtcbiAgICAgIHRoaXMudGltZWxpbmVDaGFuZ2VDb250cm9sbGVyXy5sYXN0VGltZWxpbmVDaGFuZ2Uoe1xuICAgICAgICB0eXBlOiB0aGlzLmxvYWRlclR5cGVfLFxuICAgICAgICBmcm9tOiB0aGlzLmN1cnJlbnRUaW1lbGluZV8sXG4gICAgICAgIHRvOiBzZWdtZW50SW5mby50aW1lbGluZVxuICAgICAgfSk7IC8vIElmIGF1ZGlvIGlzIG5vdCBkaXNhYmxlZCwgdGhlIG1haW4gc2VnbWVudCBsb2FkZXIgaXMgcmVzcG9uc2libGUgZm9yIHVwZGF0aW5nXG4gICAgICAvLyB0aGUgYXVkaW8gdGltZWxpbmUgYXMgd2VsbC4gSWYgdGhlIGNvbnRlbnQgaXMgdmlkZW8gb25seSwgdGhpcyB3b24ndCBoYXZlIGFueVxuICAgICAgLy8gaW1wYWN0LlxuXG4gICAgICBpZiAodGhpcy5sb2FkZXJUeXBlXyA9PT0gJ21haW4nICYmICF0aGlzLmF1ZGlvRGlzYWJsZWRfKSB7XG4gICAgICAgIHRoaXMudGltZWxpbmVDaGFuZ2VDb250cm9sbGVyXy5sYXN0VGltZWxpbmVDaGFuZ2Uoe1xuICAgICAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICAgICAgZnJvbTogdGhpcy5jdXJyZW50VGltZWxpbmVfLFxuICAgICAgICAgIHRvOiBzZWdtZW50SW5mby50aW1lbGluZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRUaW1lbGluZV8gPSBzZWdtZW50SW5mby50aW1lbGluZTsgLy8gV2UgbXVzdCB1cGRhdGUgdGhlIHN5bmNpbmZvIHRvIHJlY2FsY3VsYXRlIHRoZSBzZWVrYWJsZSByYW5nZSBiZWZvcmVcbiAgICAvLyB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbmFsIG90aGVyd2lzZSBpdCBtYXkgY29uc2lkZXIgdGhpcyBhIGJhZCBcImd1ZXNzXCJcbiAgICAvLyBhbmQgYXR0ZW1wdCB0byByZXN5bmMgd2hlbiB0aGUgcG9zdC11cGRhdGUgc2Vla2FibGUgd2luZG93IGFuZCBsaXZlXG4gICAgLy8gcG9pbnQgd291bGQgbWVhbiB0aGF0IHRoaXMgd2FzIHRoZSBwZXJmZWN0IHNlZ21lbnQgdG8gZmV0Y2hcblxuICAgIHRoaXMudHJpZ2dlcignc3luY2luZm91cGRhdGUnKTtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRJbmZvLnNlZ21lbnQ7IC8vIElmIHdlIHByZXZpb3VzbHkgYXBwZW5kZWQgYSBzZWdtZW50IHRoYXQgZW5kcyBtb3JlIHRoYW4gMyB0YXJnZXREdXJhdGlvbnMgYmVmb3JlXG4gICAgLy8gdGhlIGN1cnJlbnRUaW1lXyB0aGF0IG1lYW5zIHRoYXQgb3VyIGNvbnNlcnZhdGl2ZSBndWVzcyB3YXMgdG9vIGNvbnNlcnZhdGl2ZS5cbiAgICAvLyBJbiB0aGF0IGNhc2UsIHJlc2V0IHRoZSBsb2FkZXIgc3RhdGUgc28gdGhhdCB3ZSB0cnkgdG8gdXNlIGFueSBpbmZvcm1hdGlvbiBnYWluZWRcbiAgICAvLyBmcm9tIHRoZSBwcmV2aW91cyByZXF1ZXN0IHRvIGNyZWF0ZSBhIG5ldywgbW9yZSBhY2N1cmF0ZSwgc3luYy1wb2ludC5cblxuICAgIGlmIChzZWdtZW50LmVuZCAmJiB0aGlzLmN1cnJlbnRUaW1lXygpIC0gc2VnbWVudC5lbmQgPiBzZWdtZW50SW5mby5wbGF5bGlzdC50YXJnZXREdXJhdGlvbiAqIDMpIHtcbiAgICAgIHRoaXMucmVzZXRFdmVyeXRoaW5nKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGlzV2Fsa2luZ0ZvcndhcmQgPSB0aGlzLm1lZGlhSW5kZXggIT09IG51bGw7IC8vIERvbid0IGRvIGEgcmVuZGl0aW9uIHN3aXRjaCB1bmxlc3Mgd2UgaGF2ZSBlbm91Z2ggdGltZSB0byBnZXQgYSBzeW5jIHNlZ21lbnRcbiAgICAvLyBhbmQgY29uc2VydmF0aXZlbHkgZ3Vlc3NcblxuICAgIGlmIChpc1dhbGtpbmdGb3J3YXJkKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2JhbmR3aWR0aHVwZGF0ZScpO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcigncHJvZ3Jlc3MnKTtcbiAgICB0aGlzLm1lZGlhSW5kZXggPSBzZWdtZW50SW5mby5tZWRpYUluZGV4OyAvLyBhbnkgdGltZSBhbiB1cGRhdGUgZmluaXNoZXMgYW5kIHRoZSBsYXN0IHNlZ21lbnQgaXMgaW4gdGhlXG4gICAgLy8gYnVmZmVyLCBlbmQgdGhlIHN0cmVhbS4gdGhpcyBlbnN1cmVzIHRoZSBcImVuZGVkXCIgZXZlbnQgd2lsbFxuICAgIC8vIGZpcmUgaWYgcGxheWJhY2sgcmVhY2hlcyB0aGF0IHBvaW50LlxuXG4gICAgaWYgKHRoaXMuaXNFbmRPZlN0cmVhbV8oc2VnbWVudEluZm8ubWVkaWFJbmRleCwgc2VnbWVudEluZm8ucGxheWxpc3QpKSB7XG4gICAgICB0aGlzLmVuZE9mU3RyZWFtKCk7XG4gICAgfSAvLyB1c2VkIGZvciB0ZXN0aW5nXG5cblxuICAgIHRoaXMudHJpZ2dlcignYXBwZW5kZWQnKTtcblxuICAgIGlmICghdGhpcy5wYXVzZWQoKSkge1xuICAgICAgdGhpcy5tb25pdG9yQnVmZmVyXygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVjb3JkcyB0aGUgY3VycmVudCB0aHJvdWdocHV0IG9mIHRoZSBkZWNyeXB0LCB0cmFuc211eCwgYW5kIGFwcGVuZFxuICAgKiBwb3J0aW9uIG9mIHRoZSBzZW1nbWVudCBwaXBlbGluZS4gYHRocm91Z2hwdXQucmF0ZWAgaXMgYSB0aGUgY3VtdWxhdGl2ZVxuICAgKiBtb3ZpbmcgYXZlcmFnZSBvZiB0aGUgdGhyb3VnaHB1dC4gYHRocm91Z2hwdXQuY291bnRgIGlzIHRoZSBudW1iZXIgb2ZcbiAgICogZGF0YSBwb2ludHMgaW4gdGhlIGF2ZXJhZ2UuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZWdtZW50SW5mbyB0aGUgb2JqZWN0IHJldHVybmVkIGJ5IGxvYWRTZWdtZW50XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlY29yZFRocm91Z2hwdXRfID0gZnVuY3Rpb24gcmVjb3JkVGhyb3VnaHB1dF8oc2VnbWVudEluZm8pIHtcbiAgICB2YXIgcmF0ZSA9IHRoaXMudGhyb3VnaHB1dC5yYXRlOyAvLyBBZGQgb25lIHRvIHRoZSB0aW1lIHRvIGVuc3VyZSB0aGF0IHdlIGRvbid0IGFjY2lkZW50YWxseSBhdHRlbXB0IHRvIGRpdmlkZVxuICAgIC8vIGJ5IHplcm8gaW4gdGhlIGNhc2Ugd2hlcmUgdGhlIHRocm91Z2hwdXQgaXMgcmlkaWN1bG91c2x5IGhpZ2hcblxuICAgIHZhciBzZWdtZW50UHJvY2Vzc2luZ1RpbWUgPSBEYXRlLm5vdygpIC0gc2VnbWVudEluZm8uZW5kT2ZBbGxSZXF1ZXN0cyArIDE7IC8vIE11bHRpcGx5IGJ5IDgwMDAgdG8gY29udmVydCBmcm9tIGJ5dGVzL21pbGxpc2Vjb25kIHRvIGJpdHMvc2Vjb25kXG5cbiAgICB2YXIgc2VnbWVudFByb2Nlc3NpbmdUaHJvdWdocHV0ID0gTWF0aC5mbG9vcihzZWdtZW50SW5mby5ieXRlTGVuZ3RoIC8gc2VnbWVudFByb2Nlc3NpbmdUaW1lICogOCAqIDEwMDApOyAvLyBUaGlzIGlzIGp1c3QgYSBjdW11bGF0aXZlIG1vdmluZyBhdmVyYWdlIGNhbGN1bGF0aW9uOlxuICAgIC8vICAgbmV3QXZnID0gb2xkQXZnICsgKHNhbXBsZSAtIG9sZEF2ZykgLyAoc2FtcGxlQ291bnQgKyAxKVxuXG4gICAgdGhpcy50aHJvdWdocHV0LnJhdGUgKz0gKHNlZ21lbnRQcm9jZXNzaW5nVGhyb3VnaHB1dCAtIHJhdGUpIC8gKyt0aGlzLnRocm91Z2hwdXQuY291bnQ7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjdWUgdG8gdGhlIHNlZ21lbnQtbWV0YWRhdGEgdHJhY2sgd2l0aCBzb21lIG1ldGFkYXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZVxuICAgKiBzZWdtZW50XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZWdtZW50SW5mb1xuICAgKiAgICAgICAgdGhlIG9iamVjdCByZXR1cm5lZCBieSBsb2FkU2VnbWVudFxuICAgKiBAbWV0aG9kIGFkZFNlZ21lbnRNZXRhZGF0YUN1ZV9cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkU2VnbWVudE1ldGFkYXRhQ3VlXyA9IGZ1bmN0aW9uIGFkZFNlZ21lbnRNZXRhZGF0YUN1ZV8oc2VnbWVudEluZm8pIHtcbiAgICBpZiAoIXRoaXMuc2VnbWVudE1ldGFkYXRhVHJhY2tfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50SW5mby5zZWdtZW50O1xuICAgIHZhciBzdGFydCA9IHNlZ21lbnQuc3RhcnQ7XG4gICAgdmFyIGVuZCA9IHNlZ21lbnQuZW5kOyAvLyBEbyBub3QgdHJ5IGFkZGluZyB0aGUgY3VlIGlmIHRoZSBzdGFydCBhbmQgZW5kIHRpbWVzIGFyZSBpbnZhbGlkLlxuXG4gICAgaWYgKCFmaW5pdGUoc3RhcnQpIHx8ICFmaW5pdGUoZW5kKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlbW92ZUN1ZXNGcm9tVHJhY2soc3RhcnQsIGVuZCwgdGhpcy5zZWdtZW50TWV0YWRhdGFUcmFja18pO1xuICAgIHZhciBDdWUgPSB3aW5kb3ckMS5XZWJLaXREYXRhQ3VlIHx8IHdpbmRvdyQxLlZUVEN1ZTtcbiAgICB2YXIgdmFsdWUgPSB7XG4gICAgICBjdXN0b206IHNlZ21lbnQuY3VzdG9tLFxuICAgICAgZGF0ZVRpbWVPYmplY3Q6IHNlZ21lbnQuZGF0ZVRpbWVPYmplY3QsXG4gICAgICBkYXRlVGltZVN0cmluZzogc2VnbWVudC5kYXRlVGltZVN0cmluZyxcbiAgICAgIGJhbmR3aWR0aDogc2VnbWVudEluZm8ucGxheWxpc3QuYXR0cmlidXRlcy5CQU5EV0lEVEgsXG4gICAgICByZXNvbHV0aW9uOiBzZWdtZW50SW5mby5wbGF5bGlzdC5hdHRyaWJ1dGVzLlJFU09MVVRJT04sXG4gICAgICBjb2RlY3M6IHNlZ21lbnRJbmZvLnBsYXlsaXN0LmF0dHJpYnV0ZXMuQ09ERUNTLFxuICAgICAgYnl0ZUxlbmd0aDogc2VnbWVudEluZm8uYnl0ZUxlbmd0aCxcbiAgICAgIHVyaTogc2VnbWVudEluZm8udXJpLFxuICAgICAgdGltZWxpbmU6IHNlZ21lbnRJbmZvLnRpbWVsaW5lLFxuICAgICAgcGxheWxpc3Q6IHNlZ21lbnRJbmZvLnBsYXlsaXN0LmlkLFxuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgZW5kOiBlbmRcbiAgICB9O1xuICAgIHZhciBkYXRhID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIHZhciBjdWUgPSBuZXcgQ3VlKHN0YXJ0LCBlbmQsIGRhdGEpOyAvLyBBdHRhY2ggdGhlIG1ldGFkYXRhIHRvIHRoZSB2YWx1ZSBwcm9wZXJ0eSBvZiB0aGUgY3VlIHRvIGtlZXAgY29uc2lzdGVuY3kgYmV0d2VlblxuICAgIC8vIHRoZSBkaWZmZXJlbmNlcyBvZiBXZWJLaXREYXRhQ3VlIGluIHNhZmFyaSBhbmQgVlRUQ3VlIGluIG90aGVyIGJyb3dzZXJzXG5cbiAgICBjdWUudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnNlZ21lbnRNZXRhZGF0YVRyYWNrXy5hZGRDdWUoY3VlKTtcbiAgfTtcblxuICByZXR1cm4gU2VnbWVudExvYWRlcjtcbn0odmlkZW9qcyQxLkV2ZW50VGFyZ2V0KTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciB0b1RpdGxlQ2FzZSQxID0gZnVuY3Rpb24gdG9UaXRsZUNhc2Uoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLy4vLCBmdW5jdGlvbiAodykge1xuICAgIHJldHVybiB3LnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufTtcblxudmFyIGJ1ZmZlclR5cGVzID0gWyd2aWRlbycsICdhdWRpbyddO1xuXG52YXIgX3VwZGF0aW5nID0gZnVuY3Rpb24gdXBkYXRpbmcodHlwZSwgc291cmNlVXBkYXRlcikge1xuICB2YXIgc291cmNlQnVmZmVyID0gc291cmNlVXBkYXRlclt0eXBlICsgXCJCdWZmZXJcIl07XG4gIHJldHVybiBzb3VyY2VCdWZmZXIgJiYgc291cmNlQnVmZmVyLnVwZGF0aW5nIHx8IHNvdXJjZVVwZGF0ZXIucXVldWVQZW5kaW5nW3R5cGVdO1xufTtcblxudmFyIG5leHRRdWV1ZUluZGV4T2ZUeXBlID0gZnVuY3Rpb24gbmV4dFF1ZXVlSW5kZXhPZlR5cGUodHlwZSwgcXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBxdWV1ZUVudHJ5ID0gcXVldWVbaV07XG5cbiAgICBpZiAocXVldWVFbnRyeS50eXBlID09PSAnbWVkaWFTb3VyY2UnKSB7XG4gICAgICAvLyBJZiB0aGUgbmV4dCBlbnRyeSBpcyBhIG1lZGlhIHNvdXJjZSBlbnRyeSAodXNlcyBtdWx0aXBsZSBzb3VyY2UgYnVmZmVycyksIGJsb2NrXG4gICAgICAvLyBwcm9jZXNzaW5nIHRvIGFsbG93IGl0IHRvIGdvIHRocm91Z2ggZmlyc3QuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAocXVldWVFbnRyeS50eXBlID09PSB0eXBlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBzaGlmdFF1ZXVlID0gZnVuY3Rpb24gc2hpZnRRdWV1ZSh0eXBlLCBzb3VyY2VVcGRhdGVyKSB7XG4gIGlmIChzb3VyY2VVcGRhdGVyLnF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBxdWV1ZUluZGV4ID0gMDtcbiAgdmFyIHF1ZXVlRW50cnkgPSBzb3VyY2VVcGRhdGVyLnF1ZXVlW3F1ZXVlSW5kZXhdO1xuXG4gIGlmIChxdWV1ZUVudHJ5LnR5cGUgPT09ICdtZWRpYVNvdXJjZScpIHtcbiAgICBpZiAoIXNvdXJjZVVwZGF0ZXIudXBkYXRpbmcoKSAmJiBzb3VyY2VVcGRhdGVyLm1lZGlhU291cmNlLnJlYWR5U3RhdGUgIT09ICdjbG9zZWQnKSB7XG4gICAgICBzb3VyY2VVcGRhdGVyLnF1ZXVlLnNoaWZ0KCk7XG4gICAgICBxdWV1ZUVudHJ5LmFjdGlvbihzb3VyY2VVcGRhdGVyKTtcblxuICAgICAgaWYgKHF1ZXVlRW50cnkuZG9uZUZuKSB7XG4gICAgICAgIHF1ZXVlRW50cnkuZG9uZUZuKCk7XG4gICAgICB9IC8vIE9ubHkgc3BlY2lmaWMgc291cmNlIGJ1ZmZlciBhY3Rpb25zIG11c3Qgd2FpdCBmb3IgYXN5bmMgdXBkYXRlZW5kIGV2ZW50cy4gTWVkaWFcbiAgICAgIC8vIFNvdXJjZSBhY3Rpb25zIHByb2Nlc3Mgc3luY2hyb25vdXNseS4gVGhlcmVmb3JlLCBib3RoIGF1ZGlvIGFuZCB2aWRlbyBzb3VyY2VcbiAgICAgIC8vIGJ1ZmZlcnMgYXJlIG5vdyBjbGVhciB0byBwcm9jZXNzIHRoZSBuZXh0IHF1ZXVlIGVudHJpZXMuXG5cblxuICAgICAgc2hpZnRRdWV1ZSgnYXVkaW8nLCBzb3VyY2VVcGRhdGVyKTtcbiAgICAgIHNoaWZ0UXVldWUoJ3ZpZGVvJywgc291cmNlVXBkYXRlcik7XG4gICAgfSAvLyBNZWRpYSBTb3VyY2UgYWN0aW9ucyByZXF1aXJlIGJvdGggc291cmNlIGJ1ZmZlcnMsIHNvIGlmIHRoZSBtZWRpYSBzb3VyY2UgYWN0aW9uXG4gICAgLy8gY291bGRuJ3QgcHJvY2VzcyB5ZXQgKGJlY2F1c2Ugb25lIG9yIGJvdGggc291cmNlIGJ1ZmZlcnMgYXJlIGJ1c3kpLCBibG9jayBvdGhlclxuICAgIC8vIHF1ZXVlIGFjdGlvbnMgdW50aWwgYm90aCBhcmUgYXZhaWxhYmxlIGFuZCB0aGUgbWVkaWEgc291cmNlIGFjdGlvbiBjYW4gcHJvY2Vzcy5cblxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdtZWRpYVNvdXJjZScpIHtcbiAgICAvLyBJZiB0aGUgcXVldWUgd2FzIHNoaWZ0ZWQgYnkgYSBtZWRpYSBzb3VyY2UgYWN0aW9uICh0aGlzIGhhcHBlbnMgd2hlbiBwdXNoaW5nIGFcbiAgICAvLyBtZWRpYSBzb3VyY2UgYWN0aW9uIG9udG8gdGhlIHF1ZXVlKSwgdGhlbiBpdCB3YXNuJ3QgZnJvbSBhbiB1cGRhdGVlbmQgZXZlbnQgZnJvbSBhblxuICAgIC8vIGF1ZGlvIG9yIHZpZGVvIHNvdXJjZSBidWZmZXIsIHNvIHRoZXJlJ3Mgbm8gY2hhbmdlIGZyb20gcHJldmlvdXMgc3RhdGUsIGFuZCBub1xuICAgIC8vIHByb2Nlc3Npbmcgc2hvdWxkIGJlIGRvbmUuXG4gICAgcmV0dXJuO1xuICB9IC8vIE1lZGlhIHNvdXJjZSBxdWV1ZSBlbnRyaWVzIGRvbid0IG5lZWQgdG8gY29uc2lkZXIgd2hldGhlciB0aGUgc291cmNlIHVwZGF0ZXIgaXNcbiAgLy8gc3RhcnRlZCAoaS5lLiwgc291cmNlIGJ1ZmZlcnMgYXJlIGNyZWF0ZWQpIGFzIHRoZXkgZG9uJ3QgbmVlZCB0aGUgc291cmNlIGJ1ZmZlcnMsIGJ1dFxuICAvLyBzb3VyY2UgYnVmZmVyIHF1ZXVlIGVudHJpZXMgZG8uXG5cblxuICBpZiAoIXNvdXJjZVVwZGF0ZXIuc3RhcnRlZF8gfHwgc291cmNlVXBkYXRlci5tZWRpYVNvdXJjZS5yZWFkeVN0YXRlID09PSAnY2xvc2VkJyB8fCBfdXBkYXRpbmcodHlwZSwgc291cmNlVXBkYXRlcikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocXVldWVFbnRyeS50eXBlICE9PSB0eXBlKSB7XG4gICAgcXVldWVJbmRleCA9IG5leHRRdWV1ZUluZGV4T2ZUeXBlKHR5cGUsIHNvdXJjZVVwZGF0ZXIucXVldWUpO1xuXG4gICAgaWYgKHF1ZXVlSW5kZXggPT09IG51bGwpIHtcbiAgICAgIC8vIEVpdGhlciB0aGVyZSdzIG5vIHF1ZXVlIGVudHJ5IHRoYXQgdXNlcyB0aGlzIHNvdXJjZSBidWZmZXIgdHlwZSBpbiB0aGUgcXVldWUsIG9yXG4gICAgICAvLyB0aGVyZSdzIGEgbWVkaWEgc291cmNlIHF1ZXVlIGVudHJ5IGJlZm9yZSB0aGUgbmV4dCBlbnRyeSBvZiB0aGlzIHR5cGUsIGluIHdoaWNoXG4gICAgICAvLyBjYXNlIHdhaXQgZm9yIHRoYXQgYWN0aW9uIHRvIHByb2Nlc3MgZmlyc3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcXVldWVFbnRyeSA9IHNvdXJjZVVwZGF0ZXIucXVldWVbcXVldWVJbmRleF07XG4gIH1cblxuICBzb3VyY2VVcGRhdGVyLnF1ZXVlLnNwbGljZShxdWV1ZUluZGV4LCAxKTtcbiAgcXVldWVFbnRyeS5hY3Rpb24odHlwZSwgc291cmNlVXBkYXRlcik7XG5cbiAgaWYgKCFxdWV1ZUVudHJ5LmRvbmVGbikge1xuICAgIC8vIHN5bmNocm9ub3VzIG9wZXJhdGlvbiwgcHJvY2VzcyBuZXh0IGVudHJ5XG4gICAgc2hpZnRRdWV1ZSh0eXBlLCBzb3VyY2VVcGRhdGVyKTtcbiAgICByZXR1cm47XG4gIH0gLy8gYXN5bmNocm9ub3VzIG9wZXJhdGlvbiwgc28ga2VlcCBhIHJlY29yZCB0aGF0IHRoaXMgc291cmNlIGJ1ZmZlciB0eXBlIGlzIGluIHVzZVxuXG5cbiAgc291cmNlVXBkYXRlci5xdWV1ZVBlbmRpbmdbdHlwZV0gPSBxdWV1ZUVudHJ5O1xufTtcblxudmFyIGNsZWFudXBCdWZmZXIgPSBmdW5jdGlvbiBjbGVhbnVwQnVmZmVyKHR5cGUsIHNvdXJjZVVwZGF0ZXIpIHtcbiAgdmFyIGJ1ZmZlciA9IHNvdXJjZVVwZGF0ZXJbdHlwZSArIFwiQnVmZmVyXCJdO1xuICB2YXIgdGl0bGVUeXBlID0gdG9UaXRsZUNhc2UkMSh0eXBlKTtcblxuICBpZiAoIWJ1ZmZlcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGJ1ZmZlci5yZW1vdmVFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCBzb3VyY2VVcGRhdGVyW1wib25cIiArIHRpdGxlVHlwZSArIFwiVXBkYXRlRW5kX1wiXSk7XG4gIGJ1ZmZlci5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHNvdXJjZVVwZGF0ZXJbXCJvblwiICsgdGl0bGVUeXBlICsgXCJFcnJvcl9cIl0pO1xuICBzb3VyY2VVcGRhdGVyLmNvZGVjc1t0eXBlXSA9IG51bGw7XG4gIHNvdXJjZVVwZGF0ZXJbdHlwZSArIFwiQnVmZmVyXCJdID0gbnVsbDtcbn07XG5cbnZhciBpblNvdXJjZUJ1ZmZlcnMgPSBmdW5jdGlvbiBpblNvdXJjZUJ1ZmZlcnMobWVkaWFTb3VyY2UsIHNvdXJjZUJ1ZmZlcikge1xuICByZXR1cm4gbWVkaWFTb3VyY2UgJiYgc291cmNlQnVmZmVyICYmIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwobWVkaWFTb3VyY2Uuc291cmNlQnVmZmVycywgc291cmNlQnVmZmVyKSAhPT0gLTE7XG59O1xuXG52YXIgYWN0aW9ucyA9IHtcbiAgYXBwZW5kQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCdWZmZXIoYnl0ZXMsIHNlZ21lbnRJbmZvKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlLCBzb3VyY2VVcGRhdGVyKSB7XG4gICAgICB2YXIgc291cmNlQnVmZmVyID0gc291cmNlVXBkYXRlclt0eXBlICsgXCJCdWZmZXJcIl07IC8vIGNhbid0IGRvIGFueXRoaW5nIGlmIHRoZSBtZWRpYSBzb3VyY2UgLyBzb3VyY2UgYnVmZmVyIGlzIG51bGxcbiAgICAgIC8vIG9yIHRoZSBtZWRpYSBzb3VyY2UgZG9lcyBub3QgY29udGFpbiB0aGlzIHNvdXJjZSBidWZmZXIuXG5cbiAgICAgIGlmICghaW5Tb3VyY2VCdWZmZXJzKHNvdXJjZVVwZGF0ZXIubWVkaWFTb3VyY2UsIHNvdXJjZUJ1ZmZlcikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzb3VyY2VVcGRhdGVyLmxvZ2dlcl8oXCJBcHBlbmRpbmcgc2VnbWVudCBcIiArIHNlZ21lbnRJbmZvLm1lZGlhSW5kZXggKyBcIidzIFwiICsgYnl0ZXMubGVuZ3RoICsgXCIgYnl0ZXMgdG8gXCIgKyB0eXBlICsgXCJCdWZmZXJcIik7XG4gICAgICBzb3VyY2VCdWZmZXIuYXBwZW5kQnVmZmVyKGJ5dGVzKTtcbiAgICB9O1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlLCBzb3VyY2VVcGRhdGVyKSB7XG4gICAgICB2YXIgc291cmNlQnVmZmVyID0gc291cmNlVXBkYXRlclt0eXBlICsgXCJCdWZmZXJcIl07IC8vIGNhbid0IGRvIGFueXRoaW5nIGlmIHRoZSBtZWRpYSBzb3VyY2UgLyBzb3VyY2UgYnVmZmVyIGlzIG51bGxcbiAgICAgIC8vIG9yIHRoZSBtZWRpYSBzb3VyY2UgZG9lcyBub3QgY29udGFpbiB0aGlzIHNvdXJjZSBidWZmZXIuXG5cbiAgICAgIGlmICghaW5Tb3VyY2VCdWZmZXJzKHNvdXJjZVVwZGF0ZXIubWVkaWFTb3VyY2UsIHNvdXJjZUJ1ZmZlcikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzb3VyY2VVcGRhdGVyLmxvZ2dlcl8oXCJSZW1vdmluZyBcIiArIHN0YXJ0ICsgXCIgdG8gXCIgKyBlbmQgKyBcIiBmcm9tIFwiICsgdHlwZSArIFwiQnVmZmVyXCIpO1xuICAgICAgc291cmNlQnVmZmVyLnJlbW92ZShzdGFydCwgZW5kKTtcbiAgICB9O1xuICB9LFxuICB0aW1lc3RhbXBPZmZzZXQ6IGZ1bmN0aW9uIHRpbWVzdGFtcE9mZnNldChvZmZzZXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHR5cGUsIHNvdXJjZVVwZGF0ZXIpIHtcbiAgICAgIHZhciBzb3VyY2VCdWZmZXIgPSBzb3VyY2VVcGRhdGVyW3R5cGUgKyBcIkJ1ZmZlclwiXTsgLy8gY2FuJ3QgZG8gYW55dGhpbmcgaWYgdGhlIG1lZGlhIHNvdXJjZSAvIHNvdXJjZSBidWZmZXIgaXMgbnVsbFxuICAgICAgLy8gb3IgdGhlIG1lZGlhIHNvdXJjZSBkb2VzIG5vdCBjb250YWluIHRoaXMgc291cmNlIGJ1ZmZlci5cblxuICAgICAgaWYgKCFpblNvdXJjZUJ1ZmZlcnMoc291cmNlVXBkYXRlci5tZWRpYVNvdXJjZSwgc291cmNlQnVmZmVyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNvdXJjZVVwZGF0ZXIubG9nZ2VyXyhcIlNldHRpbmcgXCIgKyB0eXBlICsgXCJ0aW1lc3RhbXBPZmZzZXQgdG8gXCIgKyBvZmZzZXQpO1xuICAgICAgc291cmNlQnVmZmVyLnRpbWVzdGFtcE9mZnNldCA9IG9mZnNldDtcbiAgICB9O1xuICB9LFxuICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soX2NhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlLCBzb3VyY2VVcGRhdGVyKSB7XG4gICAgICBfY2FsbGJhY2soKTtcbiAgICB9O1xuICB9LFxuICBlbmRPZlN0cmVhbTogZnVuY3Rpb24gZW5kT2ZTdHJlYW0oZXJyb3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZVVwZGF0ZXIpIHtcbiAgICAgIGlmIChzb3VyY2VVcGRhdGVyLm1lZGlhU291cmNlLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNvdXJjZVVwZGF0ZXIubG9nZ2VyXyhcIkNhbGxpbmcgbWVkaWFTb3VyY2UgZW5kT2ZTdHJlYW0oXCIgKyAoZXJyb3IgfHwgJycpICsgXCIpXCIpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBzb3VyY2VVcGRhdGVyLm1lZGlhU291cmNlLmVuZE9mU3RyZWFtKGVycm9yKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdGYWlsZWQgdG8gY2FsbCBtZWRpYSBzb3VyY2UgZW5kT2ZTdHJlYW0nLCBlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBkdXJhdGlvbjogZnVuY3Rpb24gZHVyYXRpb24oX2R1cmF0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2VVcGRhdGVyKSB7XG4gICAgICBzb3VyY2VVcGRhdGVyLmxvZ2dlcl8oXCJTZXR0aW5nIG1lZGlhU291cmNlIGR1cmF0aW9uIHRvIFwiICsgX2R1cmF0aW9uKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc291cmNlVXBkYXRlci5tZWRpYVNvdXJjZS5kdXJhdGlvbiA9IF9kdXJhdGlvbjtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdGYWlsZWQgdG8gc2V0IG1lZGlhIHNvdXJjZSBkdXJhdGlvbicsIGUpO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGFib3J0OiBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHR5cGUsIHNvdXJjZVVwZGF0ZXIpIHtcbiAgICAgIGlmIChzb3VyY2VVcGRhdGVyLm1lZGlhU291cmNlLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzb3VyY2VCdWZmZXIgPSBzb3VyY2VVcGRhdGVyW3R5cGUgKyBcIkJ1ZmZlclwiXTsgLy8gY2FuJ3QgZG8gYW55dGhpbmcgaWYgdGhlIG1lZGlhIHNvdXJjZSAvIHNvdXJjZSBidWZmZXIgaXMgbnVsbFxuICAgICAgLy8gb3IgdGhlIG1lZGlhIHNvdXJjZSBkb2VzIG5vdCBjb250YWluIHRoaXMgc291cmNlIGJ1ZmZlci5cblxuICAgICAgaWYgKCFpblNvdXJjZUJ1ZmZlcnMoc291cmNlVXBkYXRlci5tZWRpYVNvdXJjZSwgc291cmNlQnVmZmVyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNvdXJjZVVwZGF0ZXIubG9nZ2VyXyhcImNhbGxpbmcgYWJvcnQgb24gXCIgKyB0eXBlICsgXCJCdWZmZXJcIik7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHNvdXJjZUJ1ZmZlci5hYm9ydCgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB2aWRlb2pzJDEubG9nLndhcm4oXCJGYWlsZWQgdG8gYWJvcnQgb24gXCIgKyB0eXBlICsgXCJCdWZmZXJcIiwgZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgYWRkU291cmNlQnVmZmVyOiBmdW5jdGlvbiBhZGRTb3VyY2VCdWZmZXIodHlwZSwgY29kZWMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZVVwZGF0ZXIpIHtcbiAgICAgIHZhciB0aXRsZVR5cGUgPSB0b1RpdGxlQ2FzZSQxKHR5cGUpO1xuICAgICAgdmFyIG1pbWUgPSBnZXRNaW1lRm9yQ29kZWMoY29kZWMpO1xuICAgICAgc291cmNlVXBkYXRlci5sb2dnZXJfKFwiQWRkaW5nIFwiICsgdHlwZSArIFwiQnVmZmVyIHdpdGggY29kZWMgXCIgKyBjb2RlYyArIFwiIHRvIG1lZGlhU291cmNlXCIpO1xuICAgICAgdmFyIHNvdXJjZUJ1ZmZlciA9IHNvdXJjZVVwZGF0ZXIubWVkaWFTb3VyY2UuYWRkU291cmNlQnVmZmVyKG1pbWUpO1xuICAgICAgc291cmNlQnVmZmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsIHNvdXJjZVVwZGF0ZXJbXCJvblwiICsgdGl0bGVUeXBlICsgXCJVcGRhdGVFbmRfXCJdKTtcbiAgICAgIHNvdXJjZUJ1ZmZlci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHNvdXJjZVVwZGF0ZXJbXCJvblwiICsgdGl0bGVUeXBlICsgXCJFcnJvcl9cIl0pO1xuICAgICAgc291cmNlVXBkYXRlci5jb2RlY3NbdHlwZV0gPSBjb2RlYztcbiAgICAgIHNvdXJjZVVwZGF0ZXJbdHlwZSArIFwiQnVmZmVyXCJdID0gc291cmNlQnVmZmVyO1xuICAgIH07XG4gIH0sXG4gIHJlbW92ZVNvdXJjZUJ1ZmZlcjogZnVuY3Rpb24gcmVtb3ZlU291cmNlQnVmZmVyKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZVVwZGF0ZXIpIHtcbiAgICAgIHZhciBzb3VyY2VCdWZmZXIgPSBzb3VyY2VVcGRhdGVyW3R5cGUgKyBcIkJ1ZmZlclwiXTtcbiAgICAgIGNsZWFudXBCdWZmZXIodHlwZSwgc291cmNlVXBkYXRlcik7IC8vIGNhbid0IGRvIGFueXRoaW5nIGlmIHRoZSBtZWRpYSBzb3VyY2UgLyBzb3VyY2UgYnVmZmVyIGlzIG51bGxcbiAgICAgIC8vIG9yIHRoZSBtZWRpYSBzb3VyY2UgZG9lcyBub3QgY29udGFpbiB0aGlzIHNvdXJjZSBidWZmZXIuXG5cbiAgICAgIGlmICghaW5Tb3VyY2VCdWZmZXJzKHNvdXJjZVVwZGF0ZXIubWVkaWFTb3VyY2UsIHNvdXJjZUJ1ZmZlcikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzb3VyY2VVcGRhdGVyLmxvZ2dlcl8oXCJSZW1vdmluZyBcIiArIHR5cGUgKyBcIkJ1ZmZlciB3aXRoIGNvZGVjIFwiICsgc291cmNlVXBkYXRlci5jb2RlY3NbdHlwZV0gKyBcIiBmcm9tIG1lZGlhU291cmNlXCIpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBzb3VyY2VVcGRhdGVyLm1lZGlhU291cmNlLnJlbW92ZVNvdXJjZUJ1ZmZlcihzb3VyY2VCdWZmZXIpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB2aWRlb2pzJDEubG9nLndhcm4oXCJGYWlsZWQgdG8gcmVtb3ZlU291cmNlQnVmZmVyIFwiICsgdHlwZSArIFwiQnVmZmVyXCIsIGUpO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGNoYW5nZVR5cGU6IGZ1bmN0aW9uIGNoYW5nZVR5cGUoY29kZWMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHR5cGUsIHNvdXJjZVVwZGF0ZXIpIHtcbiAgICAgIHZhciBzb3VyY2VCdWZmZXIgPSBzb3VyY2VVcGRhdGVyW3R5cGUgKyBcIkJ1ZmZlclwiXTtcbiAgICAgIHZhciBtaW1lID0gZ2V0TWltZUZvckNvZGVjKGNvZGVjKTsgLy8gY2FuJ3QgZG8gYW55dGhpbmcgaWYgdGhlIG1lZGlhIHNvdXJjZSAvIHNvdXJjZSBidWZmZXIgaXMgbnVsbFxuICAgICAgLy8gb3IgdGhlIG1lZGlhIHNvdXJjZSBkb2VzIG5vdCBjb250YWluIHRoaXMgc291cmNlIGJ1ZmZlci5cblxuICAgICAgaWYgKCFpblNvdXJjZUJ1ZmZlcnMoc291cmNlVXBkYXRlci5tZWRpYVNvdXJjZSwgc291cmNlQnVmZmVyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIGRvIG5vdCB1cGRhdGUgY29kZWMgaWYgd2UgZG9uJ3QgbmVlZCB0by5cblxuXG4gICAgICBpZiAoc291cmNlVXBkYXRlci5jb2RlY3NbdHlwZV0gPT09IGNvZGVjKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc291cmNlVXBkYXRlci5sb2dnZXJfKFwiY2hhbmdpbmcgXCIgKyB0eXBlICsgXCJCdWZmZXIgY29kZWMgZnJvbSBcIiArIHNvdXJjZVVwZGF0ZXIuY29kZWNzW3R5cGVdICsgXCIgdG8gXCIgKyBjb2RlYyk7XG4gICAgICBzb3VyY2VCdWZmZXIuY2hhbmdlVHlwZShtaW1lKTtcbiAgICAgIHNvdXJjZVVwZGF0ZXIuY29kZWNzW3R5cGVdID0gY29kZWM7XG4gICAgfTtcbiAgfVxufTtcblxudmFyIHB1c2hRdWV1ZSA9IGZ1bmN0aW9uIHB1c2hRdWV1ZShfcmVmKSB7XG4gIHZhciB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgc291cmNlVXBkYXRlciA9IF9yZWYuc291cmNlVXBkYXRlcixcbiAgICAgIGFjdGlvbiA9IF9yZWYuYWN0aW9uLFxuICAgICAgZG9uZUZuID0gX3JlZi5kb25lRm4sXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICBzb3VyY2VVcGRhdGVyLnF1ZXVlLnB1c2goe1xuICAgIHR5cGU6IHR5cGUsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgZG9uZUZuOiBkb25lRm4sXG4gICAgbmFtZTogbmFtZVxuICB9KTtcbiAgc2hpZnRRdWV1ZSh0eXBlLCBzb3VyY2VVcGRhdGVyKTtcbn07XG5cbnZhciBvblVwZGF0ZWVuZCA9IGZ1bmN0aW9uIG9uVXBkYXRlZW5kKHR5cGUsIHNvdXJjZVVwZGF0ZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgLy8gQWx0aG91Z2ggdGhlcmUgc2hvdWxkLCBpbiB0aGVvcnksIGJlIGEgcGVuZGluZyBhY3Rpb24gZm9yIGFueSB1cGRhdGVlbmQgcmVjZWlldmVkLFxuICAgIC8vIHRoZXJlIGFyZSBzb21lIGFjdGlvbnMgdGhhdCBtYXkgdHJpZ2dlciB1cGRhdGVlbmQgZXZlbnRzIHdpdGhvdXQgc2V0IGRlZmluaXRpb25zIGluXG4gICAgLy8gdGhlIHczYyBzcGVjLiBGb3IgaW5zdGFuY2UsIHNldHRpbmcgdGhlIGR1cmF0aW9uIG9uIHRoZSBtZWRpYSBzb3VyY2UgbWF5IHRyaWdnZXJcbiAgICAvLyB1cGRhdGVlbmQgZXZlbnRzIG9uIHNvdXJjZSBidWZmZXJzLiBUaGlzIGRvZXMgbm90IGFwcGVhciB0byBiZSBpbiB0aGUgc3BlYy4gQXMgc3VjaCxcbiAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gdXBkYXRlZW5kIHdpdGhvdXQgYSBjb3JyZXNwb25kaW5nIHBlbmRpbmcgYWN0aW9uIGZyb20gb3VyIHF1ZXVlXG4gICAgLy8gZm9yIHRoYXQgc291cmNlIGJ1ZmZlciB0eXBlLCBwcm9jZXNzIHRoZSBuZXh0IGFjdGlvbi5cbiAgICBpZiAoc291cmNlVXBkYXRlci5xdWV1ZVBlbmRpbmdbdHlwZV0pIHtcbiAgICAgIHZhciBkb25lRm4gPSBzb3VyY2VVcGRhdGVyLnF1ZXVlUGVuZGluZ1t0eXBlXS5kb25lRm47XG4gICAgICBzb3VyY2VVcGRhdGVyLnF1ZXVlUGVuZGluZ1t0eXBlXSA9IG51bGw7XG5cbiAgICAgIGlmIChkb25lRm4pIHtcbiAgICAgICAgLy8gaWYgdGhlcmUncyBhbiBlcnJvciwgcmVwb3J0IGl0XG4gICAgICAgIGRvbmVGbihzb3VyY2VVcGRhdGVyW3R5cGUgKyBcIkVycm9yX1wiXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2hpZnRRdWV1ZSh0eXBlLCBzb3VyY2VVcGRhdGVyKTtcbiAgfTtcbn07XG4vKipcbiAqIEEgcXVldWUgb2YgY2FsbGJhY2tzIHRvIGJlIHNlcmlhbGl6ZWQgYW5kIGFwcGxpZWQgd2hlbiBhXG4gKiBNZWRpYVNvdXJjZSBhbmQgaXRzIGFzc29jaWF0ZWQgU291cmNlQnVmZmVycyBhcmUgbm90IGluIHRoZVxuICogdXBkYXRpbmcgc3RhdGUuIEl0IGlzIHVzZWQgYnkgdGhlIHNlZ21lbnQgbG9hZGVyIHRvIHVwZGF0ZSB0aGVcbiAqIHVuZGVybHlpbmcgU291cmNlQnVmZmVycyB3aGVuIG5ldyBkYXRhIGlzIGxvYWRlZCwgZm9yIGluc3RhbmNlLlxuICpcbiAqIEBjbGFzcyBTb3VyY2VVcGRhdGVyXG4gKiBAcGFyYW0ge01lZGlhU291cmNlfSBtZWRpYVNvdXJjZSB0aGUgTWVkaWFTb3VyY2UgdG8gY3JlYXRlIHRoZSBTb3VyY2VCdWZmZXIgZnJvbVxuICogQHBhcmFtIHtzdHJpbmd9IG1pbWVUeXBlIHRoZSBkZXNpcmVkIE1JTUUgdHlwZSBvZiB0aGUgdW5kZXJseWluZyBTb3VyY2VCdWZmZXJcbiAqL1xuXG5cbnZhciBTb3VyY2VVcGRhdGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfdmlkZW9qcyRFdmVudFRhcmdldCkge1xuICBfaW5oZXJpdHNMb29zZShTb3VyY2VVcGRhdGVyLCBfdmlkZW9qcyRFdmVudFRhcmdldCk7XG5cbiAgZnVuY3Rpb24gU291cmNlVXBkYXRlcihtZWRpYVNvdXJjZSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX3ZpZGVvanMkRXZlbnRUYXJnZXQuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLm1lZGlhU291cmNlID0gbWVkaWFTb3VyY2U7XG5cbiAgICBfdGhpcy5zb3VyY2VvcGVuTGlzdGVuZXJfID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHNoaWZ0UXVldWUoJ21lZGlhU291cmNlJywgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIH07XG5cbiAgICBfdGhpcy5tZWRpYVNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgX3RoaXMuc291cmNlb3Blbkxpc3RlbmVyXyk7XG5cbiAgICBfdGhpcy5sb2dnZXJfID0gbG9nZ2VyKCdTb3VyY2VVcGRhdGVyJyk7IC8vIGluaXRpYWwgdGltZXN0YW1wIG9mZnNldCBpcyAwXG5cbiAgICBfdGhpcy5hdWRpb1RpbWVzdGFtcE9mZnNldF8gPSAwO1xuICAgIF90aGlzLnZpZGVvVGltZXN0YW1wT2Zmc2V0XyA9IDA7XG4gICAgX3RoaXMucXVldWUgPSBbXTtcbiAgICBfdGhpcy5xdWV1ZVBlbmRpbmcgPSB7XG4gICAgICBhdWRpbzogbnVsbCxcbiAgICAgIHZpZGVvOiBudWxsXG4gICAgfTtcbiAgICBfdGhpcy5kZWxheWVkQXVkaW9BcHBlbmRRdWV1ZV8gPSBbXTtcbiAgICBfdGhpcy52aWRlb0FwcGVuZFF1ZXVlZF8gPSBmYWxzZTtcbiAgICBfdGhpcy5jb2RlY3MgPSB7fTtcbiAgICBfdGhpcy5vblZpZGVvVXBkYXRlRW5kXyA9IG9uVXBkYXRlZW5kKCd2aWRlbycsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkF1ZGlvVXBkYXRlRW5kXyA9IG9uVXBkYXRlZW5kKCdhdWRpbycsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcblxuICAgIF90aGlzLm9uVmlkZW9FcnJvcl8gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gdXNlZCBmb3IgZGVidWdnaW5nXG4gICAgICBfdGhpcy52aWRlb0Vycm9yXyA9IGU7XG4gICAgfTtcblxuICAgIF90aGlzLm9uQXVkaW9FcnJvcl8gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gdXNlZCBmb3IgZGVidWdnaW5nXG4gICAgICBfdGhpcy5hdWRpb0Vycm9yXyA9IGU7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXJ0ZWRfID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNvdXJjZVVwZGF0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZWFkeSA9IGZ1bmN0aW9uIHJlYWR5KCkge1xuICAgIHJldHVybiB0aGlzLnN0YXJ0ZWRfO1xuICB9O1xuXG4gIF9wcm90by5jcmVhdGVTb3VyY2VCdWZmZXJzID0gZnVuY3Rpb24gY3JlYXRlU291cmNlQnVmZmVycyhjb2RlY3MpIHtcbiAgICBpZiAodGhpcy5yZWFkeSgpKSB7XG4gICAgICAvLyBhbHJlYWR5IGNyZWF0ZWQgdGhlbSBiZWZvcmVcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHRoZSBpbnRpYWwgYWRkT3JDaGFuZ2VTb3VyY2VCdWZmZXJzIHdpbGwgYWx3YXlzIGJlXG4gICAgLy8gdHdvIGFkZCBidWZmZXJzLlxuXG5cbiAgICB0aGlzLmFkZE9yQ2hhbmdlU291cmNlQnVmZmVycyhjb2RlY3MpO1xuICAgIHRoaXMuc3RhcnRlZF8gPSB0cnVlO1xuICAgIHRoaXMudHJpZ2dlcigncmVhZHknKTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgdHlwZSBvZiBzb3VyY2UgYnVmZmVyIHRvIHRoZSBtZWRpYSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBUaGUgdHlwZSBvZiBzb3VyY2UgYnVmZmVyIHRvIGFkZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGVjXG4gICAqICAgICAgICBUaGUgY29kZWMgdG8gYWRkIHRoZSBzb3VyY2UgYnVmZmVyIHdpdGguXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFNvdXJjZUJ1ZmZlciA9IGZ1bmN0aW9uIGFkZFNvdXJjZUJ1ZmZlcih0eXBlLCBjb2RlYykge1xuICAgIHB1c2hRdWV1ZSh7XG4gICAgICB0eXBlOiAnbWVkaWFTb3VyY2UnLFxuICAgICAgc291cmNlVXBkYXRlcjogdGhpcyxcbiAgICAgIGFjdGlvbjogYWN0aW9ucy5hZGRTb3VyY2VCdWZmZXIodHlwZSwgY29kZWMpLFxuICAgICAgbmFtZTogJ2FkZFNvdXJjZUJ1ZmZlcidcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogY2FsbCBhYm9ydCBvbiBhIHNvdXJjZSBidWZmZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBUaGUgdHlwZSBvZiBzb3VyY2UgYnVmZmVyIHRvIGNhbGwgYWJvcnQgb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFib3J0ID0gZnVuY3Rpb24gYWJvcnQodHlwZSkge1xuICAgIHB1c2hRdWV1ZSh7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgc291cmNlVXBkYXRlcjogdGhpcyxcbiAgICAgIGFjdGlvbjogYWN0aW9ucy5hYm9ydCh0eXBlKSxcbiAgICAgIG5hbWU6ICdhYm9ydCdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCByZW1vdmVTb3VyY2VCdWZmZXIgYW5kIHJlbW92ZSBhIHNwZWNpZmljIHR5cGVcbiAgICogb2Ygc291cmNlIGJ1ZmZlciBvbiB0aGUgbWVkaWFTb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBUaGUgdHlwZSBvZiBzb3VyY2UgYnVmZmVyIHRvIHJlbW92ZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlU291cmNlQnVmZmVyID0gZnVuY3Rpb24gcmVtb3ZlU291cmNlQnVmZmVyKHR5cGUpIHtcbiAgICBpZiAoIXRoaXMuY2FuUmVtb3ZlU291cmNlQnVmZmVyKCkpIHtcbiAgICAgIHZpZGVvanMkMS5sb2cuZXJyb3IoJ3JlbW92ZVNvdXJjZUJ1ZmZlciBpcyBub3Qgc3VwcG9ydGVkIScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHB1c2hRdWV1ZSh7XG4gICAgICB0eXBlOiAnbWVkaWFTb3VyY2UnLFxuICAgICAgc291cmNlVXBkYXRlcjogdGhpcyxcbiAgICAgIGFjdGlvbjogYWN0aW9ucy5yZW1vdmVTb3VyY2VCdWZmZXIodHlwZSksXG4gICAgICBuYW1lOiAncmVtb3ZlU291cmNlQnVmZmVyJ1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgcmVtb3ZlU291cmNlQnVmZmVyIGZ1bmN0aW9uIGlzIHN1cHBvcnRlZFxuICAgKiBvbiB0aGUgbWVkaWFTb3VyY2UuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgIGlmIHJlbW92ZVNvdXJjZUJ1ZmZlciBjYW4gYmUgY2FsbGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jYW5SZW1vdmVTb3VyY2VCdWZmZXIgPSBmdW5jdGlvbiBjYW5SZW1vdmVTb3VyY2VCdWZmZXIoKSB7XG4gICAgLy8gSUUgcmVwb3J0cyB0aGF0IGl0IHN1cHBvcnRzIHJlbW92ZVNvdXJjZUJ1ZmZlciwgYnV0IG9mdGVuIHRocm93c1xuICAgIC8vIGVycm9ycyB3aGVuIGF0dGVtcHRpbmcgdG8gdXNlIHRoZSBmdW5jdGlvbi4gU28gd2UgcmVwb3J0IHRoYXQgaXRcbiAgICAvLyBkb2VzIG5vdCBzdXBwb3J0IHJlbW92ZVNvdXJjZUJ1ZmZlci5cbiAgICByZXR1cm4gIXZpZGVvanMkMS5icm93c2VyLklFX1ZFUlNJT04gJiYgd2luZG93JDEuTWVkaWFTb3VyY2UgJiYgd2luZG93JDEuTWVkaWFTb3VyY2UucHJvdG90eXBlICYmIHR5cGVvZiB3aW5kb3ckMS5NZWRpYVNvdXJjZS5wcm90b3R5cGUucmVtb3ZlU291cmNlQnVmZmVyID09PSAnZnVuY3Rpb24nO1xuICB9XG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgY2hhbmdlVHlwZSBmdW5jdGlvbiBpcyBzdXBwb3J0ZWRcbiAgICogb24gb3VyIFNvdXJjZUJ1ZmZlcnMuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqICAgICAgICAgaWYgY2hhbmdlVHlwZSBjYW4gYmUgY2FsbGVkLlxuICAgKi9cbiAgO1xuXG4gIFNvdXJjZVVwZGF0ZXIuY2FuQ2hhbmdlVHlwZSA9IGZ1bmN0aW9uIGNhbkNoYW5nZVR5cGUoKSB7XG4gICAgcmV0dXJuIHdpbmRvdyQxLlNvdXJjZUJ1ZmZlciAmJiB3aW5kb3ckMS5Tb3VyY2VCdWZmZXIucHJvdG90eXBlICYmIHR5cGVvZiB3aW5kb3ckMS5Tb3VyY2VCdWZmZXIucHJvdG90eXBlLmNoYW5nZVR5cGUgPT09ICdmdW5jdGlvbic7XG4gIH1cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoZSBjaGFuZ2VUeXBlIGZ1bmN0aW9uIGlzIHN1cHBvcnRlZFxuICAgKiBvbiBvdXIgU291cmNlQnVmZmVycy5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogICAgICAgICBpZiBjaGFuZ2VUeXBlIGNhbiBiZSBjYWxsZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNhbkNoYW5nZVR5cGUgPSBmdW5jdGlvbiBjYW5DaGFuZ2VUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNhbkNoYW5nZVR5cGUoKTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCB0aGUgY2hhbmdlVHlwZSBmdW5jdGlvbiBvbiBhIHNvdXJjZSBidWZmZXIsIGdpdmVuIHRoZSBjb2RlIGFuZCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgVGhlIHR5cGUgb2Ygc291cmNlIGJ1ZmZlciB0byBjYWxsIGNoYW5nZVR5cGUgb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlY1xuICAgKiAgICAgICAgVGhlIGNvZGVjIHN0cmluZyB0byBjaGFuZ2UgdHlwZSB3aXRoIG9uIHRoZSBzb3VyY2UgYnVmZmVyLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jaGFuZ2VUeXBlID0gZnVuY3Rpb24gY2hhbmdlVHlwZSh0eXBlLCBjb2RlYykge1xuICAgIGlmICghdGhpcy5jYW5DaGFuZ2VUeXBlKCkpIHtcbiAgICAgIHZpZGVvanMkMS5sb2cuZXJyb3IoJ2NoYW5nZVR5cGUgaXMgbm90IHN1cHBvcnRlZCEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwdXNoUXVldWUoe1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIHNvdXJjZVVwZGF0ZXI6IHRoaXMsXG4gICAgICBhY3Rpb246IGFjdGlvbnMuY2hhbmdlVHlwZShjb2RlYyksXG4gICAgICBuYW1lOiAnY2hhbmdlVHlwZSdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQWRkIHNvdXJjZSBidWZmZXJzIHdpdGggYSBjb2RlYyBvciwgaWYgdGhleSBhcmUgYWxyZWFkeSBjcmVhdGVkLFxuICAgKiBjYWxsIGNoYW5nZVR5cGUgb24gc291cmNlIGJ1ZmZlcnMgdXNpbmcgY2hhbmdlVHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvZGVjc1xuICAgKiAgICAgICAgQ29kZWNzIHRvIHN3aXRjaCB0b1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRPckNoYW5nZVNvdXJjZUJ1ZmZlcnMgPSBmdW5jdGlvbiBhZGRPckNoYW5nZVNvdXJjZUJ1ZmZlcnMoY29kZWNzKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAoIWNvZGVjcyB8fCB0eXBlb2YgY29kZWNzICE9PSAnb2JqZWN0JyB8fCBPYmplY3Qua2V5cyhjb2RlY3MpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYWRkT3JDaGFuZ2VTb3VyY2VCdWZmZXJzIHRvIHVuZGVmaW5lZCBjb2RlY3MnKTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhjb2RlY3MpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHZhciBjb2RlYyA9IGNvZGVjc1t0eXBlXTtcblxuICAgICAgaWYgKCFfdGhpczIucmVhZHkoKSkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmFkZFNvdXJjZUJ1ZmZlcih0eXBlLCBjb2RlYyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpczIuY2FuQ2hhbmdlVHlwZSgpKSB7XG4gICAgICAgIF90aGlzMi5jaGFuZ2VUeXBlKHR5cGUsIGNvZGVjKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUXVldWUgYW4gdXBkYXRlIHRvIGFwcGVuZCBhbiBBcnJheUJ1ZmZlci5cbiAgICpcbiAgICogQHBhcmFtIHtNZWRpYU9iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgYXVkaW9CeXRlcyBhbmQvb3IgdmlkZW9CeXRlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkb25lIHRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gZG9uZVxuICAgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL21lZGlhLXNvdXJjZS8jd2lkbC1Tb3VyY2VCdWZmZXItYXBwZW5kQnVmZmVyLXZvaWQtQXJyYXlCdWZmZXItZGF0YVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hcHBlbmRCdWZmZXIgPSBmdW5jdGlvbiBhcHBlbmRCdWZmZXIob3B0aW9ucywgZG9uZUZuKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgc2VnbWVudEluZm8gPSBvcHRpb25zLnNlZ21lbnRJbmZvLFxuICAgICAgICB0eXBlID0gb3B0aW9ucy50eXBlLFxuICAgICAgICBieXRlcyA9IG9wdGlvbnMuYnl0ZXM7XG4gICAgdGhpcy5wcm9jZXNzZWRBcHBlbmRfID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlID09PSAnYXVkaW8nICYmIHRoaXMudmlkZW9CdWZmZXIgJiYgIXRoaXMudmlkZW9BcHBlbmRRdWV1ZWRfKSB7XG4gICAgICB0aGlzLmRlbGF5ZWRBdWRpb0FwcGVuZFF1ZXVlXy5wdXNoKFtvcHRpb25zLCBkb25lRm5dKTtcbiAgICAgIHRoaXMubG9nZ2VyXyhcImRlbGF5ZWQgYXVkaW8gYXBwZW5kIG9mIFwiICsgYnl0ZXMubGVuZ3RoICsgXCIgdW50aWwgdmlkZW8gYXBwZW5kXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHB1c2hRdWV1ZSh7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgc291cmNlVXBkYXRlcjogdGhpcyxcbiAgICAgIGFjdGlvbjogYWN0aW9ucy5hcHBlbmRCdWZmZXIoYnl0ZXMsIHNlZ21lbnRJbmZvIHx8IHtcbiAgICAgICAgbWVkaWFJbmRleDogLTFcbiAgICAgIH0pLFxuICAgICAgZG9uZUZuOiBkb25lRm4sXG4gICAgICBuYW1lOiAnYXBwZW5kQnVmZmVyJ1xuICAgIH0pO1xuXG4gICAgaWYgKHR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgIHRoaXMudmlkZW9BcHBlbmRRdWV1ZWRfID0gdHJ1ZTtcblxuICAgICAgaWYgKCF0aGlzLmRlbGF5ZWRBdWRpb0FwcGVuZFF1ZXVlXy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcXVldWUgPSB0aGlzLmRlbGF5ZWRBdWRpb0FwcGVuZFF1ZXVlXy5zbGljZSgpO1xuICAgICAgdGhpcy5sb2dnZXJfKFwicXVldWluZyBkZWxheWVkIGF1ZGlvIFwiICsgcXVldWUubGVuZ3RoICsgXCIgYXBwZW5kQnVmZmVyc1wiKTtcbiAgICAgIHRoaXMuZGVsYXllZEF1ZGlvQXBwZW5kUXVldWVfLmxlbmd0aCA9IDA7XG4gICAgICBxdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChxdWUpIHtcbiAgICAgICAgX3RoaXMzLmFwcGVuZEJ1ZmZlci5hcHBseShfdGhpczMsIHF1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgYXVkaW8gYnVmZmVyJ3MgYnVmZmVyZWQgdGltZXJhbmdlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtUaW1lUmFuZ2V9XG4gICAqICAgICAgICAgVGhlIGF1ZGlvIGJ1ZmZlcidzIGJ1ZmZlcmVkIHRpbWUgcmFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYXVkaW9CdWZmZXJlZCA9IGZ1bmN0aW9uIGF1ZGlvQnVmZmVyZWQoKSB7XG4gICAgLy8gbm8gbWVkaWEgc291cmNlL3NvdXJjZSBidWZmZXIgb3IgaXQgaXNuJ3QgaW4gdGhlIG1lZGlhIHNvdXJjZXNcbiAgICAvLyBzb3VyY2UgYnVmZmVyIGxpc3RcbiAgICBpZiAoIWluU291cmNlQnVmZmVycyh0aGlzLm1lZGlhU291cmNlLCB0aGlzLmF1ZGlvQnVmZmVyKSkge1xuICAgICAgcmV0dXJuIHZpZGVvanMkMS5jcmVhdGVUaW1lUmFuZ2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hdWRpb0J1ZmZlci5idWZmZXJlZCA/IHRoaXMuYXVkaW9CdWZmZXIuYnVmZmVyZWQgOiB2aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgdmlkZW8gYnVmZmVyJ3MgYnVmZmVyZWQgdGltZXJhbmdlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtUaW1lUmFuZ2V9XG4gICAqICAgICAgICAgVGhlIHZpZGVvIGJ1ZmZlcidzIGJ1ZmZlcmVkIHRpbWUgcmFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8udmlkZW9CdWZmZXJlZCA9IGZ1bmN0aW9uIHZpZGVvQnVmZmVyZWQoKSB7XG4gICAgLy8gbm8gbWVkaWEgc291cmNlL3NvdXJjZSBidWZmZXIgb3IgaXQgaXNuJ3QgaW4gdGhlIG1lZGlhIHNvdXJjZXNcbiAgICAvLyBzb3VyY2UgYnVmZmVyIGxpc3RcbiAgICBpZiAoIWluU291cmNlQnVmZmVycyh0aGlzLm1lZGlhU291cmNlLCB0aGlzLnZpZGVvQnVmZmVyKSkge1xuICAgICAgcmV0dXJuIHZpZGVvanMkMS5jcmVhdGVUaW1lUmFuZ2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy52aWRlb0J1ZmZlci5idWZmZXJlZCA/IHRoaXMudmlkZW9CdWZmZXIuYnVmZmVyZWQgOiB2aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIGNvbWJpbmVkIHZpZGVvL2F1ZGlvIGJ1ZmZlcidzIGJ1ZmZlcmVkIHRpbWVyYW5nZS5cbiAgICpcbiAgICogQHJldHVybiB7VGltZVJhbmdlfVxuICAgKiAgICAgICAgIHRoZSBjb21iaW5lZCB0aW1lIHJhbmdlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1ZmZlcmVkID0gZnVuY3Rpb24gYnVmZmVyZWQoKSB7XG4gICAgdmFyIHZpZGVvID0gaW5Tb3VyY2VCdWZmZXJzKHRoaXMubWVkaWFTb3VyY2UsIHRoaXMudmlkZW9CdWZmZXIpID8gdGhpcy52aWRlb0J1ZmZlciA6IG51bGw7XG4gICAgdmFyIGF1ZGlvID0gaW5Tb3VyY2VCdWZmZXJzKHRoaXMubWVkaWFTb3VyY2UsIHRoaXMuYXVkaW9CdWZmZXIpID8gdGhpcy5hdWRpb0J1ZmZlciA6IG51bGw7XG5cbiAgICBpZiAoYXVkaW8gJiYgIXZpZGVvKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdWRpb0J1ZmZlcmVkKCk7XG4gICAgfVxuXG4gICAgaWYgKHZpZGVvICYmICFhdWRpbykge1xuICAgICAgcmV0dXJuIHRoaXMudmlkZW9CdWZmZXJlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiBidWZmZXJJbnRlcnNlY3Rpb24odGhpcy5hdWRpb0J1ZmZlcmVkKCksIHRoaXMudmlkZW9CdWZmZXJlZCgpKTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgY2FsbGJhY2sgdG8gdGhlIHF1ZXVlIHRoYXQgd2lsbCBzZXQgZHVyYXRpb24gb24gdGhlIG1lZGlhU291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAgICogICAgICAgIFRoZSBkdXJhdGlvbiB0byBzZXRcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2RvbmVGbl1cbiAgICogICAgICAgIGZ1bmN0aW9uIHRvIHJ1biBhZnRlciBkdXJhdGlvbiBoYXMgYmVlbiBzZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldER1cmF0aW9uID0gZnVuY3Rpb24gc2V0RHVyYXRpb24oZHVyYXRpb24sIGRvbmVGbikge1xuICAgIGlmIChkb25lRm4gPT09IHZvaWQgMCkge1xuICAgICAgZG9uZUZuID0gbm9vcDtcbiAgICB9IC8vIEluIG9yZGVyIHRvIHNldCB0aGUgZHVyYXRpb24gb24gdGhlIG1lZGlhIHNvdXJjZSwgaXQncyBuZWNlc3NhcnkgdG8gd2FpdCBmb3IgYWxsXG4gICAgLy8gc291cmNlIGJ1ZmZlcnMgdG8gbm8gbG9uZ2VyIGJlIHVwZGF0aW5nLiBcIklmIHRoZSB1cGRhdGluZyBhdHRyaWJ1dGUgZXF1YWxzIHRydWUgb25cbiAgICAvLyBhbnkgU291cmNlQnVmZmVyIGluIHNvdXJjZUJ1ZmZlcnMsIHRoZW4gdGhyb3cgYW4gSW52YWxpZFN0YXRlRXJyb3IgZXhjZXB0aW9uIGFuZFxuICAgIC8vIGFib3J0IHRoZXNlIHN0ZXBzLlwiIChzb3VyY2U6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9tZWRpYS1zb3VyY2UvI2F0dHJpYnV0ZXMpLlxuXG5cbiAgICBwdXNoUXVldWUoe1xuICAgICAgdHlwZTogJ21lZGlhU291cmNlJyxcbiAgICAgIHNvdXJjZVVwZGF0ZXI6IHRoaXMsXG4gICAgICBhY3Rpb246IGFjdGlvbnMuZHVyYXRpb24oZHVyYXRpb24pLFxuICAgICAgbmFtZTogJ2R1cmF0aW9uJyxcbiAgICAgIGRvbmVGbjogZG9uZUZuXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIG1lZGlhU291cmNlIGVuZE9mU3RyZWFtIGNhbGwgdG8gdGhlIHF1ZXVlXG4gICAqXG4gICAqIEBwYXJhbSB7RXJyb3J9IFtlcnJvcl1cbiAgICogICAgICAgIENhbGwgZW5kT2ZTdHJlYW0gd2l0aCBhbiBlcnJvclxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZG9uZUZuXVxuICAgKiAgICAgICAgQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGVcbiAgICogICAgICAgIGVuZE9mU3RyZWFtIGNhbGwgaGFzIGZpbmlzaGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmRPZlN0cmVhbSA9IGZ1bmN0aW9uIGVuZE9mU3RyZWFtKGVycm9yLCBkb25lRm4pIHtcbiAgICBpZiAoZXJyb3IgPT09IHZvaWQgMCkge1xuICAgICAgZXJyb3IgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChkb25lRm4gPT09IHZvaWQgMCkge1xuICAgICAgZG9uZUZuID0gbm9vcDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGVycm9yICE9PSAnc3RyaW5nJykge1xuICAgICAgZXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgfSAvLyBJbiBvcmRlciB0byBzZXQgdGhlIGR1cmF0aW9uIG9uIHRoZSBtZWRpYSBzb3VyY2UsIGl0J3MgbmVjZXNzYXJ5IHRvIHdhaXQgZm9yIGFsbFxuICAgIC8vIHNvdXJjZSBidWZmZXJzIHRvIG5vIGxvbmdlciBiZSB1cGRhdGluZy4gXCJJZiB0aGUgdXBkYXRpbmcgYXR0cmlidXRlIGVxdWFscyB0cnVlIG9uXG4gICAgLy8gYW55IFNvdXJjZUJ1ZmZlciBpbiBzb3VyY2VCdWZmZXJzLCB0aGVuIHRocm93IGFuIEludmFsaWRTdGF0ZUVycm9yIGV4Y2VwdGlvbiBhbmRcbiAgICAvLyBhYm9ydCB0aGVzZSBzdGVwcy5cIiAoc291cmNlOiBodHRwczovL3d3dy53My5vcmcvVFIvbWVkaWEtc291cmNlLyNhdHRyaWJ1dGVzKS5cblxuXG4gICAgcHVzaFF1ZXVlKHtcbiAgICAgIHR5cGU6ICdtZWRpYVNvdXJjZScsXG4gICAgICBzb3VyY2VVcGRhdGVyOiB0aGlzLFxuICAgICAgYWN0aW9uOiBhY3Rpb25zLmVuZE9mU3RyZWFtKGVycm9yKSxcbiAgICAgIG5hbWU6ICdlbmRPZlN0cmVhbScsXG4gICAgICBkb25lRm46IGRvbmVGblxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBRdWV1ZSBhbiB1cGRhdGUgdG8gcmVtb3ZlIGEgdGltZSByYW5nZSBmcm9tIHRoZSBidWZmZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCB3aGVyZSB0byBzdGFydCB0aGUgcmVtb3ZhbFxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIHdoZXJlIHRvIGVuZCB0aGUgcmVtb3ZhbFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZG9uZT1ub29wXSBvcHRpb25hbCBjYWxsYmFjayB0byBiZSBleGVjdXRlZCB3aGVuIHRoZSByZW1vdmVcbiAgICogb3BlcmF0aW9uIGlzIGNvbXBsZXRlXG4gICAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvbWVkaWEtc291cmNlLyN3aWRsLVNvdXJjZUJ1ZmZlci1yZW1vdmUtdm9pZC1kb3VibGUtc3RhcnQtdW5yZXN0cmljdGVkLWRvdWJsZS1lbmRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlQXVkaW8gPSBmdW5jdGlvbiByZW1vdmVBdWRpbyhzdGFydCwgZW5kLCBkb25lKSB7XG4gICAgaWYgKGRvbmUgPT09IHZvaWQgMCkge1xuICAgICAgZG9uZSA9IG5vb3A7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmF1ZGlvQnVmZmVyZWQoKS5sZW5ndGggfHwgdGhpcy5hdWRpb0J1ZmZlcmVkKCkuZW5kKDApID09PSAwKSB7XG4gICAgICBkb25lKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHVzaFF1ZXVlKHtcbiAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICBzb3VyY2VVcGRhdGVyOiB0aGlzLFxuICAgICAgYWN0aW9uOiBhY3Rpb25zLnJlbW92ZShzdGFydCwgZW5kKSxcbiAgICAgIGRvbmVGbjogZG9uZSxcbiAgICAgIG5hbWU6ICdyZW1vdmUnXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFF1ZXVlIGFuIHVwZGF0ZSB0byByZW1vdmUgYSB0aW1lIHJhbmdlIGZyb20gdGhlIGJ1ZmZlci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IHdoZXJlIHRvIHN0YXJ0IHRoZSByZW1vdmFsXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgd2hlcmUgdG8gZW5kIHRoZSByZW1vdmFsXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtkb25lPW5vb3BdIG9wdGlvbmFsIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIHJlbW92ZVxuICAgKiBvcGVyYXRpb24gaXMgY29tcGxldGVcbiAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9tZWRpYS1zb3VyY2UvI3dpZGwtU291cmNlQnVmZmVyLXJlbW92ZS12b2lkLWRvdWJsZS1zdGFydC11bnJlc3RyaWN0ZWQtZG91YmxlLWVuZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVWaWRlbyA9IGZ1bmN0aW9uIHJlbW92ZVZpZGVvKHN0YXJ0LCBlbmQsIGRvbmUpIHtcbiAgICBpZiAoZG9uZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkb25lID0gbm9vcDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMudmlkZW9CdWZmZXJlZCgpLmxlbmd0aCB8fCB0aGlzLnZpZGVvQnVmZmVyZWQoKS5lbmQoMCkgPT09IDApIHtcbiAgICAgIGRvbmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwdXNoUXVldWUoe1xuICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgIHNvdXJjZVVwZGF0ZXI6IHRoaXMsXG4gICAgICBhY3Rpb246IGFjdGlvbnMucmVtb3ZlKHN0YXJ0LCBlbmQpLFxuICAgICAgZG9uZUZuOiBkb25lLFxuICAgICAgbmFtZTogJ3JlbW92ZSdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogV2hldGhlciB0aGUgdW5kZXJseWluZyBzb3VyY2VCdWZmZXIgaXMgdXBkYXRpbmcgb3Igbm90XG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRoZSB1cGRhdGluZyBzdGF0dXMgb2YgdGhlIFNvdXJjZUJ1ZmZlclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGluZyA9IGZ1bmN0aW9uIHVwZGF0aW5nKCkge1xuICAgIC8vIHRoZSBhdWRpby92aWRlbyBzb3VyY2UgYnVmZmVyIGlzIHVwZGF0aW5nXG4gICAgaWYgKF91cGRhdGluZygnYXVkaW8nLCB0aGlzKSB8fCBfdXBkYXRpbmcoJ3ZpZGVvJywgdGhpcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogU2V0L2dldCB0aGUgdGltZXN0YW1wb2Zmc2V0IG9uIHRoZSBhdWRpbyBTb3VyY2VCdWZmZXJcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSB0aGUgdGltZXN0YW1wIG9mZnNldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hdWRpb1RpbWVzdGFtcE9mZnNldCA9IGZ1bmN0aW9uIGF1ZGlvVGltZXN0YW1wT2Zmc2V0KG9mZnNldCkge1xuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmF1ZGlvQnVmZmVyICYmIC8vIG5vIHBvaW50IGluIHVwZGF0aW5nIGlmIGl0J3MgdGhlIHNhbWVcbiAgICB0aGlzLmF1ZGlvVGltZXN0YW1wT2Zmc2V0XyAhPT0gb2Zmc2V0KSB7XG4gICAgICBwdXNoUXVldWUoe1xuICAgICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgICBzb3VyY2VVcGRhdGVyOiB0aGlzLFxuICAgICAgICBhY3Rpb246IGFjdGlvbnMudGltZXN0YW1wT2Zmc2V0KG9mZnNldCksXG4gICAgICAgIG5hbWU6ICd0aW1lc3RhbXBPZmZzZXQnXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYXVkaW9UaW1lc3RhbXBPZmZzZXRfID0gb2Zmc2V0O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmF1ZGlvVGltZXN0YW1wT2Zmc2V0XztcbiAgfVxuICAvKipcbiAgICogU2V0L2dldCB0aGUgdGltZXN0YW1wb2Zmc2V0IG9uIHRoZSB2aWRlbyBTb3VyY2VCdWZmZXJcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSB0aGUgdGltZXN0YW1wIG9mZnNldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by52aWRlb1RpbWVzdGFtcE9mZnNldCA9IGZ1bmN0aW9uIHZpZGVvVGltZXN0YW1wT2Zmc2V0KG9mZnNldCkge1xuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLnZpZGVvQnVmZmVyICYmIC8vIG5vIHBvaW50IGluIHVwZGF0aW5nIGlmIGl0J3MgdGhlIHNhbWVcbiAgICB0aGlzLnZpZGVvVGltZXN0YW1wT2Zmc2V0ICE9PSBvZmZzZXQpIHtcbiAgICAgIHB1c2hRdWV1ZSh7XG4gICAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICAgIHNvdXJjZVVwZGF0ZXI6IHRoaXMsXG4gICAgICAgIGFjdGlvbjogYWN0aW9ucy50aW1lc3RhbXBPZmZzZXQob2Zmc2V0KSxcbiAgICAgICAgbmFtZTogJ3RpbWVzdGFtcE9mZnNldCdcbiAgICAgIH0pO1xuICAgICAgdGhpcy52aWRlb1RpbWVzdGFtcE9mZnNldF8gPSBvZmZzZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudmlkZW9UaW1lc3RhbXBPZmZzZXRfO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBmdW5jdGlvbiB0byB0aGUgcXVldWUgdGhhdCB3aWxsIGJlIGNhbGxlZFxuICAgKiB3aGVuIGl0IGlzIGl0cyB0dXJuIHRvIHJ1biBpbiB0aGUgYXVkaW8gcXVldWUuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqICAgICAgICBUaGUgY2FsbGJhY2sgdG8gcXVldWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmF1ZGlvUXVldWVDYWxsYmFjayA9IGZ1bmN0aW9uIGF1ZGlvUXVldWVDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIGlmICghdGhpcy5hdWRpb0J1ZmZlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHB1c2hRdWV1ZSh7XG4gICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgc291cmNlVXBkYXRlcjogdGhpcyxcbiAgICAgIGFjdGlvbjogYWN0aW9ucy5jYWxsYmFjayhjYWxsYmFjayksXG4gICAgICBuYW1lOiAnY2FsbGJhY2snXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIGZ1bmN0aW9uIHRvIHRoZSBxdWV1ZSB0aGF0IHdpbGwgYmUgY2FsbGVkXG4gICAqIHdoZW4gaXQgaXMgaXRzIHR1cm4gdG8gcnVuIGluIHRoZSB2aWRlbyBxdWV1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogICAgICAgIFRoZSBjYWxsYmFjayB0byBxdWV1ZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udmlkZW9RdWV1ZUNhbGxiYWNrID0gZnVuY3Rpb24gdmlkZW9RdWV1ZUNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLnZpZGVvQnVmZmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHVzaFF1ZXVlKHtcbiAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICBzb3VyY2VVcGRhdGVyOiB0aGlzLFxuICAgICAgYWN0aW9uOiBhY3Rpb25zLmNhbGxiYWNrKGNhbGxiYWNrKSxcbiAgICAgIG5hbWU6ICdjYWxsYmFjaydcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogZGlzcG9zZSBvZiB0aGUgc291cmNlIHVwZGF0ZXIgYW5kIHRoZSB1bmRlcmx5aW5nIHNvdXJjZUJ1ZmZlclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHRoaXMudHJpZ2dlcignZGlzcG9zZScpO1xuICAgIGJ1ZmZlclR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIF90aGlzNC5hYm9ydCh0eXBlKTtcblxuICAgICAgaWYgKF90aGlzNC5jYW5SZW1vdmVTb3VyY2VCdWZmZXIoKSkge1xuICAgICAgICBfdGhpczQucmVtb3ZlU291cmNlQnVmZmVyKHR5cGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXM0W3R5cGUgKyBcIlF1ZXVlQ2FsbGJhY2tcIl0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjbGVhbnVwQnVmZmVyKHR5cGUsIF90aGlzNCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMudmlkZW9BcHBlbmRRdWV1ZWRfID0gZmFsc2U7XG4gICAgdGhpcy5kZWxheWVkQXVkaW9BcHBlbmRRdWV1ZV8ubGVuZ3RoID0gMDtcblxuICAgIGlmICh0aGlzLnNvdXJjZW9wZW5MaXN0ZW5lcl8pIHtcbiAgICAgIHRoaXMubWVkaWFTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMuc291cmNlb3Blbkxpc3RlbmVyXyk7XG4gICAgfVxuXG4gICAgdGhpcy5vZmYoKTtcbiAgfTtcblxuICByZXR1cm4gU291cmNlVXBkYXRlcjtcbn0odmlkZW9qcyQxLkV2ZW50VGFyZ2V0KTtcblxudmFyIHVpbnQ4VG9VdGY4ID0gZnVuY3Rpb24gdWludDhUb1V0ZjgodWludEFycmF5KSB7XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgdWludEFycmF5KSkpO1xufTtcblxudmFyIFZUVF9MSU5FX1RFUk1JTkFUT1JTID0gbmV3IFVpbnQ4QXJyYXkoJ1xcblxcbicuc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoX2NoYXIyKSB7XG4gIHJldHVybiBfY2hhcjIuY2hhckNvZGVBdCgwKTtcbn0pKTtcbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgbWFuYWdlcyBzZWdtZW50IGxvYWRpbmcgYW5kIGFwcGVuZGluZy5cbiAqXG4gKiBAY2xhc3MgVlRUU2VnbWVudExvYWRlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgcmVxdWlyZWQgYW5kIG9wdGlvbmFsIG9wdGlvbnNcbiAqIEBleHRlbmRzIHZpZGVvanMuRXZlbnRUYXJnZXRcbiAqL1xuXG52YXIgVlRUU2VnbWVudExvYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1NlZ21lbnRMb2FkZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoVlRUU2VnbWVudExvYWRlciwgX1NlZ21lbnRMb2FkZXIpO1xuXG4gIGZ1bmN0aW9uIFZUVFNlZ21lbnRMb2FkZXIoc2V0dGluZ3MsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfU2VnbWVudExvYWRlci5jYWxsKHRoaXMsIHNldHRpbmdzLCBvcHRpb25zKSB8fCB0aGlzOyAvLyBWVFQgY2FuJ3QgaGFuZGxlIHBhcnRpYWwgZGF0YVxuXG4gICAgX3RoaXMuaGFuZGxlUGFydGlhbERhdGFfID0gZmFsc2U7IC8vIFNlZ21lbnRMb2FkZXIgcmVxdWlyZXMgYSBNZWRpYVNvdXJjZSBiZSBzcGVjaWZpZWQgb3IgaXQgd2lsbCB0aHJvdyBhbiBlcnJvcjtcbiAgICAvLyBob3dldmVyLCBWVFRTZWdtZW50TG9hZGVyIGhhcyBubyBuZWVkIG9mIGEgbWVkaWEgc291cmNlLCBzbyBkZWxldGUgdGhlIHJlZmVyZW5jZVxuXG4gICAgX3RoaXMubWVkaWFTb3VyY2VfID0gbnVsbDtcbiAgICBfdGhpcy5zdWJ0aXRsZXNUcmFja18gPSBudWxsO1xuICAgIF90aGlzLmxvYWRlclR5cGVfID0gJ3N1YnRpdGxlJztcbiAgICBfdGhpcy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3NfID0gc2V0dGluZ3MuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzOyAvLyBUaGUgVlRUIHNlZ21lbnQgd2lsbCBoYXZlIGl0cyBvd24gdGltZSBtYXBwaW5ncy4gU2F2aW5nIFZUVCBzZWdtZW50IHRpbWluZyBpbmZvIGluXG4gICAgLy8gdGhlIHN5bmMgY29udHJvbGxlciBsZWFkcyB0byBpbXByb3BlciBiZWhhdmlvci5cblxuICAgIF90aGlzLnNob3VsZFNhdmVTZWdtZW50VGltaW5nSW5mb18gPSBmYWxzZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVlRUU2VnbWVudExvYWRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZVRyYW5zbXV4ZXJfID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNtdXhlcl8oKSB7XG4gICAgLy8gZG9uJ3QgbmVlZCB0byB0cmFuc211eCBhbnkgc3VidGl0bGVzXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGljaCB0aW1lIHJhbmdlcyBhcmUgYnVmZmVyZWRcbiAgICpcbiAgICogQHJldHVybiB7VGltZVJhbmdlfVxuICAgKiAgICAgICAgIFRpbWVSYW5nZSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IGJ1ZmZlcmVkIHJhbmdlc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5idWZmZXJlZF8gPSBmdW5jdGlvbiBidWZmZXJlZF8oKSB7XG4gICAgaWYgKCF0aGlzLnN1YnRpdGxlc1RyYWNrXyB8fCAhdGhpcy5zdWJ0aXRsZXNUcmFja18uY3Vlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB2aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlcygpO1xuICAgIH1cblxuICAgIHZhciBjdWVzID0gdGhpcy5zdWJ0aXRsZXNUcmFja18uY3VlcztcbiAgICB2YXIgc3RhcnQgPSBjdWVzWzBdLnN0YXJ0VGltZTtcbiAgICB2YXIgZW5kID0gY3Vlc1tjdWVzLmxlbmd0aCAtIDFdLnN0YXJ0VGltZTtcbiAgICByZXR1cm4gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMoW1tzdGFydCwgZW5kXV0pO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGFuZCBzZXRzIGluaXQgc2VnbWVudCBmb3IgdGhlIHByb3ZpZGVkIG1hcFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwXG4gICAqICAgICAgICBUaGUgbWFwIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGluaXQgc2VnbWVudCB0byBnZXQgb3Igc2V0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNldFxuICAgKiAgICAgICAgSWYgdHJ1ZSwgdGhlIGluaXQgc2VnbWVudCBmb3IgdGhlIHByb3ZpZGVkIG1hcCBzaG91bGQgYmUgc2F2ZWRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiAgICAgICAgIG1hcCBvYmplY3QgZm9yIGRlc2lyZWQgaW5pdCBzZWdtZW50XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluaXRTZWdtZW50Rm9yTWFwID0gZnVuY3Rpb24gaW5pdFNlZ21lbnRGb3JNYXAobWFwLCBzZXQpIHtcbiAgICBpZiAoc2V0ID09PSB2b2lkIDApIHtcbiAgICAgIHNldCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghbWFwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgaWQgPSBpbml0U2VnbWVudElkKG1hcCk7XG4gICAgdmFyIHN0b3JlZE1hcCA9IHRoaXMuaW5pdFNlZ21lbnRzX1tpZF07XG5cbiAgICBpZiAoc2V0ICYmICFzdG9yZWRNYXAgJiYgbWFwLmJ5dGVzKSB7XG4gICAgICAvLyBhcHBlbmQgV2ViVlRUIGxpbmUgdGVybWluYXRvcnMgdG8gdGhlIG1lZGlhIGluaXRpYWxpemF0aW9uIHNlZ21lbnQgaWYgaXQgZXhpc3RzXG4gICAgICAvLyB0byBmb2xsb3cgdGhlIFdlYlZUVCBzcGVjIChodHRwczovL3czYy5naXRodWIuaW8vd2VidnR0LyNmaWxlLXN0cnVjdHVyZSkgdGhhdFxuICAgICAgLy8gcmVxdWlyZXMgdHdvIG9yIG1vcmUgV2ViVlRUIGxpbmUgdGVybWluYXRvcnMgYmV0d2VlbiB0aGUgV2ViVlRUIGhlYWRlciBhbmQgdGhlXG4gICAgICAvLyByZXN0IG9mIHRoZSBmaWxlXG4gICAgICB2YXIgY29tYmluZWRCeXRlTGVuZ3RoID0gVlRUX0xJTkVfVEVSTUlOQVRPUlMuYnl0ZUxlbmd0aCArIG1hcC5ieXRlcy5ieXRlTGVuZ3RoO1xuICAgICAgdmFyIGNvbWJpbmVkU2VnbWVudCA9IG5ldyBVaW50OEFycmF5KGNvbWJpbmVkQnl0ZUxlbmd0aCk7XG4gICAgICBjb21iaW5lZFNlZ21lbnQuc2V0KG1hcC5ieXRlcyk7XG4gICAgICBjb21iaW5lZFNlZ21lbnQuc2V0KFZUVF9MSU5FX1RFUk1JTkFUT1JTLCBtYXAuYnl0ZXMuYnl0ZUxlbmd0aCk7XG4gICAgICB0aGlzLmluaXRTZWdtZW50c19baWRdID0gc3RvcmVkTWFwID0ge1xuICAgICAgICByZXNvbHZlZFVyaTogbWFwLnJlc29sdmVkVXJpLFxuICAgICAgICBieXRlcmFuZ2U6IG1hcC5ieXRlcmFuZ2UsXG4gICAgICAgIGJ5dGVzOiBjb21iaW5lZFNlZ21lbnRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0b3JlZE1hcCB8fCBtYXA7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhbGwgY29uZmlndXJhdGlvbiByZXF1aXJlZCBmb3IgbG9hZGluZyBpcyBwcmVzZW50LCBvdGhlcndpc2UgZmFsc2UuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFsbCBjb25maWd1cmF0aW9uIGlzIHJlYWR5IGZvciBsb2FkaW5nXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvdWxkQmVnaW5Mb2FkaW5nXyA9IGZ1bmN0aW9uIGNvdWxkQmVnaW5Mb2FkaW5nXygpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5bGlzdF8gJiYgdGhpcy5zdWJ0aXRsZXNUcmFja18gJiYgIXRoaXMucGF1c2VkKCk7XG4gIH1cbiAgLyoqXG4gICAqIE9uY2UgYWxsIHRoZSBzdGFydGluZyBwYXJhbWV0ZXJzIGhhdmUgYmVlbiBzcGVjaWZpZWQsIGJlZ2luXG4gICAqIG9wZXJhdGlvbi4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCBmcm9tIHRoZSBJTklUXG4gICAqIHN0YXRlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbml0XyA9IGZ1bmN0aW9uIGluaXRfKCkge1xuICAgIHRoaXMuc3RhdGUgPSAnUkVBRFknO1xuICAgIHRoaXMucmVzZXRFdmVyeXRoaW5nKCk7XG4gICAgcmV0dXJuIHRoaXMubW9uaXRvckJ1ZmZlcl8oKTtcbiAgfVxuICAvKipcbiAgICogU2V0IGEgc3VidGl0bGUgdHJhY2sgb24gdGhlIHNlZ21lbnQgbG9hZGVyIHRvIGFkZCBzdWJ0aXRsZXMgdG9cbiAgICpcbiAgICogQHBhcmFtIHtUZXh0VHJhY2s9fSB0cmFja1xuICAgKiAgICAgICAgVGhlIHRleHQgdHJhY2sgdG8gYWRkIGxvYWRlZCBzdWJ0aXRsZXMgdG9cbiAgICogQHJldHVybiB7VGV4dFRyYWNrfVxuICAgKiAgICAgICAgUmV0dXJucyB0aGUgc3VidGl0bGVzIHRyYWNrXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRyYWNrID0gZnVuY3Rpb24gdHJhY2soX3RyYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBfdHJhY2sgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdWJ0aXRsZXNUcmFja187XG4gICAgfVxuXG4gICAgdGhpcy5zdWJ0aXRsZXNUcmFja18gPSBfdHJhY2s7IC8vIGlmIHdlIHdlcmUgdW5wYXVzZWQgYnV0IHdhaXRpbmcgZm9yIGEgc291cmNlVXBkYXRlciwgc3RhcnRcbiAgICAvLyBidWZmZXJpbmcgbm93XG5cbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ0lOSVQnICYmIHRoaXMuY291bGRCZWdpbkxvYWRpbmdfKCkpIHtcbiAgICAgIHRoaXMuaW5pdF8oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdWJ0aXRsZXNUcmFja187XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhbnkgZGF0YSBpbiB0aGUgc291cmNlIGJ1ZmZlciBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmQgdGltZXNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gdGhlIHN0YXJ0IHRpbWUgb2YgdGhlIHJlZ2lvbiB0byByZW1vdmUgZnJvbSB0aGUgYnVmZmVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgLSB0aGUgZW5kIHRpbWUgb2YgdGhlIHJlZ2lvbiB0byByZW1vdmUgZnJvbSB0aGUgYnVmZmVyXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShzdGFydCwgZW5kKSB7XG4gICAgcmVtb3ZlQ3Vlc0Zyb21UcmFjayhzdGFydCwgZW5kLCB0aGlzLnN1YnRpdGxlc1RyYWNrXyk7XG4gIH1cbiAgLyoqXG4gICAqIGZpbGwgdGhlIGJ1ZmZlciB3aXRoIHNlZ2VtZW50cyB1bmxlc3MgdGhlIHNvdXJjZUJ1ZmZlcnMgYXJlXG4gICAqIGN1cnJlbnRseSB1cGRhdGluZ1xuICAgKlxuICAgKiBOb3RlOiB0aGlzIGZ1bmN0aW9uIHNob3VsZCBvbmx5IGV2ZXIgYmUgY2FsbGVkIGJ5IG1vbml0b3JCdWZmZXJfXG4gICAqIGFuZCBuZXZlciBkaXJlY3RseVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5maWxsQnVmZmVyXyA9IGZ1bmN0aW9uIGZpbGxCdWZmZXJfKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLnN5bmNQb2ludF8pIHtcbiAgICAgIHRoaXMuc3luY1BvaW50XyA9IHRoaXMuc3luY0NvbnRyb2xsZXJfLmdldFN5bmNQb2ludCh0aGlzLnBsYXlsaXN0XywgdGhpcy5kdXJhdGlvbl8oKSwgdGhpcy5jdXJyZW50VGltZWxpbmVfLCB0aGlzLmN1cnJlbnRUaW1lXygpKTtcbiAgICB9IC8vIHNlZSBpZiB3ZSBuZWVkIHRvIGJlZ2luIGxvYWRpbmcgaW1tZWRpYXRlbHlcblxuXG4gICAgdmFyIHNlZ21lbnRJbmZvID0gdGhpcy5jaGVja0J1ZmZlcl8odGhpcy5idWZmZXJlZF8oKSwgdGhpcy5wbGF5bGlzdF8sIHRoaXMubWVkaWFJbmRleCwgdGhpcy5oYXNQbGF5ZWRfKCksIHRoaXMuY3VycmVudFRpbWVfKCksIHRoaXMuc3luY1BvaW50Xyk7XG4gICAgc2VnbWVudEluZm8gPSB0aGlzLnNraXBFbXB0eVNlZ21lbnRzXyhzZWdtZW50SW5mbyk7XG5cbiAgICBpZiAoIXNlZ21lbnRJbmZvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3luY0NvbnRyb2xsZXJfLnRpbWVzdGFtcE9mZnNldEZvclRpbWVsaW5lKHNlZ21lbnRJbmZvLnRpbWVsaW5lKSA9PT0gbnVsbCkge1xuICAgICAgLy8gV2UgZG9uJ3QgaGF2ZSB0aGUgdGltZXN0YW1wIG9mZnNldCB0aGF0IHdlIG5lZWQgdG8gc3luYyBzdWJ0aXRsZXMuXG4gICAgICAvLyBSZXJ1biBvbiBhIHRpbWVzdGFtcCBvZmZzZXQgb3IgdXNlciBpbnRlcmFjdGlvbi5cbiAgICAgIHZhciBjaGVja1RpbWVzdGFtcE9mZnNldCA9IGZ1bmN0aW9uIGNoZWNrVGltZXN0YW1wT2Zmc2V0KCkge1xuICAgICAgICBfdGhpczIuc3RhdGUgPSAnUkVBRFknO1xuXG4gICAgICAgIGlmICghX3RoaXMyLnBhdXNlZCgpKSB7XG4gICAgICAgICAgLy8gaWYgbm90IHBhdXNlZCwgcXVldWUgYSBidWZmZXIgY2hlY2sgYXMgc29vbiBhcyBwb3NzaWJsZVxuICAgICAgICAgIF90aGlzMi5tb25pdG9yQnVmZmVyXygpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnN5bmNDb250cm9sbGVyXy5vbmUoJ3RpbWVzdGFtcG9mZnNldCcsIGNoZWNrVGltZXN0YW1wT2Zmc2V0KTtcbiAgICAgIHRoaXMuc3RhdGUgPSAnV0FJVElOR19PTl9USU1FTElORSc7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkU2VnbWVudF8oc2VnbWVudEluZm8pO1xuICB9XG4gIC8qKlxuICAgKiBQcmV2ZW50cyB0aGUgc2VnbWVudCBsb2FkZXIgZnJvbSByZXF1ZXN0aW5nIHNlZ21lbnRzIHdlIGtub3cgY29udGFpbiBubyBzdWJ0aXRsZXNcbiAgICogYnkgd2Fsa2luZyBmb3J3YXJkIHVudGlsIHdlIGZpbmQgdGhlIG5leHQgc2VnbWVudCB0aGF0IHdlIGRvbid0IGtub3cgd2hldGhlciBpdCBpc1xuICAgKiBlbXB0eSBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZWdtZW50SW5mb1xuICAgKiAgICAgICAgYSBzZWdtZW50IGluZm8gb2JqZWN0IHRoYXQgZGVzY3JpYmVzIHRoZSBjdXJyZW50IHNlZ21lbnRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiAgICAgICAgIGEgc2VnbWVudCBpbmZvIG9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGUgY3VycmVudCBzZWdtZW50XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNraXBFbXB0eVNlZ21lbnRzXyA9IGZ1bmN0aW9uIHNraXBFbXB0eVNlZ21lbnRzXyhzZWdtZW50SW5mbykge1xuICAgIHdoaWxlIChzZWdtZW50SW5mbyAmJiBzZWdtZW50SW5mby5zZWdtZW50LmVtcHR5KSB7XG4gICAgICBzZWdtZW50SW5mbyA9IHRoaXMuZ2VuZXJhdGVTZWdtZW50SW5mb18oc2VnbWVudEluZm8ucGxheWxpc3QsIHNlZ21lbnRJbmZvLm1lZGlhSW5kZXggKyAxLCBzZWdtZW50SW5mby5zdGFydE9mU2VnbWVudCArIHNlZ21lbnRJbmZvLmR1cmF0aW9uLCBzZWdtZW50SW5mby5pc1N5bmNSZXF1ZXN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VnbWVudEluZm87XG4gIH07XG5cbiAgX3Byb3RvLnN0b3BGb3JFcnJvciA9IGZ1bmN0aW9uIHN0b3BGb3JFcnJvcihlcnJvcikge1xuICAgIHRoaXMuZXJyb3IoZXJyb3IpO1xuICAgIHRoaXMuc3RhdGUgPSAnUkVBRFknO1xuICAgIHRoaXMucGF1c2UoKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2Vycm9yJyk7XG4gIH1cbiAgLyoqXG4gICAqIGFwcGVuZCBhIGRlY3J5cHRlZCBzZWdlbWVudCB0byB0aGUgU291cmNlQnVmZmVyIHRocm91Z2ggYSBTb3VyY2VVcGRhdGVyXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNlZ21lbnRSZXF1ZXN0RmluaXNoZWRfID0gZnVuY3Rpb24gc2VnbWVudFJlcXVlc3RGaW5pc2hlZF8oZXJyb3IsIHNpbXBsZVNlZ21lbnQsIHJlc3VsdCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLnN1YnRpdGxlc1RyYWNrXykge1xuICAgICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zYXZlVHJhbnNmZXJTdGF0c18oc2ltcGxlU2VnbWVudC5zdGF0cyk7IC8vIHRoZSByZXF1ZXN0IHdhcyBhYm9ydGVkXG5cbiAgICBpZiAoIXRoaXMucGVuZGluZ1NlZ21lbnRfKSB7XG4gICAgICB0aGlzLnN0YXRlID0gJ1JFQURZJztcbiAgICAgIHRoaXMubWVkaWFSZXF1ZXN0c0Fib3J0ZWQgKz0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvci5jb2RlID09PSBSRVFVRVNUX0VSUk9SUy5USU1FT1VUKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlVGltZW91dF8oKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFJFUVVFU1RfRVJST1JTLkFCT1JURUQpIHtcbiAgICAgICAgdGhpcy5tZWRpYVJlcXVlc3RzQWJvcnRlZCArPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tZWRpYVJlcXVlc3RzRXJyb3JlZCArPSAxO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0b3BGb3JFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBhbHRob3VnaCB0aGUgVlRUIHNlZ21lbnQgbG9hZGVyIGJhbmR3aWR0aCBpc24ndCByZWFsbHkgdXNlZCwgaXQncyBnb29kIHRvXG4gICAgLy8gbWFpbnRhaW4gZnVuY3Rpb25hbGl0eSBiZXR3ZWVuIHNlZ21lbnQgbG9hZGVyc1xuXG5cbiAgICB0aGlzLnNhdmVCYW5kd2lkdGhSZWxhdGVkU3RhdHNfKHNpbXBsZVNlZ21lbnQuc3RhdHMpO1xuICAgIHRoaXMuc3RhdGUgPSAnQVBQRU5ESU5HJzsgLy8gdXNlZCBmb3IgdGVzdHNcblxuICAgIHRoaXMudHJpZ2dlcignYXBwZW5kaW5nJyk7XG4gICAgdmFyIHNlZ21lbnRJbmZvID0gdGhpcy5wZW5kaW5nU2VnbWVudF87XG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50SW5mby5zZWdtZW50O1xuXG4gICAgaWYgKHNlZ21lbnQubWFwKSB7XG4gICAgICBzZWdtZW50Lm1hcC5ieXRlcyA9IHNpbXBsZVNlZ21lbnQubWFwLmJ5dGVzO1xuICAgIH1cblxuICAgIHNlZ21lbnRJbmZvLmJ5dGVzID0gc2ltcGxlU2VnbWVudC5ieXRlczsgLy8gTWFrZSBzdXJlIHRoYXQgdnR0anMgaGFzIGxvYWRlZCwgb3RoZXJ3aXNlLCB3YWl0IHRpbGwgaXQgZmluaXNoZWQgbG9hZGluZ1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3ckMS5XZWJWVFQgIT09ICdmdW5jdGlvbicgJiYgdGhpcy5zdWJ0aXRsZXNUcmFja18gJiYgdGhpcy5zdWJ0aXRsZXNUcmFja18udGVjaF8pIHtcbiAgICAgIHZhciBsb2FkSGFuZGxlcjtcblxuICAgICAgdmFyIGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIGVycm9ySGFuZGxlcigpIHtcbiAgICAgICAgX3RoaXMzLnN1YnRpdGxlc1RyYWNrXy50ZWNoXy5vZmYoJ3Z0dGpzbG9hZGVkJywgbG9hZEhhbmRsZXIpO1xuXG4gICAgICAgIF90aGlzMy5zdG9wRm9yRXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBsb2FkaW5nIHZ0dC5qcydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfTtcblxuICAgICAgbG9hZEhhbmRsZXIgPSBmdW5jdGlvbiBsb2FkSGFuZGxlcigpIHtcbiAgICAgICAgX3RoaXMzLnN1YnRpdGxlc1RyYWNrXy50ZWNoXy5vZmYoJ3Z0dGpzZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuXG4gICAgICAgIF90aGlzMy5zZWdtZW50UmVxdWVzdEZpbmlzaGVkXyhlcnJvciwgc2ltcGxlU2VnbWVudCwgcmVzdWx0KTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc3RhdGUgPSAnV0FJVElOR19PTl9WVFRKUyc7XG4gICAgICB0aGlzLnN1YnRpdGxlc1RyYWNrXy50ZWNoXy5vbmUoJ3Z0dGpzbG9hZGVkJywgbG9hZEhhbmRsZXIpO1xuICAgICAgdGhpcy5zdWJ0aXRsZXNUcmFja18udGVjaF8ub25lKCd2dHRqc2Vycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWdtZW50LnJlcXVlc3RlZCA9IHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5wYXJzZVZUVEN1ZXNfKHNlZ21lbnRJbmZvKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLnN0b3BGb3JFcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVUaW1lTWFwcGluZ18oc2VnbWVudEluZm8sIHRoaXMuc3luY0NvbnRyb2xsZXJfLnRpbWVsaW5lc1tzZWdtZW50SW5mby50aW1lbGluZV0sIHRoaXMucGxheWxpc3RfKTtcblxuICAgIGlmIChzZWdtZW50SW5mby5jdWVzLmxlbmd0aCkge1xuICAgICAgc2VnbWVudEluZm8udGltaW5nSW5mbyA9IHtcbiAgICAgICAgc3RhcnQ6IHNlZ21lbnRJbmZvLmN1ZXNbMF0uc3RhcnRUaW1lLFxuICAgICAgICBlbmQ6IHNlZ21lbnRJbmZvLmN1ZXNbc2VnbWVudEluZm8uY3Vlcy5sZW5ndGggLSAxXS5lbmRUaW1lXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWdtZW50SW5mby50aW1pbmdJbmZvID0ge1xuICAgICAgICBzdGFydDogc2VnbWVudEluZm8uc3RhcnRPZlNlZ21lbnQsXG4gICAgICAgIGVuZDogc2VnbWVudEluZm8uc3RhcnRPZlNlZ21lbnQgKyBzZWdtZW50SW5mby5kdXJhdGlvblxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudEluZm8uaXNTeW5jUmVxdWVzdCkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdzeW5jaW5mb3VwZGF0ZScpO1xuICAgICAgdGhpcy5wZW5kaW5nU2VnbWVudF8gPSBudWxsO1xuICAgICAgdGhpcy5zdGF0ZSA9ICdSRUFEWSc7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VnbWVudEluZm8uYnl0ZUxlbmd0aCA9IHNlZ21lbnRJbmZvLmJ5dGVzLmJ5dGVMZW5ndGg7XG4gICAgdGhpcy5tZWRpYVNlY29uZHNMb2FkZWQgKz0gc2VnbWVudC5kdXJhdGlvbjtcbiAgICBzZWdtZW50SW5mby5jdWVzLmZvckVhY2goZnVuY3Rpb24gKGN1ZSkge1xuICAgICAgLy8gcmVtb3ZlIGFueSBvdmVybGFwcGluZyBjdWVzIHRvIHByZXZlbnQgZG91YmxpbmdcbiAgICAgIF90aGlzMy5yZW1vdmUoY3VlLnN0YXJ0VGltZSwgY3VlLmVuZFRpbWUpO1xuXG4gICAgICBfdGhpczMuc3VidGl0bGVzVHJhY2tfLmFkZEN1ZShfdGhpczMuZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzXyA/IG5ldyB3aW5kb3ckMS5WVFRDdWUoY3VlLnN0YXJ0VGltZSwgY3VlLmVuZFRpbWUsIGN1ZS50ZXh0KSA6IGN1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy5oYW5kbGVBcHBlbmRzRG9uZV8oKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlRGF0YV8gPSBmdW5jdGlvbiBoYW5kbGVEYXRhXygpIHsvLyBub29wIGFzIHdlIHNob3VsZG4ndCBiZSBnZXR0aW5nIHZpZGVvL2F1ZGlvIGRhdGEgY2FwdGlvbnNcbiAgICAvLyB0aGF0IHdlIGRvIG5vdCBzdXBwb3J0IGhlcmUuXG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVRpbWluZ0luZm9FbmRfID0gZnVuY3Rpb24gdXBkYXRlVGltaW5nSW5mb0VuZF8oKSB7fSAvLyBub29wXG5cbiAgLyoqXG4gICAqIFVzZXMgdGhlIFdlYlZUVCBwYXJzZXIgdG8gcGFyc2UgdGhlIHNlZ21lbnQgcmVzcG9uc2VcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNlZ21lbnRJbmZvXG4gICAqICAgICAgICBhIHNlZ21lbnQgaW5mbyBvYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlIGN1cnJlbnQgc2VnbWVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVZUVEN1ZXNfID0gZnVuY3Rpb24gcGFyc2VWVFRDdWVzXyhzZWdtZW50SW5mbykge1xuICAgIHZhciBkZWNvZGVyO1xuICAgIHZhciBkZWNvZGVCeXRlc1RvU3RyaW5nID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyQxLlRleHREZWNvZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkZWNvZGVyID0gbmV3IHdpbmRvdyQxLlRleHREZWNvZGVyKCd1dGY4Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlY29kZXIgPSB3aW5kb3ckMS5XZWJWVFQuU3RyaW5nRGVjb2RlcigpO1xuICAgICAgZGVjb2RlQnl0ZXNUb1N0cmluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlciA9IG5ldyB3aW5kb3ckMS5XZWJWVFQuUGFyc2VyKHdpbmRvdyQxLCB3aW5kb3ckMS52dHRqcywgZGVjb2Rlcik7XG4gICAgc2VnbWVudEluZm8uY3VlcyA9IFtdO1xuICAgIHNlZ21lbnRJbmZvLnRpbWVzdGFtcG1hcCA9IHtcbiAgICAgIE1QRUdUUzogMCxcbiAgICAgIExPQ0FMOiAwXG4gICAgfTtcbiAgICBwYXJzZXIub25jdWUgPSBzZWdtZW50SW5mby5jdWVzLnB1c2guYmluZChzZWdtZW50SW5mby5jdWVzKTtcblxuICAgIHBhcnNlci5vbnRpbWVzdGFtcG1hcCA9IGZ1bmN0aW9uIChtYXApIHtcbiAgICAgIHNlZ21lbnRJbmZvLnRpbWVzdGFtcG1hcCA9IG1hcDtcbiAgICB9O1xuXG4gICAgcGFyc2VyLm9ucGFyc2luZ2Vycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ0Vycm9yIGVuY291bnRlcmVkIHdoZW4gcGFyc2luZyBjdWVzOiAnICsgZXJyb3IubWVzc2FnZSk7XG4gICAgfTtcblxuICAgIGlmIChzZWdtZW50SW5mby5zZWdtZW50Lm1hcCkge1xuICAgICAgdmFyIG1hcERhdGEgPSBzZWdtZW50SW5mby5zZWdtZW50Lm1hcC5ieXRlcztcblxuICAgICAgaWYgKGRlY29kZUJ5dGVzVG9TdHJpbmcpIHtcbiAgICAgICAgbWFwRGF0YSA9IHVpbnQ4VG9VdGY4KG1hcERhdGEpO1xuICAgICAgfVxuXG4gICAgICBwYXJzZXIucGFyc2UobWFwRGF0YSk7XG4gICAgfVxuXG4gICAgdmFyIHNlZ21lbnREYXRhID0gc2VnbWVudEluZm8uYnl0ZXM7XG5cbiAgICBpZiAoZGVjb2RlQnl0ZXNUb1N0cmluZykge1xuICAgICAgc2VnbWVudERhdGEgPSB1aW50OFRvVXRmOChzZWdtZW50RGF0YSk7XG4gICAgfVxuXG4gICAgcGFyc2VyLnBhcnNlKHNlZ21lbnREYXRhKTtcbiAgICBwYXJzZXIuZmx1c2goKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgc3RhcnQgYW5kIGVuZCB0aW1lcyBvZiBhbnkgY3VlcyBwYXJzZWQgYnkgdGhlIFdlYlZUVCBwYXJzZXIgdXNpbmdcbiAgICogdGhlIGluZm9ybWF0aW9uIHBhcnNlZCBmcm9tIHRoZSBYLVRJTUVTVEFNUC1NQVAgaGVhZGVyIGFuZCBhIFRTIHRvIG1lZGlhIHRpbWUgbWFwcGluZ1xuICAgKiBmcm9tIHRoZSBTeW5jQ29udHJvbGxlclxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2VnbWVudEluZm9cbiAgICogICAgICAgIGEgc2VnbWVudCBpbmZvIG9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGUgY3VycmVudCBzZWdtZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXBwaW5nT2JqXG4gICAqICAgICAgICBvYmplY3QgY29udGFpbmluZyBhIG1hcHBpbmcgZnJvbSBUUyB0byBtZWRpYSB0aW1lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5bGlzdFxuICAgKiAgICAgICAgdGhlIHBsYXlsaXN0IG9iamVjdCBjb250YWluaW5nIHRoZSBzZWdtZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZVRpbWVNYXBwaW5nXyA9IGZ1bmN0aW9uIHVwZGF0ZVRpbWVNYXBwaW5nXyhzZWdtZW50SW5mbywgbWFwcGluZ09iaiwgcGxheWxpc3QpIHtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRJbmZvLnNlZ21lbnQ7XG5cbiAgICBpZiAoIW1hcHBpbmdPYmopIHtcbiAgICAgIC8vIElmIHRoZSBzeW5jIGNvbnRyb2xsZXIgZG9lcyBub3QgaGF2ZSBhIG1hcHBpbmcgb2YgVFMgdG8gTWVkaWEgVGltZSBmb3IgdGhlXG4gICAgICAvLyB0aW1lbGluZSwgdGhlbiB3ZSBkb24ndCBoYXZlIGVub3VnaCBpbmZvcm1hdGlvbiB0byB1cGRhdGUgdGhlIGN1ZVxuICAgICAgLy8gc3RhcnQvZW5kIHRpbWVzXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFzZWdtZW50SW5mby5jdWVzLmxlbmd0aCkge1xuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGN1ZXMsIHdlIGFsc28gZG8gbm90IGhhdmUgZW5vdWdoIGluZm9ybWF0aW9uIHRvIGZpZ3VyZSBvdXRcbiAgICAgIC8vIHNlZ21lbnQgdGltaW5nLiBNYXJrIHRoYXQgdGhlIHNlZ21lbnQgY29udGFpbnMgbm8gY3VlcyBzbyB3ZSBkb24ndCByZS1yZXF1ZXN0XG4gICAgICAvLyBhbiBlbXB0eSBzZWdtZW50LlxuICAgICAgc2VnbWVudC5lbXB0eSA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRpbWVzdGFtcG1hcCA9IHNlZ21lbnRJbmZvLnRpbWVzdGFtcG1hcDtcbiAgICB2YXIgZGlmZiA9IHRpbWVzdGFtcG1hcC5NUEVHVFMgLyBPTkVfU0VDT05EX0lOX1RTIC0gdGltZXN0YW1wbWFwLkxPQ0FMICsgbWFwcGluZ09iai5tYXBwaW5nO1xuICAgIHNlZ21lbnRJbmZvLmN1ZXMuZm9yRWFjaChmdW5jdGlvbiAoY3VlKSB7XG4gICAgICAvLyBGaXJzdCBjb252ZXJ0IGN1ZSB0aW1lIHRvIFRTIHRpbWUgdXNpbmcgdGhlIHRpbWVzdGFtcC1tYXAgcHJvdmlkZWQgd2l0aGluIHRoZSB2dHRcbiAgICAgIGN1ZS5zdGFydFRpbWUgKz0gZGlmZjtcbiAgICAgIGN1ZS5lbmRUaW1lICs9IGRpZmY7XG4gICAgfSk7XG5cbiAgICBpZiAoIXBsYXlsaXN0LnN5bmNJbmZvKSB7XG4gICAgICB2YXIgZmlyc3RTdGFydCA9IHNlZ21lbnRJbmZvLmN1ZXNbMF0uc3RhcnRUaW1lO1xuICAgICAgdmFyIGxhc3RTdGFydCA9IHNlZ21lbnRJbmZvLmN1ZXNbc2VnbWVudEluZm8uY3Vlcy5sZW5ndGggLSAxXS5zdGFydFRpbWU7XG4gICAgICBwbGF5bGlzdC5zeW5jSW5mbyA9IHtcbiAgICAgICAgbWVkaWFTZXF1ZW5jZTogcGxheWxpc3QubWVkaWFTZXF1ZW5jZSArIHNlZ21lbnRJbmZvLm1lZGlhSW5kZXgsXG4gICAgICAgIHRpbWU6IE1hdGgubWluKGZpcnN0U3RhcnQsIGxhc3RTdGFydCAtIHNlZ21lbnQuZHVyYXRpb24pXG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVlRUU2VnbWVudExvYWRlcjtcbn0oU2VnbWVudExvYWRlcik7XG4vKipcbiAqIEBmaWxlIGFkLWN1ZS10YWdzLmpzXG4gKi9cblxuLyoqXG4gKiBTZWFyY2hlcyBmb3IgYW4gYWQgY3VlIHRoYXQgb3ZlcmxhcHMgd2l0aCB0aGUgZ2l2ZW4gbWVkaWFUaW1lXG4gKi9cblxuXG52YXIgZmluZEFkQ3VlID0gZnVuY3Rpb24gZmluZEFkQ3VlKHRyYWNrLCBtZWRpYVRpbWUpIHtcbiAgdmFyIGN1ZXMgPSB0cmFjay5jdWVzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY3Vlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjdWUgPSBjdWVzW2ldO1xuXG4gICAgaWYgKG1lZGlhVGltZSA+PSBjdWUuYWRTdGFydFRpbWUgJiYgbWVkaWFUaW1lIDw9IGN1ZS5hZEVuZFRpbWUpIHtcbiAgICAgIHJldHVybiBjdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgdXBkYXRlQWRDdWVzID0gZnVuY3Rpb24gdXBkYXRlQWRDdWVzKG1lZGlhLCB0cmFjaywgb2Zmc2V0KSB7XG4gIGlmIChvZmZzZXQgPT09IHZvaWQgMCkge1xuICAgIG9mZnNldCA9IDA7XG4gIH1cblxuICBpZiAoIW1lZGlhLnNlZ21lbnRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1lZGlhVGltZSA9IG9mZnNldDtcbiAgdmFyIGN1ZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1lZGlhLnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNlZ21lbnQgPSBtZWRpYS5zZWdtZW50c1tpXTtcblxuICAgIGlmICghY3VlKSB7XG4gICAgICAvLyBTaW5jZSB0aGUgY3VlcyB3aWxsIHNwYW4gZm9yIGF0IGxlYXN0IHRoZSBzZWdtZW50IGR1cmF0aW9uLCBhZGRpbmcgYSBmdWRnZVxuICAgICAgLy8gZmFjdG9yIG9mIGhhbGYgc2VnbWVudCBkdXJhdGlvbiB3aWxsIHByZXZlbnQgZHVwbGljYXRlIGN1ZXMgZnJvbSBiZWluZ1xuICAgICAgLy8gY3JlYXRlZCB3aGVuIHRpbWluZyBpbmZvIGlzIG5vdCBleGFjdCAoZS5nLiBjdWUgc3RhcnQgdGltZSBpbml0aWFsaXplZFxuICAgICAgLy8gYXQgMTAuMDA2Njc3LCBidXQgbmV4dCBjYWxsIG1lZGlhVGltZSBpcyAxMC4wMDMzMzIgKVxuICAgICAgY3VlID0gZmluZEFkQ3VlKHRyYWNrLCBtZWRpYVRpbWUgKyBzZWdtZW50LmR1cmF0aW9uIC8gMik7XG4gICAgfVxuXG4gICAgaWYgKGN1ZSkge1xuICAgICAgaWYgKCdjdWVJbicgaW4gc2VnbWVudCkge1xuICAgICAgICAvLyBGb3VuZCBhIENVRS1JTiBzbyBlbmQgdGhlIGN1ZVxuICAgICAgICBjdWUuZW5kVGltZSA9IG1lZGlhVGltZTtcbiAgICAgICAgY3VlLmFkRW5kVGltZSA9IG1lZGlhVGltZTtcbiAgICAgICAgbWVkaWFUaW1lICs9IHNlZ21lbnQuZHVyYXRpb247XG4gICAgICAgIGN1ZSA9IG51bGw7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFUaW1lIDwgY3VlLmVuZFRpbWUpIHtcbiAgICAgICAgLy8gQWxyZWFkeSBwcm9jZXNzZWQgdGhpcyBtZWRpYVRpbWUgZm9yIHRoaXMgY3VlXG4gICAgICAgIG1lZGlhVGltZSArPSBzZWdtZW50LmR1cmF0aW9uO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gb3RoZXJ3aXNlIGV4dGVuZCBjdWUgdW50aWwgYSBDVUUtSU4gaXMgZm91bmRcblxuXG4gICAgICBjdWUuZW5kVGltZSArPSBzZWdtZW50LmR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoJ2N1ZU91dCcgaW4gc2VnbWVudCkge1xuICAgICAgICBjdWUgPSBuZXcgd2luZG93JDEuVlRUQ3VlKG1lZGlhVGltZSwgbWVkaWFUaW1lICsgc2VnbWVudC5kdXJhdGlvbiwgc2VnbWVudC5jdWVPdXQpO1xuICAgICAgICBjdWUuYWRTdGFydFRpbWUgPSBtZWRpYVRpbWU7IC8vIEFzc3VtZXMgdGFnIGZvcm1hdCB0byBiZVxuICAgICAgICAvLyAjRVhULVgtQ1VFLU9VVDozMFxuXG4gICAgICAgIGN1ZS5hZEVuZFRpbWUgPSBtZWRpYVRpbWUgKyBwYXJzZUZsb2F0KHNlZ21lbnQuY3VlT3V0KTtcbiAgICAgICAgdHJhY2suYWRkQ3VlKGN1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgnY3VlT3V0Q29udCcgaW4gc2VnbWVudCkge1xuICAgICAgICAvLyBFbnRlcmVkIGludG8gdGhlIG1pZGRsZSBvZiBhbiBhZCBjdWVcbiAgICAgICAgLy8gQXNzdW1lcyB0YWcgZm9ybWF0ZSB0byBiZVxuICAgICAgICAvLyAjRVhULVgtQ1VFLU9VVC1DT05UOjEwLzMwXG4gICAgICAgIHZhciBfc2VnbWVudCRjdWVPdXRDb250JHMgPSBzZWdtZW50LmN1ZU91dENvbnQuc3BsaXQoJy8nKS5tYXAocGFyc2VGbG9hdCksXG4gICAgICAgICAgICBhZE9mZnNldCA9IF9zZWdtZW50JGN1ZU91dENvbnQkc1swXSxcbiAgICAgICAgICAgIGFkVG90YWwgPSBfc2VnbWVudCRjdWVPdXRDb250JHNbMV07XG5cbiAgICAgICAgY3VlID0gbmV3IHdpbmRvdyQxLlZUVEN1ZShtZWRpYVRpbWUsIG1lZGlhVGltZSArIHNlZ21lbnQuZHVyYXRpb24sICcnKTtcbiAgICAgICAgY3VlLmFkU3RhcnRUaW1lID0gbWVkaWFUaW1lIC0gYWRPZmZzZXQ7XG4gICAgICAgIGN1ZS5hZEVuZFRpbWUgPSBjdWUuYWRTdGFydFRpbWUgKyBhZFRvdGFsO1xuICAgICAgICB0cmFjay5hZGRDdWUoY3VlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZWRpYVRpbWUgKz0gc2VnbWVudC5kdXJhdGlvbjtcbiAgfVxufTtcblxudmFyIHN5bmNQb2ludFN0cmF0ZWdpZXMgPSBbLy8gU3RhdGVneSBcIlZPRFwiOiBIYW5kbGUgdGhlIFZPRC1jYXNlIHdoZXJlIHRoZSBzeW5jLXBvaW50IGlzICphbHdheXMqXG4vLyAgICAgICAgICAgICAgICB0aGUgZXF1aXZhbGVuY2UgZGlzcGxheS10aW1lIDAgPT09IHNlZ21lbnQtaW5kZXggMFxue1xuICBuYW1lOiAnVk9EJyxcbiAgcnVuOiBmdW5jdGlvbiBydW4oc3luY0NvbnRyb2xsZXIsIHBsYXlsaXN0LCBkdXJhdGlvbiwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgIGlmIChkdXJhdGlvbiAhPT0gSW5maW5pdHkpIHtcbiAgICAgIHZhciBzeW5jUG9pbnQgPSB7XG4gICAgICAgIHRpbWU6IDAsXG4gICAgICAgIHNlZ21lbnRJbmRleDogMFxuICAgICAgfTtcbiAgICAgIHJldHVybiBzeW5jUG9pbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0sIC8vIFN0YXRlZ3kgXCJQcm9ncmFtRGF0ZVRpbWVcIjogV2UgaGF2ZSBhIHByb2dyYW0tZGF0ZS10aW1lIHRhZyBpbiB0aGlzIHBsYXlsaXN0XG57XG4gIG5hbWU6ICdQcm9ncmFtRGF0ZVRpbWUnLFxuICBydW46IGZ1bmN0aW9uIHJ1bihzeW5jQ29udHJvbGxlciwgcGxheWxpc3QsIGR1cmF0aW9uLCBjdXJyZW50VGltZWxpbmUsIGN1cnJlbnRUaW1lKSB7XG4gICAgaWYgKCFzeW5jQ29udHJvbGxlci5kYXRldGltZVRvRGlzcGxheVRpbWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzZWdtZW50cyA9IHBsYXlsaXN0LnNlZ21lbnRzIHx8IFtdO1xuICAgIHZhciBzeW5jUG9pbnQgPSBudWxsO1xuICAgIHZhciBsYXN0RGlzdGFuY2UgPSBudWxsO1xuICAgIGN1cnJlbnRUaW1lID0gY3VycmVudFRpbWUgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG5cbiAgICAgIGlmIChzZWdtZW50LmRhdGVUaW1lT2JqZWN0KSB7XG4gICAgICAgIHZhciBzZWdtZW50VGltZSA9IHNlZ21lbnQuZGF0ZVRpbWVPYmplY3QuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgICAgdmFyIHNlZ21lbnRTdGFydCA9IHNlZ21lbnRUaW1lICsgc3luY0NvbnRyb2xsZXIuZGF0ZXRpbWVUb0Rpc3BsYXlUaW1lO1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLmFicyhjdXJyZW50VGltZSAtIHNlZ21lbnRTdGFydCk7IC8vIE9uY2UgdGhlIGRpc3RhbmNlIGJlZ2lucyB0byBpbmNyZWFzZSwgb3IgaWYgZGlzdGFuY2UgaXMgMCwgd2UgaGF2ZSBwYXNzZWRcbiAgICAgICAgLy8gY3VycmVudFRpbWUgYW5kIGNhbiBzdG9wIGxvb2tpbmcgZm9yIGJldHRlciBjYW5kaWRhdGVzXG5cbiAgICAgICAgaWYgKGxhc3REaXN0YW5jZSAhPT0gbnVsbCAmJiAoZGlzdGFuY2UgPT09IDAgfHwgbGFzdERpc3RhbmNlIDwgZGlzdGFuY2UpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgc3luY1BvaW50ID0ge1xuICAgICAgICAgIHRpbWU6IHNlZ21lbnRTdGFydCxcbiAgICAgICAgICBzZWdtZW50SW5kZXg6IGlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3luY1BvaW50O1xuICB9XG59LCAvLyBTdGF0ZWd5IFwiU2VnbWVudFwiOiBXZSBoYXZlIGEga25vd24gdGltZSBtYXBwaW5nIGZvciBhIHRpbWVsaW5lIGFuZCBhXG4vLyAgICAgICAgICAgICAgICAgICAgc2VnbWVudCBpbiB0aGUgY3VycmVudCB0aW1lbGluZSB3aXRoIHRpbWluZyBkYXRhXG57XG4gIG5hbWU6ICdTZWdtZW50JyxcbiAgcnVuOiBmdW5jdGlvbiBydW4oc3luY0NvbnRyb2xsZXIsIHBsYXlsaXN0LCBkdXJhdGlvbiwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgIHZhciBzZWdtZW50cyA9IHBsYXlsaXN0LnNlZ21lbnRzIHx8IFtdO1xuICAgIHZhciBzeW5jUG9pbnQgPSBudWxsO1xuICAgIHZhciBsYXN0RGlzdGFuY2UgPSBudWxsO1xuICAgIGN1cnJlbnRUaW1lID0gY3VycmVudFRpbWUgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG5cbiAgICAgIGlmIChzZWdtZW50LnRpbWVsaW5lID09PSBjdXJyZW50VGltZWxpbmUgJiYgdHlwZW9mIHNlZ21lbnQuc3RhcnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKGN1cnJlbnRUaW1lIC0gc2VnbWVudC5zdGFydCk7IC8vIE9uY2UgdGhlIGRpc3RhbmNlIGJlZ2lucyB0byBpbmNyZWFzZSwgd2UgaGF2ZSBwYXNzZWRcbiAgICAgICAgLy8gY3VycmVudFRpbWUgYW5kIGNhbiBzdG9wIGxvb2tpbmcgZm9yIGJldHRlciBjYW5kaWRhdGVzXG5cbiAgICAgICAgaWYgKGxhc3REaXN0YW5jZSAhPT0gbnVsbCAmJiBsYXN0RGlzdGFuY2UgPCBkaXN0YW5jZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzeW5jUG9pbnQgfHwgbGFzdERpc3RhbmNlID09PSBudWxsIHx8IGxhc3REaXN0YW5jZSA+PSBkaXN0YW5jZSkge1xuICAgICAgICAgIGxhc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgIHN5bmNQb2ludCA9IHtcbiAgICAgICAgICAgIHRpbWU6IHNlZ21lbnQuc3RhcnQsXG4gICAgICAgICAgICBzZWdtZW50SW5kZXg6IGlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN5bmNQb2ludDtcbiAgfVxufSwgLy8gU3RhdGVneSBcIkRpc2NvbnRpbnVpdHlcIjogV2UgaGF2ZSBhIGRpc2NvbnRpbnVpdHkgd2l0aCBhIGtub3duXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheS10aW1lXG57XG4gIG5hbWU6ICdEaXNjb250aW51aXR5JyxcbiAgcnVuOiBmdW5jdGlvbiBydW4oc3luY0NvbnRyb2xsZXIsIHBsYXlsaXN0LCBkdXJhdGlvbiwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgIHZhciBzeW5jUG9pbnQgPSBudWxsO1xuICAgIGN1cnJlbnRUaW1lID0gY3VycmVudFRpbWUgfHwgMDtcblxuICAgIGlmIChwbGF5bGlzdC5kaXNjb250aW51aXR5U3RhcnRzICYmIHBsYXlsaXN0LmRpc2NvbnRpbnVpdHlTdGFydHMubGVuZ3RoKSB7XG4gICAgICB2YXIgbGFzdERpc3RhbmNlID0gbnVsbDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGF5bGlzdC5kaXNjb250aW51aXR5U3RhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzZWdtZW50SW5kZXggPSBwbGF5bGlzdC5kaXNjb250aW51aXR5U3RhcnRzW2ldO1xuICAgICAgICB2YXIgZGlzY29udGludWl0eSA9IHBsYXlsaXN0LmRpc2NvbnRpbnVpdHlTZXF1ZW5jZSArIGkgKyAxO1xuICAgICAgICB2YXIgZGlzY29udGludWl0eVN5bmMgPSBzeW5jQ29udHJvbGxlci5kaXNjb250aW51aXRpZXNbZGlzY29udGludWl0eV07XG5cbiAgICAgICAgaWYgKGRpc2NvbnRpbnVpdHlTeW5jKSB7XG4gICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnMoY3VycmVudFRpbWUgLSBkaXNjb250aW51aXR5U3luYy50aW1lKTsgLy8gT25jZSB0aGUgZGlzdGFuY2UgYmVnaW5zIHRvIGluY3JlYXNlLCB3ZSBoYXZlIHBhc3NlZFxuICAgICAgICAgIC8vIGN1cnJlbnRUaW1lIGFuZCBjYW4gc3RvcCBsb29raW5nIGZvciBiZXR0ZXIgY2FuZGlkYXRlc1xuXG4gICAgICAgICAgaWYgKGxhc3REaXN0YW5jZSAhPT0gbnVsbCAmJiBsYXN0RGlzdGFuY2UgPCBkaXN0YW5jZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFzeW5jUG9pbnQgfHwgbGFzdERpc3RhbmNlID09PSBudWxsIHx8IGxhc3REaXN0YW5jZSA+PSBkaXN0YW5jZSkge1xuICAgICAgICAgICAgbGFzdERpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgICAgICBzeW5jUG9pbnQgPSB7XG4gICAgICAgICAgICAgIHRpbWU6IGRpc2NvbnRpbnVpdHlTeW5jLnRpbWUsXG4gICAgICAgICAgICAgIHNlZ21lbnRJbmRleDogc2VnbWVudEluZGV4XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzeW5jUG9pbnQ7XG4gIH1cbn0sIC8vIFN0YXRlZ3kgXCJQbGF5bGlzdFwiOiBXZSBoYXZlIGEgcGxheWxpc3Qgd2l0aCBhIGtub3duIG1hcHBpbmcgb2Zcbi8vICAgICAgICAgICAgICAgICAgICAgc2VnbWVudCBpbmRleCB0byBkaXNwbGF5IHRpbWVcbntcbiAgbmFtZTogJ1BsYXlsaXN0JyxcbiAgcnVuOiBmdW5jdGlvbiBydW4oc3luY0NvbnRyb2xsZXIsIHBsYXlsaXN0LCBkdXJhdGlvbiwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgIGlmIChwbGF5bGlzdC5zeW5jSW5mbykge1xuICAgICAgdmFyIHN5bmNQb2ludCA9IHtcbiAgICAgICAgdGltZTogcGxheWxpc3Quc3luY0luZm8udGltZSxcbiAgICAgICAgc2VnbWVudEluZGV4OiBwbGF5bGlzdC5zeW5jSW5mby5tZWRpYVNlcXVlbmNlIC0gcGxheWxpc3QubWVkaWFTZXF1ZW5jZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBzeW5jUG9pbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1dO1xuXG52YXIgU3luY0NvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF92aWRlb2pzJEV2ZW50VGFyZ2V0KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN5bmNDb250cm9sbGVyLCBfdmlkZW9qcyRFdmVudFRhcmdldCk7XG5cbiAgZnVuY3Rpb24gU3luY0NvbnRyb2xsZXIob3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX3ZpZGVvanMkRXZlbnRUYXJnZXQuY2FsbCh0aGlzKSB8fCB0aGlzOyAvLyAuLi5mb3Igc3luY2hpbmcgYWNyb3NzIHZhcmlhbnRzXG5cbiAgICBfdGhpcy50aW1lbGluZXMgPSBbXTtcbiAgICBfdGhpcy5kaXNjb250aW51aXRpZXMgPSBbXTtcbiAgICBfdGhpcy5kYXRldGltZVRvRGlzcGxheVRpbWUgPSBudWxsO1xuICAgIF90aGlzLmxvZ2dlcl8gPSBsb2dnZXIoJ1N5bmNDb250cm9sbGVyJyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kIGEgc3luYy1wb2ludCBmb3IgdGhlIHBsYXlsaXN0IHNwZWNpZmllZFxuICAgKlxuICAgKiBBIHN5bmMtcG9pbnQgaXMgZGVmaW5lZCBhcyBhIGtub3duIG1hcHBpbmcgZnJvbSBkaXNwbGF5LXRpbWUgdG9cbiAgICogYSBzZWdtZW50LWluZGV4IGluIHRoZSBjdXJyZW50IHBsYXlsaXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXlsaXN0fSBwbGF5bGlzdFxuICAgKiAgICAgICAgVGhlIHBsYXlsaXN0IHRoYXQgbmVlZHMgYSBzeW5jLXBvaW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvblxuICAgKiAgICAgICAgRHVyYXRpb24gb2YgdGhlIE1lZGlhU291cmNlIChJbmZpbml0ZSBpZiBwbGF5aW5nIGEgbGl2ZSBzb3VyY2UpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50VGltZWxpbmVcbiAgICogICAgICAgIFRoZSBsYXN0IHRpbWVsaW5lIGZyb20gd2hpY2ggYSBzZWdtZW50IHdhcyBsb2FkZWRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiAgICAgICAgICBBIHN5bmMtcG9pbnQgb2JqZWN0XG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN5bmNDb250cm9sbGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0U3luY1BvaW50ID0gZnVuY3Rpb24gZ2V0U3luY1BvaW50KHBsYXlsaXN0LCBkdXJhdGlvbiwgY3VycmVudFRpbWVsaW5lLCBjdXJyZW50VGltZSkge1xuICAgIHZhciBzeW5jUG9pbnRzID0gdGhpcy5ydW5TdHJhdGVnaWVzXyhwbGF5bGlzdCwgZHVyYXRpb24sIGN1cnJlbnRUaW1lbGluZSwgY3VycmVudFRpbWUpO1xuXG4gICAgaWYgKCFzeW5jUG9pbnRzLmxlbmd0aCkge1xuICAgICAgLy8gU2lnbmFsIHRoYXQgd2UgbmVlZCB0byBhdHRlbXB0IHRvIGdldCBhIHN5bmMtcG9pbnQgbWFudWFsbHlcbiAgICAgIC8vIGJ5IGZldGNoaW5nIGEgc2VnbWVudCBpbiB0aGUgcGxheWxpc3QgYW5kIGNvbnN0cnVjdGluZ1xuICAgICAgLy8gYSBzeW5jLXBvaW50IGZyb20gdGhhdCBpbmZvcm1hdGlvblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSAvLyBOb3cgZmluZCB0aGUgc3luYy1wb2ludCB0aGF0IGlzIGNsb3Nlc3QgdG8gdGhlIGN1cnJlbnRUaW1lIGJlY2F1c2VcbiAgICAvLyB0aGF0IHNob3VsZCByZXN1bHQgaW4gdGhlIG1vc3QgYWNjdXJhdGUgZ3Vlc3MgYWJvdXQgd2hpY2ggc2VnbWVudFxuICAgIC8vIHRvIGZldGNoXG5cblxuICAgIHJldHVybiB0aGlzLnNlbGVjdFN5bmNQb2ludF8oc3luY1BvaW50cywge1xuICAgICAga2V5OiAndGltZScsXG4gICAgICB2YWx1ZTogY3VycmVudFRpbWVcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBhbW91bnQgb2YgdGltZSB0aGF0IGhhcyBleHBpcmVkIG9mZiB0aGUgcGxheWxpc3QgZHVyaW5nIHBsYXliYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7UGxheWxpc3R9IHBsYXlsaXN0XG4gICAqICAgICAgICBQbGF5bGlzdCBvYmplY3QgdG8gY2FsY3VsYXRlIGV4cGlyZWQgZnJvbVxuICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAgICogICAgICAgIER1cmF0aW9uIG9mIHRoZSBNZWRpYVNvdXJjZSAoSW5maW5pdHkgaWYgcGxheWxpbmcgYSBsaXZlIHNvdXJjZSlcbiAgICogQHJldHVybiB7bnVtYmVyfG51bGx9XG4gICAqICAgICAgICAgIFRoZSBhbW91bnQgb2YgdGltZSB0aGF0IGhhcyBleHBpcmVkIG9mZiB0aGUgcGxheWxpc3QgZHVyaW5nIHBsYXliYWNrLiBOdWxsXG4gICAqICAgICAgICAgIGlmIG5vIHN5bmMtcG9pbnRzIGZvciB0aGUgcGxheWxpc3QgY2FuIGJlIGZvdW5kLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRFeHBpcmVkVGltZSA9IGZ1bmN0aW9uIGdldEV4cGlyZWRUaW1lKHBsYXlsaXN0LCBkdXJhdGlvbikge1xuICAgIGlmICghcGxheWxpc3QgfHwgIXBsYXlsaXN0LnNlZ21lbnRzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgc3luY1BvaW50cyA9IHRoaXMucnVuU3RyYXRlZ2llc18ocGxheWxpc3QsIGR1cmF0aW9uLCBwbGF5bGlzdC5kaXNjb250aW51aXR5U2VxdWVuY2UsIDApOyAvLyBXaXRob3V0IHN5bmMtcG9pbnRzLCB0aGVyZSBpcyBub3QgZW5vdWdoIGluZm9ybWF0aW9uIHRvIGRldGVybWluZSB0aGUgZXhwaXJlZCB0aW1lXG5cbiAgICBpZiAoIXN5bmNQb2ludHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgc3luY1BvaW50ID0gdGhpcy5zZWxlY3RTeW5jUG9pbnRfKHN5bmNQb2ludHMsIHtcbiAgICAgIGtleTogJ3NlZ21lbnRJbmRleCcsXG4gICAgICB2YWx1ZTogMFxuICAgIH0pOyAvLyBJZiB0aGUgc3luYy1wb2ludCBpcyBiZXlvbmQgdGhlIHN0YXJ0IG9mIHRoZSBwbGF5bGlzdCwgd2Ugd2FudCB0byBzdWJ0cmFjdCB0aGVcbiAgICAvLyBkdXJhdGlvbiBmcm9tIGluZGV4IDAgdG8gc3luY1BvaW50LnNlZ21lbnRJbmRleCBpbnN0ZWFkIG9mIGFkZGluZy5cblxuICAgIGlmIChzeW5jUG9pbnQuc2VnbWVudEluZGV4ID4gMCkge1xuICAgICAgc3luY1BvaW50LnRpbWUgKj0gLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIE1hdGguYWJzKHN5bmNQb2ludC50aW1lICsgc3VtRHVyYXRpb25zKHBsYXlsaXN0LCBzeW5jUG9pbnQuc2VnbWVudEluZGV4LCAwKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJ1bnMgZWFjaCBzeW5jLXBvaW50IHN0cmF0ZWd5IGFuZCByZXR1cm5zIGEgbGlzdCBvZiBzeW5jLXBvaW50cyByZXR1cm5lZCBieSB0aGVcbiAgICogc3RyYXRlZ2llc1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1BsYXlsaXN0fSBwbGF5bGlzdFxuICAgKiAgICAgICAgVGhlIHBsYXlsaXN0IHRoYXQgbmVlZHMgYSBzeW5jLXBvaW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvblxuICAgKiAgICAgICAgRHVyYXRpb24gb2YgdGhlIE1lZGlhU291cmNlIChJbmZpbml0eSBpZiBwbGF5aW5nIGEgbGl2ZSBzb3VyY2UpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50VGltZWxpbmVcbiAgICogICAgICAgIFRoZSBsYXN0IHRpbWVsaW5lIGZyb20gd2hpY2ggYSBzZWdtZW50IHdhcyBsb2FkZWRcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqICAgICAgICAgIEEgbGlzdCBvZiBzeW5jLXBvaW50IG9iamVjdHNcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucnVuU3RyYXRlZ2llc18gPSBmdW5jdGlvbiBydW5TdHJhdGVnaWVzXyhwbGF5bGlzdCwgZHVyYXRpb24sIGN1cnJlbnRUaW1lbGluZSwgY3VycmVudFRpbWUpIHtcbiAgICB2YXIgc3luY1BvaW50cyA9IFtdOyAvLyBUcnkgdG8gZmluZCBhIHN5bmMtcG9pbnQgaW4gYnkgdXRpbGl6aW5nIHZhcmlvdXMgc3RyYXRlZ2llcy4uLlxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzeW5jUG9pbnRTdHJhdGVnaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3RyYXRlZ3kgPSBzeW5jUG9pbnRTdHJhdGVnaWVzW2ldO1xuICAgICAgdmFyIHN5bmNQb2ludCA9IHN0cmF0ZWd5LnJ1bih0aGlzLCBwbGF5bGlzdCwgZHVyYXRpb24sIGN1cnJlbnRUaW1lbGluZSwgY3VycmVudFRpbWUpO1xuXG4gICAgICBpZiAoc3luY1BvaW50KSB7XG4gICAgICAgIHN5bmNQb2ludC5zdHJhdGVneSA9IHN0cmF0ZWd5Lm5hbWU7XG4gICAgICAgIHN5bmNQb2ludHMucHVzaCh7XG4gICAgICAgICAgc3RyYXRlZ3k6IHN0cmF0ZWd5Lm5hbWUsXG4gICAgICAgICAgc3luY1BvaW50OiBzeW5jUG9pbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN5bmNQb2ludHM7XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdHMgdGhlIHN5bmMtcG9pbnQgbmVhcmVzdCB0aGUgc3BlY2lmaWVkIHRhcmdldFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzeW5jUG9pbnRzXG4gICAqICAgICAgICBMaXN0IG9mIHN5bmMtcG9pbnRzIHRvIHNlbGVjdCBmcm9tXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAgICogICAgICAgIE9iamVjdCBzcGVjaWZ5aW5nIHRoZSBwcm9wZXJ0eSBhbmQgdmFsdWUgd2UgYXJlIHRhcmdldGluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0LmtleVxuICAgKiAgICAgICAgU3BlY2lmaWVzIHRoZSBwcm9wZXJ0eSB0byB0YXJnZXQuIE11c3QgYmUgZWl0aGVyICd0aW1lJyBvciAnc2VnbWVudEluZGV4J1xuICAgKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0LnZhbHVlXG4gICAqICAgICAgICBUaGUgdmFsdWUgdG8gdGFyZ2V0IGZvciB0aGUgc3BlY2lmaWVkIGtleS5cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiAgICAgICAgICBUaGUgc3luYy1wb2ludCBuZWFyZXN0IHRoZSB0YXJnZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2VsZWN0U3luY1BvaW50XyA9IGZ1bmN0aW9uIHNlbGVjdFN5bmNQb2ludF8oc3luY1BvaW50cywgdGFyZ2V0KSB7XG4gICAgdmFyIGJlc3RTeW5jUG9pbnQgPSBzeW5jUG9pbnRzWzBdLnN5bmNQb2ludDtcbiAgICB2YXIgYmVzdERpc3RhbmNlID0gTWF0aC5hYnMoc3luY1BvaW50c1swXS5zeW5jUG9pbnRbdGFyZ2V0LmtleV0gLSB0YXJnZXQudmFsdWUpO1xuICAgIHZhciBiZXN0U3RyYXRlZ3kgPSBzeW5jUG9pbnRzWzBdLnN0cmF0ZWd5O1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzeW5jUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV3RGlzdGFuY2UgPSBNYXRoLmFicyhzeW5jUG9pbnRzW2ldLnN5bmNQb2ludFt0YXJnZXQua2V5XSAtIHRhcmdldC52YWx1ZSk7XG5cbiAgICAgIGlmIChuZXdEaXN0YW5jZSA8IGJlc3REaXN0YW5jZSkge1xuICAgICAgICBiZXN0RGlzdGFuY2UgPSBuZXdEaXN0YW5jZTtcbiAgICAgICAgYmVzdFN5bmNQb2ludCA9IHN5bmNQb2ludHNbaV0uc3luY1BvaW50O1xuICAgICAgICBiZXN0U3RyYXRlZ3kgPSBzeW5jUG9pbnRzW2ldLnN0cmF0ZWd5O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyXyhcInN5bmNQb2ludCBmb3IgW1wiICsgdGFyZ2V0LmtleSArIFwiOiBcIiArIHRhcmdldC52YWx1ZSArIFwiXSBjaG9zZW4gd2l0aCBzdHJhdGVneVwiICsgKFwiIFtcIiArIGJlc3RTdHJhdGVneSArIFwiXTogW3RpbWU6XCIgKyBiZXN0U3luY1BvaW50LnRpbWUgKyBcIixcIikgKyAoXCIgc2VnbWVudEluZGV4OlwiICsgYmVzdFN5bmNQb2ludC5zZWdtZW50SW5kZXggKyBcIl1cIikpO1xuICAgIHJldHVybiBiZXN0U3luY1BvaW50O1xuICB9XG4gIC8qKlxuICAgKiBTYXZlIGFueSBtZXRhLWRhdGEgcHJlc2VudCBvbiB0aGUgc2VnbWVudHMgd2hlbiBzZWdtZW50cyBsZWF2ZVxuICAgKiB0aGUgbGl2ZSB3aW5kb3cgdG8gdGhlIHBsYXlsaXN0IHRvIGFsbG93IGZvciBzeW5jaHJvbml6YXRpb24gYXQgdGhlXG4gICAqIHBsYXlsaXN0IGxldmVsIGxhdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsYXlsaXN0fSBvbGRQbGF5bGlzdCAtIFRoZSBwcmV2aW91cyBhY3RpdmUgcGxheWxpc3RcbiAgICogQHBhcmFtIHtQbGF5bGlzdH0gbmV3UGxheWxpc3QgLSBUaGUgdXBkYXRlZCBhbmQgbW9zdCBjdXJyZW50IHBsYXlsaXN0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNhdmVFeHBpcmVkU2VnbWVudEluZm8gPSBmdW5jdGlvbiBzYXZlRXhwaXJlZFNlZ21lbnRJbmZvKG9sZFBsYXlsaXN0LCBuZXdQbGF5bGlzdCkge1xuICAgIHZhciBtZWRpYVNlcXVlbmNlRGlmZiA9IG5ld1BsYXlsaXN0Lm1lZGlhU2VxdWVuY2UgLSBvbGRQbGF5bGlzdC5tZWRpYVNlcXVlbmNlOyAvLyBXaGVuIGEgc2VnbWVudCBleHBpcmVzIGZyb20gdGhlIHBsYXlsaXN0IGFuZCBpdCBoYXMgYSBzdGFydCB0aW1lXG4gICAgLy8gc2F2ZSB0aGF0IGluZm9ybWF0aW9uIGFzIGEgcG9zc2libGUgc3luYy1wb2ludCByZWZlcmVuY2UgaW4gZnV0dXJlXG5cbiAgICBmb3IgKHZhciBpID0gbWVkaWFTZXF1ZW5jZURpZmYgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGxhc3RSZW1vdmVkU2VnbWVudCA9IG9sZFBsYXlsaXN0LnNlZ21lbnRzW2ldO1xuXG4gICAgICBpZiAobGFzdFJlbW92ZWRTZWdtZW50ICYmIHR5cGVvZiBsYXN0UmVtb3ZlZFNlZ21lbnQuc3RhcnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG5ld1BsYXlsaXN0LnN5bmNJbmZvID0ge1xuICAgICAgICAgIG1lZGlhU2VxdWVuY2U6IG9sZFBsYXlsaXN0Lm1lZGlhU2VxdWVuY2UgKyBpLFxuICAgICAgICAgIHRpbWU6IGxhc3RSZW1vdmVkU2VnbWVudC5zdGFydFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxvZ2dlcl8oXCJwbGF5bGlzdCByZWZyZXNoIHN5bmM6IFt0aW1lOlwiICsgbmV3UGxheWxpc3Quc3luY0luZm8udGltZSArIFwiLFwiICsgKFwiIG1lZGlhU2VxdWVuY2U6IFwiICsgbmV3UGxheWxpc3Quc3luY0luZm8ubWVkaWFTZXF1ZW5jZSArIFwiXVwiKSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignc3luY2luZm91cGRhdGUnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTYXZlIHRoZSBtYXBwaW5nIGZyb20gcGxheWxpc3QncyBQcm9ncmFtRGF0ZVRpbWUgdG8gZGlzcGxheS4gVGhpcyBzaG91bGRcbiAgICogb25seSBldmVyIGhhcHBlbiBvbmNlIGF0IHRoZSBzdGFydCBvZiBwbGF5YmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtQbGF5bGlzdH0gcGxheWxpc3QgLSBUaGUgY3VycmVudGx5IGFjdGl2ZSBwbGF5bGlzdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXREYXRlVGltZU1hcHBpbmcgPSBmdW5jdGlvbiBzZXREYXRlVGltZU1hcHBpbmcocGxheWxpc3QpIHtcbiAgICBpZiAoIXRoaXMuZGF0ZXRpbWVUb0Rpc3BsYXlUaW1lICYmIHBsYXlsaXN0LnNlZ21lbnRzICYmIHBsYXlsaXN0LnNlZ21lbnRzLmxlbmd0aCAmJiBwbGF5bGlzdC5zZWdtZW50c1swXS5kYXRlVGltZU9iamVjdCkge1xuICAgICAgdmFyIHBsYXlsaXN0VGltZXN0YW1wID0gcGxheWxpc3Quc2VnbWVudHNbMF0uZGF0ZVRpbWVPYmplY3QuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgIHRoaXMuZGF0ZXRpbWVUb0Rpc3BsYXlUaW1lID0gLXBsYXlsaXN0VGltZXN0YW1wO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsY3VsYXRlcyBhbmQgc2F2ZXMgdGltZWxpbmUgbWFwcGluZ3MsIHBsYXlsaXN0IHN5bmMgaW5mbywgYW5kIHNlZ21lbnQgdGltaW5nIHZhbHVlc1xuICAgKiBiYXNlZCBvbiB0aGUgbGF0ZXN0IHRpbWluZyBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgICAgIE9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSB7U2VnbWVudEluZm99IG9wdGlvbnMuc2VnbWVudEluZm9cbiAgICogICAgICAgIFRoZSBjdXJyZW50IGFjdGl2ZSByZXF1ZXN0IGluZm9ybWF0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5zaG91bGRTYXZlVGltZWxpbmVNYXBwaW5nXG4gICAqICAgICAgICBJZiB0aGVyZSdzIGEgdGltZWxpbmUgY2hhbmdlLCBkZXRlcm1pbmVzIGlmIHRoZSB0aW1lbGluZSBtYXBwaW5nIHNob3VsZCBiZVxuICAgKiAgICAgICAgc2F2ZWQgaW4gdGltZWxpbmVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zYXZlU2VnbWVudFRpbWluZ0luZm8gPSBmdW5jdGlvbiBzYXZlU2VnbWVudFRpbWluZ0luZm8oX3JlZikge1xuICAgIHZhciBzZWdtZW50SW5mbyA9IF9yZWYuc2VnbWVudEluZm8sXG4gICAgICAgIHNob3VsZFNhdmVUaW1lbGluZU1hcHBpbmcgPSBfcmVmLnNob3VsZFNhdmVUaW1lbGluZU1hcHBpbmc7XG4gICAgdmFyIGRpZENhbGN1bGF0ZVNlZ21lbnRUaW1lTWFwcGluZyA9IHRoaXMuY2FsY3VsYXRlU2VnbWVudFRpbWVNYXBwaW5nXyhzZWdtZW50SW5mbywgc2VnbWVudEluZm8udGltaW5nSW5mbywgc2hvdWxkU2F2ZVRpbWVsaW5lTWFwcGluZyk7XG5cbiAgICBpZiAoZGlkQ2FsY3VsYXRlU2VnbWVudFRpbWVNYXBwaW5nKSB7XG4gICAgICB0aGlzLnNhdmVEaXNjb250aW51aXR5U3luY0luZm9fKHNlZ21lbnRJbmZvKTsgLy8gSWYgdGhlIHBsYXlsaXN0IGRvZXMgbm90IGhhdmUgc3luYyBpbmZvcm1hdGlvbiB5ZXQsIHJlY29yZCB0aGF0IGluZm9ybWF0aW9uXG4gICAgICAvLyBub3cgd2l0aCBzZWdtZW50IHRpbWluZyBpbmZvcm1hdGlvblxuXG4gICAgICBpZiAoIXNlZ21lbnRJbmZvLnBsYXlsaXN0LnN5bmNJbmZvKSB7XG4gICAgICAgIHNlZ21lbnRJbmZvLnBsYXlsaXN0LnN5bmNJbmZvID0ge1xuICAgICAgICAgIG1lZGlhU2VxdWVuY2U6IHNlZ21lbnRJbmZvLnBsYXlsaXN0Lm1lZGlhU2VxdWVuY2UgKyBzZWdtZW50SW5mby5tZWRpYUluZGV4LFxuICAgICAgICAgIHRpbWU6IHNlZ21lbnRJbmZvLnNlZ21lbnQuc3RhcnRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnRpbWVzdGFtcE9mZnNldEZvclRpbWVsaW5lID0gZnVuY3Rpb24gdGltZXN0YW1wT2Zmc2V0Rm9yVGltZWxpbmUodGltZWxpbmUpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMudGltZWxpbmVzW3RpbWVsaW5lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRpbWVsaW5lc1t0aW1lbGluZV0udGltZTtcbiAgfTtcblxuICBfcHJvdG8ubWFwcGluZ0ZvclRpbWVsaW5lID0gZnVuY3Rpb24gbWFwcGluZ0ZvclRpbWVsaW5lKHRpbWVsaW5lKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnRpbWVsaW5lc1t0aW1lbGluZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50aW1lbGluZXNbdGltZWxpbmVdLm1hcHBpbmc7XG4gIH1cbiAgLyoqXG4gICAqIFVzZSB0aGUgXCJtZWRpYSB0aW1lXCIgZm9yIGEgc2VnbWVudCB0byBnZW5lcmF0ZSBhIG1hcHBpbmcgdG8gXCJkaXNwbGF5IHRpbWVcIiBhbmRcbiAgICogc2F2ZSB0aGF0IGRpc3BsYXkgdGltZSB0byB0aGUgc2VnbWVudC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTZWdtZW50SW5mb30gc2VnbWVudEluZm9cbiAgICogICAgICAgIFRoZSBjdXJyZW50IGFjdGl2ZSByZXF1ZXN0IGluZm9ybWF0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0aW1pbmdJbmZvXG4gICAqICAgICAgICBUaGUgc3RhcnQgYW5kIGVuZCB0aW1lIG9mIHRoZSBjdXJyZW50IHNlZ21lbnQgaW4gXCJtZWRpYSB0aW1lXCJcbiAgICogQHBhcmFtIHtib29sZWFufSBzaG91bGRTYXZlVGltZWxpbmVNYXBwaW5nXG4gICAqICAgICAgICBJZiB0aGVyZSdzIGEgdGltZWxpbmUgY2hhbmdlLCBkZXRlcm1pbmVzIGlmIHRoZSB0aW1lbGluZSBtYXBwaW5nIHNob3VsZCBiZVxuICAgKiAgICAgICAgc2F2ZWQgaW4gdGltZWxpbmVzLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgICBSZXR1cm5zIGZhbHNlIGlmIHNlZ21lbnQgdGltZSBtYXBwaW5nIGNvdWxkIG5vdCBiZSBjYWxjdWxhdGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNhbGN1bGF0ZVNlZ21lbnRUaW1lTWFwcGluZ18gPSBmdW5jdGlvbiBjYWxjdWxhdGVTZWdtZW50VGltZU1hcHBpbmdfKHNlZ21lbnRJbmZvLCB0aW1pbmdJbmZvLCBzaG91bGRTYXZlVGltZWxpbmVNYXBwaW5nKSB7XG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50SW5mby5zZWdtZW50O1xuICAgIHZhciBtYXBwaW5nT2JqID0gdGhpcy50aW1lbGluZXNbc2VnbWVudEluZm8udGltZWxpbmVdO1xuXG4gICAgaWYgKHNlZ21lbnRJbmZvLnRpbWVzdGFtcE9mZnNldCAhPT0gbnVsbCkge1xuICAgICAgbWFwcGluZ09iaiA9IHtcbiAgICAgICAgdGltZTogc2VnbWVudEluZm8uc3RhcnRPZlNlZ21lbnQsXG4gICAgICAgIG1hcHBpbmc6IHNlZ21lbnRJbmZvLnN0YXJ0T2ZTZWdtZW50IC0gdGltaW5nSW5mby5zdGFydFxuICAgICAgfTtcblxuICAgICAgaWYgKHNob3VsZFNhdmVUaW1lbGluZU1hcHBpbmcpIHtcbiAgICAgICAgdGhpcy50aW1lbGluZXNbc2VnbWVudEluZm8udGltZWxpbmVdID0gbWFwcGluZ09iajtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCd0aW1lc3RhbXBvZmZzZXQnKTtcbiAgICAgICAgdGhpcy5sb2dnZXJfKFwidGltZSBtYXBwaW5nIGZvciB0aW1lbGluZSBcIiArIHNlZ21lbnRJbmZvLnRpbWVsaW5lICsgXCI6IFwiICsgKFwiW3RpbWU6IFwiICsgbWFwcGluZ09iai50aW1lICsgXCJdIFttYXBwaW5nOiBcIiArIG1hcHBpbmdPYmoubWFwcGluZyArIFwiXVwiKSk7XG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQuc3RhcnQgPSBzZWdtZW50SW5mby5zdGFydE9mU2VnbWVudDtcbiAgICAgIHNlZ21lbnQuZW5kID0gdGltaW5nSW5mby5lbmQgKyBtYXBwaW5nT2JqLm1hcHBpbmc7XG4gICAgfSBlbHNlIGlmIChtYXBwaW5nT2JqKSB7XG4gICAgICBzZWdtZW50LnN0YXJ0ID0gdGltaW5nSW5mby5zdGFydCArIG1hcHBpbmdPYmoubWFwcGluZztcbiAgICAgIHNlZ21lbnQuZW5kID0gdGltaW5nSW5mby5lbmQgKyBtYXBwaW5nT2JqLm1hcHBpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogRWFjaCB0aW1lIHdlIGhhdmUgZGlzY29udGludWl0eSBpbiB0aGUgcGxheWxpc3QsIGF0dGVtcHQgdG8gY2FsY3VsYXRlIHRoZSBsb2NhdGlvblxuICAgKiBpbiBkaXNwbGF5IG9mIHRoZSBzdGFydCBvZiB0aGUgZGlzY29udGludWl0eSBhbmQgc2F2ZSB0aGF0LiBXZSBhbHNvIHNhdmUgYW4gYWNjdXJhY3lcbiAgICogdmFsdWUgc28gdGhhdCB3ZSBzYXZlIHZhbHVlcyB3aXRoIHRoZSBtb3N0IGFjY3VyYWN5IChjbG9zZXN0IHRvIDAuKVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1NlZ21lbnRJbmZvfSBzZWdtZW50SW5mbyAtIFRoZSBjdXJyZW50IGFjdGl2ZSByZXF1ZXN0IGluZm9ybWF0aW9uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNhdmVEaXNjb250aW51aXR5U3luY0luZm9fID0gZnVuY3Rpb24gc2F2ZURpc2NvbnRpbnVpdHlTeW5jSW5mb18oc2VnbWVudEluZm8pIHtcbiAgICB2YXIgcGxheWxpc3QgPSBzZWdtZW50SW5mby5wbGF5bGlzdDtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRJbmZvLnNlZ21lbnQ7IC8vIElmIHRoZSBjdXJyZW50IHNlZ21lbnQgaXMgYSBkaXNjb250aW51aXR5IHRoZW4gd2Uga25vdyBleGFjdGx5IHdoZXJlXG4gICAgLy8gdGhlIHN0YXJ0IG9mIHRoZSByYW5nZSBhbmQgaXQncyBhY2N1cmFjeSBpcyAwIChncmVhdGVyIGFjY3VyYWN5IHZhbHVlc1xuICAgIC8vIG1lYW4gbW9yZSBhcHByb3hpbWF0aW9uKVxuXG4gICAgaWYgKHNlZ21lbnQuZGlzY29udGludWl0eSkge1xuICAgICAgdGhpcy5kaXNjb250aW51aXRpZXNbc2VnbWVudC50aW1lbGluZV0gPSB7XG4gICAgICAgIHRpbWU6IHNlZ21lbnQuc3RhcnQsXG4gICAgICAgIGFjY3VyYWN5OiAwXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAocGxheWxpc3QuZGlzY29udGludWl0eVN0YXJ0cyAmJiBwbGF5bGlzdC5kaXNjb250aW51aXR5U3RhcnRzLmxlbmd0aCkge1xuICAgICAgLy8gU2VhcmNoIGZvciBmdXR1cmUgZGlzY29udGludWl0aWVzIHRoYXQgd2UgY2FuIHByb3ZpZGUgYmV0dGVyIHRpbWluZ1xuICAgICAgLy8gaW5mb3JtYXRpb24gZm9yIGFuZCBzYXZlIHRoYXQgaW5mb3JtYXRpb24gZm9yIHN5bmMgcHVycG9zZXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGxheWxpc3QuZGlzY29udGludWl0eVN0YXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc2VnbWVudEluZGV4ID0gcGxheWxpc3QuZGlzY29udGludWl0eVN0YXJ0c1tpXTtcbiAgICAgICAgdmFyIGRpc2NvbnRpbnVpdHkgPSBwbGF5bGlzdC5kaXNjb250aW51aXR5U2VxdWVuY2UgKyBpICsgMTtcbiAgICAgICAgdmFyIG1lZGlhSW5kZXhEaWZmID0gc2VnbWVudEluZGV4IC0gc2VnbWVudEluZm8ubWVkaWFJbmRleDtcbiAgICAgICAgdmFyIGFjY3VyYWN5ID0gTWF0aC5hYnMobWVkaWFJbmRleERpZmYpO1xuXG4gICAgICAgIGlmICghdGhpcy5kaXNjb250aW51aXRpZXNbZGlzY29udGludWl0eV0gfHwgdGhpcy5kaXNjb250aW51aXRpZXNbZGlzY29udGludWl0eV0uYWNjdXJhY3kgPiBhY2N1cmFjeSkge1xuICAgICAgICAgIHZhciB0aW1lID0gdm9pZCAwO1xuXG4gICAgICAgICAgaWYgKG1lZGlhSW5kZXhEaWZmIDwgMCkge1xuICAgICAgICAgICAgdGltZSA9IHNlZ21lbnQuc3RhcnQgLSBzdW1EdXJhdGlvbnMocGxheWxpc3QsIHNlZ21lbnRJbmZvLm1lZGlhSW5kZXgsIHNlZ21lbnRJbmRleCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWUgPSBzZWdtZW50LmVuZCArIHN1bUR1cmF0aW9ucyhwbGF5bGlzdCwgc2VnbWVudEluZm8ubWVkaWFJbmRleCArIDEsIHNlZ21lbnRJbmRleCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5kaXNjb250aW51aXRpZXNbZGlzY29udGludWl0eV0gPSB7XG4gICAgICAgICAgICB0aW1lOiB0aW1lLFxuICAgICAgICAgICAgYWNjdXJhY3k6IGFjY3VyYWN5XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdkaXNwb3NlJyk7XG4gICAgdGhpcy5vZmYoKTtcbiAgfTtcblxuICByZXR1cm4gU3luY0NvbnRyb2xsZXI7XG59KHZpZGVvanMkMS5FdmVudFRhcmdldCk7XG4vKipcbiAqIFRoZSBUaW1lbGluZUNoYW5nZUNvbnRyb2xsZXIgYWN0cyBhcyBhIHNvdXJjZSBmb3Igc2VnbWVudCBsb2FkZXJzIHRvIGxpc3RlbiBmb3IgYW5kXG4gKiBrZWVwIHRyYWNrIG9mIGxhdGVzdCBhbmQgcGVuZGluZyB0aW1lbGluZSBjaGFuZ2VzLiBUaGlzIGlzIHVzZWZ1bCB0byBlbnN1cmUgcHJvcGVyXG4gKiBzeW5jLCBhcyBlYWNoIGxvYWRlciBtYXkgbmVlZCB0byBtYWtlIGEgY29uc2lkZXJhdGlvbiBmb3Igd2hhdCB0aW1lbGluZSB0aGUgb3RoZXJcbiAqIGxvYWRlciBpcyBvbiBiZWZvcmUgbWFraW5nIGNoYW5nZXMgd2hpY2ggY291bGQgaW1wYWN0IHRoZSBvdGhlciBsb2FkZXIncyBtZWRpYS5cbiAqXG4gKiBAY2xhc3MgVGltZWxpbmVDaGFuZ2VDb250cm9sbGVyXG4gKiBAZXh0ZW5kcyB2aWRlb2pzLkV2ZW50VGFyZ2V0XG4gKi9cblxuXG52YXIgVGltZWxpbmVDaGFuZ2VDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfdmlkZW9qcyRFdmVudFRhcmdldCkge1xuICBfaW5oZXJpdHNMb29zZShUaW1lbGluZUNoYW5nZUNvbnRyb2xsZXIsIF92aWRlb2pzJEV2ZW50VGFyZ2V0KTtcblxuICBmdW5jdGlvbiBUaW1lbGluZUNoYW5nZUNvbnRyb2xsZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfdmlkZW9qcyRFdmVudFRhcmdldC5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgX3RoaXMucGVuZGluZ1RpbWVsaW5lQ2hhbmdlc18gPSB7fTtcbiAgICBfdGhpcy5sYXN0VGltZWxpbmVDaGFuZ2VzXyA9IHt9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUaW1lbGluZUNoYW5nZUNvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jbGVhclBlbmRpbmdUaW1lbGluZUNoYW5nZSA9IGZ1bmN0aW9uIGNsZWFyUGVuZGluZ1RpbWVsaW5lQ2hhbmdlKHR5cGUpIHtcbiAgICB0aGlzLnBlbmRpbmdUaW1lbGluZUNoYW5nZXNfW3R5cGVdID0gbnVsbDtcbiAgICB0aGlzLnRyaWdnZXIoJ3BlbmRpbmd0aW1lbGluZWNoYW5nZScpO1xuICB9O1xuXG4gIF9wcm90by5wZW5kaW5nVGltZWxpbmVDaGFuZ2UgPSBmdW5jdGlvbiBwZW5kaW5nVGltZWxpbmVDaGFuZ2UoX3JlZikge1xuICAgIHZhciB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgICBmcm9tID0gX3JlZi5mcm9tLFxuICAgICAgICB0byA9IF9yZWYudG87XG5cbiAgICBpZiAodHlwZW9mIGZyb20gPT09ICdudW1iZXInICYmIHR5cGVvZiB0byA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMucGVuZGluZ1RpbWVsaW5lQ2hhbmdlc19bdHlwZV0gPSB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGZyb206IGZyb20sXG4gICAgICAgIHRvOiB0b1xuICAgICAgfTtcbiAgICAgIHRoaXMudHJpZ2dlcigncGVuZGluZ3RpbWVsaW5lY2hhbmdlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ1RpbWVsaW5lQ2hhbmdlc19bdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLmxhc3RUaW1lbGluZUNoYW5nZSA9IGZ1bmN0aW9uIGxhc3RUaW1lbGluZUNoYW5nZShfcmVmMikge1xuICAgIHZhciB0eXBlID0gX3JlZjIudHlwZSxcbiAgICAgICAgZnJvbSA9IF9yZWYyLmZyb20sXG4gICAgICAgIHRvID0gX3JlZjIudG87XG5cbiAgICBpZiAodHlwZW9mIGZyb20gPT09ICdudW1iZXInICYmIHR5cGVvZiB0byA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMubGFzdFRpbWVsaW5lQ2hhbmdlc19bdHlwZV0gPSB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGZyb206IGZyb20sXG4gICAgICAgIHRvOiB0b1xuICAgICAgfTtcbiAgICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdUaW1lbGluZUNoYW5nZXNfW3R5cGVdO1xuICAgICAgdGhpcy50cmlnZ2VyKCd0aW1lbGluZWNoYW5nZScpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxhc3RUaW1lbGluZUNoYW5nZXNfW3R5cGVdO1xuICB9O1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2Rpc3Bvc2UnKTtcbiAgICB0aGlzLnBlbmRpbmdUaW1lbGluZUNoYW5nZXNfID0ge307XG4gICAgdGhpcy5sYXN0VGltZWxpbmVDaGFuZ2VzXyA9IHt9O1xuICAgIHRoaXMub2ZmKCk7XG4gIH07XG5cbiAgcmV0dXJuIFRpbWVsaW5lQ2hhbmdlQ29udHJvbGxlcjtcbn0odmlkZW9qcyQxLkV2ZW50VGFyZ2V0KTtcblxudmFyIERlY3J5cHRlciA9IG5ldyBzaGltV29ya2VyKFwiLi9kZWNyeXB0ZXItd29ya2VyLndvcmtlci5qc1wiLCBmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8qISBAbmFtZSBAdmlkZW9qcy9odHRwLXN0cmVhbWluZyBAdmVyc2lvbiAyLjIuNCBAbGljZW5zZSBBcGFjaGUtMi4wICovXG5cbiAgdmFyIGRlY3J5cHRlcldvcmtlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfVxuXG4gICAgdmFyIGNyZWF0ZUNsYXNzID0gX2NyZWF0ZUNsYXNzO1xuXG4gICAgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gICAgICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICAgIH1cblxuICAgIHZhciBpbmhlcml0c0xvb3NlID0gX2luaGVyaXRzTG9vc2U7XG4gICAgLyohIEBuYW1lIEB2aWRlb2pzL3Zocy11dGlscyBAdmVyc2lvbiAyLjIuMSBAbGljZW5zZSBNSVQgKi9cblxuICAgIC8qKlxuICAgICAqIEBmaWxlIHN0cmVhbS5qc1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBsaWdodHdlaWdodCByZWFkYWJsZSBzdHJlYW0gaW1wbGVtZW50aW9uIHRoYXQgaGFuZGxlcyBldmVudCBkaXNwYXRjaGluZy5cbiAgICAgKlxuICAgICAqIEBjbGFzcyBTdHJlYW1cbiAgICAgKi9cblxuICAgIHZhciBTdHJlYW0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gU3RyZWFtKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBzcGVjaWZpZWQgZXZlbnQgdHlwZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSB0aGUgZXZlbnQgbmFtZVxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgdGhlIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBhbiBldmVudCBvZlxuICAgICAgICogdGhlIHNwZWNpZmllZCB0eXBlIG9jY3Vyc1xuICAgICAgICovXG5cblxuICAgICAgdmFyIF9wcm90byA9IFN0cmVhbS5wcm90b3R5cGU7XG5cbiAgICAgIF9wcm90by5vbiA9IGZ1bmN0aW9uIG9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZSBhIGxpc3RlbmVyIGZvciBhIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIHRoZSBldmVudCBuYW1lXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAgYSBmdW5jdGlvbiBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZm9yIHRoaXNcbiAgICAgICAqIHR5cGUgb2YgZXZlbnQgdGhyb3VnaCBgb25gXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBpZiB3ZSBjb3VsZCB0dXJuIGl0IG9mZiBvciBub3RcbiAgICAgICAqL1xuICAgICAgO1xuXG4gICAgICBfcHJvdG8ub2ZmID0gZnVuY3Rpb24gb2ZmKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmxpc3RlbmVyc1t0eXBlXS5pbmRleE9mKGxpc3RlbmVyKTsgLy8gVE9ETzogd2hpY2ggaXMgYmV0dGVyP1xuICAgICAgICAvLyBJbiBWaWRlby5qcyB3ZSBzbGljZSBsaXN0ZW5lciBmdW5jdGlvbnNcbiAgICAgICAgLy8gb24gdHJpZ2dlciBzbyB0aGF0IGl0IGRvZXMgbm90IG1lc3MgdXAgdGhlIG9yZGVyXG4gICAgICAgIC8vIHdoaWxlIHdlIGxvb3AgdGhyb3VnaC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSGVyZSB3ZSBzbGljZSBvbiBvZmYgc28gdGhhdCB0aGUgbG9vcCBpbiB0cmlnZ2VyXG4gICAgICAgIC8vIGNhbiBjb250aW51ZSB1c2luZyBpdCdzIG9sZCByZWZlcmVuY2UgdG8gbG9vcCB3aXRob3V0XG4gICAgICAgIC8vIG1lc3NpbmcgdXAgdGhlIG9yZGVyLlxuXG4gICAgICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdID0gdGhpcy5saXN0ZW5lcnNbdHlwZV0uc2xpY2UoMCk7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBUcmlnZ2VyIGFuIGV2ZW50IG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBvbiB0aGlzIHN0cmVhbS4gQW55IGFkZGl0aW9uYWxcbiAgICAgICAqIGFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uIGFyZSBwYXNzZWQgYXMgcGFyYW1ldGVycyB0byBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgdGhlIGV2ZW50IG5hbWVcbiAgICAgICAqL1xuICAgICAgO1xuXG4gICAgICBfcHJvdG8udHJpZ2dlciA9IGZ1bmN0aW9uIHRyaWdnZXIodHlwZSkge1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07XG5cbiAgICAgICAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU2xpY2luZyB0aGUgYXJndW1lbnRzIG9uIGV2ZXJ5IGludm9jYXRpb24gb2YgdGhpcyBtZXRob2RcbiAgICAgICAgLy8gY2FuIGFkZCBhIHNpZ25pZmljYW50IGFtb3VudCBvZiBvdmVyaGVhZC4gQXZvaWQgdGhlXG4gICAgICAgIC8vIGludGVybWVkaWF0ZSBvYmplY3QgY3JlYXRpb24gZm9yIHRoZSBjb21tb24gY2FzZSBvZiBhXG4gICAgICAgIC8vIHNpbmdsZSBjYWxsYmFjayBhcmd1bWVudFxuXG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICB2YXIgX2xlbmd0aCA9IGNhbGxiYWNrcy5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2xlbmd0aDsgKytfaSkge1xuICAgICAgICAgICAgY2FsbGJhY2tzW19pXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogRGVzdHJveXMgdGhlIHN0cmVhbSBhbmQgY2xlYW5zIHVwLlxuICAgICAgICovXG4gICAgICA7XG5cbiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogRm9yd2FyZHMgYWxsIGBkYXRhYCBldmVudHMgb24gdGhpcyBzdHJlYW0gdG8gdGhlIGRlc3RpbmF0aW9uIHN0cmVhbS4gVGhlXG4gICAgICAgKiBkZXN0aW5hdGlvbiBzdHJlYW0gc2hvdWxkIHByb3ZpZGUgYSBtZXRob2QgYHB1c2hgIHRvIHJlY2VpdmUgdGhlIGRhdGFcbiAgICAgICAqIGV2ZW50cyBhcyB0aGV5IGFycml2ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1N0cmVhbX0gZGVzdGluYXRpb24gdGhlIHN0cmVhbSB0aGF0IHdpbGwgcmVjZWl2ZSBhbGwgYGRhdGFgIGV2ZW50c1xuICAgICAgICogQHNlZSBodHRwOi8vbm9kZWpzLm9yZy9hcGkvc3RyZWFtLmh0bWwjc3RyZWFtX3JlYWRhYmxlX3BpcGVfZGVzdGluYXRpb25fb3B0aW9uc1xuICAgICAgICovXG4gICAgICA7XG5cbiAgICAgIF9wcm90by5waXBlID0gZnVuY3Rpb24gcGlwZShkZXN0aW5hdGlvbikge1xuICAgICAgICB0aGlzLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICBkZXN0aW5hdGlvbi5wdXNoKGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBTdHJlYW07XG4gICAgfSgpO1xuXG4gICAgdmFyIHN0cmVhbSA9IFN0cmVhbTtcbiAgICAvKiEgQG5hbWUgcGtjczcgQHZlcnNpb24gMS4wLjQgQGxpY2Vuc2UgQXBhY2hlLTIuMCAqL1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3ViYXJyYXkgb2YgYSBVaW50OEFycmF5IHdpdGhvdXQgUEtDUyM3IHBhZGRpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFkZGVkIHtVaW50OEFycmF5fSB1bmVuY3J5cHRlZCBieXRlcyB0aGF0IGhhdmUgYmVlbiBwYWRkZWRcbiAgICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSB0aGUgdW5wYWRkZWQgYnl0ZXNcbiAgICAgKiBAc2VlIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU2NTJcbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIHVucGFkKHBhZGRlZCkge1xuICAgICAgcmV0dXJuIHBhZGRlZC5zdWJhcnJheSgwLCBwYWRkZWQuYnl0ZUxlbmd0aCAtIHBhZGRlZFtwYWRkZWQuYnl0ZUxlbmd0aCAtIDFdKTtcbiAgICB9XG4gICAgLyohIEBuYW1lIGFlcy1kZWNyeXB0ZXIgQHZlcnNpb24gMy4xLjAgQGxpY2Vuc2UgQXBhY2hlLTIuMCAqL1xuXG4gICAgLyoqXG4gICAgICogQGZpbGUgYWVzLmpzXG4gICAgICpcbiAgICAgKiBUaGlzIGZpbGUgY29udGFpbnMgYW4gYWRhcHRhdGlvbiBvZiB0aGUgQUVTIGRlY3J5cHRpb24gYWxnb3JpdGhtXG4gICAgICogZnJvbSB0aGUgU3RhbmRmb3JkIEphdmFzY3JpcHQgQ3J5cHRvZ3JhcGh5IExpYnJhcnkuIFRoYXQgd29yayBpc1xuICAgICAqIGNvdmVyZWQgYnkgdGhlIGZvbGxvd2luZyBjb3B5cmlnaHQgYW5kIHBlcm1pc3Npb25zIG5vdGljZTpcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAyMDA5LTIwMTAgRW1pbHkgU3RhcmssIE1pa2UgSGFtYnVyZywgRGFuIEJvbmVoLlxuICAgICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAgICAgKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gICAgICogbWV0OlxuICAgICAqXG4gICAgICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gICAgICpcbiAgICAgKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlXG4gICAgICogICAgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiAgICAgKiAgICBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWRcbiAgICAgKiAgICB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gICAgICpcbiAgICAgKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBBVVRIT1JTIGBgQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1MgT1JcbiAgICAgKiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICAgICAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAgICAgKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCA8Q09QWVJJR0hUIEhPTERFUj4gT1IgQ09OVFJJQlVUT1JTIEJFXG4gICAgICogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuICAgICAqIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4gICAgICogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SXG4gICAgICogQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksXG4gICAgICogV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0VcbiAgICAgKiBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOXG4gICAgICogSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gICAgICpcbiAgICAgKiBUaGUgdmlld3MgYW5kIGNvbmNsdXNpb25zIGNvbnRhaW5lZCBpbiB0aGUgc29mdHdhcmUgYW5kIGRvY3VtZW50YXRpb25cbiAgICAgKiBhcmUgdGhvc2Ugb2YgdGhlIGF1dGhvcnMgYW5kIHNob3VsZCBub3QgYmUgaW50ZXJwcmV0ZWQgYXMgcmVwcmVzZW50aW5nXG4gICAgICogb2ZmaWNpYWwgcG9saWNpZXMsIGVpdGhlciBleHByZXNzZWQgb3IgaW1wbGllZCwgb2YgdGhlIGF1dGhvcnMuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBFeHBhbmQgdGhlIFMtYm94IHRhYmxlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cblxuICAgIHZhciBwcmVjb21wdXRlID0gZnVuY3Rpb24gcHJlY29tcHV0ZSgpIHtcbiAgICAgIHZhciB0YWJsZXMgPSBbW1tdLCBbXSwgW10sIFtdLCBbXV0sIFtbXSwgW10sIFtdLCBbXSwgW11dXTtcbiAgICAgIHZhciBlbmNUYWJsZSA9IHRhYmxlc1swXTtcbiAgICAgIHZhciBkZWNUYWJsZSA9IHRhYmxlc1sxXTtcbiAgICAgIHZhciBzYm94ID0gZW5jVGFibGVbNF07XG4gICAgICB2YXIgc2JveEludiA9IGRlY1RhYmxlWzRdO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgeDtcbiAgICAgIHZhciB4SW52O1xuICAgICAgdmFyIGQgPSBbXTtcbiAgICAgIHZhciB0aCA9IFtdO1xuICAgICAgdmFyIHgyO1xuICAgICAgdmFyIHg0O1xuICAgICAgdmFyIHg4O1xuICAgICAgdmFyIHM7XG4gICAgICB2YXIgdEVuYztcbiAgICAgIHZhciB0RGVjOyAvLyBDb21wdXRlIGRvdWJsZSBhbmQgdGhpcmQgdGFibGVzXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICB0aFsoZFtpXSA9IGkgPDwgMSBeIChpID4+IDcpICogMjgzKSBeIGldID0gaTtcbiAgICAgIH1cblxuICAgICAgZm9yICh4ID0geEludiA9IDA7ICFzYm94W3hdOyB4IF49IHgyIHx8IDEsIHhJbnYgPSB0aFt4SW52XSB8fCAxKSB7XG4gICAgICAgIC8vIENvbXB1dGUgc2JveFxuICAgICAgICBzID0geEludiBeIHhJbnYgPDwgMSBeIHhJbnYgPDwgMiBeIHhJbnYgPDwgMyBeIHhJbnYgPDwgNDtcbiAgICAgICAgcyA9IHMgPj4gOCBeIHMgJiAyNTUgXiA5OTtcbiAgICAgICAgc2JveFt4XSA9IHM7XG4gICAgICAgIHNib3hJbnZbc10gPSB4OyAvLyBDb21wdXRlIE1peENvbHVtbnNcblxuICAgICAgICB4OCA9IGRbeDQgPSBkW3gyID0gZFt4XV1dO1xuICAgICAgICB0RGVjID0geDggKiAweDEwMTAxMDEgXiB4NCAqIDB4MTAwMDEgXiB4MiAqIDB4MTAxIF4geCAqIDB4MTAxMDEwMDtcbiAgICAgICAgdEVuYyA9IGRbc10gKiAweDEwMSBeIHMgKiAweDEwMTAxMDA7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgIGVuY1RhYmxlW2ldW3hdID0gdEVuYyA9IHRFbmMgPDwgMjQgXiB0RW5jID4+PiA4O1xuICAgICAgICAgIGRlY1RhYmxlW2ldW3NdID0gdERlYyA9IHREZWMgPDwgMjQgXiB0RGVjID4+PiA4O1xuICAgICAgICB9XG4gICAgICB9IC8vIENvbXBhY3RpZnkuIENvbnNpZGVyYWJsZSBzcGVlZHVwIG9uIEZpcmVmb3guXG5cblxuICAgICAgZm9yIChpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgICBlbmNUYWJsZVtpXSA9IGVuY1RhYmxlW2ldLnNsaWNlKDApO1xuICAgICAgICBkZWNUYWJsZVtpXSA9IGRlY1RhYmxlW2ldLnNsaWNlKDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFibGVzO1xuICAgIH07XG5cbiAgICB2YXIgYWVzVGFibGVzID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZSBvdXQgYW4gQUVTIGtleSBmb3IgYm90aCBlbmNyeXB0aW9uIGFuZCBkZWNyeXB0aW9uLiBUaGlzXG4gICAgICogaXMgYSBsb3ctbGV2ZWwgY2xhc3MuIFVzZSBhIGNpcGhlciBtb2RlIHRvIGRvIGJ1bGsgZW5jcnlwdGlvbi5cbiAgICAgKlxuICAgICAqIEBjbGFzcyBBRVNcbiAgICAgKiBAcGFyYW0ga2V5IHtBcnJheX0gVGhlIGtleSBhcyBhbiBhcnJheSBvZiA0LCA2IG9yIDggd29yZHMuXG4gICAgICovXG5cbiAgICB2YXIgQUVTID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIEFFUyhrZXkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICogVGhlIGV4cGFuZGVkIFMtYm94IGFuZCBpbnZlcnNlIFMtYm94IHRhYmxlcy4gVGhlc2Ugd2lsbCBiZSBjb21wdXRlZFxuICAgICAgICAqIG9uIHRoZSBjbGllbnQgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIHNlbmQgdGhlbSBkb3duIHRoZSB3aXJlLlxuICAgICAgICAqXG4gICAgICAgICogVGhlcmUgYXJlIHR3byB0YWJsZXMsIF90YWJsZXNbMF0gaXMgZm9yIGVuY3J5cHRpb24gYW5kXG4gICAgICAgICogX3RhYmxlc1sxXSBpcyBmb3IgZGVjcnlwdGlvbi5cbiAgICAgICAgKlxuICAgICAgICAqIFRoZSBmaXJzdCA0IHN1Yi10YWJsZXMgYXJlIHRoZSBleHBhbmRlZCBTLWJveCB3aXRoIE1peENvbHVtbnMuIFRoZVxuICAgICAgICAqIGxhc3QgKF90YWJsZXNbMDFdWzRdKSBpcyB0aGUgUy1ib3ggaXRzZWxmLlxuICAgICAgICAqXG4gICAgICAgICogQHByaXZhdGVcbiAgICAgICAgKi9cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSB5ZXQgdG8gcHJlY29tcHV0ZSB0aGUgUy1ib3ggdGFibGVzXG4gICAgICAgIC8vIGRvIHNvIG5vd1xuICAgICAgICBpZiAoIWFlc1RhYmxlcykge1xuICAgICAgICAgIGFlc1RhYmxlcyA9IHByZWNvbXB1dGUoKTtcbiAgICAgICAgfSAvLyB0aGVuIG1ha2UgYSBjb3B5IG9mIHRoYXQgb2JqZWN0IGZvciB1c2VcblxuXG4gICAgICAgIHRoaXMuX3RhYmxlcyA9IFtbYWVzVGFibGVzWzBdWzBdLnNsaWNlKCksIGFlc1RhYmxlc1swXVsxXS5zbGljZSgpLCBhZXNUYWJsZXNbMF1bMl0uc2xpY2UoKSwgYWVzVGFibGVzWzBdWzNdLnNsaWNlKCksIGFlc1RhYmxlc1swXVs0XS5zbGljZSgpXSwgW2Flc1RhYmxlc1sxXVswXS5zbGljZSgpLCBhZXNUYWJsZXNbMV1bMV0uc2xpY2UoKSwgYWVzVGFibGVzWzFdWzJdLnNsaWNlKCksIGFlc1RhYmxlc1sxXVszXS5zbGljZSgpLCBhZXNUYWJsZXNbMV1bNF0uc2xpY2UoKV1dO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGo7XG4gICAgICAgIHZhciB0bXA7XG4gICAgICAgIHZhciBzYm94ID0gdGhpcy5fdGFibGVzWzBdWzRdO1xuICAgICAgICB2YXIgZGVjVGFibGUgPSB0aGlzLl90YWJsZXNbMV07XG4gICAgICAgIHZhciBrZXlMZW4gPSBrZXkubGVuZ3RoO1xuICAgICAgICB2YXIgcmNvbiA9IDE7XG5cbiAgICAgICAgaWYgKGtleUxlbiAhPT0gNCAmJiBrZXlMZW4gIT09IDYgJiYga2V5TGVuICE9PSA4KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFlcyBrZXkgc2l6ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVuY0tleSA9IGtleS5zbGljZSgwKTtcbiAgICAgICAgdmFyIGRlY0tleSA9IFtdO1xuICAgICAgICB0aGlzLl9rZXkgPSBbZW5jS2V5LCBkZWNLZXldOyAvLyBzY2hlZHVsZSBlbmNyeXB0aW9uIGtleXNcblxuICAgICAgICBmb3IgKGkgPSBrZXlMZW47IGkgPCA0ICoga2V5TGVuICsgMjg7IGkrKykge1xuICAgICAgICAgIHRtcCA9IGVuY0tleVtpIC0gMV07IC8vIGFwcGx5IHNib3hcblxuICAgICAgICAgIGlmIChpICUga2V5TGVuID09PSAwIHx8IGtleUxlbiA9PT0gOCAmJiBpICUga2V5TGVuID09PSA0KSB7XG4gICAgICAgICAgICB0bXAgPSBzYm94W3RtcCA+Pj4gMjRdIDw8IDI0IF4gc2JveFt0bXAgPj4gMTYgJiAyNTVdIDw8IDE2IF4gc2JveFt0bXAgPj4gOCAmIDI1NV0gPDwgOCBeIHNib3hbdG1wICYgMjU1XTsgLy8gc2hpZnQgcm93cyBhbmQgYWRkIHJjb25cblxuICAgICAgICAgICAgaWYgKGkgJSBrZXlMZW4gPT09IDApIHtcbiAgICAgICAgICAgICAgdG1wID0gdG1wIDw8IDggXiB0bXAgPj4+IDI0IF4gcmNvbiA8PCAyNDtcbiAgICAgICAgICAgICAgcmNvbiA9IHJjb24gPDwgMSBeIChyY29uID4+IDcpICogMjgzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGVuY0tleVtpXSA9IGVuY0tleVtpIC0ga2V5TGVuXSBeIHRtcDtcbiAgICAgICAgfSAvLyBzY2hlZHVsZSBkZWNyeXB0aW9uIGtleXNcblxuXG4gICAgICAgIGZvciAoaiA9IDA7IGk7IGorKywgaS0tKSB7XG4gICAgICAgICAgdG1wID0gZW5jS2V5W2ogJiAzID8gaSA6IGkgLSA0XTtcblxuICAgICAgICAgIGlmIChpIDw9IDQgfHwgaiA8IDQpIHtcbiAgICAgICAgICAgIGRlY0tleVtqXSA9IHRtcDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVjS2V5W2pdID0gZGVjVGFibGVbMF1bc2JveFt0bXAgPj4+IDI0XV0gXiBkZWNUYWJsZVsxXVtzYm94W3RtcCA+PiAxNiAmIDI1NV1dIF4gZGVjVGFibGVbMl1bc2JveFt0bXAgPj4gOCAmIDI1NV1dIF4gZGVjVGFibGVbM11bc2JveFt0bXAgJiAyNTVdXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogRGVjcnlwdCAxNiBieXRlcywgc3BlY2lmaWVkIGFzIGZvdXIgMzItYml0IHdvcmRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmNyeXB0ZWQwIHRoZSBmaXJzdCB3b3JkIHRvIGRlY3J5cHRcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmNyeXB0ZWQxIHRoZSBzZWNvbmQgd29yZCB0byBkZWNyeXB0XG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5jcnlwdGVkMiB0aGUgdGhpcmQgd29yZCB0byBkZWNyeXB0XG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5jcnlwdGVkMyB0aGUgZm91cnRoIHdvcmQgdG8gZGVjcnlwdFxuICAgICAgICogQHBhcmFtIHtJbnQzMkFycmF5fSBvdXQgdGhlIGFycmF5IHRvIHdyaXRlIHRoZSBkZWNyeXB0ZWQgd29yZHNcbiAgICAgICAqIGludG9cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgdGhlIG9mZnNldCBpbnRvIHRoZSBvdXRwdXQgYXJyYXkgdG8gc3RhcnRcbiAgICAgICAqIHdyaXRpbmcgcmVzdWx0c1xuICAgICAgICogQHJldHVybiB7QXJyYXl9IFRoZSBwbGFpbnRleHQuXG4gICAgICAgKi9cblxuXG4gICAgICB2YXIgX3Byb3RvID0gQUVTLnByb3RvdHlwZTtcblxuICAgICAgX3Byb3RvLmRlY3J5cHQgPSBmdW5jdGlvbiBkZWNyeXB0KGVuY3J5cHRlZDAsIGVuY3J5cHRlZDEsIGVuY3J5cHRlZDIsIGVuY3J5cHRlZDMsIG91dCwgb2Zmc2V0KSB7XG4gICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlbMV07IC8vIHN0YXRlIHZhcmlhYmxlcyBhLGIsYyxkIGFyZSBsb2FkZWQgd2l0aCBwcmUtd2hpdGVuZWQgZGF0YVxuXG4gICAgICAgIHZhciBhID0gZW5jcnlwdGVkMCBeIGtleVswXTtcbiAgICAgICAgdmFyIGIgPSBlbmNyeXB0ZWQzIF4ga2V5WzFdO1xuICAgICAgICB2YXIgYyA9IGVuY3J5cHRlZDIgXiBrZXlbMl07XG4gICAgICAgIHZhciBkID0gZW5jcnlwdGVkMSBeIGtleVszXTtcbiAgICAgICAgdmFyIGEyO1xuICAgICAgICB2YXIgYjI7XG4gICAgICAgIHZhciBjMjsgLy8ga2V5Lmxlbmd0aCA9PT0gMiA/XG5cbiAgICAgICAgdmFyIG5Jbm5lclJvdW5kcyA9IGtleS5sZW5ndGggLyA0IC0gMjtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBrSW5kZXggPSA0O1xuICAgICAgICB2YXIgdGFibGUgPSB0aGlzLl90YWJsZXNbMV07IC8vIGxvYWQgdXAgdGhlIHRhYmxlc1xuXG4gICAgICAgIHZhciB0YWJsZTAgPSB0YWJsZVswXTtcbiAgICAgICAgdmFyIHRhYmxlMSA9IHRhYmxlWzFdO1xuICAgICAgICB2YXIgdGFibGUyID0gdGFibGVbMl07XG4gICAgICAgIHZhciB0YWJsZTMgPSB0YWJsZVszXTtcbiAgICAgICAgdmFyIHNib3ggPSB0YWJsZVs0XTsgLy8gSW5uZXIgcm91bmRzLiBDcmliYmVkIGZyb20gT3BlblNTTC5cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbklubmVyUm91bmRzOyBpKyspIHtcbiAgICAgICAgICBhMiA9IHRhYmxlMFthID4+PiAyNF0gXiB0YWJsZTFbYiA+PiAxNiAmIDI1NV0gXiB0YWJsZTJbYyA+PiA4ICYgMjU1XSBeIHRhYmxlM1tkICYgMjU1XSBeIGtleVtrSW5kZXhdO1xuICAgICAgICAgIGIyID0gdGFibGUwW2IgPj4+IDI0XSBeIHRhYmxlMVtjID4+IDE2ICYgMjU1XSBeIHRhYmxlMltkID4+IDggJiAyNTVdIF4gdGFibGUzW2EgJiAyNTVdIF4ga2V5W2tJbmRleCArIDFdO1xuICAgICAgICAgIGMyID0gdGFibGUwW2MgPj4+IDI0XSBeIHRhYmxlMVtkID4+IDE2ICYgMjU1XSBeIHRhYmxlMlthID4+IDggJiAyNTVdIF4gdGFibGUzW2IgJiAyNTVdIF4ga2V5W2tJbmRleCArIDJdO1xuICAgICAgICAgIGQgPSB0YWJsZTBbZCA+Pj4gMjRdIF4gdGFibGUxW2EgPj4gMTYgJiAyNTVdIF4gdGFibGUyW2IgPj4gOCAmIDI1NV0gXiB0YWJsZTNbYyAmIDI1NV0gXiBrZXlba0luZGV4ICsgM107XG4gICAgICAgICAga0luZGV4ICs9IDQ7XG4gICAgICAgICAgYSA9IGEyO1xuICAgICAgICAgIGIgPSBiMjtcbiAgICAgICAgICBjID0gYzI7XG4gICAgICAgIH0gLy8gTGFzdCByb3VuZC5cblxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICBvdXRbKDMgJiAtaSkgKyBvZmZzZXRdID0gc2JveFthID4+PiAyNF0gPDwgMjQgXiBzYm94W2IgPj4gMTYgJiAyNTVdIDw8IDE2IF4gc2JveFtjID4+IDggJiAyNTVdIDw8IDggXiBzYm94W2QgJiAyNTVdIF4ga2V5W2tJbmRleCsrXTtcbiAgICAgICAgICBhMiA9IGE7XG4gICAgICAgICAgYSA9IGI7XG4gICAgICAgICAgYiA9IGM7XG4gICAgICAgICAgYyA9IGQ7XG4gICAgICAgICAgZCA9IGEyO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQUVTO1xuICAgIH0oKTtcbiAgICAvKipcbiAgICAgKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBTdHJlYW0gY2xhc3MgdG8gdXNlIHNldFRpbWVvdXRcbiAgICAgKiBhbmQgcnVuIHN0cmVhbSBcImpvYnNcIiBBc3luY2hyb25vdXNseVxuICAgICAqXG4gICAgICogQGNsYXNzIEFzeW5jU3RyZWFtXG4gICAgICogQGV4dGVuZHMgU3RyZWFtXG4gICAgICovXG5cblxuICAgIHZhciBBc3luY1N0cmVhbSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1N0cmVhbSkge1xuICAgICAgaW5oZXJpdHNMb29zZShBc3luY1N0cmVhbSwgX1N0cmVhbSk7XG5cbiAgICAgIGZ1bmN0aW9uIEFzeW5jU3RyZWFtKCkge1xuICAgICAgICB2YXIgX3RoaXM7XG5cbiAgICAgICAgX3RoaXMgPSBfU3RyZWFtLmNhbGwodGhpcywgc3RyZWFtKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5qb2JzID0gW107XG4gICAgICAgIF90aGlzLmRlbGF5ID0gMTtcbiAgICAgICAgX3RoaXMudGltZW91dF8gPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIHByb2Nlc3MgYW4gYXN5bmMgam9iXG4gICAgICAgKlxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBBc3luY1N0cmVhbS5wcm90b3R5cGU7XG5cbiAgICAgIF9wcm90by5wcm9jZXNzSm9iXyA9IGZ1bmN0aW9uIHByb2Nlc3NKb2JfKCkge1xuICAgICAgICB0aGlzLmpvYnMuc2hpZnQoKSgpO1xuXG4gICAgICAgIGlmICh0aGlzLmpvYnMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy50aW1lb3V0XyA9IHNldFRpbWVvdXQodGhpcy5wcm9jZXNzSm9iXy5iaW5kKHRoaXMpLCB0aGlzLmRlbGF5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRpbWVvdXRfID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBwdXNoIGEgam9iIGludG8gdGhlIHN0cmVhbVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGpvYiB0aGUgam9iIHRvIHB1c2ggaW50byB0aGUgc3RyZWFtXG4gICAgICAgKi9cbiAgICAgIDtcblxuICAgICAgX3Byb3RvLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGpvYikge1xuICAgICAgICB0aGlzLmpvYnMucHVzaChqb2IpO1xuXG4gICAgICAgIGlmICghdGhpcy50aW1lb3V0Xykge1xuICAgICAgICAgIHRoaXMudGltZW91dF8gPSBzZXRUaW1lb3V0KHRoaXMucHJvY2Vzc0pvYl8uYmluZCh0aGlzKSwgdGhpcy5kZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBBc3luY1N0cmVhbTtcbiAgICB9KHN0cmVhbSk7XG4gICAgLyoqXG4gICAgICogQ29udmVydCBuZXR3b3JrLW9yZGVyIChiaWctZW5kaWFuKSBieXRlcyBpbnRvIHRoZWlyIGxpdHRsZS1lbmRpYW5cbiAgICAgKiByZXByZXNlbnRhdGlvbi5cbiAgICAgKi9cblxuXG4gICAgdmFyIG50b2ggPSBmdW5jdGlvbiBudG9oKHdvcmQpIHtcbiAgICAgIHJldHVybiB3b3JkIDw8IDI0IHwgKHdvcmQgJiAweGZmMDApIDw8IDggfCAod29yZCAmIDB4ZmYwMDAwKSA+PiA4IHwgd29yZCA+Pj4gMjQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWNyeXB0IGJ5dGVzIHVzaW5nIEFFUy0xMjggd2l0aCBDQkMgYW5kIFBLQ1MjNyBwYWRkaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBlbmNyeXB0ZWQgdGhlIGVuY3J5cHRlZCBieXRlc1xuICAgICAqIEBwYXJhbSB7VWludDMyQXJyYXl9IGtleSB0aGUgYnl0ZXMgb2YgdGhlIGRlY3J5cHRpb24ga2V5XG4gICAgICogQHBhcmFtIHtVaW50MzJBcnJheX0gaW5pdFZlY3RvciB0aGUgaW5pdGlhbGl6YXRpb24gdmVjdG9yIChJVikgdG9cbiAgICAgKiB1c2UgZm9yIHRoZSBmaXJzdCByb3VuZCBvZiBDQkMuXG4gICAgICogQHJldHVybiB7VWludDhBcnJheX0gdGhlIGRlY3J5cHRlZCBieXRlc1xuICAgICAqXG4gICAgICogQHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FkdmFuY2VkX0VuY3J5cHRpb25fU3RhbmRhcmRcbiAgICAgKiBAc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmxvY2tfY2lwaGVyX21vZGVfb2Zfb3BlcmF0aW9uI0NpcGhlcl9CbG9ja19DaGFpbmluZ18uMjhDQkMuMjlcbiAgICAgKiBAc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyMzE1XG4gICAgICovXG5cblxuICAgIHZhciBkZWNyeXB0ID0gZnVuY3Rpb24gZGVjcnlwdChlbmNyeXB0ZWQsIGtleSwgaW5pdFZlY3Rvcikge1xuICAgICAgLy8gd29yZC1sZXZlbCBhY2Nlc3MgdG8gdGhlIGVuY3J5cHRlZCBieXRlc1xuICAgICAgdmFyIGVuY3J5cHRlZDMyID0gbmV3IEludDMyQXJyYXkoZW5jcnlwdGVkLmJ1ZmZlciwgZW5jcnlwdGVkLmJ5dGVPZmZzZXQsIGVuY3J5cHRlZC5ieXRlTGVuZ3RoID4+IDIpO1xuICAgICAgdmFyIGRlY2lwaGVyID0gbmV3IEFFUyhBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChrZXkpKTsgLy8gYnl0ZSBhbmQgd29yZC1sZXZlbCBhY2Nlc3MgZm9yIHRoZSBkZWNyeXB0ZWQgb3V0cHV0XG5cbiAgICAgIHZhciBkZWNyeXB0ZWQgPSBuZXcgVWludDhBcnJheShlbmNyeXB0ZWQuYnl0ZUxlbmd0aCk7XG4gICAgICB2YXIgZGVjcnlwdGVkMzIgPSBuZXcgSW50MzJBcnJheShkZWNyeXB0ZWQuYnVmZmVyKTsgLy8gdGVtcG9yYXJ5IHZhcmlhYmxlcyBmb3Igd29ya2luZyB3aXRoIHRoZSBJViwgZW5jcnlwdGVkLCBhbmRcbiAgICAgIC8vIGRlY3J5cHRlZCBkYXRhXG5cbiAgICAgIHZhciBpbml0MDtcbiAgICAgIHZhciBpbml0MTtcbiAgICAgIHZhciBpbml0MjtcbiAgICAgIHZhciBpbml0MztcbiAgICAgIHZhciBlbmNyeXB0ZWQwO1xuICAgICAgdmFyIGVuY3J5cHRlZDE7XG4gICAgICB2YXIgZW5jcnlwdGVkMjtcbiAgICAgIHZhciBlbmNyeXB0ZWQzOyAvLyBpdGVyYXRpb24gdmFyaWFibGVcblxuICAgICAgdmFyIHdvcmRJeDsgLy8gcHVsbCBvdXQgdGhlIHdvcmRzIG9mIHRoZSBJViB0byBlbnN1cmUgd2UgZG9uJ3QgbW9kaWZ5IHRoZVxuICAgICAgLy8gcGFzc2VkLWluIHJlZmVyZW5jZSBhbmQgZWFzaWVyIGFjY2Vzc1xuXG4gICAgICBpbml0MCA9IGluaXRWZWN0b3JbMF07XG4gICAgICBpbml0MSA9IGluaXRWZWN0b3JbMV07XG4gICAgICBpbml0MiA9IGluaXRWZWN0b3JbMl07XG4gICAgICBpbml0MyA9IGluaXRWZWN0b3JbM107IC8vIGRlY3J5cHQgZm91ciB3b3JkIHNlcXVlbmNlcywgYXBwbHlpbmcgY2lwaGVyLWJsb2NrIGNoYWluaW5nIChDQkMpXG4gICAgICAvLyB0byBlYWNoIGRlY3J5cHRlZCBibG9ja1xuXG4gICAgICBmb3IgKHdvcmRJeCA9IDA7IHdvcmRJeCA8IGVuY3J5cHRlZDMyLmxlbmd0aDsgd29yZEl4ICs9IDQpIHtcbiAgICAgICAgLy8gY29udmVydCBiaWctZW5kaWFuIChuZXR3b3JrIG9yZGVyKSB3b3JkcyBpbnRvIGxpdHRsZS1lbmRpYW5cbiAgICAgICAgLy8gKGphdmFzY3JpcHQgb3JkZXIpXG4gICAgICAgIGVuY3J5cHRlZDAgPSBudG9oKGVuY3J5cHRlZDMyW3dvcmRJeF0pO1xuICAgICAgICBlbmNyeXB0ZWQxID0gbnRvaChlbmNyeXB0ZWQzMlt3b3JkSXggKyAxXSk7XG4gICAgICAgIGVuY3J5cHRlZDIgPSBudG9oKGVuY3J5cHRlZDMyW3dvcmRJeCArIDJdKTtcbiAgICAgICAgZW5jcnlwdGVkMyA9IG50b2goZW5jcnlwdGVkMzJbd29yZEl4ICsgM10pOyAvLyBkZWNyeXB0IHRoZSBibG9ja1xuXG4gICAgICAgIGRlY2lwaGVyLmRlY3J5cHQoZW5jcnlwdGVkMCwgZW5jcnlwdGVkMSwgZW5jcnlwdGVkMiwgZW5jcnlwdGVkMywgZGVjcnlwdGVkMzIsIHdvcmRJeCk7IC8vIFhPUiB3aXRoIHRoZSBJViwgYW5kIHJlc3RvcmUgbmV0d29yayBieXRlLW9yZGVyIHRvIG9idGFpbiB0aGVcbiAgICAgICAgLy8gcGxhaW50ZXh0XG5cbiAgICAgICAgZGVjcnlwdGVkMzJbd29yZEl4XSA9IG50b2goZGVjcnlwdGVkMzJbd29yZEl4XSBeIGluaXQwKTtcbiAgICAgICAgZGVjcnlwdGVkMzJbd29yZEl4ICsgMV0gPSBudG9oKGRlY3J5cHRlZDMyW3dvcmRJeCArIDFdIF4gaW5pdDEpO1xuICAgICAgICBkZWNyeXB0ZWQzMlt3b3JkSXggKyAyXSA9IG50b2goZGVjcnlwdGVkMzJbd29yZEl4ICsgMl0gXiBpbml0Mik7XG4gICAgICAgIGRlY3J5cHRlZDMyW3dvcmRJeCArIDNdID0gbnRvaChkZWNyeXB0ZWQzMlt3b3JkSXggKyAzXSBeIGluaXQzKTsgLy8gc2V0dXAgdGhlIElWIGZvciB0aGUgbmV4dCByb3VuZFxuXG4gICAgICAgIGluaXQwID0gZW5jcnlwdGVkMDtcbiAgICAgICAgaW5pdDEgPSBlbmNyeXB0ZWQxO1xuICAgICAgICBpbml0MiA9IGVuY3J5cHRlZDI7XG4gICAgICAgIGluaXQzID0gZW5jcnlwdGVkMztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlY3J5cHRlZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBgRGVjcnlwdGVyYCBjbGFzcyB0aGF0IG1hbmFnZXMgZGVjcnlwdGlvbiBvZiBBRVNcbiAgICAgKiBkYXRhIHRocm91Z2ggYEFzeW5jU3RyZWFtYCBvYmplY3RzIGFuZCB0aGUgYGRlY3J5cHRgXG4gICAgICogZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gZW5jcnlwdGVkIHRoZSBlbmNyeXB0ZWQgYnl0ZXNcbiAgICAgKiBAcGFyYW0ge1VpbnQzMkFycmF5fSBrZXkgdGhlIGJ5dGVzIG9mIHRoZSBkZWNyeXB0aW9uIGtleVxuICAgICAqIEBwYXJhbSB7VWludDMyQXJyYXl9IGluaXRWZWN0b3IgdGhlIGluaXRpYWxpemF0aW9uIHZlY3RvciAoSVYpIHRvXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZSB0aGUgZnVuY3Rpb24gdG8gcnVuIHdoZW4gZG9uZVxuICAgICAqIEBjbGFzcyBEZWNyeXB0ZXJcbiAgICAgKi9cblxuXG4gICAgdmFyIERlY3J5cHRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBEZWNyeXB0ZXIoZW5jcnlwdGVkLCBrZXksIGluaXRWZWN0b3IsIGRvbmUpIHtcbiAgICAgICAgdmFyIHN0ZXAgPSBEZWNyeXB0ZXIuU1RFUDtcbiAgICAgICAgdmFyIGVuY3J5cHRlZDMyID0gbmV3IEludDMyQXJyYXkoZW5jcnlwdGVkLmJ1ZmZlcik7XG4gICAgICAgIHZhciBkZWNyeXB0ZWQgPSBuZXcgVWludDhBcnJheShlbmNyeXB0ZWQuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdGhpcy5hc3luY1N0cmVhbV8gPSBuZXcgQXN5bmNTdHJlYW0oKTsgLy8gc3BsaXQgdXAgdGhlIGVuY3J5cHRpb24gam9iIGFuZCBkbyB0aGUgaW5kaXZpZHVhbCBjaHVua3MgYXN5bmNocm9ub3VzbHlcblxuICAgICAgICB0aGlzLmFzeW5jU3RyZWFtXy5wdXNoKHRoaXMuZGVjcnlwdENodW5rXyhlbmNyeXB0ZWQzMi5zdWJhcnJheShpLCBpICsgc3RlcCksIGtleSwgaW5pdFZlY3RvciwgZGVjcnlwdGVkKSk7XG5cbiAgICAgICAgZm9yIChpID0gc3RlcDsgaSA8IGVuY3J5cHRlZDMyLmxlbmd0aDsgaSArPSBzdGVwKSB7XG4gICAgICAgICAgaW5pdFZlY3RvciA9IG5ldyBVaW50MzJBcnJheShbbnRvaChlbmNyeXB0ZWQzMltpIC0gNF0pLCBudG9oKGVuY3J5cHRlZDMyW2kgLSAzXSksIG50b2goZW5jcnlwdGVkMzJbaSAtIDJdKSwgbnRvaChlbmNyeXB0ZWQzMltpIC0gMV0pXSk7XG4gICAgICAgICAgdGhpcy5hc3luY1N0cmVhbV8ucHVzaCh0aGlzLmRlY3J5cHRDaHVua18oZW5jcnlwdGVkMzIuc3ViYXJyYXkoaSwgaSArIHN0ZXApLCBrZXksIGluaXRWZWN0b3IsIGRlY3J5cHRlZCkpO1xuICAgICAgICB9IC8vIGludm9rZSB0aGUgZG9uZSgpIGNhbGxiYWNrIHdoZW4gZXZlcnl0aGluZyBpcyBmaW5pc2hlZFxuXG5cbiAgICAgICAgdGhpcy5hc3luY1N0cmVhbV8ucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIHBrY3MjNyBwYWRkaW5nIGZyb20gdGhlIGRlY3J5cHRlZCBieXRlc1xuICAgICAgICAgIGRvbmUobnVsbCwgdW5wYWQoZGVjcnlwdGVkKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBhIGdldHRlciBmb3Igc3RlcCB0aGUgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMgdG8gcHJvY2VzcyBhdCBvbmUgdGltZVxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge251bWJlcn0gdGhlIHZhbHVlIG9mIHN0ZXAgMzIwMDBcbiAgICAgICAqL1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBEZWNyeXB0ZXIucHJvdG90eXBlO1xuICAgICAgLyoqXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICovXG5cbiAgICAgIF9wcm90by5kZWNyeXB0Q2h1bmtfID0gZnVuY3Rpb24gZGVjcnlwdENodW5rXyhlbmNyeXB0ZWQsIGtleSwgaW5pdFZlY3RvciwgZGVjcnlwdGVkKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGJ5dGVzID0gZGVjcnlwdChlbmNyeXB0ZWQsIGtleSwgaW5pdFZlY3Rvcik7XG4gICAgICAgICAgZGVjcnlwdGVkLnNldChieXRlcywgZW5jcnlwdGVkLmJ5dGVPZmZzZXQpO1xuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgY3JlYXRlQ2xhc3MoRGVjcnlwdGVyLCBudWxsLCBbe1xuICAgICAgICBrZXk6IFwiU1RFUFwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAvLyA0ICogODAwMDtcbiAgICAgICAgICByZXR1cm4gMzIwMDA7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcbiAgICAgIHJldHVybiBEZWNyeXB0ZXI7XG4gICAgfSgpO1xuICAgIC8qKlxuICAgICAqIEBmaWxlIGJpbi11dGlscy5qc1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgZm9yIHNlbmRpbmcgdG8gYSB3ZWIgd29ya2VyIG1vZGlmeWluZyBwcm9wZXJ0aWVzIHRoYXQgYXJlIFR5cGVkQXJyYXlzXG4gICAgICogaW50byBhIG5ldyBvYmplY3Qgd2l0aCBzZXBlcmF0ZWQgcHJvcGVydGllcyBmb3IgdGhlIGJ1ZmZlciwgYnl0ZU9mZnNldCwgYW5kIGJ5dGVMZW5ndGguXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWVzc2FnZVxuICAgICAqICAgICAgICBPYmplY3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHRvIHNlbmQgdG8gdGhlIHdlYiB3b3JrZXJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICogICAgICAgICBNb2RpZmllZCBtZXNzYWdlIHdpdGggVHlwZWRBcnJheSB2YWx1ZXMgZXhwYW5kZWRcbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlVHJhbnNmZXJhYmxlTWVzc2FnZVxuICAgICAqL1xuXG5cbiAgICB2YXIgY3JlYXRlVHJhbnNmZXJhYmxlTWVzc2FnZSA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zZmVyYWJsZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgdmFyIHRyYW5zZmVyYWJsZSA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMobWVzc2FnZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG1lc3NhZ2Vba2V5XTtcblxuICAgICAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgICAgICAgIHRyYW5zZmVyYWJsZVtrZXldID0ge1xuICAgICAgICAgICAgYnl0ZXM6IHZhbHVlLmJ1ZmZlcixcbiAgICAgICAgICAgIGJ5dGVPZmZzZXQ6IHZhbHVlLmJ5dGVPZmZzZXQsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiB2YWx1ZS5ieXRlTGVuZ3RoXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmFuc2ZlcmFibGVba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cmFuc2ZlcmFibGU7XG4gICAgfTtcbiAgICAvKiBnbG9iYWwgc2VsZiAqL1xuXG4gICAgLyoqXG4gICAgICogT3VyIHdlYiB3b3JrZXIgaW50ZXJmYWNlIHNvIHRoYXQgdGhpbmdzIGNhbiB0YWxrIHRvIGFlcy1kZWNyeXB0ZXJcbiAgICAgKiB0aGF0IHdpbGwgYmUgcnVubmluZyBpbiBhIHdlYiB3b3JrZXIuIHRoZSBzY29wZSBpcyBwYXNzZWQgdG8gdGhpcyBieVxuICAgICAqIHdlYndvcmtpZnkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2VsZlxuICAgICAqICAgICAgICB0aGUgc2NvcGUgZm9yIHRoZSB3ZWIgd29ya2VyXG4gICAgICovXG5cblxuICAgIHZhciBEZWNyeXB0ZXJXb3JrZXIgPSBmdW5jdGlvbiBEZWNyeXB0ZXJXb3JrZXIoc2VsZikge1xuICAgICAgc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBldmVudC5kYXRhO1xuICAgICAgICB2YXIgZW5jcnlwdGVkID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5lbmNyeXB0ZWQuYnl0ZXMsIGRhdGEuZW5jcnlwdGVkLmJ5dGVPZmZzZXQsIGRhdGEuZW5jcnlwdGVkLmJ5dGVMZW5ndGgpO1xuICAgICAgICB2YXIga2V5ID0gbmV3IFVpbnQzMkFycmF5KGRhdGEua2V5LmJ5dGVzLCBkYXRhLmtleS5ieXRlT2Zmc2V0LCBkYXRhLmtleS5ieXRlTGVuZ3RoIC8gNCk7XG4gICAgICAgIHZhciBpdiA9IG5ldyBVaW50MzJBcnJheShkYXRhLml2LmJ5dGVzLCBkYXRhLml2LmJ5dGVPZmZzZXQsIGRhdGEuaXYuYnl0ZUxlbmd0aCAvIDQpO1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcsIGhhbmRsZS1jYWxsYmFjay1lcnIgKi9cblxuICAgICAgICBuZXcgRGVjcnlwdGVyKGVuY3J5cHRlZCwga2V5LCBpdiwgZnVuY3Rpb24gKGVyciwgYnl0ZXMpIHtcbiAgICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKGNyZWF0ZVRyYW5zZmVyYWJsZU1lc3NhZ2Uoe1xuICAgICAgICAgICAgc291cmNlOiBkYXRhLnNvdXJjZSxcbiAgICAgICAgICAgIGRlY3J5cHRlZDogYnl0ZXNcbiAgICAgICAgICB9KSwgW2J5dGVzLmJ1ZmZlcl0pO1xuICAgICAgICB9KTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIGRlY3J5cHRlcldvcmtlciA9IG5ldyBEZWNyeXB0ZXJXb3JrZXIoc2VsZik7XG4gICAgcmV0dXJuIGRlY3J5cHRlcldvcmtlcjtcbiAgfSgpO1xufSk7XG4vKipcbiAqIENvbnZlcnQgdGhlIHByb3BlcnRpZXMgb2YgYW4gSExTIHRyYWNrIGludG8gYW4gYXVkaW9UcmFja0tpbmQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgYXVkaW9UcmFja0tpbmRfID0gZnVuY3Rpb24gYXVkaW9UcmFja0tpbmRfKHByb3BlcnRpZXMpIHtcbiAgdmFyIGtpbmQgPSBwcm9wZXJ0aWVzW1wiZGVmYXVsdFwiXSA/ICdtYWluJyA6ICdhbHRlcm5hdGl2ZSc7XG5cbiAgaWYgKHByb3BlcnRpZXMuY2hhcmFjdGVyaXN0aWNzICYmIHByb3BlcnRpZXMuY2hhcmFjdGVyaXN0aWNzLmluZGV4T2YoJ3B1YmxpYy5hY2Nlc3NpYmlsaXR5LmRlc2NyaWJlcy12aWRlbycpID49IDApIHtcbiAgICBraW5kID0gJ21haW4tZGVzYyc7XG4gIH1cblxuICByZXR1cm4ga2luZDtcbn07XG4vKipcbiAqIFBhdXNlIHByb3ZpZGVkIHNlZ21lbnQgbG9hZGVyIGFuZCBwbGF5bGlzdCBsb2FkZXIgaWYgYWN0aXZlXG4gKlxuICogQHBhcmFtIHtTZWdtZW50TG9hZGVyfSBzZWdtZW50TG9hZGVyXG4gKiAgICAgICAgU2VnbWVudExvYWRlciB0byBwYXVzZVxuICogQHBhcmFtIHtPYmplY3R9IG1lZGlhVHlwZVxuICogICAgICAgIEFjdGl2ZSBtZWRpYSB0eXBlXG4gKiBAZnVuY3Rpb24gc3RvcExvYWRlcnNcbiAqL1xuXG5cbnZhciBzdG9wTG9hZGVycyA9IGZ1bmN0aW9uIHN0b3BMb2FkZXJzKHNlZ21lbnRMb2FkZXIsIG1lZGlhVHlwZSkge1xuICBzZWdtZW50TG9hZGVyLmFib3J0KCk7XG4gIHNlZ21lbnRMb2FkZXIucGF1c2UoKTtcblxuICBpZiAobWVkaWFUeXBlICYmIG1lZGlhVHlwZS5hY3RpdmVQbGF5bGlzdExvYWRlcikge1xuICAgIG1lZGlhVHlwZS5hY3RpdmVQbGF5bGlzdExvYWRlci5wYXVzZSgpO1xuICAgIG1lZGlhVHlwZS5hY3RpdmVQbGF5bGlzdExvYWRlciA9IG51bGw7XG4gIH1cbn07XG4vKipcbiAqIFN0YXJ0IGxvYWRpbmcgcHJvdmlkZWQgc2VnbWVudCBsb2FkZXIgYW5kIHBsYXlsaXN0IGxvYWRlclxuICpcbiAqIEBwYXJhbSB7UGxheWxpc3RMb2FkZXJ9IHBsYXlsaXN0TG9hZGVyXG4gKiAgICAgICAgUGxheWxpc3RMb2FkZXIgdG8gc3RhcnQgbG9hZGluZ1xuICogQHBhcmFtIHtPYmplY3R9IG1lZGlhVHlwZVxuICogICAgICAgIEFjdGl2ZSBtZWRpYSB0eXBlXG4gKiBAZnVuY3Rpb24gc3RhcnRMb2FkZXJzXG4gKi9cblxuXG52YXIgc3RhcnRMb2FkZXJzID0gZnVuY3Rpb24gc3RhcnRMb2FkZXJzKHBsYXlsaXN0TG9hZGVyLCBtZWRpYVR5cGUpIHtcbiAgLy8gU2VnbWVudCBsb2FkZXIgd2lsbCBiZSBzdGFydGVkIGFmdGVyIGBsb2FkZWRtZXRhZGF0YWAgb3IgYGxvYWRlZHBsYXlsaXN0YCBmcm9tIHRoZVxuICAvLyBwbGF5bGlzdCBsb2FkZXJcbiAgbWVkaWFUeXBlLmFjdGl2ZVBsYXlsaXN0TG9hZGVyID0gcGxheWxpc3RMb2FkZXI7XG4gIHBsYXlsaXN0TG9hZGVyLmxvYWQoKTtcbn07XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgbWVkaWEgZ3JvdXAgY2hhbmdlcy4gSXQgcGVyZm9ybXMgYVxuICogbm9uLWRlc3RydWN0aXZlIChwcmVzZXJ2ZSB0aGUgYnVmZmVyKSByZXN5bmMgb2YgdGhlIFNlZ21lbnRMb2FkZXIuIFRoaXMgaXMgYmVjYXVzZSBhXG4gKiBjaGFuZ2Ugb2YgZ3JvdXAgaXMgbWVyZWx5IGEgcmVuZGl0aW9uIHN3aXRjaCBvZiB0aGUgc2FtZSBjb250ZW50IGF0IGFub3RoZXIgZW5jb2RpbmcsXG4gKiByYXRoZXIgdGhhbiBhIGNoYW5nZSBvZiBjb250ZW50LCBzdWNoIGFzIHN3aXRjaGluZyBhdWRpbyBmcm9tIEVuZ2xpc2ggdG8gU3BhbmlzaC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogICAgICAgIE1lZGlhR3JvdXAgdHlwZVxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiAgICAgICAgIEhhbmRsZXIgZm9yIGEgbm9uLWRlc3RydWN0aXZlIHJlc3luYyBvZiBTZWdtZW50TG9hZGVyIHdoZW4gdGhlIGFjdGl2ZSBtZWRpYVxuICogICAgICAgICBncm91cCBjaGFuZ2VzLlxuICogQGZ1bmN0aW9uIG9uR3JvdXBDaGFuZ2VkXG4gKi9cblxuXG52YXIgb25Hcm91cENoYW5nZWQgPSBmdW5jdGlvbiBvbkdyb3VwQ2hhbmdlZCh0eXBlLCBzZXR0aW5ncykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfc2V0dGluZ3Mkc2VnbWVudExvYWQgPSBzZXR0aW5ncy5zZWdtZW50TG9hZGVycyxcbiAgICAgICAgc2VnbWVudExvYWRlciA9IF9zZXR0aW5ncyRzZWdtZW50TG9hZFt0eXBlXSxcbiAgICAgICAgbWFpblNlZ21lbnRMb2FkZXIgPSBfc2V0dGluZ3Mkc2VnbWVudExvYWQubWFpbixcbiAgICAgICAgbWVkaWFUeXBlID0gc2V0dGluZ3MubWVkaWFUeXBlc1t0eXBlXTtcbiAgICB2YXIgYWN0aXZlVHJhY2sgPSBtZWRpYVR5cGUuYWN0aXZlVHJhY2soKTtcbiAgICB2YXIgYWN0aXZlR3JvdXAgPSBtZWRpYVR5cGUuYWN0aXZlR3JvdXAoYWN0aXZlVHJhY2spO1xuICAgIHZhciBwcmV2aW91c0FjdGl2ZUxvYWRlciA9IG1lZGlhVHlwZS5hY3RpdmVQbGF5bGlzdExvYWRlcjtcbiAgICBzdG9wTG9hZGVycyhzZWdtZW50TG9hZGVyLCBtZWRpYVR5cGUpO1xuXG4gICAgaWYgKCFhY3RpdmVHcm91cCkge1xuICAgICAgLy8gdGhlcmUgaXMgbm8gZ3JvdXAgYWN0aXZlXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFhY3RpdmVHcm91cC5wbGF5bGlzdExvYWRlcikge1xuICAgICAgaWYgKHByZXZpb3VzQWN0aXZlTG9hZGVyKSB7XG4gICAgICAgIC8vIFRoZSBwcmV2aW91cyBncm91cCBoYWQgYSBwbGF5bGlzdCBsb2FkZXIgYnV0IHRoZSBuZXcgYWN0aXZlIGdyb3VwIGRvZXMgbm90XG4gICAgICAgIC8vIHRoaXMgbWVhbnMgd2UgYXJlIHN3aXRjaGluZyBmcm9tIGRlbXV4ZWQgdG8gbXV4ZWQgYXVkaW8uIEluIHRoaXMgY2FzZSB3ZSB3YW50IHRvXG4gICAgICAgIC8vIGRvIGEgZGVzdHJ1Y3RpdmUgcmVzZXQgb2YgdGhlIG1haW4gc2VnbWVudCBsb2FkZXIgYW5kIG5vdCByZXN0YXJ0IHRoZSBhdWRpb1xuICAgICAgICAvLyBsb2FkZXJzLlxuICAgICAgICBtYWluU2VnbWVudExvYWRlci5yZXNldEV2ZXJ5dGhpbmcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gTm9uLWRlc3RydWN0aXZlIHJlc3luY1xuXG5cbiAgICBzZWdtZW50TG9hZGVyLnJlc3luY0xvYWRlcigpO1xuICAgIHN0YXJ0TG9hZGVycyhhY3RpdmVHcm91cC5wbGF5bGlzdExvYWRlciwgbWVkaWFUeXBlKTtcbiAgfTtcbn07XG5cbnZhciBvbkdyb3VwQ2hhbmdpbmcgPSBmdW5jdGlvbiBvbkdyb3VwQ2hhbmdpbmcodHlwZSwgc2V0dGluZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VnbWVudExvYWRlciA9IHNldHRpbmdzLnNlZ21lbnRMb2FkZXJzW3R5cGVdO1xuICAgIHNlZ21lbnRMb2FkZXIuYWJvcnQoKTtcbiAgICBzZWdtZW50TG9hZGVyLnBhdXNlKCk7XG4gIH07XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIG1lZGlhIHRyYWNrIGNoYW5nZXMuIEl0IHBlcmZvcm1zIGFcbiAqIGRlc3RydWN0aXZlIHJlc2V0IG9mIHRoZSBTZWdtZW50TG9hZGVyIHRvIGVuc3VyZSB3ZSBzdGFydCBsb2FkaW5nIGFzIGNsb3NlIHRvXG4gKiBjdXJyZW50VGltZSBhcyBwb3NzaWJsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogICAgICAgIE1lZGlhR3JvdXAgdHlwZVxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiAgICAgICAgIEhhbmRsZXIgZm9yIGEgZGVzdHJ1Y3RpdmUgcmVzZXQgb2YgU2VnbWVudExvYWRlciB3aGVuIHRoZSBhY3RpdmUgbWVkaWFcbiAqICAgICAgICAgdHJhY2sgY2hhbmdlcy5cbiAqIEBmdW5jdGlvbiBvblRyYWNrQ2hhbmdlZFxuICovXG5cblxudmFyIG9uVHJhY2tDaGFuZ2VkID0gZnVuY3Rpb24gb25UcmFja0NoYW5nZWQodHlwZSwgc2V0dGluZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3NldHRpbmdzJHNlZ21lbnRMb2FkMiA9IHNldHRpbmdzLnNlZ21lbnRMb2FkZXJzLFxuICAgICAgICBzZWdtZW50TG9hZGVyID0gX3NldHRpbmdzJHNlZ21lbnRMb2FkMlt0eXBlXSxcbiAgICAgICAgbWFpblNlZ21lbnRMb2FkZXIgPSBfc2V0dGluZ3Mkc2VnbWVudExvYWQyLm1haW4sXG4gICAgICAgIG1lZGlhVHlwZSA9IHNldHRpbmdzLm1lZGlhVHlwZXNbdHlwZV07XG4gICAgdmFyIGFjdGl2ZVRyYWNrID0gbWVkaWFUeXBlLmFjdGl2ZVRyYWNrKCk7XG4gICAgdmFyIGFjdGl2ZUdyb3VwID0gbWVkaWFUeXBlLmFjdGl2ZUdyb3VwKGFjdGl2ZVRyYWNrKTtcbiAgICB2YXIgcHJldmlvdXNBY3RpdmVMb2FkZXIgPSBtZWRpYVR5cGUuYWN0aXZlUGxheWxpc3RMb2FkZXI7XG4gICAgc3RvcExvYWRlcnMoc2VnbWVudExvYWRlciwgbWVkaWFUeXBlKTtcblxuICAgIGlmICghYWN0aXZlR3JvdXApIHtcbiAgICAgIC8vIHRoZXJlIGlzIG5vIGdyb3VwIGFjdGl2ZSBzbyB3ZSBkbyBub3Qgd2FudCB0byByZXN0YXJ0IGxvYWRlcnNcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gJ0FVRElPJykge1xuICAgICAgaWYgKCFhY3RpdmVHcm91cC5wbGF5bGlzdExvYWRlcikge1xuICAgICAgICAvLyB3aGVuIHN3aXRjaGluZyBmcm9tIGRlbXV4ZWQgYXVkaW8vdmlkZW8gdG8gbXV4ZWQgYXVkaW8vdmlkZW8gKG5vdGVkIGJ5IG5vXG4gICAgICAgIC8vIHBsYXlsaXN0IGxvYWRlciBmb3IgdGhlIGF1ZGlvIGdyb3VwKSwgd2Ugd2FudCB0byBkbyBhIGRlc3RydWN0aXZlIHJlc2V0IG9mIHRoZVxuICAgICAgICAvLyBtYWluIHNlZ21lbnQgbG9hZGVyIGFuZCBub3QgcmVzdGFydCB0aGUgYXVkaW8gbG9hZGVyc1xuICAgICAgICBtYWluU2VnbWVudExvYWRlci5zZXRBdWRpbyh0cnVlKTsgLy8gZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBkaXNhYmxpbmcgdGhlIGF1ZGlvIG9mIHRoZSBhdWRpbyBzZWdtZW50IGxvYWRlciBzaW5jZVxuICAgICAgICAvLyBpdCBzaG91bGQgYmUgc3RvcHBlZFxuXG4gICAgICAgIG1haW5TZWdtZW50TG9hZGVyLnJlc2V0RXZlcnl0aGluZygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIGFsdGhvdWdoIHRoZSBzZWdtZW50IGxvYWRlciBpcyBhbiBhdWRpbyBzZWdtZW50IGxvYWRlciwgY2FsbCB0aGUgc2V0QXVkaW9cbiAgICAgIC8vIGZ1bmN0aW9uIHRvIGVuc3VyZSBpdCBpcyBwcmVwYXJlZCB0byByZS1hcHBlbmQgdGhlIGluaXQgc2VnbWVudCAob3IgaGFuZGxlIG90aGVyXG4gICAgICAvLyBjb25maWcgY2hhbmdlcylcblxuXG4gICAgICBzZWdtZW50TG9hZGVyLnNldEF1ZGlvKHRydWUpO1xuICAgICAgbWFpblNlZ21lbnRMb2FkZXIuc2V0QXVkaW8oZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChwcmV2aW91c0FjdGl2ZUxvYWRlciA9PT0gYWN0aXZlR3JvdXAucGxheWxpc3RMb2FkZXIpIHtcbiAgICAgIC8vIE5vdGhpbmcgaGFzIGFjdHVhbGx5IGNoYW5nZWQuIFRoaXMgY2FuIGhhcHBlbiBiZWNhdXNlIHRyYWNrIGNoYW5nZSBldmVudHMgY2FuIGZpcmVcbiAgICAgIC8vIG11bHRpcGxlIHRpbWVzIGZvciBhIFwic2luZ2xlXCIgY2hhbmdlLiBPbmUgZm9yIGVuYWJsaW5nIHRoZSBuZXcgYWN0aXZlIHRyYWNrLCBhbmRcbiAgICAgIC8vIG9uZSBmb3IgZGlzYWJsaW5nIHRoZSB0cmFjayB0aGF0IHdhcyBhY3RpdmVcbiAgICAgIHN0YXJ0TG9hZGVycyhhY3RpdmVHcm91cC5wbGF5bGlzdExvYWRlciwgbWVkaWFUeXBlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudExvYWRlci50cmFjaykge1xuICAgICAgLy8gRm9yIFdlYlZUVCwgc2V0IHRoZSBuZXcgdGV4dCB0cmFjayBpbiB0aGUgc2VnbWVudGxvYWRlclxuICAgICAgc2VnbWVudExvYWRlci50cmFjayhhY3RpdmVUcmFjayk7XG4gICAgfSAvLyBkZXN0cnVjdGl2ZSByZXNldFxuXG5cbiAgICBzZWdtZW50TG9hZGVyLnJlc2V0RXZlcnl0aGluZygpO1xuICAgIHN0YXJ0TG9hZGVycyhhY3RpdmVHcm91cC5wbGF5bGlzdExvYWRlciwgbWVkaWFUeXBlKTtcbiAgfTtcbn07XG5cbnZhciBvbkVycm9yID0ge1xuICAvKipcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIGEgU2VnbWVudExvYWRlciBvciBQbGF5bGlzdExvYWRlciBlbmNvdW50ZXJzXG4gICAqIGFuIGVycm9yLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgTWVkaWFHcm91cCB0eXBlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICogICAgICAgICBFcnJvciBoYW5kbGVyLiBMb2dzIHdhcm5pbmcgKG9yIGVycm9yIGlmIHRoZSBwbGF5bGlzdCBpcyBibGFja2xpc3RlZCkgdG9cbiAgICogICAgICAgICBjb25zb2xlIGFuZCBzd2l0Y2hlcyBiYWNrIHRvIGRlZmF1bHQgYXVkaW8gdHJhY2suXG4gICAqIEBmdW5jdGlvbiBvbkVycm9yLkFVRElPXG4gICAqL1xuICBBVURJTzogZnVuY3Rpb24gQVVESU8odHlwZSwgc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlZ21lbnRMb2FkZXIgPSBzZXR0aW5ncy5zZWdtZW50TG9hZGVyc1t0eXBlXSxcbiAgICAgICAgICBtZWRpYVR5cGUgPSBzZXR0aW5ncy5tZWRpYVR5cGVzW3R5cGVdLFxuICAgICAgICAgIGJsYWNrbGlzdEN1cnJlbnRQbGF5bGlzdCA9IHNldHRpbmdzLmJsYWNrbGlzdEN1cnJlbnRQbGF5bGlzdDtcbiAgICAgIHN0b3BMb2FkZXJzKHNlZ21lbnRMb2FkZXIsIG1lZGlhVHlwZSk7IC8vIHN3aXRjaCBiYWNrIHRvIGRlZmF1bHQgYXVkaW8gdHJhY2tcblxuICAgICAgdmFyIGFjdGl2ZVRyYWNrID0gbWVkaWFUeXBlLmFjdGl2ZVRyYWNrKCk7XG4gICAgICB2YXIgYWN0aXZlR3JvdXAgPSBtZWRpYVR5cGUuYWN0aXZlR3JvdXAoKTtcbiAgICAgIHZhciBpZCA9IChhY3RpdmVHcm91cC5maWx0ZXIoZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBncm91cFtcImRlZmF1bHRcIl07XG4gICAgICB9KVswXSB8fCBhY3RpdmVHcm91cFswXSkuaWQ7XG4gICAgICB2YXIgZGVmYXVsdFRyYWNrID0gbWVkaWFUeXBlLnRyYWNrc1tpZF07XG5cbiAgICAgIGlmIChhY3RpdmVUcmFjayA9PT0gZGVmYXVsdFRyYWNrKSB7XG4gICAgICAgIC8vIERlZmF1bHQgdHJhY2sgZW5jb3VudGVyZWQgYW4gZXJyb3IuIEFsbCB3ZSBjYW4gZG8gbm93IGlzIGJsYWNrbGlzdCB0aGUgY3VycmVudFxuICAgICAgICAvLyByZW5kaXRpb24gYW5kIGhvcGUgYW5vdGhlciB3aWxsIHN3aXRjaCBhdWRpbyBncm91cHNcbiAgICAgICAgYmxhY2tsaXN0Q3VycmVudFBsYXlsaXN0KHtcbiAgICAgICAgICBtZXNzYWdlOiAnUHJvYmxlbSBlbmNvdW50ZXJlZCBsb2FkaW5nIHRoZSBkZWZhdWx0IGF1ZGlvIHRyYWNrLidcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdQcm9ibGVtIGVuY291bnRlcmVkIGxvYWRpbmcgdGhlIGFsdGVybmF0ZSBhdWRpbyB0cmFjay4nICsgJ1N3aXRjaGluZyBiYWNrIHRvIGRlZmF1bHQuJyk7XG5cbiAgICAgIGZvciAodmFyIHRyYWNrSWQgaW4gbWVkaWFUeXBlLnRyYWNrcykge1xuICAgICAgICBtZWRpYVR5cGUudHJhY2tzW3RyYWNrSWRdLmVuYWJsZWQgPSBtZWRpYVR5cGUudHJhY2tzW3RyYWNrSWRdID09PSBkZWZhdWx0VHJhY2s7XG4gICAgICB9XG5cbiAgICAgIG1lZGlhVHlwZS5vblRyYWNrQ2hhbmdlZCgpO1xuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBhIFNlZ21lbnRMb2FkZXIgb3IgUGxheWxpc3RMb2FkZXIgZW5jb3VudGVyc1xuICAgKiBhbiBlcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogICAgICAgIE1lZGlhR3JvdXAgdHlwZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3NcbiAgICogICAgICAgIE9iamVjdCBjb250YWluaW5nIHJlcXVpcmVkIGluZm9ybWF0aW9uIGZvciBtZWRpYSBncm91cHNcbiAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAqICAgICAgICAgRXJyb3IgaGFuZGxlci4gTG9ncyB3YXJuaW5nIHRvIGNvbnNvbGUgYW5kIGRpc2FibGVzIHRoZSBhY3RpdmUgc3VidGl0bGUgdHJhY2tcbiAgICogQGZ1bmN0aW9uIG9uRXJyb3IuU1VCVElUTEVTXG4gICAqL1xuICBTVUJUSVRMRVM6IGZ1bmN0aW9uIFNVQlRJVExFUyh0eXBlLCBzZXR0aW5ncykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VnbWVudExvYWRlciA9IHNldHRpbmdzLnNlZ21lbnRMb2FkZXJzW3R5cGVdLFxuICAgICAgICAgIG1lZGlhVHlwZSA9IHNldHRpbmdzLm1lZGlhVHlwZXNbdHlwZV07XG4gICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ1Byb2JsZW0gZW5jb3VudGVyZWQgbG9hZGluZyB0aGUgc3VidGl0bGUgdHJhY2suJyArICdEaXNhYmxpbmcgc3VidGl0bGUgdHJhY2suJyk7XG4gICAgICBzdG9wTG9hZGVycyhzZWdtZW50TG9hZGVyLCBtZWRpYVR5cGUpO1xuICAgICAgdmFyIHRyYWNrID0gbWVkaWFUeXBlLmFjdGl2ZVRyYWNrKCk7XG5cbiAgICAgIGlmICh0cmFjaykge1xuICAgICAgICB0cmFjay5tb2RlID0gJ2Rpc2FibGVkJztcbiAgICAgIH1cblxuICAgICAgbWVkaWFUeXBlLm9uVHJhY2tDaGFuZ2VkKCk7XG4gICAgfTtcbiAgfVxufTtcbnZhciBzZXR1cExpc3RlbmVycyA9IHtcbiAgLyoqXG4gICAqIFNldHVwIGV2ZW50IGxpc3RlbmVycyBmb3IgYXVkaW8gcGxheWxpc3QgbG9hZGVyXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBNZWRpYUdyb3VwIHR5cGVcbiAgICogQHBhcmFtIHtQbGF5bGlzdExvYWRlcnxudWxsfSBwbGF5bGlzdExvYWRlclxuICAgKiAgICAgICAgUGxheWxpc3RMb2FkZXIgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzIG9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICAgKiBAZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMuQVVESU9cbiAgICovXG4gIEFVRElPOiBmdW5jdGlvbiBBVURJTyh0eXBlLCBwbGF5bGlzdExvYWRlciwgc2V0dGluZ3MpIHtcbiAgICBpZiAoIXBsYXlsaXN0TG9hZGVyKSB7XG4gICAgICAvLyBubyBwbGF5bGlzdCBsb2FkZXIgbWVhbnMgYXVkaW8gd2lsbCBiZSBtdXhlZCB3aXRoIHRoZSB2aWRlb1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0ZWNoID0gc2V0dGluZ3MudGVjaCxcbiAgICAgICAgcmVxdWVzdE9wdGlvbnMgPSBzZXR0aW5ncy5yZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgc2VnbWVudExvYWRlciA9IHNldHRpbmdzLnNlZ21lbnRMb2FkZXJzW3R5cGVdO1xuICAgIHBsYXlsaXN0TG9hZGVyLm9uKCdsb2FkZWRtZXRhZGF0YScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtZWRpYSA9IHBsYXlsaXN0TG9hZGVyLm1lZGlhKCk7XG4gICAgICBzZWdtZW50TG9hZGVyLnBsYXlsaXN0KG1lZGlhLCByZXF1ZXN0T3B0aW9ucyk7IC8vIGlmIHRoZSB2aWRlbyBpcyBhbHJlYWR5IHBsYXlpbmcsIG9yIGlmIHRoaXMgaXNuJ3QgYSBsaXZlIHZpZGVvIGFuZCBwcmVsb2FkXG4gICAgICAvLyBwZXJtaXRzLCBzdGFydCBkb3dubG9hZGluZyBzZWdtZW50c1xuXG4gICAgICBpZiAoIXRlY2gucGF1c2VkKCkgfHwgbWVkaWEuZW5kTGlzdCAmJiB0ZWNoLnByZWxvYWQoKSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIHNlZ21lbnRMb2FkZXIubG9hZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHBsYXlsaXN0TG9hZGVyLm9uKCdsb2FkZWRwbGF5bGlzdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlZ21lbnRMb2FkZXIucGxheWxpc3QocGxheWxpc3RMb2FkZXIubWVkaWEoKSwgcmVxdWVzdE9wdGlvbnMpOyAvLyBJZiB0aGUgcGxheWVyIGlzbid0IHBhdXNlZCwgZW5zdXJlIHRoYXQgdGhlIHNlZ21lbnQgbG9hZGVyIGlzIHJ1bm5pbmdcblxuICAgICAgaWYgKCF0ZWNoLnBhdXNlZCgpKSB7XG4gICAgICAgIHNlZ21lbnRMb2FkZXIubG9hZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHBsYXlsaXN0TG9hZGVyLm9uKCdlcnJvcicsIG9uRXJyb3JbdHlwZV0odHlwZSwgc2V0dGluZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0dXAgZXZlbnQgbGlzdGVuZXJzIGZvciBzdWJ0aXRsZSBwbGF5bGlzdCBsb2FkZXJcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogICAgICAgIE1lZGlhR3JvdXAgdHlwZVxuICAgKiBAcGFyYW0ge1BsYXlsaXN0TG9hZGVyfG51bGx9IHBsYXlsaXN0TG9hZGVyXG4gICAqICAgICAgICBQbGF5bGlzdExvYWRlciB0byByZWdpc3RlciBsaXN0ZW5lcnMgb25cbiAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gICAqICAgICAgICBPYmplY3QgY29udGFpbmluZyByZXF1aXJlZCBpbmZvcm1hdGlvbiBmb3IgbWVkaWEgZ3JvdXBzXG4gICAqIEBmdW5jdGlvbiBzZXR1cExpc3RlbmVycy5TVUJUSVRMRVNcbiAgICovXG4gIFNVQlRJVExFUzogZnVuY3Rpb24gU1VCVElUTEVTKHR5cGUsIHBsYXlsaXN0TG9hZGVyLCBzZXR0aW5ncykge1xuICAgIHZhciB0ZWNoID0gc2V0dGluZ3MudGVjaCxcbiAgICAgICAgcmVxdWVzdE9wdGlvbnMgPSBzZXR0aW5ncy5yZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgc2VnbWVudExvYWRlciA9IHNldHRpbmdzLnNlZ21lbnRMb2FkZXJzW3R5cGVdLFxuICAgICAgICBtZWRpYVR5cGUgPSBzZXR0aW5ncy5tZWRpYVR5cGVzW3R5cGVdO1xuICAgIHBsYXlsaXN0TG9hZGVyLm9uKCdsb2FkZWRtZXRhZGF0YScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtZWRpYSA9IHBsYXlsaXN0TG9hZGVyLm1lZGlhKCk7XG4gICAgICBzZWdtZW50TG9hZGVyLnBsYXlsaXN0KG1lZGlhLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgICBzZWdtZW50TG9hZGVyLnRyYWNrKG1lZGlhVHlwZS5hY3RpdmVUcmFjaygpKTsgLy8gaWYgdGhlIHZpZGVvIGlzIGFscmVhZHkgcGxheWluZywgb3IgaWYgdGhpcyBpc24ndCBhIGxpdmUgdmlkZW8gYW5kIHByZWxvYWRcbiAgICAgIC8vIHBlcm1pdHMsIHN0YXJ0IGRvd25sb2FkaW5nIHNlZ21lbnRzXG5cbiAgICAgIGlmICghdGVjaC5wYXVzZWQoKSB8fCBtZWRpYS5lbmRMaXN0ICYmIHRlY2gucHJlbG9hZCgpICE9PSAnbm9uZScpIHtcbiAgICAgICAgc2VnbWVudExvYWRlci5sb2FkKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcGxheWxpc3RMb2FkZXIub24oJ2xvYWRlZHBsYXlsaXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VnbWVudExvYWRlci5wbGF5bGlzdChwbGF5bGlzdExvYWRlci5tZWRpYSgpLCByZXF1ZXN0T3B0aW9ucyk7IC8vIElmIHRoZSBwbGF5ZXIgaXNuJ3QgcGF1c2VkLCBlbnN1cmUgdGhhdCB0aGUgc2VnbWVudCBsb2FkZXIgaXMgcnVubmluZ1xuXG4gICAgICBpZiAoIXRlY2gucGF1c2VkKCkpIHtcbiAgICAgICAgc2VnbWVudExvYWRlci5sb2FkKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcGxheWxpc3RMb2FkZXIub24oJ2Vycm9yJywgb25FcnJvclt0eXBlXSh0eXBlLCBzZXR0aW5ncykpO1xuICB9XG59O1xudmFyIGluaXRpYWxpemUgPSB7XG4gIC8qKlxuICAgKiBTZXR1cCBQbGF5bGlzdExvYWRlcnMgYW5kIEF1ZGlvVHJhY2tzIGZvciB0aGUgYXVkaW8gZ3JvdXBzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBNZWRpYUdyb3VwIHR5cGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4gICAqICAgICAgICBPYmplY3QgY29udGFpbmluZyByZXF1aXJlZCBpbmZvcm1hdGlvbiBmb3IgbWVkaWEgZ3JvdXBzXG4gICAqIEBmdW5jdGlvbiBpbml0aWFsaXplLkFVRElPXG4gICAqL1xuICAnQVVESU8nOiBmdW5jdGlvbiBBVURJTyh0eXBlLCBzZXR0aW5ncykge1xuICAgIHZhciB2aHMgPSBzZXR0aW5ncy52aHMsXG4gICAgICAgIHNvdXJjZVR5cGUgPSBzZXR0aW5ncy5zb3VyY2VUeXBlLFxuICAgICAgICBzZWdtZW50TG9hZGVyID0gc2V0dGluZ3Muc2VnbWVudExvYWRlcnNbdHlwZV0sXG4gICAgICAgIHJlcXVlc3RPcHRpb25zID0gc2V0dGluZ3MucmVxdWVzdE9wdGlvbnMsXG4gICAgICAgIF9zZXR0aW5ncyRtYXN0ZXIgPSBzZXR0aW5ncy5tYXN0ZXIsXG4gICAgICAgIG1lZGlhR3JvdXBzID0gX3NldHRpbmdzJG1hc3Rlci5tZWRpYUdyb3VwcyxcbiAgICAgICAgcGxheWxpc3RzID0gX3NldHRpbmdzJG1hc3Rlci5wbGF5bGlzdHMsXG4gICAgICAgIF9zZXR0aW5ncyRtZWRpYVR5cGVzJCA9IHNldHRpbmdzLm1lZGlhVHlwZXNbdHlwZV0sXG4gICAgICAgIGdyb3VwcyA9IF9zZXR0aW5ncyRtZWRpYVR5cGVzJC5ncm91cHMsXG4gICAgICAgIHRyYWNrcyA9IF9zZXR0aW5ncyRtZWRpYVR5cGVzJC50cmFja3MsXG4gICAgICAgIG1hc3RlclBsYXlsaXN0TG9hZGVyID0gc2V0dGluZ3MubWFzdGVyUGxheWxpc3RMb2FkZXI7IC8vIGZvcmNlIGEgZGVmYXVsdCBpZiB3ZSBoYXZlIG5vbmVcblxuICAgIGlmICghbWVkaWFHcm91cHNbdHlwZV0gfHwgT2JqZWN0LmtleXMobWVkaWFHcm91cHNbdHlwZV0pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbWVkaWFHcm91cHNbdHlwZV0gPSB7XG4gICAgICAgIG1haW46IHtcbiAgICAgICAgICBcImRlZmF1bHRcIjoge1xuICAgICAgICAgICAgXCJkZWZhdWx0XCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoZ3JvdXBJZCkge1xuICAgICAgaWYgKCFncm91cHNbZ3JvdXBJZF0pIHtcbiAgICAgICAgZ3JvdXBzW2dyb3VwSWRdID0gW107XG4gICAgICB9IC8vIExpc3Qgb2YgcGxheWxpc3RzIHRoYXQgaGF2ZSBhbiBBVURJTyBhdHRyaWJ1dGUgdmFsdWUgbWF0Y2hpbmcgdGhlIGN1cnJlbnRcbiAgICAgIC8vIGdyb3VwIElEXG5cblxuICAgICAgdmFyIGdyb3VwUGxheWxpc3RzID0gcGxheWxpc3RzLmZpbHRlcihmdW5jdGlvbiAocGxheWxpc3QpIHtcbiAgICAgICAgcmV0dXJuIHBsYXlsaXN0LmF0dHJpYnV0ZXNbdHlwZV0gPT09IGdyb3VwSWQ7XG4gICAgICB9KTtcblxuICAgICAgdmFyIF9sb29wMiA9IGZ1bmN0aW9uIF9sb29wMih2YXJpYW50TGFiZWwpIHtcbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBtZWRpYUdyb3Vwc1t0eXBlXVtncm91cElkXVt2YXJpYW50TGFiZWxdOyAvLyBMaXN0IG9mIHBsYXlsaXN0cyBmb3IgdGhlIGN1cnJlbnQgZ3JvdXAgSUQgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgdXJpIHdpdGhcbiAgICAgICAgLy8gdGhpcyBhbHRlcm5hdGUgYXVkaW8gdmFyaWFudFxuXG4gICAgICAgIHZhciBtYXRjaGluZ1BsYXlsaXN0cyA9IGdyb3VwUGxheWxpc3RzLmZpbHRlcihmdW5jdGlvbiAocGxheWxpc3QpIHtcbiAgICAgICAgICByZXR1cm4gcGxheWxpc3QucmVzb2x2ZWRVcmkgPT09IHByb3BlcnRpZXMucmVzb2x2ZWRVcmk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGluZ1BsYXlsaXN0cy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIHBsYXlsaXN0IHRoYXQgaGFzIHRoZSBzYW1lIHVyaSBhcyB0aGlzIGF1ZGlvIHZhcmlhbnQsIGFzc3VtZVxuICAgICAgICAgIC8vIHRoYXQgdGhlIHBsYXlsaXN0IGlzIGF1ZGlvIG9ubHkuIFdlIGRlbGV0ZSB0aGUgcmVzb2x2ZWRVcmkgcHJvcGVydHkgaGVyZVxuICAgICAgICAgIC8vIHRvIHByZXZlbnQgYSBwbGF5bGlzdCBsb2FkZXIgZnJvbSBiZWluZyBjcmVhdGVkIHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZVxuICAgICAgICAgIC8vIGJvdGggdGhlIG1haW4gYW5kIGF1ZGlvIHNlZ21lbnQgbG9hZGVycyBsb2FkaW5nIHRoZSBzYW1lIGF1ZGlvIHNlZ21lbnRzXG4gICAgICAgICAgLy8gZnJvbSB0aGUgc2FtZSBwbGF5bGlzdC5cbiAgICAgICAgICBkZWxldGUgcHJvcGVydGllcy5yZXNvbHZlZFVyaTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwbGF5bGlzdExvYWRlciA9IHZvaWQgMDsgLy8gaWYgdmhzLWpzb24gd2FzIHByb3ZpZGVkIGFzIHRoZSBzb3VyY2UsIGFuZCB0aGUgbWVkaWEgcGxheWxpc3Qgd2FzIHJlc29sdmVkLFxuICAgICAgICAvLyB1c2UgdGhlIHJlc29sdmVkIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuXG4gICAgICAgIGlmIChzb3VyY2VUeXBlID09PSAndmhzLWpzb24nICYmIHByb3BlcnRpZXMucGxheWxpc3RzKSB7XG4gICAgICAgICAgcGxheWxpc3RMb2FkZXIgPSBuZXcgUGxheWxpc3RMb2FkZXIocHJvcGVydGllcy5wbGF5bGlzdHNbMF0sIHZocywgcmVxdWVzdE9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnRpZXMucmVzb2x2ZWRVcmkpIHtcbiAgICAgICAgICBwbGF5bGlzdExvYWRlciA9IG5ldyBQbGF5bGlzdExvYWRlcihwcm9wZXJ0aWVzLnJlc29sdmVkVXJpLCB2aHMsIHJlcXVlc3RPcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0aWVzLnBsYXlsaXN0cyAmJiBzb3VyY2VUeXBlID09PSAnZGFzaCcpIHtcbiAgICAgICAgICBwbGF5bGlzdExvYWRlciA9IG5ldyBEYXNoUGxheWxpc3RMb2FkZXIocHJvcGVydGllcy5wbGF5bGlzdHNbMF0sIHZocywgcmVxdWVzdE9wdGlvbnMsIG1hc3RlclBsYXlsaXN0TG9hZGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBubyByZXNvbHZlZFVyaSBtZWFucyB0aGUgYXVkaW8gaXMgbXV4ZWQgd2l0aCB0aGUgdmlkZW8gd2hlbiB1c2luZyB0aGlzXG4gICAgICAgICAgLy8gYXVkaW8gdHJhY2tcbiAgICAgICAgICBwbGF5bGlzdExvYWRlciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9wZXJ0aWVzID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyh7XG4gICAgICAgICAgaWQ6IHZhcmlhbnRMYWJlbCxcbiAgICAgICAgICBwbGF5bGlzdExvYWRlcjogcGxheWxpc3RMb2FkZXJcbiAgICAgICAgfSwgcHJvcGVydGllcyk7XG4gICAgICAgIHNldHVwTGlzdGVuZXJzW3R5cGVdKHR5cGUsIHByb3BlcnRpZXMucGxheWxpc3RMb2FkZXIsIHNldHRpbmdzKTtcbiAgICAgICAgZ3JvdXBzW2dyb3VwSWRdLnB1c2gocHJvcGVydGllcyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0cmFja3NbdmFyaWFudExhYmVsXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB2YXIgdHJhY2sgPSBuZXcgdmlkZW9qcyQxLkF1ZGlvVHJhY2soe1xuICAgICAgICAgICAgaWQ6IHZhcmlhbnRMYWJlbCxcbiAgICAgICAgICAgIGtpbmQ6IGF1ZGlvVHJhY2tLaW5kXyhwcm9wZXJ0aWVzKSxcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IHByb3BlcnRpZXMubGFuZ3VhZ2UsXG4gICAgICAgICAgICBcImRlZmF1bHRcIjogcHJvcGVydGllc1tcImRlZmF1bHRcIl0sXG4gICAgICAgICAgICBsYWJlbDogdmFyaWFudExhYmVsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdHJhY2tzW3ZhcmlhbnRMYWJlbF0gPSB0cmFjaztcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgdmFyaWFudExhYmVsIGluIG1lZGlhR3JvdXBzW3R5cGVdW2dyb3VwSWRdKSB7XG4gICAgICAgIF9sb29wMih2YXJpYW50TGFiZWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBncm91cElkIGluIG1lZGlhR3JvdXBzW3R5cGVdKSB7XG4gICAgICBfbG9vcChncm91cElkKTtcbiAgICB9IC8vIHNldHVwIHNpbmdsZSBlcnJvciBldmVudCBoYW5kbGVyIGZvciB0aGUgc2VnbWVudCBsb2FkZXJcblxuXG4gICAgc2VnbWVudExvYWRlci5vbignZXJyb3InLCBvbkVycm9yW3R5cGVdKHR5cGUsIHNldHRpbmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHVwIFBsYXlsaXN0TG9hZGVycyBhbmQgVGV4dFRyYWNrcyBmb3IgdGhlIHN1YnRpdGxlIGdyb3Vwc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgTWVkaWFHcm91cCB0eXBlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICAgKiBAZnVuY3Rpb24gaW5pdGlhbGl6ZS5TVUJUSVRMRVNcbiAgICovXG4gICdTVUJUSVRMRVMnOiBmdW5jdGlvbiBTVUJUSVRMRVModHlwZSwgc2V0dGluZ3MpIHtcbiAgICB2YXIgdGVjaCA9IHNldHRpbmdzLnRlY2gsXG4gICAgICAgIHZocyA9IHNldHRpbmdzLnZocyxcbiAgICAgICAgc291cmNlVHlwZSA9IHNldHRpbmdzLnNvdXJjZVR5cGUsXG4gICAgICAgIHNlZ21lbnRMb2FkZXIgPSBzZXR0aW5ncy5zZWdtZW50TG9hZGVyc1t0eXBlXSxcbiAgICAgICAgcmVxdWVzdE9wdGlvbnMgPSBzZXR0aW5ncy5yZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgbWVkaWFHcm91cHMgPSBzZXR0aW5ncy5tYXN0ZXIubWVkaWFHcm91cHMsXG4gICAgICAgIF9zZXR0aW5ncyRtZWRpYVR5cGVzJDIgPSBzZXR0aW5ncy5tZWRpYVR5cGVzW3R5cGVdLFxuICAgICAgICBncm91cHMgPSBfc2V0dGluZ3MkbWVkaWFUeXBlcyQyLmdyb3VwcyxcbiAgICAgICAgdHJhY2tzID0gX3NldHRpbmdzJG1lZGlhVHlwZXMkMi50cmFja3MsXG4gICAgICAgIG1hc3RlclBsYXlsaXN0TG9hZGVyID0gc2V0dGluZ3MubWFzdGVyUGxheWxpc3RMb2FkZXI7XG5cbiAgICBmb3IgKHZhciBncm91cElkIGluIG1lZGlhR3JvdXBzW3R5cGVdKSB7XG4gICAgICBpZiAoIWdyb3Vwc1tncm91cElkXSkge1xuICAgICAgICBncm91cHNbZ3JvdXBJZF0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgdmFyaWFudExhYmVsIGluIG1lZGlhR3JvdXBzW3R5cGVdW2dyb3VwSWRdKSB7XG4gICAgICAgIGlmIChtZWRpYUdyb3Vwc1t0eXBlXVtncm91cElkXVt2YXJpYW50TGFiZWxdLmZvcmNlZCkge1xuICAgICAgICAgIC8vIFN1YnRpdGxlIHBsYXlsaXN0cyB3aXRoIHRoZSBmb3JjZWQgYXR0cmlidXRlIGFyZSBub3Qgc2VsZWN0YWJsZSBpbiBTYWZhcmkuXG4gICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIEFwcGxlJ3MgSExTIEF1dGhvcmluZyBTcGVjaWZpY2F0aW9uOlxuICAgICAgICAgIC8vICAgSWYgY29udGVudCBoYXMgZm9yY2VkIHN1YnRpdGxlcyBhbmQgcmVndWxhciBzdWJ0aXRsZXMgaW4gYSBnaXZlbiBsYW5ndWFnZSxcbiAgICAgICAgICAvLyAgIHRoZSByZWd1bGFyIHN1YnRpdGxlcyB0cmFjayBpbiB0aGF0IGxhbmd1YWdlIE1VU1QgY29udGFpbiBib3RoIHRoZSBmb3JjZWRcbiAgICAgICAgICAvLyAgIHN1YnRpdGxlcyBhbmQgdGhlIHJlZ3VsYXIgc3VidGl0bGVzIGZvciB0aGF0IGxhbmd1YWdlLlxuICAgICAgICAgIC8vIEJlY2F1c2Ugb2YgdGhpcyByZXF1aXJlbWVudCBhbmQgdGhhdCBTYWZhcmkgZG9lcyBub3QgYWRkIGZvcmNlZCBzdWJ0aXRsZXMsXG4gICAgICAgICAgLy8gZm9yY2VkIHN1YnRpdGxlcyBhcmUgc2tpcHBlZCBoZXJlIHRvIG1haW50YWluIGNvbnNpc3RlbnQgZXhwZXJpZW5jZSBhY3Jvc3NcbiAgICAgICAgICAvLyBhbGwgcGxhdGZvcm1zXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJvcGVydGllcyA9IG1lZGlhR3JvdXBzW3R5cGVdW2dyb3VwSWRdW3ZhcmlhbnRMYWJlbF07XG4gICAgICAgIHZhciBwbGF5bGlzdExvYWRlciA9IHZvaWQgMDtcblxuICAgICAgICBpZiAoc291cmNlVHlwZSA9PT0gJ2hscycpIHtcbiAgICAgICAgICBwbGF5bGlzdExvYWRlciA9IG5ldyBQbGF5bGlzdExvYWRlcihwcm9wZXJ0aWVzLnJlc29sdmVkVXJpLCB2aHMsIHJlcXVlc3RPcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VUeXBlID09PSAnZGFzaCcpIHtcbiAgICAgICAgICBwbGF5bGlzdExvYWRlciA9IG5ldyBEYXNoUGxheWxpc3RMb2FkZXIocHJvcGVydGllcy5wbGF5bGlzdHNbMF0sIHZocywgcmVxdWVzdE9wdGlvbnMsIG1hc3RlclBsYXlsaXN0TG9hZGVyKTtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VUeXBlID09PSAndmhzLWpzb24nKSB7XG4gICAgICAgICAgcGxheWxpc3RMb2FkZXIgPSBuZXcgUGxheWxpc3RMb2FkZXIoIC8vIGlmIHRoZSB2aHMtanNvbiBvYmplY3QgaW5jbHVkZWQgdGhlIG1lZGlhIHBsYXlsaXN0LCB1c2UgdGhlIG1lZGlhIHBsYXlsaXN0XG4gICAgICAgICAgLy8gYXMgcHJvdmlkZWQsIG90aGVyd2lzZSB1c2UgdGhlIHJlc29sdmVkIFVSSSB0byBsb2FkIHRoZSBwbGF5bGlzdFxuICAgICAgICAgIHByb3BlcnRpZXMucGxheWxpc3RzID8gcHJvcGVydGllcy5wbGF5bGlzdHNbMF0gOiBwcm9wZXJ0aWVzLnJlc29sdmVkVXJpLCB2aHMsIHJlcXVlc3RPcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3BlcnRpZXMgPSB2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHtcbiAgICAgICAgICBpZDogdmFyaWFudExhYmVsLFxuICAgICAgICAgIHBsYXlsaXN0TG9hZGVyOiBwbGF5bGlzdExvYWRlclxuICAgICAgICB9LCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgc2V0dXBMaXN0ZW5lcnNbdHlwZV0odHlwZSwgcHJvcGVydGllcy5wbGF5bGlzdExvYWRlciwgc2V0dGluZ3MpO1xuICAgICAgICBncm91cHNbZ3JvdXBJZF0ucHVzaChwcm9wZXJ0aWVzKTtcblxuICAgICAgICBpZiAodHlwZW9mIHRyYWNrc1t2YXJpYW50TGFiZWxdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhciB0cmFjayA9IHRlY2guYWRkUmVtb3RlVGV4dFRyYWNrKHtcbiAgICAgICAgICAgIGlkOiB2YXJpYW50TGFiZWwsXG4gICAgICAgICAgICBraW5kOiAnc3VidGl0bGVzJyxcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBwcm9wZXJ0aWVzW1wiZGVmYXVsdFwiXSAmJiBwcm9wZXJ0aWVzLmF1dG9zZWxlY3QsXG4gICAgICAgICAgICBsYW5ndWFnZTogcHJvcGVydGllcy5sYW5ndWFnZSxcbiAgICAgICAgICAgIGxhYmVsOiB2YXJpYW50TGFiZWxcbiAgICAgICAgICB9LCBmYWxzZSkudHJhY2s7XG4gICAgICAgICAgdHJhY2tzW3ZhcmlhbnRMYWJlbF0gPSB0cmFjaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gc2V0dXAgc2luZ2xlIGVycm9yIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBzZWdtZW50IGxvYWRlclxuXG5cbiAgICBzZWdtZW50TG9hZGVyLm9uKCdlcnJvcicsIG9uRXJyb3JbdHlwZV0odHlwZSwgc2V0dGluZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0dXAgVGV4dFRyYWNrcyBmb3IgdGhlIGNsb3NlZC1jYXB0aW9uIGdyb3Vwc1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgTWVkaWFHcm91cCB0eXBlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICAgKiBAZnVuY3Rpb24gaW5pdGlhbGl6ZVsnQ0xPU0VELUNBUFRJT05TJ11cbiAgICovXG4gICdDTE9TRUQtQ0FQVElPTlMnOiBmdW5jdGlvbiBDTE9TRURDQVBUSU9OUyh0eXBlLCBzZXR0aW5ncykge1xuICAgIHZhciB0ZWNoID0gc2V0dGluZ3MudGVjaCxcbiAgICAgICAgbWVkaWFHcm91cHMgPSBzZXR0aW5ncy5tYXN0ZXIubWVkaWFHcm91cHMsXG4gICAgICAgIF9zZXR0aW5ncyRtZWRpYVR5cGVzJDMgPSBzZXR0aW5ncy5tZWRpYVR5cGVzW3R5cGVdLFxuICAgICAgICBncm91cHMgPSBfc2V0dGluZ3MkbWVkaWFUeXBlcyQzLmdyb3VwcyxcbiAgICAgICAgdHJhY2tzID0gX3NldHRpbmdzJG1lZGlhVHlwZXMkMy50cmFja3M7XG5cbiAgICBmb3IgKHZhciBncm91cElkIGluIG1lZGlhR3JvdXBzW3R5cGVdKSB7XG4gICAgICBpZiAoIWdyb3Vwc1tncm91cElkXSkge1xuICAgICAgICBncm91cHNbZ3JvdXBJZF0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgdmFyaWFudExhYmVsIGluIG1lZGlhR3JvdXBzW3R5cGVdW2dyb3VwSWRdKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gbWVkaWFHcm91cHNbdHlwZV1bZ3JvdXBJZF1bdmFyaWFudExhYmVsXTsgLy8gV2Ugb25seSBzdXBwb3J0IENFQTYwOCBjYXB0aW9ucyBmb3Igbm93LCBzbyBpZ25vcmUgYW55dGhpbmcgdGhhdFxuICAgICAgICAvLyBkb2Vzbid0IHVzZSBhIENDeCBJTlNUUkVBTS1JRFxuXG4gICAgICAgIGlmICghcHJvcGVydGllcy5pbnN0cmVhbUlkLm1hdGNoKC9DQ1xcZC8pKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gTm8gUGxheWxpc3RMb2FkZXIgaXMgcmVxdWlyZWQgZm9yIENsb3NlZC1DYXB0aW9ucyBiZWNhdXNlIHRoZSBjYXB0aW9ucyBhcmVcbiAgICAgICAgLy8gZW1iZWRkZWQgd2l0aGluIHRoZSB2aWRlbyBzdHJlYW1cblxuXG4gICAgICAgIGdyb3Vwc1tncm91cElkXS5wdXNoKHZpZGVvanMkMS5tZXJnZU9wdGlvbnMoe1xuICAgICAgICAgIGlkOiB2YXJpYW50TGFiZWxcbiAgICAgICAgfSwgcHJvcGVydGllcykpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdHJhY2tzW3ZhcmlhbnRMYWJlbF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdmFyIHRyYWNrID0gdGVjaC5hZGRSZW1vdGVUZXh0VHJhY2soe1xuICAgICAgICAgICAgaWQ6IHByb3BlcnRpZXMuaW5zdHJlYW1JZCxcbiAgICAgICAgICAgIGtpbmQ6ICdjYXB0aW9ucycsXG4gICAgICAgICAgICBcImRlZmF1bHRcIjogcHJvcGVydGllc1tcImRlZmF1bHRcIl0gJiYgcHJvcGVydGllcy5hdXRvc2VsZWN0LFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IHByb3BlcnRpZXMubGFuZ3VhZ2UsXG4gICAgICAgICAgICBsYWJlbDogdmFyaWFudExhYmVsXG4gICAgICAgICAgfSwgZmFsc2UpLnRyYWNrO1xuICAgICAgICAgIHRyYWNrc1t2YXJpYW50TGFiZWxdID0gdHJhY2s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB1c2VkIHRvIGdldCB0aGUgYWN0aXZlIGdyb3VwIG9mIHRoZSBwcm92aWRlZCB0eXBlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqICAgICAgICBNZWRpYUdyb3VwIHR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIHJlcXVpcmVkIGluZm9ybWF0aW9uIGZvciBtZWRpYSBncm91cHNcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogICAgICAgICBGdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGFjdGl2ZSBtZWRpYSBncm91cCBmb3IgdGhlIHByb3ZpZGVkIHR5cGUuIFRha2VzIGFuXG4gKiAgICAgICAgIG9wdGlvbmFsIHBhcmFtZXRlciB7VGV4dFRyYWNrfSB0cmFjay4gSWYgbm8gdHJhY2sgaXMgcHJvdmlkZWQsIGEgbGlzdCBvZiBhbGxcbiAqICAgICAgICAgdmFyaWFudHMgaW4gdGhlIGdyb3VwLCBvdGhlcndpc2UgdGhlIHZhcmlhbnQgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdmlkZWRcbiAqICAgICAgICAgdHJhY2sgaXMgcmV0dXJuZWQuXG4gKiBAZnVuY3Rpb24gYWN0aXZlR3JvdXBcbiAqL1xuXG52YXIgYWN0aXZlR3JvdXAgPSBmdW5jdGlvbiBhY3RpdmVHcm91cCh0eXBlLCBzZXR0aW5ncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgdmFyIG1hc3RlclBsYXlsaXN0TG9hZGVyID0gc2V0dGluZ3MubWFzdGVyUGxheWxpc3RMb2FkZXIsXG4gICAgICAgIGdyb3VwcyA9IHNldHRpbmdzLm1lZGlhVHlwZXNbdHlwZV0uZ3JvdXBzO1xuICAgIHZhciBtZWRpYSA9IG1hc3RlclBsYXlsaXN0TG9hZGVyLm1lZGlhKCk7XG5cbiAgICBpZiAoIW1lZGlhKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdmFyaWFudHMgPSBudWxsO1xuXG4gICAgaWYgKG1lZGlhLmF0dHJpYnV0ZXNbdHlwZV0pIHtcbiAgICAgIHZhcmlhbnRzID0gZ3JvdXBzW21lZGlhLmF0dHJpYnV0ZXNbdHlwZV1dO1xuICAgIH1cblxuICAgIHZhcmlhbnRzID0gdmFyaWFudHMgfHwgZ3JvdXBzLm1haW47XG5cbiAgICBpZiAodHlwZW9mIHRyYWNrID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHZhcmlhbnRzO1xuICAgIH1cblxuICAgIGlmICh0cmFjayA9PT0gbnVsbCkge1xuICAgICAgLy8gQW4gYWN0aXZlIHRyYWNrIHdhcyBzcGVjaWZpZWQgc28gYSBjb3JyZXNwb25kaW5nIGdyb3VwIGlzIGV4cGVjdGVkLiB0cmFjayA9PT0gbnVsbFxuICAgICAgLy8gbWVhbnMgbm8gdHJhY2sgaXMgY3VycmVudGx5IGFjdGl2ZSBzbyB0aGVyZSBpcyBubyBjb3JyZXNwb25kaW5nIGdyb3VwXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFyaWFudHMuZmlsdGVyKGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgcmV0dXJuIHByb3BzLmlkID09PSB0cmFjay5pZDtcbiAgICB9KVswXSB8fCBudWxsO1xuICB9O1xufTtcblxudmFyIGFjdGl2ZVRyYWNrID0ge1xuICAvKipcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHVzZWQgdG8gZ2V0IHRoZSBhY3RpdmUgdHJhY2sgb2YgdHlwZSBwcm92aWRlZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgTWVkaWFHcm91cCB0eXBlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICogICAgICAgICBGdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGFjdGl2ZSBtZWRpYSB0cmFjayBmb3IgdGhlIHByb3ZpZGVkIHR5cGUuIFJldHVybnNcbiAgICogICAgICAgICBudWxsIGlmIG5vIHRyYWNrIGlzIGFjdGl2ZVxuICAgKiBAZnVuY3Rpb24gYWN0aXZlVHJhY2suQVVESU9cbiAgICovXG4gIEFVRElPOiBmdW5jdGlvbiBBVURJTyh0eXBlLCBzZXR0aW5ncykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdHJhY2tzID0gc2V0dGluZ3MubWVkaWFUeXBlc1t0eXBlXS50cmFja3M7XG5cbiAgICAgIGZvciAodmFyIGlkIGluIHRyYWNrcykge1xuICAgICAgICBpZiAodHJhY2tzW2lkXS5lbmFibGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWNrc1tpZF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHVzZWQgdG8gZ2V0IHRoZSBhY3RpdmUgdHJhY2sgb2YgdHlwZSBwcm92aWRlZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiAgICAgICAgTWVkaWFHcm91cCB0eXBlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIG1lZGlhIGdyb3Vwc1xuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICogICAgICAgICBGdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGFjdGl2ZSBtZWRpYSB0cmFjayBmb3IgdGhlIHByb3ZpZGVkIHR5cGUuIFJldHVybnNcbiAgICogICAgICAgICBudWxsIGlmIG5vIHRyYWNrIGlzIGFjdGl2ZVxuICAgKiBAZnVuY3Rpb24gYWN0aXZlVHJhY2suU1VCVElUTEVTXG4gICAqL1xuICBTVUJUSVRMRVM6IGZ1bmN0aW9uIFNVQlRJVExFUyh0eXBlLCBzZXR0aW5ncykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdHJhY2tzID0gc2V0dGluZ3MubWVkaWFUeXBlc1t0eXBlXS50cmFja3M7XG5cbiAgICAgIGZvciAodmFyIGlkIGluIHRyYWNrcykge1xuICAgICAgICBpZiAodHJhY2tzW2lkXS5tb2RlID09PSAnc2hvd2luZycgfHwgdHJhY2tzW2lkXS5tb2RlID09PSAnaGlkZGVuJykge1xuICAgICAgICAgIHJldHVybiB0cmFja3NbaWRdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH1cbn07XG4vKipcbiAqIFNldHVwIFBsYXlsaXN0TG9hZGVycyBhbmQgVHJhY2tzIGZvciBtZWRpYSBncm91cHMgKEF1ZGlvLCBTdWJ0aXRsZXMsXG4gKiBDbG9zZWQtQ2FwdGlvbnMpIHNwZWNpZmllZCBpbiB0aGUgbWFzdGVyIG1hbmlmZXN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICogICAgICAgIE9iamVjdCBjb250YWluaW5nIHJlcXVpcmVkIGluZm9ybWF0aW9uIGZvciBzZXR0aW5nIHVwIHRoZSBtZWRpYSBncm91cHNcbiAqIEBwYXJhbSB7VGVjaH0gc2V0dGluZ3MudGVjaFxuICogICAgICAgIFRoZSB0ZWNoIG9mIHRoZSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5ncy5yZXF1ZXN0T3B0aW9uc1xuICogICAgICAgIFhIUiByZXF1ZXN0IG9wdGlvbnMgdXNlZCBieSB0aGUgc2VnbWVudCBsb2FkZXJzXG4gKiBAcGFyYW0ge1BsYXlsaXN0TG9hZGVyfSBzZXR0aW5ncy5tYXN0ZXJQbGF5bGlzdExvYWRlclxuICogICAgICAgIFBsYXlsaXN0TG9hZGVyIGZvciB0aGUgbWFzdGVyIHNvdXJjZVxuICogQHBhcmFtIHtWaHNIYW5kbGVyfSBzZXR0aW5ncy52aHNcbiAqICAgICAgICBWSFMgU291cmNlSGFuZGxlclxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzLm1hc3RlclxuICogICAgICAgIFRoZSBwYXJzZWQgbWFzdGVyIG1hbmlmZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3MubWVkaWFUeXBlc1xuICogICAgICAgIE9iamVjdCB0byBzdG9yZSB0aGUgbG9hZGVycywgdHJhY2tzLCBhbmQgdXRpbGl0eSBtZXRob2RzIGZvciBlYWNoIG1lZGlhIHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRpbmdzLmJsYWNrbGlzdEN1cnJlbnRQbGF5bGlzdFxuICogICAgICAgIEJsYWNrbGlzdHMgdGhlIGN1cnJlbnQgcmVuZGl0aW9uIGFuZCBmb3JjZXMgYSByZW5kaXRpb24gc3dpdGNoLlxuICogQGZ1bmN0aW9uIHNldHVwTWVkaWFHcm91cHNcbiAqL1xuXG52YXIgc2V0dXBNZWRpYUdyb3VwcyA9IGZ1bmN0aW9uIHNldHVwTWVkaWFHcm91cHMoc2V0dGluZ3MpIHtcbiAgWydBVURJTycsICdTVUJUSVRMRVMnLCAnQ0xPU0VELUNBUFRJT05TJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIGluaXRpYWxpemVbdHlwZV0odHlwZSwgc2V0dGluZ3MpO1xuICB9KTtcbiAgdmFyIG1lZGlhVHlwZXMgPSBzZXR0aW5ncy5tZWRpYVR5cGVzLFxuICAgICAgbWFzdGVyUGxheWxpc3RMb2FkZXIgPSBzZXR0aW5ncy5tYXN0ZXJQbGF5bGlzdExvYWRlcixcbiAgICAgIHRlY2ggPSBzZXR0aW5ncy50ZWNoLFxuICAgICAgdmhzID0gc2V0dGluZ3MudmhzOyAvLyBzZXR1cCBhY3RpdmUgZ3JvdXAgYW5kIHRyYWNrIGdldHRlcnMgYW5kIGNoYW5nZSBldmVudCBoYW5kbGVyc1xuXG4gIFsnQVVESU8nLCAnU1VCVElUTEVTJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIG1lZGlhVHlwZXNbdHlwZV0uYWN0aXZlR3JvdXAgPSBhY3RpdmVHcm91cCh0eXBlLCBzZXR0aW5ncyk7XG4gICAgbWVkaWFUeXBlc1t0eXBlXS5hY3RpdmVUcmFjayA9IGFjdGl2ZVRyYWNrW3R5cGVdKHR5cGUsIHNldHRpbmdzKTtcbiAgICBtZWRpYVR5cGVzW3R5cGVdLm9uR3JvdXBDaGFuZ2VkID0gb25Hcm91cENoYW5nZWQodHlwZSwgc2V0dGluZ3MpO1xuICAgIG1lZGlhVHlwZXNbdHlwZV0ub25Hcm91cENoYW5naW5nID0gb25Hcm91cENoYW5naW5nKHR5cGUsIHNldHRpbmdzKTtcbiAgICBtZWRpYVR5cGVzW3R5cGVdLm9uVHJhY2tDaGFuZ2VkID0gb25UcmFja0NoYW5nZWQodHlwZSwgc2V0dGluZ3MpO1xuICB9KTsgLy8gRE8gTk9UIGVuYWJsZSB0aGUgZGVmYXVsdCBzdWJ0aXRsZSBvciBjYXB0aW9uIHRyYWNrLlxuICAvLyBETyBlbmFibGUgdGhlIGRlZmF1bHQgYXVkaW8gdHJhY2tcblxuICB2YXIgYXVkaW9Hcm91cCA9IG1lZGlhVHlwZXMuQVVESU8uYWN0aXZlR3JvdXAoKTtcblxuICBpZiAoYXVkaW9Hcm91cCkge1xuICAgIHZhciBncm91cElkID0gKGF1ZGlvR3JvdXAuZmlsdGVyKGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgcmV0dXJuIGdyb3VwW1wiZGVmYXVsdFwiXTtcbiAgICB9KVswXSB8fCBhdWRpb0dyb3VwWzBdKS5pZDtcbiAgICBtZWRpYVR5cGVzLkFVRElPLnRyYWNrc1tncm91cElkXS5lbmFibGVkID0gdHJ1ZTtcbiAgICBtZWRpYVR5cGVzLkFVRElPLm9uVHJhY2tDaGFuZ2VkKCk7XG4gIH1cblxuICBtYXN0ZXJQbGF5bGlzdExvYWRlci5vbignbWVkaWFjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgWydBVURJTycsICdTVUJUSVRMRVMnXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gbWVkaWFUeXBlc1t0eXBlXS5vbkdyb3VwQ2hhbmdlZCgpO1xuICAgIH0pO1xuICB9KTtcbiAgbWFzdGVyUGxheWxpc3RMb2FkZXIub24oJ21lZGlhY2hhbmdpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgWydBVURJTycsICdTVUJUSVRMRVMnXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gbWVkaWFUeXBlc1t0eXBlXS5vbkdyb3VwQ2hhbmdpbmcoKTtcbiAgICB9KTtcbiAgfSk7IC8vIGN1c3RvbSBhdWRpbyB0cmFjayBjaGFuZ2UgZXZlbnQgaGFuZGxlciBmb3IgdXNhZ2UgZXZlbnRcblxuICB2YXIgb25BdWRpb1RyYWNrQ2hhbmdlZCA9IGZ1bmN0aW9uIG9uQXVkaW9UcmFja0NoYW5nZWQoKSB7XG4gICAgbWVkaWFUeXBlcy5BVURJTy5vblRyYWNrQ2hhbmdlZCgpO1xuICAgIHRlY2gudHJpZ2dlcih7XG4gICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgbmFtZTogJ3Zocy1hdWRpby1jaGFuZ2UnXG4gICAgfSk7XG4gICAgdGVjaC50cmlnZ2VyKHtcbiAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICBuYW1lOiAnaGxzLWF1ZGlvLWNoYW5nZSdcbiAgICB9KTtcbiAgfTtcblxuICB0ZWNoLmF1ZGlvVHJhY2tzKCkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25BdWRpb1RyYWNrQ2hhbmdlZCk7XG4gIHRlY2gucmVtb3RlVGV4dFRyYWNrcygpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG1lZGlhVHlwZXMuU1VCVElUTEVTLm9uVHJhY2tDaGFuZ2VkKTtcbiAgdmhzLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIHRlY2guYXVkaW9UcmFja3MoKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkF1ZGlvVHJhY2tDaGFuZ2VkKTtcbiAgICB0ZWNoLnJlbW90ZVRleHRUcmFja3MoKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBtZWRpYVR5cGVzLlNVQlRJVExFUy5vblRyYWNrQ2hhbmdlZCk7XG4gIH0pOyAvLyBjbGVhciBleGlzdGluZyBhdWRpbyB0cmFja3MgYW5kIGFkZCB0aGUgb25lcyB3ZSBqdXN0IGNyZWF0ZWRcblxuICB0ZWNoLmNsZWFyVHJhY2tzKCdhdWRpbycpO1xuXG4gIGZvciAodmFyIGlkIGluIG1lZGlhVHlwZXMuQVVESU8udHJhY2tzKSB7XG4gICAgdGVjaC5hdWRpb1RyYWNrcygpLmFkZFRyYWNrKG1lZGlhVHlwZXMuQVVESU8udHJhY2tzW2lkXSk7XG4gIH1cbn07XG4vKipcbiAqIENyZWF0ZXMgc2tlbGV0b24gb2JqZWN0IHVzZWQgdG8gc3RvcmUgdGhlIGxvYWRlcnMsIHRyYWNrcywgYW5kIHV0aWxpdHkgbWV0aG9kcyBmb3IgZWFjaFxuICogbWVkaWEgdHlwZVxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqICAgICAgICAgT2JqZWN0IHRvIHN0b3JlIHRoZSBsb2FkZXJzLCB0cmFja3MsIGFuZCB1dGlsaXR5IG1ldGhvZHMgZm9yIGVhY2ggbWVkaWEgdHlwZVxuICogQGZ1bmN0aW9uIGNyZWF0ZU1lZGlhVHlwZXNcbiAqL1xuXG5cbnZhciBjcmVhdGVNZWRpYVR5cGVzID0gZnVuY3Rpb24gY3JlYXRlTWVkaWFUeXBlcygpIHtcbiAgdmFyIG1lZGlhVHlwZXMgPSB7fTtcbiAgWydBVURJTycsICdTVUJUSVRMRVMnLCAnQ0xPU0VELUNBUFRJT05TJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIG1lZGlhVHlwZXNbdHlwZV0gPSB7XG4gICAgICBncm91cHM6IHt9LFxuICAgICAgdHJhY2tzOiB7fSxcbiAgICAgIGFjdGl2ZVBsYXlsaXN0TG9hZGVyOiBudWxsLFxuICAgICAgYWN0aXZlR3JvdXA6IG5vb3AsXG4gICAgICBhY3RpdmVUcmFjazogbm9vcCxcbiAgICAgIG9uR3JvdXBDaGFuZ2VkOiBub29wLFxuICAgICAgb25UcmFja0NoYW5nZWQ6IG5vb3BcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIG1lZGlhVHlwZXM7XG59O1xuXG52YXIgQUJPUlRfRUFSTFlfQkxBQ0tMSVNUX1NFQ09ORFMgPSA2MCAqIDI7XG52YXIgVmhzOyAvLyBTZWdtZW50TG9hZGVyIHN0YXRzIHRoYXQgbmVlZCB0byBoYXZlIGVhY2ggbG9hZGVyJ3Ncbi8vIHZhbHVlcyBzdW1tZWQgdG8gY2FsY3VsYXRlIHRoZSBmaW5hbCB2YWx1ZVxuXG52YXIgbG9hZGVyU3RhdHMgPSBbJ21lZGlhUmVxdWVzdHMnLCAnbWVkaWFSZXF1ZXN0c0Fib3J0ZWQnLCAnbWVkaWFSZXF1ZXN0c1RpbWVkb3V0JywgJ21lZGlhUmVxdWVzdHNFcnJvcmVkJywgJ21lZGlhVHJhbnNmZXJEdXJhdGlvbicsICdtZWRpYUJ5dGVzVHJhbnNmZXJyZWQnXTtcblxudmFyIHN1bUxvYWRlclN0YXQgPSBmdW5jdGlvbiBzdW1Mb2FkZXJTdGF0KHN0YXQpIHtcbiAgcmV0dXJuIHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyX1tzdGF0XSArIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfW3N0YXRdO1xufTtcblxudmFyIHNob3VsZFN3aXRjaFRvTWVkaWEgPSBmdW5jdGlvbiBzaG91bGRTd2l0Y2hUb01lZGlhKF9yZWYpIHtcbiAgdmFyIGN1cnJlbnRQbGF5bGlzdCA9IF9yZWYuY3VycmVudFBsYXlsaXN0LFxuICAgICAgbmV4dFBsYXlsaXN0ID0gX3JlZi5uZXh0UGxheWxpc3QsXG4gICAgICBmb3J3YXJkQnVmZmVyID0gX3JlZi5mb3J3YXJkQnVmZmVyLFxuICAgICAgYnVmZmVyTG93V2F0ZXJMaW5lID0gX3JlZi5idWZmZXJMb3dXYXRlckxpbmUsXG4gICAgICBkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb24sXG4gICAgICBsb2cgPSBfcmVmLmxvZzsgLy8gd2UgaGF2ZSBubyBvdGhlciBwbGF5bGlzdCB0byBzd2l0Y2ggdG9cblxuICBpZiAoIW5leHRQbGF5bGlzdCkge1xuICAgIHZpZGVvanMkMS5sb2cud2FybignV2UgcmVjZWl2ZWQgbm8gcGxheWxpc3QgdG8gc3dpdGNoIHRvLiBQbGVhc2UgY2hlY2sgeW91ciBzdHJlYW0uJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmIHRoZSBwbGF5bGlzdCBpcyBsaXZlLCB0aGVuIHdlIHdhbnQgdG8gbm90IHRha2UgbG93IHdhdGVyIGxpbmUgaW50byBhY2NvdW50LlxuICAvLyBUaGlzIGlzIGJlY2F1c2UgaW4gTElWRSwgdGhlIHBsYXllciBwbGF5cyAzIHNlZ21lbnRzIGZyb20gdGhlIGVuZCBvZiB0aGVcbiAgLy8gcGxheWxpc3QsIGFuZCBpZiBgQlVGRkVSX0xPV19XQVRFUl9MSU5FYCBpcyBncmVhdGVyIHRoYW4gdGhlIGR1cmF0aW9uIGF2YWlsYmxlXG4gIC8vIGluIHRob3NlIHNlZ21lbnRzLCBhIHZpZXdlciB3aWxsIG5ldmVyIGV4cGVyaWVuY2UgYSByZW5kaXRpb24gdXBzd2l0Y2guXG5cblxuICBpZiAoIWN1cnJlbnRQbGF5bGlzdC5lbmRMaXN0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gRm9yIHRoZSBzYW1lIHJlYXNvbiBhcyBMSVZFLCB3ZSBpZ25vcmUgdGhlIGxvdyB3YXRlciBsaW5lIHdoZW4gdGhlIFZPRFxuICAvLyBkdXJhdGlvbiBpcyBiZWxvdyB0aGUgbWF4IHBvdGVudGlhbCBsb3cgd2F0ZXIgbGluZVxuXG5cbiAgaWYgKGR1cmF0aW9uIDwgQ29uZmlnLk1BWF9CVUZGRVJfTE9XX1dBVEVSX0xJTkUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB3ZSB3YW50IHRvIHN3aXRjaCBkb3duIHRvIGxvd2VyIHJlc29sdXRpb25zIHF1aWNrbHkgdG8gY29udGludWUgcGxheWJhY2ssIGJ1dFxuXG5cbiAgaWYgKG5leHRQbGF5bGlzdC5hdHRyaWJ1dGVzLkJBTkRXSURUSCA8IGN1cnJlbnRQbGF5bGlzdC5hdHRyaWJ1dGVzLkJBTkRXSURUSCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIGVuc3VyZSB3ZSBoYXZlIHNvbWUgYnVmZmVyIGJlZm9yZSB3ZSBzd2l0Y2ggdXAgdG8gcHJldmVudCB1cyBydW5uaW5nIG91dCBvZlxuICAvLyBidWZmZXIgd2hpbGUgbG9hZGluZyBhIGhpZ2hlciByZW5kaXRpb24uXG5cblxuICBpZiAoZm9yd2FyZEJ1ZmZlciA+PSBidWZmZXJMb3dXYXRlckxpbmUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4vKipcbiAqIHRoZSBtYXN0ZXIgcGxheWxpc3QgY29udHJvbGxlciBjb250cm9sbGVyIGFsbCBpbnRlcmFjdG9uc1xuICogYmV0d2VlbiBwbGF5bGlzdHMgYW5kIHNlZ21lbnRsb2FkZXJzLiBBdCB0aGlzIHRpbWUgdGhpcyBtYWlubHlcbiAqIGludm9sdmVzIGEgbWFzdGVyIHBsYXlsaXN0IGFuZCBhIHNlcmllcyBvZiBhdWRpbyBwbGF5bGlzdHNcbiAqIGlmIHRoZXkgYXJlIGF2YWlsYWJsZVxuICpcbiAqIEBjbGFzcyBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJcbiAqIEBleHRlbmRzIHZpZGVvanMuRXZlbnRUYXJnZXRcbiAqL1xuXG5cbnZhciBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF92aWRlb2pzJEV2ZW50VGFyZ2V0KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1hc3RlclBsYXlsaXN0Q29udHJvbGxlciwgX3ZpZGVvanMkRXZlbnRUYXJnZXQpO1xuXG4gIGZ1bmN0aW9uIE1hc3RlclBsYXlsaXN0Q29udHJvbGxlcihvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfdmlkZW9qcyRFdmVudFRhcmdldC5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgdmFyIHNyYyA9IG9wdGlvbnMuc3JjLFxuICAgICAgICBoYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyA9IG9wdGlvbnMuaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHMsXG4gICAgICAgIHdpdGhDcmVkZW50aWFscyA9IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICB0ZWNoID0gb3B0aW9ucy50ZWNoLFxuICAgICAgICBiYW5kd2lkdGggPSBvcHRpb25zLmJhbmR3aWR0aCxcbiAgICAgICAgZXh0ZXJuVmhzID0gb3B0aW9ucy5leHRlcm5WaHMsXG4gICAgICAgIHVzZUN1ZVRhZ3MgPSBvcHRpb25zLnVzZUN1ZVRhZ3MsXG4gICAgICAgIGJsYWNrbGlzdER1cmF0aW9uID0gb3B0aW9ucy5ibGFja2xpc3REdXJhdGlvbixcbiAgICAgICAgZW5hYmxlTG93SW5pdGlhbFBsYXlsaXN0ID0gb3B0aW9ucy5lbmFibGVMb3dJbml0aWFsUGxheWxpc3QsXG4gICAgICAgIHNvdXJjZVR5cGUgPSBvcHRpb25zLnNvdXJjZVR5cGUsXG4gICAgICAgIGNhY2hlRW5jcnlwdGlvbktleXMgPSBvcHRpb25zLmNhY2hlRW5jcnlwdGlvbktleXMsXG4gICAgICAgIGhhbmRsZVBhcnRpYWxEYXRhID0gb3B0aW9ucy5oYW5kbGVQYXJ0aWFsRGF0YTtcblxuICAgIGlmICghc3JjKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Egbm9uLWVtcHR5IHBsYXlsaXN0IFVSTCBvciBKU09OIG1hbmlmZXN0IHN0cmluZyBpcyByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIFZocyA9IGV4dGVyblZocztcbiAgICBfdGhpcy53aXRoQ3JlZGVudGlhbHMgPSB3aXRoQ3JlZGVudGlhbHM7XG4gICAgX3RoaXMudGVjaF8gPSB0ZWNoO1xuICAgIF90aGlzLnZoc18gPSB0ZWNoLnZocztcbiAgICBfdGhpcy5zb3VyY2VUeXBlXyA9IHNvdXJjZVR5cGU7XG4gICAgX3RoaXMudXNlQ3VlVGFnc18gPSB1c2VDdWVUYWdzO1xuICAgIF90aGlzLmJsYWNrbGlzdER1cmF0aW9uID0gYmxhY2tsaXN0RHVyYXRpb247XG4gICAgX3RoaXMuZW5hYmxlTG93SW5pdGlhbFBsYXlsaXN0ID0gZW5hYmxlTG93SW5pdGlhbFBsYXlsaXN0O1xuXG4gICAgaWYgKF90aGlzLnVzZUN1ZVRhZ3NfKSB7XG4gICAgICBfdGhpcy5jdWVUYWdzVHJhY2tfID0gX3RoaXMudGVjaF8uYWRkVGV4dFRyYWNrKCdtZXRhZGF0YScsICdhZC1jdWVzJyk7XG4gICAgICBfdGhpcy5jdWVUYWdzVHJhY2tfLmluQmFuZE1ldGFkYXRhVHJhY2tEaXNwYXRjaFR5cGUgPSAnJztcbiAgICB9XG5cbiAgICBfdGhpcy5yZXF1ZXN0T3B0aW9uc18gPSB7XG4gICAgICB3aXRoQ3JlZGVudGlhbHM6IHdpdGhDcmVkZW50aWFscyxcbiAgICAgIGhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzOiBoYW5kbGVNYW5pZmVzdFJlZGlyZWN0cyxcbiAgICAgIHRpbWVvdXQ6IG51bGxcbiAgICB9O1xuXG4gICAgX3RoaXMub24oJ2Vycm9yJywgX3RoaXMucGF1c2VMb2FkaW5nKTtcblxuICAgIF90aGlzLm1lZGlhVHlwZXNfID0gY3JlYXRlTWVkaWFUeXBlcygpO1xuICAgIF90aGlzLm1lZGlhU291cmNlID0gbmV3IHdpbmRvdyQxLk1lZGlhU291cmNlKCk7XG4gICAgX3RoaXMuaGFuZGxlRHVyYXRpb25DaGFuZ2VfID0gX3RoaXMuaGFuZGxlRHVyYXRpb25DaGFuZ2VfLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIF90aGlzLmhhbmRsZVNvdXJjZU9wZW5fID0gX3RoaXMuaGFuZGxlU291cmNlT3Blbl8uYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgX3RoaXMuaGFuZGxlU291cmNlRW5kZWRfID0gX3RoaXMuaGFuZGxlU291cmNlRW5kZWRfLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuXG4gICAgX3RoaXMubWVkaWFTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignZHVyYXRpb25jaGFuZ2UnLCBfdGhpcy5oYW5kbGVEdXJhdGlvbkNoYW5nZV8pOyAvLyBsb2FkIHRoZSBtZWRpYSBzb3VyY2UgaW50byB0aGUgcGxheWVyXG5cblxuICAgIF90aGlzLm1lZGlhU291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ3NvdXJjZW9wZW4nLCBfdGhpcy5oYW5kbGVTb3VyY2VPcGVuXyk7XG5cbiAgICBfdGhpcy5tZWRpYVNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdzb3VyY2VlbmRlZCcsIF90aGlzLmhhbmRsZVNvdXJjZUVuZGVkXyk7IC8vIHdlIGRvbid0IGhhdmUgdG8gaGFuZGxlIHNvdXJjZWNsb3NlIHNpbmNlIGRpc3Bvc2Ugd2lsbCBoYW5kbGUgdGVybWluYXRpb24gb2ZcbiAgICAvLyBldmVyeXRoaW5nLCBhbmQgdGhlIE1lZGlhU291cmNlIHNob3VsZCBub3QgYmUgZGV0YWNoZWQgd2l0aG91dCBhIHByb3BlciBkaXNwb3NhbFxuXG5cbiAgICBfdGhpcy5zZWVrYWJsZV8gPSB2aWRlb2pzJDEuY3JlYXRlVGltZVJhbmdlcygpO1xuICAgIF90aGlzLmhhc1BsYXllZF8gPSBmYWxzZTtcbiAgICBfdGhpcy5zeW5jQ29udHJvbGxlcl8gPSBuZXcgU3luY0NvbnRyb2xsZXIob3B0aW9ucyk7XG4gICAgX3RoaXMuc2VnbWVudE1ldGFkYXRhVHJhY2tfID0gdGVjaC5hZGRSZW1vdGVUZXh0VHJhY2soe1xuICAgICAga2luZDogJ21ldGFkYXRhJyxcbiAgICAgIGxhYmVsOiAnc2VnbWVudC1tZXRhZGF0YSdcbiAgICB9LCBmYWxzZSkudHJhY2s7XG4gICAgX3RoaXMuZGVjcnlwdGVyXyA9IG5ldyBEZWNyeXB0ZXIoKTtcbiAgICBfdGhpcy5zb3VyY2VVcGRhdGVyXyA9IG5ldyBTb3VyY2VVcGRhdGVyKF90aGlzLm1lZGlhU291cmNlKTtcbiAgICBfdGhpcy5pbmJhbmRUZXh0VHJhY2tzXyA9IHt9O1xuICAgIF90aGlzLnRpbWVsaW5lQ2hhbmdlQ29udHJvbGxlcl8gPSBuZXcgVGltZWxpbmVDaGFuZ2VDb250cm9sbGVyKCk7XG4gICAgdmFyIHNlZ21lbnRMb2FkZXJTZXR0aW5ncyA9IHtcbiAgICAgIHZoczogX3RoaXMudmhzXyxcbiAgICAgIG1lZGlhU291cmNlOiBfdGhpcy5tZWRpYVNvdXJjZSxcbiAgICAgIGN1cnJlbnRUaW1lOiBfdGhpcy50ZWNoXy5jdXJyZW50VGltZS5iaW5kKF90aGlzLnRlY2hfKSxcbiAgICAgIHNlZWthYmxlOiBmdW5jdGlvbiBzZWVrYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNlZWthYmxlKCk7XG4gICAgICB9LFxuICAgICAgc2Vla2luZzogZnVuY3Rpb24gc2Vla2luZygpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnRlY2hfLnNlZWtpbmcoKTtcbiAgICAgIH0sXG4gICAgICBkdXJhdGlvbjogZnVuY3Rpb24gZHVyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5kdXJhdGlvbigpO1xuICAgICAgfSxcbiAgICAgIGhhc1BsYXllZDogZnVuY3Rpb24gaGFzUGxheWVkKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaGFzUGxheWVkXztcbiAgICAgIH0sXG4gICAgICBnb2FsQnVmZmVyTGVuZ3RoOiBmdW5jdGlvbiBnb2FsQnVmZmVyTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuZ29hbEJ1ZmZlckxlbmd0aCgpO1xuICAgICAgfSxcbiAgICAgIGJhbmR3aWR0aDogYmFuZHdpZHRoLFxuICAgICAgc3luY0NvbnRyb2xsZXI6IF90aGlzLnN5bmNDb250cm9sbGVyXyxcbiAgICAgIGRlY3J5cHRlcjogX3RoaXMuZGVjcnlwdGVyXyxcbiAgICAgIHNvdXJjZVR5cGU6IF90aGlzLnNvdXJjZVR5cGVfLFxuICAgICAgaW5iYW5kVGV4dFRyYWNrczogX3RoaXMuaW5iYW5kVGV4dFRyYWNrc18sXG4gICAgICBjYWNoZUVuY3J5cHRpb25LZXlzOiBjYWNoZUVuY3J5cHRpb25LZXlzLFxuICAgICAgaGFuZGxlUGFydGlhbERhdGE6IGhhbmRsZVBhcnRpYWxEYXRhLFxuICAgICAgc291cmNlVXBkYXRlcjogX3RoaXMuc291cmNlVXBkYXRlcl8sXG4gICAgICB0aW1lbGluZUNoYW5nZUNvbnRyb2xsZXI6IF90aGlzLnRpbWVsaW5lQ2hhbmdlQ29udHJvbGxlcl9cbiAgICB9OyAvLyBUaGUgc291cmNlIHR5cGUgY2hlY2sgbm90IG9ubHkgZGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3BlY2lhbCBEQVNIIHBsYXlsaXN0IGxvYWRlclxuICAgIC8vIHNob3VsZCBiZSB1c2VkLCBidXQgYWxzbyBjb3ZlcnMgdGhlIGNhc2Ugd2hlcmUgdGhlIHByb3ZpZGVkIHNyYyBpcyBhIHZocy1qc29uXG4gICAgLy8gbWFuaWZlc3Qgb2JqZWN0IChpbnN0ZWFkIG9mIGEgVVJMKS4gSW4gdGhlIGNhc2Ugb2YgdmhzLWpzb24sIHRoZSBkZWZhdWx0XG4gICAgLy8gUGxheWxpc3RMb2FkZXIgc2hvdWxkIGJlIHVzZWQuXG5cbiAgICBfdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8gPSBfdGhpcy5zb3VyY2VUeXBlXyA9PT0gJ2Rhc2gnID8gbmV3IERhc2hQbGF5bGlzdExvYWRlcihzcmMsIF90aGlzLnZoc18sIF90aGlzLnJlcXVlc3RPcHRpb25zXykgOiBuZXcgUGxheWxpc3RMb2FkZXIoc3JjLCBfdGhpcy52aHNfLCBfdGhpcy5yZXF1ZXN0T3B0aW9uc18pO1xuXG4gICAgX3RoaXMuc2V0dXBNYXN0ZXJQbGF5bGlzdExvYWRlckxpc3RlbmVyc18oKTsgLy8gc2V0dXAgc2VnbWVudCBsb2FkZXJzXG4gICAgLy8gY29tYmluZWQgYXVkaW8vdmlkZW8gb3IganVzdCB2aWRlbyB3aGVuIGFsdGVybmF0ZSBhdWRpbyB0cmFjayBpcyBzZWxlY3RlZFxuXG5cbiAgICBfdGhpcy5tYWluU2VnbWVudExvYWRlcl8gPSBuZXcgU2VnbWVudExvYWRlcih2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHNlZ21lbnRMb2FkZXJTZXR0aW5ncywge1xuICAgICAgc2VnbWVudE1ldGFkYXRhVHJhY2s6IF90aGlzLnNlZ21lbnRNZXRhZGF0YVRyYWNrXyxcbiAgICAgIGxvYWRlclR5cGU6ICdtYWluJ1xuICAgIH0pLCBvcHRpb25zKTsgLy8gYWx0ZXJuYXRlIGF1ZGlvIHRyYWNrXG5cbiAgICBfdGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfID0gbmV3IFNlZ21lbnRMb2FkZXIodmlkZW9qcyQxLm1lcmdlT3B0aW9ucyhzZWdtZW50TG9hZGVyU2V0dGluZ3MsIHtcbiAgICAgIGxvYWRlclR5cGU6ICdhdWRpbydcbiAgICB9KSwgb3B0aW9ucyk7XG4gICAgX3RoaXMuc3VidGl0bGVTZWdtZW50TG9hZGVyXyA9IG5ldyBWVFRTZWdtZW50TG9hZGVyKHZpZGVvanMkMS5tZXJnZU9wdGlvbnMoc2VnbWVudExvYWRlclNldHRpbmdzLCB7XG4gICAgICBsb2FkZXJUeXBlOiAndnR0JyxcbiAgICAgIGZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrczogX3RoaXMudGVjaF8uZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzXG4gICAgfSksIG9wdGlvbnMpO1xuXG4gICAgX3RoaXMuc2V0dXBTZWdtZW50TG9hZGVyTGlzdGVuZXJzXygpOyAvLyBDcmVhdGUgU2VnbWVudExvYWRlciBzdGF0LWdldHRlcnNcbiAgICAvLyBtZWRpYVJlcXVlc3RzX1xuICAgIC8vIG1lZGlhUmVxdWVzdHNBYm9ydGVkX1xuICAgIC8vIG1lZGlhUmVxdWVzdHNUaW1lZG91dF9cbiAgICAvLyBtZWRpYVJlcXVlc3RzRXJyb3JlZF9cbiAgICAvLyBtZWRpYVRyYW5zZmVyRHVyYXRpb25fXG4gICAgLy8gbWVkaWFCeXRlc1RyYW5zZmVycmVkX1xuXG5cbiAgICBsb2FkZXJTdGF0cy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0KSB7XG4gICAgICBfdGhpc1tzdGF0ICsgJ18nXSA9IHN1bUxvYWRlclN0YXQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgc3RhdCk7XG4gICAgfSk7XG4gICAgX3RoaXMubG9nZ2VyXyA9IGxvZ2dlcignTVBDJyk7XG4gICAgX3RoaXMudHJpZ2dlcmVkRm1wNFVzYWdlID0gZmFsc2U7XG5cbiAgICBfdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubG9hZCgpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBldmVudCBoYW5kbGVycyBvbiB0aGUgbWFzdGVyIHBsYXlsaXN0IGxvYWRlci4gQSBoZWxwZXJcbiAgICogZnVuY3Rpb24gZm9yIGNvbnN0cnVjdGlvbiB0aW1lLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXR1cE1hc3RlclBsYXlsaXN0TG9hZGVyTGlzdGVuZXJzXyA9IGZ1bmN0aW9uIHNldHVwTWFzdGVyUGxheWxpc3RMb2FkZXJMaXN0ZW5lcnNfKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ub24oJ2xvYWRlZG1ldGFkYXRhJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1lZGlhID0gX3RoaXMyLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpO1xuXG4gICAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBtZWRpYS50YXJnZXREdXJhdGlvbiAqIDEuNSAqIDEwMDA7IC8vIElmIHdlIGRvbid0IGhhdmUgYW55IG1vcmUgYXZhaWxhYmxlIHBsYXlsaXN0cywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgLy8gdGltZW91dCB0aGUgcmVxdWVzdC5cblxuICAgICAgaWYgKGlzTG93ZXN0RW5hYmxlZFJlbmRpdGlvbihfdGhpczIubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1hc3RlciwgX3RoaXMyLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpKSkge1xuICAgICAgICBfdGhpczIucmVxdWVzdE9wdGlvbnNfLnRpbWVvdXQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMyLnJlcXVlc3RPcHRpb25zXy50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG4gICAgICB9IC8vIGlmIHRoaXMgaXNuJ3QgYSBsaXZlIHZpZGVvIGFuZCBwcmVsb2FkIHBlcm1pdHMsIHN0YXJ0XG4gICAgICAvLyBkb3dubG9hZGluZyBzZWdtZW50c1xuXG5cbiAgICAgIGlmIChtZWRpYS5lbmRMaXN0ICYmIF90aGlzMi50ZWNoXy5wcmVsb2FkKCkgIT09ICdub25lJykge1xuICAgICAgICBfdGhpczIubWFpblNlZ21lbnRMb2FkZXJfLnBsYXlsaXN0KG1lZGlhLCBfdGhpczIucmVxdWVzdE9wdGlvbnNfKTtcblxuICAgICAgICBfdGhpczIubWFpblNlZ21lbnRMb2FkZXJfLmxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgc2V0dXBNZWRpYUdyb3Vwcyh7XG4gICAgICAgIHNvdXJjZVR5cGU6IF90aGlzMi5zb3VyY2VUeXBlXyxcbiAgICAgICAgc2VnbWVudExvYWRlcnM6IHtcbiAgICAgICAgICBBVURJTzogX3RoaXMyLmF1ZGlvU2VnbWVudExvYWRlcl8sXG4gICAgICAgICAgU1VCVElUTEVTOiBfdGhpczIuc3VidGl0bGVTZWdtZW50TG9hZGVyXyxcbiAgICAgICAgICBtYWluOiBfdGhpczIubWFpblNlZ21lbnRMb2FkZXJfXG4gICAgICAgIH0sXG4gICAgICAgIHRlY2g6IF90aGlzMi50ZWNoXyxcbiAgICAgICAgcmVxdWVzdE9wdGlvbnM6IF90aGlzMi5yZXF1ZXN0T3B0aW9uc18sXG4gICAgICAgIG1hc3RlclBsYXlsaXN0TG9hZGVyOiBfdGhpczIubWFzdGVyUGxheWxpc3RMb2FkZXJfLFxuICAgICAgICB2aHM6IF90aGlzMi52aHNfLFxuICAgICAgICBtYXN0ZXI6IF90aGlzMi5tYXN0ZXIoKSxcbiAgICAgICAgbWVkaWFUeXBlczogX3RoaXMyLm1lZGlhVHlwZXNfLFxuICAgICAgICBibGFja2xpc3RDdXJyZW50UGxheWxpc3Q6IF90aGlzMi5ibGFja2xpc3RDdXJyZW50UGxheWxpc3QuYmluZChfdGhpczIpXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMyLnRyaWdnZXJQcmVzZW5jZVVzYWdlXyhfdGhpczIubWFzdGVyKCksIG1lZGlhKTtcblxuICAgICAgX3RoaXMyLnNldHVwRmlyc3RQbGF5KCk7XG5cbiAgICAgIGlmICghX3RoaXMyLm1lZGlhVHlwZXNfLkFVRElPLmFjdGl2ZVBsYXlsaXN0TG9hZGVyIHx8IF90aGlzMi5tZWRpYVR5cGVzXy5BVURJTy5hY3RpdmVQbGF5bGlzdExvYWRlci5tZWRpYSgpKSB7XG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdzZWxlY3RlZGluaXRpYWxtZWRpYScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2UgbXVzdCB3YWl0IGZvciB0aGUgYWN0aXZlIGF1ZGlvIHBsYXlsaXN0IGxvYWRlciB0b1xuICAgICAgICAvLyBmaW5pc2ggc2V0dGluZyB1cCBiZWZvcmUgdHJpZ2dlcmluZyB0aGlzIGV2ZW50IHNvIHRoZVxuICAgICAgICAvLyByZXByZXNlbnRhdGlvbnMgQVBJIGFuZCBFTUUgc2V0dXAgaXMgY29ycmVjdFxuICAgICAgICBfdGhpczIubWVkaWFUeXBlc18uQVVESU8uYWN0aXZlUGxheWxpc3RMb2FkZXIub25lKCdsb2FkZWRtZXRhZGF0YScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIudHJpZ2dlcignc2VsZWN0ZWRpbml0aWFsbWVkaWEnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ub24oJ2xvYWRlZHBsYXlsaXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHVwZGF0ZWRQbGF5bGlzdCA9IF90aGlzMi5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEoKTtcblxuICAgICAgaWYgKCF1cGRhdGVkUGxheWxpc3QpIHtcbiAgICAgICAgLy8gZXhjbHVkZSBhbnkgdmFyaWFudHMgdGhhdCBhcmUgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlciBiZWZvcmUgc2VsZWN0aW5nXG4gICAgICAgIC8vIGFuIGluaXRpYWwgbWVkaWEgYXMgdGhlIHBsYXlsaXN0IHNlbGVjdG9ycyBkbyBub3QgY29uc2lkZXIgYnJvd3NlciBzdXBwb3J0XG4gICAgICAgIF90aGlzMi5leGNsdWRlVW5zdXBwb3J0ZWRWYXJpYW50c18oKTtcblxuICAgICAgICB2YXIgc2VsZWN0ZWRNZWRpYTtcblxuICAgICAgICBpZiAoX3RoaXMyLmVuYWJsZUxvd0luaXRpYWxQbGF5bGlzdCkge1xuICAgICAgICAgIHNlbGVjdGVkTWVkaWEgPSBfdGhpczIuc2VsZWN0SW5pdGlhbFBsYXlsaXN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNlbGVjdGVkTWVkaWEpIHtcbiAgICAgICAgICBzZWxlY3RlZE1lZGlhID0gX3RoaXMyLnNlbGVjdFBsYXlsaXN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIuaW5pdGlhbE1lZGlhXyA9IHNlbGVjdGVkTWVkaWE7XG5cbiAgICAgICAgX3RoaXMyLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYShfdGhpczIuaW5pdGlhbE1lZGlhXyk7IC8vIFVuZGVyIHRoZSBzdGFuZGFyZCBjYXNlIHdoZXJlIGEgc291cmNlIFVSTCBpcyBwcm92aWRlZCwgbG9hZGVkcGxheWxpc3Qgd2lsbFxuICAgICAgICAvLyBmaXJlIGFnYWluIHNpbmNlIHRoZSBwbGF5bGlzdCB3aWxsIGJlIHJlcXVlc3RlZC4gSW4gdGhlIGNhc2Ugb2YgdmhzLWpzb25cbiAgICAgICAgLy8gKHdoZXJlIHRoZSBtYW5pZmVzdCBvYmplY3QgaXMgcHJvdmlkZWQgYXMgdGhlIHNvdXJjZSksIHdoZW4gdGhlIG1lZGlhXG4gICAgICAgIC8vIHBsYXlsaXN0J3MgYHNlZ21lbnRzYCBsaXN0IGlzIGFscmVhZHkgYXZhaWxhYmxlLCBhIG1lZGlhIHBsYXlsaXN0IHdvbid0IGJlXG4gICAgICAgIC8vIHJlcXVlc3RlZCwgYW5kIGxvYWRlZHBsYXlsaXN0IHdvbid0IGZpcmUgYWdhaW4sIHNvIHRoZSBwbGF5bGlzdCBoYW5kbGVyIG11c3QgYmVcbiAgICAgICAgLy8gY2FsbGVkIG9uIGl0cyBvd24gaGVyZS5cblxuXG4gICAgICAgIHZhciBoYXZlSnNvblNvdXJjZSA9IF90aGlzMi5zb3VyY2VUeXBlXyA9PT0gJ3Zocy1qc29uJyAmJiBfdGhpczIuaW5pdGlhbE1lZGlhXy5zZWdtZW50cztcblxuICAgICAgICBpZiAoIWhhdmVKc29uU291cmNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlZFBsYXlsaXN0ID0gX3RoaXMyLmluaXRpYWxNZWRpYV87XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5oYW5kbGVVcGRhdGVkTWVkaWFQbGF5bGlzdCh1cGRhdGVkUGxheWxpc3QpO1xuICAgIH0pO1xuICAgIHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm9uKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5ibGFja2xpc3RDdXJyZW50UGxheWxpc3QoX3RoaXMyLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5lcnJvcik7XG4gICAgfSk7XG4gICAgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ub24oJ21lZGlhY2hhbmdpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIubWFpblNlZ21lbnRMb2FkZXJfLmFib3J0KCk7XG5cbiAgICAgIF90aGlzMi5tYWluU2VnbWVudExvYWRlcl8ucGF1c2UoKTtcbiAgICB9KTtcbiAgICB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5vbignbWVkaWFjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWVkaWEgPSBfdGhpczIubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCk7XG5cbiAgICAgIHZhciByZXF1ZXN0VGltZW91dCA9IG1lZGlhLnRhcmdldER1cmF0aW9uICogMS41ICogMTAwMDsgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbnkgbW9yZSBhdmFpbGFibGUgcGxheWxpc3RzLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAvLyB0aW1lb3V0IHRoZSByZXF1ZXN0LlxuXG4gICAgICBpZiAoaXNMb3dlc3RFbmFibGVkUmVuZGl0aW9uKF90aGlzMi5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWFzdGVyLCBfdGhpczIubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCkpKSB7XG4gICAgICAgIF90aGlzMi5yZXF1ZXN0T3B0aW9uc18udGltZW91dCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpczIucmVxdWVzdE9wdGlvbnNfLnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiAgICAgIH0gLy8gVE9ETzogQ3JlYXRlIGEgbmV3IGV2ZW50IG9uIHRoZSBQbGF5bGlzdExvYWRlciB0aGF0IHNpZ25hbHNcbiAgICAgIC8vIHRoYXQgdGhlIHNlZ21lbnRzIGhhdmUgY2hhbmdlZCBpbiBzb21lIHdheSBhbmQgdXNlIHRoYXQgdG9cbiAgICAgIC8vIHVwZGF0ZSB0aGUgU2VnbWVudExvYWRlciBpbnN0ZWFkIG9mIGRvaW5nIGl0IHR3aWNlIGhlcmUgYW5kXG4gICAgICAvLyBvbiBgbG9hZGVkcGxheWxpc3RgXG5cblxuICAgICAgX3RoaXMyLm1haW5TZWdtZW50TG9hZGVyXy5wbGF5bGlzdChtZWRpYSwgX3RoaXMyLnJlcXVlc3RPcHRpb25zXyk7XG5cbiAgICAgIF90aGlzMi5tYWluU2VnbWVudExvYWRlcl8ubG9hZCgpO1xuXG4gICAgICBfdGhpczIudGVjaF8udHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdtZWRpYWNoYW5nZScsXG4gICAgICAgIGJ1YmJsZXM6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm9uKCdwbGF5bGlzdHVuY2hhbmdlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB1cGRhdGVkUGxheWxpc3QgPSBfdGhpczIubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCk7XG5cbiAgICAgIHZhciBwbGF5bGlzdE91dGRhdGVkID0gX3RoaXMyLnN0dWNrQXRQbGF5bGlzdEVuZF8odXBkYXRlZFBsYXlsaXN0KTtcblxuICAgICAgaWYgKHBsYXlsaXN0T3V0ZGF0ZWQpIHtcbiAgICAgICAgLy8gUGxheWxpc3QgaGFzIHN0b3BwZWQgdXBkYXRpbmcgYW5kIHdlJ3JlIHN0dWNrIGF0IGl0cyBlbmQuIFRyeSB0b1xuICAgICAgICAvLyBibGFja2xpc3QgaXQgYW5kIHN3aXRjaCB0byBhbm90aGVyIHBsYXlsaXN0IGluIHRoZSBob3BlIHRoYXQgdGhhdFxuICAgICAgICAvLyBvbmUgaXMgdXBkYXRpbmcgKGFuZCBnaXZlIHRoZSBwbGF5ZXIgYSBjaGFuY2UgdG8gcmUtYWRqdXN0IHRvIHRoZVxuICAgICAgICAvLyBzYWZlIGxpdmUgcG9pbnQpLlxuICAgICAgICBfdGhpczIuYmxhY2tsaXN0Q3VycmVudFBsYXlsaXN0KHtcbiAgICAgICAgICBtZXNzYWdlOiAnUGxheWxpc3Qgbm8gbG9uZ2VyIHVwZGF0aW5nLidcbiAgICAgICAgfSk7IC8vIHVzZWZ1bCBmb3IgbW9uaXRvcmluZyBRb1NcblxuXG4gICAgICAgIF90aGlzMi50ZWNoXy50cmlnZ2VyKCdwbGF5bGlzdHN0dWNrJyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ub24oJ3JlbmRpdGlvbmRpc2FibGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAndmhzLXJlbmRpdGlvbi1kaXNhYmxlZCdcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczIudGVjaF8udHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgIG5hbWU6ICdobHMtcmVuZGl0aW9uLWRpc2FibGVkJ1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ub24oJ3JlbmRpdGlvbmVuYWJsZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIudGVjaF8udHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgIG5hbWU6ICd2aHMtcmVuZGl0aW9uLWVuYWJsZWQnXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMyLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAnaGxzLXJlbmRpdGlvbi1lbmFibGVkJ1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEdpdmVuIGFuIHVwZGF0ZWQgbWVkaWEgcGxheWxpc3QgKHdoZXRoZXIgaXQgd2FzIGxvYWRlZCBmb3IgdGhlIGZpcnN0IHRpbWUsIG9yXG4gICAqIHJlZnJlc2hlZCBmb3IgbGl2ZSBwbGF5bGlzdHMpLCB1cGRhdGUgYW55IHJlbGV2YW50IHByb3BlcnRpZXMgYW5kIHN0YXRlIHRvIHJlZmxlY3RcbiAgICogY2hhbmdlcyBpbiB0aGUgbWVkaWEgdGhhdCBzaG91bGQgYmUgYWNjb3VudGVkIGZvciAoZS5nLiwgY3VlcyBhbmQgZHVyYXRpb24pLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdXBkYXRlZFBsYXlsaXN0IHRoZSB1cGRhdGVkIG1lZGlhIHBsYXlsaXN0IG9iamVjdFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVVcGRhdGVkTWVkaWFQbGF5bGlzdCA9IGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZWRNZWRpYVBsYXlsaXN0KHVwZGF0ZWRQbGF5bGlzdCkge1xuICAgIGlmICh0aGlzLnVzZUN1ZVRhZ3NfKSB7XG4gICAgICB0aGlzLnVwZGF0ZUFkQ3Vlc18odXBkYXRlZFBsYXlsaXN0KTtcbiAgICB9IC8vIFRPRE86IENyZWF0ZSBhIG5ldyBldmVudCBvbiB0aGUgUGxheWxpc3RMb2FkZXIgdGhhdCBzaWduYWxzXG4gICAgLy8gdGhhdCB0aGUgc2VnbWVudHMgaGF2ZSBjaGFuZ2VkIGluIHNvbWUgd2F5IGFuZCB1c2UgdGhhdCB0b1xuICAgIC8vIHVwZGF0ZSB0aGUgU2VnbWVudExvYWRlciBpbnN0ZWFkIG9mIGRvaW5nIGl0IHR3aWNlIGhlcmUgYW5kXG4gICAgLy8gb24gYG1lZGlhY2hhbmdlYFxuXG5cbiAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5wbGF5bGlzdCh1cGRhdGVkUGxheWxpc3QsIHRoaXMucmVxdWVzdE9wdGlvbnNfKTtcbiAgICB0aGlzLnVwZGF0ZUR1cmF0aW9uKCF1cGRhdGVkUGxheWxpc3QuZW5kTGlzdCk7IC8vIElmIHRoZSBwbGF5ZXIgaXNuJ3QgcGF1c2VkLCBlbnN1cmUgdGhhdCB0aGUgc2VnbWVudCBsb2FkZXIgaXMgcnVubmluZyxcbiAgICAvLyBhcyBpdCBpcyBwb3NzaWJsZSB0aGF0IGl0IHdhcyB0ZW1wb3JhcmlseSBzdG9wcGVkIHdoaWxlIHdhaXRpbmcgZm9yXG4gICAgLy8gYSBwbGF5bGlzdCAoZS5nLiwgaW4gY2FzZSB0aGUgcGxheWxpc3QgZXJyb3JlZCBhbmQgd2UgcmUtcmVxdWVzdGVkIGl0KS5cblxuICAgIGlmICghdGhpcy50ZWNoXy5wYXVzZWQoKSkge1xuICAgICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ubG9hZCgpO1xuXG4gICAgICBpZiAodGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfKSB7XG4gICAgICAgIHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5sb2FkKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBIGhlbHBlciBmdW5jdGlvbiBmb3IgdHJpZ2dlcnJpbmcgcHJlc2VuY2UgdXNhZ2UgZXZlbnRzIG9uY2UgcGVyIHNvdXJjZVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50cmlnZ2VyUHJlc2VuY2VVc2FnZV8gPSBmdW5jdGlvbiB0cmlnZ2VyUHJlc2VuY2VVc2FnZV8obWFzdGVyLCBtZWRpYSkge1xuICAgIHZhciBtZWRpYUdyb3VwcyA9IG1hc3Rlci5tZWRpYUdyb3VwcyB8fCB7fTtcbiAgICB2YXIgZGVmYXVsdERlbXV4ZWQgPSB0cnVlO1xuICAgIHZhciBhdWRpb0dyb3VwS2V5cyA9IE9iamVjdC5rZXlzKG1lZGlhR3JvdXBzLkFVRElPKTtcblxuICAgIGZvciAodmFyIG1lZGlhR3JvdXAgaW4gbWVkaWFHcm91cHMuQVVESU8pIHtcbiAgICAgIGZvciAodmFyIGxhYmVsIGluIG1lZGlhR3JvdXBzLkFVRElPW21lZGlhR3JvdXBdKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gbWVkaWFHcm91cHMuQVVESU9bbWVkaWFHcm91cF1bbGFiZWxdO1xuXG4gICAgICAgIGlmICghcHJvcGVydGllcy51cmkpIHtcbiAgICAgICAgICBkZWZhdWx0RGVtdXhlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRlZmF1bHREZW11eGVkKSB7XG4gICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAndmhzLWRlbXV4ZWQnXG4gICAgICB9KTtcbiAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgIG5hbWU6ICdobHMtZGVtdXhlZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyhtZWRpYUdyb3Vwcy5TVUJUSVRMRVMpLmxlbmd0aCkge1xuICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgbmFtZTogJ3Zocy13ZWJ2dHQnXG4gICAgICB9KTtcbiAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgIG5hbWU6ICdobHMtd2VidnR0J1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKFZocy5QbGF5bGlzdC5pc0FlcyhtZWRpYSkpIHtcbiAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgIG5hbWU6ICd2aHMtYWVzJ1xuICAgICAgfSk7XG4gICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAnaGxzLWFlcydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChhdWRpb0dyb3VwS2V5cy5sZW5ndGggJiYgT2JqZWN0LmtleXMobWVkaWFHcm91cHMuQVVESU9bYXVkaW9Hcm91cEtleXNbMF1dKS5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAndmhzLWFsdGVybmF0ZS1hdWRpbydcbiAgICAgIH0pO1xuICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgbmFtZTogJ2hscy1hbHRlcm5hdGUtYXVkaW8nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy51c2VDdWVUYWdzXykge1xuICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgbmFtZTogJ3Zocy1wbGF5bGlzdC1jdWUtdGFncydcbiAgICAgIH0pO1xuICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgbmFtZTogJ2hscy1wbGF5bGlzdC1jdWUtdGFncydcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnMgb24gdGhlIHNlZ21lbnQgbG9hZGVycy4gQSBoZWxwZXIgZnVuY3Rpb25cbiAgICogZm9yIGNvbnN0cnVjdGlvbiB0aW1lLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXR1cFNlZ21lbnRMb2FkZXJMaXN0ZW5lcnNfID0gZnVuY3Rpb24gc2V0dXBTZWdtZW50TG9hZGVyTGlzdGVuZXJzXygpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLm9uKCdiYW5kd2lkdGh1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmV4dFBsYXlsaXN0ID0gX3RoaXMzLnNlbGVjdFBsYXlsaXN0KCk7XG5cbiAgICAgIHZhciBjdXJyZW50UGxheWxpc3QgPSBfdGhpczMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCk7XG5cbiAgICAgIHZhciBidWZmZXJlZCA9IF90aGlzMy50ZWNoXy5idWZmZXJlZCgpO1xuXG4gICAgICB2YXIgZm9yd2FyZEJ1ZmZlciA9IGJ1ZmZlcmVkLmxlbmd0aCA/IGJ1ZmZlcmVkLmVuZChidWZmZXJlZC5sZW5ndGggLSAxKSAtIF90aGlzMy50ZWNoXy5jdXJyZW50VGltZSgpIDogMDtcblxuICAgICAgdmFyIGJ1ZmZlckxvd1dhdGVyTGluZSA9IF90aGlzMy5idWZmZXJMb3dXYXRlckxpbmUoKTtcblxuICAgICAgaWYgKHNob3VsZFN3aXRjaFRvTWVkaWEoe1xuICAgICAgICBjdXJyZW50UGxheWxpc3Q6IGN1cnJlbnRQbGF5bGlzdCxcbiAgICAgICAgbmV4dFBsYXlsaXN0OiBuZXh0UGxheWxpc3QsXG4gICAgICAgIGZvcndhcmRCdWZmZXI6IGZvcndhcmRCdWZmZXIsXG4gICAgICAgIGJ1ZmZlckxvd1dhdGVyTGluZTogYnVmZmVyTG93V2F0ZXJMaW5lLFxuICAgICAgICBkdXJhdGlvbjogX3RoaXMzLmR1cmF0aW9uKCksXG4gICAgICAgIGxvZzogX3RoaXMzLmxvZ2dlcl9cbiAgICAgIH0pKSB7XG4gICAgICAgIF90aGlzMy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEobmV4dFBsYXlsaXN0KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMzLnRlY2hfLnRyaWdnZXIoJ2JhbmR3aWR0aHVwZGF0ZScpO1xuICAgIH0pO1xuICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLm9uKCdwcm9ncmVzcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy50cmlnZ2VyKCdwcm9ncmVzcycpO1xuICAgIH0pO1xuICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLm9uKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5ibGFja2xpc3RDdXJyZW50UGxheWxpc3QoX3RoaXMzLm1haW5TZWdtZW50TG9hZGVyXy5lcnJvcigpKTtcbiAgICB9KTtcbiAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5vbignYXBwZW5kZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMuZXJyb3IgPSBfdGhpczMubWFpblNlZ21lbnRMb2FkZXJfLmVycm9yXztcblxuICAgICAgX3RoaXMzLnRyaWdnZXIoJ2Vycm9yJyk7XG4gICAgfSk7XG4gICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ub24oJ3N5bmNpbmZvdXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLm9uU3luY0luZm9VcGRhdGVfKCk7XG4gICAgfSk7XG4gICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ub24oJ3RpbWVzdGFtcG9mZnNldCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgbmFtZTogJ3Zocy10aW1lc3RhbXAtb2Zmc2V0J1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzMy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgbmFtZTogJ2hscy10aW1lc3RhbXAtb2Zmc2V0J1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfLm9uKCdzeW5jaW5mb3VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5vblN5bmNJbmZvVXBkYXRlXygpO1xuICAgIH0pO1xuICAgIHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5vbignYXBwZW5kZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMuZXJyb3IgPSBfdGhpczMuYXVkaW9TZWdtZW50TG9hZGVyXy5lcnJvcl87XG5cbiAgICAgIF90aGlzMy50cmlnZ2VyKCdlcnJvcicpO1xuICAgIH0pO1xuICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLm9uKCdlbmRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5sb2dnZXJfKCdtYWluIHNlZ21lbnQgbG9hZGVyIGVuZGVkJyk7XG5cbiAgICAgIF90aGlzMy5vbkVuZE9mU3RyZWFtKCk7XG4gICAgfSk7XG4gICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ub24oJ2Vhcmx5YWJvcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMuYmxhY2tsaXN0Q3VycmVudFBsYXlsaXN0KHtcbiAgICAgICAgbWVzc2FnZTogJ0Fib3J0ZWQgZWFybHkgYmVjYXVzZSB0aGVyZSBpc25cXCd0IGVub3VnaCBiYW5kd2lkdGggdG8gY29tcGxldGUgdGhlICcgKyAncmVxdWVzdCB3aXRob3V0IHJlYnVmZmVyaW5nLidcbiAgICAgIH0sIEFCT1JUX0VBUkxZX0JMQUNLTElTVF9TRUNPTkRTKTtcbiAgICB9KTtcblxuICAgIHZhciB1cGRhdGVDb2RlY3MgPSBmdW5jdGlvbiB1cGRhdGVDb2RlY3MoKSB7XG4gICAgICBpZiAoIV90aGlzMy5zb3VyY2VVcGRhdGVyXy5yZWFkeSgpKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMudHJ5VG9DcmVhdGVTb3VyY2VCdWZmZXJzXygpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29kZWNzID0gX3RoaXMzLmdldENvZGVjc09yRXhjbHVkZV8oKTsgLy8gbm8gY29kZWNzIG1lYW5zIHRoYXQgdGhlIHBsYXlsaXN0IHdhcyBleGNsdWRlZFxuXG5cbiAgICAgIGlmICghY29kZWNzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMzLnNvdXJjZVVwZGF0ZXJfLmFkZE9yQ2hhbmdlU291cmNlQnVmZmVycyhjb2RlY3MpO1xuICAgIH07XG5cbiAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5vbigndHJhY2tpbmZvJywgdXBkYXRlQ29kZWNzKTtcbiAgICB0aGlzLmF1ZGlvU2VnbWVudExvYWRlcl8ub24oJ3RyYWNraW5mbycsIHVwZGF0ZUNvZGVjcyk7XG4gICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8ub24oJ2ZtcDQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzMy50cmlnZ2VyZWRGbXA0VXNhZ2UpIHtcbiAgICAgICAgX3RoaXMzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgbmFtZTogJ3Zocy1mbXA0J1xuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpczMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgICBuYW1lOiAnaGxzLWZtcDQnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzMy50cmlnZ2VyZWRGbXA0VXNhZ2UgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5vbignZm1wNCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMzLnRyaWdnZXJlZEZtcDRVc2FnZSkge1xuICAgICAgICBfdGhpczMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgICBuYW1lOiAndmhzLWZtcDQnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzMy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICAgIG5hbWU6ICdobHMtZm1wNCdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMzLnRyaWdnZXJlZEZtcDRVc2FnZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfLm9uKCdlbmRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5sb2dnZXJfKCdhdWRpb1NlZ21lbnRMb2FkZXIgZW5kZWQnKTtcblxuICAgICAgX3RoaXMzLm9uRW5kT2ZTdHJlYW0oKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWVkaWFTZWNvbmRzTG9hZGVkXyA9IGZ1bmN0aW9uIG1lZGlhU2Vjb25kc0xvYWRlZF8oKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5tZWRpYVNlY29uZHNMb2FkZWQgKyB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5tZWRpYVNlY29uZHNMb2FkZWQpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGxvYWQgb24gb3VyIFNlZ21lbnRMb2FkZXJzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxvYWQgPSBmdW5jdGlvbiBsb2FkKCkge1xuICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLmxvYWQoKTtcblxuICAgIGlmICh0aGlzLm1lZGlhVHlwZXNfLkFVRElPLmFjdGl2ZVBsYXlsaXN0TG9hZGVyKSB7XG4gICAgICB0aGlzLmF1ZGlvU2VnbWVudExvYWRlcl8ubG9hZCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1lZGlhVHlwZXNfLlNVQlRJVExFUy5hY3RpdmVQbGF5bGlzdExvYWRlcikge1xuICAgICAgdGhpcy5zdWJ0aXRsZVNlZ21lbnRMb2FkZXJfLmxvYWQoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlLXR1bmUgcGxheWJhY2sgcXVhbGl0eSBsZXZlbCBmb3IgdGhlIGN1cnJlbnQgcGxheWVyXG4gICAqIGNvbmRpdGlvbnMgd2l0aG91dCBwZXJmb3JtaW5nIGRlc3RydWN0aXZlIGFjdGlvbnMsIGxpa2VcbiAgICogcmVtb3ZpbmcgYWxyZWFkeSBidWZmZXJlZCBjb250ZW50XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNtb290aFF1YWxpdHlDaGFuZ2VfID0gZnVuY3Rpb24gc21vb3RoUXVhbGl0eUNoYW5nZV8obWVkaWEpIHtcbiAgICBpZiAobWVkaWEgPT09IHZvaWQgMCkge1xuICAgICAgbWVkaWEgPSB0aGlzLnNlbGVjdFBsYXlsaXN0KCk7XG4gICAgfVxuXG4gICAgaWYgKG1lZGlhID09PSB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEobWVkaWEpO1xuICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLnJlc2V0TG9hZGVyKCk7IC8vIGRvbid0IG5lZWQgdG8gcmVzZXQgYXVkaW8gYXMgaXQgaXMgcmVzZXQgd2hlbiBtZWRpYSBjaGFuZ2VzXG4gIH1cbiAgLyoqXG4gICAqIFJlLXR1bmUgcGxheWJhY2sgcXVhbGl0eSBsZXZlbCBmb3IgdGhlIGN1cnJlbnQgcGxheWVyXG4gICAqIGNvbmRpdGlvbnMuIFRoaXMgbWV0aG9kIHdpbGwgcGVyZm9ybSBkZXN0cnVjdGl2ZSBhY3Rpb25zIGxpa2UgcmVtb3ZpbmdcbiAgICogYWxyZWFkeSBidWZmZXJlZCBjb250ZW50IGluIG9yZGVyIHRvIHJlYWRqdXN0IHRoZSBjdXJyZW50bHkgYWN0aXZlXG4gICAqIHBsYXlsaXN0IHF1aWNrbHkuIFRoaXMgaXMgZ29vZCBmb3IgbWFudWFsIHF1YWxpdHkgY2hhbmdlc1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mYXN0UXVhbGl0eUNoYW5nZV8gPSBmdW5jdGlvbiBmYXN0UXVhbGl0eUNoYW5nZV8obWVkaWEpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChtZWRpYSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZWRpYSA9IHRoaXMuc2VsZWN0UGxheWxpc3QoKTtcbiAgICB9XG5cbiAgICBpZiAobWVkaWEgPT09IHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYShtZWRpYSk7IC8vIERlbGV0ZSBhbGwgYnVmZmVyZWQgZGF0YSB0byBhbGxvdyBhbiBpbW1lZGlhdGUgcXVhbGl0eSBzd2l0Y2gsIHRoZW4gc2VlayB0byBnaXZlXG4gICAgLy8gdGhlIGJyb3dzZXIgYSBraWNrIHRvIHJlbW92ZSBhbnkgY2FjaGVkIGZyYW1lcyBmcm9tIHRoZSBwcmV2aW91cyByZW5kdGlvbiAoLjA0IHNlY29uZHNcbiAgICAvLyBhaGVhZCBpcyByb3VnaGx5IHRoZSBtaW5pbXVtIHRoYXQgd2lsbCBhY2NvbXBsaXNoIHRoaXMgYWNyb3NzIGEgdmFyaWV0eSBvZiBjb250ZW50XG4gICAgLy8gaW4gSUUgYW5kIEVkZ2UsIGJ1dCBzZWVraW5nIGluIHBsYWNlIGlzIHN1ZmZpY2llbnQgb24gYWxsIG90aGVyIGJyb3dzZXJzKVxuICAgIC8vIEVkZ2UvSUUgYnVnOiBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xNDYwMDM3NS9cbiAgICAvLyBDaHJvbWUgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02NTE5MDRcblxuICAgIHRoaXMubWFpblNlZ21lbnRMb2FkZXJfLnJlc2V0RXZlcnl0aGluZyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBTaW5jZSB0aGlzIGlzIG5vdCBhIHR5cGljYWwgc2Vlaywgd2UgYXZvaWQgdGhlIHNlZWtUbyBtZXRob2Qgd2hpY2ggY2FuIGNhdXNlIHNlZ21lbnRzXG4gICAgICAvLyBmcm9tIHRoZSBwcmV2aW91c2x5IGVuYWJsZWQgcmVuZGl0aW9uIHRvIGxvYWQgYmVmb3JlIHRoZSBuZXcgcGxheWxpc3QgaGFzIGZpbmlzaGVkIGxvYWRpbmdcbiAgICAgIGlmICh2aWRlb2pzJDEuYnJvd3Nlci5JRV9WRVJTSU9OIHx8IHZpZGVvanMkMS5icm93c2VyLklTX0VER0UpIHtcbiAgICAgICAgX3RoaXM0LnRlY2hfLnNldEN1cnJlbnRUaW1lKF90aGlzNC50ZWNoXy5jdXJyZW50VGltZSgpICsgMC4wNCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpczQudGVjaF8uc2V0Q3VycmVudFRpbWUoX3RoaXM0LnRlY2hfLmN1cnJlbnRUaW1lKCkpO1xuICAgICAgfVxuICAgIH0pOyAvLyBkb24ndCBuZWVkIHRvIHJlc2V0IGF1ZGlvIGFzIGl0IGlzIHJlc2V0IHdoZW4gbWVkaWEgY2hhbmdlc1xuICB9XG4gIC8qKlxuICAgKiBCZWdpbiBwbGF5YmFjay5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGxheSA9IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgaWYgKHRoaXMuc2V0dXBGaXJzdFBsYXkoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRlY2hfLmVuZGVkKCkpIHtcbiAgICAgIHRoaXMudGVjaF8uc2V0Q3VycmVudFRpbWUoMCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFzUGxheWVkXykge1xuICAgICAgdGhpcy5sb2FkKCk7XG4gICAgfVxuXG4gICAgdmFyIHNlZWthYmxlID0gdGhpcy50ZWNoXy5zZWVrYWJsZSgpOyAvLyBpZiB0aGUgdmlld2VyIGhhcyBwYXVzZWQgYW5kIHdlIGZlbGwgb3V0IG9mIHRoZSBsaXZlIHdpbmRvdyxcbiAgICAvLyBzZWVrIGZvcndhcmQgdG8gdGhlIGxpdmUgcG9pbnRcblxuICAgIGlmICh0aGlzLnRlY2hfLmR1cmF0aW9uKCkgPT09IEluZmluaXR5KSB7XG4gICAgICBpZiAodGhpcy50ZWNoXy5jdXJyZW50VGltZSgpIDwgc2Vla2FibGUuc3RhcnQoMCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVjaF8uc2V0Q3VycmVudFRpbWUoc2Vla2FibGUuZW5kKHNlZWthYmxlLmxlbmd0aCAtIDEpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNlZWsgdG8gdGhlIGxhdGVzdCBtZWRpYSBwb3NpdGlvbiBpZiB0aGlzIGlzIGEgbGl2ZSB2aWRlbyBhbmQgdGhlXG4gICAqIHBsYXllciBhbmQgdmlkZW8gYXJlIGxvYWRlZCBhbmQgaW5pdGlhbGl6ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldHVwRmlyc3RQbGF5ID0gZnVuY3Rpb24gc2V0dXBGaXJzdFBsYXkoKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB2YXIgbWVkaWEgPSB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpOyAvLyBDaGVjayB0aGF0IGV2ZXJ5dGhpbmcgaXMgcmVhZHkgdG8gYmVnaW4gYnVmZmVyaW5nIGZvciB0aGUgZmlyc3QgY2FsbCB0byBwbGF5XG4gICAgLy8gIElmIDEpIHRoZXJlIGlzIG5vIGFjdGl2ZSBtZWRpYVxuICAgIC8vICAgICAyKSB0aGUgcGxheWVyIGlzIHBhdXNlZFxuICAgIC8vICAgICAzKSB0aGUgZmlyc3QgcGxheSBoYXMgYWxyZWFkeSBiZWVuIHNldHVwXG4gICAgLy8gdGhlbiBleGl0IGVhcmx5XG5cbiAgICBpZiAoIW1lZGlhIHx8IHRoaXMudGVjaF8ucGF1c2VkKCkgfHwgdGhpcy5oYXNQbGF5ZWRfKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyB3aGVuIHRoZSB2aWRlbyBpcyBhIGxpdmUgc3RyZWFtXG5cblxuICAgIGlmICghbWVkaWEuZW5kTGlzdCkge1xuICAgICAgdmFyIHNlZWthYmxlID0gdGhpcy5zZWVrYWJsZSgpO1xuXG4gICAgICBpZiAoIXNlZWthYmxlLmxlbmd0aCkge1xuICAgICAgICAvLyB3aXRob3V0IGEgc2Vla2FibGUgcmFuZ2UsIHRoZSBwbGF5ZXIgY2Fubm90IHNlZWsgdG8gYmVnaW4gYnVmZmVyaW5nIGF0IHRoZSBsaXZlXG4gICAgICAgIC8vIHBvaW50XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZpZGVvanMkMS5icm93c2VyLklFX1ZFUlNJT04gJiYgdGhpcy50ZWNoXy5yZWFkeVN0YXRlKCkgPT09IDApIHtcbiAgICAgICAgLy8gSUUxMSB0aHJvd3MgYW4gSW52YWxpZFN0YXRlRXJyb3IgaWYgeW91IHRyeSB0byBzZXQgY3VycmVudFRpbWUgd2hpbGUgdGhlXG4gICAgICAgIC8vIHJlYWR5U3RhdGUgaXMgMCwgc28gaXQgbXVzdCBiZSBkZWxheWVkIHVudGlsIHRoZSB0ZWNoIGZpcmVzIGxvYWRlZG1ldGFkYXRhLlxuICAgICAgICB0aGlzLnRlY2hfLm9uZSgnbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM1LnRyaWdnZXIoJ2ZpcnN0cGxheScpO1xuXG4gICAgICAgICAgX3RoaXM1LnRlY2hfLnNldEN1cnJlbnRUaW1lKHNlZWthYmxlLmVuZCgwKSk7XG5cbiAgICAgICAgICBfdGhpczUuaGFzUGxheWVkXyA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IC8vIHRyaWdnZXIgZmlyc3RwbGF5IHRvIGluZm9ybSB0aGUgc291cmNlIGhhbmRsZXIgdG8gaWdub3JlIHRoZSBuZXh0IHNlZWsgZXZlbnRcblxuXG4gICAgICB0aGlzLnRyaWdnZXIoJ2ZpcnN0cGxheScpOyAvLyBzZWVrIHRvIHRoZSBsaXZlIHBvaW50XG5cbiAgICAgIHRoaXMudGVjaF8uc2V0Q3VycmVudFRpbWUoc2Vla2FibGUuZW5kKDApKTtcbiAgICB9XG5cbiAgICB0aGlzLmhhc1BsYXllZF8gPSB0cnVlOyAvLyB3ZSBjYW4gYmVnaW4gbG9hZGluZyBub3cgdGhhdCBldmVyeXRoaW5nIGlzIHJlYWR5XG5cbiAgICB0aGlzLmxvYWQoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogaGFuZGxlIHRoZSBzb3VyY2VvcGVuIGV2ZW50IG9uIHRoZSBNZWRpYVNvdXJjZVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVTb3VyY2VPcGVuXyA9IGZ1bmN0aW9uIGhhbmRsZVNvdXJjZU9wZW5fKCkge1xuICAgIC8vIE9ubHkgYXR0ZW1wdCB0byBjcmVhdGUgdGhlIHNvdXJjZSBidWZmZXIgaWYgbm9uZSBhbHJlYWR5IGV4aXN0LlxuICAgIC8vIGhhbmRsZVNvdXJjZU9wZW4gaXMgYWxzbyBjYWxsZWQgd2hlbiB3ZSBhcmUgXCJyZS1vcGVuaW5nXCIgYSBzb3VyY2UgYnVmZmVyXG4gICAgLy8gYWZ0ZXIgYGVuZE9mU3RyZWFtYCBoYXMgYmVlbiBjYWxsZWQgKGluIHJlc3BvbnNlIHRvIGEgc2VlayBmb3IgaW5zdGFuY2UpXG4gICAgdGhpcy50cnlUb0NyZWF0ZVNvdXJjZUJ1ZmZlcnNfKCk7IC8vIGlmIGF1dG9wbGF5IGlzIGVuYWJsZWQsIGJlZ2luIHBsYXliYWNrLiBUaGlzIGlzIGR1cGxpY2F0aXZlIG9mXG4gICAgLy8gY29kZSBpbiB2aWRlby5qcyBidXQgaXMgcmVxdWlyZWQgYmVjYXVzZSBwbGF5KCkgbXVzdCBiZSBpbnZva2VkXG4gICAgLy8gKmFmdGVyKiB0aGUgbWVkaWEgc291cmNlIGhhcyBvcGVuZWQuXG5cbiAgICBpZiAodGhpcy50ZWNoXy5hdXRvcGxheSgpKSB7XG4gICAgICB2YXIgcGxheVByb21pc2UgPSB0aGlzLnRlY2hfLnBsYXkoKTsgLy8gQ2F0Y2gvc2lsZW5jZSBlcnJvciB3aGVuIGEgcGF1c2UgaW50ZXJydXB0cyBhIHBsYXkgcmVxdWVzdFxuICAgICAgLy8gb24gYnJvd3NlcnMgd2hpY2ggcmV0dXJuIGEgcHJvbWlzZVxuXG4gICAgICBpZiAodHlwZW9mIHBsYXlQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGxheVByb21pc2UudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwbGF5UHJvbWlzZS50aGVuKG51bGwsIGZ1bmN0aW9uIChlKSB7fSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKCdzb3VyY2VvcGVuJyk7XG4gIH1cbiAgLyoqXG4gICAqIGhhbmRsZSB0aGUgc291cmNlZW5kZWQgZXZlbnQgb24gdGhlIE1lZGlhU291cmNlXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhbmRsZVNvdXJjZUVuZGVkXyA9IGZ1bmN0aW9uIGhhbmRsZVNvdXJjZUVuZGVkXygpIHtcbiAgICBpZiAoIXRoaXMuaW5iYW5kVGV4dFRyYWNrc18ubWV0YWRhdGFUcmFja18pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY3VlcyA9IHRoaXMuaW5iYW5kVGV4dFRyYWNrc18ubWV0YWRhdGFUcmFja18uY3VlcztcblxuICAgIGlmICghY3VlcyB8fCAhY3Vlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCk7XG4gICAgY3Vlc1tjdWVzLmxlbmd0aCAtIDFdLmVuZFRpbWUgPSBpc05hTihkdXJhdGlvbikgfHwgTWF0aC5hYnMoZHVyYXRpb24pID09PSBJbmZpbml0eSA/IE51bWJlci5NQVhfVkFMVUUgOiBkdXJhdGlvbjtcbiAgfVxuICAvKipcbiAgICogaGFuZGxlIHRoZSBkdXJhdGlvbmNoYW5nZSBldmVudCBvbiB0aGUgTWVkaWFTb3VyY2VcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlRHVyYXRpb25DaGFuZ2VfID0gZnVuY3Rpb24gaGFuZGxlRHVyYXRpb25DaGFuZ2VfKCkge1xuICAgIHRoaXMudGVjaF8udHJpZ2dlcignZHVyYXRpb25jaGFuZ2UnKTtcbiAgfVxuICAvKipcbiAgICogQ2FsbHMgZW5kT2ZTdHJlYW0gb24gdGhlIG1lZGlhIHNvdXJjZSB3aGVuIGFsbCBhY3RpdmUgc3RyZWFtIHR5cGVzIGhhdmUgY2FsbGVkXG4gICAqIGVuZE9mU3RyZWFtXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJlYW1UeXBlXG4gICAqICAgICAgICBTdHJlYW0gdHlwZSBvZiB0aGUgc2VnbWVudCBsb2FkZXIgdGhhdCBjYWxsZWQgZW5kT2ZTdHJlYW1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25FbmRPZlN0cmVhbSA9IGZ1bmN0aW9uIG9uRW5kT2ZTdHJlYW0oKSB7XG4gICAgdmFyIGlzRW5kT2ZTdHJlYW0gPSB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5lbmRlZF87XG5cbiAgICBpZiAodGhpcy5tZWRpYVR5cGVzXy5BVURJTy5hY3RpdmVQbGF5bGlzdExvYWRlcikge1xuICAgICAgLy8gaWYgdGhlIGF1ZGlvIHBsYXlsaXN0IGxvYWRlciBleGlzdHMsIHRoZW4gYWx0ZXJuYXRlIGF1ZGlvIGlzIGFjdGl2ZVxuICAgICAgaWYgKCF0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5jdXJyZW50TWVkaWFJbmZvXyB8fCB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5jdXJyZW50TWVkaWFJbmZvXy5oYXNWaWRlbykge1xuICAgICAgICAvLyBpZiB3ZSBkbyBub3Qga25vdyBpZiB0aGUgbWFpbiBzZWdtZW50IGxvYWRlciBjb250YWlucyB2aWRlbyB5ZXQgb3IgaWYgd2VcbiAgICAgICAgLy8gZGVmaW5pdGl2ZWx5IGtub3cgdGhlIG1haW4gc2VnbWVudCBsb2FkZXIgY29udGFpbnMgdmlkZW8sIHRoZW4gd2UgbmVlZCB0byB3YWl0XG4gICAgICAgIC8vIGZvciBib3RoIG1haW4gYW5kIGF1ZGlvIHNlZ21lbnQgbG9hZGVycyB0byBjYWxsIGVuZE9mU3RyZWFtXG4gICAgICAgIGlzRW5kT2ZTdHJlYW0gPSBpc0VuZE9mU3RyZWFtICYmIHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5lbmRlZF87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvdGhlcndpc2UganVzdCByZWx5IG9uIHRoZSBhdWRpbyBsb2FkZXJcbiAgICAgICAgaXNFbmRPZlN0cmVhbSA9IHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5lbmRlZF87XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFpc0VuZE9mU3RyZWFtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zb3VyY2VVcGRhdGVyXy5lbmRPZlN0cmVhbSgpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHBsYXlsaXN0IGhhcyBzdG9wcGVkIGJlaW5nIHVwZGF0ZWRcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBsYXlsaXN0IHRoZSBtZWRpYSBwbGF5bGlzdCBvYmplY3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGUgcGxheWxpc3QgaGFzIHN0b3BwZWQgYmVpbmcgdXBkYXRlZCBvciBub3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3R1Y2tBdFBsYXlsaXN0RW5kXyA9IGZ1bmN0aW9uIHN0dWNrQXRQbGF5bGlzdEVuZF8ocGxheWxpc3QpIHtcbiAgICB2YXIgc2Vla2FibGUgPSB0aGlzLnNlZWthYmxlKCk7XG5cbiAgICBpZiAoIXNlZWthYmxlLmxlbmd0aCkge1xuICAgICAgLy8gcGxheWxpc3QgZG9lc24ndCBoYXZlIGVub3VnaCBpbmZvcm1hdGlvbiB0byBkZXRlcm1pbmUgd2hldGhlciB3ZSBhcmUgc3R1Y2tcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZXhwaXJlZCA9IHRoaXMuc3luY0NvbnRyb2xsZXJfLmdldEV4cGlyZWRUaW1lKHBsYXlsaXN0LCB0aGlzLmR1cmF0aW9uKCkpO1xuXG4gICAgaWYgKGV4cGlyZWQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIGRvZXMgbm90IHVzZSB0aGUgc2FmZSBsaXZlIGVuZCB0byBjYWxjdWxhdGUgcGxheWxpc3QgZW5kLCBzaW5jZSB3ZVxuICAgIC8vIGRvbid0IHdhbnQgdG8gc2F5IHdlIGFyZSBzdHVjayB3aGlsZSB0aGVyZSBpcyBzdGlsbCBjb250ZW50XG5cblxuICAgIHZhciBhYnNvbHV0ZVBsYXlsaXN0RW5kID0gVmhzLlBsYXlsaXN0LnBsYXlsaXN0RW5kKHBsYXlsaXN0LCBleHBpcmVkKTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLnRlY2hfLmN1cnJlbnRUaW1lKCk7XG4gICAgdmFyIGJ1ZmZlcmVkID0gdGhpcy50ZWNoXy5idWZmZXJlZCgpO1xuXG4gICAgaWYgKCFidWZmZXJlZC5sZW5ndGgpIHtcbiAgICAgIC8vIHJldHVybiB0cnVlIGlmIHRoZSBwbGF5aGVhZCByZWFjaGVkIHRoZSBhYnNvbHV0ZSBlbmQgb2YgdGhlIHBsYXlsaXN0XG4gICAgICByZXR1cm4gYWJzb2x1dGVQbGF5bGlzdEVuZCAtIGN1cnJlbnRUaW1lIDw9IFNBRkVfVElNRV9ERUxUQTtcbiAgICB9XG5cbiAgICB2YXIgYnVmZmVyZWRFbmQgPSBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoIC0gMSk7IC8vIHJldHVybiB0cnVlIGlmIHRoZXJlIGlzIHRvbyBsaXR0bGUgYnVmZmVyIGxlZnQgYW5kIGJ1ZmZlciBoYXMgcmVhY2hlZCBhYnNvbHV0ZVxuICAgIC8vIGVuZCBvZiBwbGF5bGlzdFxuXG4gICAgcmV0dXJuIGJ1ZmZlcmVkRW5kIC0gY3VycmVudFRpbWUgPD0gU0FGRV9USU1FX0RFTFRBICYmIGFic29sdXRlUGxheWxpc3RFbmQgLSBidWZmZXJlZEVuZCA8PSBTQUZFX1RJTUVfREVMVEE7XG4gIH1cbiAgLyoqXG4gICAqIEJsYWNrbGlzdHMgYSBwbGF5bGlzdCB3aGVuIGFuIGVycm9yIG9jY3VycyBmb3IgYSBzZXQgYW1vdW50IG9mIHRpbWVcbiAgICogbWFraW5nIGl0IHVuYXZhaWxhYmxlIGZvciBzZWxlY3Rpb24gYnkgdGhlIHJlbmRpdGlvbiBzZWxlY3Rpb24gYWxnb3JpdGhtXG4gICAqIGFuZCB0aGVuIGZvcmNlcyBhIG5ldyBwbGF5bGlzdCAocmVuZGl0aW9uKSBzZWxlY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gZXJyb3IgYW4gb3B0aW9uYWwgZXJyb3IgdGhhdCBtYXkgaW5jbHVkZSB0aGUgcGxheWxpc3RcbiAgICogdG8gYmxhY2tsaXN0XG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gYmxhY2tsaXN0RHVyYXRpb24gYW4gb3B0aW9uYWwgbnVtYmVyIG9mIHNlY29uZHMgdG8gYmxhY2tsaXN0IHRoZVxuICAgKiBwbGF5bGlzdFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5ibGFja2xpc3RDdXJyZW50UGxheWxpc3QgPSBmdW5jdGlvbiBibGFja2xpc3RDdXJyZW50UGxheWxpc3QoZXJyb3IsIGJsYWNrbGlzdER1cmF0aW9uKSB7XG4gICAgaWYgKGVycm9yID09PSB2b2lkIDApIHtcbiAgICAgIGVycm9yID0ge307XG4gICAgfSAvLyBJZiB0aGUgYGVycm9yYCB3YXMgZ2VuZXJhdGVkIGJ5IHRoZSBwbGF5bGlzdCBsb2FkZXIsIGl0IHdpbGwgY29udGFpblxuICAgIC8vIHRoZSBwbGF5bGlzdCB3ZSB3ZXJlIHRyeWluZyB0byBsb2FkIChidXQgZmFpbGVkKSBhbmQgdGhhdCBzaG91bGQgYmVcbiAgICAvLyBibGFja2xpc3RlZCBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcGxheWxpc3Qgd2hpY2ggaXMgbGlrZWx5XG4gICAgLy8gb3V0LW9mLWRhdGUgaW4gdGhpcyBzY2VuYXJpb1xuXG5cbiAgICB2YXIgY3VycmVudFBsYXlsaXN0ID0gZXJyb3IucGxheWxpc3QgfHwgdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEoKTtcbiAgICBibGFja2xpc3REdXJhdGlvbiA9IGJsYWNrbGlzdER1cmF0aW9uIHx8IGVycm9yLmJsYWNrbGlzdER1cmF0aW9uIHx8IHRoaXMuYmxhY2tsaXN0RHVyYXRpb247IC8vIElmIHRoZXJlIGlzIG5vIGN1cnJlbnQgcGxheWxpc3QsIHRoZW4gYW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgd2Ugd2VyZVxuICAgIC8vIHRyeWluZyB0byBsb2FkIHRoZSBtYXN0ZXIgT1Igd2hpbGUgd2Ugd2VyZSBkaXNwb3Npbmcgb2YgdGhlIHRlY2hcblxuICAgIGlmICghY3VycmVudFBsYXlsaXN0KSB7XG4gICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG5cbiAgICAgIGlmICh0aGlzLm1lZGlhU291cmNlLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2Vycm9yJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNvdXJjZVVwZGF0ZXJfLmVuZE9mU3RyZWFtKCduZXR3b3JrJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGxheWxpc3RzID0gdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWFzdGVyLnBsYXlsaXN0cztcbiAgICB2YXIgZW5hYmxlZFBsYXlsaXN0cyA9IHBsYXlsaXN0cy5maWx0ZXIoaXNFbmFibGVkKTtcbiAgICB2YXIgaXNGaW5hbFJlbmRpdGlvbiA9IGVuYWJsZWRQbGF5bGlzdHMubGVuZ3RoID09PSAxICYmIGVuYWJsZWRQbGF5bGlzdHNbMF0gPT09IGN1cnJlbnRQbGF5bGlzdDsgLy8gRG9uJ3QgYmxhY2tsaXN0IHRoZSBvbmx5IHBsYXlsaXN0IHVubGVzcyBpdCB3YXMgYmxhY2tsaXN0ZWRcbiAgICAvLyBmb3JldmVyXG5cbiAgICBpZiAocGxheWxpc3RzLmxlbmd0aCA9PT0gMSAmJiBibGFja2xpc3REdXJhdGlvbiAhPT0gSW5maW5pdHkpIHtcbiAgICAgIHZpZGVvanMkMS5sb2cud2FybihcIlByb2JsZW0gZW5jb3VudGVyZWQgd2l0aCBwbGF5bGlzdCBcIiArIGN1cnJlbnRQbGF5bGlzdC5pZCArIFwiLiBcIiArICdUcnlpbmcgYWdhaW4gc2luY2UgaXQgaXMgdGhlIG9ubHkgcGxheWxpc3QuJyk7XG4gICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoJ3JldHJ5cGxheWxpc3QnKTtcbiAgICAgIHJldHVybiB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5sb2FkKGlzRmluYWxSZW5kaXRpb24pO1xuICAgIH1cblxuICAgIGlmIChpc0ZpbmFsUmVuZGl0aW9uKSB7XG4gICAgICAvLyBTaW5jZSB3ZSdyZSBvbiB0aGUgZmluYWwgbm9uLWJsYWNrbGlzdGVkIHBsYXlsaXN0LCBhbmQgd2UncmUgYWJvdXQgdG8gYmxhY2tsaXN0XG4gICAgICAvLyBpdCwgaW5zdGVhZCBvZiBlcnJpbmcgdGhlIHBsYXllciBvciByZXRyeWluZyB0aGlzIHBsYXlsaXN0LCBjbGVhciBvdXQgdGhlIGN1cnJlbnRcbiAgICAgIC8vIGJsYWNrbGlzdC4gVGhpcyBhbGxvd3Mgb3RoZXIgcGxheWxpc3RzIHRvIGJlIGF0dGVtcHRlZCBpbiBjYXNlIGFueSBoYXZlIGJlZW5cbiAgICAgIC8vIGZpeGVkLlxuICAgICAgdmFyIHJlaW5jbHVkZWQgPSBmYWxzZTtcbiAgICAgIHBsYXlsaXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5bGlzdCkge1xuICAgICAgICAvLyBza2lwIGN1cnJlbnQgcGxheWxpc3Qgd2hpY2ggaXMgYWJvdXQgdG8gYmUgYmxhY2tsaXN0ZWRcbiAgICAgICAgaWYgKHBsYXlsaXN0ID09PSBjdXJyZW50UGxheWxpc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXhjbHVkZVVudGlsID0gcGxheWxpc3QuZXhjbHVkZVVudGlsOyAvLyBhIHBsYXlsaXN0IGNhbm5vdCBiZSByZWluY2x1ZGVkIGlmIGl0IHdhc24ndCBleGNsdWRlZCB0byBiZWdpbiB3aXRoLlxuXG4gICAgICAgIGlmICh0eXBlb2YgZXhjbHVkZVVudGlsICE9PSAndW5kZWZpbmVkJyAmJiBleGNsdWRlVW50aWwgIT09IEluZmluaXR5KSB7XG4gICAgICAgICAgcmVpbmNsdWRlZCA9IHRydWU7XG4gICAgICAgICAgZGVsZXRlIHBsYXlsaXN0LmV4Y2x1ZGVVbnRpbDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZWluY2x1ZGVkKSB7XG4gICAgICAgIHZpZGVvanMkMS5sb2cud2FybignUmVtb3Zpbmcgb3RoZXIgcGxheWxpc3RzIGZyb20gdGhlIGV4Y2x1c2lvbiBsaXN0IGJlY2F1c2UgdGhlIGxhc3QgJyArICdyZW5kaXRpb24gaXMgYWJvdXQgdG8gYmUgZXhjbHVkZWQuJyk7IC8vIFRlY2huaWNhbGx5IHdlIGFyZSByZXRyeWluZyBhIHBsYXlsaXN0LCBpbiB0aGF0IHdlIGFyZSBzaW1wbHkgcmV0cnlpbmcgYSBwcmV2aW91c1xuICAgICAgICAvLyBwbGF5bGlzdC4gVGhpcyBpcyBuZWVkZWQgZm9yIHVzZXJzIHJlbHlpbmcgb24gdGhlIHJldHJ5cGxheWxpc3QgZXZlbnQgdG8gY2F0Y2ggYVxuICAgICAgICAvLyBjYXNlIHdoZXJlIHRoZSBwbGF5ZXIgbWlnaHQgYmUgc3R1Y2sgYW5kIGxvb3BpbmcgdGhyb3VnaCBcImRlYWRcIiBwbGF5bGlzdHMuXG5cbiAgICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKCdyZXRyeXBsYXlsaXN0Jyk7XG4gICAgICB9XG4gICAgfSAvLyBCbGFja2xpc3QgdGhpcyBwbGF5bGlzdFxuXG5cbiAgICBjdXJyZW50UGxheWxpc3QuZXhjbHVkZVVudGlsID0gRGF0ZS5ub3coKSArIGJsYWNrbGlzdER1cmF0aW9uICogMTAwMDtcbiAgICB0aGlzLnRlY2hfLnRyaWdnZXIoJ2JsYWNrbGlzdHBsYXlsaXN0Jyk7XG4gICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICBuYW1lOiAndmhzLXJlbmRpdGlvbi1ibGFja2xpc3RlZCdcbiAgICB9KTtcbiAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgIG5hbWU6ICdobHMtcmVuZGl0aW9uLWJsYWNrbGlzdGVkJ1xuICAgIH0pOyAvLyBUT0RPOiBzaG91bGQgd2Ugc2VsZWN0IGEgbmV3IHBsYXlsaXN0IGlmIHRoaXMgYmxhY2tsaXN0IHdhc24ndCBmb3IgdGhlIGN1cnJlbnRQbGF5bGlzdD9cbiAgICAvLyBXb3VsZCBiZSBzb21ldGhpbmcgbGlrZSBtZWRpYSgpLmlkICE9PT0gY3VycmVudFBsYXlsaXN0LmlkIGFuZCB3ZSAgd291bGQgbmVlZCBzb21ldGhpbmdcbiAgICAvLyBsaWtlIGBwZW5kaW5nTWVkaWFgIGluIHBsYXlsaXN0IGxvYWRlcnMgdG8gY2hlY2sgYWdhaW5zdCB0aGF0IHRvby4gVGhpcyB3aWxsIHByZXZlbnQgdXNcbiAgICAvLyBmcm9tIGxvYWRpbmcgYSBuZXcgcGxheWxpc3Qgb24gYW55IGJsYWNrbGlzdC5cbiAgICAvLyBTZWxlY3QgYSBuZXcgcGxheWxpc3RcblxuICAgIHZhciBuZXh0UGxheWxpc3QgPSB0aGlzLnNlbGVjdFBsYXlsaXN0KCk7XG5cbiAgICBpZiAoIW5leHRQbGF5bGlzdCkge1xuICAgICAgdGhpcy5lcnJvciA9ICdQbGF5YmFjayBjYW5ub3QgY29udGludWUuIE5vIGF2YWlsYWJsZSB3b3JraW5nIG9yIHN1cHBvcnRlZCBwbGF5bGlzdHMuJztcbiAgICAgIHRoaXMudHJpZ2dlcignZXJyb3InKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbG9nRm4gPSBlcnJvci5pbnRlcm5hbCA/IHRoaXMubG9nZ2VyXyA6IHZpZGVvanMkMS5sb2cud2FybjtcbiAgICB2YXIgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZSA/ICcgJyArIGVycm9yLm1lc3NhZ2UgOiAnJztcbiAgICBsb2dGbigoZXJyb3IuaW50ZXJuYWwgPyAnSW50ZXJuYWwgcHJvYmxlbScgOiAnUHJvYmxlbScpICsgXCIgZW5jb3VudGVyZWQgd2l0aCBwbGF5bGlzdCBcIiArIGN1cnJlbnRQbGF5bGlzdC5pZCArIFwiLlwiICsgKGVycm9yTWVzc2FnZSArIFwiIFN3aXRjaGluZyB0byBwbGF5bGlzdCBcIiArIG5leHRQbGF5bGlzdC5pZCArIFwiLlwiKSk7IC8vIGlmIGF1ZGlvIGdyb3VwIGNoYW5nZWQgcmVzZXQgYXVkaW8gbG9hZGVyc1xuXG4gICAgaWYgKG5leHRQbGF5bGlzdC5hdHRyaWJ1dGVzLkFVRElPICE9PSBjdXJyZW50UGxheWxpc3QuYXR0cmlidXRlcy5BVURJTykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZUxvYWRlcnNfKCdhdWRpbycsIFsnYWJvcnQnLCAncGF1c2UnXSk7XG4gICAgfSAvLyBpZiBzdWJ0aXRsZSBncm91cCBjaGFuZ2VkIHJlc2V0IHN1YnRpdGxlIGxvYWRlcnNcblxuXG4gICAgaWYgKG5leHRQbGF5bGlzdC5hdHRyaWJ1dGVzLlNVQlRJVExFUyAhPT0gY3VycmVudFBsYXlsaXN0LmF0dHJpYnV0ZXMuU1VCVElUTEVTKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlTG9hZGVyc18oJ3N1YnRpdGxlJywgWydhYm9ydCcsICdwYXVzZSddKTtcbiAgICB9XG5cbiAgICB0aGlzLmRlbGVnYXRlTG9hZGVyc18oJ21haW4nLCBbJ2Fib3J0JywgJ3BhdXNlJ10pO1xuICAgIHJldHVybiB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYShuZXh0UGxheWxpc3QsIGlzRmluYWxSZW5kaXRpb24pO1xuICB9XG4gIC8qKlxuICAgKiBQYXVzZSBhbGwgc2VnbWVudC9wbGF5bGlzdCBsb2FkZXJzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhdXNlTG9hZGluZyA9IGZ1bmN0aW9uIHBhdXNlTG9hZGluZygpIHtcbiAgICB0aGlzLmRlbGVnYXRlTG9hZGVyc18oJ2FsbCcsIFsnYWJvcnQnLCAncGF1c2UnXSk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYSBzZXQgb2YgZnVuY3Rpb25zIGluIG9yZGVyIG9uIHBsYXlsaXN0IGxvYWRlcnMsIHNlZ21lbnQgbG9hZGVycyxcbiAgICogb3IgYm90aCB0eXBlcyBvZiBsb2FkZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsdGVyXG4gICAqICAgICAgICBGaWx0ZXIgbG9hZGVycyB0aGF0IHNob3VsZCBjYWxsIGZuTmFtZXMgdXNpbmcgYSBzdHJpbmcuIENhbiBiZTpcbiAgICogICAgICAgICogYWxsIC0gcnVuIG9uIGFsbCBsb2FkZXJzXG4gICAqICAgICAgICAqIGF1ZGlvIC0gcnVuIG9uIGFsbCBhdWRpbyBsb2FkZXJzXG4gICAqICAgICAgICAqIHN1YnRpdGxlIC0gcnVuIG9uIGFsbCBzdWJ0aXRsZSBsb2FkZXJzXG4gICAqICAgICAgICAqIG1haW4gLSBydW4gb24gdGhlIG1haW4vbWFzdGVyIGxvYWRlcnNcbiAgICpcbiAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGZuTmFtZXNcbiAgICogICAgICAgIEEgc3RyaW5nIG9yIGFycmF5IG9mIGZ1bmN0aW9uIG5hbWVzIHRvIGNhbGwuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGVnYXRlTG9hZGVyc18gPSBmdW5jdGlvbiBkZWxlZ2F0ZUxvYWRlcnNfKGZpbHRlciwgZm5OYW1lcykge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgdmFyIGxvYWRlcnMgPSBbXTtcbiAgICB2YXIgZG9udEZpbHRlclBsYXlsaXN0ID0gZmlsdGVyID09PSAnYWxsJztcblxuICAgIGlmIChkb250RmlsdGVyUGxheWxpc3QgfHwgZmlsdGVyID09PSAnbWFpbicpIHtcbiAgICAgIGxvYWRlcnMucHVzaCh0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXyk7XG4gICAgfVxuXG4gICAgdmFyIG1lZGlhVHlwZXMgPSBbXTtcblxuICAgIGlmIChkb250RmlsdGVyUGxheWxpc3QgfHwgZmlsdGVyID09PSAnYXVkaW8nKSB7XG4gICAgICBtZWRpYVR5cGVzLnB1c2goJ0FVRElPJyk7XG4gICAgfVxuXG4gICAgaWYgKGRvbnRGaWx0ZXJQbGF5bGlzdCB8fCBmaWx0ZXIgPT09ICdzdWJ0aXRsZScpIHtcbiAgICAgIG1lZGlhVHlwZXMucHVzaCgnQ0xPU0VELUNBUFRJT05TJyk7XG4gICAgICBtZWRpYVR5cGVzLnB1c2goJ1NVQlRJVExFUycpO1xuICAgIH1cblxuICAgIG1lZGlhVHlwZXMuZm9yRWFjaChmdW5jdGlvbiAobWVkaWFUeXBlKSB7XG4gICAgICB2YXIgbG9hZGVyID0gX3RoaXM2Lm1lZGlhVHlwZXNfW21lZGlhVHlwZV0gJiYgX3RoaXM2Lm1lZGlhVHlwZXNfW21lZGlhVHlwZV0uYWN0aXZlUGxheWxpc3RMb2FkZXI7XG5cbiAgICAgIGlmIChsb2FkZXIpIHtcbiAgICAgICAgbG9hZGVycy5wdXNoKGxvYWRlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgWydtYWluJywgJ2F1ZGlvJywgJ3N1YnRpdGxlJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGxvYWRlciA9IF90aGlzNltuYW1lICsgXCJTZWdtZW50TG9hZGVyX1wiXTtcblxuICAgICAgaWYgKGxvYWRlciAmJiAoZmlsdGVyID09PSBuYW1lIHx8IGZpbHRlciA9PT0gJ2FsbCcpKSB7XG4gICAgICAgIGxvYWRlcnMucHVzaChsb2FkZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxvYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAobG9hZGVyKSB7XG4gICAgICByZXR1cm4gZm5OYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmbk5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2FkZXJbZm5OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGxvYWRlcltmbk5hbWVdKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBzZXQgdGhlIGN1cnJlbnQgdGltZSBvbiBhbGwgc2VnbWVudCBsb2FkZXJzXG4gICAqXG4gICAqIEBwYXJhbSB7VGltZVJhbmdlfSBjdXJyZW50VGltZSB0aGUgY3VycmVudCB0aW1lIHRvIHNldFxuICAgKiBAcmV0dXJuIHtUaW1lUmFuZ2V9IHRoZSBjdXJyZW50IHRpbWVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0Q3VycmVudFRpbWUgPSBmdW5jdGlvbiBzZXRDdXJyZW50VGltZShjdXJyZW50VGltZSkge1xuICAgIHZhciBidWZmZXJlZCA9IGZpbmRSYW5nZSh0aGlzLnRlY2hfLmJ1ZmZlcmVkKCksIGN1cnJlbnRUaW1lKTtcblxuICAgIGlmICghKHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfICYmIHRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1lZGlhKCkpKSB7XG4gICAgICAvLyByZXR1cm4gaW1tZWRpYXRlbHkgaWYgdGhlIG1ldGFkYXRhIGlzIG5vdCByZWFkeSB5ZXRcbiAgICAgIHJldHVybiAwO1xuICAgIH0gLy8gaXQncyBjbGVhcmx5IGFuIGVkZ2UtY2FzZSBidXQgZG9uJ3QgdGhyb3duIGFuIGVycm9yIGlmIGFza2VkIHRvXG4gICAgLy8gc2VlayB3aXRoaW4gYW4gZW1wdHkgcGxheWxpc3RcblxuXG4gICAgaWYgKCF0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpLnNlZ21lbnRzKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IC8vIGlmIHRoZSBzZWVrIGxvY2F0aW9uIGlzIGFscmVhZHkgYnVmZmVyZWQsIGNvbnRpbnVlIGJ1ZmZlcmluZyBhcyB1c3VhbFxuXG5cbiAgICBpZiAoYnVmZmVyZWQgJiYgYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY3VycmVudFRpbWU7XG4gICAgfSAvLyBjYW5jZWwgb3V0c3RhbmRpbmcgcmVxdWVzdHMgc28gd2UgYmVnaW4gYnVmZmVyaW5nIGF0IHRoZSBuZXdcbiAgICAvLyBsb2NhdGlvblxuXG5cbiAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5yZXNldEV2ZXJ5dGhpbmcoKTtcbiAgICB0aGlzLm1haW5TZWdtZW50TG9hZGVyXy5hYm9ydCgpO1xuXG4gICAgaWYgKHRoaXMubWVkaWFUeXBlc18uQVVESU8uYWN0aXZlUGxheWxpc3RMb2FkZXIpIHtcbiAgICAgIHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5yZXNldEV2ZXJ5dGhpbmcoKTtcbiAgICAgIHRoaXMuYXVkaW9TZWdtZW50TG9hZGVyXy5hYm9ydCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1lZGlhVHlwZXNfLlNVQlRJVExFUy5hY3RpdmVQbGF5bGlzdExvYWRlcikge1xuICAgICAgdGhpcy5zdWJ0aXRsZVNlZ21lbnRMb2FkZXJfLnJlc2V0RXZlcnl0aGluZygpO1xuICAgICAgdGhpcy5zdWJ0aXRsZVNlZ21lbnRMb2FkZXJfLmFib3J0KCk7XG4gICAgfSAvLyBzdGFydCBzZWdtZW50IGxvYWRlciBsb2FkaW5nIGluIGNhc2UgdGhleSBhcmUgcGF1c2VkXG5cblxuICAgIHRoaXMubG9hZCgpO1xuICB9XG4gIC8qKlxuICAgKiBnZXQgdGhlIGN1cnJlbnQgZHVyYXRpb25cbiAgICpcbiAgICogQHJldHVybiB7VGltZVJhbmdlfSB0aGUgZHVyYXRpb25cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbigpIHtcbiAgICBpZiAoIXRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgbWVkaWEgPSB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpO1xuXG4gICAgaWYgKCFtZWRpYSkge1xuICAgICAgLy8gbm8gcGxheWxpc3RzIGxvYWRlZCB5ZXQsIHNvIGNhbid0IGRldGVybWluZSBhIGR1cmF0aW9uXG4gICAgICByZXR1cm4gMDtcbiAgICB9IC8vIERvbid0IHJlbHkgb24gdGhlIG1lZGlhIHNvdXJjZSBmb3IgZHVyYXRpb24gaW4gdGhlIGNhc2Ugb2YgYSBsaXZlIHBsYXlsaXN0IHNpbmNlXG4gICAgLy8gc2V0dGluZyB0aGUgbmF0aXZlIE1lZGlhU291cmNlJ3MgZHVyYXRpb24gdG8gaW5maW5pdHkgZW5kcyB1cCB3aXRoIGNvbnNlcXVlbmNlcyB0b1xuICAgIC8vIHNlZWthYmxlIGJlaGF2aW9yLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3czYy9tZWRpYS1zb3VyY2UvaXNzdWVzLzUgZm9yIGRldGFpbHMuXG4gICAgLy9cbiAgICAvLyBUaGlzIGlzIHJlc29sdmVkIGluIHRoZSBzcGVjIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS93M2MvbWVkaWEtc291cmNlL3B1bGwvOTIsXG4gICAgLy8gaG93ZXZlciwgZmV3IGJyb3dzZXJzIGhhdmUgc3VwcG9ydCBmb3Igc2V0TGl2ZVNlZWthYmxlUmFuZ2UoKVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NZWRpYVNvdXJjZS9zZXRMaXZlU2Vla2FibGVSYW5nZVxuICAgIC8vXG4gICAgLy8gVW50aWwgYSB0aW1lIHdoZW4gdGhlIGR1cmF0aW9uIG9mIHRoZSBtZWRpYSBzb3VyY2UgY2FuIGJlIHNldCB0byBpbmZpbml0eSwgYW5kIGFcbiAgICAvLyBzZWVrYWJsZSByYW5nZSBzcGVjaWZpZWQgYWNyb3NzIGJyb3dzZXJzLCBqdXN0IHJldHVybiBJbmZpbml0eS5cblxuXG4gICAgaWYgKCFtZWRpYS5lbmRMaXN0KSB7XG4gICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfSAvLyBTaW5jZSB0aGlzIGlzIGEgVk9EIHZpZGVvLCBpdCBpcyBzYWZlIHRvIHJlbHkgb24gdGhlIG1lZGlhIHNvdXJjZSdzIGR1cmF0aW9uIChpZlxuICAgIC8vIGF2YWlsYWJsZSkuIElmIGl0J3Mgbm90IGF2YWlsYWJsZSwgZmFsbCBiYWNrIHRvIGEgcGxheWxpc3QtY2FsY3VsYXRlZCBlc3RpbWF0ZS5cblxuXG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lZGlhU291cmNlLmR1cmF0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBWaHMuUGxheWxpc3QuZHVyYXRpb24obWVkaWEpO1xuICB9XG4gIC8qKlxuICAgKiBjaGVjayB0aGUgc2Vla2FibGUgcmFuZ2VcbiAgICpcbiAgICogQHJldHVybiB7VGltZVJhbmdlfSB0aGUgc2Vla2FibGUgcmFuZ2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2Vla2FibGUgPSBmdW5jdGlvbiBzZWVrYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWVrYWJsZV87XG4gIH07XG5cbiAgX3Byb3RvLm9uU3luY0luZm9VcGRhdGVfID0gZnVuY3Rpb24gb25TeW5jSW5mb1VwZGF0ZV8oKSB7XG4gICAgdmFyIGF1ZGlvU2Vla2FibGU7XG5cbiAgICBpZiAoIXRoaXMubWFzdGVyUGxheWxpc3RMb2FkZXJfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG1lZGlhID0gdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEoKTtcblxuICAgIGlmICghbWVkaWEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZXhwaXJlZCA9IHRoaXMuc3luY0NvbnRyb2xsZXJfLmdldEV4cGlyZWRUaW1lKG1lZGlhLCB0aGlzLmR1cmF0aW9uKCkpO1xuXG4gICAgaWYgKGV4cGlyZWQgPT09IG51bGwpIHtcbiAgICAgIC8vIG5vdCBlbm91Z2ggaW5mb3JtYXRpb24gdG8gdXBkYXRlIHNlZWthYmxlXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN1Z2dlc3RlZFByZXNlbnRhdGlvbkRlbGF5ID0gdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWFzdGVyLnN1Z2dlc3RlZFByZXNlbnRhdGlvbkRlbGF5O1xuICAgIHZhciBtYWluU2Vla2FibGUgPSBWaHMuUGxheWxpc3Quc2Vla2FibGUobWVkaWEsIGV4cGlyZWQsIHN1Z2dlc3RlZFByZXNlbnRhdGlvbkRlbGF5KTtcblxuICAgIGlmIChtYWluU2Vla2FibGUubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWVkaWFUeXBlc18uQVVESU8uYWN0aXZlUGxheWxpc3RMb2FkZXIpIHtcbiAgICAgIG1lZGlhID0gdGhpcy5tZWRpYVR5cGVzXy5BVURJTy5hY3RpdmVQbGF5bGlzdExvYWRlci5tZWRpYSgpO1xuICAgICAgZXhwaXJlZCA9IHRoaXMuc3luY0NvbnRyb2xsZXJfLmdldEV4cGlyZWRUaW1lKG1lZGlhLCB0aGlzLmR1cmF0aW9uKCkpO1xuXG4gICAgICBpZiAoZXhwaXJlZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGF1ZGlvU2Vla2FibGUgPSBWaHMuUGxheWxpc3Quc2Vla2FibGUobWVkaWEsIGV4cGlyZWQsIHN1Z2dlc3RlZFByZXNlbnRhdGlvbkRlbGF5KTtcblxuICAgICAgaWYgKGF1ZGlvU2Vla2FibGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgb2xkRW5kO1xuICAgIHZhciBvbGRTdGFydDtcblxuICAgIGlmICh0aGlzLnNlZWthYmxlXyAmJiB0aGlzLnNlZWthYmxlXy5sZW5ndGgpIHtcbiAgICAgIG9sZEVuZCA9IHRoaXMuc2Vla2FibGVfLmVuZCgwKTtcbiAgICAgIG9sZFN0YXJ0ID0gdGhpcy5zZWVrYWJsZV8uc3RhcnQoMCk7XG4gICAgfVxuXG4gICAgaWYgKCFhdWRpb1NlZWthYmxlKSB7XG4gICAgICAvLyBzZWVrYWJsZSBoYXMgYmVlbiBjYWxjdWxhdGVkIGJhc2VkIG9uIGJ1ZmZlcmluZyB2aWRlbyBkYXRhIHNvIGl0XG4gICAgICAvLyBjYW4gYmUgcmV0dXJuZWQgZGlyZWN0bHlcbiAgICAgIHRoaXMuc2Vla2FibGVfID0gbWFpblNlZWthYmxlO1xuICAgIH0gZWxzZSBpZiAoYXVkaW9TZWVrYWJsZS5zdGFydCgwKSA+IG1haW5TZWVrYWJsZS5lbmQoMCkgfHwgbWFpblNlZWthYmxlLnN0YXJ0KDApID4gYXVkaW9TZWVrYWJsZS5lbmQoMCkpIHtcbiAgICAgIC8vIHNlZWthYmxlcyBhcmUgcHJldHR5IGZhciBvZmYsIHJlbHkgb24gbWFpblxuICAgICAgdGhpcy5zZWVrYWJsZV8gPSBtYWluU2Vla2FibGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2Vla2FibGVfID0gdmlkZW9qcyQxLmNyZWF0ZVRpbWVSYW5nZXMoW1thdWRpb1NlZWthYmxlLnN0YXJ0KDApID4gbWFpblNlZWthYmxlLnN0YXJ0KDApID8gYXVkaW9TZWVrYWJsZS5zdGFydCgwKSA6IG1haW5TZWVrYWJsZS5zdGFydCgwKSwgYXVkaW9TZWVrYWJsZS5lbmQoMCkgPCBtYWluU2Vla2FibGUuZW5kKDApID8gYXVkaW9TZWVrYWJsZS5lbmQoMCkgOiBtYWluU2Vla2FibGUuZW5kKDApXV0pO1xuICAgIH0gLy8gc2Vla2FibGUgaXMgdGhlIHNhbWUgYXMgbGFzdCB0aW1lXG5cblxuICAgIGlmICh0aGlzLnNlZWthYmxlXyAmJiB0aGlzLnNlZWthYmxlXy5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLnNlZWthYmxlXy5lbmQoMCkgPT09IG9sZEVuZCAmJiB0aGlzLnNlZWthYmxlXy5zdGFydCgwKSA9PT0gb2xkU3RhcnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyXyhcInNlZWthYmxlIHVwZGF0ZWQgW1wiICsgcHJpbnRhYmxlUmFuZ2UodGhpcy5zZWVrYWJsZV8pICsgXCJdXCIpO1xuICAgIHRoaXMudGVjaF8udHJpZ2dlcignc2Vla2FibGVjaGFuZ2VkJyk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgcGxheWVyIGR1cmF0aW9uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZUR1cmF0aW9uID0gZnVuY3Rpb24gdXBkYXRlRHVyYXRpb24oaXNMaXZlKSB7XG4gICAgaWYgKHRoaXMudXBkYXRlRHVyYXRpb25fKSB7XG4gICAgICB0aGlzLm1lZGlhU291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NvdXJjZW9wZW4nLCB0aGlzLnVwZGF0ZUR1cmF0aW9uXyk7XG4gICAgICB0aGlzLnVwZGF0ZUR1cmF0aW9uXyA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2UucmVhZHlTdGF0ZSAhPT0gJ29wZW4nKSB7XG4gICAgICB0aGlzLnVwZGF0ZUR1cmF0aW9uXyA9IHRoaXMudXBkYXRlRHVyYXRpb24uYmluZCh0aGlzLCBpc0xpdmUpO1xuICAgICAgdGhpcy5tZWRpYVNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgdGhpcy51cGRhdGVEdXJhdGlvbl8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0xpdmUpIHtcbiAgICAgIHZhciBzZWVrYWJsZSA9IHRoaXMuc2Vla2FibGUoKTtcblxuICAgICAgaWYgKCFzZWVrYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBFdmVuIGluIHRoZSBjYXNlIG9mIGEgbGl2ZSBwbGF5bGlzdCwgdGhlIG5hdGl2ZSBNZWRpYVNvdXJjZSdzIGR1cmF0aW9uIHNob3VsZCBub3RcbiAgICAgIC8vIGJlIHNldCB0byBJbmZpbml0eSAoZXZlbiB0aG91Z2ggdGhpcyB3b3VsZCBiZSBleHBlY3RlZCBmb3IgYSBsaXZlIHBsYXlsaXN0KSwgc2luY2VcbiAgICAgIC8vIHNldHRpbmcgdGhlIG5hdGl2ZSBNZWRpYVNvdXJjZSdzIGR1cmF0aW9uIHRvIGluZmluaXR5IGVuZHMgdXAgd2l0aCBjb25zZXF1ZW5jZXMgdG9cbiAgICAgIC8vIHNlZWthYmxlIGJlaGF2aW9yLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3czYy9tZWRpYS1zb3VyY2UvaXNzdWVzLzUgZm9yIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBpcyByZXNvbHZlZCBpbiB0aGUgc3BlYyBieSBodHRwczovL2dpdGh1Yi5jb20vdzNjL21lZGlhLXNvdXJjZS9wdWxsLzkyLFxuICAgICAgLy8gaG93ZXZlciwgZmV3IGJyb3dzZXJzIGhhdmUgc3VwcG9ydCBmb3Igc2V0TGl2ZVNlZWthYmxlUmFuZ2UoKVxuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01lZGlhU291cmNlL3NldExpdmVTZWVrYWJsZVJhbmdlXG4gICAgICAvL1xuICAgICAgLy8gVW50aWwgYSB0aW1lIHdoZW4gdGhlIGR1cmF0aW9uIG9mIHRoZSBtZWRpYSBzb3VyY2UgY2FuIGJlIHNldCB0byBpbmZpbml0eSwgYW5kIGFcbiAgICAgIC8vIHNlZWthYmxlIHJhbmdlIHNwZWNpZmllZCBhY3Jvc3MgYnJvd3NlcnMsIHRoZSBkdXJhdGlvbiBzaG91bGQgYmUgZ3JlYXRlciB0aGFuIG9yXG4gICAgICAvLyBlcXVhbCB0byB0aGUgbGFzdCBwb3NzaWJsZSBzZWVrYWJsZSB2YWx1ZS5cbiAgICAgIC8vIE1lZGlhU291cmNlIGR1cmF0aW9uIHN0YXJ0cyBhcyBOYU5cbiAgICAgIC8vIEl0IGlzIHBvc3NpYmxlIChhbmQgcHJvYmFibGUpIHRoYXQgdGhpcyBjYXNlIHdpbGwgbmV2ZXIgYmUgcmVhY2hlZCBmb3IgbWFueVxuICAgICAgLy8gc291cmNlcywgc2luY2UgdGhlIE1lZGlhU291cmNlIHJlcG9ydHMgZHVyYXRpb24gYXMgdGhlIGhpZ2hlc3QgdmFsdWUgd2l0aG91dFxuICAgICAgLy8gYWNjb3VudGluZyBmb3IgdGltZXN0YW1wIG9mZnNldC4gRm9yIGV4YW1wbGUsIGlmIHRoZSB0aW1lc3RhbXAgb2Zmc2V0IGlzIC0xMDAgYW5kXG4gICAgICAvLyB3ZSBidWZmZXJlZCB0aW1lcyAwIHRvIDEwMCB3aXRoIHJlYWwgdGltZXMgb2YgMTAwIHRvIDIwMCwgZXZlbiB0aG91Z2ggY3VycmVudFxuICAgICAgLy8gdGltZSB3aWxsIGJlIGJldHdlZW4gMCBhbmQgMTAwLCB0aGUgbmF0aXZlIG1lZGlhIHNvdXJjZSBtYXkgcmVwb3J0IHRoZSBkdXJhdGlvblxuICAgICAgLy8gYXMgMjAwLiBIb3dldmVyLCBzaW5jZSB3ZSByZXBvcnQgZHVyYXRpb24gc2VwYXJhdGUgZnJvbSB0aGUgbWVkaWEgc291cmNlIChhc1xuICAgICAgLy8gSW5maW5pdHkpLCBhbmQgYXMgbG9uZyBhcyB0aGUgbmF0aXZlIG1lZGlhIHNvdXJjZSBkdXJhdGlvbiB2YWx1ZSBpcyBncmVhdGVyIHRoYW5cbiAgICAgIC8vIG91ciByZXBvcnRlZCBzZWVrYWJsZSByYW5nZSwgc2Vla3Mgd2lsbCB3b3JrIGFzIGV4cGVjdGVkLiBUaGUgbGFyZ2UgbnVtYmVyIGFzXG4gICAgICAvLyBkdXJhdGlvbiBmb3IgbGl2ZSBpcyBhY3R1YWxseSBhIHN0cmF0ZWd5IHVzZWQgYnkgc29tZSBwbGF5ZXJzIHRvIHdvcmsgYXJvdW5kIHRoZVxuICAgICAgLy8gaXNzdWUgb2YgbGl2ZSBzZWVrYWJsZSByYW5nZXMgY2l0ZWQgYWJvdmUuXG5cblxuICAgICAgaWYgKGlzTmFOKHRoaXMubWVkaWFTb3VyY2UuZHVyYXRpb24pIHx8IHRoaXMubWVkaWFTb3VyY2UuZHVyYXRpb24gPCBzZWVrYWJsZS5lbmQoc2Vla2FibGUubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VVcGRhdGVyXy5zZXREdXJhdGlvbihzZWVrYWJsZS5lbmQoc2Vla2FibGUubGVuZ3RoIC0gMSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGJ1ZmZlcmVkID0gdGhpcy50ZWNoXy5idWZmZXJlZCgpO1xuICAgIHZhciBkdXJhdGlvbiA9IFZocy5QbGF5bGlzdC5kdXJhdGlvbih0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tZWRpYSgpKTtcblxuICAgIGlmIChidWZmZXJlZC5sZW5ndGggPiAwKSB7XG4gICAgICBkdXJhdGlvbiA9IE1hdGgubWF4KGR1cmF0aW9uLCBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoIC0gMSkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1lZGlhU291cmNlLmR1cmF0aW9uICE9PSBkdXJhdGlvbikge1xuICAgICAgdGhpcy5zb3VyY2VVcGRhdGVyXy5zZXREdXJhdGlvbihkdXJhdGlvbik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBkaXNwb3NlIG9mIHRoZSBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXIgYW5kIGV2ZXJ5dGhpbmdcbiAgICogdGhhdCBpdCBjb250cm9sc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgIHRoaXMudHJpZ2dlcignZGlzcG9zZScpO1xuICAgIHRoaXMuZGVjcnlwdGVyXy50ZXJtaW5hdGUoKTtcbiAgICB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5kaXNwb3NlKCk7XG4gICAgdGhpcy5tYWluU2VnbWVudExvYWRlcl8uZGlzcG9zZSgpO1xuICAgIFsnQVVESU8nLCAnU1VCVElUTEVTJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdmFyIGdyb3VwcyA9IF90aGlzNy5tZWRpYVR5cGVzX1t0eXBlXS5ncm91cHM7XG5cbiAgICAgIGZvciAodmFyIGlkIGluIGdyb3Vwcykge1xuICAgICAgICBncm91cHNbaWRdLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgICAgaWYgKGdyb3VwLnBsYXlsaXN0TG9hZGVyKSB7XG4gICAgICAgICAgICBncm91cC5wbGF5bGlzdExvYWRlci5kaXNwb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmF1ZGlvU2VnbWVudExvYWRlcl8uZGlzcG9zZSgpO1xuICAgIHRoaXMuc3VidGl0bGVTZWdtZW50TG9hZGVyXy5kaXNwb3NlKCk7XG4gICAgdGhpcy5zb3VyY2VVcGRhdGVyXy5kaXNwb3NlKCk7XG4gICAgdGhpcy50aW1lbGluZUNoYW5nZUNvbnRyb2xsZXJfLmRpc3Bvc2UoKTtcblxuICAgIGlmICh0aGlzLnVwZGF0ZUR1cmF0aW9uXykge1xuICAgICAgdGhpcy5tZWRpYVNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgdGhpcy51cGRhdGVEdXJhdGlvbl8pO1xuICAgIH1cblxuICAgIHRoaXMubWVkaWFTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHVyYXRpb25jaGFuZ2UnLCB0aGlzLmhhbmRsZUR1cmF0aW9uQ2hhbmdlXyk7IC8vIGxvYWQgdGhlIG1lZGlhIHNvdXJjZSBpbnRvIHRoZSBwbGF5ZXJcblxuICAgIHRoaXMubWVkaWFTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMuaGFuZGxlU291cmNlT3Blbl8pO1xuICAgIHRoaXMubWVkaWFTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlZW5kZWQnLCB0aGlzLmhhbmRsZVNvdXJjZUVuZGVkXyk7XG4gICAgdGhpcy5vZmYoKTtcbiAgfVxuICAvKipcbiAgICogcmV0dXJuIHRoZSBtYXN0ZXIgcGxheWxpc3Qgb2JqZWN0IGlmIHdlIGhhdmUgb25lXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gdGhlIG1hc3RlciBwbGF5bGlzdCBvYmplY3QgdGhhdCB3ZSBwYXJzZWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFzdGVyID0gZnVuY3Rpb24gbWFzdGVyKCkge1xuICAgIHJldHVybiB0aGlzLm1hc3RlclBsYXlsaXN0TG9hZGVyXy5tYXN0ZXI7XG4gIH1cbiAgLyoqXG4gICAqIHJldHVybiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHBsYXlsaXN0XG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBwbGF5bGlzdCBvYmplY3QgdGhhdCB3ZSBwYXJzZWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWVkaWEgPSBmdW5jdGlvbiBtZWRpYSgpIHtcbiAgICAvLyBwbGF5bGlzdCBsb2FkZXIgd2lsbCBub3QgcmV0dXJuIG1lZGlhIGlmIGl0IGhhcyBub3QgYmVlbiBmdWxseSBsb2FkZWRcbiAgICByZXR1cm4gdGhpcy5tYXN0ZXJQbGF5bGlzdExvYWRlcl8ubWVkaWEoKSB8fCB0aGlzLmluaXRpYWxNZWRpYV87XG4gIH07XG5cbiAgX3Byb3RvLmFyZU1lZGlhVHlwZXNLbm93bl8gPSBmdW5jdGlvbiBhcmVNZWRpYVR5cGVzS25vd25fKCkge1xuICAgIHZhciB1c2luZ0F1ZGlvTG9hZGVyID0gISF0aGlzLm1lZGlhVHlwZXNfLkFVRElPLmFjdGl2ZVBsYXlsaXN0TG9hZGVyOyAvLyBvbmUgb3IgYm90aCBsb2FkZXJzIGhhcyBub3QgbG9hZGVkIHN1ZmZpY2VudGx5IHRvIGdldCBjb2RlY3NcblxuICAgIGlmICghdGhpcy5tYWluU2VnbWVudExvYWRlcl8uY3VycmVudE1lZGlhSW5mb18gfHwgdXNpbmdBdWRpb0xvYWRlciAmJiAhdGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfLmN1cnJlbnRNZWRpYUluZm9fKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmdldENvZGVjc09yRXhjbHVkZV8gPSBmdW5jdGlvbiBnZXRDb2RlY3NPckV4Y2x1ZGVfKCkge1xuICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgdmFyIG1lZGlhID0ge1xuICAgICAgbWFpbjogdGhpcy5tYWluU2VnbWVudExvYWRlcl8uY3VycmVudE1lZGlhSW5mb18gfHwge30sXG4gICAgICBhdWRpbzogdGhpcy5hdWRpb1NlZ21lbnRMb2FkZXJfLmN1cnJlbnRNZWRpYUluZm9fIHx8IHt9XG4gICAgfTsgLy8gc2V0IFwibWFpblwiIG1lZGlhIGVxdWFsIHRvIHZpZGVvXG5cbiAgICBtZWRpYS52aWRlbyA9IG1lZGlhLm1haW47XG4gICAgdmFyIHBsYXlsaXN0Q29kZWNzID0gY29kZWNzRm9yUGxheWxpc3QodGhpcy5tYXN0ZXIoKSwgdGhpcy5tZWRpYSgpKTtcbiAgICB2YXIgY29kZWNzID0ge307XG4gICAgdmFyIHVzaW5nQXVkaW9Mb2FkZXIgPSAhIXRoaXMubWVkaWFUeXBlc18uQVVESU8uYWN0aXZlUGxheWxpc3RMb2FkZXI7XG5cbiAgICBpZiAobWVkaWEubWFpbi5oYXNWaWRlbykge1xuICAgICAgY29kZWNzLnZpZGVvID0gcGxheWxpc3RDb2RlY3MudmlkZW8gfHwgbWVkaWEubWFpbi52aWRlb0NvZGVjIHx8IERFRkFVTFRfVklERU9fQ09ERUM7XG4gICAgfVxuXG4gICAgaWYgKG1lZGlhLm1haW4uaXNNdXhlZCkge1xuICAgICAgY29kZWNzLnZpZGVvICs9IFwiLFwiICsgKHBsYXlsaXN0Q29kZWNzLmF1ZGlvIHx8IG1lZGlhLm1haW4uYXVkaW9Db2RlYyB8fCBERUZBVUxUX0FVRElPX0NPREVDKTtcbiAgICB9XG5cbiAgICBpZiAobWVkaWEubWFpbi5oYXNBdWRpbyAmJiAhbWVkaWEubWFpbi5pc011eGVkIHx8IG1lZGlhLmF1ZGlvLmhhc0F1ZGlvIHx8IHVzaW5nQXVkaW9Mb2FkZXIpIHtcbiAgICAgIGNvZGVjcy5hdWRpbyA9IHBsYXlsaXN0Q29kZWNzLmF1ZGlvIHx8IG1lZGlhLm1haW4uYXVkaW9Db2RlYyB8fCBtZWRpYS5hdWRpby5hdWRpb0NvZGVjIHx8IERFRkFVTFRfQVVESU9fQ09ERUM7IC8vIHNldCBhdWRpbyBpc0ZtcDQgc28gd2UgdXNlIHRoZSBjb3JyZWN0IFwic3VwcG9ydHNcIiBmdW5jdGlvbiBiZWxvd1xuXG4gICAgICBtZWRpYS5hdWRpby5pc0ZtcDQgPSBtZWRpYS5tYWluLmhhc0F1ZGlvICYmICFtZWRpYS5tYWluLmlzTXV4ZWQgPyBtZWRpYS5tYWluLmlzRm1wNCA6IG1lZGlhLmF1ZGlvLmlzRm1wNDtcbiAgICB9IC8vIG5vIGNvZGVjcywgbm8gcGxheWJhY2suXG5cblxuICAgIGlmICghY29kZWNzLmF1ZGlvICYmICFjb2RlY3MudmlkZW8pIHtcbiAgICAgIHRoaXMuYmxhY2tsaXN0Q3VycmVudFBsYXlsaXN0KHtcbiAgICAgICAgcGxheWxpc3Q6IHRoaXMubWVkaWEoKSxcbiAgICAgICAgbWVzc2FnZTogJ0NvdWxkIG5vdCBkZXRlcm1pbmUgY29kZWNzIGZvciBwbGF5bGlzdC4nLFxuICAgICAgICBibGFja2xpc3REdXJhdGlvbjogSW5maW5pdHlcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gZm1wNCByZWxpZXMgb24gYnJvd3NlciBzdXBwb3J0LCB3aGlsZSB0cyByZWxpZXMgb24gbXV4ZXIgc3VwcG9ydFxuXG5cbiAgICB2YXIgc3VwcG9ydEZ1bmN0aW9uID0gZnVuY3Rpb24gc3VwcG9ydEZ1bmN0aW9uKGlzRm1wNCwgY29kZWMpIHtcbiAgICAgIHJldHVybiBpc0ZtcDQgPyBicm93c2VyU3VwcG9ydHNDb2RlYyhjb2RlYykgOiBtdXhlclN1cHBvcnRzQ29kZWMoY29kZWMpO1xuICAgIH07XG5cbiAgICB2YXIgdW5zdXBwb3J0ZWRDb2RlY3MgPSB7fTtcbiAgICB2YXIgdW5zdXBwb3J0ZWRBdWRpbztcbiAgICBbJ3ZpZGVvJywgJ2F1ZGlvJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgaWYgKGNvZGVjcy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSAmJiAhc3VwcG9ydEZ1bmN0aW9uKG1lZGlhW3R5cGVdLmlzRm1wNCwgY29kZWNzW3R5cGVdKSkge1xuICAgICAgICB2YXIgc3VwcG9ydGVyID0gbWVkaWFbdHlwZV0uaXNGbXA0ID8gJ2Jyb3dzZXInIDogJ211eGVyJztcbiAgICAgICAgdW5zdXBwb3J0ZWRDb2RlY3Nbc3VwcG9ydGVyXSA9IHVuc3VwcG9ydGVkQ29kZWNzW3N1cHBvcnRlcl0gfHwgW107XG4gICAgICAgIHVuc3VwcG9ydGVkQ29kZWNzW3N1cHBvcnRlcl0ucHVzaChjb2RlY3NbdHlwZV0pO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgdW5zdXBwb3J0ZWRBdWRpbyA9IHN1cHBvcnRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHVzaW5nQXVkaW9Mb2FkZXIgJiYgdW5zdXBwb3J0ZWRBdWRpbyAmJiB0aGlzLm1lZGlhKCkuYXR0cmlidXRlcy5BVURJTykge1xuICAgICAgdmFyIGF1ZGlvR3JvdXAgPSB0aGlzLm1lZGlhKCkuYXR0cmlidXRlcy5BVURJTztcbiAgICAgIHRoaXMubWFzdGVyKCkucGxheWxpc3RzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhbnQpIHtcbiAgICAgICAgdmFyIHZhcmlhbnRBdWRpb0dyb3VwID0gdmFyaWFudC5hdHRyaWJ1dGVzICYmIHZhcmlhbnQuYXR0cmlidXRlcy5BVURJTztcblxuICAgICAgICBpZiAodmFyaWFudEF1ZGlvR3JvdXAgPT09IGF1ZGlvR3JvdXAgJiYgdmFyaWFudCAhPT0gX3RoaXM4Lm1lZGlhKCkpIHtcbiAgICAgICAgICB2YXJpYW50LmV4Y2x1ZGVVbnRpbCA9IEluZmluaXR5O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMubG9nZ2VyXyhcImV4Y2x1ZGluZyBhdWRpbyBncm91cCBcIiArIGF1ZGlvR3JvdXAgKyBcIiBhcyBcIiArIHVuc3VwcG9ydGVkQXVkaW8gKyBcIiBkb2VzIG5vdCBzdXBwb3J0IGNvZGVjKHMpOiBcXFwiXCIgKyBjb2RlY3MuYXVkaW8gKyBcIlxcXCJcIik7XG4gICAgfSAvLyBpZiB3ZSBoYXZlIGFueSB1bnN1cHBvcnRlZCBjb2RlY3MgYmxhY2tsaXN0IHRoaXMgcGxheWxpc3QuXG5cblxuICAgIGlmIChPYmplY3Qua2V5cyh1bnN1cHBvcnRlZENvZGVjcykubGVuZ3RoKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9IE9iamVjdC5rZXlzKHVuc3VwcG9ydGVkQ29kZWNzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3VwcG9ydGVyKSB7XG4gICAgICAgIGlmIChhY2MpIHtcbiAgICAgICAgICBhY2MgKz0gJywgJztcbiAgICAgICAgfVxuXG4gICAgICAgIGFjYyArPSBzdXBwb3J0ZXIgKyBcIiBkb2VzIG5vdCBzdXBwb3J0IGNvZGVjKHMpOiBcXFwiXCIgKyB1bnN1cHBvcnRlZENvZGVjc1tzdXBwb3J0ZXJdLmpvaW4oJywnKSArIFwiXFxcIlwiO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwgJycpICsgJy4nO1xuICAgICAgdGhpcy5ibGFja2xpc3RDdXJyZW50UGxheWxpc3Qoe1xuICAgICAgICBwbGF5bGlzdDogdGhpcy5tZWRpYSgpLFxuICAgICAgICBpbnRlcm5hbDogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgYmxhY2tsaXN0RHVyYXRpb246IEluZmluaXR5XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGNoZWNrIGlmIGNvZGVjIHN3aXRjaGluZyBpcyBoYXBwZW5pbmdcblxuXG4gICAgaWYgKHRoaXMuc291cmNlVXBkYXRlcl8ucmVhZHkoKSAmJiAhdGhpcy5zb3VyY2VVcGRhdGVyXy5jYW5DaGFuZ2VUeXBlKCkpIHtcbiAgICAgIHZhciBzd2l0Y2hNZXNzYWdlcyA9IFtdO1xuICAgICAgWyd2aWRlbycsICdhdWRpbyddLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgdmFyIG5ld0NvZGVjID0gKHBhcnNlQ29kZWNzKF90aGlzOC5zb3VyY2VVcGRhdGVyXy5jb2RlY3NbdHlwZV0gfHwgJycpW3R5cGVdIHx8IHt9KS50eXBlO1xuICAgICAgICB2YXIgb2xkQ29kZWMgPSAocGFyc2VDb2RlY3MoY29kZWNzW3R5cGVdIHx8ICcnKVt0eXBlXSB8fCB7fSkudHlwZTtcblxuICAgICAgICBpZiAobmV3Q29kZWMgJiYgb2xkQ29kZWMgJiYgbmV3Q29kZWMudG9Mb3dlckNhc2UoKSAhPT0gb2xkQ29kZWMudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgIHN3aXRjaE1lc3NhZ2VzLnB1c2goXCJcXFwiXCIgKyBfdGhpczguc291cmNlVXBkYXRlcl8uY29kZWNzW3R5cGVdICsgXCJcXFwiIC0+IFxcXCJcIiArIGNvZGVjc1t0eXBlXSArIFwiXFxcIlwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChzd2l0Y2hNZXNzYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5ibGFja2xpc3RDdXJyZW50UGxheWxpc3Qoe1xuICAgICAgICAgIHBsYXlsaXN0OiB0aGlzLm1lZGlhKCksXG4gICAgICAgICAgbWVzc2FnZTogXCJDb2RlYyBzd2l0Y2hpbmcgbm90IHN1cHBvcnRlZDogXCIgKyBzd2l0Y2hNZXNzYWdlcy5qb2luKCcsICcpICsgXCIuXCIsXG4gICAgICAgICAgYmxhY2tsaXN0RHVyYXRpb246IEluZmluaXR5LFxuICAgICAgICAgIGludGVybmFsOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSAvLyBUT0RPOiB3aGVuIHVzaW5nIHRoZSBtdXhlciBzaG91bGRuJ3Qgd2UganVzdCByZXR1cm5cbiAgICAvLyB0aGUgY29kZWNzIHRoYXQgdGhlIG11eGVyIG91dHB1dHM/XG5cblxuICAgIHJldHVybiBjb2RlY3M7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBzb3VyY2UgYnVmZmVycyBhbmQgZXhsdWRlIGFueSBpbmNvbXBhdGlibGUgcmVuZGl0aW9ucy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8udHJ5VG9DcmVhdGVTb3VyY2VCdWZmZXJzXyA9IGZ1bmN0aW9uIHRyeVRvQ3JlYXRlU291cmNlQnVmZmVyc18oKSB7XG4gICAgLy8gbWVkaWEgc291cmNlIGlzIG5vdCByZWFkeSB5ZXQgb3Igc291cmNlQnVmZmVycyBhcmUgYWxyZWFkeVxuICAgIC8vIGNyZWF0ZWQuXG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2UucmVhZHlTdGF0ZSAhPT0gJ29wZW4nIHx8IHRoaXMuc291cmNlVXBkYXRlcl8ucmVhZHkoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5hcmVNZWRpYVR5cGVzS25vd25fKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29kZWNzID0gdGhpcy5nZXRDb2RlY3NPckV4Y2x1ZGVfKCk7IC8vIG5vIGNvZGVjcyBtZWFucyB0aGF0IHRoZSBwbGF5bGlzdCB3YXMgZXhjbHVkZWRcblxuICAgIGlmICghY29kZWNzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zb3VyY2VVcGRhdGVyXy5jcmVhdGVTb3VyY2VCdWZmZXJzKGNvZGVjcyk7XG4gICAgdmFyIGNvZGVjU3RyaW5nID0gW2NvZGVjcy52aWRlbywgY29kZWNzLmF1ZGlvXS5maWx0ZXIoQm9vbGVhbikuam9pbignLCcpO1xuICAgIHRoaXMuZXhjbHVkZUluY29tcGF0aWJsZVZhcmlhbnRzXyhjb2RlY1N0cmluZyk7XG4gIH1cbiAgLyoqXG4gICAqIEV4Y2x1ZGVzIHBsYXlsaXN0cyB3aXRoIGNvZGVjcyB0aGF0IGFyZSB1bnN1cHBvcnRlZCBieSB0aGUgbXV4ZXIgYW5kIGJyb3dzZXIuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmV4Y2x1ZGVVbnN1cHBvcnRlZFZhcmlhbnRzXyA9IGZ1bmN0aW9uIGV4Y2x1ZGVVbnN1cHBvcnRlZFZhcmlhbnRzXygpIHtcbiAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgIHRoaXMubWFzdGVyKCkucGxheWxpc3RzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhbnQpIHtcbiAgICAgIHZhciBjb2RlY3MgPSBjb2RlY3NGb3JQbGF5bGlzdChfdGhpczkubWFzdGVyLCB2YXJpYW50KTtcblxuICAgICAgaWYgKGNvZGVjcy5hdWRpbyAmJiAhbXV4ZXJTdXBwb3J0c0NvZGVjKGNvZGVjcy5hdWRpbykgJiYgIWJyb3dzZXJTdXBwb3J0c0NvZGVjKGNvZGVjcy5hdWRpbykpIHtcbiAgICAgICAgdmFyaWFudC5leGNsdWRlVW50aWwgPSBJbmZpbml0eTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvZGVjcy52aWRlbyAmJiAhbXV4ZXJTdXBwb3J0c0NvZGVjKGNvZGVjcy52aWRlbykgJiYgIWJyb3dzZXJTdXBwb3J0c0NvZGVjKGNvZGVjcy52aWRlbykpIHtcbiAgICAgICAgdmFyaWFudC5leGNsdWRlVW50aWwgPSBJbmZpbml0eTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQmxhY2tsaXN0IHBsYXlsaXN0cyB0aGF0IGFyZSBrbm93biB0byBiZSBjb2RlYyBvclxuICAgKiBzdHJlYW0taW5jb21wYXRpYmxlIHdpdGggdGhlIFNvdXJjZUJ1ZmZlciBjb25maWd1cmF0aW9uLiBGb3JcbiAgICogaW5zdGFuY2UsIE1lZGlhIFNvdXJjZSBFeHRlbnNpb25zIHdvdWxkIGNhdXNlIHRoZSB2aWRlbyBlbGVtZW50IHRvXG4gICAqIHN0YWxsIHdhaXRpbmcgZm9yIHZpZGVvIGRhdGEgaWYgeW91IHN3aXRjaGVkIGZyb20gYSB2YXJpYW50IHdpdGhcbiAgICogdmlkZW8gYW5kIGF1ZGlvIHRvIGFuIGF1ZGlvLW9ubHkgb25lLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gbWVkaWEgYSBtZWRpYSBwbGF5bGlzdCBjb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnRcbiAgICogc2V0IG9mIFNvdXJjZUJ1ZmZlcnMuIFZhcmlhbnRzIGluIHRoZSBjdXJyZW50IG1hc3RlciBwbGF5bGlzdCB0aGF0XG4gICAqIGRvIG5vdCBhcHBlYXIgdG8gaGF2ZSBjb21wYXRpYmxlIGNvZGVjIG9yIHN0cmVhbSBjb25maWd1cmF0aW9uc1xuICAgKiB3aWxsIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIGRlZmF1bHQgcGxheWxpc3Qgc2VsZWN0aW9uIGFsZ29yaXRobVxuICAgKiBpbmRlZmluaXRlbHkuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmV4Y2x1ZGVJbmNvbXBhdGlibGVWYXJpYW50c18gPSBmdW5jdGlvbiBleGNsdWRlSW5jb21wYXRpYmxlVmFyaWFudHNfKGNvZGVjU3RyaW5nKSB7XG4gICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgdmFyIGNvZGVjcyA9IHBhcnNlQ29kZWNzKGNvZGVjU3RyaW5nKTtcbiAgICB2YXIgY29kZWNDb3VudCA9IE9iamVjdC5rZXlzKGNvZGVjcykubGVuZ3RoO1xuICAgIHRoaXMubWFzdGVyKCkucGxheWxpc3RzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhbnQpIHtcbiAgICAgIC8vIHNraXAgdmFyaWFudHMgdGhhdCBhcmUgYWxyZWFkeSBibGFja2xpc3RlZCBmb3JldmVyXG4gICAgICBpZiAodmFyaWFudC5leGNsdWRlVW50aWwgPT09IEluZmluaXR5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8qIFRPRE86IERlY2lkZSB3aGV0aGVyIHR3byBjb2RlY3Mgc2hvdWxkIGJlIGFzc3VtZWQgaGVyZS5cbiAgICAgICAqIFJpZ2h0IG5vdywgZm9yIHBsYXlsaXN0cyB0aGF0IGRvbid0IHNwZWNpZnkgY29kZWNzLCBWSFMgYXNzdW1lc1xuICAgICAgICogdGhhdCB0aGVyZSBhcmUgdHdvIChvbmUgZm9yIGF1ZGlvIGFuZCBvbmUgZm9yIHZpZGVvKS5cbiAgICAgICAqIEFsdGhvdWdoIHRoaXMgaXMgb2Z0ZW4gdGhlIGNhc2UsIHRoaXMgbWF5IGxlYWQgdG8gYnJva2VuIGJlaGF2aW9yXG4gICAgICAgKiBpZiB0aGUgcGxheWxpc3Qgb25seSBoYXMgb25lIGNvZGVjLiBJdCBtYXkgYmUgYmV0dGVyIGluIHRoZSBmdXR1cmVcbiAgICAgICAqIHRvIGRlY2lkZSBhdCB0aW1lIG9mIHNlZ21lbnQgZG93bmxvYWQgaG93IG1hbnkgdHJhY2tzIHRoZXJlIGFyZSBhbmRcbiAgICAgICAqIGRldGVybWluZSB0aGUgcHJvcGVyIGNvZGVjcy4gVGhpcyB3aWxsIGNvbWUgYXQgYSBjb3N0IG9mIHBvdGVudGlhbGx5XG4gICAgICAgKiBtb3JlIGJhbmR3aWR0aCwgYnV0IHdpbGwgYmUgYSBtb3JlIHJvYnVzdCBhcHByb2FjaCB0aGFuIHRoZSBhc3N1bXB0aW9uIGhlcmUuXG4gICAgICAgKi9cblxuXG4gICAgICB2YXIgdmFyaWFudENvZGVjcyA9IHt9O1xuICAgICAgdmFyIHZhcmlhbnRDb2RlY0NvdW50ID0gMjtcbiAgICAgIHZhciBibGFja2xpc3RSZWFzb25zID0gW107IC8vIGdldCBjb2RlY3MgZnJvbSB0aGUgcGxheWxpc3QgZm9yIHRoaXMgdmFyaWFudFxuXG4gICAgICB2YXIgdmFyaWFudENvZGVjU3RyaW5ncyA9IGNvZGVjc0ZvclBsYXlsaXN0KF90aGlzMTAubWFzdGVyUGxheWxpc3RMb2FkZXJfLm1hc3RlciwgdmFyaWFudCk7XG5cbiAgICAgIGlmICh2YXJpYW50Q29kZWNTdHJpbmdzLmF1ZGlvIHx8IHZhcmlhbnRDb2RlY1N0cmluZ3MudmlkZW8pIHtcbiAgICAgICAgdmFyIHZhcmlhbnRDb2RlY1N0cmluZyA9IFt2YXJpYW50Q29kZWNTdHJpbmdzLnZpZGVvLCB2YXJpYW50Q29kZWNTdHJpbmdzLmF1ZGlvXS5maWx0ZXIoQm9vbGVhbikuam9pbignLCcpO1xuICAgICAgICB2YXJpYW50Q29kZWNzID0gcGFyc2VDb2RlY3ModmFyaWFudENvZGVjU3RyaW5nKTtcbiAgICAgICAgdmFyaWFudENvZGVjQ291bnQgPSBPYmplY3Qua2V5cyh2YXJpYW50Q29kZWNzKS5sZW5ndGg7XG4gICAgICB9IC8vIFRPRE86IHdlIGNhbiBzdXBwb3J0IHRoaXMgYnkgcmVtb3ZpbmcgdGhlXG4gICAgICAvLyBvbGQgbWVkaWEgc291cmNlIGFuZCBjcmVhdGluZyBhIG5ldyBvbmUsIGJ1dCBpdCB3aWxsIHRha2Ugc29tZSB3b3JrLlxuICAgICAgLy8gVGhlIG51bWJlciBvZiBzdHJlYW1zIGNhbm5vdCBjaGFuZ2VcblxuXG4gICAgICBpZiAodmFyaWFudENvZGVjQ291bnQgIT09IGNvZGVjQ291bnQpIHtcbiAgICAgICAgYmxhY2tsaXN0UmVhc29ucy5wdXNoKFwiY29kZWMgY291bnQgXFxcIlwiICsgdmFyaWFudENvZGVjQ291bnQgKyBcIlxcXCIgIT09IFxcXCJcIiArIGNvZGVjQ291bnQgKyBcIlxcXCJcIik7XG4gICAgICAgIHZhcmlhbnQuZXhjbHVkZVVudGlsID0gSW5maW5pdHk7XG4gICAgICB9IC8vIG9ubHkgZXhjbHVkZSBwbGF5bGlzdHMgYnkgY29kZWMgY2hhbmdlLCBpZiBjb2RlY3MgY2Fubm90IHN3aXRjaFxuICAgICAgLy8gZHVyaW5nIHBsYXliYWNrLlxuXG5cbiAgICAgIGlmICghX3RoaXMxMC5zb3VyY2VVcGRhdGVyXy5jYW5DaGFuZ2VUeXBlKCkpIHtcbiAgICAgICAgLy8gdGhlIHZpZGVvIGNvZGVjIGNhbm5vdCBjaGFuZ2VcbiAgICAgICAgaWYgKHZhcmlhbnRDb2RlY3MudmlkZW8gJiYgY29kZWNzLnZpZGVvICYmIHZhcmlhbnRDb2RlY3MudmlkZW8udHlwZS50b0xvd2VyQ2FzZSgpICE9PSBjb2RlY3MudmlkZW8udHlwZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgYmxhY2tsaXN0UmVhc29ucy5wdXNoKFwidmlkZW8gY29kZWMgXFxcIlwiICsgdmFyaWFudENvZGVjcy52aWRlby50eXBlICsgXCJcXFwiICE9PSBcXFwiXCIgKyBjb2RlY3MudmlkZW8udHlwZSArIFwiXFxcIlwiKTtcbiAgICAgICAgICB2YXJpYW50LmV4Y2x1ZGVVbnRpbCA9IEluZmluaXR5O1xuICAgICAgICB9IC8vIHRoZSBhdWRpbyBjb2RlYyBjYW5ub3QgY2hhbmdlXG5cblxuICAgICAgICBpZiAodmFyaWFudENvZGVjcy5hdWRpbyAmJiBjb2RlY3MuYXVkaW8gJiYgdmFyaWFudENvZGVjcy5hdWRpby50eXBlLnRvTG93ZXJDYXNlKCkgIT09IGNvZGVjcy5hdWRpby50eXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICB2YXJpYW50LmV4Y2x1ZGVVbnRpbCA9IEluZmluaXR5O1xuICAgICAgICAgIGJsYWNrbGlzdFJlYXNvbnMucHVzaChcImF1ZGlvIGNvZGVjIFxcXCJcIiArIHZhcmlhbnRDb2RlY3MuYXVkaW8udHlwZSArIFwiXFxcIiAhPT0gXFxcIlwiICsgY29kZWNzLmF1ZGlvLnR5cGUgKyBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGJsYWNrbGlzdFJlYXNvbnMubGVuZ3RoKSB7XG4gICAgICAgIF90aGlzMTAubG9nZ2VyXyhcImJsYWNrbGlzdGluZyBcIiArIHZhcmlhbnQuaWQgKyBcIjogXCIgKyBibGFja2xpc3RSZWFzb25zLmpvaW4oJyAmJiAnKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZUFkQ3Vlc18gPSBmdW5jdGlvbiB1cGRhdGVBZEN1ZXNfKG1lZGlhKSB7XG4gICAgdmFyIG9mZnNldCA9IDA7XG4gICAgdmFyIHNlZWthYmxlID0gdGhpcy5zZWVrYWJsZSgpO1xuXG4gICAgaWYgKHNlZWthYmxlLmxlbmd0aCkge1xuICAgICAgb2Zmc2V0ID0gc2Vla2FibGUuc3RhcnQoMCk7XG4gICAgfVxuXG4gICAgdXBkYXRlQWRDdWVzKG1lZGlhLCB0aGlzLmN1ZVRhZ3NUcmFja18sIG9mZnNldCk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGRlc2lyZWQgZm9yd2FyZCBidWZmZXIgbGVuZ3RoIGJhc2VkIG9uIGN1cnJlbnQgdGltZVxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IERlc2lyZWQgZm9yd2FyZCBidWZmZXIgbGVuZ3RoIGluIHNlY29uZHNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ29hbEJ1ZmZlckxlbmd0aCA9IGZ1bmN0aW9uIGdvYWxCdWZmZXJMZW5ndGgoKSB7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy50ZWNoXy5jdXJyZW50VGltZSgpO1xuICAgIHZhciBpbml0aWFsID0gQ29uZmlnLkdPQUxfQlVGRkVSX0xFTkdUSDtcbiAgICB2YXIgcmF0ZSA9IENvbmZpZy5HT0FMX0JVRkZFUl9MRU5HVEhfUkFURTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXgoaW5pdGlhbCwgQ29uZmlnLk1BWF9HT0FMX0JVRkZFUl9MRU5HVEgpO1xuICAgIHJldHVybiBNYXRoLm1pbihpbml0aWFsICsgY3VycmVudFRpbWUgKiByYXRlLCBtYXgpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBkZXNpcmVkIGJ1ZmZlciBsb3cgd2F0ZXIgbGluZSBiYXNlZCBvbiBjdXJyZW50IHRpbWVcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSBEZXNpcmVkIGJ1ZmZlciBsb3cgd2F0ZXIgbGluZSBpbiBzZWNvbmRzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJ1ZmZlckxvd1dhdGVyTGluZSA9IGZ1bmN0aW9uIGJ1ZmZlckxvd1dhdGVyTGluZSgpIHtcbiAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLnRlY2hfLmN1cnJlbnRUaW1lKCk7XG4gICAgdmFyIGluaXRpYWwgPSBDb25maWcuQlVGRkVSX0xPV19XQVRFUl9MSU5FO1xuICAgIHZhciByYXRlID0gQ29uZmlnLkJVRkZFUl9MT1dfV0FURVJfTElORV9SQVRFO1xuICAgIHZhciBtYXggPSBNYXRoLm1heChpbml0aWFsLCBDb25maWcuTUFYX0JVRkZFUl9MT1dfV0FURVJfTElORSk7XG4gICAgcmV0dXJuIE1hdGgubWluKGluaXRpYWwgKyBjdXJyZW50VGltZSAqIHJhdGUsIG1heCk7XG4gIH07XG5cbiAgcmV0dXJuIE1hc3RlclBsYXlsaXN0Q29udHJvbGxlcjtcbn0odmlkZW9qcyQxLkV2ZW50VGFyZ2V0KTtcbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWN0cyBhcyB0aGUgRW5hYmxlL2Rpc2FibGUgcGxheWxpc3QgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtQbGF5bGlzdExvYWRlcn0gbG9hZGVyIC0gVGhlIG1hc3RlciBwbGF5bGlzdCBsb2FkZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwbGF5bGlzdElEIC0gaWQgb2YgdGhlIHBsYXlsaXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGFuZ2VQbGF5bGlzdEZuIC0gQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgYVxuICogcGxheWxpc3QncyBlbmFibGVkLXN0YXRlIGhhcyBiZWVuIGNoYW5nZWQuIFdpbGwgTk9UIGJlIGNhbGxlZCBpZiBhXG4gKiBwbGF5bGlzdCdzIGVuYWJsZWQtc3RhdGUgaXMgdW5jaGFuZ2VkXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGUgLSBWYWx1ZSB0byBzZXQgdGhlIHBsYXlsaXN0IGVuYWJsZWQtc3RhdGUgdG9cbiAqIG9yIGlmIHVuZGVmaW5lZCByZXR1cm5zIHRoZSBjdXJyZW50IGVuYWJsZWQtc3RhdGUgZm9yIHRoZSBwbGF5bGlzdFxuICogQHJldHVybiB7RnVuY3Rpb259IEZ1bmN0aW9uIGZvciBzZXR0aW5nL2dldHRpbmcgZW5hYmxlZFxuICovXG5cblxudmFyIGVuYWJsZUZ1bmN0aW9uID0gZnVuY3Rpb24gZW5hYmxlRnVuY3Rpb24obG9hZGVyLCBwbGF5bGlzdElELCBjaGFuZ2VQbGF5bGlzdEZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZW5hYmxlKSB7XG4gICAgdmFyIHBsYXlsaXN0ID0gbG9hZGVyLm1hc3Rlci5wbGF5bGlzdHNbcGxheWxpc3RJRF07XG4gICAgdmFyIGluY29tcGF0aWJsZSA9IGlzSW5jb21wYXRpYmxlKHBsYXlsaXN0KTtcbiAgICB2YXIgY3VycmVudGx5RW5hYmxlZCA9IGlzRW5hYmxlZChwbGF5bGlzdCk7XG5cbiAgICBpZiAodHlwZW9mIGVuYWJsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBjdXJyZW50bHlFbmFibGVkO1xuICAgIH1cblxuICAgIGlmIChlbmFibGUpIHtcbiAgICAgIGRlbGV0ZSBwbGF5bGlzdC5kaXNhYmxlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGxheWxpc3QuZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChlbmFibGUgIT09IGN1cnJlbnRseUVuYWJsZWQgJiYgIWluY29tcGF0aWJsZSkge1xuICAgICAgLy8gRW5zdXJlIHRoZSBvdXRzaWRlIHdvcmxkIGtub3dzIGFib3V0IG91ciBjaGFuZ2VzXG4gICAgICBjaGFuZ2VQbGF5bGlzdEZuKCk7XG5cbiAgICAgIGlmIChlbmFibGUpIHtcbiAgICAgICAgbG9hZGVyLnRyaWdnZXIoJ3JlbmRpdGlvbmVuYWJsZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRlci50cmlnZ2VyKCdyZW5kaXRpb25kaXNhYmxlZCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlbmFibGU7XG4gIH07XG59O1xuLyoqXG4gKiBUaGUgcmVwcmVzZW50YXRpb24gb2JqZWN0IGVuY2Fwc3VsYXRlcyB0aGUgcHVibGljbHkgdmlzaWJsZSBpbmZvcm1hdGlvblxuICogaW4gYSBtZWRpYSBwbGF5bGlzdCBhbG9uZyB3aXRoIGEgc2V0dGVyL2dldHRlci10eXBlIGZ1bmN0aW9uIChlbmFibGVkKVxuICogZm9yIGNoYW5naW5nIHRoZSBlbmFibGVkLXN0YXRlIG9mIGEgcGFydGljdWxhciBwbGF5bGlzdCBlbnRyeVxuICpcbiAqIEBjbGFzcyBSZXByZXNlbnRhdGlvblxuICovXG5cblxudmFyIFJlcHJlc2VudGF0aW9uID0gZnVuY3Rpb24gUmVwcmVzZW50YXRpb24odmhzSGFuZGxlciwgcGxheWxpc3QsIGlkKSB7XG4gIHZhciBtcGMgPSB2aHNIYW5kbGVyLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8sXG4gICAgICBzbW9vdGhRdWFsaXR5Q2hhbmdlID0gdmhzSGFuZGxlci5vcHRpb25zXy5zbW9vdGhRdWFsaXR5Q2hhbmdlOyAvLyBHZXQgYSByZWZlcmVuY2UgdG8gYSBib3VuZCB2ZXJzaW9uIG9mIHRoZSBxdWFsaXR5IGNoYW5nZSBmdW5jdGlvblxuXG4gIHZhciBjaGFuZ2VUeXBlID0gc21vb3RoUXVhbGl0eUNoYW5nZSA/ICdzbW9vdGgnIDogJ2Zhc3QnO1xuICB2YXIgcXVhbGl0eUNoYW5nZUZ1bmN0aW9uID0gbXBjW2NoYW5nZVR5cGUgKyBcIlF1YWxpdHlDaGFuZ2VfXCJdLmJpbmQobXBjKTsgLy8gc29tZSBwbGF5bGlzdCBhdHRyaWJ1dGVzIGFyZSBvcHRpb25hbFxuXG4gIGlmIChwbGF5bGlzdC5hdHRyaWJ1dGVzLlJFU09MVVRJT04pIHtcbiAgICB2YXIgcmVzb2x1dGlvbiA9IHBsYXlsaXN0LmF0dHJpYnV0ZXMuUkVTT0xVVElPTjtcbiAgICB0aGlzLndpZHRoID0gcmVzb2x1dGlvbi53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHJlc29sdXRpb24uaGVpZ2h0O1xuICB9XG5cbiAgdGhpcy5iYW5kd2lkdGggPSBwbGF5bGlzdC5hdHRyaWJ1dGVzLkJBTkRXSURUSDtcbiAgdGhpcy5jb2RlY3MgPSBjb2RlY3NGb3JQbGF5bGlzdChtcGMubWFzdGVyKCksIHBsYXlsaXN0KTtcbiAgdGhpcy5wbGF5bGlzdCA9IHBsYXlsaXN0OyAvLyBUaGUgaWQgaXMgc2ltcGx5IHRoZSBvcmRpbmFsaXR5IG9mIHRoZSBtZWRpYSBwbGF5bGlzdFxuICAvLyB3aXRoaW4gdGhlIG1hc3RlciBwbGF5bGlzdFxuXG4gIHRoaXMuaWQgPSBpZDsgLy8gUGFydGlhbGx5LWFwcGx5IHRoZSBlbmFibGVGdW5jdGlvbiB0byBjcmVhdGUgYSBwbGF5bGlzdC1cbiAgLy8gc3BlY2lmaWMgdmFyaWFudFxuXG4gIHRoaXMuZW5hYmxlZCA9IGVuYWJsZUZ1bmN0aW9uKHZoc0hhbmRsZXIucGxheWxpc3RzLCBwbGF5bGlzdC5pZCwgcXVhbGl0eUNoYW5nZUZ1bmN0aW9uKTtcbn07XG4vKipcbiAqIEEgbWl4aW4gZnVuY3Rpb24gdGhhdCBhZGRzIHRoZSBgcmVwcmVzZW50YXRpb25zYCBhcGkgdG8gYW4gaW5zdGFuY2VcbiAqIG9mIHRoZSBWaHNIYW5kbGVyIGNsYXNzXG4gKlxuICogQHBhcmFtIHtWaHNIYW5kbGVyfSB2aHNIYW5kbGVyIC0gQW4gaW5zdGFuY2Ugb2YgVmhzSGFuZGxlciB0byBhZGQgdGhlXG4gKiByZXByZXNlbnRhdGlvbiBBUEkgaW50b1xuICovXG5cblxudmFyIHJlbmRpdGlvblNlbGVjdGlvbk1peGluID0gZnVuY3Rpb24gcmVuZGl0aW9uU2VsZWN0aW9uTWl4aW4odmhzSGFuZGxlcikge1xuICB2YXIgcGxheWxpc3RzID0gdmhzSGFuZGxlci5wbGF5bGlzdHM7IC8vIEFkZCBhIHNpbmdsZSBBUEktc3BlY2lmaWMgZnVuY3Rpb24gdG8gdGhlIFZoc0hhbmRsZXIgaW5zdGFuY2VcblxuICB2aHNIYW5kbGVyLnJlcHJlc2VudGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBsYXlsaXN0cyB8fCAhcGxheWxpc3RzLm1hc3RlciB8fCAhcGxheWxpc3RzLm1hc3Rlci5wbGF5bGlzdHMpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGxheWxpc3RzLm1hc3Rlci5wbGF5bGlzdHMuZmlsdGVyKGZ1bmN0aW9uIChtZWRpYSkge1xuICAgICAgcmV0dXJuICFpc0luY29tcGF0aWJsZShtZWRpYSk7XG4gICAgfSkubWFwKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICByZXR1cm4gbmV3IFJlcHJlc2VudGF0aW9uKHZoc0hhbmRsZXIsIGUsIGUuaWQpO1xuICAgIH0pO1xuICB9O1xufTtcbi8qKlxuICogQGZpbGUgcGxheWJhY2std2F0Y2hlci5qc1xuICpcbiAqIFBsYXliYWNrIHN0YXJ0cywgYW5kIG5vdyBteSB3YXRjaCBiZWdpbnMuIEl0IHNoYWxsIG5vdCBlbmQgdW50aWwgbXkgZGVhdGguIEkgc2hhbGxcbiAqIHRha2Ugbm8gd2FpdCwgaG9sZCBubyB1bmNsZWFyZWQgdGltZW91dHMsIGZhdGhlciBubyBiYWQgc2Vla3MuIEkgc2hhbGwgd2VhciBubyBjcm93bnNcbiAqIGFuZCB3aW4gbm8gZ2xvcnkuIEkgc2hhbGwgbGl2ZSBhbmQgZGllIGF0IG15IHBvc3QuIEkgYW0gdGhlIGNvcnJlY3RvciBvZiB0aGUgdW5kZXJmbG93LlxuICogSSBhbSB0aGUgd2F0Y2hlciBvZiBnYXBzLiBJIGFtIHRoZSBzaGllbGQgdGhhdCBndWFyZHMgdGhlIHJlYWxtcyBvZiBzZWVrYWJsZS4gSSBwbGVkZ2VcbiAqIG15IGxpZmUgYW5kIGhvbm9yIHRvIHRoZSBQbGF5YmFjayBXYXRjaCwgZm9yIHRoaXMgUGxheWVyIGFuZCBhbGwgdGhlIFBsYXllcnMgdG8gY29tZS5cbiAqL1xuXG5cbnZhciB0aW1lckNhbmNlbEV2ZW50cyA9IFsnc2Vla2luZycsICdzZWVrZWQnLCAncGF1c2UnLCAncGxheWluZycsICdlcnJvciddO1xuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBjdXJyZW50IHRpbWUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgY2xvc2UgdG8gYnVmZmVyZWQgY29udGVudCxcbiAqIHRha2luZyBpbnRvIGNvbnNpZGVyYXRpb24gd2hldGhlciB0aGVyZSdzIGVub3VnaCBidWZmZXJlZCBjb250ZW50IGZvciBwcm9wZXIgcGxheWJhY2suXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqICAgICAgICBPcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtUaW1lUmFuZ2V9IG9wdGlvbnMuYnVmZmVyZWRcbiAqICAgICAgICBDdXJyZW50IGJ1ZmZlclxuICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMudGFyZ2V0RHVyYXRpb25cbiAqICAgICAgICBUaGUgYWN0aXZlIHBsYXlsaXN0J3MgdGFyZ2V0IGR1cmF0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5jdXJyZW50VGltZVxuICogICAgICAgIFRoZSBjdXJyZW50IHRpbWUgb2YgdGhlIHBsYXllclxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqICAgICAgICAgV2hldGhlciB0aGUgY3VycmVudCB0aW1lIHNob3VsZCBiZSBjb25zaWRlcmVkIGNsb3NlIHRvIHRoZSBidWZmZXJcbiAqL1xuXG52YXIgY2xvc2VUb0J1ZmZlcmVkQ29udGVudCA9IGZ1bmN0aW9uIGNsb3NlVG9CdWZmZXJlZENvbnRlbnQoX3JlZikge1xuICB2YXIgYnVmZmVyZWQgPSBfcmVmLmJ1ZmZlcmVkLFxuICAgICAgdGFyZ2V0RHVyYXRpb24gPSBfcmVmLnRhcmdldER1cmF0aW9uLFxuICAgICAgY3VycmVudFRpbWUgPSBfcmVmLmN1cnJlbnRUaW1lO1xuXG4gIGlmICghYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIEF0IGxlYXN0IHR3byB0byB0aHJlZSBzZWdtZW50cyB3b3J0aCBvZiBjb250ZW50IHNob3VsZCBiZSBidWZmZXJlZCBiZWZvcmUgdGhlcmUncyBhXG4gIC8vIGZ1bGwgZW5vdWdoIGJ1ZmZlciB0byBjb25zaWRlciB0YWtpbmcgYW55IGFjdGlvbnMuXG5cblxuICBpZiAoYnVmZmVyZWQuZW5kKDApIC0gYnVmZmVyZWQuc3RhcnQoMCkgPCB0YXJnZXREdXJhdGlvbiAqIDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSXQncyBwb3NzaWJsZSB0aGF0LCBvbiBzZWVrLCBhIHJlbW92ZSBoYXNuJ3QgY29tcGxldGVkIGFuZCB0aGUgYnVmZmVyZWQgcmFuZ2UgaXNcbiAgLy8gc29tZXdoZXJlIHBhc3QgdGhlIGN1cnJlbnQgdGltZS4gSW4gdGhhdCBldmVudCwgZG9uJ3QgY29uc2lkZXIgdGhlIGJ1ZmZlcmVkIGNvbnRlbnRcbiAgLy8gY2xvc2UuXG5cblxuICBpZiAoY3VycmVudFRpbWUgPiBidWZmZXJlZC5zdGFydCgwKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBTaW5jZSB0YXJnZXQgZHVyYXRpb24gZ2VuZXJhbGx5IHJlcHJlc2VudHMgdGhlIG1heCAob3IgY2xvc2UgdG8gbWF4KSBkdXJhdGlvbiBvZiBhXG4gIC8vIHNlZ21lbnQsIGlmIHRoZSBidWZmZXIgaXMgd2l0aGluIGEgc2VnbWVudCBvZiB0aGUgY3VycmVudCB0aW1lLCB0aGUgZ2FwIHByb2JhYmx5XG4gIC8vIHdvbid0IGJlIGNsb3NlZCwgYW5kIGN1cnJlbnQgdGltZSBzaG91bGQgYmUgY29uc2lkZXJlZCBjbG9zZSB0byBidWZmZXJlZCBjb250ZW50LlxuXG5cbiAgcmV0dXJuIGJ1ZmZlcmVkLnN0YXJ0KDApIC0gY3VycmVudFRpbWUgPCB0YXJnZXREdXJhdGlvbjtcbn07XG4vKipcbiAqIEBjbGFzcyBQbGF5YmFja1dhdGNoZXJcbiAqL1xuXG5cbnZhciBQbGF5YmFja1dhdGNoZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogUmVwcmVzZW50cyBhbiBQbGF5YmFja1dhdGNoZXIgb2JqZWN0LlxuICAgKlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgYW4gb2JqZWN0IHRoYXQgaW5jbHVkZXMgdGhlIHRlY2ggYW5kIHNldHRpbmdzXG4gICAqL1xuICBmdW5jdGlvbiBQbGF5YmFja1dhdGNoZXIob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8gPSBvcHRpb25zLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcjtcbiAgICB0aGlzLnRlY2hfID0gb3B0aW9ucy50ZWNoO1xuICAgIHRoaXMuc2Vla2FibGUgPSBvcHRpb25zLnNlZWthYmxlO1xuICAgIHRoaXMuYWxsb3dTZWVrc1dpdGhpblVuc2FmZUxpdmVXaW5kb3cgPSBvcHRpb25zLmFsbG93U2Vla3NXaXRoaW5VbnNhZmVMaXZlV2luZG93O1xuICAgIHRoaXMubWVkaWEgPSBvcHRpb25zLm1lZGlhO1xuICAgIHRoaXMuY29uc2VjdXRpdmVVcGRhdGVzID0gMDtcbiAgICB0aGlzLmxhc3RSZWNvcmRlZFRpbWUgPSBudWxsO1xuICAgIHRoaXMudGltZXJfID0gbnVsbDtcbiAgICB0aGlzLmNoZWNrQ3VycmVudFRpbWVUaW1lb3V0XyA9IG51bGw7XG4gICAgdGhpcy5sb2dnZXJfID0gbG9nZ2VyKCdQbGF5YmFja1dhdGNoZXInKTtcbiAgICB0aGlzLmxvZ2dlcl8oJ2luaXRpYWxpemUnKTtcblxuICAgIHZhciBjYW5QbGF5SGFuZGxlciA9IGZ1bmN0aW9uIGNhblBsYXlIYW5kbGVyKCkge1xuICAgICAgcmV0dXJuIF90aGlzLm1vbml0b3JDdXJyZW50VGltZV8oKTtcbiAgICB9O1xuXG4gICAgdmFyIHdhaXRpbmdIYW5kbGVyID0gZnVuY3Rpb24gd2FpdGluZ0hhbmRsZXIoKSB7XG4gICAgICByZXR1cm4gX3RoaXMudGVjaFdhaXRpbmdfKCk7XG4gICAgfTtcblxuICAgIHZhciBjYW5jZWxUaW1lckhhbmRsZXIgPSBmdW5jdGlvbiBjYW5jZWxUaW1lckhhbmRsZXIoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuY2FuY2VsVGltZXJfKCk7XG4gICAgfTtcblxuICAgIHZhciBmaXhlc0JhZFNlZWtzSGFuZGxlciA9IGZ1bmN0aW9uIGZpeGVzQmFkU2Vla3NIYW5kbGVyKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmZpeGVzQmFkU2Vla3NfKCk7XG4gICAgfTtcblxuICAgIHZhciBtcGMgPSB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl87XG4gICAgdmFyIGxvYWRlclR5cGVzID0gWydtYWluJywgJ3N1YnRpdGxlJywgJ2F1ZGlvJ107XG4gICAgdmFyIGxvYWRlckNoZWNrcyA9IHt9O1xuICAgIGxvYWRlclR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIGxvYWRlckNoZWNrc1t0eXBlXSA9IHtcbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZXNldFNlZ21lbnREb3dubG9hZHNfKHR5cGUpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVlbmQ6IGZ1bmN0aW9uIHVwZGF0ZWVuZCgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuY2hlY2tTZWdtZW50RG93bmxvYWRzXyh0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIG1wY1t0eXBlICsgXCJTZWdtZW50TG9hZGVyX1wiXS5vbignYXBwZW5kc2RvbmUnLCBsb2FkZXJDaGVja3NbdHlwZV0udXBkYXRlZW5kKTsgLy8gSWYgYSByZW5kaXRpb24gc3dpdGNoIGhhcHBlbnMgZHVyaW5nIGEgcGxheWJhY2sgc3RhbGwgd2hlcmUgdGhlIGJ1ZmZlclxuICAgICAgLy8gaXNuJ3QgY2hhbmdpbmcgd2Ugd2FudCB0byByZXNldC4gV2UgY2Fubm90IGFzc3VtZSB0aGF0IHRoZSBuZXcgcmVuZGl0aW9uXG4gICAgICAvLyB3aWxsIGFsc28gYmUgc3RhbGxlZCwgdW50aWwgYWZ0ZXIgbmV3IGFwcGVuZHMuXG5cbiAgICAgIG1wY1t0eXBlICsgXCJTZWdtZW50TG9hZGVyX1wiXS5vbigncGxheWxpc3R1cGRhdGUnLCBsb2FkZXJDaGVja3NbdHlwZV0ucmVzZXQpOyAvLyBQbGF5YmFjayBzdGFsbHMgc2hvdWxkIG5vdCBiZSBkZXRlY3RlZCByaWdodCBhZnRlciBzZWVraW5nLlxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBvbmUgc2VnbWVudCBwbGF5bGlzdHMgKHNpbmdsZSB2dHQgb3Igc2luZ2xlIHNlZ21lbnQgY29udGVudClcbiAgICAgIC8vIGZyb20gYmVpbmcgZGV0ZWN0ZWQgYXMgc3RhbGxpbmcuIEFzIHRoZSBidWZmZXIgd2lsbCBub3QgY2hhbmdlIGluIHRob3NlIGNhc2VzLCBzaW5jZVxuICAgICAgLy8gdGhlIGJ1ZmZlciBpcyB0aGUgZW50aXJlIHZpZGVvIGR1cmF0aW9uLlxuXG4gICAgICBfdGhpcy50ZWNoXy5vbihbJ3NlZWtlZCcsICdzZWVraW5nJ10sIGxvYWRlckNoZWNrc1t0eXBlXS5yZXNldCk7XG4gICAgfSk7XG4gICAgdGhpcy50ZWNoXy5vbignc2Vla2FibGVjaGFuZ2VkJywgZml4ZXNCYWRTZWVrc0hhbmRsZXIpO1xuICAgIHRoaXMudGVjaF8ub24oJ3dhaXRpbmcnLCB3YWl0aW5nSGFuZGxlcik7XG4gICAgdGhpcy50ZWNoXy5vbih0aW1lckNhbmNlbEV2ZW50cywgY2FuY2VsVGltZXJIYW5kbGVyKTtcbiAgICB0aGlzLnRlY2hfLm9uKCdjYW5wbGF5JywgY2FuUGxheUhhbmRsZXIpOyAvLyBEZWZpbmUgdGhlIGRpc3Bvc2UgZnVuY3Rpb24gdG8gY2xlYW4gdXAgb3VyIGV2ZW50c1xuXG4gICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMubG9nZ2VyXygnZGlzcG9zZScpO1xuXG4gICAgICBfdGhpcy50ZWNoXy5vZmYoJ3NlZWthYmxlY2hhbmdlZCcsIGZpeGVzQmFkU2Vla3NIYW5kbGVyKTtcblxuICAgICAgX3RoaXMudGVjaF8ub2ZmKCd3YWl0aW5nJywgd2FpdGluZ0hhbmRsZXIpO1xuXG4gICAgICBfdGhpcy50ZWNoXy5vZmYodGltZXJDYW5jZWxFdmVudHMsIGNhbmNlbFRpbWVySGFuZGxlcik7XG5cbiAgICAgIF90aGlzLnRlY2hfLm9mZignY2FucGxheScsIGNhblBsYXlIYW5kbGVyKTtcblxuICAgICAgbG9hZGVyVHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICBtcGNbdHlwZSArIFwiU2VnbWVudExvYWRlcl9cIl0ub2ZmKCdhcHBlbmRzZG9uZScsIGxvYWRlckNoZWNrc1t0eXBlXS51cGRhdGVlbmQpO1xuICAgICAgICBtcGNbdHlwZSArIFwiU2VnbWVudExvYWRlcl9cIl0ub2ZmKCdwbGF5bGlzdHVwZGF0ZScsIGxvYWRlckNoZWNrc1t0eXBlXS5yZXNldCk7XG5cbiAgICAgICAgX3RoaXMudGVjaF8ub2ZmKFsnc2Vla2VkJywgJ3NlZWtpbmcnXSwgbG9hZGVyQ2hlY2tzW3R5cGVdLnJlc2V0KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMuY2hlY2tDdXJyZW50VGltZVRpbWVvdXRfKSB7XG4gICAgICAgIHdpbmRvdyQxLmNsZWFyVGltZW91dChfdGhpcy5jaGVja0N1cnJlbnRUaW1lVGltZW91dF8pO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jYW5jZWxUaW1lcl8oKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBQZXJpb2RpY2FsbHkgY2hlY2sgY3VycmVudCB0aW1lIHRvIHNlZSBpZiBwbGF5YmFjayBzdG9wcGVkXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFBsYXliYWNrV2F0Y2hlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm1vbml0b3JDdXJyZW50VGltZV8gPSBmdW5jdGlvbiBtb25pdG9yQ3VycmVudFRpbWVfKCkge1xuICAgIHRoaXMuY2hlY2tDdXJyZW50VGltZV8oKTtcblxuICAgIGlmICh0aGlzLmNoZWNrQ3VycmVudFRpbWVUaW1lb3V0Xykge1xuICAgICAgd2luZG93JDEuY2xlYXJUaW1lb3V0KHRoaXMuY2hlY2tDdXJyZW50VGltZVRpbWVvdXRfKTtcbiAgICB9IC8vIDQyID0gMjQgZnBzIC8vIDI1MCBpcyB3aGF0IFdlYmtpdCB1c2VzIC8vIEZGIHVzZXMgMTVcblxuXG4gICAgdGhpcy5jaGVja0N1cnJlbnRUaW1lVGltZW91dF8gPSB3aW5kb3ckMS5zZXRUaW1lb3V0KHRoaXMubW9uaXRvckN1cnJlbnRUaW1lXy5iaW5kKHRoaXMpLCAyNTApO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldCBzdGFsbGVkIGRvd25sb2FkIHN0YXRzIGZvciBhIHNwZWNpZmljIHR5cGUgb2YgbG9hZGVyXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqICAgICAgICBUaGUgc2VnbWVudCBsb2FkZXIgdHlwZSB0byBjaGVjay5cbiAgICpcbiAgICogQGxpc3RlbnMgU2VnbWVudExvYWRlciNwbGF5bGlzdHVwZGF0ZVxuICAgKiBAbGlzdGVucyBUZWNoI3NlZWtpbmdcbiAgICogQGxpc3RlbnMgVGVjaCNzZWVrZWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXRTZWdtZW50RG93bmxvYWRzXyA9IGZ1bmN0aW9uIHJlc2V0U2VnbWVudERvd25sb2Fkc18odHlwZSkge1xuICAgIHZhciBsb2FkZXIgPSB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl9bdHlwZSArIFwiU2VnbWVudExvYWRlcl9cIl07XG5cbiAgICBpZiAodGhpc1t0eXBlICsgXCJTdGFsbGVkRG93bmxvYWRzX1wiXSA+IDApIHtcbiAgICAgIHRoaXMubG9nZ2VyXyhcInJlc2V0dGluZyBwb3NzaWJsZSBzdGFsbGVkIGRvd25sb2FkIGNvdW50IGZvciBcIiArIHR5cGUgKyBcIiBsb2FkZXJcIik7XG4gICAgfVxuXG4gICAgdGhpc1t0eXBlICsgXCJTdGFsbGVkRG93bmxvYWRzX1wiXSA9IDA7XG4gICAgdGhpc1t0eXBlICsgXCJCdWZmZXJlZF9cIl0gPSBsb2FkZXIuYnVmZmVyZWRfKCk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBvbiBldmVyeSBzZWdtZW50IGBhcHBlbmRzZG9uZWAgdG8gc2VlXG4gICAqIGlmIHNlZ21lbnQgYXBwZW5kcyBhcmUgbWFraW5nIHByb2dyZXNzLiBJZiB0aGV5IGFyZSBub3RcbiAgICogYW5kIHdlIGFyZSBzdGlsbCBkb3dubG9hZGluZyBieXRlcy4gV2UgYmxhY2tsaXN0IHRoZSBwbGF5bGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogICAgICAgIFRoZSBzZWdtZW50IGxvYWRlciB0eXBlIHRvIGNoZWNrLlxuICAgKlxuICAgKiBAbGlzdGVucyBTZWdtZW50TG9hZGVyI2FwcGVuZHNkb25lXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNoZWNrU2VnbWVudERvd25sb2Fkc18gPSBmdW5jdGlvbiBjaGVja1NlZ21lbnREb3dubG9hZHNfKHR5cGUpIHtcbiAgICB2YXIgbXBjID0gdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfO1xuICAgIHZhciBsb2FkZXIgPSBtcGNbdHlwZSArIFwiU2VnbWVudExvYWRlcl9cIl07XG4gICAgdmFyIGJ1ZmZlcmVkID0gbG9hZGVyLmJ1ZmZlcmVkXygpO1xuICAgIHZhciBpc0J1ZmZlcmVkRGlmZmVyZW50ID0gaXNSYW5nZURpZmZlcmVudCh0aGlzW3R5cGUgKyBcIkJ1ZmZlcmVkX1wiXSwgYnVmZmVyZWQpO1xuICAgIHRoaXNbdHlwZSArIFwiQnVmZmVyZWRfXCJdID0gYnVmZmVyZWQ7IC8vIGlmIGFub3RoZXIgd2F0Y2hlciBpcyBnb2luZyB0byBmaXggdGhlIGlzc3VlIG9yXG4gICAgLy8gdGhlIGJ1ZmZlcmVkIHZhbHVlIGZvciB0aGlzIGxvYWRlciBjaGFuZ2VkXG4gICAgLy8gYXBwZW5kcyBhcmUgd29ya2luZ1xuXG4gICAgaWYgKGlzQnVmZmVyZWREaWZmZXJlbnQpIHtcbiAgICAgIHRoaXMucmVzZXRTZWdtZW50RG93bmxvYWRzXyh0eXBlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzW3R5cGUgKyBcIlN0YWxsZWREb3dubG9hZHNfXCJdKys7XG4gICAgdGhpcy5sb2dnZXJfKFwiZm91bmQgI1wiICsgdGhpc1t0eXBlICsgXCJTdGFsbGVkRG93bmxvYWRzX1wiXSArIFwiIFwiICsgdHlwZSArIFwiIGFwcGVuZHMgdGhhdCBkaWQgbm90IGluY3JlYXNlIGJ1ZmZlciAocG9zc2libGUgc3RhbGxlZCBkb3dubG9hZClcIiwge1xuICAgICAgcGxheWxpc3RJZDogbG9hZGVyLnBsYXlsaXN0XyAmJiBsb2FkZXIucGxheWxpc3RfLmlkLFxuICAgICAgYnVmZmVyZWQ6IHRpbWVSYW5nZXNUb0FycmF5KGJ1ZmZlcmVkKVxuICAgIH0pOyAvLyBhZnRlciAxMCBwb3NzaWJseSBzdGFsbGVkIGFwcGVuZHMgd2l0aCBubyByZXNldCwgZXhjbHVkZVxuXG4gICAgaWYgKHRoaXNbdHlwZSArIFwiU3RhbGxlZERvd25sb2Fkc19cIl0gPCAxMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyXyh0eXBlICsgXCIgbG9hZGVyIHN0YWxsZWQgZG93bmxvYWQgZXhjbHVzaW9uXCIpO1xuICAgIHRoaXMucmVzZXRTZWdtZW50RG93bmxvYWRzXyh0eXBlKTtcbiAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgIG5hbWU6IFwidmhzLVwiICsgdHlwZSArIFwiLWRvd25sb2FkLWV4Y2x1c2lvblwiXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZSA9PT0gJ3N1YnRpdGxlJykge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVE9ETzogc2hvdWxkIHdlIGV4Y2x1ZGUgYXVkaW8gdHJhY2tzIHJhdGhlciB0aGFuIG1haW4gdHJhY2tzXG4gICAgLy8gd2hlbiB0eXBlIGlzIGF1ZGlvP1xuXG5cbiAgICBtcGMuYmxhY2tsaXN0Q3VycmVudFBsYXlsaXN0KHtcbiAgICAgIG1lc3NhZ2U6IFwiRXhjZXNzaXZlIFwiICsgdHlwZSArIFwiIHNlZ21lbnQgZG93bmxvYWRpbmcgZGV0ZWN0ZWQuXCJcbiAgICB9LCBJbmZpbml0eSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gZW11bGF0ZSB0aGUgXCJ3YWl0aW5nXCIgZXZlbnQgb25cbiAgICogYnJvd3NlcnMgdGhhdCBkbyBub3QgZW1pdCBpdCB3aGVuIHRoZXkgYXJlIHdhaXRpbmcgZm9yIG1vcmVcbiAgICogZGF0YSB0byBjb250aW51ZSBwbGF5YmFja1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jaGVja0N1cnJlbnRUaW1lXyA9IGZ1bmN0aW9uIGNoZWNrQ3VycmVudFRpbWVfKCkge1xuICAgIGlmICh0aGlzLnRlY2hfLnNlZWtpbmcoKSAmJiB0aGlzLmZpeGVzQmFkU2Vla3NfKCkpIHtcbiAgICAgIHRoaXMuY29uc2VjdXRpdmVVcGRhdGVzID0gMDtcbiAgICAgIHRoaXMubGFzdFJlY29yZGVkVGltZSA9IHRoaXMudGVjaF8uY3VycmVudFRpbWUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50ZWNoXy5wYXVzZWQoKSB8fCB0aGlzLnRlY2hfLnNlZWtpbmcoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50VGltZSA9IHRoaXMudGVjaF8uY3VycmVudFRpbWUoKTtcbiAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLnRlY2hfLmJ1ZmZlcmVkKCk7XG5cbiAgICBpZiAodGhpcy5sYXN0UmVjb3JkZWRUaW1lID09PSBjdXJyZW50VGltZSAmJiAoIWJ1ZmZlcmVkLmxlbmd0aCB8fCBjdXJyZW50VGltZSArIFNBRkVfVElNRV9ERUxUQSA+PSBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoIC0gMSkpKSB7XG4gICAgICAvLyBJZiBjdXJyZW50IHRpbWUgaXMgYXQgdGhlIGVuZCBvZiB0aGUgZmluYWwgYnVmZmVyZWQgcmVnaW9uLCB0aGVuIGFueSBwbGF5YmFja1xuICAgICAgLy8gc3RhbGwgaXMgbW9zdCBsaWtlbHkgY2F1c2VkIGJ5IGJ1ZmZlcmluZyBpbiBhIGxvdyBiYW5kd2lkdGggZW52aXJvbm1lbnQuIFRoZSB0ZWNoXG4gICAgICAvLyBzaG91bGQgZmlyZSBhIGB3YWl0aW5nYCBldmVudCBpbiB0aGlzIHNjZW5hcmlvLCBidXQgZHVlIHRvIGJyb3dzZXIgYW5kIHRlY2hcbiAgICAgIC8vIGluY29uc2lzdGVuY2llcy4gQ2FsbGluZyBgdGVjaFdhaXRpbmdfYCBoZXJlIGFsbG93cyB1cyB0byBzaW11bGF0ZVxuICAgICAgLy8gcmVzcG9uZGluZyB0byBhIG5hdGl2ZSBgd2FpdGluZ2AgZXZlbnQgd2hlbiB0aGUgdGVjaCBmYWlscyB0byBlbWl0IG9uZS5cbiAgICAgIHJldHVybiB0aGlzLnRlY2hXYWl0aW5nXygpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbnNlY3V0aXZlVXBkYXRlcyA+PSA1ICYmIGN1cnJlbnRUaW1lID09PSB0aGlzLmxhc3RSZWNvcmRlZFRpbWUpIHtcbiAgICAgIHRoaXMuY29uc2VjdXRpdmVVcGRhdGVzKys7XG4gICAgICB0aGlzLndhaXRpbmdfKCk7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50VGltZSA9PT0gdGhpcy5sYXN0UmVjb3JkZWRUaW1lKSB7XG4gICAgICB0aGlzLmNvbnNlY3V0aXZlVXBkYXRlcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnNlY3V0aXZlVXBkYXRlcyA9IDA7XG4gICAgICB0aGlzLmxhc3RSZWNvcmRlZFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbmNlbHMgYW55IHBlbmRpbmcgdGltZXJzIGFuZCByZXNldHMgdGhlICd0aW1ldXBkYXRlJyBtZWNoYW5pc21cbiAgICogZGVzaWduZWQgdG8gZGV0ZWN0IHRoYXQgd2UgYXJlIHN0YWxsZWRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2FuY2VsVGltZXJfID0gZnVuY3Rpb24gY2FuY2VsVGltZXJfKCkge1xuICAgIHRoaXMuY29uc2VjdXRpdmVVcGRhdGVzID0gMDtcblxuICAgIGlmICh0aGlzLnRpbWVyXykge1xuICAgICAgdGhpcy5sb2dnZXJfKCdjYW5jZWxUaW1lcl8nKTtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyXyk7XG4gICAgfVxuXG4gICAgdGhpcy50aW1lcl8gPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBGaXhlcyBzaXR1YXRpb25zIHdoZXJlIHRoZXJlJ3MgYSBiYWQgc2Vla1xuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIGFuIGFjdGlvbiB3YXMgdGFrZW4gdG8gZml4IHRoZSBzZWVrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmZpeGVzQmFkU2Vla3NfID0gZnVuY3Rpb24gZml4ZXNCYWRTZWVrc18oKSB7XG4gICAgdmFyIHNlZWtpbmcgPSB0aGlzLnRlY2hfLnNlZWtpbmcoKTtcblxuICAgIGlmICghc2Vla2luZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBzZWVrYWJsZSA9IHRoaXMuc2Vla2FibGUoKTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLnRlY2hfLmN1cnJlbnRUaW1lKCk7XG4gICAgdmFyIGlzQWZ0ZXJTZWVrYWJsZVJhbmdlID0gdGhpcy5hZnRlclNlZWthYmxlV2luZG93XyhzZWVrYWJsZSwgY3VycmVudFRpbWUsIHRoaXMubWVkaWEoKSwgdGhpcy5hbGxvd1NlZWtzV2l0aGluVW5zYWZlTGl2ZVdpbmRvdyk7XG4gICAgdmFyIHNlZWtUbztcblxuICAgIGlmIChpc0FmdGVyU2Vla2FibGVSYW5nZSkge1xuICAgICAgdmFyIHNlZWthYmxlRW5kID0gc2Vla2FibGUuZW5kKHNlZWthYmxlLmxlbmd0aCAtIDEpOyAvLyBzeW5jIHRvIGxpdmUgcG9pbnQgKGlmIFZPRCwgb3VyIHNlZWthYmxlIHdhcyB1cGRhdGVkIGFuZCB3ZSdyZSBzaW1wbHkgYWRqdXN0aW5nKVxuXG4gICAgICBzZWVrVG8gPSBzZWVrYWJsZUVuZDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5iZWZvcmVTZWVrYWJsZVdpbmRvd18oc2Vla2FibGUsIGN1cnJlbnRUaW1lKSkge1xuICAgICAgdmFyIHNlZWthYmxlU3RhcnQgPSBzZWVrYWJsZS5zdGFydCgwKTsgLy8gc3luYyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXZlIHdpbmRvd1xuICAgICAgLy8gcHJvdmlkZSBhIGJ1ZmZlciBvZiAuMSBzZWNvbmRzIHRvIGhhbmRsZSByb3VuZGluZy9pbXByZWNpc2UgbnVtYmVyc1xuXG4gICAgICBzZWVrVG8gPSBzZWVrYWJsZVN0YXJ0ICsgKCAvLyBpZiB0aGUgcGxheWxpc3QgaXMgdG9vIHNob3J0IGFuZCB0aGUgc2Vla2FibGUgcmFuZ2UgaXMgYW4gZXhhY3QgdGltZSAoY2FuXG4gICAgICAvLyBoYXBwZW4gaW4gbGl2ZSB3aXRoIGEgMyBzZWdtZW50IHBsYXlsaXN0KSwgdGhlbiBkb24ndCB1c2UgYSB0aW1lIGRlbHRhXG4gICAgICBzZWVrYWJsZVN0YXJ0ID09PSBzZWVrYWJsZS5lbmQoMCkgPyAwIDogU0FGRV9USU1FX0RFTFRBKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNlZWtUbyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubG9nZ2VyXyhcIlRyeWluZyB0byBzZWVrIG91dHNpZGUgb2Ygc2Vla2FibGUgYXQgdGltZSBcIiArIGN1cnJlbnRUaW1lICsgXCIgd2l0aCBcIiArIChcInNlZWthYmxlIHJhbmdlIFwiICsgcHJpbnRhYmxlUmFuZ2Uoc2Vla2FibGUpICsgXCIuIFNlZWtpbmcgdG8gXCIpICsgKHNlZWtUbyArIFwiLlwiKSk7XG4gICAgICB0aGlzLnRlY2hfLnNldEN1cnJlbnRUaW1lKHNlZWtUbyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLnRlY2hfLmJ1ZmZlcmVkKCk7XG5cbiAgICBpZiAoY2xvc2VUb0J1ZmZlcmVkQ29udGVudCh7XG4gICAgICBidWZmZXJlZDogYnVmZmVyZWQsXG4gICAgICB0YXJnZXREdXJhdGlvbjogdGhpcy5tZWRpYSgpLnRhcmdldER1cmF0aW9uLFxuICAgICAgY3VycmVudFRpbWU6IGN1cnJlbnRUaW1lXG4gICAgfSkpIHtcbiAgICAgIHNlZWtUbyA9IGJ1ZmZlcmVkLnN0YXJ0KDApICsgU0FGRV9USU1FX0RFTFRBO1xuICAgICAgdGhpcy5sb2dnZXJfKFwiQnVmZmVyZWQgcmVnaW9uIHN0YXJ0cyAoXCIgKyBidWZmZXJlZC5zdGFydCgwKSArIFwiKSBcIiArIChcIiBqdXN0IGJleW9uZCBzZWVrIHBvaW50IChcIiArIGN1cnJlbnRUaW1lICsgXCIpLiBTZWVraW5nIHRvIFwiICsgc2Vla1RvICsgXCIuXCIpKTtcbiAgICAgIHRoaXMudGVjaF8uc2V0Q3VycmVudFRpbWUoc2Vla1RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlciBmb3Igc2l0dWF0aW9ucyB3aGVuIHdlIGRldGVybWluZSB0aGUgcGxheWVyIGlzIHdhaXRpbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLndhaXRpbmdfID0gZnVuY3Rpb24gd2FpdGluZ18oKSB7XG4gICAgaWYgKHRoaXMudGVjaFdhaXRpbmdfKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEFsbCB0ZWNoIHdhaXRpbmcgY2hlY2tzIGZhaWxlZC4gVXNlIGxhc3QgcmVzb3J0IGNvcnJlY3Rpb25cblxuXG4gICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy50ZWNoXy5jdXJyZW50VGltZSgpO1xuICAgIHZhciBidWZmZXJlZCA9IHRoaXMudGVjaF8uYnVmZmVyZWQoKTtcbiAgICB2YXIgY3VycmVudFJhbmdlID0gZmluZFJhbmdlKGJ1ZmZlcmVkLCBjdXJyZW50VGltZSk7IC8vIFNvbWV0aW1lcyB0aGUgcGxheWVyIGNhbiBzdGFsbCBmb3IgdW5rbm93biByZWFzb25zIHdpdGhpbiBhIGNvbnRpZ3VvdXMgYnVmZmVyZWRcbiAgICAvLyByZWdpb24gd2l0aCBubyBpbmRpY2F0aW9uIHRoYXQgYW55dGhpbmcgaXMgYW1pc3MgKHNlZW4gaW4gRmlyZWZveCkuIFNlZWtpbmcgdG9cbiAgICAvLyBjdXJyZW50VGltZSBpcyB1c3VhbGx5IGVub3VnaCB0byBraWNrc3RhcnQgdGhlIHBsYXllci4gVGhpcyBjaGVja3MgdGhhdCB0aGUgcGxheWVyXG4gICAgLy8gaXMgY3VycmVudGx5IHdpdGhpbiBhIGJ1ZmZlcmVkIHJlZ2lvbiBiZWZvcmUgYXR0ZW1wdGluZyBhIGNvcnJlY3RpdmUgc2Vlay5cbiAgICAvLyBDaHJvbWUgZG9lcyBub3QgYXBwZWFyIHRvIGNvbnRpbnVlIGB0aW1ldXBkYXRlYCBldmVudHMgYWZ0ZXIgYSBgd2FpdGluZ2AgZXZlbnRcbiAgICAvLyB1bnRpbCB0aGVyZSBpcyB+IDMgc2Vjb25kcyBvZiBmb3J3YXJkIGJ1ZmZlciBhdmFpbGFibGUuIFBsYXliYWNrV2F0Y2hlciBzaG91bGQgYWxzb1xuICAgIC8vIG1ha2Ugc3VyZSB0aGVyZSBpcyB+MyBzZWNvbmRzIG9mIGZvcndhcmQgYnVmZmVyIGJlZm9yZSB0YWtpbmcgYW55IGNvcnJlY3RpdmUgYWN0aW9uXG4gICAgLy8gdG8gYXZvaWQgdHJpZ2dlcmluZyBhbiBgdW5rbm93bndhaXRpbmdgIGV2ZW50IHdoZW4gdGhlIG5ldHdvcmsgaXMgc2xvdy5cblxuICAgIGlmIChjdXJyZW50UmFuZ2UubGVuZ3RoICYmIGN1cnJlbnRUaW1lICsgMyA8PSBjdXJyZW50UmFuZ2UuZW5kKDApKSB7XG4gICAgICB0aGlzLmNhbmNlbFRpbWVyXygpO1xuICAgICAgdGhpcy50ZWNoXy5zZXRDdXJyZW50VGltZShjdXJyZW50VGltZSk7XG4gICAgICB0aGlzLmxvZ2dlcl8oXCJTdG9wcGVkIGF0IFwiICsgY3VycmVudFRpbWUgKyBcIiB3aGlsZSBpbnNpZGUgYSBidWZmZXJlZCByZWdpb24gXCIgKyAoXCJbXCIgKyBjdXJyZW50UmFuZ2Uuc3RhcnQoMCkgKyBcIiAtPiBcIiArIGN1cnJlbnRSYW5nZS5lbmQoMCkgKyBcIl0uIEF0dGVtcHRpbmcgdG8gcmVzdW1lIFwiKSArICdwbGF5YmFjayBieSBzZWVraW5nIHRvIHRoZSBjdXJyZW50IHRpbWUuJyk7IC8vIHVua25vd24gd2FpdGluZyBjb3JyZWN0aW9ucyBtYXkgYmUgdXNlZnVsIGZvciBtb25pdG9yaW5nIFFvU1xuXG4gICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAndmhzLXVua25vd24td2FpdGluZydcbiAgICAgIH0pO1xuICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgbmFtZTogJ2hscy11bmtub3duLXdhaXRpbmcnXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIHNpdHVhdGlvbnMgd2hlbiB0aGUgdGVjaCBmaXJlcyBhIGB3YWl0aW5nYCBldmVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiAgICAgICAgIFRydWUgaWYgYW4gYWN0aW9uIChvciBub25lKSB3YXMgbmVlZGVkIHRvIGNvcnJlY3QgdGhlIHdhaXRpbmcuIEZhbHNlIGlmIG5vXG4gICAqICAgICAgICAgY2hlY2tzIHBhc3NlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50ZWNoV2FpdGluZ18gPSBmdW5jdGlvbiB0ZWNoV2FpdGluZ18oKSB7XG4gICAgdmFyIHNlZWthYmxlID0gdGhpcy5zZWVrYWJsZSgpO1xuICAgIHZhciBjdXJyZW50VGltZSA9IHRoaXMudGVjaF8uY3VycmVudFRpbWUoKTtcblxuICAgIGlmICh0aGlzLnRlY2hfLnNlZWtpbmcoKSAmJiB0aGlzLmZpeGVzQmFkU2Vla3NfKCkpIHtcbiAgICAgIC8vIFRlY2ggaXMgc2Vla2luZyBvciBiYWQgc2VlayBmaXhlZCwgbm8gYWN0aW9uIG5lZWRlZFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGVjaF8uc2Vla2luZygpIHx8IHRoaXMudGltZXJfICE9PSBudWxsKSB7XG4gICAgICAvLyBUZWNoIGlzIHNlZWtpbmcgb3IgYWxyZWFkeSB3YWl0aW5nIG9uIGFub3RoZXIgYWN0aW9uLCBubyBhY3Rpb24gbmVlZGVkXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5iZWZvcmVTZWVrYWJsZVdpbmRvd18oc2Vla2FibGUsIGN1cnJlbnRUaW1lKSkge1xuICAgICAgdmFyIGxpdmVQb2ludCA9IHNlZWthYmxlLmVuZChzZWVrYWJsZS5sZW5ndGggLSAxKTtcbiAgICAgIHRoaXMubG9nZ2VyXyhcIkZlbGwgb3V0IG9mIGxpdmUgd2luZG93IGF0IHRpbWUgXCIgKyBjdXJyZW50VGltZSArIFwiLiBTZWVraW5nIHRvIFwiICsgKFwibGl2ZSBwb2ludCAoc2Vla2FibGUgZW5kKSBcIiArIGxpdmVQb2ludCkpO1xuICAgICAgdGhpcy5jYW5jZWxUaW1lcl8oKTtcbiAgICAgIHRoaXMudGVjaF8uc2V0Q3VycmVudFRpbWUobGl2ZVBvaW50KTsgLy8gbGl2ZSB3aW5kb3cgcmVzeW5jcyBtYXkgYmUgdXNlZnVsIGZvciBtb25pdG9yaW5nIFFvU1xuXG4gICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAndmhzLWxpdmUtcmVzeW5jJ1xuICAgICAgfSk7XG4gICAgICB0aGlzLnRlY2hfLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAnaGxzLWxpdmUtcmVzeW5jJ1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlVXBkYXRlciA9IHRoaXMudGVjaF8udmhzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8uc291cmNlVXBkYXRlcl87XG4gICAgdmFyIGJ1ZmZlcmVkID0gdGhpcy50ZWNoXy5idWZmZXJlZCgpO1xuICAgIHZhciB2aWRlb1VuZGVyZmxvdyA9IHRoaXMudmlkZW9VbmRlcmZsb3dfKHtcbiAgICAgIGF1ZGlvQnVmZmVyZWQ6IHNvdXJjZVVwZGF0ZXIuYXVkaW9CdWZmZXJlZCgpLFxuICAgICAgdmlkZW9CdWZmZXJlZDogc291cmNlVXBkYXRlci52aWRlb0J1ZmZlcmVkKCksXG4gICAgICBjdXJyZW50VGltZTogY3VycmVudFRpbWVcbiAgICB9KTtcblxuICAgIGlmICh2aWRlb1VuZGVyZmxvdykge1xuICAgICAgLy8gRXZlbiB0aG91Z2ggdGhlIHZpZGVvIHVuZGVyZmxvd2VkIGFuZCB3YXMgc3R1Y2sgaW4gYSBnYXAsIHRoZSBhdWRpbyBvdmVycGxheWVkXG4gICAgICAvLyB0aGUgZ2FwLCBsZWFkaW5nIGN1cnJlbnRUaW1lIGludG8gYSBidWZmZXJlZCByYW5nZS4gU2Vla2luZyB0byBjdXJyZW50VGltZVxuICAgICAgLy8gYWxsb3dzIHRoZSB2aWRlbyB0byBjYXRjaCB1cCB0byB0aGUgYXVkaW8gcG9zaXRpb24gd2l0aG91dCBsb3NpbmcgYW55IGF1ZGlvXG4gICAgICAvLyAob25seSBzdWZmZXJpbmcgfjMgc2Vjb25kcyBvZiBmcm96ZW4gdmlkZW8gYW5kIGEgcGF1c2UgaW4gYXVkaW8gcGxheWJhY2spLlxuICAgICAgdGhpcy5jYW5jZWxUaW1lcl8oKTtcbiAgICAgIHRoaXMudGVjaF8uc2V0Q3VycmVudFRpbWUoY3VycmVudFRpbWUpOyAvLyB2aWRlbyB1bmRlcmZsb3cgbWF5IGJlIHVzZWZ1bCBmb3IgbW9uaXRvcmluZyBRb1NcblxuICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgbmFtZTogJ3Zocy12aWRlby11bmRlcmZsb3cnXG4gICAgICB9KTtcbiAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgIG5hbWU6ICdobHMtdmlkZW8tdW5kZXJmbG93J1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFJhbmdlID0gZmluZE5leHRSYW5nZShidWZmZXJlZCwgY3VycmVudFRpbWUpOyAvLyBjaGVjayBmb3IgZ2FwXG5cbiAgICBpZiAobmV4dFJhbmdlLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBkaWZmZXJlbmNlID0gbmV4dFJhbmdlLnN0YXJ0KDApIC0gY3VycmVudFRpbWU7XG4gICAgICB0aGlzLmxvZ2dlcl8oXCJTdG9wcGVkIGF0IFwiICsgY3VycmVudFRpbWUgKyBcIiwgc2V0dGluZyB0aW1lciBmb3IgXCIgKyBkaWZmZXJlbmNlICsgXCIsIHNlZWtpbmcgXCIgKyAoXCJ0byBcIiArIG5leHRSYW5nZS5zdGFydCgwKSkpO1xuICAgICAgdGhpcy5jYW5jZWxUaW1lcl8oKTtcbiAgICAgIHRoaXMudGltZXJfID0gc2V0VGltZW91dCh0aGlzLnNraXBUaGVHYXBfLmJpbmQodGhpcyksIGRpZmZlcmVuY2UgKiAxMDAwLCBjdXJyZW50VGltZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIEFsbCBjaGVja3MgZmFpbGVkLiBSZXR1cm5pbmcgZmFsc2UgdG8gaW5kaWNhdGUgZmFpbHVyZSB0byBjb3JyZWN0IHdhaXRpbmdcblxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5hZnRlclNlZWthYmxlV2luZG93XyA9IGZ1bmN0aW9uIGFmdGVyU2Vla2FibGVXaW5kb3dfKHNlZWthYmxlLCBjdXJyZW50VGltZSwgcGxheWxpc3QsIGFsbG93U2Vla3NXaXRoaW5VbnNhZmVMaXZlV2luZG93KSB7XG4gICAgaWYgKGFsbG93U2Vla3NXaXRoaW5VbnNhZmVMaXZlV2luZG93ID09PSB2b2lkIDApIHtcbiAgICAgIGFsbG93U2Vla3NXaXRoaW5VbnNhZmVMaXZlV2luZG93ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzZWVrYWJsZS5sZW5ndGgpIHtcbiAgICAgIC8vIHdlIGNhbid0IG1ha2UgYSBzb2xpZCBjYXNlIGlmIHRoZXJlJ3Mgbm8gc2Vla2FibGUsIGRlZmF1bHQgdG8gZmFsc2VcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgYWxsb3dlZEVuZCA9IHNlZWthYmxlLmVuZChzZWVrYWJsZS5sZW5ndGggLSAxKSArIFNBRkVfVElNRV9ERUxUQTtcbiAgICB2YXIgaXNMaXZlID0gIXBsYXlsaXN0LmVuZExpc3Q7XG5cbiAgICBpZiAoaXNMaXZlICYmIGFsbG93U2Vla3NXaXRoaW5VbnNhZmVMaXZlV2luZG93KSB7XG4gICAgICBhbGxvd2VkRW5kID0gc2Vla2FibGUuZW5kKHNlZWthYmxlLmxlbmd0aCAtIDEpICsgcGxheWxpc3QudGFyZ2V0RHVyYXRpb24gKiAzO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50VGltZSA+IGFsbG93ZWRFbmQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uYmVmb3JlU2Vla2FibGVXaW5kb3dfID0gZnVuY3Rpb24gYmVmb3JlU2Vla2FibGVXaW5kb3dfKHNlZWthYmxlLCBjdXJyZW50VGltZSkge1xuICAgIGlmIChzZWVrYWJsZS5sZW5ndGggJiYgLy8gY2FuJ3QgZmFsbCBiZWZvcmUgMCBhbmQgMCBzZWVrYWJsZSBzdGFydCBpZGVudGlmaWVzIFZPRCBzdHJlYW1cbiAgICBzZWVrYWJsZS5zdGFydCgwKSA+IDAgJiYgY3VycmVudFRpbWUgPCBzZWVrYWJsZS5zdGFydCgwKSAtIFNBRkVfVElNRV9ERUxUQSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by52aWRlb1VuZGVyZmxvd18gPSBmdW5jdGlvbiB2aWRlb1VuZGVyZmxvd18oX3JlZjIpIHtcbiAgICB2YXIgdmlkZW9CdWZmZXJlZCA9IF9yZWYyLnZpZGVvQnVmZmVyZWQsXG4gICAgICAgIGF1ZGlvQnVmZmVyZWQgPSBfcmVmMi5hdWRpb0J1ZmZlcmVkLFxuICAgICAgICBjdXJyZW50VGltZSA9IF9yZWYyLmN1cnJlbnRUaW1lOyAvLyBhdWRpbyBvbmx5IGNvbnRlbnQgd2lsbCBub3QgaGF2ZSB2aWRlbyB1bmRlcmZsb3cgOilcblxuICAgIGlmICghdmlkZW9CdWZmZXJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBnYXA7IC8vIGZpbmQgYSBnYXAgaW4gZGVtdXhlZCBjb250ZW50LlxuXG4gICAgaWYgKHZpZGVvQnVmZmVyZWQubGVuZ3RoICYmIGF1ZGlvQnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICAvLyBpbiBDaHJvbWUgYXVkaW8gd2lsbCBjb250aW51ZSB0byBwbGF5IGZvciB+M3Mgd2hlbiB3ZSBydW4gb3V0IG9mIHZpZGVvXG4gICAgICAvLyBzbyB3ZSBoYXZlIHRvIGNoZWNrIHRoYXQgdGhlIHZpZGVvIGJ1ZmZlciBkaWQgaGF2ZSBzb21lIGJ1ZmZlciBpbiB0aGVcbiAgICAgIC8vIHBhc3QuXG4gICAgICB2YXIgbGFzdFZpZGVvUmFuZ2UgPSBmaW5kUmFuZ2UodmlkZW9CdWZmZXJlZCwgY3VycmVudFRpbWUgLSAzKTtcbiAgICAgIHZhciB2aWRlb1JhbmdlID0gZmluZFJhbmdlKHZpZGVvQnVmZmVyZWQsIGN1cnJlbnRUaW1lKTtcbiAgICAgIHZhciBhdWRpb1JhbmdlID0gZmluZFJhbmdlKGF1ZGlvQnVmZmVyZWQsIGN1cnJlbnRUaW1lKTtcblxuICAgICAgaWYgKGF1ZGlvUmFuZ2UubGVuZ3RoICYmICF2aWRlb1JhbmdlLmxlbmd0aCAmJiBsYXN0VmlkZW9SYW5nZS5sZW5ndGgpIHtcbiAgICAgICAgZ2FwID0ge1xuICAgICAgICAgIHN0YXJ0OiBsYXN0VmlkZW9SYW5nZS5lbmQoMCksXG4gICAgICAgICAgZW5kOiBhdWRpb1JhbmdlLmVuZCgwKVxuICAgICAgICB9O1xuICAgICAgfSAvLyBmaW5kIGEgZ2FwIGluIG11eGVkIGNvbnRlbnQuXG5cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5leHRSYW5nZSA9IGZpbmROZXh0UmFuZ2UodmlkZW9CdWZmZXJlZCwgY3VycmVudFRpbWUpOyAvLyBFdmVuIGlmIHRoZXJlIGlzIG5vIGF2YWlsYWJsZSBuZXh0IHJhbmdlLCB0aGVyZSBpcyBzdGlsbCBhIHBvc3NpYmlsaXR5IHdlIGFyZVxuICAgICAgLy8gc3R1Y2sgaW4gYSBnYXAgZHVlIHRvIHZpZGVvIHVuZGVyZmxvdy5cblxuICAgICAgaWYgKCFuZXh0UmFuZ2UubGVuZ3RoKSB7XG4gICAgICAgIGdhcCA9IHRoaXMuZ2FwRnJvbVZpZGVvVW5kZXJmbG93Xyh2aWRlb0J1ZmZlcmVkLCBjdXJyZW50VGltZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGdhcCkge1xuICAgICAgdGhpcy5sb2dnZXJfKFwiRW5jb3VudGVyZWQgYSBnYXAgaW4gdmlkZW8gZnJvbSBcIiArIGdhcC5zdGFydCArIFwiIHRvIFwiICsgZ2FwLmVuZCArIFwiLiBcIiArIChcIlNlZWtpbmcgdG8gY3VycmVudCB0aW1lIFwiICsgY3VycmVudFRpbWUpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogVGltZXIgY2FsbGJhY2suIElmIHBsYXliYWNrIHN0aWxsIGhhcyBub3QgcHJvY2VlZGVkLCB0aGVuIHdlIHNlZWtcbiAgICogdG8gdGhlIHN0YXJ0IG9mIHRoZSBuZXh0IGJ1ZmZlcmVkIHJlZ2lvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2tpcFRoZUdhcF8gPSBmdW5jdGlvbiBza2lwVGhlR2FwXyhzY2hlZHVsZWRDdXJyZW50VGltZSkge1xuICAgIHZhciBidWZmZXJlZCA9IHRoaXMudGVjaF8uYnVmZmVyZWQoKTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLnRlY2hfLmN1cnJlbnRUaW1lKCk7XG4gICAgdmFyIG5leHRSYW5nZSA9IGZpbmROZXh0UmFuZ2UoYnVmZmVyZWQsIGN1cnJlbnRUaW1lKTtcbiAgICB0aGlzLmNhbmNlbFRpbWVyXygpO1xuXG4gICAgaWYgKG5leHRSYW5nZS5sZW5ndGggPT09IDAgfHwgY3VycmVudFRpbWUgIT09IHNjaGVkdWxlZEN1cnJlbnRUaW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXJfKCdza2lwVGhlR2FwXzonLCAnY3VycmVudFRpbWU6JywgY3VycmVudFRpbWUsICdzY2hlZHVsZWQgY3VycmVudFRpbWU6Jywgc2NoZWR1bGVkQ3VycmVudFRpbWUsICduZXh0UmFuZ2Ugc3RhcnQ6JywgbmV4dFJhbmdlLnN0YXJ0KDApKTsgLy8gb25seSBzZWVrIGlmIHdlIHN0aWxsIGhhdmUgbm90IHBsYXllZFxuXG4gICAgdGhpcy50ZWNoXy5zZXRDdXJyZW50VGltZShuZXh0UmFuZ2Uuc3RhcnQoMCkgKyBUSU1FX0ZVREdFX0ZBQ1RPUik7XG4gICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICBuYW1lOiAndmhzLWdhcC1za2lwJ1xuICAgIH0pO1xuICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgbmFtZTogJ2hscy1nYXAtc2tpcCdcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2FwRnJvbVZpZGVvVW5kZXJmbG93XyA9IGZ1bmN0aW9uIGdhcEZyb21WaWRlb1VuZGVyZmxvd18oYnVmZmVyZWQsIGN1cnJlbnRUaW1lKSB7XG4gICAgLy8gQXQgbGVhc3QgaW4gQ2hyb21lLCBpZiB0aGVyZSBpcyBhIGdhcCBpbiB0aGUgdmlkZW8gYnVmZmVyLCB0aGUgYXVkaW8gd2lsbCBjb250aW51ZVxuICAgIC8vIHBsYXlpbmcgZm9yIH4zIHNlY29uZHMgYWZ0ZXIgdGhlIHZpZGVvIGdhcCBzdGFydHMuIFRoaXMgaXMgZG9uZSB0byBhY2NvdW50IGZvclxuICAgIC8vIHZpZGVvIGJ1ZmZlciB1bmRlcmZsb3cvdW5kZXJydW4gKG5vdGUgdGhhdCB0aGlzIGlzIG5vdCBkb25lIHdoZW4gdGhlcmUgaXMgYXVkaW9cbiAgICAvLyBidWZmZXIgdW5kZXJmbG93L3VuZGVycnVuIC0tIGluIHRoYXQgY2FzZSB0aGUgdmlkZW8gd2lsbCBzdG9wIGFzIHNvb24gYXMgaXRcbiAgICAvLyBlbmNvdW50ZXJzIHRoZSBnYXAsIGFzIGF1ZGlvIHN0YWxscyBhcmUgbW9yZSBub3RpY2VhYmxlL2phcnJpbmcgdG8gYSB1c2VyIHRoYW5cbiAgICAvLyB2aWRlbyBzdGFsbHMpLiBUaGUgcGxheWVyJ3MgdGltZSB3aWxsIHJlZmxlY3QgdGhlIHBsYXl0aHJvdWdoIG9mIGF1ZGlvLCBzbyB0aGVcbiAgICAvLyB0aW1lIHdpbGwgYXBwZWFyIGFzIGlmIHdlIGFyZSBpbiBhIGJ1ZmZlcmVkIHJlZ2lvbiwgZXZlbiBpZiB3ZSBhcmUgc3R1Y2sgaW4gYVxuICAgIC8vIFwiZ2FwLlwiXG4gICAgLy9cbiAgICAvLyBFeGFtcGxlOlxuICAgIC8vIHZpZGVvIGJ1ZmZlcjogICAwID0+IDEwLjEsIDEwLjIgPT4gMjBcbiAgICAvLyBhdWRpbyBidWZmZXI6ICAgMCA9PiAyMFxuICAgIC8vIG92ZXJhbGwgYnVmZmVyOiAwID0+IDEwLjEsIDEwLjIgPT4gMjBcbiAgICAvLyBjdXJyZW50IHRpbWU6IDEzXG4gICAgLy9cbiAgICAvLyBDaHJvbWUncyB2aWRlbyBmcm96ZSBhdCAxMCBzZWNvbmRzLCB3aGVyZSB0aGUgdmlkZW8gYnVmZmVyIGVuY291bnRlcmVkIHRoZSBnYXAsXG4gICAgLy8gaG93ZXZlciwgdGhlIGF1ZGlvIGNvbnRpbnVlZCBwbGF5aW5nIHVudGlsIGl0IHJlYWNoZWQgfjMgc2Vjb25kcyBwYXN0IHRoZSBnYXBcbiAgICAvLyAoMTMgc2Vjb25kcyksIGF0IHdoaWNoIHBvaW50IGl0IHN0b3BzIGFzIHdlbGwuIFNpbmNlIGN1cnJlbnQgdGltZSBpcyBwYXN0IHRoZVxuICAgIC8vIGdhcCwgZmluZE5leHRSYW5nZSB3aWxsIHJldHVybiBubyByYW5nZXMuXG4gICAgLy9cbiAgICAvLyBUbyBjaGVjayBmb3IgdGhpcyBpc3N1ZSwgd2Ugc2VlIGlmIHRoZXJlIGlzIGEgZ2FwIHRoYXQgc3RhcnRzIHNvbWV3aGVyZSB3aXRoaW5cbiAgICAvLyBhIDMgc2Vjb25kIHJhbmdlICgzIHNlY29uZHMgKy8tIDEgc2Vjb25kKSBiYWNrIGZyb20gb3VyIGN1cnJlbnQgdGltZS5cbiAgICB2YXIgZ2FwcyA9IGZpbmRHYXBzKGJ1ZmZlcmVkKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2Fwcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHN0YXJ0ID0gZ2Fwcy5zdGFydChpKTtcbiAgICAgIHZhciBlbmQgPSBnYXBzLmVuZChpKTsgLy8gZ2FwIGlzIHN0YXJ0cyBubyBtb3JlIHRoYW4gNCBzZWNvbmRzIGJhY2tcblxuICAgICAgaWYgKGN1cnJlbnRUaW1lIC0gc3RhcnQgPCA0ICYmIGN1cnJlbnRUaW1lIC0gc3RhcnQgPiAyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgIGVuZDogZW5kXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFBsYXliYWNrV2F0Y2hlcjtcbn0oKTtcblxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBlcnJvckludGVydmFsOiAzMCxcbiAgZ2V0U291cmNlOiBmdW5jdGlvbiBnZXRTb3VyY2UobmV4dCkge1xuICAgIHZhciB0ZWNoID0gdGhpcy50ZWNoKHtcbiAgICAgIElXaWxsTm90VXNlVGhpc0luUGx1Z2luczogdHJ1ZVxuICAgIH0pO1xuICAgIHZhciBzb3VyY2VPYmogPSB0ZWNoLmN1cnJlbnRTb3VyY2VfIHx8IHRoaXMuY3VycmVudFNvdXJjZSgpO1xuICAgIHJldHVybiBuZXh0KHNvdXJjZU9iaik7XG4gIH1cbn07XG4vKipcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIHRoZSBwbHVnaW5cbiAqXG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyIGEgcmVmZXJlbmNlIHRvIGEgdmlkZW9qcyBQbGF5ZXIgaW5zdGFuY2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gYW4gb2JqZWN0IHdpdGggcGx1Z2luIG9wdGlvbnNcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGluaXRQbHVnaW4gPSBmdW5jdGlvbiBpbml0UGx1Z2luKHBsYXllciwgb3B0aW9ucykge1xuICB2YXIgbGFzdENhbGxlZCA9IDA7XG4gIHZhciBzZWVrVG8gPSAwO1xuICB2YXIgbG9jYWxPcHRpb25zID0gdmlkZW9qcyQxLm1lcmdlT3B0aW9ucyhkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gIHBsYXllci5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgcGxheWVyLnRyaWdnZXIoe1xuICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgIG5hbWU6ICd2aHMtZXJyb3ItcmVsb2FkLWluaXRpYWxpemVkJ1xuICAgIH0pO1xuICAgIHBsYXllci50cmlnZ2VyKHtcbiAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICBuYW1lOiAnaGxzLWVycm9yLXJlbG9hZC1pbml0aWFsaXplZCdcbiAgICB9KTtcbiAgfSk7XG4gIC8qKlxuICAgKiBQbGF5ZXIgbW9kaWZpY2F0aW9ucyB0byBwZXJmb3JtIHRoYXQgbXVzdCB3YWl0IHVudGlsIGBsb2FkZWRtZXRhZGF0YWBcbiAgICogaGFzIGJlZW4gdHJpZ2dlcmVkXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHZhciBsb2FkZWRNZXRhZGF0YUhhbmRsZXIgPSBmdW5jdGlvbiBsb2FkZWRNZXRhZGF0YUhhbmRsZXIoKSB7XG4gICAgaWYgKHNlZWtUbykge1xuICAgICAgcGxheWVyLmN1cnJlbnRUaW1lKHNlZWtUbyk7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogU2V0IHRoZSBzb3VyY2Ugb24gdGhlIHBsYXllciBlbGVtZW50LCBwbGF5LCBhbmQgc2VlayBpZiBuZWNlc3NhcnlcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBBbiBvYmplY3Qgc3BlY2lmeWluZyB0aGUgc291cmNlIHVybCBhbmQgbWltZS10eXBlIHRvIHBsYXlcbiAgICogQHByaXZhdGVcbiAgICovXG5cblxuICB2YXIgc2V0U291cmNlID0gZnVuY3Rpb24gc2V0U291cmNlKHNvdXJjZU9iaikge1xuICAgIGlmIChzb3VyY2VPYmogPT09IG51bGwgfHwgc291cmNlT2JqID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWVrVG8gPSBwbGF5ZXIuZHVyYXRpb24oKSAhPT0gSW5maW5pdHkgJiYgcGxheWVyLmN1cnJlbnRUaW1lKCkgfHwgMDtcbiAgICBwbGF5ZXIub25lKCdsb2FkZWRtZXRhZGF0YScsIGxvYWRlZE1ldGFkYXRhSGFuZGxlcik7XG4gICAgcGxheWVyLnNyYyhzb3VyY2VPYmopO1xuICAgIHBsYXllci50cmlnZ2VyKHtcbiAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICBuYW1lOiAndmhzLWVycm9yLXJlbG9hZCdcbiAgICB9KTtcbiAgICBwbGF5ZXIudHJpZ2dlcih7XG4gICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgbmFtZTogJ2hscy1lcnJvci1yZWxvYWQnXG4gICAgfSk7XG4gICAgcGxheWVyLnBsYXkoKTtcbiAgfTtcbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gZ2V0IGEgc291cmNlIGZyb20gZWl0aGVyIHRoZSBidWlsdC1pbiBnZXRTb3VyY2UgZnVuY3Rpb25cbiAgICogb3IgYSBjdXN0b20gZnVuY3Rpb24gcHJvdmlkZWQgdmlhIHRoZSBvcHRpb25zXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgdmFyIGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIGVycm9ySGFuZGxlcigpIHtcbiAgICAvLyBEbyBub3QgYXR0ZW1wdCB0byByZWxvYWQgdGhlIHNvdXJjZSBpZiBhIHNvdXJjZS1yZWxvYWQgb2NjdXJyZWQgYmVmb3JlXG4gICAgLy8gJ2Vycm9ySW50ZXJ2YWwnIHRpbWUgaGFzIGVsYXBzZWQgc2luY2UgdGhlIGxhc3Qgc291cmNlLXJlbG9hZFxuICAgIGlmIChEYXRlLm5vdygpIC0gbGFzdENhbGxlZCA8IGxvY2FsT3B0aW9ucy5lcnJvckludGVydmFsICogMTAwMCkge1xuICAgICAgcGxheWVyLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAndmhzLWVycm9yLXJlbG9hZC1jYW5jZWxlZCdcbiAgICAgIH0pO1xuICAgICAgcGxheWVyLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICBuYW1lOiAnaGxzLWVycm9yLXJlbG9hZC1jYW5jZWxlZCdcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghbG9jYWxPcHRpb25zLmdldFNvdXJjZSB8fCB0eXBlb2YgbG9jYWxPcHRpb25zLmdldFNvdXJjZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmlkZW9qcyQxLmxvZy5lcnJvcignRVJST1I6IHJlbG9hZFNvdXJjZU9uRXJyb3IgLSBUaGUgb3B0aW9uIGdldFNvdXJjZSBtdXN0IGJlIGEgZnVuY3Rpb24hJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGFzdENhbGxlZCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIGxvY2FsT3B0aW9ucy5nZXRTb3VyY2UuY2FsbChwbGF5ZXIsIHNldFNvdXJjZSk7XG4gIH07XG4gIC8qKlxuICAgKiBVbmJpbmQgYW55IGV2ZW50IGhhbmRsZXJzIHRoYXQgd2VyZSBib3VuZCBieSB0aGUgcGx1Z2luXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgdmFyIGNsZWFudXBFdmVudHMgPSBmdW5jdGlvbiBjbGVhbnVwRXZlbnRzKCkge1xuICAgIHBsYXllci5vZmYoJ2xvYWRlZG1ldGFkYXRhJywgbG9hZGVkTWV0YWRhdGFIYW5kbGVyKTtcbiAgICBwbGF5ZXIub2ZmKCdlcnJvcicsIGVycm9ySGFuZGxlcik7XG4gICAgcGxheWVyLm9mZignZGlzcG9zZScsIGNsZWFudXBFdmVudHMpO1xuICB9O1xuICAvKipcbiAgICogQ2xlYW51cCBiZWZvcmUgcmUtaW5pdGlhbGl6aW5nIHRoZSBwbHVnaW5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtuZXdPcHRpb25zXSBhbiBvYmplY3Qgd2l0aCBwbHVnaW4gb3B0aW9uc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIHZhciByZWluaXRQbHVnaW4gPSBmdW5jdGlvbiByZWluaXRQbHVnaW4obmV3T3B0aW9ucykge1xuICAgIGNsZWFudXBFdmVudHMoKTtcbiAgICBpbml0UGx1Z2luKHBsYXllciwgbmV3T3B0aW9ucyk7XG4gIH07XG5cbiAgcGxheWVyLm9uKCdlcnJvcicsIGVycm9ySGFuZGxlcik7XG4gIHBsYXllci5vbignZGlzcG9zZScsIGNsZWFudXBFdmVudHMpOyAvLyBPdmVyd3JpdGUgdGhlIHBsdWdpbiBmdW5jdGlvbiBzbyB0aGF0IHdlIGNhbiBjb3JyZWN0bHkgY2xlYW51cCBiZWZvcmVcbiAgLy8gaW5pdGlhbGl6aW5nIHRoZSBwbHVnaW5cblxuICBwbGF5ZXIucmVsb2FkU291cmNlT25FcnJvciA9IHJlaW5pdFBsdWdpbjtcbn07XG4vKipcbiAqIFJlbG9hZCB0aGUgc291cmNlIHdoZW4gYW4gZXJyb3IgaXMgZGV0ZWN0ZWQgYXMgbG9uZyBhcyB0aGVyZVxuICogd2Fzbid0IGFuIGVycm9yIHByZXZpb3VzbHkgd2l0aGluIHRoZSBsYXN0IDMwIHNlY29uZHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIGFuIG9iamVjdCB3aXRoIHBsdWdpbiBvcHRpb25zXG4gKi9cblxuXG52YXIgcmVsb2FkU291cmNlT25FcnJvciA9IGZ1bmN0aW9uIHJlbG9hZFNvdXJjZU9uRXJyb3Iob3B0aW9ucykge1xuICBpbml0UGx1Z2luKHRoaXMsIG9wdGlvbnMpO1xufTsgLy8ga2VlcCB0aGVzZSBhdCB0aGUgYm90dG9tIHRoZXkgYXJlIHJlcGxhY2VkIGF0IGJ1aWxkIHRpbWVcbi8vIGJlY2F1c2Ugd2VicGFjayBhbmQgcm9sbHVwIHdpdGhvdXQgcGx1Z2lucyBkbyBub3Qgc3VwcG9ydCBqc29uXG4vLyBhbmQgd2UgZG8gbm90IHdhbnQgdG8gYnJlYWsgb3VyIHVzZXJzXG5cblxudmFyIHZoc1ZlcnNpb24gPSAnMi4yLjQnO1xudmFyIG11eFZlcnNpb24gPSAnNS42LjcnO1xudmFyIG1wZFZlcnNpb24gPSAnMC4xNC4wJztcbnZhciBtM3U4VmVyc2lvbiA9ICc0LjUuMCc7XG52YXIgYWVzVmVyc2lvbiA9ICczLjEuMCc7XG52YXIgVmhzJDEgPSB7XG4gIFBsYXlsaXN0TG9hZGVyOiBQbGF5bGlzdExvYWRlcixcbiAgUGxheWxpc3Q6IFBsYXlsaXN0LFxuICB1dGlsczogdXRpbHMsXG4gIFNUQU5EQVJEX1BMQVlMSVNUX1NFTEVDVE9SOiBsYXN0QmFuZHdpZHRoU2VsZWN0b3IsXG4gIElOSVRJQUxfUExBWUxJU1RfU0VMRUNUT1I6IGxvd2VzdEJpdHJhdGVDb21wYXRpYmxlVmFyaWFudFNlbGVjdG9yLFxuICBjb21wYXJlUGxheWxpc3RCYW5kd2lkdGg6IGNvbXBhcmVQbGF5bGlzdEJhbmR3aWR0aCxcbiAgY29tcGFyZVBsYXlsaXN0UmVzb2x1dGlvbjogY29tcGFyZVBsYXlsaXN0UmVzb2x1dGlvbixcbiAgeGhyOiB4aHJGYWN0b3J5KClcbn07IC8vIERlZmluZSBnZXR0ZXIvc2V0dGVycyBmb3IgY29uZmlnIHByb3BlcnRpZXNcblxuWydHT0FMX0JVRkZFUl9MRU5HVEgnLCAnTUFYX0dPQUxfQlVGRkVSX0xFTkdUSCcsICdCQUNLX0JVRkZFUl9MRU5HVEgnLCAnR09BTF9CVUZGRVJfTEVOR1RIX1JBVEUnLCAnQlVGRkVSX0xPV19XQVRFUl9MSU5FJywgJ01BWF9CVUZGRVJfTE9XX1dBVEVSX0xJTkUnLCAnQlVGRkVSX0xPV19XQVRFUl9MSU5FX1JBVEUnLCAnQkFORFdJRFRIX1ZBUklBTkNFJ10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmhzJDEsIHByb3AsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZpZGVvanMkMS5sb2cud2FybihcInVzaW5nIFZocy5cIiArIHByb3AgKyBcIiBpcyBVTlNBRkUgYmUgc3VyZSB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmdcIik7XG4gICAgICByZXR1cm4gQ29uZmlnW3Byb3BdO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIHZpZGVvanMkMS5sb2cud2FybihcInVzaW5nIFZocy5cIiArIHByb3AgKyBcIiBpcyBVTlNBRkUgYmUgc3VyZSB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmdcIik7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlIDwgMCkge1xuICAgICAgICB2aWRlb2pzJDEubG9nLndhcm4oXCJ2YWx1ZSBvZiBWaHMuXCIgKyBwcm9wICsgXCIgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBDb25maWdbcHJvcF0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgTE9DQUxfU1RPUkFHRV9LRVkkMSA9ICd2aWRlb2pzLXZocyc7XG4vKipcbiAqIFVwZGF0ZXMgdGhlIHNlbGVjdGVkSW5kZXggb2YgdGhlIFF1YWxpdHlMZXZlbExpc3Qgd2hlbiBhIG1lZGlhY2hhbmdlIGhhcHBlbnMgaW4gdmhzLlxuICpcbiAqIEBwYXJhbSB7UXVhbGl0eUxldmVsTGlzdH0gcXVhbGl0eUxldmVscyBUaGUgUXVhbGl0eUxldmVsTGlzdCB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge1BsYXlsaXN0TG9hZGVyfSBwbGF5bGlzdExvYWRlciBQbGF5bGlzdExvYWRlciBjb250YWluaW5nIHRoZSBuZXcgbWVkaWEgaW5mby5cbiAqIEBmdW5jdGlvbiBoYW5kbGVWaHNNZWRpYUNoYW5nZVxuICovXG5cbnZhciBoYW5kbGVWaHNNZWRpYUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZVZoc01lZGlhQ2hhbmdlKHF1YWxpdHlMZXZlbHMsIHBsYXlsaXN0TG9hZGVyKSB7XG4gIHZhciBuZXdQbGF5bGlzdCA9IHBsYXlsaXN0TG9hZGVyLm1lZGlhKCk7XG4gIHZhciBzZWxlY3RlZEluZGV4ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWFsaXR5TGV2ZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHF1YWxpdHlMZXZlbHNbaV0uaWQgPT09IG5ld1BsYXlsaXN0LmlkKSB7XG4gICAgICBzZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHF1YWxpdHlMZXZlbHMuc2VsZWN0ZWRJbmRleF8gPSBzZWxlY3RlZEluZGV4O1xuICBxdWFsaXR5TGV2ZWxzLnRyaWdnZXIoe1xuICAgIHNlbGVjdGVkSW5kZXg6IHNlbGVjdGVkSW5kZXgsXG4gICAgdHlwZTogJ2NoYW5nZSdcbiAgfSk7XG59O1xuLyoqXG4gKiBBZGRzIHF1YWxpdHkgbGV2ZWxzIHRvIGxpc3Qgb25jZSBwbGF5bGlzdCBtZXRhZGF0YSBpcyBhdmFpbGFibGVcbiAqXG4gKiBAcGFyYW0ge1F1YWxpdHlMZXZlbExpc3R9IHF1YWxpdHlMZXZlbHMgVGhlIFF1YWxpdHlMZXZlbExpc3QgdG8gYXR0YWNoIGV2ZW50cyB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSB2aHMgVmhzIG9iamVjdCB0byBsaXN0ZW4gdG8gZm9yIG1lZGlhIGV2ZW50cy5cbiAqIEBmdW5jdGlvbiBoYW5kbGVWaHNMb2FkZWRNZXRhZGF0YVxuICovXG5cblxudmFyIGhhbmRsZVZoc0xvYWRlZE1ldGFkYXRhID0gZnVuY3Rpb24gaGFuZGxlVmhzTG9hZGVkTWV0YWRhdGEocXVhbGl0eUxldmVscywgdmhzKSB7XG4gIHZocy5yZXByZXNlbnRhdGlvbnMoKS5mb3JFYWNoKGZ1bmN0aW9uIChyZXApIHtcbiAgICBxdWFsaXR5TGV2ZWxzLmFkZFF1YWxpdHlMZXZlbChyZXApO1xuICB9KTtcbiAgaGFuZGxlVmhzTWVkaWFDaGFuZ2UocXVhbGl0eUxldmVscywgdmhzLnBsYXlsaXN0cyk7XG59OyAvLyBITFMgaXMgYSBzb3VyY2UgaGFuZGxlciwgbm90IGEgdGVjaC4gTWFrZSBzdXJlIGF0dGVtcHRzIHRvIHVzZSBpdFxuLy8gYXMgb25lIGRvIG5vdCBjYXVzZSBleGNlcHRpb25zLlxuXG5cblZocyQxLmNhblBsYXlTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB2aWRlb2pzJDEubG9nLndhcm4oJ0hMUyBpcyBubyBsb25nZXIgYSB0ZWNoLiBQbGVhc2UgcmVtb3ZlIGl0IGZyb20gJyArICd5b3VyIHBsYXllclxcJ3MgdGVjaE9yZGVyLicpO1xufTtcblxudmFyIGVtZUtleVN5c3RlbXMgPSBmdW5jdGlvbiBlbWVLZXlTeXN0ZW1zKGtleVN5c3RlbU9wdGlvbnMsIHZpZGVvUGxheWxpc3QsIGF1ZGlvUGxheWxpc3QpIHtcbiAgaWYgKCFrZXlTeXN0ZW1PcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVN5c3RlbU9wdGlvbnM7XG4gIH1cblxuICB2YXIgY29kZWNzID0ge1xuICAgIHZpZGVvOiB2aWRlb1BsYXlsaXN0ICYmIHZpZGVvUGxheWxpc3QuYXR0cmlidXRlcyAmJiB2aWRlb1BsYXlsaXN0LmF0dHJpYnV0ZXMuQ09ERUNTLFxuICAgIGF1ZGlvOiBhdWRpb1BsYXlsaXN0ICYmIGF1ZGlvUGxheWxpc3QuYXR0cmlidXRlcyAmJiBhdWRpb1BsYXlsaXN0LmF0dHJpYnV0ZXMuQ09ERUNTXG4gIH07XG5cbiAgaWYgKCFjb2RlY3MuYXVkaW8gJiYgY29kZWNzLnZpZGVvICYmIGNvZGVjcy52aWRlby5zcGxpdCgnLCcpLmxlbmd0aCA+IDEpIHtcbiAgICBjb2RlY3MudmlkZW8uc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uIChjb2RlYykge1xuICAgICAgY29kZWMgPSBjb2RlYy50cmltKCk7XG5cbiAgICAgIGlmIChpc0F1ZGlvQ29kZWMoY29kZWMpKSB7XG4gICAgICAgIGNvZGVjcy5hdWRpbyA9IGNvZGVjO1xuICAgICAgfSBlbHNlIGlmIChpc1ZpZGVvQ29kZWMoY29kZWMpKSB7XG4gICAgICAgIGNvZGVjcy52aWRlbyA9IGNvZGVjO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIHZpZGVvQ29udGVudFR5cGUgPSBjb2RlY3MudmlkZW8gPyBcInZpZGVvL21wNDtjb2RlY3M9XFxcIlwiICsgY29kZWNzLnZpZGVvICsgXCJcXFwiXCIgOiBudWxsO1xuICB2YXIgYXVkaW9Db250ZW50VHlwZSA9IGNvZGVjcy5hdWRpbyA/IFwiYXVkaW8vbXA0O2NvZGVjcz1cXFwiXCIgKyBjb2RlY3MuYXVkaW8gKyBcIlxcXCJcIiA6IG51bGw7IC8vIHVwc2VydCB0aGUgY29udGVudCB0eXBlcyBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgcGxheWxpc3RcblxuICB2YXIga2V5U3lzdGVtQ29udGVudFR5cGVzID0ge307XG5cbiAgZm9yICh2YXIga2V5U3lzdGVtIGluIGtleVN5c3RlbU9wdGlvbnMpIHtcbiAgICBrZXlTeXN0ZW1Db250ZW50VHlwZXNba2V5U3lzdGVtXSA9IHtcbiAgICAgIGF1ZGlvQ29udGVudFR5cGU6IGF1ZGlvQ29udGVudFR5cGUsXG4gICAgICB2aWRlb0NvbnRlbnRUeXBlOiB2aWRlb0NvbnRlbnRUeXBlXG4gICAgfTtcblxuICAgIGlmICh2aWRlb1BsYXlsaXN0LmNvbnRlbnRQcm90ZWN0aW9uICYmIHZpZGVvUGxheWxpc3QuY29udGVudFByb3RlY3Rpb25ba2V5U3lzdGVtXSAmJiB2aWRlb1BsYXlsaXN0LmNvbnRlbnRQcm90ZWN0aW9uW2tleVN5c3RlbV0ucHNzaCkge1xuICAgICAga2V5U3lzdGVtQ29udGVudFR5cGVzW2tleVN5c3RlbV0ucHNzaCA9IHZpZGVvUGxheWxpc3QuY29udGVudFByb3RlY3Rpb25ba2V5U3lzdGVtXS5wc3NoO1xuICAgIH0gLy8gdmlkZW9qcy1jb250cmliLWVtZSBhY2NlcHRzIHRoZSBvcHRpb24gb2Ygc3BlY2lmeWluZzogJ2NvbS5zb21lLmNkbSc6ICd1cmwnXG4gICAgLy8gc28gd2UgbmVlZCB0byBwcmV2ZW50IG92ZXJ3cml0aW5nIHRoZSBVUkwgZW50aXJlbHlcblxuXG4gICAgaWYgKHR5cGVvZiBrZXlTeXN0ZW1PcHRpb25zW2tleVN5c3RlbV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBrZXlTeXN0ZW1Db250ZW50VHlwZXNba2V5U3lzdGVtXS51cmwgPSBrZXlTeXN0ZW1PcHRpb25zW2tleVN5c3RlbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZpZGVvanMkMS5tZXJnZU9wdGlvbnMoa2V5U3lzdGVtT3B0aW9ucywga2V5U3lzdGVtQ29udGVudFR5cGVzKTtcbn07XG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEtleVN5c3RlbXNcbiAqXG4gKiBrZXlTeXN0ZW1zIGNvbmZpZ3VyYXRpb24gZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvanMtY29udHJpYi1lbWVcbiAqIE5vdGU6IG5vdCBhbGwgb3B0aW9ucyBhcmUgbGlzdGVkIGhlcmUuXG4gKlxuICogQHByb3BlcnR5IHtVaW50OEFycmF5fSBbcHNzaF1cbiAqICAgICAgICAgICBQcm90ZWN0aW9uIFN5c3RlbSBTcGVjaWZpYyBIZWFkZXJcbiAqL1xuXG4vKipcbiAqIEdvZXMgdGhyb3VnaCBhbGwgdGhlIHBsYXlsaXN0cyBhbmQgY29sbGVjdHMgYW4gYXJyYXkgb2YgS2V5U3lzdGVtcyBvcHRpb25zIG9iamVjdHNcbiAqIGNvbnRhaW5pbmcgZWFjaCBwbGF5bGlzdCdzIGtleVN5c3RlbXMgYW5kIHRoZWlyIHBzc2ggdmFsdWVzLCBpZiBhdmFpbGFibGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3RbXX0gcGxheWxpc3RzXG4gKiAgICAgICAgVGhlIHBsYXlsaXN0cyB0byBsb29rIHRocm91Z2hcbiAqIEBwYXJhbSB7c3RyaW5nW119IGtleVN5c3RlbXNcbiAqICAgICAgICBUaGUga2V5U3lzdGVtcyB0byBjb2xsZWN0IHBzc2ggdmFsdWVzIGZvclxuICpcbiAqIEByZXR1cm4ge0tleVN5c3RlbXNbXX1cbiAqICAgICAgICAgQW4gYXJyYXkgb2YgS2V5U3lzdGVtcyBvYmplY3RzIGNvbnRhaW5pbmcgYXZhaWxhYmxlIGtleSBzeXN0ZW1zIGFuZCB0aGVpclxuICogICAgICAgICBwc3NoIHZhbHVlc1xuICovXG5cblxudmFyIGdldEFsbFBzc2hLZXlTeXN0ZW1zT3B0aW9ucyA9IGZ1bmN0aW9uIGdldEFsbFBzc2hLZXlTeXN0ZW1zT3B0aW9ucyhwbGF5bGlzdHMsIGtleVN5c3RlbXMpIHtcbiAgcmV0dXJuIHBsYXlsaXN0cy5yZWR1Y2UoZnVuY3Rpb24gKGtleVN5c3RlbXNBcnIsIHBsYXlsaXN0KSB7XG4gICAgaWYgKCFwbGF5bGlzdC5jb250ZW50UHJvdGVjdGlvbikge1xuICAgICAgcmV0dXJuIGtleVN5c3RlbXNBcnI7XG4gICAgfVxuXG4gICAgdmFyIGtleVN5c3RlbXNPcHRpb25zID0ga2V5U3lzdGVtcy5yZWR1Y2UoZnVuY3Rpb24gKGtleVN5c3RlbXNPYmosIGtleVN5c3RlbSkge1xuICAgICAgdmFyIGtleVN5c3RlbU9wdGlvbnMgPSBwbGF5bGlzdC5jb250ZW50UHJvdGVjdGlvbltrZXlTeXN0ZW1dO1xuXG4gICAgICBpZiAoa2V5U3lzdGVtT3B0aW9ucyAmJiBrZXlTeXN0ZW1PcHRpb25zLnBzc2gpIHtcbiAgICAgICAga2V5U3lzdGVtc09ialtrZXlTeXN0ZW1dID0ge1xuICAgICAgICAgIHBzc2g6IGtleVN5c3RlbU9wdGlvbnMucHNzaFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ga2V5U3lzdGVtc09iajtcbiAgICB9LCB7fSk7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoa2V5U3lzdGVtc09wdGlvbnMpLmxlbmd0aCkge1xuICAgICAga2V5U3lzdGVtc0Fyci5wdXNoKGtleVN5c3RlbXNPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5U3lzdGVtc0FycjtcbiAgfSwgW10pO1xufTtcbi8qKlxuICogSWYgdGhlIFtlbWVdKGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvanMtY29udHJpYi1lbWUpIHBsdWdpbiBpcyBhdmFpbGFibGUsIGFuZFxuICogdGhlcmUgYXJlIGtleVN5c3RlbXMgb24gdGhlIHNvdXJjZSwgc2V0cyB1cCBzb3VyY2Ugb3B0aW9ucyB0byBwcmVwYXJlIHRoZSBzb3VyY2UgZm9yXG4gKiBlbWUgYW5kIHRyaWVzIHRvIGluaXRpYWxpemUgaXQgZWFybHkgdmlhIGVtZSdzIGluaXRpYWxpemVNZWRpYUtleXMgQVBJIChpZiBhdmFpbGFibGUpLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5ZXJcbiAqICAgICAgICBUaGUgcGxheWVyIGluc3RhbmNlXG4gKiBAcGFyYW0ge09iamVjdFtdfSBzb3VyY2VLZXlTeXN0ZW1zXG4gKiAgICAgICAgVGhlIGtleSBzeXN0ZW1zIG9wdGlvbnMgZnJvbSB0aGUgcGxheWVyIHNvdXJjZVxuICogQHBhcmFtIHtPYmplY3R9IG1lZGlhXG4gKiAgICAgICAgVGhlIGFjdGl2ZSBtZWRpYSBwbGF5bGlzdFxuICogQHBhcmFtIHtPYmplY3R9IFthdWRpb01lZGlhXVxuICogICAgICAgIFRoZSBhY3RpdmUgYXVkaW8gbWVkaWEgcGxheWxpc3QgKG9wdGlvbmFsKVxuICogQHBhcmFtIHtPYmplY3RbXX0gbWFpblBsYXlsaXN0c1xuICogICAgICAgIFRoZSBwbGF5bGlzdHMgZm91bmQgb24gdGhlIG1hc3RlciBwbGF5bGlzdCBvYmplY3RcbiAqL1xuXG5cbnZhciBzZXR1cEVtZU9wdGlvbnMgPSBmdW5jdGlvbiBzZXR1cEVtZU9wdGlvbnMoX3JlZikge1xuICB2YXIgcGxheWVyID0gX3JlZi5wbGF5ZXIsXG4gICAgICBzb3VyY2VLZXlTeXN0ZW1zID0gX3JlZi5zb3VyY2VLZXlTeXN0ZW1zLFxuICAgICAgbWVkaWEgPSBfcmVmLm1lZGlhLFxuICAgICAgYXVkaW9NZWRpYSA9IF9yZWYuYXVkaW9NZWRpYSxcbiAgICAgIG1haW5QbGF5bGlzdHMgPSBfcmVmLm1haW5QbGF5bGlzdHM7XG4gIHZhciBzb3VyY2VPcHRpb25zID0gZW1lS2V5U3lzdGVtcyhzb3VyY2VLZXlTeXN0ZW1zLCBtZWRpYSwgYXVkaW9NZWRpYSk7XG5cbiAgaWYgKCFzb3VyY2VPcHRpb25zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGxheWVyLmN1cnJlbnRTb3VyY2UoKS5rZXlTeXN0ZW1zID0gc291cmNlT3B0aW9uczsgLy8gZW1lIGhhbmRsZXMgdGhlIHJlc3Qgb2YgdGhlIHNldHVwLCBzbyBpZiBpdCBpcyBtaXNzaW5nXG4gIC8vIGRvIG5vdGhpbmcuXG5cbiAgaWYgKHNvdXJjZU9wdGlvbnMgJiYgIXBsYXllci5lbWUpIHtcbiAgICB2aWRlb2pzJDEubG9nLndhcm4oJ0RSTSBlbmNyeXB0ZWQgc291cmNlIGNhbm5vdCBiZSBkZWNyeXB0ZWQgd2l0aG91dCBhIERSTSBwbHVnaW4nKTtcbiAgICByZXR1cm47XG4gIH0gLy8gd29ya3MgYXJvdW5kIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTg5NTQ0OVxuICAvLyBpbiBub24tSUUxMSBicm93c2Vycy4gSW4gSUUxMSB0aGlzIGlzIHRvbyBlYXJseSB0byBpbml0aWFsaXplIG1lZGlhIGtleXNcblxuXG4gIGlmICh2aWRlb2pzJDEuYnJvd3Nlci5JRV9WRVJTSU9OID09PSAxMSB8fCAhcGxheWVyLmVtZS5pbml0aWFsaXplTWVkaWFLZXlzKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFRPRE8gc2hvdWxkIGFsbCBhdWRpbyBQU1NIIHZhbHVlcyBiZSBpbml0aWFsaXplZCBmb3IgRFJNP1xuICAvL1xuICAvLyBBbGwgdW5pcXVlIHZpZGVvIHJlbmRpdGlvbiBwc3NoIHZhbHVlcyBhcmUgaW5pdGlhbGl6ZWQgZm9yIERSTSwgYnV0IGhlcmUgb25seVxuICAvLyB0aGUgaW5pdGlhbCBhdWRpbyBwbGF5bGlzdCBsaWNlbnNlIGlzIGluaXRpYWxpemVkLiBJbiB0aGVvcnksIGFuIGVuY3J5cHRlZFxuICAvLyBldmVudCBzaG91bGQgYmUgZmlyZWQgaWYgdGhlIHVzZXIgc3dpdGNoZXMgdG8gYW4gYWx0ZXJuYXRpdmUgYXVkaW8gcGxheWxpc3RcbiAgLy8gd2hlcmUgYSBsaWNlbnNlIGlzIHJlcXVpcmVkLCBidXQgdGhpcyBjYXNlIGhhc24ndCB5ZXQgYmVlbiB0ZXN0ZWQuIEluIGFkZGl0aW9uLCB0aGVyZVxuICAvLyBtYXkgYmUgbWFueSBhbHRlcm5hdGUgYXVkaW8gcGxheWxpc3RzIHVubGlrZWx5IHRvIGJlIHVzZWQgKGUuZy4sIG11bHRpcGxlIGRpZmZlcmVudFxuICAvLyBsYW5ndWFnZXMpLlxuXG5cbiAgdmFyIHBsYXlsaXN0cyA9IGF1ZGlvTWVkaWEgPyBtYWluUGxheWxpc3RzLmNvbmNhdChbYXVkaW9NZWRpYV0pIDogbWFpblBsYXlsaXN0cztcbiAgdmFyIGtleVN5c3RlbXNPcHRpb25zQXJyID0gZ2V0QWxsUHNzaEtleVN5c3RlbXNPcHRpb25zKHBsYXlsaXN0cywgT2JqZWN0LmtleXMoc291cmNlS2V5U3lzdGVtcykpOyAvLyBTaW5jZSBQU1NIIHZhbHVlcyBhcmUgaW50ZXJwcmV0ZWQgYXMgaW5pdERhdGEsIEVNRSB3aWxsIGRlZHVwZSBhbnkgZHVwbGljYXRlcy4gVGhlXG4gIC8vIG9ubHkgcGxhY2Ugd2hlcmUgaXQgc2hvdWxkIG5vdCBiZSBkZWR1cGVkIGlzIGZvciBtcy1wcmVmaXhlZCBBUElzLCBidXQgdGhlIGVhcmx5XG4gIC8vIHJldHVybiBmb3IgSUUxMSBhYm92ZSwgYW5kIHRoZSBleGlzdGVuY2Ugb2YgbW9kZXJuIEVNRSBBUElzIGluIGFkZGl0aW9uIHRvXG4gIC8vIG1zLXByZWZpeGVkIEFQSXMgb24gRWRnZSBzaG91bGQgcHJldmVudCB0aGlzIGZyb20gYmVpbmcgYSBjb25jZXJuLlxuICAvLyBpbml0aWFsaXplTWVkaWFLZXlzIGFsc28gd29uJ3QgdXNlIHRoZSB3ZWJraXQtcHJlZml4ZWQgQVBJcy5cblxuICBrZXlTeXN0ZW1zT3B0aW9uc0Fyci5mb3JFYWNoKGZ1bmN0aW9uIChrZXlTeXN0ZW1zT3B0aW9ucykge1xuICAgIHBsYXllci5lbWUuaW5pdGlhbGl6ZU1lZGlhS2V5cyh7XG4gICAgICBrZXlTeXN0ZW1zOiBrZXlTeXN0ZW1zT3B0aW9uc1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnZhciBnZXRWaHNMb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiBnZXRWaHNMb2NhbFN0b3JhZ2UoKSB7XG4gIGlmICghd2luZG93JDEubG9jYWxTdG9yYWdlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc3RvcmVkT2JqZWN0ID0gd2luZG93JDEubG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVkkMSk7XG5cbiAgaWYgKCFzdG9yZWRPYmplY3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RvcmVkT2JqZWN0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHNvbWVvbmUgbWF5IGhhdmUgdGFtcGVyZWQgd2l0aCB0aGUgdmFsdWVcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxudmFyIHVwZGF0ZVZoc0xvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uIHVwZGF0ZVZoc0xvY2FsU3RvcmFnZShvcHRpb25zKSB7XG4gIGlmICghd2luZG93JDEubG9jYWxTdG9yYWdlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIG9iamVjdFRvU3RvcmUgPSBnZXRWaHNMb2NhbFN0b3JhZ2UoKTtcbiAgb2JqZWN0VG9TdG9yZSA9IG9iamVjdFRvU3RvcmUgPyB2aWRlb2pzJDEubWVyZ2VPcHRpb25zKG9iamVjdFRvU3RvcmUsIG9wdGlvbnMpIDogb3B0aW9ucztcblxuICB0cnkge1xuICAgIHdpbmRvdyQxLmxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMX1NUT1JBR0VfS0VZJDEsIEpTT04uc3RyaW5naWZ5KG9iamVjdFRvU3RvcmUpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFRocm93cyBpZiBzdG9yYWdlIGlzIGZ1bGwgKGUuZy4sIGFsd2F5cyBvbiBpT1MgNSsgU2FmYXJpIHByaXZhdGUgbW9kZSwgd2hlcmVcbiAgICAvLyBzdG9yYWdlIGlzIHNldCB0byAwKS5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU3RvcmFnZS9zZXRJdGVtI0V4Y2VwdGlvbnNcbiAgICAvLyBObyBuZWVkIHRvIHBlcmZvcm0gYW55IG9wZXJhdGlvbi5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0VG9TdG9yZTtcbn07XG4vKipcbiAqIFBhcnNlcyBWSFMtc3VwcG9ydGVkIG1lZGlhIHR5cGVzIGZyb20gZGF0YSBVUklzLiBTZWVcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQmFzaWNzX29mX0hUVFAvRGF0YV9VUklzXG4gKiBmb3IgaW5mb3JtYXRpb24gb24gZGF0YSBVUklzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhVXJpXG4gKiAgICAgICAgVGhlIGRhdGEgVVJJXG4gKlxuICogQHJldHVybiB7c3RyaW5nfE9iamVjdH1cbiAqICAgICAgICAgVGhlIHBhcnNlZCBvYmplY3Qvc3RyaW5nLCBvciB0aGUgb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHN1cHBvcnRlZCBtZWRpYSB0eXBlXG4gKiAgICAgICAgIHdhcyBmb3VuZFxuICovXG5cblxudmFyIGV4cGFuZERhdGFVcmkgPSBmdW5jdGlvbiBleHBhbmREYXRhVXJpKGRhdGFVcmkpIHtcbiAgaWYgKGRhdGFVcmkudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdkYXRhOmFwcGxpY2F0aW9uL3ZuZC52aWRlb2pzLnZocytqc29uLCcpID09PSAwKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YVVyaS5zdWJzdHJpbmcoZGF0YVVyaS5pbmRleE9mKCcsJykgKyAxKSk7XG4gIH0gLy8gbm8ga25vd24gY2FzZSBmb3IgdGhpcyBkYXRhIFVSSSwgcmV0dXJuIHRoZSBzdHJpbmcgYXMtaXNcblxuXG4gIHJldHVybiBkYXRhVXJpO1xufTtcbi8qKlxuICogV2hldGhlciB0aGUgYnJvd3NlciBoYXMgYnVpbHQtaW4gSExTIHN1cHBvcnQuXG4gKi9cblxuXG5WaHMkMS5zdXBwb3J0c05hdGl2ZUhscyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFkb2N1bWVudCB8fCAhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciB2aWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7IC8vIG5hdGl2ZSBITFMgaXMgZGVmaW5pdGVseSBub3Qgc3VwcG9ydGVkIGlmIEhUTUw1IHZpZGVvIGlzbid0XG5cbiAgaWYgKCF2aWRlb2pzJDEuZ2V0VGVjaCgnSHRtbDUnKS5pc1N1cHBvcnRlZCgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIEhMUyBtYW5pZmVzdHMgY2FuIGdvIGJ5IG1hbnkgbWltZS10eXBlc1xuXG5cbiAgdmFyIGNhblBsYXkgPSBbLy8gQXBwbGUgc2FudGlvbmVkXG4gICdhcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybCcsIC8vIEFwcGxlIHNhbmN0aW9uZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICdhdWRpby9tcGVndXJsJywgLy8gVmVyeSBjb21tb25cbiAgJ2F1ZGlvL3gtbXBlZ3VybCcsIC8vIFZlcnkgY29tbW9uXG4gICdhcHBsaWNhdGlvbi94LW1wZWd1cmwnLCAvLyBJbmNsdWRlZCBmb3IgY29tcGxldGVuZXNzXG4gICd2aWRlby94LW1wZWd1cmwnLCAndmlkZW8vbXBlZ3VybCcsICdhcHBsaWNhdGlvbi9tcGVndXJsJ107XG4gIHJldHVybiBjYW5QbGF5LnNvbWUoZnVuY3Rpb24gKGNhbkl0UGxheSkge1xuICAgIHJldHVybiAvbWF5YmV8cHJvYmFibHkvaS50ZXN0KHZpZGVvLmNhblBsYXlUeXBlKGNhbkl0UGxheSkpO1xuICB9KTtcbn0oKTtcblxuVmhzJDEuc3VwcG9ydHNOYXRpdmVEYXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIWRvY3VtZW50IHx8ICFkb2N1bWVudC5jcmVhdGVFbGVtZW50IHx8ICF2aWRlb2pzJDEuZ2V0VGVjaCgnSHRtbDUnKS5pc1N1cHBvcnRlZCgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIC9tYXliZXxwcm9iYWJseS9pLnRlc3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKS5jYW5QbGF5VHlwZSgnYXBwbGljYXRpb24vZGFzaCt4bWwnKSk7XG59KCk7XG5cblZocyQxLnN1cHBvcnRzVHlwZU5hdGl2ZWx5ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdobHMnKSB7XG4gICAgcmV0dXJuIFZocyQxLnN1cHBvcnRzTmF0aXZlSGxzO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdkYXNoJykge1xuICAgIHJldHVybiBWaHMkMS5zdXBwb3J0c05hdGl2ZURhc2g7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuLyoqXG4gKiBITFMgaXMgYSBzb3VyY2UgaGFuZGxlciwgbm90IGEgdGVjaC4gTWFrZSBzdXJlIGF0dGVtcHRzIHRvIHVzZSBpdFxuICogYXMgb25lIGRvIG5vdCBjYXVzZSBleGNlcHRpb25zLlxuICovXG5cblxuVmhzJDEuaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB2aWRlb2pzJDEubG9nLndhcm4oJ0hMUyBpcyBubyBsb25nZXIgYSB0ZWNoLiBQbGVhc2UgcmVtb3ZlIGl0IGZyb20gJyArICd5b3VyIHBsYXllclxcJ3MgdGVjaE9yZGVyLicpO1xufTtcblxudmFyIENvbXBvbmVudCQxID0gdmlkZW9qcyQxLmdldENvbXBvbmVudCgnQ29tcG9uZW50Jyk7XG4vKipcbiAqIFRoZSBWaHMgSGFuZGxlciBvYmplY3QsIHdoZXJlIHdlIG9yY2hlc3RyYXRlIGFsbCBvZiB0aGUgcGFydHNcbiAqIG9mIEhMUyB0byBpbnRlcmFjdCB3aXRoIHZpZGVvLmpzXG4gKlxuICogQGNsYXNzIFZoc0hhbmRsZXJcbiAqIEBleHRlbmRzIHZpZGVvanMuQ29tcG9uZW50XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIHRoZSBzb3J1Y2Ugb2JqZWN0XG4gKiBAcGFyYW0ge1RlY2h9IHRlY2ggdGhlIHBhcmVudCB0ZWNoIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgb3B0aW9uYWwgYW5kIHJlcXVpcmVkIG9wdGlvbnNcbiAqL1xuXG52YXIgVmhzSGFuZGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShWaHNIYW5kbGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBWaHNIYW5kbGVyKHNvdXJjZSwgdGVjaCwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHRlY2gsIHZpZGVvanMkMS5tZXJnZU9wdGlvbnMob3B0aW9ucy5obHMsIG9wdGlvbnMudmhzKSkgfHwgdGhpcztcblxuICAgIGlmIChvcHRpb25zLmhscyAmJiBPYmplY3Qua2V5cyhvcHRpb25zLmhscykubGVuZ3RoKSB7XG4gICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ1VzaW5nIGhscyBvcHRpb25zIGlzIGRlcHJlY2F0ZWQuIFVzZSB2aHMgaW5zdGVhZC4nKTtcbiAgICB9IC8vIHRlY2gucGxheWVyKCkgaXMgZGVwcmVjYXRlZCBidXQgc2V0dXAgYSByZWZlcmVuY2UgdG8gSExTIGZvclxuICAgIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5XG5cblxuICAgIGlmICh0ZWNoLm9wdGlvbnNfICYmIHRlY2gub3B0aW9uc18ucGxheWVySWQpIHtcbiAgICAgIHZhciBfcGxheWVyID0gdmlkZW9qcyQxKHRlY2gub3B0aW9uc18ucGxheWVySWQpO1xuXG4gICAgICBpZiAoIV9wbGF5ZXIuaGFzT3duUHJvcGVydHkoJ2hscycpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfcGxheWVyLCAnaGxzJywge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdwbGF5ZXIuaGxzIGlzIGRlcHJlY2F0ZWQuIFVzZSBwbGF5ZXIudGVjaCgpLnZocyBpbnN0ZWFkLicpO1xuICAgICAgICAgICAgdGVjaC50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgdHlwZTogJ3VzYWdlJyxcbiAgICAgICAgICAgICAgbmFtZTogJ2hscy1wbGF5ZXItYWNjZXNzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghX3BsYXllci5oYXNPd25Qcm9wZXJ0eSgndmhzJykpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9wbGF5ZXIsICd2aHMnLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICB2aWRlb2pzJDEubG9nLndhcm4oJ3BsYXllci52aHMgaXMgZGVwcmVjYXRlZC4gVXNlIHBsYXllci50ZWNoKCkudmhzIGluc3RlYWQuJyk7XG4gICAgICAgICAgICB0ZWNoLnRyaWdnZXIoe1xuICAgICAgICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICAgICAgICBuYW1lOiAndmhzLXBsYXllci1hY2Nlc3MnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfcGxheWVyLmhhc093blByb3BlcnR5KCdkYXNoJykpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9wbGF5ZXIsICdkYXNoJywge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgdmlkZW9qcyQxLmxvZy53YXJuKCdwbGF5ZXIuZGFzaCBpcyBkZXByZWNhdGVkLiBVc2UgcGxheWVyLnRlY2goKS52aHMgaW5zdGVhZC4nKTtcbiAgICAgICAgICAgIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucGxheWVyXyA9IF9wbGF5ZXI7XG4gICAgfVxuXG4gICAgX3RoaXMudGVjaF8gPSB0ZWNoO1xuICAgIF90aGlzLnNvdXJjZV8gPSBzb3VyY2U7XG4gICAgX3RoaXMuc3RhdHMgPSB7fTtcbiAgICBfdGhpcy5pZ25vcmVOZXh0U2Vla2luZ0V2ZW50XyA9IGZhbHNlO1xuXG4gICAgX3RoaXMuc2V0T3B0aW9uc18oKTtcblxuICAgIGlmIChfdGhpcy5vcHRpb25zXy5vdmVycmlkZU5hdGl2ZSAmJiB0ZWNoLm92ZXJyaWRlTmF0aXZlQXVkaW9UcmFja3MgJiYgdGVjaC5vdmVycmlkZU5hdGl2ZVZpZGVvVHJhY2tzKSB7XG4gICAgICB0ZWNoLm92ZXJyaWRlTmF0aXZlQXVkaW9UcmFja3ModHJ1ZSk7XG4gICAgICB0ZWNoLm92ZXJyaWRlTmF0aXZlVmlkZW9UcmFja3ModHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChfdGhpcy5vcHRpb25zXy5vdmVycmlkZU5hdGl2ZSAmJiAodGVjaC5mZWF0dXJlc05hdGl2ZVZpZGVvVHJhY2tzIHx8IHRlY2guZmVhdHVyZXNOYXRpdmVBdWRpb1RyYWNrcykpIHtcbiAgICAgIC8vIG92ZXJyaWRpbmcgbmF0aXZlIEhMUyBvbmx5IHdvcmtzIGlmIGF1ZGlvIHRyYWNrcyBoYXZlIGJlZW4gZW11bGF0ZWRcbiAgICAgIC8vIGVycm9yIGVhcmx5IGlmIHdlJ3JlIG1pc2NvbmZpZ3VyZWRcbiAgICAgIHRocm93IG5ldyBFcnJvcignT3ZlcnJpZGluZyBuYXRpdmUgSExTIHJlcXVpcmVzIGVtdWxhdGVkIHRyYWNrcy4gJyArICdTZWUgaHR0cHM6Ly9naXQuaW8vdk1wakInKTtcbiAgICB9IC8vIGxpc3RlbiBmb3IgZnVsbHNjcmVlbmNoYW5nZSBldmVudHMgZm9yIHRoaXMgcGxheWVyIHNvIHRoYXQgd2VcbiAgICAvLyBjYW4gYWRqdXN0IG91ciBxdWFsaXR5IHNlbGVjdGlvbiBxdWlja2x5XG5cblxuICAgIF90aGlzLm9uKGRvY3VtZW50LCBbJ2Z1bGxzY3JlZW5jaGFuZ2UnLCAnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsICdtb3pmdWxsc2NyZWVuY2hhbmdlJywgJ01TRnVsbHNjcmVlbkNoYW5nZSddLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBmdWxsc2NyZWVuRWxlbWVudCA9IGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQ7XG5cbiAgICAgIGlmIChmdWxsc2NyZWVuRWxlbWVudCAmJiBmdWxsc2NyZWVuRWxlbWVudC5jb250YWlucyhfdGhpcy50ZWNoXy5lbCgpKSkge1xuICAgICAgICBfdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLnNtb290aFF1YWxpdHlDaGFuZ2VfKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfdGhpcy5vbihfdGhpcy50ZWNoXywgJ3NlZWtpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5pZ25vcmVOZXh0U2Vla2luZ0V2ZW50Xykge1xuICAgICAgICB0aGlzLmlnbm9yZU5leHRTZWVraW5nRXZlbnRfID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRDdXJyZW50VGltZSh0aGlzLnRlY2hfLmN1cnJlbnRUaW1lKCkpO1xuICAgIH0pO1xuXG4gICAgX3RoaXMub24oX3RoaXMudGVjaF8sICdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHZlcmlmeSB0aGF0IHRoZSBlcnJvciB3YXMgcmVhbCBhbmQgd2UgYXJlIGxvYWRlZFxuICAgICAgLy8gZW5vdWdoIHRvIGhhdmUgbXBjIGxvYWRlZC5cbiAgICAgIGlmICh0aGlzLnRlY2hfLmVycm9yKCkgJiYgdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfKSB7XG4gICAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5wYXVzZUxvYWRpbmcoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF90aGlzLm9uKF90aGlzLnRlY2hfLCAncGxheScsIF90aGlzLnBsYXkpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFZoc0hhbmRsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXRPcHRpb25zXyA9IGZ1bmN0aW9uIHNldE9wdGlvbnNfKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzOyAvLyBkZWZhdWx0c1xuXG5cbiAgICB0aGlzLm9wdGlvbnNfLndpdGhDcmVkZW50aWFscyA9IHRoaXMub3B0aW9uc18ud2l0aENyZWRlbnRpYWxzIHx8IGZhbHNlO1xuICAgIHRoaXMub3B0aW9uc18uaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHMgPSB0aGlzLm9wdGlvbnNfLmhhbmRsZU1hbmlmZXN0UmVkaXJlY3RzID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnNfLmxpbWl0UmVuZGl0aW9uQnlQbGF5ZXJEaW1lbnNpb25zID0gdGhpcy5vcHRpb25zXy5saW1pdFJlbmRpdGlvbkJ5UGxheWVyRGltZW5zaW9ucyA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWU7XG4gICAgdGhpcy5vcHRpb25zXy51c2VEZXZpY2VQaXhlbFJhdGlvID0gdGhpcy5vcHRpb25zXy51c2VEZXZpY2VQaXhlbFJhdGlvIHx8IGZhbHNlO1xuICAgIHRoaXMub3B0aW9uc18uc21vb3RoUXVhbGl0eUNoYW5nZSA9IHRoaXMub3B0aW9uc18uc21vb3RoUXVhbGl0eUNoYW5nZSB8fCBmYWxzZTtcbiAgICB0aGlzLm9wdGlvbnNfLnVzZUJhbmR3aWR0aEZyb21Mb2NhbFN0b3JhZ2UgPSB0eXBlb2YgdGhpcy5zb3VyY2VfLnVzZUJhbmR3aWR0aEZyb21Mb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnID8gdGhpcy5zb3VyY2VfLnVzZUJhbmR3aWR0aEZyb21Mb2NhbFN0b3JhZ2UgOiB0aGlzLm9wdGlvbnNfLnVzZUJhbmR3aWR0aEZyb21Mb2NhbFN0b3JhZ2UgfHwgZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zXy5jdXN0b21UYWdQYXJzZXJzID0gdGhpcy5vcHRpb25zXy5jdXN0b21UYWdQYXJzZXJzIHx8IFtdO1xuICAgIHRoaXMub3B0aW9uc18uY3VzdG9tVGFnTWFwcGVycyA9IHRoaXMub3B0aW9uc18uY3VzdG9tVGFnTWFwcGVycyB8fCBbXTtcbiAgICB0aGlzLm9wdGlvbnNfLmNhY2hlRW5jcnlwdGlvbktleXMgPSB0aGlzLm9wdGlvbnNfLmNhY2hlRW5jcnlwdGlvbktleXMgfHwgZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zXy5oYW5kbGVQYXJ0aWFsRGF0YSA9IHRoaXMub3B0aW9uc18uaGFuZGxlUGFydGlhbERhdGEgfHwgZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9uc18uYmxhY2tsaXN0RHVyYXRpb24gIT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLm9wdGlvbnNfLmJsYWNrbGlzdER1cmF0aW9uID0gNSAqIDYwO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zXy5iYW5kd2lkdGggIT09ICdudW1iZXInKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zXy51c2VCYW5kd2lkdGhGcm9tTG9jYWxTdG9yYWdlKSB7XG4gICAgICAgIHZhciBzdG9yZWRPYmplY3QgPSBnZXRWaHNMb2NhbFN0b3JhZ2UoKTtcblxuICAgICAgICBpZiAoc3RvcmVkT2JqZWN0ICYmIHN0b3JlZE9iamVjdC5iYW5kd2lkdGgpIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnNfLmJhbmR3aWR0aCA9IHN0b3JlZE9iamVjdC5iYW5kd2lkdGg7XG4gICAgICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgICBuYW1lOiAndmhzLWJhbmR3aWR0aC1mcm9tLWxvY2FsLXN0b3JhZ2UnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgICBuYW1lOiAnaGxzLWJhbmR3aWR0aC1mcm9tLWxvY2FsLXN0b3JhZ2UnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RvcmVkT2JqZWN0ICYmIHN0b3JlZE9iamVjdC50aHJvdWdocHV0KSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zXy50aHJvdWdocHV0ID0gc3RvcmVkT2JqZWN0LnRocm91Z2hwdXQ7XG4gICAgICAgICAgdGhpcy50ZWNoXy50cmlnZ2VyKHtcbiAgICAgICAgICAgIHR5cGU6ICd1c2FnZScsXG4gICAgICAgICAgICBuYW1lOiAndmhzLXRocm91Z2hwdXQtZnJvbS1sb2NhbC1zdG9yYWdlJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMudGVjaF8udHJpZ2dlcih7XG4gICAgICAgICAgICB0eXBlOiAndXNhZ2UnLFxuICAgICAgICAgICAgbmFtZTogJ2hscy10aHJvdWdocHV0LWZyb20tbG9jYWwtc3RvcmFnZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gaWYgYmFuZHdpZHRoIHdhcyBub3Qgc2V0IGJ5IG9wdGlvbnMgb3IgcHVsbGVkIGZyb20gbG9jYWwgc3RvcmFnZSwgc3RhcnQgcGxheWxpc3RcbiAgICAvLyBzZWxlY3Rpb24gYXQgYSByZWFzb25hYmxlIGJhbmR3aWR0aFxuXG5cbiAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9uc18uYmFuZHdpZHRoICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5vcHRpb25zXy5iYW5kd2lkdGggPSBDb25maWcuSU5JVElBTF9CQU5EV0lEVEg7XG4gICAgfSAvLyBJZiB0aGUgYmFuZHdpZHRoIG51bWJlciBpcyB1bmNoYW5nZWQgZnJvbSB0aGUgaW5pdGlhbCBzZXR0aW5nXG4gICAgLy8gdGhlbiB0aGlzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGUgZW5hYmxlTG93SW5pdGlhbFBsYXlsaXN0IG9wdGlvblxuXG5cbiAgICB0aGlzLm9wdGlvbnNfLmVuYWJsZUxvd0luaXRpYWxQbGF5bGlzdCA9IHRoaXMub3B0aW9uc18uZW5hYmxlTG93SW5pdGlhbFBsYXlsaXN0ICYmIHRoaXMub3B0aW9uc18uYmFuZHdpZHRoID09PSBDb25maWcuSU5JVElBTF9CQU5EV0lEVEg7IC8vIGdyYWIgb3B0aW9ucyBwYXNzZWQgdG8gcGxheWVyLnNyY1xuXG4gICAgWyd3aXRoQ3JlZGVudGlhbHMnLCAndXNlRGV2aWNlUGl4ZWxSYXRpbycsICdsaW1pdFJlbmRpdGlvbkJ5UGxheWVyRGltZW5zaW9ucycsICdiYW5kd2lkdGgnLCAnc21vb3RoUXVhbGl0eUNoYW5nZScsICdjdXN0b21UYWdQYXJzZXJzJywgJ2N1c3RvbVRhZ01hcHBlcnMnLCAnaGFuZGxlTWFuaWZlc3RSZWRpcmVjdHMnLCAnY2FjaGVFbmNyeXB0aW9uS2V5cycsICdoYW5kbGVQYXJ0aWFsRGF0YSddLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgaWYgKHR5cGVvZiBfdGhpczIuc291cmNlX1tvcHRpb25dICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfdGhpczIub3B0aW9uc19bb3B0aW9uXSA9IF90aGlzMi5zb3VyY2VfW29wdGlvbl07XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5saW1pdFJlbmRpdGlvbkJ5UGxheWVyRGltZW5zaW9ucyA9IHRoaXMub3B0aW9uc18ubGltaXRSZW5kaXRpb25CeVBsYXllckRpbWVuc2lvbnM7XG4gICAgdGhpcy51c2VEZXZpY2VQaXhlbFJhdGlvID0gdGhpcy5vcHRpb25zXy51c2VEZXZpY2VQaXhlbFJhdGlvO1xuICB9XG4gIC8qKlxuICAgKiBjYWxsZWQgd2hlbiBwbGF5ZXIuc3JjIGdldHMgY2FsbGVkLCBoYW5kbGUgYSBuZXcgc291cmNlXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzcmMgdGhlIHNvdXJjZSBvYmplY3QgdG8gaGFuZGxlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNyYyA9IGZ1bmN0aW9uIHNyYyhfc3JjLCB0eXBlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7IC8vIGRvIG5vdGhpbmcgaWYgdGhlIHNyYyBpcyBmYWxzZXlcblxuXG4gICAgaWYgKCFfc3JjKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRPcHRpb25zXygpOyAvLyBhZGQgbWFzdGVyIHBsYXlsaXN0IGNvbnRyb2xsZXIgb3B0aW9uc1xuXG4gICAgdGhpcy5vcHRpb25zXy5zcmMgPSBleHBhbmREYXRhVXJpKHRoaXMuc291cmNlXy5zcmMpO1xuICAgIHRoaXMub3B0aW9uc18udGVjaCA9IHRoaXMudGVjaF87XG4gICAgdGhpcy5vcHRpb25zXy5leHRlcm5WaHMgPSBWaHMkMTtcbiAgICB0aGlzLm9wdGlvbnNfLnNvdXJjZVR5cGUgPSBzaW1wbGVUeXBlRnJvbVNvdXJjZVR5cGUodHlwZSk7IC8vIFdoZW5ldmVyIHdlIHNlZWsgaW50ZXJuYWxseSwgd2Ugc2hvdWxkIHVwZGF0ZSB0aGUgdGVjaFxuXG4gICAgdGhpcy5vcHRpb25zXy5zZWVrVG8gPSBmdW5jdGlvbiAodGltZSkge1xuICAgICAgX3RoaXMzLnRlY2hfLnNldEN1cnJlbnRUaW1lKHRpbWUpO1xuICAgIH07XG5cbiAgICB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8gPSBuZXcgTWFzdGVyUGxheWxpc3RDb250cm9sbGVyKHRoaXMub3B0aW9uc18pO1xuICAgIHRoaXMucGxheWJhY2tXYXRjaGVyXyA9IG5ldyBQbGF5YmFja1dhdGNoZXIodmlkZW9qcyQxLm1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnNfLCB7XG4gICAgICBzZWVrYWJsZTogZnVuY3Rpb24gc2Vla2FibGUoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMuc2Vla2FibGUoKTtcbiAgICAgIH0sXG4gICAgICBtZWRpYTogZnVuY3Rpb24gbWVkaWEoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tZWRpYSgpO1xuICAgICAgfSxcbiAgICAgIG1hc3RlclBsYXlsaXN0Q29udHJvbGxlcjogdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfXG4gICAgfSkpO1xuICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5vbignZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGxheWVyID0gdmlkZW9qcyQxLnBsYXllcnNbX3RoaXMzLnRlY2hfLm9wdGlvbnNfLnBsYXllcklkXTtcbiAgICAgIHZhciBlcnJvciA9IF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLmVycm9yO1xuXG4gICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiAhZXJyb3IuY29kZSkge1xuICAgICAgICBlcnJvci5jb2RlID0gMztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgICBlcnJvciA9IHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvcixcbiAgICAgICAgICBjb2RlOiAzXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHBsYXllci5lcnJvcihlcnJvcik7XG4gICAgfSk7IC8vIGB0aGlzYCBpbiBzZWxlY3RQbGF5bGlzdCBzaG91bGQgYmUgdGhlIFZoc0hhbmRsZXIgZm9yIGJhY2t3YXJkc1xuICAgIC8vIGNvbXBhdGliaWxpdHkgd2l0aCA8IHYyXG5cbiAgICB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8uc2VsZWN0UGxheWxpc3QgPSB0aGlzLnNlbGVjdFBsYXlsaXN0ID8gdGhpcy5zZWxlY3RQbGF5bGlzdC5iaW5kKHRoaXMpIDogVmhzJDEuU1RBTkRBUkRfUExBWUxJU1RfU0VMRUNUT1IuYmluZCh0aGlzKTtcbiAgICB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8uc2VsZWN0SW5pdGlhbFBsYXlsaXN0ID0gVmhzJDEuSU5JVElBTF9QTEFZTElTVF9TRUxFQ1RPUi5iaW5kKHRoaXMpOyAvLyByZS1leHBvc2Ugc29tZSBpbnRlcm5hbCBvYmplY3RzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIDwgdjJcblxuICAgIHRoaXMucGxheWxpc3RzID0gdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1hc3RlclBsYXlsaXN0TG9hZGVyXztcbiAgICB0aGlzLm1lZGlhU291cmNlID0gdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhU291cmNlOyAvLyBQcm94eSBhc3NpZ25tZW50IG9mIHNvbWUgcHJvcGVydGllcyB0byB0aGUgbWFzdGVyIHBsYXlsaXN0XG4gICAgLy8gY29udHJvbGxlci4gVXNpbmcgYSBjdXN0b20gcHJvcGVydHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgLy8gd2l0aCA8IHYyXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICBzZWxlY3RQbGF5bGlzdDoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLnNlbGVjdFBsYXlsaXN0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3RQbGF5bGlzdCkge1xuICAgICAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5zZWxlY3RQbGF5bGlzdCA9IHNlbGVjdFBsYXlsaXN0LmJpbmQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0aHJvdWdocHV0OiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ubWFpblNlZ21lbnRMb2FkZXJfLnRocm91Z2hwdXQucmF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodGhyb3VnaHB1dCkge1xuICAgICAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tYWluU2VnbWVudExvYWRlcl8udGhyb3VnaHB1dC5yYXRlID0gdGhyb3VnaHB1dDsgLy8gQnkgc2V0dGluZyBgY291bnRgIHRvIDEgdGhlIHRocm91Z2hwdXQgdmFsdWUgYmVjb21lcyB0aGUgc3RhcnRpbmcgdmFsdWVcbiAgICAgICAgICAvLyBmb3IgdGhlIGN1bXVsYXRpdmUgYXZlcmFnZVxuXG4gICAgICAgICAgdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1haW5TZWdtZW50TG9hZGVyXy50aHJvdWdocHV0LmNvdW50ID0gMTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGJhbmR3aWR0aDoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1haW5TZWdtZW50TG9hZGVyXy5iYW5kd2lkdGg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KGJhbmR3aWR0aCkge1xuICAgICAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tYWluU2VnbWVudExvYWRlcl8uYmFuZHdpZHRoID0gYmFuZHdpZHRoOyAvLyBzZXR0aW5nIHRoZSBiYW5kd2lkdGggbWFudWFsbHkgcmVzZXRzIHRoZSB0aHJvdWdocHV0IGNvdW50ZXJcbiAgICAgICAgICAvLyBgY291bnRgIGlzIHNldCB0byB6ZXJvIHRoYXQgY3VycmVudCB2YWx1ZSBvZiBgcmF0ZWAgaXNuJ3QgaW5jbHVkZWRcbiAgICAgICAgICAvLyBpbiB0aGUgY3VtdWxhdGl2ZSBhdmVyYWdlXG5cbiAgICAgICAgICB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ubWFpblNlZ21lbnRMb2FkZXJfLnRocm91Z2hwdXQgPSB7XG4gICAgICAgICAgICByYXRlOiAwLFxuICAgICAgICAgICAgY291bnQ6IDBcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIGBzeXN0ZW1CYW5kd2lkdGhgIGlzIGEgY29tYmluYXRpb24gb2YgdHdvIHNlcmlhbCBwcm9jZXNzZXMgYml0LXJhdGVzLiBUaGUgZmlyc3RcbiAgICAgICAqIGlzIHRoZSBuZXR3b3JrIGJpdHJhdGUgcHJvdmlkZWQgYnkgYGJhbmR3aWR0aGAgYW5kIHRoZSBzZWNvbmQgaXMgdGhlIGJpdHJhdGUgb2ZcbiAgICAgICAqIHRoZSBlbnRpcmUgcHJvY2VzcyBhZnRlciB0aGF0IC0gZGVjcnlwdGlvbiwgdHJhbnNtdXhpbmcsIGFuZCBhcHBlbmRpbmcgLSBwcm92aWRlZFxuICAgICAgICogYnkgYHRocm91Z2hwdXRgLlxuICAgICAgICpcbiAgICAgICAqIFNpbmNlIHRoZSB0d28gcHJvY2VzcyBhcmUgc2VyaWFsLCB0aGUgb3ZlcmFsbCBzeXN0ZW0gYmFuZHdpZHRoIGlzIGdpdmVuIGJ5OlxuICAgICAgICogICBzeXNCYW5kd2lkdGggPSAxIC8gKDEgLyBiYW5kd2lkdGggKyAxIC8gdGhyb3VnaHB1dClcbiAgICAgICAqL1xuICAgICAgc3lzdGVtQmFuZHdpZHRoOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHZhciBpbnZCYW5kd2lkdGggPSAxIC8gKHRoaXMuYmFuZHdpZHRoIHx8IDEpO1xuICAgICAgICAgIHZhciBpbnZUaHJvdWdocHV0O1xuXG4gICAgICAgICAgaWYgKHRoaXMudGhyb3VnaHB1dCA+IDApIHtcbiAgICAgICAgICAgIGludlRocm91Z2hwdXQgPSAxIC8gdGhpcy50aHJvdWdocHV0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnZUaHJvdWdocHV0ID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc3lzdGVtQml0cmF0ZSA9IE1hdGguZmxvb3IoMSAvIChpbnZCYW5kd2lkdGggKyBpbnZUaHJvdWdocHV0KSk7XG4gICAgICAgICAgcmV0dXJuIHN5c3RlbUJpdHJhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge1xuICAgICAgICAgIHZpZGVvanMkMS5sb2cuZXJyb3IoJ1RoZSBcInN5c3RlbUJhbmR3aWR0aFwiIHByb3BlcnR5IGlzIHJlYWQtb25seScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zXy5iYW5kd2lkdGgpIHtcbiAgICAgIHRoaXMuYmFuZHdpZHRoID0gdGhpcy5vcHRpb25zXy5iYW5kd2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9uc18udGhyb3VnaHB1dCkge1xuICAgICAgdGhpcy50aHJvdWdocHV0ID0gdGhpcy5vcHRpb25zXy50aHJvdWdocHV0O1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMuc3RhdHMsIHtcbiAgICAgIGJhbmR3aWR0aDoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLmJhbmR3aWR0aCB8fCAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgbWVkaWFSZXF1ZXN0czoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ubWVkaWFSZXF1ZXN0c18oKSB8fCAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgbWVkaWFSZXF1ZXN0c0Fib3J0ZWQ6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhUmVxdWVzdHNBYm9ydGVkXygpIHx8IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBtZWRpYVJlcXVlc3RzVGltZWRvdXQ6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhUmVxdWVzdHNUaW1lZG91dF8oKSB8fCAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgbWVkaWFSZXF1ZXN0c0Vycm9yZWQ6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhUmVxdWVzdHNFcnJvcmVkXygpIHx8IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBtZWRpYVRyYW5zZmVyRHVyYXRpb246IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhVHJhbnNmZXJEdXJhdGlvbl8oKSB8fCAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgbWVkaWFCeXRlc1RyYW5zZmVycmVkOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tZWRpYUJ5dGVzVHJhbnNmZXJyZWRfKCkgfHwgMDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG1lZGlhU2Vjb25kc0xvYWRlZDoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ubWVkaWFTZWNvbmRzTG9hZGVkXygpIHx8IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBidWZmZXJlZDoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGltZVJhbmdlc1RvQXJyYXkoX3RoaXMzLnRlY2hfLmJ1ZmZlcmVkKCkpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgY3VycmVudFRpbWU6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy50ZWNoXy5jdXJyZW50VGltZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgY3VycmVudFNvdXJjZToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLnRlY2hfLmN1cnJlbnRTb3VyY2VfO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgY3VycmVudFRlY2g6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy50ZWNoXy5uYW1lXztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGR1cmF0aW9uOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMudGVjaF8uZHVyYXRpb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG1hc3Rlcjoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLnBsYXlsaXN0cy5tYXN0ZXI7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBwbGF5ZXJEaW1lbnNpb25zOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMudGVjaF8uY3VycmVudERpbWVuc2lvbnMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHNlZWthYmxlOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aW1lUmFuZ2VzVG9BcnJheShfdGhpczMudGVjaF8uc2Vla2FibGUoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICB0aW1lc3RhbXA6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICB2aWRlb1BsYXliYWNrUXVhbGl0eToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLnRlY2hfLmdldFZpZGVvUGxheWJhY2tRdWFsaXR5KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnRlY2hfLm9uZSgnY2FucGxheScsIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5zZXR1cEZpcnN0UGxheS5iaW5kKHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXykpO1xuICAgIHRoaXMudGVjaF8ub24oJ2JhbmR3aWR0aHVwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpczMub3B0aW9uc18udXNlQmFuZHdpZHRoRnJvbUxvY2FsU3RvcmFnZSkge1xuICAgICAgICB1cGRhdGVWaHNMb2NhbFN0b3JhZ2Uoe1xuICAgICAgICAgIGJhbmR3aWR0aDogX3RoaXMzLmJhbmR3aWR0aCxcbiAgICAgICAgICB0aHJvdWdocHV0OiBNYXRoLnJvdW5kKF90aGlzMy50aHJvdWdocHV0KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8ub24oJ3NlbGVjdGVkaW5pdGlhbG1lZGlhJywgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gQWRkIHRoZSBtYW51YWwgcmVuZGl0aW9uIG1peC1pbiB0byBWaHNIYW5kbGVyXG4gICAgICByZW5kaXRpb25TZWxlY3Rpb25NaXhpbihfdGhpczMpO1xuICAgIH0pO1xuICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5zb3VyY2VVcGRhdGVyXy5vbigncmVhZHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXVkaW9QbGF5bGlzdExvYWRlciA9IF90aGlzMy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhVHlwZXNfLkFVRElPLmFjdGl2ZVBsYXlsaXN0TG9hZGVyO1xuICAgICAgc2V0dXBFbWVPcHRpb25zKHtcbiAgICAgICAgcGxheWVyOiBfdGhpczMucGxheWVyXyxcbiAgICAgICAgc291cmNlS2V5U3lzdGVtczogX3RoaXMzLnNvdXJjZV8ua2V5U3lzdGVtcyxcbiAgICAgICAgbWVkaWE6IF90aGlzMy5wbGF5bGlzdHMubWVkaWEoKSxcbiAgICAgICAgYXVkaW9NZWRpYTogYXVkaW9QbGF5bGlzdExvYWRlciAmJiBhdWRpb1BsYXlsaXN0TG9hZGVyLm1lZGlhKCksXG4gICAgICAgIG1haW5QbGF5bGlzdHM6IF90aGlzMy5wbGF5bGlzdHMubWFzdGVyLnBsYXlsaXN0c1xuICAgICAgfSk7XG4gICAgfSk7IC8vIHRoZSBiYW5kd2lkdGggb2YgdGhlIHByaW1hcnkgc2VnbWVudCBsb2FkZXIgaXMgb3VyIGJlc3RcbiAgICAvLyBlc3RpbWF0ZSBvZiBvdmVyYWxsIGJhbmR3aWR0aFxuXG4gICAgdGhpcy5vbih0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8sICdwcm9ncmVzcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudGVjaF8udHJpZ2dlcigncHJvZ3Jlc3MnKTtcbiAgICB9KTsgLy8gSW4gdGhlIGxpdmUgY2FzZSwgd2UgbmVlZCB0byBpZ25vcmUgdGhlIHZlcnkgZmlyc3QgYHNlZWtpbmdgIGV2ZW50IHNpbmNlXG4gICAgLy8gdGhhdCB3aWxsIGJlIHRoZSByZXN1bHQgb2YgdGhlIHNlZWstdG8tbGl2ZSBiZWhhdmlvclxuXG4gICAgdGhpcy5vbih0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8sICdmaXJzdHBsYXknLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmlnbm9yZU5leHRTZWVraW5nRXZlbnRfID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB0aGlzLnNldHVwUXVhbGl0eUxldmVsc18oKTsgLy8gZG8gbm90aGluZyBpZiB0aGUgdGVjaCBoYXMgYmVlbiBkaXNwb3NlZCBhbHJlYWR5XG4gICAgLy8gdGhpcyBjYW4gb2NjdXIgaWYgc29tZW9uZSBzZXRzIHRoZSBzcmMgaW4gcGxheWVyLnJlYWR5KCksIGZvciBpbnN0YW5jZVxuXG4gICAgaWYgKCF0aGlzLnRlY2hfLmVsKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm1lZGlhU291cmNlVXJsXyA9IHdpbmRvdyQxLlVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhU291cmNlKTtcbiAgICB0aGlzLnRlY2hfLnNyYyh0aGlzLm1lZGlhU291cmNlVXJsXyk7XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBxdWFsaXR5IGxldmVscyBhbmQgc2V0cyBsaXN0ZW5lcnMgdG8gdXBkYXRlIHRoZW0uXG4gICAqXG4gICAqIEBtZXRob2Qgc2V0dXBRdWFsaXR5TGV2ZWxzX1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXR1cFF1YWxpdHlMZXZlbHNfID0gZnVuY3Rpb24gc2V0dXBRdWFsaXR5TGV2ZWxzXygpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBwbGF5ZXIgPSB2aWRlb2pzJDEucGxheWVyc1t0aGlzLnRlY2hfLm9wdGlvbnNfLnBsYXllcklkXTsgLy8gaWYgdGhlcmUgaXNuJ3QgYSBwbGF5ZXIgb3IgdGhlcmUgaXNuJ3QgYSBxdWFsaXR5TGV2ZWxzIHBsdWdpblxuICAgIC8vIG9yIHF1YWxpdHlMZXZlbHNfIGxpc3RlbmVycyBoYXZlIGFscmVhZHkgYmVlbiBzZXR1cCwgZG8gbm90aGluZy5cblxuICAgIGlmICghcGxheWVyIHx8ICFwbGF5ZXIucXVhbGl0eUxldmVscyB8fCB0aGlzLnF1YWxpdHlMZXZlbHNfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5xdWFsaXR5TGV2ZWxzXyA9IHBsYXllci5xdWFsaXR5TGV2ZWxzKCk7XG4gICAgdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm9uKCdzZWxlY3RlZGluaXRpYWxtZWRpYScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZVZoc0xvYWRlZE1ldGFkYXRhKF90aGlzNC5xdWFsaXR5TGV2ZWxzXywgX3RoaXM0KTtcbiAgICB9KTtcbiAgICB0aGlzLnBsYXlsaXN0cy5vbignbWVkaWFjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVWaHNNZWRpYUNoYW5nZShfdGhpczQucXVhbGl0eUxldmVsc18sIF90aGlzNC5wbGF5bGlzdHMpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiByZXR1cm4gdGhlIHZlcnNpb25cbiAgICovXG4gIDtcblxuICBWaHNIYW5kbGVyLnZlcnNpb24gPSBmdW5jdGlvbiB2ZXJzaW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnQHZpZGVvanMvaHR0cC1zdHJlYW1pbmcnOiB2aHNWZXJzaW9uLFxuICAgICAgJ211eC5qcyc6IG11eFZlcnNpb24sXG4gICAgICAnbXBkLXBhcnNlcic6IG1wZFZlcnNpb24sXG4gICAgICAnbTN1OC1wYXJzZXInOiBtM3U4VmVyc2lvbixcbiAgICAgICdhZXMtZGVjcnlwdGVyJzogYWVzVmVyc2lvblxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIHJldHVybiB0aGUgdmVyc2lvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by52ZXJzaW9uID0gZnVuY3Rpb24gdmVyc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci52ZXJzaW9uKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbkNoYW5nZVR5cGUgPSBmdW5jdGlvbiBjYW5DaGFuZ2VUeXBlKCkge1xuICAgIHJldHVybiBTb3VyY2VVcGRhdGVyLmNhbkNoYW5nZVR5cGUoKTtcbiAgfVxuICAvKipcbiAgICogQmVnaW4gcGxheWluZyB0aGUgdmlkZW8uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KCkge1xuICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5wbGF5KCk7XG4gIH1cbiAgLyoqXG4gICAqIGEgd3JhcHBlciBhcm91bmQgdGhlIGZ1bmN0aW9uIGluIE1hc3RlclBsYXlsaXN0Q29udHJvbGxlclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRDdXJyZW50VGltZSA9IGZ1bmN0aW9uIHNldEN1cnJlbnRUaW1lKGN1cnJlbnRUaW1lKSB7XG4gICAgdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLnNldEN1cnJlbnRUaW1lKGN1cnJlbnRUaW1lKTtcbiAgfVxuICAvKipcbiAgICogYSB3cmFwcGVyIGFyb3VuZCB0aGUgZnVuY3Rpb24gaW4gTWFzdGVyUGxheWxpc3RDb250cm9sbGVyXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmR1cmF0aW9uID0gZnVuY3Rpb24gZHVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5kdXJhdGlvbigpO1xuICB9XG4gIC8qKlxuICAgKiBhIHdyYXBwZXIgYXJvdW5kIHRoZSBmdW5jdGlvbiBpbiBNYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2Vla2FibGUgPSBmdW5jdGlvbiBzZWVrYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLnNlZWthYmxlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEFib3J0IGFsbCBvdXRzdGFuZGluZyB3b3JrIGFuZCBjbGVhbnVwLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5wbGF5YmFja1dhdGNoZXJfKSB7XG4gICAgICB0aGlzLnBsYXliYWNrV2F0Y2hlcl8uZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1hc3RlclBsYXlsaXN0Q29udHJvbGxlcl8pIHtcbiAgICAgIHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucXVhbGl0eUxldmVsc18pIHtcbiAgICAgIHRoaXMucXVhbGl0eUxldmVsc18uZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBsYXllcl8pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnBsYXllcl8udmhzO1xuICAgICAgZGVsZXRlIHRoaXMucGxheWVyXy5kYXNoO1xuICAgICAgZGVsZXRlIHRoaXMucGxheWVyXy5obHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGVjaF8gJiYgdGhpcy50ZWNoXy52aHMpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnRlY2hfLnZocztcbiAgICB9IC8vIGRvbid0IGNoZWNrIHRoaXMudGVjaF8uaGxzIGFzIGl0IHdpbGwgbG9nIGEgZGVwcmVjYXRlZCB3YXJuaW5nXG5cblxuICAgIGlmICh0aGlzLnRlY2hfKSB7XG4gICAgICBkZWxldGUgdGhpcy50ZWNoXy5obHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2VVcmxfICYmIHdpbmRvdyQxLlVSTC5yZXZva2VPYmplY3RVUkwpIHtcbiAgICAgIHdpbmRvdyQxLlVSTC5yZXZva2VPYmplY3RVUkwodGhpcy5tZWRpYVNvdXJjZVVybF8pO1xuICAgICAgdGhpcy5tZWRpYVNvdXJjZVVybF8gPSBudWxsO1xuICAgIH1cblxuICAgIF9Db21wb25lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29udmVydFRvUHJvZ3JhbVRpbWUgPSBmdW5jdGlvbiBjb252ZXJ0VG9Qcm9ncmFtVGltZSh0aW1lLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBnZXRQcm9ncmFtVGltZSh7XG4gICAgICBwbGF5bGlzdDogdGhpcy5tYXN0ZXJQbGF5bGlzdENvbnRyb2xsZXJfLm1lZGlhKCksXG4gICAgICB0aW1lOiB0aW1lLFxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgfSk7XG4gIH0gLy8gdGhlIHBsYXllciBtdXN0IGJlIHBsYXlpbmcgYmVmb3JlIGNhbGxpbmcgdGhpc1xuICA7XG5cbiAgX3Byb3RvLnNlZWtUb1Byb2dyYW1UaW1lID0gZnVuY3Rpb24gc2Vla1RvUHJvZ3JhbVRpbWUkMShwcm9ncmFtVGltZSwgY2FsbGJhY2ssIHBhdXNlQWZ0ZXJTZWVrLCByZXRyeUNvdW50KSB7XG4gICAgaWYgKHBhdXNlQWZ0ZXJTZWVrID09PSB2b2lkIDApIHtcbiAgICAgIHBhdXNlQWZ0ZXJTZWVrID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocmV0cnlDb3VudCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXRyeUNvdW50ID0gMjtcbiAgICB9XG5cbiAgICByZXR1cm4gc2Vla1RvUHJvZ3JhbVRpbWUoe1xuICAgICAgcHJvZ3JhbVRpbWU6IHByb2dyYW1UaW1lLFxuICAgICAgcGxheWxpc3Q6IHRoaXMubWFzdGVyUGxheWxpc3RDb250cm9sbGVyXy5tZWRpYSgpLFxuICAgICAgcmV0cnlDb3VudDogcmV0cnlDb3VudCxcbiAgICAgIHBhdXNlQWZ0ZXJTZWVrOiBwYXVzZUFmdGVyU2VlayxcbiAgICAgIHNlZWtUbzogdGhpcy5vcHRpb25zXy5zZWVrVG8sXG4gICAgICB0ZWNoOiB0aGlzLm9wdGlvbnNfLnRlY2gsXG4gICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gVmhzSGFuZGxlcjtcbn0oQ29tcG9uZW50JDEpO1xuLyoqXG4gKiBUaGUgU291cmNlIEhhbmRsZXIgb2JqZWN0LCB3aGljaCBpbmZvcm1zIHZpZGVvLmpzIHdoYXQgYWRkaXRpb25hbFxuICogTUlNRSB0eXBlcyBhcmUgc3VwcG9ydGVkIGFuZCBzZXRzIHVwIHBsYXliYWNrLiBJdCBpcyByZWdpc3RlcmVkXG4gKiBhdXRvbWF0aWNhbGx5IHRvIHRoZSBhcHByb3ByaWF0ZSB0ZWNoIGJhc2VkIG9uIHRoZSBjYXBhYmlsaXRpZXMgb2ZcbiAqIHRoZSBicm93c2VyIGl0IGlzIHJ1bm5pbmcgaW4uIEl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gdXNlIG9yIG1vZGlmeVxuICogdGhpcyBvYmplY3QgaW4gbm9ybWFsIHVzYWdlLlxuICovXG5cblxudmFyIFZoc1NvdXJjZUhhbmRsZXIgPSB7XG4gIG5hbWU6ICd2aWRlb2pzLWh0dHAtc3RyZWFtaW5nJyxcbiAgVkVSU0lPTjogdmhzVmVyc2lvbixcbiAgY2FuSGFuZGxlU291cmNlOiBmdW5jdGlvbiBjYW5IYW5kbGVTb3VyY2Uoc3JjT2JqLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBsb2NhbE9wdGlvbnMgPSB2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHZpZGVvanMkMS5vcHRpb25zLCBvcHRpb25zKTtcbiAgICByZXR1cm4gVmhzU291cmNlSGFuZGxlci5jYW5QbGF5VHlwZShzcmNPYmoudHlwZSwgbG9jYWxPcHRpb25zKTtcbiAgfSxcbiAgaGFuZGxlU291cmNlOiBmdW5jdGlvbiBoYW5kbGVTb3VyY2Uoc291cmNlLCB0ZWNoLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBsb2NhbE9wdGlvbnMgPSB2aWRlb2pzJDEubWVyZ2VPcHRpb25zKHZpZGVvanMkMS5vcHRpb25zLCBvcHRpb25zKTtcbiAgICB0ZWNoLnZocyA9IG5ldyBWaHNIYW5kbGVyKHNvdXJjZSwgdGVjaCwgbG9jYWxPcHRpb25zKTtcblxuICAgIGlmICghdmlkZW9qcyQxLmhhc093blByb3BlcnR5KCdobHMnKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRlY2gsICdobHMnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHZpZGVvanMkMS5sb2cud2FybigncGxheWVyLnRlY2goKS5obHMgaXMgZGVwcmVjYXRlZC4gVXNlIHBsYXllci50ZWNoKCkudmhzIGluc3RlYWQuJyk7XG4gICAgICAgICAgcmV0dXJuIHRlY2gudmhzO1xuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRlY2gudmhzLnhociA9IHhockZhY3RvcnkoKTtcbiAgICB0ZWNoLnZocy5zcmMoc291cmNlLnNyYywgc291cmNlLnR5cGUpO1xuICAgIHJldHVybiB0ZWNoLnZocztcbiAgfSxcbiAgY2FuUGxheVR5cGU6IGZ1bmN0aW9uIGNhblBsYXlUeXBlKHR5cGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIF92aWRlb2pzJG1lcmdlT3B0aW9ucyA9IHZpZGVvanMkMS5tZXJnZU9wdGlvbnModmlkZW9qcyQxLm9wdGlvbnMsIG9wdGlvbnMpLFxuICAgICAgICBfdmlkZW9qcyRtZXJnZU9wdGlvbnMyID0gX3ZpZGVvanMkbWVyZ2VPcHRpb25zLnZocy5vdmVycmlkZU5hdGl2ZSxcbiAgICAgICAgb3ZlcnJpZGVOYXRpdmUgPSBfdmlkZW9qcyRtZXJnZU9wdGlvbnMyID09PSB2b2lkIDAgPyAhdmlkZW9qcyQxLmJyb3dzZXIuSVNfQU5ZX1NBRkFSSSA6IF92aWRlb2pzJG1lcmdlT3B0aW9uczI7XG5cbiAgICB2YXIgc3VwcG9ydGVkVHlwZSA9IHNpbXBsZVR5cGVGcm9tU291cmNlVHlwZSh0eXBlKTtcbiAgICB2YXIgY2FuVXNlTXNlUGxheWJhY2sgPSBzdXBwb3J0ZWRUeXBlICYmICghVmhzJDEuc3VwcG9ydHNUeXBlTmF0aXZlbHkoc3VwcG9ydGVkVHlwZSkgfHwgb3ZlcnJpZGVOYXRpdmUpO1xuICAgIHJldHVybiBjYW5Vc2VNc2VQbGF5YmFjayA/ICdtYXliZScgOiAnJztcbiAgfVxufTtcbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIHRoZSBuYXRpdmUgTWVkaWFTb3VyY2Ugb2JqZWN0IGV4aXN0cyBhbmQgc3VwcG9ydHNcbiAqIGFuIE1QNCBjb250YWluZXIgd2l0aCBib3RoIEguMjY0IHZpZGVvIGFuZCBBQUMtTEMgYXVkaW8uXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gaWYgIG5hdGl2ZSBtZWRpYSBzb3VyY2VzIGFyZSBzdXBwb3J0ZWRcbiAqL1xuXG52YXIgc3VwcG9ydHNOYXRpdmVNZWRpYVNvdXJjZXMgPSBmdW5jdGlvbiBzdXBwb3J0c05hdGl2ZU1lZGlhU291cmNlcygpIHtcbiAgcmV0dXJuIGJyb3dzZXJTdXBwb3J0c0NvZGVjKCdhdmMxLjRkNDAwZCxtcDRhLjQwLjInKTtcbn07IC8vIHJlZ2lzdGVyIHNvdXJjZSBoYW5kbGVycyB3aXRoIHRoZSBhcHByb3ByaWF0ZSB0ZWNoc1xuXG5cbmlmIChzdXBwb3J0c05hdGl2ZU1lZGlhU291cmNlcygpKSB7XG4gIHZpZGVvanMkMS5nZXRUZWNoKCdIdG1sNScpLnJlZ2lzdGVyU291cmNlSGFuZGxlcihWaHNTb3VyY2VIYW5kbGVyLCAwKTtcbn1cblxudmlkZW9qcyQxLlZoc0hhbmRsZXIgPSBWaHNIYW5kbGVyO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHZpZGVvanMkMSwgJ0hsc0hhbmRsZXInLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHZpZGVvanMkMS5sb2cud2FybigndmlkZW9qcy5IbHNIYW5kbGVyIGlzIGRlcHJlY2F0ZWQuIFVzZSB2aWRlb2pzLlZoc0hhbmRsZXIgaW5zdGVhZC4nKTtcbiAgICByZXR1cm4gVmhzSGFuZGxlcjtcbiAgfSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcbnZpZGVvanMkMS5WaHNTb3VyY2VIYW5kbGVyID0gVmhzU291cmNlSGFuZGxlcjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2aWRlb2pzJDEsICdIbHNTb3VyY2VIYW5kbGVyJywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICB2aWRlb2pzJDEubG9nLndhcm4oJ3ZpZGVvanMuSGxzU291cmNlSGFuZGxlciBpcyBkZXByZWNhdGVkLiAnICsgJ1VzZSB2aWRlb2pzLlZoc1NvdXJjZUhhbmRsZXIgaW5zdGVhZC4nKTtcbiAgICByZXR1cm4gVmhzU291cmNlSGFuZGxlcjtcbiAgfSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcbnZpZGVvanMkMS5WaHMgPSBWaHMkMTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2aWRlb2pzJDEsICdIbHMnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHZpZGVvanMkMS5sb2cud2FybigndmlkZW9qcy5IbHMgaXMgZGVwcmVjYXRlZC4gVXNlIHZpZGVvanMuVmhzIGluc3RlYWQuJyk7XG4gICAgcmV0dXJuIFZocyQxO1xuICB9LFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5pZiAoIXZpZGVvanMkMS51c2UpIHtcbiAgdmlkZW9qcyQxLnJlZ2lzdGVyQ29tcG9uZW50KCdIbHMnLCBWaHMkMSk7XG4gIHZpZGVvanMkMS5yZWdpc3RlckNvbXBvbmVudCgnVmhzJywgVmhzJDEpO1xufVxuXG52aWRlb2pzJDEub3B0aW9ucy52aHMgPSB2aWRlb2pzJDEub3B0aW9ucy52aHMgfHwge307XG52aWRlb2pzJDEub3B0aW9ucy5obHMgPSB2aWRlb2pzJDEub3B0aW9ucy5obHMgfHwge307XG5cbmlmICh2aWRlb2pzJDEucmVnaXN0ZXJQbHVnaW4pIHtcbiAgdmlkZW9qcyQxLnJlZ2lzdGVyUGx1Z2luKCdyZWxvYWRTb3VyY2VPbkVycm9yJywgcmVsb2FkU291cmNlT25FcnJvcik7XG59IGVsc2Uge1xuICB2aWRlb2pzJDEucGx1Z2luKCdyZWxvYWRTb3VyY2VPbkVycm9yJywgcmVsb2FkU291cmNlT25FcnJvcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZpZGVvanMkMTtcbiIsInZhciB0b3BMZXZlbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDpcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9XG52YXIgbWluRG9jID0gcmVxdWlyZSgnbWluLWRvY3VtZW50Jyk7XG5cbnZhciBkb2NjeTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkb2NjeSA9IGRvY3VtZW50O1xufSBlbHNlIHtcbiAgICBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J107XG5cbiAgICBpZiAoIWRvY2N5KSB7XG4gICAgICAgIGRvY2N5ID0gdG9wTGV2ZWxbJ19fR0xPQkFMX0RPQ1VNRU5UX0NBQ0hFQDQnXSA9IG1pbkRvYztcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9jY3k7XG4iLCJ2YXIgdG9VbnNpZ25lZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2JpbicpLnRvVW5zaWduZWQ7XG5cbnZhciB0ZmR0ID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHZlcnNpb246IGRhdGFbMF0sXG4gICAgZmxhZ3M6IG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMSwgNCkpLFxuICAgIGJhc2VNZWRpYURlY29kZVRpbWU6IHRvVW5zaWduZWQoZGF0YVs0XSA8PCAyNCB8IGRhdGFbNV0gPDwgMTYgfCBkYXRhWzZdIDw8IDggfCBkYXRhWzddKVxuICB9O1xuICBpZiAocmVzdWx0LnZlcnNpb24gPT09IDEpIHtcbiAgICByZXN1bHQuYmFzZU1lZGlhRGVjb2RlVGltZSAqPSBNYXRoLnBvdygyLCAzMik7XG4gICAgcmVzdWx0LmJhc2VNZWRpYURlY29kZVRpbWUgKz0gdG9VbnNpZ25lZChkYXRhWzhdIDw8IDI0IHwgZGF0YVs5XSA8PCAxNiB8IGRhdGFbMTBdIDw8IDggfCBkYXRhWzExXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdGZkdDtcblxuIiwiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2Y7IiwiLyoqXG4gKiBtdXguanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBBY2NlcHRzIHByb2dyYW0gZWxlbWVudGFyeSBzdHJlYW0gKFBFUykgZGF0YSBldmVudHMgYW5kIGNvcnJlY3RzXG4gKiBkZWNvZGUgYW5kIHByZXNlbnRhdGlvbiB0aW1lIHN0YW1wcyB0byBhY2NvdW50IGZvciBhIHJvbGxvdmVyXG4gKiBvZiB0aGUgMzMgYml0IHZhbHVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4uL3V0aWxzL3N0cmVhbScpO1xuXG52YXIgTUFYX1RTID0gODU4OTkzNDU5MjtcblxudmFyIFJPX1RIUkVTSCA9IDQyOTQ5NjcyOTY7XG5cbnZhciBUWVBFX1NIQVJFRCA9ICdzaGFyZWQnO1xuXG52YXIgaGFuZGxlUm9sbG92ZXIgPSBmdW5jdGlvbih2YWx1ZSwgcmVmZXJlbmNlKSB7XG4gIHZhciBkaXJlY3Rpb24gPSAxO1xuXG4gIGlmICh2YWx1ZSA+IHJlZmVyZW5jZSkge1xuICAgIC8vIElmIHRoZSBjdXJyZW50IHRpbWVzdGFtcCB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gb3VyIHJlZmVyZW5jZSB0aW1lc3RhbXAgYW5kIHdlIGRldGVjdCBhXG4gICAgLy8gdGltZXN0YW1wIHJvbGxvdmVyLCB0aGlzIG1lYW5zIHRoZSByb2xsIG92ZXIgaXMgaGFwcGVuaW5nIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXG4gICAgLy8gRXhhbXBsZSBzY2VuYXJpbzogRW50ZXIgYSBsb25nIHN0cmVhbS92aWRlbyBqdXN0IGFmdGVyIGEgcm9sbG92ZXIgb2NjdXJyZWQuIFRoZSByZWZlcmVuY2VcbiAgICAvLyBwb2ludCB3aWxsIGJlIHNldCB0byBhIHNtYWxsIG51bWJlciwgZS5nLiAxLiBUaGUgdXNlciB0aGVuIHNlZWtzIGJhY2t3YXJkcyBvdmVyIHRoZVxuICAgIC8vIHJvbGxvdmVyIHBvaW50LiBJbiBsb2FkaW5nIHRoaXMgc2VnbWVudCwgdGhlIHRpbWVzdGFtcCB2YWx1ZXMgd2lsbCBiZSB2ZXJ5IGxhcmdlLFxuICAgIC8vIGUuZy4gMl4zMyAtIDEuIFNpbmNlIHRoaXMgY29tZXMgYmVmb3JlIHRoZSBkYXRhIHdlIGxvYWRlZCBwcmV2aW91c2x5LCB3ZSB3YW50IHRvIGFkanVzdFxuICAgIC8vIHRoZSB0aW1lIHN0YW1wIHRvIGJlIGB2YWx1ZSAtIDJeMzNgLlxuICAgIGRpcmVjdGlvbiA9IC0xO1xuICB9XG5cbiAgLy8gTm90ZTogQSBzZWVrIGZvcndhcmRzIG9yIGJhY2sgdGhhdCBpcyBncmVhdGVyIHRoYW4gdGhlIFJPX1RIUkVTSCAoMl4zMiwgfjEzIGhvdXJzKSB3aWxsXG4gIC8vIGNhdXNlIGFuIGluY29ycmVjdCBhZGp1c3RtZW50LlxuICB3aGlsZSAoTWF0aC5hYnMocmVmZXJlbmNlIC0gdmFsdWUpID4gUk9fVEhSRVNIKSB7XG4gICAgdmFsdWUgKz0gKGRpcmVjdGlvbiAqIE1BWF9UUyk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0gPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBsYXN0RFRTLCByZWZlcmVuY2VEVFM7XG5cbiAgVGltZXN0YW1wUm9sbG92ZXJTdHJlYW0ucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcblxuICAvLyBUaGUgXCJzaGFyZWRcIiB0eXBlIGlzIHVzZWQgaW4gY2FzZXMgd2hlcmUgYSBzdHJlYW0gd2lsbCBjb250YWluIG11eGVkXG4gIC8vIHZpZGVvIGFuZCBhdWRpby4gV2UgY291bGQgdXNlIGB1bmRlZmluZWRgIGhlcmUsIGJ1dCBoYXZpbmcgYSBzdHJpbmdcbiAgLy8gbWFrZXMgZGVidWdnaW5nIGEgbGl0dGxlIGNsZWFyZXIuXG4gIHRoaXMudHlwZV8gPSB0eXBlIHx8IFRZUEVfU0hBUkVEO1xuXG4gIHRoaXMucHVzaCA9IGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgIC8vIEFueSBcInNoYXJlZFwiIHJvbGxvdmVyIHN0cmVhbXMgd2lsbCBhY2NlcHQgX2FsbF8gZGF0YS4gT3RoZXJ3aXNlLFxuICAgIC8vIHN0cmVhbXMgd2lsbCBvbmx5IGFjY2VwdCBkYXRhIHRoYXQgbWF0Y2hlcyB0aGVpciB0eXBlLlxuICAgIGlmICh0aGlzLnR5cGVfICE9PSBUWVBFX1NIQVJFRCAmJiBkYXRhLnR5cGUgIT09IHRoaXMudHlwZV8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocmVmZXJlbmNlRFRTID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZmVyZW5jZURUUyA9IGRhdGEuZHRzO1xuICAgIH1cblxuICAgIGRhdGEuZHRzID0gaGFuZGxlUm9sbG92ZXIoZGF0YS5kdHMsIHJlZmVyZW5jZURUUyk7XG4gICAgZGF0YS5wdHMgPSBoYW5kbGVSb2xsb3ZlcihkYXRhLnB0cywgcmVmZXJlbmNlRFRTKTtcblxuICAgIGxhc3REVFMgPSBkYXRhLmR0cztcblxuICAgIHRoaXMudHJpZ2dlcignZGF0YScsIGRhdGEpO1xuICB9O1xuXG4gIHRoaXMuZmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgICByZWZlcmVuY2VEVFMgPSBsYXN0RFRTO1xuICAgIHRoaXMudHJpZ2dlcignZG9uZScpO1xuICB9O1xuXG4gIHRoaXMuZW5kVGltZWxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmZsdXNoKCk7XG4gICAgdGhpcy50cmlnZ2VyKCdlbmRlZHRpbWVsaW5lJyk7XG4gIH07XG5cbiAgdGhpcy5kaXNjb250aW51aXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmVmZXJlbmNlRFRTID0gdm9pZCAwO1xuICAgIGxhc3REVFMgPSB2b2lkIDA7XG4gIH07XG5cbiAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZGlzY29udGludWl0eSgpO1xuICAgIHRoaXMudHJpZ2dlcigncmVzZXQnKTtcbiAgfTtcbn07XG5cblRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtLnByb3RvdHlwZSA9IG5ldyBTdHJlYW0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFRpbWVzdGFtcFJvbGxvdmVyU3RyZWFtOiBUaW1lc3RhbXBSb2xsb3ZlclN0cmVhbSxcbiAgaGFuZGxlUm9sbG92ZXI6IGhhbmRsZVJvbGxvdmVyXG59O1xuIiwiLyoqXG4gKiBtdXguanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEJyaWdodGNvdmVcbiAqIExpY2Vuc2VkIEFwYWNoZS0yLjAgaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvbXV4LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBQYXJzZSBtcGVnMiB0cmFuc3BvcnQgc3RyZWFtIHBhY2tldHMgdG8gZXh0cmFjdCBiYXNpYyB0aW1pbmcgaW5mb3JtYXRpb25cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3RyZWFtVHlwZXMgPSByZXF1aXJlKCcuLi9tMnRzL3N0cmVhbS10eXBlcy5qcycpO1xudmFyIGhhbmRsZVJvbGxvdmVyID0gcmVxdWlyZSgnLi4vbTJ0cy90aW1lc3RhbXAtcm9sbG92ZXItc3RyZWFtLmpzJykuaGFuZGxlUm9sbG92ZXI7XG52YXIgcHJvYmUgPSB7fTtcbnByb2JlLnRzID0gcmVxdWlyZSgnLi4vbTJ0cy9wcm9iZS5qcycpO1xucHJvYmUuYWFjID0gcmVxdWlyZSgnLi4vYWFjL3V0aWxzLmpzJyk7XG52YXIgT05FX1NFQ09ORF9JTl9UUyA9IHJlcXVpcmUoJy4uL3V0aWxzL2Nsb2NrJykuT05FX1NFQ09ORF9JTl9UUztcblxudmFyXG4gIE1QMlRfUEFDS0VUX0xFTkdUSCA9IDE4OCwgLy8gYnl0ZXNcbiAgU1lOQ19CWVRFID0gMHg0NztcblxuLyoqXG4gKiB3YWxrcyB0aHJvdWdoIHNlZ21lbnQgZGF0YSBsb29raW5nIGZvciBwYXQgYW5kIHBtdCBwYWNrZXRzIHRvIHBhcnNlIG91dFxuICogcHJvZ3JhbSBtYXAgdGFibGUgaW5mb3JtYXRpb25cbiAqL1xudmFyIHBhcnNlUHNpXyA9IGZ1bmN0aW9uKGJ5dGVzLCBwbXQpIHtcbiAgdmFyXG4gICAgc3RhcnRJbmRleCA9IDAsXG4gICAgZW5kSW5kZXggPSBNUDJUX1BBQ0tFVF9MRU5HVEgsXG4gICAgcGFja2V0LCB0eXBlO1xuXG4gIHdoaWxlIChlbmRJbmRleCA8IGJ5dGVzLmJ5dGVMZW5ndGgpIHtcbiAgICAvLyBMb29rIGZvciBhIHBhaXIgb2Ygc3RhcnQgYW5kIGVuZCBzeW5jIGJ5dGVzIGluIHRoZSBkYXRhLi5cbiAgICBpZiAoYnl0ZXNbc3RhcnRJbmRleF0gPT09IFNZTkNfQllURSAmJiBieXRlc1tlbmRJbmRleF0gPT09IFNZTkNfQllURSkge1xuICAgICAgLy8gV2UgZm91bmQgYSBwYWNrZXRcbiAgICAgIHBhY2tldCA9IGJ5dGVzLnN1YmFycmF5KHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICAgIHR5cGUgPSBwcm9iZS50cy5wYXJzZVR5cGUocGFja2V0LCBwbXQucGlkKTtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3BhdCc6XG4gICAgICAgICAgaWYgKCFwbXQucGlkKSB7XG4gICAgICAgICAgICBwbXQucGlkID0gcHJvYmUudHMucGFyc2VQYXQocGFja2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BtdCc6XG4gICAgICAgICAgaWYgKCFwbXQudGFibGUpIHtcbiAgICAgICAgICAgIHBtdC50YWJsZSA9IHByb2JlLnRzLnBhcnNlUG10KHBhY2tldCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBGb3VuZCB0aGUgcGF0IGFuZCBwbXQsIHdlIGNhbiBzdG9wIHdhbGtpbmcgdGhlIHNlZ21lbnRcbiAgICAgIGlmIChwbXQucGlkICYmIHBtdC50YWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0SW5kZXggKz0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgZW5kSW5kZXggKz0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ2V0IGhlcmUsIHdlIGhhdmUgc29tZWhvdyBiZWNvbWUgZGUtc3luY2hyb25pemVkIGFuZCB3ZSBuZWVkIHRvIHN0ZXBcbiAgICAvLyBmb3J3YXJkIG9uZSBieXRlIGF0IGEgdGltZSB1bnRpbCB3ZSBmaW5kIGEgcGFpciBvZiBzeW5jIGJ5dGVzIHRoYXQgZGVub3RlXG4gICAgLy8gYSBwYWNrZXRcbiAgICBzdGFydEluZGV4Kys7XG4gICAgZW5kSW5kZXgrKztcbiAgfVxufTtcblxuLyoqXG4gKiB3YWxrcyB0aHJvdWdoIHRoZSBzZWdtZW50IGRhdGEgZnJvbSB0aGUgc3RhcnQgYW5kIGVuZCB0byBnZXQgdGltaW5nIGluZm9ybWF0aW9uXG4gKiBmb3IgdGhlIGZpcnN0IGFuZCBsYXN0IGF1ZGlvIHBlcyBwYWNrZXRzXG4gKi9cbnZhciBwYXJzZUF1ZGlvUGVzXyA9IGZ1bmN0aW9uKGJ5dGVzLCBwbXQsIHJlc3VsdCkge1xuICB2YXJcbiAgICBzdGFydEluZGV4ID0gMCxcbiAgICBlbmRJbmRleCA9IE1QMlRfUEFDS0VUX0xFTkdUSCxcbiAgICBwYWNrZXQsIHR5cGUsIHBlc1R5cGUsIHB1c2ksIHBhcnNlZDtcblxuICB2YXIgZW5kTG9vcCA9IGZhbHNlO1xuXG4gIC8vIFN0YXJ0IHdhbGtpbmcgZnJvbSBzdGFydCBvZiBzZWdtZW50IHRvIGdldCBmaXJzdCBhdWRpbyBwYWNrZXRcbiAgd2hpbGUgKGVuZEluZGV4IDw9IGJ5dGVzLmJ5dGVMZW5ndGgpIHtcbiAgICAvLyBMb29rIGZvciBhIHBhaXIgb2Ygc3RhcnQgYW5kIGVuZCBzeW5jIGJ5dGVzIGluIHRoZSBkYXRhLi5cbiAgICBpZiAoYnl0ZXNbc3RhcnRJbmRleF0gPT09IFNZTkNfQllURSAmJlxuICAgICAgICAoYnl0ZXNbZW5kSW5kZXhdID09PSBTWU5DX0JZVEUgfHwgZW5kSW5kZXggPT09IGJ5dGVzLmJ5dGVMZW5ndGgpKSB7XG4gICAgICAvLyBXZSBmb3VuZCBhIHBhY2tldFxuICAgICAgcGFja2V0ID0gYnl0ZXMuc3ViYXJyYXkoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgdHlwZSA9IHByb2JlLnRzLnBhcnNlVHlwZShwYWNrZXQsIHBtdC5waWQpO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAncGVzJzpcbiAgICAgICAgICBwZXNUeXBlID0gcHJvYmUudHMucGFyc2VQZXNUeXBlKHBhY2tldCwgcG10LnRhYmxlKTtcbiAgICAgICAgICBwdXNpID0gcHJvYmUudHMucGFyc2VQYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yKHBhY2tldCk7XG4gICAgICAgICAgaWYgKHBlc1R5cGUgPT09ICdhdWRpbycgJiYgcHVzaSkge1xuICAgICAgICAgICAgcGFyc2VkID0gcHJvYmUudHMucGFyc2VQZXNUaW1lKHBhY2tldCk7XG4gICAgICAgICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgICAgICAgIHBhcnNlZC50eXBlID0gJ2F1ZGlvJztcbiAgICAgICAgICAgICAgcmVzdWx0LmF1ZGlvLnB1c2gocGFyc2VkKTtcbiAgICAgICAgICAgICAgZW5kTG9vcCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW5kTG9vcCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgc3RhcnRJbmRleCArPSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gICAgICBlbmRJbmRleCArPSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgaGF2ZSBzb21laG93IGJlY29tZSBkZS1zeW5jaHJvbml6ZWQgYW5kIHdlIG5lZWQgdG8gc3RlcFxuICAgIC8vIGZvcndhcmQgb25lIGJ5dGUgYXQgYSB0aW1lIHVudGlsIHdlIGZpbmQgYSBwYWlyIG9mIHN5bmMgYnl0ZXMgdGhhdCBkZW5vdGVcbiAgICAvLyBhIHBhY2tldFxuICAgIHN0YXJ0SW5kZXgrKztcbiAgICBlbmRJbmRleCsrO1xuICB9XG5cbiAgLy8gU3RhcnQgd2Fsa2luZyBmcm9tIGVuZCBvZiBzZWdtZW50IHRvIGdldCBsYXN0IGF1ZGlvIHBhY2tldFxuICBlbmRJbmRleCA9IGJ5dGVzLmJ5dGVMZW5ndGg7XG4gIHN0YXJ0SW5kZXggPSBlbmRJbmRleCAtIE1QMlRfUEFDS0VUX0xFTkdUSDtcbiAgZW5kTG9vcCA9IGZhbHNlO1xuICB3aGlsZSAoc3RhcnRJbmRleCA+PSAwKSB7XG4gICAgLy8gTG9vayBmb3IgYSBwYWlyIG9mIHN0YXJ0IGFuZCBlbmQgc3luYyBieXRlcyBpbiB0aGUgZGF0YS4uXG4gICAgaWYgKGJ5dGVzW3N0YXJ0SW5kZXhdID09PSBTWU5DX0JZVEUgJiZcbiAgICAgICAgKGJ5dGVzW2VuZEluZGV4XSA9PT0gU1lOQ19CWVRFIHx8IGVuZEluZGV4ID09PSBieXRlcy5ieXRlTGVuZ3RoKSkge1xuICAgICAgLy8gV2UgZm91bmQgYSBwYWNrZXRcbiAgICAgIHBhY2tldCA9IGJ5dGVzLnN1YmFycmF5KHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICAgIHR5cGUgPSBwcm9iZS50cy5wYXJzZVR5cGUocGFja2V0LCBwbXQucGlkKTtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3Blcyc6XG4gICAgICAgICAgcGVzVHlwZSA9IHByb2JlLnRzLnBhcnNlUGVzVHlwZShwYWNrZXQsIHBtdC50YWJsZSk7XG4gICAgICAgICAgcHVzaSA9IHByb2JlLnRzLnBhcnNlUGF5bG9hZFVuaXRTdGFydEluZGljYXRvcihwYWNrZXQpO1xuICAgICAgICAgIGlmIChwZXNUeXBlID09PSAnYXVkaW8nICYmIHB1c2kpIHtcbiAgICAgICAgICAgIHBhcnNlZCA9IHByb2JlLnRzLnBhcnNlUGVzVGltZShwYWNrZXQpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICAgICAgICBwYXJzZWQudHlwZSA9ICdhdWRpbyc7XG4gICAgICAgICAgICAgIHJlc3VsdC5hdWRpby5wdXNoKHBhcnNlZCk7XG4gICAgICAgICAgICAgIGVuZExvb3AgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZExvb3ApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0SW5kZXggLT0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgZW5kSW5kZXggLT0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ2V0IGhlcmUsIHdlIGhhdmUgc29tZWhvdyBiZWNvbWUgZGUtc3luY2hyb25pemVkIGFuZCB3ZSBuZWVkIHRvIHN0ZXBcbiAgICAvLyBmb3J3YXJkIG9uZSBieXRlIGF0IGEgdGltZSB1bnRpbCB3ZSBmaW5kIGEgcGFpciBvZiBzeW5jIGJ5dGVzIHRoYXQgZGVub3RlXG4gICAgLy8gYSBwYWNrZXRcbiAgICBzdGFydEluZGV4LS07XG4gICAgZW5kSW5kZXgtLTtcbiAgfVxufTtcblxuLyoqXG4gKiB3YWxrcyB0aHJvdWdoIHRoZSBzZWdtZW50IGRhdGEgZnJvbSB0aGUgc3RhcnQgYW5kIGVuZCB0byBnZXQgdGltaW5nIGluZm9ybWF0aW9uXG4gKiBmb3IgdGhlIGZpcnN0IGFuZCBsYXN0IHZpZGVvIHBlcyBwYWNrZXRzIGFzIHdlbGwgYXMgdGltaW5nIGluZm9ybWF0aW9uIGZvciB0aGUgZmlyc3RcbiAqIGtleSBmcmFtZS5cbiAqL1xudmFyIHBhcnNlVmlkZW9QZXNfID0gZnVuY3Rpb24oYnl0ZXMsIHBtdCwgcmVzdWx0KSB7XG4gIHZhclxuICAgIHN0YXJ0SW5kZXggPSAwLFxuICAgIGVuZEluZGV4ID0gTVAyVF9QQUNLRVRfTEVOR1RILFxuICAgIHBhY2tldCwgdHlwZSwgcGVzVHlwZSwgcHVzaSwgcGFyc2VkLCBmcmFtZSwgaSwgcGVzO1xuXG4gIHZhciBlbmRMb29wID0gZmFsc2U7XG5cbiAgdmFyIGN1cnJlbnRGcmFtZSA9IHtcbiAgICBkYXRhOiBbXSxcbiAgICBzaXplOiAwXG4gIH07XG5cbiAgLy8gU3RhcnQgd2Fsa2luZyBmcm9tIHN0YXJ0IG9mIHNlZ21lbnQgdG8gZ2V0IGZpcnN0IHZpZGVvIHBhY2tldFxuICB3aGlsZSAoZW5kSW5kZXggPCBieXRlcy5ieXRlTGVuZ3RoKSB7XG4gICAgLy8gTG9vayBmb3IgYSBwYWlyIG9mIHN0YXJ0IGFuZCBlbmQgc3luYyBieXRlcyBpbiB0aGUgZGF0YS4uXG4gICAgaWYgKGJ5dGVzW3N0YXJ0SW5kZXhdID09PSBTWU5DX0JZVEUgJiYgYnl0ZXNbZW5kSW5kZXhdID09PSBTWU5DX0JZVEUpIHtcbiAgICAgIC8vIFdlIGZvdW5kIGEgcGFja2V0XG4gICAgICBwYWNrZXQgPSBieXRlcy5zdWJhcnJheShzdGFydEluZGV4LCBlbmRJbmRleCk7XG4gICAgICB0eXBlID0gcHJvYmUudHMucGFyc2VUeXBlKHBhY2tldCwgcG10LnBpZCk7XG5cbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdwZXMnOlxuICAgICAgICAgIHBlc1R5cGUgPSBwcm9iZS50cy5wYXJzZVBlc1R5cGUocGFja2V0LCBwbXQudGFibGUpO1xuICAgICAgICAgIHB1c2kgPSBwcm9iZS50cy5wYXJzZVBheWxvYWRVbml0U3RhcnRJbmRpY2F0b3IocGFja2V0KTtcbiAgICAgICAgICBpZiAocGVzVHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgaWYgKHB1c2kgJiYgIWVuZExvb3ApIHtcbiAgICAgICAgICAgICAgcGFyc2VkID0gcHJvYmUudHMucGFyc2VQZXNUaW1lKHBhY2tldCk7XG4gICAgICAgICAgICAgIGlmIChwYXJzZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQudHlwZSA9ICd2aWRlbyc7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnZpZGVvLnB1c2gocGFyc2VkKTtcbiAgICAgICAgICAgICAgICBlbmRMb29wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFyZXN1bHQuZmlyc3RLZXlGcmFtZSkge1xuICAgICAgICAgICAgICBpZiAocHVzaSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RnJhbWUuc2l6ZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgZnJhbWUgPSBuZXcgVWludDhBcnJheShjdXJyZW50RnJhbWUuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50RnJhbWUuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVzID0gY3VycmVudEZyYW1lLmRhdGEuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWUuc2V0KHBlcywgaSk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gcGVzLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAocHJvYmUudHMudmlkZW9QYWNrZXRDb250YWluc0tleUZyYW1lKGZyYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RLZXlGcmFtZSA9IHByb2JlLnRzLnBhcnNlUGVzVGltZShmcmFtZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUFRTL0RUUyBtYXkgbm90IGJlIGF2YWlsYWJsZS4gU2ltcGx5ICpub3QqIHNldHRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGtleWZyYW1lIHNlZW1zIHRvIHdvcmsgZmluZSB3aXRoIEhMUyBwbGF5YmFja1xuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgZGVmaW5pdGVseSBwcmVmZXJhYmxlIHRvIGEgY3Jhc2ggd2l0aCBUeXBlRXJyb3IuLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0S2V5RnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZmlyc3RLZXlGcmFtZSA9IGZpcnN0S2V5RnJhbWU7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmZpcnN0S2V5RnJhbWUudHlwZSA9ICd2aWRlbyc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBleHRyYWN0IFBUUy9EVFMgZnJvbSBQRVMgYXQgZmlyc3Qga2V5ZnJhbWUuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1RoaXMgY291bGQgYmUgYW4gdW51c3VhbCBUUyBzZWdtZW50LCBvciBlbHNlIG11eC5qcyBkaWQgbm90ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcnNlIHlvdXIgVFMgc2VnbWVudCBjb3JyZWN0bHkuIElmIHlvdSBrbm93IHlvdXIgVFMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2VnbWVudHMgZG8gY29udGFpbiBQVFMvRFRTIG9uIGtleWZyYW1lcyBwbGVhc2UgZmlsZSBhIGJ1ZyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZXBvcnQhIFlvdSBjYW4gdHJ5IGZmcHJvYmUgdG8gZG91YmxlIGNoZWNrIGZvciB5b3Vyc2VsZi4nXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY3VycmVudEZyYW1lLnNpemUgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjdXJyZW50RnJhbWUuZGF0YS5wdXNoKHBhY2tldCk7XG4gICAgICAgICAgICAgIGN1cnJlbnRGcmFtZS5zaXplICs9IHBhY2tldC5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZExvb3AgJiYgcmVzdWx0LmZpcnN0S2V5RnJhbWUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0SW5kZXggKz0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgZW5kSW5kZXggKz0gTVAyVF9QQUNLRVRfTEVOR1RIO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ2V0IGhlcmUsIHdlIGhhdmUgc29tZWhvdyBiZWNvbWUgZGUtc3luY2hyb25pemVkIGFuZCB3ZSBuZWVkIHRvIHN0ZXBcbiAgICAvLyBmb3J3YXJkIG9uZSBieXRlIGF0IGEgdGltZSB1bnRpbCB3ZSBmaW5kIGEgcGFpciBvZiBzeW5jIGJ5dGVzIHRoYXQgZGVub3RlXG4gICAgLy8gYSBwYWNrZXRcbiAgICBzdGFydEluZGV4Kys7XG4gICAgZW5kSW5kZXgrKztcbiAgfVxuXG4gIC8vIFN0YXJ0IHdhbGtpbmcgZnJvbSBlbmQgb2Ygc2VnbWVudCB0byBnZXQgbGFzdCB2aWRlbyBwYWNrZXRcbiAgZW5kSW5kZXggPSBieXRlcy5ieXRlTGVuZ3RoO1xuICBzdGFydEluZGV4ID0gZW5kSW5kZXggLSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gIGVuZExvb3AgPSBmYWxzZTtcbiAgd2hpbGUgKHN0YXJ0SW5kZXggPj0gMCkge1xuICAgIC8vIExvb2sgZm9yIGEgcGFpciBvZiBzdGFydCBhbmQgZW5kIHN5bmMgYnl0ZXMgaW4gdGhlIGRhdGEuLlxuICAgIGlmIChieXRlc1tzdGFydEluZGV4XSA9PT0gU1lOQ19CWVRFICYmIGJ5dGVzW2VuZEluZGV4XSA9PT0gU1lOQ19CWVRFKSB7XG4gICAgICAvLyBXZSBmb3VuZCBhIHBhY2tldFxuICAgICAgcGFja2V0ID0gYnl0ZXMuc3ViYXJyYXkoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgdHlwZSA9IHByb2JlLnRzLnBhcnNlVHlwZShwYWNrZXQsIHBtdC5waWQpO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAncGVzJzpcbiAgICAgICAgICBwZXNUeXBlID0gcHJvYmUudHMucGFyc2VQZXNUeXBlKHBhY2tldCwgcG10LnRhYmxlKTtcbiAgICAgICAgICBwdXNpID0gcHJvYmUudHMucGFyc2VQYXlsb2FkVW5pdFN0YXJ0SW5kaWNhdG9yKHBhY2tldCk7XG4gICAgICAgICAgaWYgKHBlc1R5cGUgPT09ICd2aWRlbycgJiYgcHVzaSkge1xuICAgICAgICAgICAgICBwYXJzZWQgPSBwcm9iZS50cy5wYXJzZVBlc1RpbWUocGFja2V0KTtcbiAgICAgICAgICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICAgICAgICAgIHBhcnNlZC50eXBlID0gJ3ZpZGVvJztcbiAgICAgICAgICAgICAgICByZXN1bHQudmlkZW8ucHVzaChwYXJzZWQpO1xuICAgICAgICAgICAgICAgIGVuZExvb3AgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW5kTG9vcCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgc3RhcnRJbmRleCAtPSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gICAgICBlbmRJbmRleCAtPSBNUDJUX1BBQ0tFVF9MRU5HVEg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgaGF2ZSBzb21laG93IGJlY29tZSBkZS1zeW5jaHJvbml6ZWQgYW5kIHdlIG5lZWQgdG8gc3RlcFxuICAgIC8vIGZvcndhcmQgb25lIGJ5dGUgYXQgYSB0aW1lIHVudGlsIHdlIGZpbmQgYSBwYWlyIG9mIHN5bmMgYnl0ZXMgdGhhdCBkZW5vdGVcbiAgICAvLyBhIHBhY2tldFxuICAgIHN0YXJ0SW5kZXgtLTtcbiAgICBlbmRJbmRleC0tO1xuICB9XG59O1xuXG4vKipcbiAqIEFkanVzdHMgdGhlIHRpbWVzdGFtcCBpbmZvcm1hdGlvbiBmb3IgdGhlIHNlZ21lbnQgdG8gYWNjb3VudCBmb3JcbiAqIHJvbGxvdmVyIGFuZCBjb252ZXJ0IHRvIHNlY29uZHMgYmFzZWQgb24gcGVzIHBhY2tldCB0aW1lc2NhbGUgKDkwa2h6IGNsb2NrKVxuICovXG52YXIgYWRqdXN0VGltZXN0YW1wXyA9IGZ1bmN0aW9uKHNlZ21lbnRJbmZvLCBiYXNlVGltZXN0YW1wKSB7XG4gIGlmIChzZWdtZW50SW5mby5hdWRpbyAmJiBzZWdtZW50SW5mby5hdWRpby5sZW5ndGgpIHtcbiAgICB2YXIgYXVkaW9CYXNlVGltZXN0YW1wID0gYmFzZVRpbWVzdGFtcDtcbiAgICBpZiAodHlwZW9mIGF1ZGlvQmFzZVRpbWVzdGFtcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGF1ZGlvQmFzZVRpbWVzdGFtcCA9IHNlZ21lbnRJbmZvLmF1ZGlvWzBdLmR0cztcbiAgICB9XG4gICAgc2VnbWVudEluZm8uYXVkaW8uZm9yRWFjaChmdW5jdGlvbihpbmZvKSB7XG4gICAgICBpbmZvLmR0cyA9IGhhbmRsZVJvbGxvdmVyKGluZm8uZHRzLCBhdWRpb0Jhc2VUaW1lc3RhbXApO1xuICAgICAgaW5mby5wdHMgPSBoYW5kbGVSb2xsb3ZlcihpbmZvLnB0cywgYXVkaW9CYXNlVGltZXN0YW1wKTtcbiAgICAgIC8vIHRpbWUgaW4gc2Vjb25kc1xuICAgICAgaW5mby5kdHNUaW1lID0gaW5mby5kdHMgLyBPTkVfU0VDT05EX0lOX1RTO1xuICAgICAgaW5mby5wdHNUaW1lID0gaW5mby5wdHMgLyBPTkVfU0VDT05EX0lOX1RTO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHNlZ21lbnRJbmZvLnZpZGVvICYmIHNlZ21lbnRJbmZvLnZpZGVvLmxlbmd0aCkge1xuICAgIHZhciB2aWRlb0Jhc2VUaW1lc3RhbXAgPSBiYXNlVGltZXN0YW1wO1xuICAgIGlmICh0eXBlb2YgdmlkZW9CYXNlVGltZXN0YW1wID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmlkZW9CYXNlVGltZXN0YW1wID0gc2VnbWVudEluZm8udmlkZW9bMF0uZHRzO1xuICAgIH1cbiAgICBzZWdtZW50SW5mby52aWRlby5mb3JFYWNoKGZ1bmN0aW9uKGluZm8pIHtcbiAgICAgIGluZm8uZHRzID0gaGFuZGxlUm9sbG92ZXIoaW5mby5kdHMsIHZpZGVvQmFzZVRpbWVzdGFtcCk7XG4gICAgICBpbmZvLnB0cyA9IGhhbmRsZVJvbGxvdmVyKGluZm8ucHRzLCB2aWRlb0Jhc2VUaW1lc3RhbXApO1xuICAgICAgLy8gdGltZSBpbiBzZWNvbmRzXG4gICAgICBpbmZvLmR0c1RpbWUgPSBpbmZvLmR0cyAvIE9ORV9TRUNPTkRfSU5fVFM7XG4gICAgICBpbmZvLnB0c1RpbWUgPSBpbmZvLnB0cyAvIE9ORV9TRUNPTkRfSU5fVFM7XG4gICAgfSk7XG4gICAgaWYgKHNlZ21lbnRJbmZvLmZpcnN0S2V5RnJhbWUpIHtcbiAgICAgIHZhciBmcmFtZSA9IHNlZ21lbnRJbmZvLmZpcnN0S2V5RnJhbWU7XG4gICAgICBmcmFtZS5kdHMgPSBoYW5kbGVSb2xsb3ZlcihmcmFtZS5kdHMsIHZpZGVvQmFzZVRpbWVzdGFtcCk7XG4gICAgICBmcmFtZS5wdHMgPSBoYW5kbGVSb2xsb3ZlcihmcmFtZS5wdHMsIHZpZGVvQmFzZVRpbWVzdGFtcCk7XG4gICAgICAvLyB0aW1lIGluIHNlY29uZHNcbiAgICAgIGZyYW1lLmR0c1RpbWUgPSBmcmFtZS5kdHMgLyBPTkVfU0VDT05EX0lOX1RTO1xuICAgICAgZnJhbWUucHRzVGltZSA9IGZyYW1lLmR0cyAvIE9ORV9TRUNPTkRfSU5fVFM7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGluc3BlY3RzIHRoZSBhYWMgZGF0YSBzdHJlYW0gZm9yIHN0YXJ0IGFuZCBlbmQgdGltZSBpbmZvcm1hdGlvblxuICovXG52YXIgaW5zcGVjdEFhY18gPSBmdW5jdGlvbihieXRlcykge1xuICB2YXJcbiAgICBlbmRMb29wID0gZmFsc2UsXG4gICAgYXVkaW9Db3VudCA9IDAsXG4gICAgc2FtcGxlUmF0ZSA9IG51bGwsXG4gICAgdGltZXN0YW1wID0gbnVsbCxcbiAgICBmcmFtZVNpemUgPSAwLFxuICAgIGJ5dGVJbmRleCA9IDAsXG4gICAgcGFja2V0O1xuXG4gIHdoaWxlIChieXRlcy5sZW5ndGggLSBieXRlSW5kZXggPj0gMykge1xuICAgIHZhciB0eXBlID0gcHJvYmUuYWFjLnBhcnNlVHlwZShieXRlcywgYnl0ZUluZGV4KTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3RpbWVkLW1ldGFkYXRhJzpcbiAgICAgICAgLy8gRXhpdCBlYXJseSBiZWNhdXNlIHdlIGRvbid0IGhhdmUgZW5vdWdoIHRvIHBhcnNlXG4gICAgICAgIC8vIHRoZSBJRDMgdGFnIGhlYWRlclxuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoIC0gYnl0ZUluZGV4IDwgMTApIHtcbiAgICAgICAgICBlbmRMb29wID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lU2l6ZSA9IHByb2JlLmFhYy5wYXJzZUlkM1RhZ1NpemUoYnl0ZXMsIGJ5dGVJbmRleCk7XG5cbiAgICAgICAgLy8gRXhpdCBlYXJseSBpZiB3ZSBkb24ndCBoYXZlIGVub3VnaCBpbiB0aGUgYnVmZmVyXG4gICAgICAgIC8vIHRvIGVtaXQgYSBmdWxsIHBhY2tldFxuICAgICAgICBpZiAoZnJhbWVTaXplID4gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZW5kTG9vcCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVzdGFtcCA9PT0gbnVsbCkge1xuICAgICAgICAgIHBhY2tldCA9IGJ5dGVzLnN1YmFycmF5KGJ5dGVJbmRleCwgYnl0ZUluZGV4ICsgZnJhbWVTaXplKTtcbiAgICAgICAgICB0aW1lc3RhbXAgPSBwcm9iZS5hYWMucGFyc2VBYWNUaW1lc3RhbXAocGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICBieXRlSW5kZXggKz0gZnJhbWVTaXplO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgLy8gRXhpdCBlYXJseSBiZWNhdXNlIHdlIGRvbid0IGhhdmUgZW5vdWdoIHRvIHBhcnNlXG4gICAgICAgIC8vIHRoZSBBRFRTIGZyYW1lIGhlYWRlclxuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoIC0gYnl0ZUluZGV4IDwgNykge1xuICAgICAgICAgIGVuZExvb3AgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZnJhbWVTaXplID0gcHJvYmUuYWFjLnBhcnNlQWR0c1NpemUoYnl0ZXMsIGJ5dGVJbmRleCk7XG5cbiAgICAgICAgLy8gRXhpdCBlYXJseSBpZiB3ZSBkb24ndCBoYXZlIGVub3VnaCBpbiB0aGUgYnVmZmVyXG4gICAgICAgIC8vIHRvIGVtaXQgYSBmdWxsIHBhY2tldFxuICAgICAgICBpZiAoZnJhbWVTaXplID4gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZW5kTG9vcCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNhbXBsZVJhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICBwYWNrZXQgPSBieXRlcy5zdWJhcnJheShieXRlSW5kZXgsIGJ5dGVJbmRleCArIGZyYW1lU2l6ZSk7XG4gICAgICAgICAgc2FtcGxlUmF0ZSA9IHByb2JlLmFhYy5wYXJzZVNhbXBsZVJhdGUocGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICBhdWRpb0NvdW50Kys7XG4gICAgICAgIGJ5dGVJbmRleCArPSBmcmFtZVNpemU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnl0ZUluZGV4Kys7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoZW5kTG9vcCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGlmIChzYW1wbGVSYXRlID09PSBudWxsIHx8IHRpbWVzdGFtcCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGF1ZGlvVGltZXNjYWxlID0gT05FX1NFQ09ORF9JTl9UUyAvIHNhbXBsZVJhdGU7XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBhdWRpbzogW1xuICAgICAge1xuICAgICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgICBkdHM6IHRpbWVzdGFtcCxcbiAgICAgICAgcHRzOiB0aW1lc3RhbXBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICAgIGR0czogdGltZXN0YW1wICsgKGF1ZGlvQ291bnQgKiAxMDI0ICogYXVkaW9UaW1lc2NhbGUpLFxuICAgICAgICBwdHM6IHRpbWVzdGFtcCArIChhdWRpb0NvdW50ICogMTAyNCAqIGF1ZGlvVGltZXNjYWxlKVxuICAgICAgfVxuICAgIF1cbiAgfTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBpbnNwZWN0cyB0aGUgdHJhbnNwb3J0IHN0cmVhbSBzZWdtZW50IGRhdGEgZm9yIHN0YXJ0IGFuZCBlbmQgdGltZSBpbmZvcm1hdGlvblxuICogb2YgdGhlIGF1ZGlvIGFuZCB2aWRlbyB0cmFja3MgKHdoZW4gcHJlc2VudCkgYXMgd2VsbCBhcyB0aGUgZmlyc3Qga2V5IGZyYW1lJ3NcbiAqIHN0YXJ0IHRpbWUuXG4gKi9cbnZhciBpbnNwZWN0VHNfID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHBtdCA9IHtcbiAgICBwaWQ6IG51bGwsXG4gICAgdGFibGU6IG51bGxcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgcGFyc2VQc2lfKGJ5dGVzLCBwbXQpO1xuXG4gIGZvciAodmFyIHBpZCBpbiBwbXQudGFibGUpIHtcbiAgICBpZiAocG10LnRhYmxlLmhhc093blByb3BlcnR5KHBpZCkpIHtcbiAgICAgIHZhciB0eXBlID0gcG10LnRhYmxlW3BpZF07XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBTdHJlYW1UeXBlcy5IMjY0X1NUUkVBTV9UWVBFOlxuICAgICAgICAgIHJlc3VsdC52aWRlbyA9IFtdO1xuICAgICAgICAgIHBhcnNlVmlkZW9QZXNfKGJ5dGVzLCBwbXQsIHJlc3VsdCk7XG4gICAgICAgICAgaWYgKHJlc3VsdC52aWRlby5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSByZXN1bHQudmlkZW87XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFN0cmVhbVR5cGVzLkFEVFNfU1RSRUFNX1RZUEU6XG4gICAgICAgICAgcmVzdWx0LmF1ZGlvID0gW107XG4gICAgICAgICAgcGFyc2VBdWRpb1Blc18oYnl0ZXMsIHBtdCwgcmVzdWx0KTtcbiAgICAgICAgICBpZiAocmVzdWx0LmF1ZGlvLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIHJlc3VsdC5hdWRpbztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEluc3BlY3RzIHNlZ21lbnQgYnl0ZSBkYXRhIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHN0YXJ0IGFuZCBlbmQgdGltaW5nIGluZm9ybWF0aW9uXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBieXRlcyBUaGUgc2VnbWVudCBieXRlIGRhdGFcbiAqIEBwYXJhbSB7TnVtYmVyfSBiYXNlVGltZXN0YW1wIFJlbGF0aXZlIHJlZmVyZW5jZSB0aW1lc3RhbXAgdXNlZCB3aGVuIGFkanVzdGluZyBmcmFtZVxuICogIHRpbWVzdGFtcHMgZm9yIHJvbGxvdmVyLiBUaGlzIHZhbHVlIG11c3QgYmUgaW4gOTBraHogY2xvY2suXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCBjb250YWluaW5nIHN0YXJ0IGFuZCBlbmQgZnJhbWUgdGltaW5nIGluZm8gb2Ygc2VnbWVudC5cbiAqL1xudmFyIGluc3BlY3QgPSBmdW5jdGlvbihieXRlcywgYmFzZVRpbWVzdGFtcCkge1xuICB2YXIgaXNBYWNEYXRhID0gcHJvYmUuYWFjLmlzTGlrZWx5QWFjRGF0YShieXRlcyk7XG5cbiAgdmFyIHJlc3VsdDtcblxuICBpZiAoaXNBYWNEYXRhKSB7XG4gICAgcmVzdWx0ID0gaW5zcGVjdEFhY18oYnl0ZXMpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGluc3BlY3RUc18oYnl0ZXMpO1xuICB9XG5cbiAgaWYgKCFyZXN1bHQgfHwgKCFyZXN1bHQuYXVkaW8gJiYgIXJlc3VsdC52aWRlbykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFkanVzdFRpbWVzdGFtcF8ocmVzdWx0LCBiYXNlVGltZXN0YW1wKTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluc3BlY3Q6IGluc3BlY3QsXG4gIHBhcnNlQXVkaW9QZXNfOiBwYXJzZUF1ZGlvUGVzX1xufTtcbiIsInZhciB0ZmhkID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXJcbiAgdmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLFxuICAgIHJlc3VsdCA9IHtcbiAgICAgIHZlcnNpb246IGRhdGFbMF0sXG4gICAgICBmbGFnczogbmV3IFVpbnQ4QXJyYXkoZGF0YS5zdWJhcnJheSgxLCA0KSksXG4gICAgICB0cmFja0lkOiB2aWV3LmdldFVpbnQzMig0KVxuICAgIH0sXG4gICAgYmFzZURhdGFPZmZzZXRQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzJdICYgMHgwMSxcbiAgICBzYW1wbGVEZXNjcmlwdGlvbkluZGV4UHJlc2VudCA9IHJlc3VsdC5mbGFnc1syXSAmIDB4MDIsXG4gICAgZGVmYXVsdFNhbXBsZUR1cmF0aW9uUHJlc2VudCA9IHJlc3VsdC5mbGFnc1syXSAmIDB4MDgsXG4gICAgZGVmYXVsdFNhbXBsZVNpemVQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzJdICYgMHgxMCxcbiAgICBkZWZhdWx0U2FtcGxlRmxhZ3NQcmVzZW50ID0gcmVzdWx0LmZsYWdzWzJdICYgMHgyMCxcbiAgICBkdXJhdGlvbklzRW1wdHkgPSByZXN1bHQuZmxhZ3NbMF0gJiAweDAxMDAwMCxcbiAgICBkZWZhdWx0QmFzZUlzTW9vZiA9ICByZXN1bHQuZmxhZ3NbMF0gJiAweDAyMDAwMCxcbiAgICBpO1xuXG4gIGkgPSA4O1xuICBpZiAoYmFzZURhdGFPZmZzZXRQcmVzZW50KSB7XG4gICAgaSArPSA0OyAvLyB0cnVuY2F0ZSB0b3AgNCBieXRlc1xuICAgIC8vIEZJWE1FOiBzaG91bGQgd2UgcmVhZCB0aGUgZnVsbCA2NCBiaXRzP1xuICAgIHJlc3VsdC5iYXNlRGF0YU9mZnNldCA9IHZpZXcuZ2V0VWludDMyKDEyKTtcbiAgICBpICs9IDQ7XG4gIH1cbiAgaWYgKHNhbXBsZURlc2NyaXB0aW9uSW5kZXhQcmVzZW50KSB7XG4gICAgcmVzdWx0LnNhbXBsZURlc2NyaXB0aW9uSW5kZXggPSB2aWV3LmdldFVpbnQzMihpKTtcbiAgICBpICs9IDQ7XG4gIH1cbiAgaWYgKGRlZmF1bHRTYW1wbGVEdXJhdGlvblByZXNlbnQpIHtcbiAgICByZXN1bHQuZGVmYXVsdFNhbXBsZUR1cmF0aW9uID0gdmlldy5nZXRVaW50MzIoaSk7XG4gICAgaSArPSA0O1xuICB9XG4gIGlmIChkZWZhdWx0U2FtcGxlU2l6ZVByZXNlbnQpIHtcbiAgICByZXN1bHQuZGVmYXVsdFNhbXBsZVNpemUgPSB2aWV3LmdldFVpbnQzMihpKTtcbiAgICBpICs9IDQ7XG4gIH1cbiAgaWYgKGRlZmF1bHRTYW1wbGVGbGFnc1ByZXNlbnQpIHtcbiAgICByZXN1bHQuZGVmYXVsdFNhbXBsZUZsYWdzID0gdmlldy5nZXRVaW50MzIoaSk7XG4gIH1cbiAgaWYgKGR1cmF0aW9uSXNFbXB0eSkge1xuICAgIHJlc3VsdC5kdXJhdGlvbklzRW1wdHkgPSB0cnVlO1xuICB9XG4gIGlmICghYmFzZURhdGFPZmZzZXRQcmVzZW50ICYmIGRlZmF1bHRCYXNlSXNNb29mKSB7XG4gICAgcmVzdWx0LmJhc2VEYXRhT2Zmc2V0SXNNb29mID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0ZmhkO1xuIiwiZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3Q7IiwiLyohIEBuYW1lIEB2aWRlb2pzL3Zocy11dGlscyBAdmVyc2lvbiAyLjIuMSBAbGljZW5zZSBNSVQgKi9cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAZmlsZSBzdHJlYW0uanNcbiAqL1xuXG4vKipcbiAqIEEgbGlnaHR3ZWlnaHQgcmVhZGFibGUgc3RyZWFtIGltcGxlbWVudGlvbiB0aGF0IGhhbmRsZXMgZXZlbnQgZGlzcGF0Y2hpbmcuXG4gKlxuICogQGNsYXNzIFN0cmVhbVxuICovXG52YXIgU3RyZWFtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RyZWFtKCkge1xuICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSB0aGUgZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciB0aGUgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGFuIGV2ZW50IG9mXG4gICAqIHRoZSBzcGVjaWZpZWQgdHlwZSBvY2N1cnNcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gU3RyZWFtLnByb3RvdHlwZTtcblxuICBfcHJvdG8ub24gPSBmdW5jdGlvbiBvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5saXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGxpc3RlbmVyIGZvciBhIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSB0aGUgZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAgYSBmdW5jdGlvbiBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZm9yIHRoaXNcbiAgICogdHlwZSBvZiBldmVudCB0aHJvdWdoIGBvbmBcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gaWYgd2UgY291bGQgdHVybiBpdCBvZmYgb3Igbm90XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9mZiA9IGZ1bmN0aW9uIG9mZih0eXBlLCBsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5saXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLmxpc3RlbmVyc1t0eXBlXS5pbmRleE9mKGxpc3RlbmVyKTsgLy8gVE9ETzogd2hpY2ggaXMgYmV0dGVyP1xuICAgIC8vIEluIFZpZGVvLmpzIHdlIHNsaWNlIGxpc3RlbmVyIGZ1bmN0aW9uc1xuICAgIC8vIG9uIHRyaWdnZXIgc28gdGhhdCBpdCBkb2VzIG5vdCBtZXNzIHVwIHRoZSBvcmRlclxuICAgIC8vIHdoaWxlIHdlIGxvb3AgdGhyb3VnaC5cbiAgICAvL1xuICAgIC8vIEhlcmUgd2Ugc2xpY2Ugb24gb2ZmIHNvIHRoYXQgdGhlIGxvb3AgaW4gdHJpZ2dlclxuICAgIC8vIGNhbiBjb250aW51ZSB1c2luZyBpdCdzIG9sZCByZWZlcmVuY2UgdG8gbG9vcCB3aXRob3V0XG4gICAgLy8gbWVzc2luZyB1cCB0aGUgb3JkZXIuXG5cbiAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXSA9IHRoaXMubGlzdGVuZXJzW3R5cGVdLnNsaWNlKDApO1xuICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIGluZGV4ID4gLTE7XG4gIH1cbiAgLyoqXG4gICAqIFRyaWdnZXIgYW4gZXZlbnQgb2YgdGhlIHNwZWNpZmllZCB0eXBlIG9uIHRoaXMgc3RyZWFtLiBBbnkgYWRkaXRpb25hbFxuICAgKiBhcmd1bWVudHMgdG8gdGhpcyBmdW5jdGlvbiBhcmUgcGFzc2VkIGFzIHBhcmFtZXRlcnMgdG8gZXZlbnQgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSB0aGUgZXZlbnQgbmFtZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50cmlnZ2VyID0gZnVuY3Rpb24gdHJpZ2dlcih0eXBlKSB7XG4gICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMubGlzdGVuZXJzW3R5cGVdO1xuXG4gICAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFNsaWNpbmcgdGhlIGFyZ3VtZW50cyBvbiBldmVyeSBpbnZvY2F0aW9uIG9mIHRoaXMgbWV0aG9kXG4gICAgLy8gY2FuIGFkZCBhIHNpZ25pZmljYW50IGFtb3VudCBvZiBvdmVyaGVhZC4gQXZvaWQgdGhlXG4gICAgLy8gaW50ZXJtZWRpYXRlIG9iamVjdCBjcmVhdGlvbiBmb3IgdGhlIGNvbW1vbiBjYXNlIG9mIGFcbiAgICAvLyBzaW5nbGUgY2FsbGJhY2sgYXJndW1lbnRcblxuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHZhciBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBfbGVuZ3RoID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9sZW5ndGg7ICsrX2kpIHtcbiAgICAgICAgY2FsbGJhY2tzW19pXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBzdHJlYW0gYW5kIGNsZWFucyB1cC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcbiAgfVxuICAvKipcbiAgICogRm9yd2FyZHMgYWxsIGBkYXRhYCBldmVudHMgb24gdGhpcyBzdHJlYW0gdG8gdGhlIGRlc3RpbmF0aW9uIHN0cmVhbS4gVGhlXG4gICAqIGRlc3RpbmF0aW9uIHN0cmVhbSBzaG91bGQgcHJvdmlkZSBhIG1ldGhvZCBgcHVzaGAgdG8gcmVjZWl2ZSB0aGUgZGF0YVxuICAgKiBldmVudHMgYXMgdGhleSBhcnJpdmUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyZWFtfSBkZXN0aW5hdGlvbiB0aGUgc3RyZWFtIHRoYXQgd2lsbCByZWNlaXZlIGFsbCBgZGF0YWAgZXZlbnRzXG4gICAqIEBzZWUgaHR0cDovL25vZGVqcy5vcmcvYXBpL3N0cmVhbS5odG1sI3N0cmVhbV9yZWFkYWJsZV9waXBlX2Rlc3RpbmF0aW9uX29wdGlvbnNcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGlwZSA9IGZ1bmN0aW9uIHBpcGUoZGVzdGluYXRpb24pIHtcbiAgICB0aGlzLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGRlc3RpbmF0aW9uLnB1c2goZGF0YSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0cmVhbTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG4iLCIvKipcbiAqIG11eC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgQnJpZ2h0Y292ZVxuICogTGljZW5zZWQgQXBhY2hlLTIuMCBodHRwczovL2dpdGh1Yi5jb20vdmlkZW9qcy9tdXguanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIEEgbGlnaHR3ZWlnaHQgcmVhZGFibGUgc3RyZWFtIGltcGxlbWVudGlvbiB0aGF0IGhhbmRsZXMgZXZlbnQgZGlzcGF0Y2hpbmcuXG4gKiBPYmplY3RzIHRoYXQgaW5oZXJpdCBmcm9tIHN0cmVhbXMgc2hvdWxkIGNhbGwgaW5pdCBpbiB0aGVpciBjb25zdHJ1Y3RvcnMuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFN0cmVhbSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGlzdGVuZXJzID0ge307XG4gICAgLyoqXG4gICAgICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgc3BlY2lmaWVkIGV2ZW50IHR5cGUuXG4gICAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gdGhlIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIge2Z1bmN0aW9ufSB0aGUgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGFuIGV2ZW50IG9mXG4gICAgICogdGhlIHNwZWNpZmllZCB0eXBlIG9jY3Vyc1xuICAgICAqL1xuICAgIHRoaXMub24gPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKCFsaXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcnNbdHlwZV0uY29uY2F0KGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGxpc3RlbmVyIGZvciBhIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IHRoZSBldmVudCBuYW1lXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIHtmdW5jdGlvbn0gYSBmdW5jdGlvbiBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZm9yIHRoaXNcbiAgICAgKiB0eXBlIG9mIGV2ZW50IHRocm91Z2ggYG9uYFxuICAgICAqL1xuICAgIHRoaXMub2ZmID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBpbmRleDtcbiAgICAgIGlmICghbGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gbGlzdGVuZXJzW3R5cGVdLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXJzW3R5cGVdLnNsaWNlKCk7XG4gICAgICBsaXN0ZW5lcnNbdHlwZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHJldHVybiBpbmRleCA+IC0xO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBhbiBldmVudCBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgb24gdGhpcyBzdHJlYW0uIEFueSBhZGRpdGlvbmFsXG4gICAgICogYXJndW1lbnRzIHRvIHRoaXMgZnVuY3Rpb24gYXJlIHBhc3NlZCBhcyBwYXJhbWV0ZXJzIHRvIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSB0aGUgZXZlbnQgbmFtZVxuICAgICAqL1xuICAgIHRoaXMudHJpZ2dlciA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIHZhciBjYWxsYmFja3MsIGksIGxlbmd0aCwgYXJncztcbiAgICAgIGNhbGxiYWNrcyA9IGxpc3RlbmVyc1t0eXBlXTtcbiAgICAgIGlmICghY2FsbGJhY2tzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFNsaWNpbmcgdGhlIGFyZ3VtZW50cyBvbiBldmVyeSBpbnZvY2F0aW9uIG9mIHRoaXMgbWV0aG9kXG4gICAgICAvLyBjYW4gYWRkIGEgc2lnbmlmaWNhbnQgYW1vdW50IG9mIG92ZXJoZWFkLiBBdm9pZCB0aGVcbiAgICAgIC8vIGludGVybWVkaWF0ZSBvYmplY3QgY3JlYXRpb24gZm9yIHRoZSBjb21tb24gY2FzZSBvZiBhXG4gICAgICAvLyBzaW5nbGUgY2FsbGJhY2sgYXJndW1lbnRcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGxlbmd0aCA9IGNhbGxiYWNrcy5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgaSA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBzdHJlYW0gYW5kIGNsZWFucyB1cC5cbiAgICAgKi9cbiAgICB0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxpc3RlbmVycyA9IHt9O1xuICAgIH07XG4gIH07XG59O1xuXG4vKipcbiAqIEZvcndhcmRzIGFsbCBgZGF0YWAgZXZlbnRzIG9uIHRoaXMgc3RyZWFtIHRvIHRoZSBkZXN0aW5hdGlvbiBzdHJlYW0uIFRoZVxuICogZGVzdGluYXRpb24gc3RyZWFtIHNob3VsZCBwcm92aWRlIGEgbWV0aG9kIGBwdXNoYCB0byByZWNlaXZlIHRoZSBkYXRhXG4gKiBldmVudHMgYXMgdGhleSBhcnJpdmUuXG4gKiBAcGFyYW0gZGVzdGluYXRpb24ge3N0cmVhbX0gdGhlIHN0cmVhbSB0aGF0IHdpbGwgcmVjZWl2ZSBhbGwgYGRhdGFgIGV2ZW50c1xuICogQHBhcmFtIGF1dG9GbHVzaCB7Ym9vbGVhbn0gaWYgZmFsc2UsIHdlIHdpbGwgbm90IGNhbGwgYGZsdXNoYCBvbiB0aGUgZGVzdGluYXRpb25cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIGN1cnJlbnQgc3RyZWFtIGVtaXRzIGEgJ2RvbmUnIGV2ZW50XG4gKiBAc2VlIGh0dHA6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbCNzdHJlYW1fcmVhZGFibGVfcGlwZV9kZXN0aW5hdGlvbl9vcHRpb25zXG4gKi9cblN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3RpbmF0aW9uKSB7XG4gIHRoaXMub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgZGVzdGluYXRpb24ucHVzaChkYXRhKTtcbiAgfSk7XG5cbiAgdGhpcy5vbignZG9uZScsIGZ1bmN0aW9uKGZsdXNoU291cmNlKSB7XG4gICAgZGVzdGluYXRpb24uZmx1c2goZmx1c2hTb3VyY2UpO1xuICB9KTtcblxuICB0aGlzLm9uKCdwYXJ0aWFsZG9uZScsIGZ1bmN0aW9uKGZsdXNoU291cmNlKSB7XG4gICAgZGVzdGluYXRpb24ucGFydGlhbEZsdXNoKGZsdXNoU291cmNlKTtcbiAgfSk7XG5cbiAgdGhpcy5vbignZW5kZWR0aW1lbGluZScsIGZ1bmN0aW9uKGZsdXNoU291cmNlKSB7XG4gICAgZGVzdGluYXRpb24uZW5kVGltZWxpbmUoZmx1c2hTb3VyY2UpO1xuICB9KTtcblxuICB0aGlzLm9uKCdyZXNldCcsIGZ1bmN0aW9uKGZsdXNoU291cmNlKSB7XG4gICAgZGVzdGluYXRpb24ucmVzZXQoZmx1c2hTb3VyY2UpO1xuICB9KTtcblxuICByZXR1cm4gZGVzdGluYXRpb247XG59O1xuXG4vLyBEZWZhdWx0IHN0cmVhbSBmdW5jdGlvbnMgdGhhdCBhcmUgZXhwZWN0ZWQgdG8gYmUgb3ZlcnJpZGRlbiB0byBwZXJmb3JtXG4vLyBhY3R1YWwgd29yay4gVGhlc2UgYXJlIHByb3ZpZGVkIGJ5IHRoZSBwcm90b3R5cGUgYXMgYSBzb3J0IG9mIG5vLW9wXG4vLyBpbXBsZW1lbnRhdGlvbiBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gY2hlY2sgZm9yIHRoZWlyIGV4aXN0ZW5jZSBpbiB0aGVcbi8vIGBwaXBlYCBmdW5jdGlvbiBhYm92ZS5cblN0cmVhbS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdGhpcy50cmlnZ2VyKCdkYXRhJywgZGF0YSk7XG59O1xuXG5TdHJlYW0ucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24oZmx1c2hTb3VyY2UpIHtcbiAgdGhpcy50cmlnZ2VyKCdkb25lJywgZmx1c2hTb3VyY2UpO1xufTtcblxuU3RyZWFtLnByb3RvdHlwZS5wYXJ0aWFsRmx1c2ggPSBmdW5jdGlvbihmbHVzaFNvdXJjZSkge1xuICB0aGlzLnRyaWdnZXIoJ3BhcnRpYWxkb25lJywgZmx1c2hTb3VyY2UpO1xufTtcblxuU3RyZWFtLnByb3RvdHlwZS5lbmRUaW1lbGluZSA9IGZ1bmN0aW9uKGZsdXNoU291cmNlKSB7XG4gIHRoaXMudHJpZ2dlcignZW5kZWR0aW1lbGluZScsIGZsdXNoU291cmNlKTtcbn07XG5cblN0cmVhbS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbihmbHVzaFNvdXJjZSkge1xuICB0aGlzLnRyaWdnZXIoJ3Jlc2V0JywgZmx1c2hTb3VyY2UpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG4iLCJ2YXIgd2luO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbiA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbiA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgIHdpbiA9IHNlbGY7XG59IGVsc2Uge1xuICAgIHdpbiA9IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpbjtcbiIsImZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwiLyohIEBuYW1lIEB2aWRlb2pzL3Zocy11dGlscyBAdmVyc2lvbiAyLjIuMSBAbGljZW5zZSBNSVQgKi9cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIGlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uIGlzVHlwZWRBcnJheShvYmopIHtcbiAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyhvYmopO1xufTtcbnZhciB0b1VpbnQ4ID0gZnVuY3Rpb24gdG9VaW50OChieXRlcykge1xuICByZXR1cm4gYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gYnl0ZXMgOiBuZXcgVWludDhBcnJheShieXRlcyAmJiBieXRlcy5idWZmZXIgfHwgYnl0ZXMsIGJ5dGVzICYmIGJ5dGVzLmJ5dGVPZmZzZXQgfHwgMCwgYnl0ZXMgJiYgYnl0ZXMuYnl0ZUxlbmd0aCB8fCAwKTtcbn07XG52YXIgYnl0ZXNUb1N0cmluZyA9IGZ1bmN0aW9uIGJ5dGVzVG9TdHJpbmcoYnl0ZXMpIHtcbiAgaWYgKCFieXRlcykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGJ5dGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYnl0ZXMpO1xuICB2YXIgc3RyaW5nID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCB0b1VpbnQ4KGJ5dGVzKSk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShzdHJpbmcpKTtcbiAgfSBjYXRjaCAoZSkgey8vIGlmIGRlY29kZVVSSUNvbXBvbmVudC9lc2NhcGUgZmFpbHMsIHdlIGFyZSBkZWFsaW5nIHdpdGggcGFydGlhbFxuICAgIC8vIG9yIGZ1bGwgbm9uIHN0cmluZyBkYXRhLiBKdXN0IHJldHVybiB0aGUgcG90ZW50aWFsbHkgZ2FyYmxlZCBzdHJpbmcuXG4gIH1cblxuICByZXR1cm4gc3RyaW5nO1xufTtcbnZhciBzdHJpbmdUb0J5dGVzID0gZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHJpbmcsIHN0cmluZ0lzQnl0ZXMpIHtcbiAgaWYgKHN0cmluZ0lzQnl0ZXMgPT09IHZvaWQgMCkge1xuICAgIHN0cmluZ0lzQnl0ZXMgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBieXRlcyA9IFtdO1xuXG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJyAmJiBzdHJpbmcgJiYgdHlwZW9mIHN0cmluZy50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHN0cmluZyA9IHN0cmluZy50b1N0cmluZygpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9IC8vIElmIHRoZSBzdHJpbmcgYWxyZWFkeSBpcyBieXRlcywgd2UgZG9uJ3QgaGF2ZSB0byBkbyB0aGlzXG5cblxuICBpZiAoIXN0cmluZ0lzQnl0ZXMpIHtcbiAgICBzdHJpbmcgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKSk7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcy5jaGFyQ29kZUF0KDApICYgMHhGRjtcbiAgfSk7XG59O1xudmFyIGNvbmNhdFR5cGVkQXJyYXlzID0gZnVuY3Rpb24gY29uY2F0VHlwZWRBcnJheXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBidWZmZXJzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGJ1ZmZlcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgdG90YWxMZW5ndGggPSBidWZmZXJzLnJlZHVjZShmdW5jdGlvbiAodG90YWwsIGJ1Zikge1xuICAgIHZhciBsZW4gPSBidWYgJiYgKGJ1Zi5ieXRlTGVuZ3RoIHx8IGJ1Zi5sZW5ndGgpO1xuICAgIHRvdGFsICs9IGxlbiB8fCAwO1xuICAgIHJldHVybiB0b3RhbDtcbiAgfSwgMCk7XG4gIHZhciB0ZW1wQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuICB2YXIgb2Zmc2V0ID0gMDtcbiAgYnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChidWYpIHtcbiAgICBidWYgPSB0b1VpbnQ4KGJ1Zik7XG4gICAgdGVtcEJ1ZmZlci5zZXQoYnVmLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBidWYuYnl0ZUxlbmd0aDtcbiAgfSk7XG4gIHJldHVybiB0ZW1wQnVmZmVyO1xufTtcblxuZXhwb3J0cy5ieXRlc1RvU3RyaW5nID0gYnl0ZXNUb1N0cmluZztcbmV4cG9ydHMuY29uY2F0VHlwZWRBcnJheXMgPSBjb25jYXRUeXBlZEFycmF5cztcbmV4cG9ydHMuaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuZXhwb3J0cy5zdHJpbmdUb0J5dGVzID0gc3RyaW5nVG9CeXRlcztcbmV4cG9ydHMudG9VaW50OCA9IHRvVWludDg7XG4iXSwic291cmNlUm9vdCI6IiJ9