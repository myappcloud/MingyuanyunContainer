(window.webpackJsonp_module_entry_zjapp_=window.webpackJsonp_module_entry_zjapp_||[]).push([["report-water-percolation-project--index"],{"39ce":function(e,t,n){"use strict";n.r(t);var r=n("626a").a,a=(n("8642"),n("17cc")),u=Object(a.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("page-content",{attrs:{title:"报表-闭水试验"}},[e.isLoading?e._e():n("div",{staticClass:"report-water-percolatyion-wrap"},[e.data.length>0?n("div",{staticClass:"report-title van-hairline--top-bottom"},[n("div",{staticClass:"flex"},[e._v("楼栋")]),n("div",{staticClass:"tabel-cell"},[e._v("户数")]),n("div",{staticClass:"tabel-cell"},[e._v("合格")]),n("div",{staticClass:"tabel-cell"},[e._v("不合格")])]):e._e(),!e.isLoading&&e.data.length?n("div",{staticClass:"report-content"},e._l(e.data,(function(t,r){return n("div",{key:r,staticClass:"table-content"},[n("div",{staticClass:"table-title van-hairline--bottom"},[e._v(e._s(t.bidsection_name))]),e._l(t.buildings,(function(t,r){return n("div",{key:r,staticClass:"table-row van-hairline--bottom"},[n("div",{staticClass:"row-label flex"},[e._v(e._s(t.building_name+t.unitName))]),n("div",{staticClass:"tabel-cell van-hairline--left vertical",on:{click:function(n){e.goDetailList(t,"all")}}},[e._v(e._s(t.room_count))]),n("div",{staticClass:"tabel-cell vertical",on:{click:function(n){e.goDetailList(t,"qualified")}}},[e._v(e._s(t.passed_count))]),n("div",{staticClass:"tabel-cell vertical",on:{click:function(n){e.goDetailList(t,"unqualified")}}},[e._v(e._s(t.rejected_count))])])}))],2)}))):e._e(),n("loading-status",{attrs:{"is-loading":e.isLoading,"is-empty":!e.data.length,type:e.errorType,"empty-text":"report"===e.errorType?"没有报表数据":""}})],1)])}),[],!1,null,"6c62b848",null);t.default=u.exports},"3fc5":function(e,t,n){(e.exports=n("690e")(!1)).push([e.i,".zjapp .report-water-percolatyion-wrap[data-v-6c62b848]{height:100%;overflow:auto;background:#fff}.zjapp .report-water-percolatyion-wrap .item-select-project>*[data-v-6c62b848]{pointer-events:none}.zjapp .report-water-percolatyion-wrap .flex[data-v-6c62b848]{flex:1}.zjapp .report-water-percolatyion-wrap .report-content[data-v-6c62b848]{padding-bottom:100px}.zjapp .report-water-percolatyion-wrap .report-title[data-v-6c62b848]{position:relative;display:flex;align-items:center;justify-content:center;z-index:3;padding:10px 0;text-align:center;font-size:14px;color:#666;background-color:#fff}.zjapp .report-water-percolatyion-wrap .report-title .tabel-cell[data-v-6c62b848]{width:80px;line-height:20px}.zjapp .report-water-percolatyion-wrap .table-content[data-v-6c62b848]{background-color:#fff;text-align:center}.zjapp .report-water-percolatyion-wrap .table-content .table-title[data-v-6c62b848]{padding:10px;line-height:20px;text-align:center;color:#7a95d1;font-size:15px;background-color:#ebf1ff;word-break:break-all}.zjapp .report-water-percolatyion-wrap .table-content .table-row[data-v-6c62b848]{display:flex;align-items:center;justify-content:center;padding:0}.zjapp .report-water-percolatyion-wrap .table-content .row-label[data-v-6c62b848]{height:100%;padding:5px 15px;overflow:hidden;font-size:15px;color:#111}.zjapp .report-water-percolatyion-wrap .table-content .tabel-cell[data-v-6c62b848]{padding:10px 0;width:80px;line-height:20px;min-height:60px}.zjapp .report-water-percolatyion-wrap .table-content .tabel-cell.vertical[data-v-6c62b848]{line-height:40px;height:40px;padding:0;min-height:40px}",""])},5685:function(e,t,n){"use strict";(function(e){var r=n("162a"),a=n("6144"),u=n("9cd1"),o=n("da2f"),i=n("c77f");function c(e,t){return e?(e-t)/e*100:0}var s={getProcessCheckNewBuilding:function(e){var t=a.a.getString("reportDateType",a.a.level.user)||"month";return Object(o.d)({proj_id:e,query_type:t})},getProjTotalData:function(){return r.a.request("/report/project-over-view")},getDailyCheckData:function(e,t,n,a,u){var o={proj_id:e,bidsection_id:t,begin_date:n,end_date:a};return u&&(o.module=u),r.a.request("/report/check",o)},getReportCheckList:function(e){return r.a.request("/report/check-batch-problem-list",{batch_id:e.batchId,begin_date:e.dateStart,end_date:e.dateEnd})},getReportCheckTimeoutList:function(e,t,n){return r.a.request("/report/get-over-due-check",{proj_id:e,key:t,page:n,pageSize:15})},getOverDueCheckConfig:function(e){return r.a.request("/report/get-over-due-check-config",{proj_id:e})},getReportCheckDetail:function(e){return r.a.request("/report/check-batch-problem-detail",{id:e})},postReportCheckUpdate:function(e){return r.a.post("/checkquality-comment/upload",{},e)},postReportCheckSendBack:function(e){return r.a.post("/checkquality-comment/send-back",{},e)},measureProjectData:[],waterPercolationData:[],getMeasureData:function(t){return r.a.request("/report/measure",{proj_id:t}).then((function(t){return e.each(t,(function(t){t.repair_data={measurement_points_num:0,problem_points_num:0,checkitem_num:0,passport:0},t.supervision_data={measurement_points_num:0,problem_points_num:0,checkitem_num:0,passport:0},t.construct_data={measurement_points_num:0,problem_points_num:0,checkitem_num:0,passport:0},e.each(t.buildings,(function(n){n.repair_data={measurement_points_num:0,problem_points_num:0,checkitem_num:0,passport:0},n.supervision_data={measurement_points_num:0,problem_points_num:0,checkitem_num:0,passport:0},n.construct_data={measurement_points_num:0,problem_points_num:0,checkitem_num:0,passport:0},e.each(n.check_items,(function(r){r.repair_data={measurement_points_num:0,problem_points_num:0,checkitem_num:0,passport:0},r.supervision_data={measurement_points_num:0,problem_points_num:0,checkitem_num:0,passport:0},r.construct_data={measurement_points_num:0,problem_points_num:0,checkitem_num:0,passport:0},e.each(r.children,(function(a){t.repair_data.measurement_points_num+=a.measure_data[0].measurement_points,t.repair_data.problem_points_num+=a.measure_data[0].problem_points,t.repair_data.checkitem_num+=a.measure_data[0].measurement_points?1:0,t.supervision_data.measurement_points_num+=a.measure_data[1].measurement_points,t.supervision_data.problem_points_num+=a.measure_data[1].problem_points,t.supervision_data.checkitem_num+=a.measure_data[1].measurement_points?1:0,t.construct_data.measurement_points_num+=a.measure_data[2].measurement_points,t.construct_data.problem_points_num+=a.measure_data[2].problem_points,t.construct_data.checkitem_num+=a.measure_data[2].measurement_points?1:0,n.repair_data.measurement_points_num+=a.measure_data[0].measurement_points,n.repair_data.problem_points_num+=a.measure_data[0].problem_points,n.repair_data.checkitem_num+=a.measure_data[0].measurement_points?1:0,n.supervision_data.measurement_points_num+=a.measure_data[1].measurement_points,n.supervision_data.problem_points_num+=a.measure_data[1].problem_points,n.supervision_data.checkitem_num+=a.measure_data[1].measurement_points?1:0,n.construct_data.measurement_points_num+=a.measure_data[2].measurement_points,n.construct_data.problem_points_num+=a.measure_data[2].problem_points,n.construct_data.checkitem_num+=a.measure_data[2].measurement_points?1:0,r.repair_data.measurement_points_num+=a.measure_data[0].measurement_points,r.repair_data.problem_points_num+=a.measure_data[0].problem_points,r.repair_data.checkitem_num+=a.measure_data[0].measurement_points?1:0,r.supervision_data.measurement_points_num+=a.measure_data[1].measurement_points,r.supervision_data.problem_points_num+=a.measure_data[1].problem_points,r.supervision_data.checkitem_num+=a.measure_data[1].measurement_points?1:0,r.construct_data.measurement_points_num+=a.measure_data[2].measurement_points,r.construct_data.problem_points_num+=a.measure_data[2].problem_points,r.construct_data.checkitem_num+=a.measure_data[2].measurement_points?1:0,e.each(a.measure_data,(function(e){e.measurement_points?e.passport=(e.measurement_points-e.problem_points)/e.measurement_points*100:e.passport=0}))})),r.repair_data.passport=c(r.repair_data.measurement_points_num,r.repair_data.problem_points_num),r.supervision_data.passport=c(r.supervision_data.measurement_points_num,r.supervision_data.problem_points_num),r.construct_data.passport=c(r.construct_data.measurement_points_num,r.construct_data.problem_points_num)})),n.repair_data.passport=c(n.repair_data.measurement_points_num,n.repair_data.problem_points_num),n.supervision_data.passport=c(n.supervision_data.measurement_points_num,n.supervision_data.problem_points_num),n.construct_data.passport=c(n.construct_data.measurement_points_num,n.construct_data.problem_points_num)})),t.repair_data.passport=c(t.repair_data.measurement_points_num,t.repair_data.problem_points_num),t.supervision_data.passport=c(t.supervision_data.measurement_points_num,t.supervision_data.problem_points_num),t.construct_data.passport=c(t.construct_data.measurement_points_num,t.construct_data.problem_points_num)})),t}))},measureBuildData:{},setMeasureBuildData:function(e){s.measureBuildData=e},getMeasureBuildData:function(t){return e.isEmpty(s.measureBuildData)?s.getMeasureData(t).then((function(e){return e[0]})):Promise.resolve(s.measureBuildData)},getCheckAcceptData:function(e){return r.a.request("/report/check-accept",{proj_id:e})},getCheckAcceptDataOfBuilding:function(e,t,n){return r.a.request("/report/check-accept-detail",{section_id:e,building_id:t,unit:n||""})},getProcessCheckData:function(e,t){return r.a.request("/report/processcheck",{building_id:e,unit:t})},getProcessCheckData2:function(e){return Object(o.g)({building_id:e})},getMaterialData:function(e,t,n){return r.a.request("/report/material",{proj_id:e,begin_date:t,end_date:n})},getProcessAcceptBuilding:function(e){var t=a.a.getString("reportDateType",a.a.level.user)||"month";return Object(i.m)({proj_id:e,query_type:t})},getWaterPercolation:function(e){return r.a.request("/report/close-water-test",{proj_id:e})},getProcessAcceptData:function(e,t,n,r){return Object(i.n)({building_id:e,unit:t,start:n||"",end:r||""})},getProcessAcceptPileItem:function(e){return r.a.request("/report/get-pile-check-items",{bidsection_id:e})},getProcessAcceptPileData:function(e,t){return r.a.request("/report/process-accept-with-pile",{building_id:e,item_id:t})},getMeasureCheckedData:function(){return r.a.request("/report/leader-measure")},getSchedulePlanData:function(){return Object(u.i)()},getSchedulePlanProjectData:function(e){return Object(u.a)({proj_id:e})},getCheckProblemStatisticsData:function(e){return r.a.request("/report/leader-secure",e)},getProcessCheckStatisticsData:function(){return Object(o.k)()},schedulePlanNodeList:function(e){return Object(u.e)({plan_id:e})}};t.a=s}).call(this,n("391c"))},5954:function(e,t,n){var r=n("3fc5");"string"==typeof r&&(r=[[e.i,r,""]]),r.locals&&(e.exports=r.locals);(0,n("85cb").default)("50b8fa4e",r,!0,{sourceMap:!1,shadowMode:!1})},"626a":function(e,t,n){"use strict";(function(e){n("5ab2"),n("6d57"),n("e10e");var r=n("28f8"),a=n("07d2"),u=n("7cb8"),o=n("5685");function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}t.a={name:"ReportWaterPercolationIndex",components:{item:a.a},data:function(){return{isLoading:!0,errorType:"report",data:{}}},computed:{projectSelected:function(){return this.$store.state.global.currentReportProject}},activated:function(){this.getReportData()},methods:{getReportData:function(){var t=this;this.isLoading=!0,this.errorType="report";var n=this.projectSelected.id;o.a.getWaterPercolation(n).then((function(n){e.each(n,(function(t){e.each(t.buildings,(function(e){e.unitName=Object(u.a)(e.unit,"单元")}))})),t.data=n})).catch((function(e){t.errorType="error",Popup.alert(e)})).finally((function(){t.isLoading=!1}))},goDetailList:function(e,t){var n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){Object(r.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({filter:t},e);this.$router.push({name:"ReportWaterPercolationList",query:n})}}}}).call(this,n("391c"))},8642:function(e,t,n){"use strict";n("5954")},"9cd1":function(e,t,n){"use strict";n.d(t,"h",(function(){return o})),n.d(t,"m",(function(){return i})),n.d(t,"g",(function(){return c})),n.d(t,"f",(function(){return s})),n.d(t,"d",(function(){return p})),n.d(t,"l",(function(){return l})),n.d(t,"k",(function(){return d})),n.d(t,"j",(function(){return m})),n.d(t,"b",(function(){return _})),n.d(t,"e",(function(){return f})),n.d(t,"c",(function(){return b})),n.d(t,"i",(function(){return h})),n.d(t,"a",(function(){return v}));var r=n("5e8d"),a=n("162a"),u=n("bcc78");function o(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanTaskInfo.url;return a.a.request(t,e)}))}function i(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanSaveTask.url;return a.a.post(t,null,e)}))}function c(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanPlanList.url;return a.a.request(t,e)}))}function s(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanNodeList.url;return a.a.request(t,e)}))}function p(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanNodeInfo.url;return a.a.request(t,e)}))}function l(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanSaveReport.url;return a.a.post(t,null,e)}))}function d(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanSaveCompleteTime.url;return a.a.post(t,null,e)}))}function m(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanSaveChecker.url;return a.a.post(t,null,e)}))}function _(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanCheckerLogList.url;return a.a.request(t,e)}))}function f(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanNodeLevel.url;return a.a.request(t,e)}))}function b(){return Object(r.a)().then((function(){var e=u.a.schedulePlanCompletedTimeSetting.url;return a.a.request(e)}))}function h(){return Object(r.a)().then((function(){var e=u.a.schedulePlanLeaderSchedulePlan.url;return a.a.request(e)}))}function v(e){return Object(r.a)().then((function(){var t=u.a.schedulePlanGetByFirstProject.url;return a.a.request(t,e)}))}},c77f:function(e,t,n){"use strict";n.d(t,"i",(function(){return i})),n.d(t,"h",(function(){return c})),n.d(t,"a",(function(){return s})),n.d(t,"f",(function(){return p})),n.d(t,"g",(function(){return l})),n.d(t,"e",(function(){return d})),n.d(t,"m",(function(){return m})),n.d(t,"n",(function(){return _})),n.d(t,"b",(function(){return f})),n.d(t,"j",(function(){return b})),n.d(t,"k",(function(){return h})),n.d(t,"c",(function(){return v})),n.d(t,"d",(function(){return g})),n.d(t,"l",(function(){return j})),n.d(t,"o",(function(){return k}));var r=n("5e8d"),a=n("162a"),u=n("bcc78"),o=n("da71");function i(e){return Object(r.a)().then((function(){var t=u.a.commonGetProblemClassTree.url;return a.a.request(t,e)}))}function c(e){return Object(r.a)().then((function(){var t=u.a.pileAcceptGetPileBuildingSummary.url;return a.a.request(t,e)}))}function s(e){return Object(r.a)().then((function(){var t=u.a.pileAcceptGetBidsectionBuildingTree.url;return a.a.request(t,e)}))}function p(){return Object(r.a)().then((function(){var e=u.a.pileAcceptGetPileAcceptItems.url;return a.a.request(e)}))}function l(e){return Object(r.a)().then((function(){var t=u.a.pileAcceptGetPileAcceptList.url;return a.a.request(t,e)}))}function d(e){return Object(r.a)().then((function(){var t=u.a.pileAcceptGetPileAcceptInfo.url;return a.a.request(t,e)}))}function m(e){return Object(r.a)().then((function(){var t=u.a.processAcceptBuilding.url;return a.a.request(t,e)}))}function _(e){return Object(r.a)().then((function(){var t=u.a.processAcceptCollect.url;return a.a.request(t,e)}))}function f(e){return Object(r.a)().then((function(){var t=u.a.processAcceptv3GetBuildingList.url;return a.a.request(t,e)}))}function b(e){return Object(r.a)().then((function(){var t=u.a.processAcceptv3GetProcessAcceptv3List.url;return a.a.request(t,e)}))}function h(e){return Object(r.a)().then((function(){var t=o.a.getReportOrgTree.url;return a.a.request(t,e)}))}function v(e){return Object(r.a)().then((function(){var t=o.a.getHomeReports.url;return a.a.request(t,e)}))}function g(e){return Object(r.a)().then((function(){var t=o.a.getMyReports.url;return a.a.request(t,e)}))}function j(e){return Object(r.a)().then((function(){var t=o.a.getReportPools.url;return a.a.request(t,e)}))}function k(e){return Object(r.a)().then((function(){var t=o.a.saveMyReportsSetting.url;return a.a.post(t,null,e)}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,